
13_I2C Polling Mode_Slave[STM32L4].elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a58  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003be0  08003be0  00013be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c20  08003c20  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003c20  08003c20  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c20  08003c20  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c20  08003c20  00013c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c24  08003c24  00013c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003c28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  2000000c  08003c34  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000008c  08003c34  0002008c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009f48  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d38  00000000  00000000  00029fc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a38  00000000  00000000  0002bd00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007b9  00000000  00000000  0002c738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000250ab  00000000  00000000  0002cef1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d1a7  00000000  00000000  00051f9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e19e4  00000000  00000000  0005f143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002818  00000000  00000000  00140b28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  00143340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003bc8 	.word	0x08003bc8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003bc8 	.word	0x08003bc8

080001c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80001ce:	4b0f      	ldr	r3, [pc, #60]	; (800020c <MX_GPIO_Init+0x44>)
 80001d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001d2:	4a0e      	ldr	r2, [pc, #56]	; (800020c <MX_GPIO_Init+0x44>)
 80001d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80001d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80001da:	4b0c      	ldr	r3, [pc, #48]	; (800020c <MX_GPIO_Init+0x44>)
 80001dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80001e2:	607b      	str	r3, [r7, #4]
 80001e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001e6:	4b09      	ldr	r3, [pc, #36]	; (800020c <MX_GPIO_Init+0x44>)
 80001e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001ea:	4a08      	ldr	r2, [pc, #32]	; (800020c <MX_GPIO_Init+0x44>)
 80001ec:	f043 0302 	orr.w	r3, r3, #2
 80001f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80001f2:	4b06      	ldr	r3, [pc, #24]	; (800020c <MX_GPIO_Init+0x44>)
 80001f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001f6:	f003 0302 	and.w	r3, r3, #2
 80001fa:	603b      	str	r3, [r7, #0]
 80001fc:	683b      	ldr	r3, [r7, #0]

}
 80001fe:	bf00      	nop
 8000200:	370c      	adds	r7, #12
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	40021000 	.word	0x40021000

08000210 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000214:	4b1b      	ldr	r3, [pc, #108]	; (8000284 <MX_I2C1_Init+0x74>)
 8000216:	4a1c      	ldr	r2, [pc, #112]	; (8000288 <MX_I2C1_Init+0x78>)
 8000218:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800021a:	4b1a      	ldr	r3, [pc, #104]	; (8000284 <MX_I2C1_Init+0x74>)
 800021c:	4a1b      	ldr	r2, [pc, #108]	; (800028c <MX_I2C1_Init+0x7c>)
 800021e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 36;
 8000220:	4b18      	ldr	r3, [pc, #96]	; (8000284 <MX_I2C1_Init+0x74>)
 8000222:	2224      	movs	r2, #36	; 0x24
 8000224:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000226:	4b17      	ldr	r3, [pc, #92]	; (8000284 <MX_I2C1_Init+0x74>)
 8000228:	2201      	movs	r2, #1
 800022a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800022c:	4b15      	ldr	r3, [pc, #84]	; (8000284 <MX_I2C1_Init+0x74>)
 800022e:	2200      	movs	r2, #0
 8000230:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000232:	4b14      	ldr	r3, [pc, #80]	; (8000284 <MX_I2C1_Init+0x74>)
 8000234:	2200      	movs	r2, #0
 8000236:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000238:	4b12      	ldr	r3, [pc, #72]	; (8000284 <MX_I2C1_Init+0x74>)
 800023a:	2200      	movs	r2, #0
 800023c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800023e:	4b11      	ldr	r3, [pc, #68]	; (8000284 <MX_I2C1_Init+0x74>)
 8000240:	2200      	movs	r2, #0
 8000242:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000244:	4b0f      	ldr	r3, [pc, #60]	; (8000284 <MX_I2C1_Init+0x74>)
 8000246:	2200      	movs	r2, #0
 8000248:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800024a:	480e      	ldr	r0, [pc, #56]	; (8000284 <MX_I2C1_Init+0x74>)
 800024c:	f000 fd58 	bl	8000d00 <HAL_I2C_Init>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d001      	beq.n	800025a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000256:	f000 f931 	bl	80004bc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800025a:	2100      	movs	r1, #0
 800025c:	4809      	ldr	r0, [pc, #36]	; (8000284 <MX_I2C1_Init+0x74>)
 800025e:	f002 f907 	bl	8002470 <HAL_I2CEx_ConfigAnalogFilter>
 8000262:	4603      	mov	r3, r0
 8000264:	2b00      	cmp	r3, #0
 8000266:	d001      	beq.n	800026c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000268:	f000 f928 	bl	80004bc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800026c:	2100      	movs	r1, #0
 800026e:	4805      	ldr	r0, [pc, #20]	; (8000284 <MX_I2C1_Init+0x74>)
 8000270:	f002 f949 	bl	8002506 <HAL_I2CEx_ConfigDigitalFilter>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800027a:	f000 f91f 	bl	80004bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800027e:	bf00      	nop
 8000280:	bd80      	pop	{r7, pc}
 8000282:	bf00      	nop
 8000284:	20000034 	.word	0x20000034
 8000288:	40005400 	.word	0x40005400
 800028c:	10909cec 	.word	0x10909cec

08000290 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b0ac      	sub	sp, #176	; 0xb0
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000298:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800029c:	2200      	movs	r2, #0
 800029e:	601a      	str	r2, [r3, #0]
 80002a0:	605a      	str	r2, [r3, #4]
 80002a2:	609a      	str	r2, [r3, #8]
 80002a4:	60da      	str	r2, [r3, #12]
 80002a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002a8:	f107 0314 	add.w	r3, r7, #20
 80002ac:	2288      	movs	r2, #136	; 0x88
 80002ae:	2100      	movs	r1, #0
 80002b0:	4618      	mov	r0, r3
 80002b2:	f003 fc5d 	bl	8003b70 <memset>
  if(i2cHandle->Instance==I2C1)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	4a29      	ldr	r2, [pc, #164]	; (8000360 <HAL_I2C_MspInit+0xd0>)
 80002bc:	4293      	cmp	r3, r2
 80002be:	d14b      	bne.n	8000358 <HAL_I2C_MspInit+0xc8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80002c0:	2340      	movs	r3, #64	; 0x40
 80002c2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80002c4:	2300      	movs	r3, #0
 80002c6:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002c8:	f107 0314 	add.w	r3, r7, #20
 80002cc:	4618      	mov	r0, r3
 80002ce:	f002 ff93 	bl	80031f8 <HAL_RCCEx_PeriphCLKConfig>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d001      	beq.n	80002dc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80002d8:	f000 f8f0 	bl	80004bc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80002dc:	4b21      	ldr	r3, [pc, #132]	; (8000364 <HAL_I2C_MspInit+0xd4>)
 80002de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002e0:	4a20      	ldr	r2, [pc, #128]	; (8000364 <HAL_I2C_MspInit+0xd4>)
 80002e2:	f043 0302 	orr.w	r3, r3, #2
 80002e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002e8:	4b1e      	ldr	r3, [pc, #120]	; (8000364 <HAL_I2C_MspInit+0xd4>)
 80002ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ec:	f003 0302 	and.w	r3, r3, #2
 80002f0:	613b      	str	r3, [r7, #16]
 80002f2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80002f4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80002f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80002fc:	2312      	movs	r3, #18
 80002fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000302:	2300      	movs	r3, #0
 8000304:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000308:	2303      	movs	r3, #3
 800030a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800030e:	2304      	movs	r3, #4
 8000310:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000314:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000318:	4619      	mov	r1, r3
 800031a:	4813      	ldr	r0, [pc, #76]	; (8000368 <HAL_I2C_MspInit+0xd8>)
 800031c:	f000 fb46 	bl	80009ac <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000320:	4b10      	ldr	r3, [pc, #64]	; (8000364 <HAL_I2C_MspInit+0xd4>)
 8000322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000324:	4a0f      	ldr	r2, [pc, #60]	; (8000364 <HAL_I2C_MspInit+0xd4>)
 8000326:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800032a:	6593      	str	r3, [r2, #88]	; 0x58
 800032c:	4b0d      	ldr	r3, [pc, #52]	; (8000364 <HAL_I2C_MspInit+0xd4>)
 800032e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000330:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000334:	60fb      	str	r3, [r7, #12]
 8000336:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000338:	2200      	movs	r2, #0
 800033a:	2100      	movs	r1, #0
 800033c:	201f      	movs	r0, #31
 800033e:	f000 fab0 	bl	80008a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000342:	201f      	movs	r0, #31
 8000344:	f000 fac9 	bl	80008da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000348:	2200      	movs	r2, #0
 800034a:	2100      	movs	r1, #0
 800034c:	2020      	movs	r0, #32
 800034e:	f000 faa8 	bl	80008a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000352:	2020      	movs	r0, #32
 8000354:	f000 fac1 	bl	80008da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000358:	bf00      	nop
 800035a:	37b0      	adds	r7, #176	; 0xb0
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}
 8000360:	40005400 	.word	0x40005400
 8000364:	40021000 	.word	0x40021000
 8000368:	48000400 	.word	0x48000400

0800036c <HAL_I2C_ListenCpltCallback>:
}

/* USER CODE BEGIN 1 */

extern void HAL_I2C_ListenCpltCallback (I2C_HandleTypeDef *hi2c)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b082      	sub	sp, #8
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(hi2c);
 8000374:	6878      	ldr	r0, [r7, #4]
 8000376:	f000 fe11 	bl	8000f9c <HAL_I2C_EnableListen_IT>
}
 800037a:	bf00      	nop
 800037c:	3708      	adds	r7, #8
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}
	...

08000384 <HAL_I2C_AddrCallback>:


extern void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
 800038c:	460b      	mov	r3, r1
 800038e:	70fb      	strb	r3, [r7, #3]
 8000390:	4613      	mov	r3, r2
 8000392:	803b      	strh	r3, [r7, #0]
	if(TransferDirection == I2C_DIRECTION_TRANSMIT)  // if the master wants to transmit the data
 8000394:	78fb      	ldrb	r3, [r7, #3]
 8000396:	2b00      	cmp	r3, #0
 8000398:	d107      	bne.n	80003aa <HAL_I2C_AddrCallback+0x26>
	{
		HAL_I2C_Slave_Sequential_Receive_IT(hi2c, RxData, 6, I2C_FIRST_AND_LAST_FRAME);
 800039a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800039e:	2206      	movs	r2, #6
 80003a0:	4905      	ldr	r1, [pc, #20]	; (80003b8 <HAL_I2C_AddrCallback+0x34>)
 80003a2:	6878      	ldr	r0, [r7, #4]
 80003a4:	f000 fd48 	bl	8000e38 <HAL_I2C_Slave_Seq_Receive_IT>
	}
	else  // master requesting the data is not supported yet
	{
		Error_Handler();
	}
}
 80003a8:	e001      	b.n	80003ae <HAL_I2C_AddrCallback+0x2a>
		Error_Handler();
 80003aa:	f000 f887 	bl	80004bc <Error_Handler>
}
 80003ae:	bf00      	nop
 80003b0:	3708      	adds	r7, #8
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	2000002c 	.word	0x2000002c

080003bc <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80003bc:	b480      	push	{r7}
 80003be:	b083      	sub	sp, #12
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
	count++;
 80003c4:	4b05      	ldr	r3, [pc, #20]	; (80003dc <HAL_I2C_SlaveRxCpltCallback+0x20>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	3301      	adds	r3, #1
 80003ca:	4a04      	ldr	r2, [pc, #16]	; (80003dc <HAL_I2C_SlaveRxCpltCallback+0x20>)
 80003cc:	6013      	str	r3, [r2, #0]
}
 80003ce:	bf00      	nop
 80003d0:	370c      	adds	r7, #12
 80003d2:	46bd      	mov	sp, r7
 80003d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d8:	4770      	bx	lr
 80003da:	bf00      	nop
 80003dc:	20000028 	.word	0x20000028

080003e0 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b082      	sub	sp, #8
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(hi2c);
 80003e8:	6878      	ldr	r0, [r7, #4]
 80003ea:	f000 fdd7 	bl	8000f9c <HAL_I2C_EnableListen_IT>
}
 80003ee:	bf00      	nop
 80003f0:	3708      	adds	r7, #8
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}
	...

080003f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003fc:	f000 f901 	bl	8000602 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000400:	f000 f80a 	bl	8000418 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000404:	f7ff fee0 	bl	80001c8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000408:	f7ff ff02 	bl	8000210 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2C_EnableListen_IT(&hi2c1);
 800040c:	4801      	ldr	r0, [pc, #4]	; (8000414 <main+0x1c>)
 800040e:	f000 fdc5 	bl	8000f9c <HAL_I2C_EnableListen_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000412:	e7fe      	b.n	8000412 <main+0x1a>
 8000414:	20000034 	.word	0x20000034

08000418 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b096      	sub	sp, #88	; 0x58
 800041c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800041e:	f107 0314 	add.w	r3, r7, #20
 8000422:	2244      	movs	r2, #68	; 0x44
 8000424:	2100      	movs	r1, #0
 8000426:	4618      	mov	r0, r3
 8000428:	f003 fba2 	bl	8003b70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800042c:	463b      	mov	r3, r7
 800042e:	2200      	movs	r2, #0
 8000430:	601a      	str	r2, [r3, #0]
 8000432:	605a      	str	r2, [r3, #4]
 8000434:	609a      	str	r2, [r3, #8]
 8000436:	60da      	str	r2, [r3, #12]
 8000438:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800043a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800043e:	f002 f8bd 	bl	80025bc <HAL_PWREx_ControlVoltageScaling>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d001      	beq.n	800044c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000448:	f000 f838 	bl	80004bc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800044c:	2310      	movs	r3, #16
 800044e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000450:	2301      	movs	r3, #1
 8000452:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000454:	2300      	movs	r3, #0
 8000456:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000458:	2360      	movs	r3, #96	; 0x60
 800045a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800045c:	2302      	movs	r3, #2
 800045e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000460:	2301      	movs	r3, #1
 8000462:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000464:	2301      	movs	r3, #1
 8000466:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000468:	2328      	movs	r3, #40	; 0x28
 800046a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800046c:	2307      	movs	r3, #7
 800046e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000470:	2302      	movs	r3, #2
 8000472:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000474:	2302      	movs	r3, #2
 8000476:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000478:	f107 0314 	add.w	r3, r7, #20
 800047c:	4618      	mov	r0, r3
 800047e:	f002 f8f3 	bl	8002668 <HAL_RCC_OscConfig>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d001      	beq.n	800048c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000488:	f000 f818 	bl	80004bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800048c:	230f      	movs	r3, #15
 800048e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000490:	2303      	movs	r3, #3
 8000492:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000494:	2300      	movs	r3, #0
 8000496:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000498:	2300      	movs	r3, #0
 800049a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800049c:	2300      	movs	r3, #0
 800049e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80004a0:	463b      	mov	r3, r7
 80004a2:	2104      	movs	r1, #4
 80004a4:	4618      	mov	r0, r3
 80004a6:	f002 fcbb 	bl	8002e20 <HAL_RCC_ClockConfig>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d001      	beq.n	80004b4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80004b0:	f000 f804 	bl	80004bc <Error_Handler>
  }
}
 80004b4:	bf00      	nop
 80004b6:	3758      	adds	r7, #88	; 0x58
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}

080004bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004c0:	b672      	cpsid	i
}
 80004c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004c4:	e7fe      	b.n	80004c4 <Error_Handler+0x8>
	...

080004c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004ce:	4b0f      	ldr	r3, [pc, #60]	; (800050c <HAL_MspInit+0x44>)
 80004d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004d2:	4a0e      	ldr	r2, [pc, #56]	; (800050c <HAL_MspInit+0x44>)
 80004d4:	f043 0301 	orr.w	r3, r3, #1
 80004d8:	6613      	str	r3, [r2, #96]	; 0x60
 80004da:	4b0c      	ldr	r3, [pc, #48]	; (800050c <HAL_MspInit+0x44>)
 80004dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004de:	f003 0301 	and.w	r3, r3, #1
 80004e2:	607b      	str	r3, [r7, #4]
 80004e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004e6:	4b09      	ldr	r3, [pc, #36]	; (800050c <HAL_MspInit+0x44>)
 80004e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004ea:	4a08      	ldr	r2, [pc, #32]	; (800050c <HAL_MspInit+0x44>)
 80004ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004f0:	6593      	str	r3, [r2, #88]	; 0x58
 80004f2:	4b06      	ldr	r3, [pc, #24]	; (800050c <HAL_MspInit+0x44>)
 80004f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004fa:	603b      	str	r3, [r7, #0]
 80004fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004fe:	bf00      	nop
 8000500:	370c      	adds	r7, #12
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	40021000 	.word	0x40021000

08000510 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000514:	e7fe      	b.n	8000514 <NMI_Handler+0x4>

08000516 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000516:	b480      	push	{r7}
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800051a:	e7fe      	b.n	800051a <HardFault_Handler+0x4>

0800051c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000520:	e7fe      	b.n	8000520 <MemManage_Handler+0x4>

08000522 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000522:	b480      	push	{r7}
 8000524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000526:	e7fe      	b.n	8000526 <BusFault_Handler+0x4>

08000528 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800052c:	e7fe      	b.n	800052c <UsageFault_Handler+0x4>

0800052e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800052e:	b480      	push	{r7}
 8000530:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000532:	bf00      	nop
 8000534:	46bd      	mov	sp, r7
 8000536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053a:	4770      	bx	lr

0800053c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000540:	bf00      	nop
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr

0800054a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800054a:	b480      	push	{r7}
 800054c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800054e:	bf00      	nop
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr

08000558 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800055c:	f000 f8a6 	bl	80006ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000560:	bf00      	nop
 8000562:	bd80      	pop	{r7, pc}

08000564 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000568:	4802      	ldr	r0, [pc, #8]	; (8000574 <I2C1_EV_IRQHandler+0x10>)
 800056a:	f000 fd37 	bl	8000fdc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800056e:	bf00      	nop
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	20000034 	.word	0x20000034

08000578 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800057c:	4802      	ldr	r0, [pc, #8]	; (8000588 <I2C1_ER_IRQHandler+0x10>)
 800057e:	f000 fd47 	bl	8001010 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000582:	bf00      	nop
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	20000034 	.word	0x20000034

0800058c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000590:	4b06      	ldr	r3, [pc, #24]	; (80005ac <SystemInit+0x20>)
 8000592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000596:	4a05      	ldr	r2, [pc, #20]	; (80005ac <SystemInit+0x20>)
 8000598:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800059c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80005a0:	bf00      	nop
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	e000ed00 	.word	0xe000ed00

080005b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80005b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005e8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005b4:	f7ff ffea 	bl	800058c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005b8:	480c      	ldr	r0, [pc, #48]	; (80005ec <LoopForever+0x6>)
  ldr r1, =_edata
 80005ba:	490d      	ldr	r1, [pc, #52]	; (80005f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005bc:	4a0d      	ldr	r2, [pc, #52]	; (80005f4 <LoopForever+0xe>)
  movs r3, #0
 80005be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005c0:	e002      	b.n	80005c8 <LoopCopyDataInit>

080005c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005c6:	3304      	adds	r3, #4

080005c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005cc:	d3f9      	bcc.n	80005c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ce:	4a0a      	ldr	r2, [pc, #40]	; (80005f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005d0:	4c0a      	ldr	r4, [pc, #40]	; (80005fc <LoopForever+0x16>)
  movs r3, #0
 80005d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005d4:	e001      	b.n	80005da <LoopFillZerobss>

080005d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005d8:	3204      	adds	r2, #4

080005da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005dc:	d3fb      	bcc.n	80005d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005de:	f003 facf 	bl	8003b80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005e2:	f7ff ff09 	bl	80003f8 <main>

080005e6 <LoopForever>:

LoopForever:
    b LoopForever
 80005e6:	e7fe      	b.n	80005e6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80005e8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80005ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005f0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005f4:	08003c28 	.word	0x08003c28
  ldr r2, =_sbss
 80005f8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005fc:	2000008c 	.word	0x2000008c

08000600 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000600:	e7fe      	b.n	8000600 <ADC1_2_IRQHandler>

08000602 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000602:	b580      	push	{r7, lr}
 8000604:	b082      	sub	sp, #8
 8000606:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000608:	2300      	movs	r3, #0
 800060a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800060c:	2003      	movs	r0, #3
 800060e:	f000 f93d 	bl	800088c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000612:	200f      	movs	r0, #15
 8000614:	f000 f80e 	bl	8000634 <HAL_InitTick>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d002      	beq.n	8000624 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800061e:	2301      	movs	r3, #1
 8000620:	71fb      	strb	r3, [r7, #7]
 8000622:	e001      	b.n	8000628 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000624:	f7ff ff50 	bl	80004c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000628:	79fb      	ldrb	r3, [r7, #7]
}
 800062a:	4618      	mov	r0, r3
 800062c:	3708      	adds	r7, #8
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
	...

08000634 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800063c:	2300      	movs	r3, #0
 800063e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000640:	4b17      	ldr	r3, [pc, #92]	; (80006a0 <HAL_InitTick+0x6c>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d023      	beq.n	8000690 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000648:	4b16      	ldr	r3, [pc, #88]	; (80006a4 <HAL_InitTick+0x70>)
 800064a:	681a      	ldr	r2, [r3, #0]
 800064c:	4b14      	ldr	r3, [pc, #80]	; (80006a0 <HAL_InitTick+0x6c>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	4619      	mov	r1, r3
 8000652:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000656:	fbb3 f3f1 	udiv	r3, r3, r1
 800065a:	fbb2 f3f3 	udiv	r3, r2, r3
 800065e:	4618      	mov	r0, r3
 8000660:	f000 f949 	bl	80008f6 <HAL_SYSTICK_Config>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d10f      	bne.n	800068a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	2b0f      	cmp	r3, #15
 800066e:	d809      	bhi.n	8000684 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000670:	2200      	movs	r2, #0
 8000672:	6879      	ldr	r1, [r7, #4]
 8000674:	f04f 30ff 	mov.w	r0, #4294967295
 8000678:	f000 f913 	bl	80008a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800067c:	4a0a      	ldr	r2, [pc, #40]	; (80006a8 <HAL_InitTick+0x74>)
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	6013      	str	r3, [r2, #0]
 8000682:	e007      	b.n	8000694 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000684:	2301      	movs	r3, #1
 8000686:	73fb      	strb	r3, [r7, #15]
 8000688:	e004      	b.n	8000694 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800068a:	2301      	movs	r3, #1
 800068c:	73fb      	strb	r3, [r7, #15]
 800068e:	e001      	b.n	8000694 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000690:	2301      	movs	r3, #1
 8000692:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000694:	7bfb      	ldrb	r3, [r7, #15]
}
 8000696:	4618      	mov	r0, r3
 8000698:	3710      	adds	r7, #16
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000008 	.word	0x20000008
 80006a4:	20000000 	.word	0x20000000
 80006a8:	20000004 	.word	0x20000004

080006ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <HAL_IncTick+0x20>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	461a      	mov	r2, r3
 80006b6:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <HAL_IncTick+0x24>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4413      	add	r3, r2
 80006bc:	4a04      	ldr	r2, [pc, #16]	; (80006d0 <HAL_IncTick+0x24>)
 80006be:	6013      	str	r3, [r2, #0]
}
 80006c0:	bf00      	nop
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	20000008 	.word	0x20000008
 80006d0:	20000088 	.word	0x20000088

080006d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  return uwTick;
 80006d8:	4b03      	ldr	r3, [pc, #12]	; (80006e8 <HAL_GetTick+0x14>)
 80006da:	681b      	ldr	r3, [r3, #0]
}
 80006dc:	4618      	mov	r0, r3
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	20000088 	.word	0x20000088

080006ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b085      	sub	sp, #20
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	f003 0307 	and.w	r3, r3, #7
 80006fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006fc:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <__NVIC_SetPriorityGrouping+0x44>)
 80006fe:	68db      	ldr	r3, [r3, #12]
 8000700:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000702:	68ba      	ldr	r2, [r7, #8]
 8000704:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000708:	4013      	ands	r3, r2
 800070a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000714:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000718:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800071c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800071e:	4a04      	ldr	r2, [pc, #16]	; (8000730 <__NVIC_SetPriorityGrouping+0x44>)
 8000720:	68bb      	ldr	r3, [r7, #8]
 8000722:	60d3      	str	r3, [r2, #12]
}
 8000724:	bf00      	nop
 8000726:	3714      	adds	r7, #20
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr
 8000730:	e000ed00 	.word	0xe000ed00

08000734 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000738:	4b04      	ldr	r3, [pc, #16]	; (800074c <__NVIC_GetPriorityGrouping+0x18>)
 800073a:	68db      	ldr	r3, [r3, #12]
 800073c:	0a1b      	lsrs	r3, r3, #8
 800073e:	f003 0307 	and.w	r3, r3, #7
}
 8000742:	4618      	mov	r0, r3
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr
 800074c:	e000ed00 	.word	0xe000ed00

08000750 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800075a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075e:	2b00      	cmp	r3, #0
 8000760:	db0b      	blt.n	800077a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000762:	79fb      	ldrb	r3, [r7, #7]
 8000764:	f003 021f 	and.w	r2, r3, #31
 8000768:	4907      	ldr	r1, [pc, #28]	; (8000788 <__NVIC_EnableIRQ+0x38>)
 800076a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076e:	095b      	lsrs	r3, r3, #5
 8000770:	2001      	movs	r0, #1
 8000772:	fa00 f202 	lsl.w	r2, r0, r2
 8000776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800077a:	bf00      	nop
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	e000e100 	.word	0xe000e100

0800078c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	6039      	str	r1, [r7, #0]
 8000796:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079c:	2b00      	cmp	r3, #0
 800079e:	db0a      	blt.n	80007b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	b2da      	uxtb	r2, r3
 80007a4:	490c      	ldr	r1, [pc, #48]	; (80007d8 <__NVIC_SetPriority+0x4c>)
 80007a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007aa:	0112      	lsls	r2, r2, #4
 80007ac:	b2d2      	uxtb	r2, r2
 80007ae:	440b      	add	r3, r1
 80007b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007b4:	e00a      	b.n	80007cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	b2da      	uxtb	r2, r3
 80007ba:	4908      	ldr	r1, [pc, #32]	; (80007dc <__NVIC_SetPriority+0x50>)
 80007bc:	79fb      	ldrb	r3, [r7, #7]
 80007be:	f003 030f 	and.w	r3, r3, #15
 80007c2:	3b04      	subs	r3, #4
 80007c4:	0112      	lsls	r2, r2, #4
 80007c6:	b2d2      	uxtb	r2, r2
 80007c8:	440b      	add	r3, r1
 80007ca:	761a      	strb	r2, [r3, #24]
}
 80007cc:	bf00      	nop
 80007ce:	370c      	adds	r7, #12
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr
 80007d8:	e000e100 	.word	0xe000e100
 80007dc:	e000ed00 	.word	0xe000ed00

080007e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b089      	sub	sp, #36	; 0x24
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	60f8      	str	r0, [r7, #12]
 80007e8:	60b9      	str	r1, [r7, #8]
 80007ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	f003 0307 	and.w	r3, r3, #7
 80007f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007f4:	69fb      	ldr	r3, [r7, #28]
 80007f6:	f1c3 0307 	rsb	r3, r3, #7
 80007fa:	2b04      	cmp	r3, #4
 80007fc:	bf28      	it	cs
 80007fe:	2304      	movcs	r3, #4
 8000800:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000802:	69fb      	ldr	r3, [r7, #28]
 8000804:	3304      	adds	r3, #4
 8000806:	2b06      	cmp	r3, #6
 8000808:	d902      	bls.n	8000810 <NVIC_EncodePriority+0x30>
 800080a:	69fb      	ldr	r3, [r7, #28]
 800080c:	3b03      	subs	r3, #3
 800080e:	e000      	b.n	8000812 <NVIC_EncodePriority+0x32>
 8000810:	2300      	movs	r3, #0
 8000812:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000814:	f04f 32ff 	mov.w	r2, #4294967295
 8000818:	69bb      	ldr	r3, [r7, #24]
 800081a:	fa02 f303 	lsl.w	r3, r2, r3
 800081e:	43da      	mvns	r2, r3
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	401a      	ands	r2, r3
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000828:	f04f 31ff 	mov.w	r1, #4294967295
 800082c:	697b      	ldr	r3, [r7, #20]
 800082e:	fa01 f303 	lsl.w	r3, r1, r3
 8000832:	43d9      	mvns	r1, r3
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000838:	4313      	orrs	r3, r2
         );
}
 800083a:	4618      	mov	r0, r3
 800083c:	3724      	adds	r7, #36	; 0x24
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
	...

08000848 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	3b01      	subs	r3, #1
 8000854:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000858:	d301      	bcc.n	800085e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800085a:	2301      	movs	r3, #1
 800085c:	e00f      	b.n	800087e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800085e:	4a0a      	ldr	r2, [pc, #40]	; (8000888 <SysTick_Config+0x40>)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	3b01      	subs	r3, #1
 8000864:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000866:	210f      	movs	r1, #15
 8000868:	f04f 30ff 	mov.w	r0, #4294967295
 800086c:	f7ff ff8e 	bl	800078c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000870:	4b05      	ldr	r3, [pc, #20]	; (8000888 <SysTick_Config+0x40>)
 8000872:	2200      	movs	r2, #0
 8000874:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000876:	4b04      	ldr	r3, [pc, #16]	; (8000888 <SysTick_Config+0x40>)
 8000878:	2207      	movs	r2, #7
 800087a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800087c:	2300      	movs	r3, #0
}
 800087e:	4618      	mov	r0, r3
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	e000e010 	.word	0xe000e010

0800088c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000894:	6878      	ldr	r0, [r7, #4]
 8000896:	f7ff ff29 	bl	80006ec <__NVIC_SetPriorityGrouping>
}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008a2:	b580      	push	{r7, lr}
 80008a4:	b086      	sub	sp, #24
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	4603      	mov	r3, r0
 80008aa:	60b9      	str	r1, [r7, #8]
 80008ac:	607a      	str	r2, [r7, #4]
 80008ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80008b0:	2300      	movs	r3, #0
 80008b2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80008b4:	f7ff ff3e 	bl	8000734 <__NVIC_GetPriorityGrouping>
 80008b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008ba:	687a      	ldr	r2, [r7, #4]
 80008bc:	68b9      	ldr	r1, [r7, #8]
 80008be:	6978      	ldr	r0, [r7, #20]
 80008c0:	f7ff ff8e 	bl	80007e0 <NVIC_EncodePriority>
 80008c4:	4602      	mov	r2, r0
 80008c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008ca:	4611      	mov	r1, r2
 80008cc:	4618      	mov	r0, r3
 80008ce:	f7ff ff5d 	bl	800078c <__NVIC_SetPriority>
}
 80008d2:	bf00      	nop
 80008d4:	3718      	adds	r7, #24
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}

080008da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008da:	b580      	push	{r7, lr}
 80008dc:	b082      	sub	sp, #8
 80008de:	af00      	add	r7, sp, #0
 80008e0:	4603      	mov	r3, r0
 80008e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff ff31 	bl	8000750 <__NVIC_EnableIRQ>
}
 80008ee:	bf00      	nop
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}

080008f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008f6:	b580      	push	{r7, lr}
 80008f8:	b082      	sub	sp, #8
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008fe:	6878      	ldr	r0, [r7, #4]
 8000900:	f7ff ffa2 	bl	8000848 <SysTick_Config>
 8000904:	4603      	mov	r3, r0
}
 8000906:	4618      	mov	r0, r3
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800090e:	b580      	push	{r7, lr}
 8000910:	b084      	sub	sp, #16
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000916:	2300      	movs	r3, #0
 8000918:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000920:	b2db      	uxtb	r3, r3
 8000922:	2b02      	cmp	r3, #2
 8000924:	d005      	beq.n	8000932 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2204      	movs	r2, #4
 800092a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800092c:	2301      	movs	r3, #1
 800092e:	73fb      	strb	r3, [r7, #15]
 8000930:	e029      	b.n	8000986 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f022 020e 	bic.w	r2, r2, #14
 8000940:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f022 0201 	bic.w	r2, r2, #1
 8000950:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000956:	f003 021c 	and.w	r2, r3, #28
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095e:	2101      	movs	r1, #1
 8000960:	fa01 f202 	lsl.w	r2, r1, r2
 8000964:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	2201      	movs	r2, #1
 800096a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	2200      	movs	r2, #0
 8000972:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800097a:	2b00      	cmp	r3, #0
 800097c:	d003      	beq.n	8000986 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000982:	6878      	ldr	r0, [r7, #4]
 8000984:	4798      	blx	r3
    }
  }
  return status;
 8000986:	7bfb      	ldrb	r3, [r7, #15]
}
 8000988:	4618      	mov	r0, r3
 800098a:	3710      	adds	r7, #16
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}

08000990 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800099e:	b2db      	uxtb	r3, r3
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	370c      	adds	r7, #12
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr

080009ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b087      	sub	sp, #28
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
 80009b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009b6:	2300      	movs	r3, #0
 80009b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009ba:	e17f      	b.n	8000cbc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	2101      	movs	r1, #1
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	fa01 f303 	lsl.w	r3, r1, r3
 80009c8:	4013      	ands	r3, r2
 80009ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	f000 8171 	beq.w	8000cb6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	f003 0303 	and.w	r3, r3, #3
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d005      	beq.n	80009ec <HAL_GPIO_Init+0x40>
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	f003 0303 	and.w	r3, r3, #3
 80009e8:	2b02      	cmp	r3, #2
 80009ea:	d130      	bne.n	8000a4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	689b      	ldr	r3, [r3, #8]
 80009f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80009f2:	697b      	ldr	r3, [r7, #20]
 80009f4:	005b      	lsls	r3, r3, #1
 80009f6:	2203      	movs	r2, #3
 80009f8:	fa02 f303 	lsl.w	r3, r2, r3
 80009fc:	43db      	mvns	r3, r3
 80009fe:	693a      	ldr	r2, [r7, #16]
 8000a00:	4013      	ands	r3, r2
 8000a02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	68da      	ldr	r2, [r3, #12]
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	005b      	lsls	r3, r3, #1
 8000a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a10:	693a      	ldr	r2, [r7, #16]
 8000a12:	4313      	orrs	r3, r2
 8000a14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	693a      	ldr	r2, [r7, #16]
 8000a1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a22:	2201      	movs	r2, #1
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2a:	43db      	mvns	r3, r3
 8000a2c:	693a      	ldr	r2, [r7, #16]
 8000a2e:	4013      	ands	r3, r2
 8000a30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	091b      	lsrs	r3, r3, #4
 8000a38:	f003 0201 	and.w	r2, r3, #1
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a42:	693a      	ldr	r2, [r7, #16]
 8000a44:	4313      	orrs	r3, r2
 8000a46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	693a      	ldr	r2, [r7, #16]
 8000a4c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	f003 0303 	and.w	r3, r3, #3
 8000a56:	2b03      	cmp	r3, #3
 8000a58:	d118      	bne.n	8000a8c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000a60:	2201      	movs	r2, #1
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	fa02 f303 	lsl.w	r3, r2, r3
 8000a68:	43db      	mvns	r3, r3
 8000a6a:	693a      	ldr	r2, [r7, #16]
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	08db      	lsrs	r3, r3, #3
 8000a76:	f003 0201 	and.w	r2, r3, #1
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a80:	693a      	ldr	r2, [r7, #16]
 8000a82:	4313      	orrs	r3, r2
 8000a84:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	693a      	ldr	r2, [r7, #16]
 8000a8a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	f003 0303 	and.w	r3, r3, #3
 8000a94:	2b03      	cmp	r3, #3
 8000a96:	d017      	beq.n	8000ac8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	005b      	lsls	r3, r3, #1
 8000aa2:	2203      	movs	r2, #3
 8000aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa8:	43db      	mvns	r3, r3
 8000aaa:	693a      	ldr	r2, [r7, #16]
 8000aac:	4013      	ands	r3, r2
 8000aae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	689a      	ldr	r2, [r3, #8]
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	005b      	lsls	r3, r3, #1
 8000ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8000abc:	693a      	ldr	r2, [r7, #16]
 8000abe:	4313      	orrs	r3, r2
 8000ac0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	693a      	ldr	r2, [r7, #16]
 8000ac6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	f003 0303 	and.w	r3, r3, #3
 8000ad0:	2b02      	cmp	r3, #2
 8000ad2:	d123      	bne.n	8000b1c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	08da      	lsrs	r2, r3, #3
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	3208      	adds	r2, #8
 8000adc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	f003 0307 	and.w	r3, r3, #7
 8000ae8:	009b      	lsls	r3, r3, #2
 8000aea:	220f      	movs	r2, #15
 8000aec:	fa02 f303 	lsl.w	r3, r2, r3
 8000af0:	43db      	mvns	r3, r3
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	4013      	ands	r3, r2
 8000af6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	691a      	ldr	r2, [r3, #16]
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	f003 0307 	and.w	r3, r3, #7
 8000b02:	009b      	lsls	r3, r3, #2
 8000b04:	fa02 f303 	lsl.w	r3, r2, r3
 8000b08:	693a      	ldr	r2, [r7, #16]
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	08da      	lsrs	r2, r3, #3
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	3208      	adds	r2, #8
 8000b16:	6939      	ldr	r1, [r7, #16]
 8000b18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	005b      	lsls	r3, r3, #1
 8000b26:	2203      	movs	r2, #3
 8000b28:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2c:	43db      	mvns	r3, r3
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	4013      	ands	r3, r2
 8000b32:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	f003 0203 	and.w	r2, r3, #3
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	005b      	lsls	r3, r3, #1
 8000b40:	fa02 f303 	lsl.w	r3, r2, r3
 8000b44:	693a      	ldr	r2, [r7, #16]
 8000b46:	4313      	orrs	r3, r2
 8000b48:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	693a      	ldr	r2, [r7, #16]
 8000b4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	f000 80ac 	beq.w	8000cb6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5e:	4b5f      	ldr	r3, [pc, #380]	; (8000cdc <HAL_GPIO_Init+0x330>)
 8000b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b62:	4a5e      	ldr	r2, [pc, #376]	; (8000cdc <HAL_GPIO_Init+0x330>)
 8000b64:	f043 0301 	orr.w	r3, r3, #1
 8000b68:	6613      	str	r3, [r2, #96]	; 0x60
 8000b6a:	4b5c      	ldr	r3, [pc, #368]	; (8000cdc <HAL_GPIO_Init+0x330>)
 8000b6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	60bb      	str	r3, [r7, #8]
 8000b74:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b76:	4a5a      	ldr	r2, [pc, #360]	; (8000ce0 <HAL_GPIO_Init+0x334>)
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	089b      	lsrs	r3, r3, #2
 8000b7c:	3302      	adds	r3, #2
 8000b7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b82:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	f003 0303 	and.w	r3, r3, #3
 8000b8a:	009b      	lsls	r3, r3, #2
 8000b8c:	220f      	movs	r2, #15
 8000b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b92:	43db      	mvns	r3, r3
 8000b94:	693a      	ldr	r2, [r7, #16]
 8000b96:	4013      	ands	r3, r2
 8000b98:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ba0:	d025      	beq.n	8000bee <HAL_GPIO_Init+0x242>
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4a4f      	ldr	r2, [pc, #316]	; (8000ce4 <HAL_GPIO_Init+0x338>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d01f      	beq.n	8000bea <HAL_GPIO_Init+0x23e>
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4a4e      	ldr	r2, [pc, #312]	; (8000ce8 <HAL_GPIO_Init+0x33c>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d019      	beq.n	8000be6 <HAL_GPIO_Init+0x23a>
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4a4d      	ldr	r2, [pc, #308]	; (8000cec <HAL_GPIO_Init+0x340>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d013      	beq.n	8000be2 <HAL_GPIO_Init+0x236>
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4a4c      	ldr	r2, [pc, #304]	; (8000cf0 <HAL_GPIO_Init+0x344>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d00d      	beq.n	8000bde <HAL_GPIO_Init+0x232>
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4a4b      	ldr	r2, [pc, #300]	; (8000cf4 <HAL_GPIO_Init+0x348>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d007      	beq.n	8000bda <HAL_GPIO_Init+0x22e>
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4a4a      	ldr	r2, [pc, #296]	; (8000cf8 <HAL_GPIO_Init+0x34c>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d101      	bne.n	8000bd6 <HAL_GPIO_Init+0x22a>
 8000bd2:	2306      	movs	r3, #6
 8000bd4:	e00c      	b.n	8000bf0 <HAL_GPIO_Init+0x244>
 8000bd6:	2307      	movs	r3, #7
 8000bd8:	e00a      	b.n	8000bf0 <HAL_GPIO_Init+0x244>
 8000bda:	2305      	movs	r3, #5
 8000bdc:	e008      	b.n	8000bf0 <HAL_GPIO_Init+0x244>
 8000bde:	2304      	movs	r3, #4
 8000be0:	e006      	b.n	8000bf0 <HAL_GPIO_Init+0x244>
 8000be2:	2303      	movs	r3, #3
 8000be4:	e004      	b.n	8000bf0 <HAL_GPIO_Init+0x244>
 8000be6:	2302      	movs	r3, #2
 8000be8:	e002      	b.n	8000bf0 <HAL_GPIO_Init+0x244>
 8000bea:	2301      	movs	r3, #1
 8000bec:	e000      	b.n	8000bf0 <HAL_GPIO_Init+0x244>
 8000bee:	2300      	movs	r3, #0
 8000bf0:	697a      	ldr	r2, [r7, #20]
 8000bf2:	f002 0203 	and.w	r2, r2, #3
 8000bf6:	0092      	lsls	r2, r2, #2
 8000bf8:	4093      	lsls	r3, r2
 8000bfa:	693a      	ldr	r2, [r7, #16]
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c00:	4937      	ldr	r1, [pc, #220]	; (8000ce0 <HAL_GPIO_Init+0x334>)
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	089b      	lsrs	r3, r3, #2
 8000c06:	3302      	adds	r3, #2
 8000c08:	693a      	ldr	r2, [r7, #16]
 8000c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c0e:	4b3b      	ldr	r3, [pc, #236]	; (8000cfc <HAL_GPIO_Init+0x350>)
 8000c10:	689b      	ldr	r3, [r3, #8]
 8000c12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	43db      	mvns	r3, r3
 8000c18:	693a      	ldr	r2, [r7, #16]
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d003      	beq.n	8000c32 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000c32:	4a32      	ldr	r2, [pc, #200]	; (8000cfc <HAL_GPIO_Init+0x350>)
 8000c34:	693b      	ldr	r3, [r7, #16]
 8000c36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000c38:	4b30      	ldr	r3, [pc, #192]	; (8000cfc <HAL_GPIO_Init+0x350>)
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	43db      	mvns	r3, r3
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	4013      	ands	r3, r2
 8000c46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d003      	beq.n	8000c5c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000c54:	693a      	ldr	r2, [r7, #16]
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000c5c:	4a27      	ldr	r2, [pc, #156]	; (8000cfc <HAL_GPIO_Init+0x350>)
 8000c5e:	693b      	ldr	r3, [r7, #16]
 8000c60:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000c62:	4b26      	ldr	r3, [pc, #152]	; (8000cfc <HAL_GPIO_Init+0x350>)
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	43db      	mvns	r3, r3
 8000c6c:	693a      	ldr	r2, [r7, #16]
 8000c6e:	4013      	ands	r3, r2
 8000c70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d003      	beq.n	8000c86 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	4313      	orrs	r3, r2
 8000c84:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000c86:	4a1d      	ldr	r2, [pc, #116]	; (8000cfc <HAL_GPIO_Init+0x350>)
 8000c88:	693b      	ldr	r3, [r7, #16]
 8000c8a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000c8c:	4b1b      	ldr	r3, [pc, #108]	; (8000cfc <HAL_GPIO_Init+0x350>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	43db      	mvns	r3, r3
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	4013      	ands	r3, r2
 8000c9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d003      	beq.n	8000cb0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000ca8:	693a      	ldr	r2, [r7, #16]
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	4313      	orrs	r3, r2
 8000cae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000cb0:	4a12      	ldr	r2, [pc, #72]	; (8000cfc <HAL_GPIO_Init+0x350>)
 8000cb2:	693b      	ldr	r3, [r7, #16]
 8000cb4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	fa22 f303 	lsr.w	r3, r2, r3
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	f47f ae78 	bne.w	80009bc <HAL_GPIO_Init+0x10>
  }
}
 8000ccc:	bf00      	nop
 8000cce:	bf00      	nop
 8000cd0:	371c      	adds	r7, #28
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	40021000 	.word	0x40021000
 8000ce0:	40010000 	.word	0x40010000
 8000ce4:	48000400 	.word	0x48000400
 8000ce8:	48000800 	.word	0x48000800
 8000cec:	48000c00 	.word	0x48000c00
 8000cf0:	48001000 	.word	0x48001000
 8000cf4:	48001400 	.word	0x48001400
 8000cf8:	48001800 	.word	0x48001800
 8000cfc:	40010400 	.word	0x40010400

08000d00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d101      	bne.n	8000d12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e08d      	b.n	8000e2e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d106      	bne.n	8000d2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2200      	movs	r2, #0
 8000d22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000d26:	6878      	ldr	r0, [r7, #4]
 8000d28:	f7ff fab2 	bl	8000290 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2224      	movs	r2, #36	; 0x24
 8000d30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f022 0201 	bic.w	r2, r2, #1
 8000d42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	685a      	ldr	r2, [r3, #4]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000d50:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	689a      	ldr	r2, [r3, #8]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000d60:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	68db      	ldr	r3, [r3, #12]
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d107      	bne.n	8000d7a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	689a      	ldr	r2, [r3, #8]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	e006      	b.n	8000d88 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	689a      	ldr	r2, [r3, #8]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000d86:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	2b02      	cmp	r3, #2
 8000d8e:	d108      	bne.n	8000da2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	685a      	ldr	r2, [r3, #4]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000d9e:	605a      	str	r2, [r3, #4]
 8000da0:	e007      	b.n	8000db2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	685a      	ldr	r2, [r3, #4]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000db0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	687a      	ldr	r2, [r7, #4]
 8000dba:	6812      	ldr	r2, [r2, #0]
 8000dbc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000dc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dc4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	68da      	ldr	r2, [r3, #12]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000dd4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	691a      	ldr	r2, [r3, #16]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	695b      	ldr	r3, [r3, #20]
 8000dde:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	699b      	ldr	r3, [r3, #24]
 8000de6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	430a      	orrs	r2, r1
 8000dee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	69d9      	ldr	r1, [r3, #28]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6a1a      	ldr	r2, [r3, #32]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	430a      	orrs	r2, r1
 8000dfe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f042 0201 	orr.w	r2, r2, #1
 8000e0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2200      	movs	r2, #0
 8000e14:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2220      	movs	r2, #32
 8000e1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2200      	movs	r2, #0
 8000e22:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2200      	movs	r2, #0
 8000e28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000e2c:	2300      	movs	r3, #0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
	...

08000e38 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b086      	sub	sp, #24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	603b      	str	r3, [r7, #0]
 8000e44:	4613      	mov	r3, r2
 8000e46:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8000e54:	2b28      	cmp	r3, #40	; 0x28
 8000e56:	f040 8098 	bne.w	8000f8a <HAL_I2C_Slave_Seq_Receive_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d002      	beq.n	8000e66 <HAL_I2C_Slave_Seq_Receive_IT+0x2e>
 8000e60:	88fb      	ldrh	r3, [r7, #6]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d105      	bne.n	8000e72 <HAL_I2C_Slave_Seq_Receive_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e6c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e08c      	b.n	8000f8c <HAL_I2C_Slave_Seq_Receive_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8000e72:	f248 0102 	movw	r1, #32770	; 0x8002
 8000e76:	68f8      	ldr	r0, [r7, #12]
 8000e78:	f001 fa9c 	bl	80023b4 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d101      	bne.n	8000e8a <HAL_I2C_Slave_Seq_Receive_IT+0x52>
 8000e86:	2302      	movs	r3, #2
 8000e88:	e080      	b.n	8000f8c <HAL_I2C_Slave_Seq_Receive_IT+0x154>
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	2b29      	cmp	r3, #41	; 0x29
 8000e9c:	d12a      	bne.n	8000ef4 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8000e9e:	2101      	movs	r1, #1
 8000ea0:	68f8      	ldr	r0, [r7, #12]
 8000ea2:	f001 fa87 	bl	80023b4 <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000eb4:	d11e      	bne.n	8000ef4 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000ec4:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d012      	beq.n	8000ef4 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ed2:	4a30      	ldr	r2, [pc, #192]	; (8000f94 <HAL_I2C_Slave_Seq_Receive_IT+0x15c>)
 8000ed4:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff fd17 	bl	800090e <HAL_DMA_Abort_IT>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d006      	beq.n	8000ef4 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000eec:	68fa      	ldr	r2, [r7, #12]
 8000eee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8000ef0:	4610      	mov	r0, r2
 8000ef2:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	222a      	movs	r2, #42	; 0x2a
 8000ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	2220      	movs	r2, #32
 8000f00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	2200      	movs	r2, #0
 8000f08:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	685a      	ldr	r2, [r3, #4]
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f18:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	68ba      	ldr	r2, [r7, #8]
 8000f1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	88fa      	ldrh	r2, [r7, #6]
 8000f24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f2a:	b29a      	uxth	r2, r3
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	683a      	ldr	r2, [r7, #0]
 8000f34:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	4a17      	ldr	r2, [pc, #92]	; (8000f98 <HAL_I2C_Slave_Seq_Receive_IT+0x160>)
 8000f3a:	635a      	str	r2, [r3, #52]	; 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	699b      	ldr	r3, [r3, #24]
 8000f42:	f003 0308 	and.w	r3, r3, #8
 8000f46:	2b08      	cmp	r3, #8
 8000f48:	bf0c      	ite	eq
 8000f4a:	2301      	moveq	r3, #1
 8000f4c:	2300      	movne	r3, #0
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT) && (tmp != RESET))
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	699b      	ldr	r3, [r3, #24]
 8000f58:	0c1b      	lsrs	r3, r3, #16
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	f003 0301 	and.w	r3, r3, #1
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d106      	bne.n	8000f74 <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
 8000f66:	7dfb      	ldrb	r3, [r7, #23]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d003      	beq.n	8000f74 <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2208      	movs	r2, #8
 8000f72:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	2200      	movs	r2, #0
 8000f78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8000f7c:	f248 0102 	movw	r1, #32770	; 0x8002
 8000f80:	68f8      	ldr	r0, [r7, #12]
 8000f82:	f001 f993 	bl	80022ac <I2C_Enable_IRQ>

    return HAL_OK;
 8000f86:	2300      	movs	r3, #0
 8000f88:	e000      	b.n	8000f8c <HAL_I2C_Slave_Seq_Receive_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
  }
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3718      	adds	r7, #24
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	0800220b 	.word	0x0800220b
 8000f98:	0800113f 	.word	0x0800113f

08000f9c <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	2b20      	cmp	r3, #32
 8000fae:	d10d      	bne.n	8000fcc <HAL_I2C_EnableListen_IT+0x30>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2228      	movs	r2, #40	; 0x28
 8000fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR = I2C_Slave_ISR_IT;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4a07      	ldr	r2, [pc, #28]	; (8000fd8 <HAL_I2C_EnableListen_IT+0x3c>)
 8000fbc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8000fbe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f001 f972 	bl	80022ac <I2C_Enable_IRQ>

    return HAL_OK;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	e000      	b.n	8000fce <HAL_I2C_EnableListen_IT+0x32>
  }
  else
  {
    return HAL_BUSY;
 8000fcc:	2302      	movs	r3, #2
  }
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	0800113f 	.word	0x0800113f

08000fdc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	699b      	ldr	r3, [r3, #24]
 8000fea:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d005      	beq.n	8001008 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001000:	68ba      	ldr	r2, [r7, #8]
 8001002:	68f9      	ldr	r1, [r7, #12]
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	4798      	blx	r3
  }
}
 8001008:	bf00      	nop
 800100a:	3710      	adds	r7, #16
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	699b      	ldr	r3, [r3, #24]
 800101e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800102e:	2b00      	cmp	r3, #0
 8001030:	d00f      	beq.n	8001052 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001038:	2b00      	cmp	r3, #0
 800103a:	d00a      	beq.n	8001052 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001040:	f043 0201 	orr.w	r2, r3, #1
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001050:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001058:	2b00      	cmp	r3, #0
 800105a:	d00f      	beq.n	800107c <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001062:	2b00      	cmp	r3, #0
 8001064:	d00a      	beq.n	800107c <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106a:	f043 0208 	orr.w	r2, r3, #8
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800107a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001082:	2b00      	cmp	r3, #0
 8001084:	d00f      	beq.n	80010a6 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800108c:	2b00      	cmp	r3, #0
 800108e:	d00a      	beq.n	80010a6 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001094:	f043 0202 	orr.w	r2, r3, #2
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010a4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010aa:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	f003 030b 	and.w	r3, r3, #11
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d003      	beq.n	80010be <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80010b6:	68f9      	ldr	r1, [r7, #12]
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f000 ff6b 	bl	8001f94 <I2C_ITError>
  }
}
 80010be:	bf00      	nop
 80010c0:	3718      	adds	r7, #24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80010c6:	b480      	push	{r7}
 80010c8:	b083      	sub	sp, #12
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80010ce:	bf00      	nop
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr

080010da <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80010da:	b480      	push	{r7}
 80010dc:	b083      	sub	sp, #12
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80010e2:	bf00      	nop
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr

080010ee <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80010ee:	b480      	push	{r7}
 80010f0:	b083      	sub	sp, #12
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80010f6:	bf00      	nop
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr

08001102 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001102:	b480      	push	{r7}
 8001104:	b083      	sub	sp, #12
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr

08001116 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001116:	b480      	push	{r7}
 8001118:	b083      	sub	sp, #12
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800111e:	bf00      	nop
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr

0800112a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800112a:	b480      	push	{r7}
 800112c:	b083      	sub	sp, #12
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr

0800113e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	b086      	sub	sp, #24
 8001142:	af00      	add	r7, sp, #0
 8001144:	60f8      	str	r0, [r7, #12]
 8001146:	60b9      	str	r1, [r7, #8]
 8001148:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800114e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800115a:	2b01      	cmp	r3, #1
 800115c:	d101      	bne.n	8001162 <I2C_Slave_ISR_IT+0x24>
 800115e:	2302      	movs	r3, #2
 8001160:	e0e1      	b.n	8001326 <I2C_Slave_ISR_IT+0x1e8>
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	2201      	movs	r2, #1
 8001166:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	f003 0320 	and.w	r3, r3, #32
 8001170:	2b00      	cmp	r3, #0
 8001172:	d008      	beq.n	8001186 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800117a:	2b00      	cmp	r3, #0
 800117c:	d003      	beq.n	8001186 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800117e:	6939      	ldr	r1, [r7, #16]
 8001180:	68f8      	ldr	r0, [r7, #12]
 8001182:	f000 fda1 	bl	8001cc8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	f003 0310 	and.w	r3, r3, #16
 800118c:	2b00      	cmp	r3, #0
 800118e:	d04b      	beq.n	8001228 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001196:	2b00      	cmp	r3, #0
 8001198:	d046      	beq.n	8001228 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800119e:	b29b      	uxth	r3, r3
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d128      	bne.n	80011f6 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	2b28      	cmp	r3, #40	; 0x28
 80011ae:	d108      	bne.n	80011c2 <I2C_Slave_ISR_IT+0x84>
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80011b6:	d104      	bne.n	80011c2 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80011b8:	6939      	ldr	r1, [r7, #16]
 80011ba:	68f8      	ldr	r0, [r7, #12]
 80011bc:	f000 fe96 	bl	8001eec <I2C_ITListenCplt>
 80011c0:	e031      	b.n	8001226 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	2b29      	cmp	r3, #41	; 0x29
 80011cc:	d10e      	bne.n	80011ec <I2C_Slave_ISR_IT+0xae>
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80011d4:	d00a      	beq.n	80011ec <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2210      	movs	r2, #16
 80011dc:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80011de:	68f8      	ldr	r0, [r7, #12]
 80011e0:	f000 ffef 	bl	80021c2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80011e4:	68f8      	ldr	r0, [r7, #12]
 80011e6:	f000 fc4a 	bl	8001a7e <I2C_ITSlaveSeqCplt>
 80011ea:	e01c      	b.n	8001226 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2210      	movs	r2, #16
 80011f2:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80011f4:	e08f      	b.n	8001316 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2210      	movs	r2, #16
 80011fc:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001202:	f043 0204 	orr.w	r2, r3, #4
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d003      	beq.n	8001218 <I2C_Slave_ISR_IT+0xda>
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001216:	d17e      	bne.n	8001316 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121c:	4619      	mov	r1, r3
 800121e:	68f8      	ldr	r0, [r7, #12]
 8001220:	f000 feb8 	bl	8001f94 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001224:	e077      	b.n	8001316 <I2C_Slave_ISR_IT+0x1d8>
 8001226:	e076      	b.n	8001316 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	f003 0304 	and.w	r3, r3, #4
 800122e:	2b00      	cmp	r3, #0
 8001230:	d02f      	beq.n	8001292 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001238:	2b00      	cmp	r3, #0
 800123a:	d02a      	beq.n	8001292 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001240:	b29b      	uxth	r3, r3
 8001242:	2b00      	cmp	r3, #0
 8001244:	d018      	beq.n	8001278 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001250:	b2d2      	uxtb	r2, r2
 8001252:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001258:	1c5a      	adds	r2, r3, #1
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001262:	3b01      	subs	r3, #1
 8001264:	b29a      	uxth	r2, r3
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800126e:	b29b      	uxth	r3, r3
 8001270:	3b01      	subs	r3, #1
 8001272:	b29a      	uxth	r2, r3
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800127c:	b29b      	uxth	r3, r3
 800127e:	2b00      	cmp	r3, #0
 8001280:	d14b      	bne.n	800131a <I2C_Slave_ISR_IT+0x1dc>
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001288:	d047      	beq.n	800131a <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800128a:	68f8      	ldr	r0, [r7, #12]
 800128c:	f000 fbf7 	bl	8001a7e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001290:	e043      	b.n	800131a <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	f003 0308 	and.w	r3, r3, #8
 8001298:	2b00      	cmp	r3, #0
 800129a:	d009      	beq.n	80012b0 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d004      	beq.n	80012b0 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80012a6:	6939      	ldr	r1, [r7, #16]
 80012a8:	68f8      	ldr	r0, [r7, #12]
 80012aa:	f000 fb27 	bl	80018fc <I2C_ITAddrCplt>
 80012ae:	e035      	b.n	800131c <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	f003 0302 	and.w	r3, r3, #2
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d030      	beq.n	800131c <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d02b      	beq.n	800131c <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d018      	beq.n	8001300 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d2:	781a      	ldrb	r2, [r3, #0]
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012de:	1c5a      	adds	r2, r3, #1
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	3b01      	subs	r3, #1
 80012ec:	b29a      	uxth	r2, r3
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012f6:	3b01      	subs	r3, #1
 80012f8:	b29a      	uxth	r2, r3
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	851a      	strh	r2, [r3, #40]	; 0x28
 80012fe:	e00d      	b.n	800131c <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001306:	d002      	beq.n	800130e <I2C_Slave_ISR_IT+0x1d0>
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d106      	bne.n	800131c <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800130e:	68f8      	ldr	r0, [r7, #12]
 8001310:	f000 fbb5 	bl	8001a7e <I2C_ITSlaveSeqCplt>
 8001314:	e002      	b.n	800131c <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8001316:	bf00      	nop
 8001318:	e000      	b.n	800131c <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 800131a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	2200      	movs	r2, #0
 8001320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3718      	adds	r7, #24
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b088      	sub	sp, #32
 8001332:	af02      	add	r7, sp, #8
 8001334:	60f8      	str	r0, [r7, #12]
 8001336:	60b9      	str	r1, [r7, #8]
 8001338:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001340:	2b01      	cmp	r3, #1
 8001342:	d101      	bne.n	8001348 <I2C_Master_ISR_DMA+0x1a>
 8001344:	2302      	movs	r3, #2
 8001346:	e0d9      	b.n	80014fc <I2C_Master_ISR_DMA+0x1ce>
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	2201      	movs	r2, #1
 800134c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	f003 0310 	and.w	r3, r3, #16
 8001356:	2b00      	cmp	r3, #0
 8001358:	d016      	beq.n	8001388 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001360:	2b00      	cmp	r3, #0
 8001362:	d011      	beq.n	8001388 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2210      	movs	r2, #16
 800136a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001370:	f043 0204 	orr.w	r2, r3, #4
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8001378:	2120      	movs	r1, #32
 800137a:	68f8      	ldr	r0, [r7, #12]
 800137c:	f000 ff96 	bl	80022ac <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001380:	68f8      	ldr	r0, [r7, #12]
 8001382:	f000 ff1e 	bl	80021c2 <I2C_Flush_TXDR>
 8001386:	e0b4      	b.n	80014f2 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800138e:	2b00      	cmp	r3, #0
 8001390:	d071      	beq.n	8001476 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001398:	2b00      	cmp	r3, #0
 800139a:	d06c      	beq.n	8001476 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80013aa:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d04e      	beq.n	8001454 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	b29b      	uxth	r3, r3
 80013be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80013c2:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	2bff      	cmp	r3, #255	; 0xff
 80013cc:	d906      	bls.n	80013dc <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	22ff      	movs	r2, #255	; 0xff
 80013d2:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 80013d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013d8:	617b      	str	r3, [r7, #20]
 80013da:	e010      	b.n	80013fe <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013e0:	b29a      	uxth	r2, r3
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ea:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80013ee:	d003      	beq.n	80013f8 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f4:	617b      	str	r3, [r7, #20]
 80013f6:	e002      	b.n	80013fe <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80013f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013fc:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001402:	b2da      	uxtb	r2, r3
 8001404:	8a79      	ldrh	r1, [r7, #18]
 8001406:	2300      	movs	r3, #0
 8001408:	9300      	str	r3, [sp, #0]
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	68f8      	ldr	r0, [r7, #12]
 800140e:	f000 ff1b 	bl	8002248 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001416:	b29a      	uxth	r2, r3
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	b29a      	uxth	r2, r3
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800142a:	b2db      	uxtb	r3, r3
 800142c:	2b22      	cmp	r3, #34	; 0x22
 800142e:	d108      	bne.n	8001442 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800143e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001440:	e057      	b.n	80014f2 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001450:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001452:	e04e      	b.n	80014f2 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800145e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001462:	d003      	beq.n	800146c <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8001464:	68f8      	ldr	r0, [r7, #12]
 8001466:	f000 facd 	bl	8001a04 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800146a:	e042      	b.n	80014f2 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800146c:	2140      	movs	r1, #64	; 0x40
 800146e:	68f8      	ldr	r0, [r7, #12]
 8001470:	f000 fd90 	bl	8001f94 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8001474:	e03d      	b.n	80014f2 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800147c:	2b00      	cmp	r3, #0
 800147e:	d028      	beq.n	80014d2 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001486:	2b00      	cmp	r3, #0
 8001488:	d023      	beq.n	80014d2 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800148e:	b29b      	uxth	r3, r3
 8001490:	2b00      	cmp	r3, #0
 8001492:	d119      	bne.n	80014c8 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800149e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80014a2:	d025      	beq.n	80014f0 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80014ac:	d108      	bne.n	80014c0 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	685a      	ldr	r2, [r3, #4]
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80014bc:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80014be:	e017      	b.n	80014f0 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80014c0:	68f8      	ldr	r0, [r7, #12]
 80014c2:	f000 fa9f 	bl	8001a04 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80014c6:	e013      	b.n	80014f0 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80014c8:	2140      	movs	r1, #64	; 0x40
 80014ca:	68f8      	ldr	r0, [r7, #12]
 80014cc:	f000 fd62 	bl	8001f94 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80014d0:	e00e      	b.n	80014f0 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	f003 0320 	and.w	r3, r3, #32
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d00a      	beq.n	80014f2 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d005      	beq.n	80014f2 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80014e6:	68b9      	ldr	r1, [r7, #8]
 80014e8:	68f8      	ldr	r0, [r7, #12]
 80014ea:	f000 fb25 	bl	8001b38 <I2C_ITMasterCplt>
 80014ee:	e000      	b.n	80014f2 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 80014f0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	2200      	movs	r2, #0
 80014f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80014fa:	2300      	movs	r3, #0
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3718      	adds	r7, #24
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b088      	sub	sp, #32
 8001508:	af02      	add	r7, sp, #8
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8001510:	4b8d      	ldr	r3, [pc, #564]	; (8001748 <I2C_Mem_ISR_DMA+0x244>)
 8001512:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800151a:	2b01      	cmp	r3, #1
 800151c:	d101      	bne.n	8001522 <I2C_Mem_ISR_DMA+0x1e>
 800151e:	2302      	movs	r3, #2
 8001520:	e10e      	b.n	8001740 <I2C_Mem_ISR_DMA+0x23c>
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	2201      	movs	r2, #1
 8001526:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	f003 0310 	and.w	r3, r3, #16
 8001530:	2b00      	cmp	r3, #0
 8001532:	d016      	beq.n	8001562 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800153a:	2b00      	cmp	r3, #0
 800153c:	d011      	beq.n	8001562 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2210      	movs	r2, #16
 8001544:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154a:	f043 0204 	orr.w	r2, r3, #4
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8001552:	2120      	movs	r1, #32
 8001554:	68f8      	ldr	r0, [r7, #12]
 8001556:	f000 fea9 	bl	80022ac <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800155a:	68f8      	ldr	r0, [r7, #12]
 800155c:	f000 fe31 	bl	80021c2 <I2C_Flush_TXDR>
 8001560:	e0e9      	b.n	8001736 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	f003 0302 	and.w	r3, r3, #2
 8001568:	2b00      	cmp	r3, #0
 800156a:	d00e      	beq.n	800158a <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001572:	2b00      	cmp	r3, #0
 8001574:	d009      	beq.n	800158a <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	68fa      	ldr	r2, [r7, #12]
 800157c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800157e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f04f 32ff 	mov.w	r2, #4294967295
 8001586:	651a      	str	r2, [r3, #80]	; 0x50
 8001588:	e0d5      	b.n	8001736 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001590:	2b00      	cmp	r3, #0
 8001592:	d05f      	beq.n	8001654 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800159a:	2b00      	cmp	r3, #0
 800159c:	d05a      	beq.n	8001654 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800159e:	2101      	movs	r1, #1
 80015a0:	68f8      	ldr	r0, [r7, #12]
 80015a2:	f000 ff07 	bl	80023b4 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80015a6:	2110      	movs	r1, #16
 80015a8:	68f8      	ldr	r0, [r7, #12]
 80015aa:	f000 fe7f 	bl	80022ac <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d048      	beq.n	800164a <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015bc:	b29b      	uxth	r3, r3
 80015be:	2bff      	cmp	r3, #255	; 0xff
 80015c0:	d910      	bls.n	80015e4 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	22ff      	movs	r2, #255	; 0xff
 80015c6:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015cc:	b299      	uxth	r1, r3
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015d2:	b2da      	uxtb	r2, r3
 80015d4:	2300      	movs	r3, #0
 80015d6:	9300      	str	r3, [sp, #0]
 80015d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015dc:	68f8      	ldr	r0, [r7, #12]
 80015de:	f000 fe33 	bl	8002248 <I2C_TransferConfig>
 80015e2:	e011      	b.n	8001608 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015e8:	b29a      	uxth	r2, r3
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f2:	b299      	uxth	r1, r3
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015f8:	b2da      	uxtb	r2, r3
 80015fa:	2300      	movs	r3, #0
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001602:	68f8      	ldr	r0, [r7, #12]
 8001604:	f000 fe20 	bl	8002248 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800160c:	b29a      	uxth	r2, r3
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	b29a      	uxth	r2, r3
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001620:	b2db      	uxtb	r3, r3
 8001622:	2b22      	cmp	r3, #34	; 0x22
 8001624:	d108      	bne.n	8001638 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001634:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001636:	e07e      	b.n	8001736 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001646:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001648:	e075      	b.n	8001736 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800164a:	2140      	movs	r1, #64	; 0x40
 800164c:	68f8      	ldr	r0, [r7, #12]
 800164e:	f000 fca1 	bl	8001f94 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8001652:	e070      	b.n	8001736 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800165a:	2b00      	cmp	r3, #0
 800165c:	d05d      	beq.n	800171a <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001664:	2b00      	cmp	r3, #0
 8001666:	d058      	beq.n	800171a <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001668:	2101      	movs	r1, #1
 800166a:	68f8      	ldr	r0, [r7, #12]
 800166c:	f000 fea2 	bl	80023b4 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8001670:	2110      	movs	r1, #16
 8001672:	68f8      	ldr	r0, [r7, #12]
 8001674:	f000 fe1a 	bl	80022ac <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800167e:	b2db      	uxtb	r3, r3
 8001680:	2b22      	cmp	r3, #34	; 0x22
 8001682:	d101      	bne.n	8001688 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8001684:	4b31      	ldr	r3, [pc, #196]	; (800174c <I2C_Mem_ISR_DMA+0x248>)
 8001686:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800168c:	b29b      	uxth	r3, r3
 800168e:	2bff      	cmp	r3, #255	; 0xff
 8001690:	d910      	bls.n	80016b4 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	22ff      	movs	r2, #255	; 0xff
 8001696:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800169c:	b299      	uxth	r1, r3
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016a2:	b2da      	uxtb	r2, r3
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	9300      	str	r3, [sp, #0]
 80016a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016ac:	68f8      	ldr	r0, [r7, #12]
 80016ae:	f000 fdcb 	bl	8002248 <I2C_TransferConfig>
 80016b2:	e011      	b.n	80016d8 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016b8:	b29a      	uxth	r2, r3
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c2:	b299      	uxth	r1, r3
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016c8:	b2da      	uxtb	r2, r3
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	9300      	str	r3, [sp, #0]
 80016ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016d2:	68f8      	ldr	r0, [r7, #12]
 80016d4:	f000 fdb8 	bl	8002248 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016dc:	b29a      	uxth	r2, r3
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	b29a      	uxth	r2, r3
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	2b22      	cmp	r3, #34	; 0x22
 80016f4:	d108      	bne.n	8001708 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001704:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001706:	e016      	b.n	8001736 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001716:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001718:	e00d      	b.n	8001736 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	f003 0320 	and.w	r3, r3, #32
 8001720:	2b00      	cmp	r3, #0
 8001722:	d008      	beq.n	8001736 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800172a:	2b00      	cmp	r3, #0
 800172c:	d003      	beq.n	8001736 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800172e:	68b9      	ldr	r1, [r7, #8]
 8001730:	68f8      	ldr	r0, [r7, #12]
 8001732:	f000 fa01 	bl	8001b38 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	2200      	movs	r2, #0
 800173a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800173e:	2300      	movs	r3, #0
}
 8001740:	4618      	mov	r0, r3
 8001742:	3718      	adds	r7, #24
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	80002000 	.word	0x80002000
 800174c:	80002400 	.word	0x80002400

08001750 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b088      	sub	sp, #32
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001760:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8001762:	2300      	movs	r3, #0
 8001764:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800176c:	2b01      	cmp	r3, #1
 800176e:	d101      	bne.n	8001774 <I2C_Slave_ISR_DMA+0x24>
 8001770:	2302      	movs	r3, #2
 8001772:	e0bf      	b.n	80018f4 <I2C_Slave_ISR_DMA+0x1a4>
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2201      	movs	r2, #1
 8001778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	f003 0320 	and.w	r3, r3, #32
 8001782:	2b00      	cmp	r3, #0
 8001784:	d008      	beq.n	8001798 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800178c:	2b00      	cmp	r3, #0
 800178e:	d003      	beq.n	8001798 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8001790:	68b9      	ldr	r1, [r7, #8]
 8001792:	68f8      	ldr	r0, [r7, #12]
 8001794:	f000 fa98 	bl	8001cc8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	f003 0310 	and.w	r3, r3, #16
 800179e:	2b00      	cmp	r3, #0
 80017a0:	f000 8095 	beq.w	80018ce <I2C_Slave_ISR_DMA+0x17e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	f000 808f 	beq.w	80018ce <I2C_Slave_ISR_DMA+0x17e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d104      	bne.n	80017c4 <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d07d      	beq.n	80018c0 <I2C_Slave_ISR_DMA+0x170>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d00c      	beq.n	80017e6 <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d007      	beq.n	80017e6 <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d101      	bne.n	80017e6 <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 80017e2:	2301      	movs	r3, #1
 80017e4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d00c      	beq.n	8001808 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d007      	beq.n	8001808 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d101      	bne.n	8001808 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 8001804:	2301      	movs	r3, #1
 8001806:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d128      	bne.n	8001860 <I2C_Slave_ISR_DMA+0x110>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001814:	b2db      	uxtb	r3, r3
 8001816:	2b28      	cmp	r3, #40	; 0x28
 8001818:	d108      	bne.n	800182c <I2C_Slave_ISR_DMA+0xdc>
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001820:	d104      	bne.n	800182c <I2C_Slave_ISR_DMA+0xdc>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8001822:	68b9      	ldr	r1, [r7, #8]
 8001824:	68f8      	ldr	r0, [r7, #12]
 8001826:	f000 fb61 	bl	8001eec <I2C_ITListenCplt>
 800182a:	e048      	b.n	80018be <I2C_Slave_ISR_DMA+0x16e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001832:	b2db      	uxtb	r3, r3
 8001834:	2b29      	cmp	r3, #41	; 0x29
 8001836:	d10e      	bne.n	8001856 <I2C_Slave_ISR_DMA+0x106>
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800183e:	d00a      	beq.n	8001856 <I2C_Slave_ISR_DMA+0x106>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2210      	movs	r2, #16
 8001846:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8001848:	68f8      	ldr	r0, [r7, #12]
 800184a:	f000 fcba 	bl	80021c2 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800184e:	68f8      	ldr	r0, [r7, #12]
 8001850:	f000 f915 	bl	8001a7e <I2C_ITSlaveSeqCplt>
 8001854:	e033      	b.n	80018be <I2C_Slave_ISR_DMA+0x16e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2210      	movs	r2, #16
 800185c:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800185e:	e034      	b.n	80018ca <I2C_Slave_ISR_DMA+0x17a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2210      	movs	r2, #16
 8001866:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186c:	f043 0204 	orr.w	r2, r3, #4
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800187a:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d003      	beq.n	800188a <I2C_Slave_ISR_DMA+0x13a>
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001888:	d11f      	bne.n	80018ca <I2C_Slave_ISR_DMA+0x17a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800188a:	7dfb      	ldrb	r3, [r7, #23]
 800188c:	2b21      	cmp	r3, #33	; 0x21
 800188e:	d002      	beq.n	8001896 <I2C_Slave_ISR_DMA+0x146>
 8001890:	7dfb      	ldrb	r3, [r7, #23]
 8001892:	2b29      	cmp	r3, #41	; 0x29
 8001894:	d103      	bne.n	800189e <I2C_Slave_ISR_DMA+0x14e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2221      	movs	r2, #33	; 0x21
 800189a:	631a      	str	r2, [r3, #48]	; 0x30
 800189c:	e008      	b.n	80018b0 <I2C_Slave_ISR_DMA+0x160>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800189e:	7dfb      	ldrb	r3, [r7, #23]
 80018a0:	2b22      	cmp	r3, #34	; 0x22
 80018a2:	d002      	beq.n	80018aa <I2C_Slave_ISR_DMA+0x15a>
 80018a4:	7dfb      	ldrb	r3, [r7, #23]
 80018a6:	2b2a      	cmp	r3, #42	; 0x2a
 80018a8:	d102      	bne.n	80018b0 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2222      	movs	r2, #34	; 0x22
 80018ae:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b4:	4619      	mov	r1, r3
 80018b6:	68f8      	ldr	r0, [r7, #12]
 80018b8:	f000 fb6c 	bl	8001f94 <I2C_ITError>
      if (treatdmanack == 1U)
 80018bc:	e005      	b.n	80018ca <I2C_Slave_ISR_DMA+0x17a>
 80018be:	e004      	b.n	80018ca <I2C_Slave_ISR_DMA+0x17a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2210      	movs	r2, #16
 80018c6:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80018c8:	e00f      	b.n	80018ea <I2C_Slave_ISR_DMA+0x19a>
      if (treatdmanack == 1U)
 80018ca:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80018cc:	e00d      	b.n	80018ea <I2C_Slave_ISR_DMA+0x19a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	f003 0308 	and.w	r3, r3, #8
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d008      	beq.n	80018ea <I2C_Slave_ISR_DMA+0x19a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d003      	beq.n	80018ea <I2C_Slave_ISR_DMA+0x19a>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80018e2:	68b9      	ldr	r1, [r7, #8]
 80018e4:	68f8      	ldr	r0, [r7, #12]
 80018e6:	f000 f809 	bl	80018fc <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2200      	movs	r2, #0
 80018ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80018f2:	2300      	movs	r3, #0
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3720      	adds	r7, #32
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}

080018fc <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800190c:	b2db      	uxtb	r3, r3
 800190e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001912:	2b28      	cmp	r3, #40	; 0x28
 8001914:	d16a      	bne.n	80019ec <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	0c1b      	lsrs	r3, r3, #16
 800191e:	b2db      	uxtb	r3, r3
 8001920:	f003 0301 	and.w	r3, r3, #1
 8001924:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	0c1b      	lsrs	r3, r3, #16
 800192e:	b29b      	uxth	r3, r3
 8001930:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001934:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	b29b      	uxth	r3, r3
 800193e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001942:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	b29b      	uxth	r3, r3
 800194c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001950:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	2b02      	cmp	r3, #2
 8001958:	d138      	bne.n	80019cc <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800195a:	897b      	ldrh	r3, [r7, #10]
 800195c:	09db      	lsrs	r3, r3, #7
 800195e:	b29a      	uxth	r2, r3
 8001960:	89bb      	ldrh	r3, [r7, #12]
 8001962:	4053      	eors	r3, r2
 8001964:	b29b      	uxth	r3, r3
 8001966:	f003 0306 	and.w	r3, r3, #6
 800196a:	2b00      	cmp	r3, #0
 800196c:	d11c      	bne.n	80019a8 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800196e:	897b      	ldrh	r3, [r7, #10]
 8001970:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001976:	1c5a      	adds	r2, r3, #1
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001980:	2b02      	cmp	r3, #2
 8001982:	d13b      	bne.n	80019fc <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2208      	movs	r2, #8
 8001990:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800199a:	89ba      	ldrh	r2, [r7, #12]
 800199c:	7bfb      	ldrb	r3, [r7, #15]
 800199e:	4619      	mov	r1, r3
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f7fe fcef 	bl	8000384 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80019a6:	e029      	b.n	80019fc <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80019a8:	893b      	ldrh	r3, [r7, #8]
 80019aa:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80019ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f000 fcff 	bl	80023b4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80019be:	89ba      	ldrh	r2, [r7, #12]
 80019c0:	7bfb      	ldrb	r3, [r7, #15]
 80019c2:	4619      	mov	r1, r3
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f7fe fcdd 	bl	8000384 <HAL_I2C_AddrCallback>
}
 80019ca:	e017      	b.n	80019fc <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80019cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f000 fcef 	bl	80023b4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80019de:	89ba      	ldrh	r2, [r7, #12]
 80019e0:	7bfb      	ldrb	r3, [r7, #15]
 80019e2:	4619      	mov	r1, r3
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f7fe fccd 	bl	8000384 <HAL_I2C_AddrCallback>
}
 80019ea:	e007      	b.n	80019fc <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2208      	movs	r2, #8
 80019f2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2200      	movs	r2, #0
 80019f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80019fc:	bf00      	nop
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	2b21      	cmp	r3, #33	; 0x21
 8001a1e:	d115      	bne.n	8001a4c <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2220      	movs	r2, #32
 8001a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2211      	movs	r2, #17
 8001a2c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001a34:	2101      	movs	r1, #1
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f000 fcbc 	bl	80023b4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f7ff fb3e 	bl	80010c6 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001a4a:	e014      	b.n	8001a76 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2220      	movs	r2, #32
 8001a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2212      	movs	r2, #18
 8001a58:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001a60:	2102      	movs	r1, #2
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f000 fca6 	bl	80023b4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f7ff fb32 	bl	80010da <HAL_I2C_MasterRxCpltCallback>
}
 8001a76:	bf00      	nop
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b084      	sub	sp, #16
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d008      	beq.n	8001ab2 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	e00c      	b.n	8001acc <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d007      	beq.n	8001acc <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001aca:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	2b29      	cmp	r3, #41	; 0x29
 8001ad6:	d112      	bne.n	8001afe <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2228      	movs	r2, #40	; 0x28
 8001adc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2221      	movs	r2, #33	; 0x21
 8001ae4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f000 fc63 	bl	80023b4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f7ff faf9 	bl	80010ee <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001afc:	e017      	b.n	8001b2e <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2b2a      	cmp	r3, #42	; 0x2a
 8001b08:	d111      	bne.n	8001b2e <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2228      	movs	r2, #40	; 0x28
 8001b0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2222      	movs	r2, #34	; 0x22
 8001b16:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001b18:	2102      	movs	r1, #2
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f000 fc4a 	bl	80023b4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f7fe fc47 	bl	80003bc <HAL_I2C_SlaveRxCpltCallback>
}
 8001b2e:	bf00      	nop
 8001b30:	3710      	adds	r7, #16
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
	...

08001b38 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2220      	movs	r2, #32
 8001b4c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	2b21      	cmp	r3, #33	; 0x21
 8001b58:	d107      	bne.n	8001b6a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001b5a:	2101      	movs	r1, #1
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f000 fc29 	bl	80023b4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2211      	movs	r2, #17
 8001b66:	631a      	str	r2, [r3, #48]	; 0x30
 8001b68:	e00c      	b.n	8001b84 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	2b22      	cmp	r3, #34	; 0x22
 8001b74:	d106      	bne.n	8001b84 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001b76:	2102      	movs	r1, #2
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f000 fc1b 	bl	80023b4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2212      	movs	r2, #18
 8001b82:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	6859      	ldr	r1, [r3, #4]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	4b4c      	ldr	r3, [pc, #304]	; (8001cc0 <I2C_ITMasterCplt+0x188>)
 8001b90:	400b      	ands	r3, r1
 8001b92:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a49      	ldr	r2, [pc, #292]	; (8001cc4 <I2C_ITMasterCplt+0x18c>)
 8001b9e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	f003 0310 	and.w	r3, r3, #16
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d009      	beq.n	8001bbe <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2210      	movs	r2, #16
 8001bb0:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb6:	f043 0204 	orr.w	r2, r3, #4
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	2b60      	cmp	r3, #96	; 0x60
 8001bc8:	d10a      	bne.n	8001be0 <I2C_ITMasterCplt+0xa8>
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	f003 0304 	and.w	r3, r3, #4
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d005      	beq.n	8001be0 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8001bde:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f000 faee 	bl	80021c2 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bea:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	2b60      	cmp	r3, #96	; 0x60
 8001bf6:	d002      	beq.n	8001bfe <I2C_ITMasterCplt+0xc6>
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d006      	beq.n	8001c0c <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c02:	4619      	mov	r1, r3
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f000 f9c5 	bl	8001f94 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001c0a:	e054      	b.n	8001cb6 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	2b21      	cmp	r3, #33	; 0x21
 8001c16:	d124      	bne.n	8001c62 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2220      	movs	r2, #32
 8001c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2b40      	cmp	r3, #64	; 0x40
 8001c30:	d10b      	bne.n	8001c4a <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f7ff fa5d 	bl	8001102 <HAL_I2C_MemTxCpltCallback>
}
 8001c48:	e035      	b.n	8001cb6 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f7ff fa33 	bl	80010c6 <HAL_I2C_MasterTxCpltCallback>
}
 8001c60:	e029      	b.n	8001cb6 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	2b22      	cmp	r3, #34	; 0x22
 8001c6c:	d123      	bne.n	8001cb6 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2220      	movs	r2, #32
 8001c72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	2b40      	cmp	r3, #64	; 0x40
 8001c86:	d10b      	bne.n	8001ca0 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f7ff fa3c 	bl	8001116 <HAL_I2C_MemRxCpltCallback>
}
 8001c9e:	e00a      	b.n	8001cb6 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f7ff fa12 	bl	80010da <HAL_I2C_MasterRxCpltCallback>
}
 8001cb6:	bf00      	nop
 8001cb8:	3718      	adds	r7, #24
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	fe00e800 	.word	0xfe00e800
 8001cc4:	ffff0000 	.word	0xffff0000

08001cc8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ce4:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2220      	movs	r2, #32
 8001cec:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001cee:	7bfb      	ldrb	r3, [r7, #15]
 8001cf0:	2b21      	cmp	r3, #33	; 0x21
 8001cf2:	d002      	beq.n	8001cfa <I2C_ITSlaveCplt+0x32>
 8001cf4:	7bfb      	ldrb	r3, [r7, #15]
 8001cf6:	2b29      	cmp	r3, #41	; 0x29
 8001cf8:	d108      	bne.n	8001d0c <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8001cfa:	f248 0101 	movw	r1, #32769	; 0x8001
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 fb58 	bl	80023b4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2221      	movs	r2, #33	; 0x21
 8001d08:	631a      	str	r2, [r3, #48]	; 0x30
 8001d0a:	e019      	b.n	8001d40 <I2C_ITSlaveCplt+0x78>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001d0c:	7bfb      	ldrb	r3, [r7, #15]
 8001d0e:	2b22      	cmp	r3, #34	; 0x22
 8001d10:	d002      	beq.n	8001d18 <I2C_ITSlaveCplt+0x50>
 8001d12:	7bfb      	ldrb	r3, [r7, #15]
 8001d14:	2b2a      	cmp	r3, #42	; 0x2a
 8001d16:	d108      	bne.n	8001d2a <I2C_ITSlaveCplt+0x62>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8001d18:	f248 0102 	movw	r1, #32770	; 0x8002
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f000 fb49 	bl	80023b4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2222      	movs	r2, #34	; 0x22
 8001d26:	631a      	str	r2, [r3, #48]	; 0x30
 8001d28:	e00a      	b.n	8001d40 <I2C_ITSlaveCplt+0x78>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8001d2a:	7bfb      	ldrb	r3, [r7, #15]
 8001d2c:	2b28      	cmp	r3, #40	; 0x28
 8001d2e:	d107      	bne.n	8001d40 <I2C_ITSlaveCplt+0x78>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8001d30:	f248 0103 	movw	r1, #32771	; 0x8003
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f000 fb3d 	bl	80023b4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	685a      	ldr	r2, [r3, #4]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d4e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	6859      	ldr	r1, [r3, #4]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	4b62      	ldr	r3, [pc, #392]	; (8001ee4 <I2C_ITSlaveCplt+0x21c>)
 8001d5c:	400b      	ands	r3, r1
 8001d5e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f000 fa2e 	bl	80021c2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d013      	beq.n	8001d98 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001d7e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d01f      	beq.n	8001dc8 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d96:	e017      	b.n	8001dc8 <I2C_ITSlaveCplt+0x100>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d012      	beq.n	8001dc8 <I2C_ITSlaveCplt+0x100>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001db0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d006      	beq.n	8001dc8 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	f003 0304 	and.w	r3, r3, #4
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d020      	beq.n	8001e14 <I2C_ITSlaveCplt+0x14c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	f023 0304 	bic.w	r3, r3, #4
 8001dd8:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de4:	b2d2      	uxtb	r2, r2
 8001de6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dec:	1c5a      	adds	r2, r3, #1
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d00c      	beq.n	8001e14 <I2C_ITSlaveCplt+0x14c>
    {
      hi2c->XferSize--;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	b29a      	uxth	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d005      	beq.n	8001e2a <I2C_ITSlaveCplt+0x162>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e22:	f043 0204 	orr.w	r2, r3, #4
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d010      	beq.n	8001e62 <I2C_ITSlaveCplt+0x19a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e44:	4619      	mov	r1, r3
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f000 f8a4 	bl	8001f94 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	2b28      	cmp	r3, #40	; 0x28
 8001e56:	d141      	bne.n	8001edc <I2C_ITSlaveCplt+0x214>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8001e58:	6979      	ldr	r1, [r7, #20]
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f000 f846 	bl	8001eec <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001e60:	e03c      	b.n	8001edc <I2C_ITSlaveCplt+0x214>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e66:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001e6a:	d014      	beq.n	8001e96 <I2C_ITSlaveCplt+0x1ce>
    I2C_ITSlaveSeqCplt(hi2c);
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f7ff fe06 	bl	8001a7e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a1c      	ldr	r2, [pc, #112]	; (8001ee8 <I2C_ITSlaveCplt+0x220>)
 8001e76:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2220      	movs	r2, #32
 8001e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7fe fa6c 	bl	800036c <HAL_I2C_ListenCpltCallback>
}
 8001e94:	e022      	b.n	8001edc <I2C_ITSlaveCplt+0x214>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b22      	cmp	r3, #34	; 0x22
 8001ea0:	d10e      	bne.n	8001ec0 <I2C_ITSlaveCplt+0x1f8>
    hi2c->State = HAL_I2C_STATE_READY;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2220      	movs	r2, #32
 8001ea6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f7fe fa7f 	bl	80003bc <HAL_I2C_SlaveRxCpltCallback>
}
 8001ebe:	e00d      	b.n	8001edc <I2C_ITSlaveCplt+0x214>
    hi2c->State = HAL_I2C_STATE_READY;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2220      	movs	r2, #32
 8001ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f7ff f909 	bl	80010ee <HAL_I2C_SlaveTxCpltCallback>
}
 8001edc:	bf00      	nop
 8001ede:	3718      	adds	r7, #24
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	fe00e800 	.word	0xfe00e800
 8001ee8:	ffff0000 	.word	0xffff0000

08001eec <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a25      	ldr	r2, [pc, #148]	; (8001f90 <I2C_ITListenCplt+0xa4>)
 8001efa:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2220      	movs	r2, #32
 8001f06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	f003 0304 	and.w	r3, r3, #4
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d022      	beq.n	8001f68 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2c:	b2d2      	uxtb	r2, r2
 8001f2e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f34:	1c5a      	adds	r2, r3, #1
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d012      	beq.n	8001f68 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f46:	3b01      	subs	r3, #1
 8001f48:	b29a      	uxth	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	3b01      	subs	r3, #1
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f60:	f043 0204 	orr.w	r2, r3, #4
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001f68:	f248 0103 	movw	r1, #32771	; 0x8003
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f000 fa21 	bl	80023b4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2210      	movs	r2, #16
 8001f78:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f7fe f9f2 	bl	800036c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8001f88:	bf00      	nop
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	ffff0000 	.word	0xffff0000

08001f94 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fa4:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a6d      	ldr	r2, [pc, #436]	; (8002168 <I2C_ITError+0x1d4>)
 8001fb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	431a      	orrs	r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8001fc6:	7bfb      	ldrb	r3, [r7, #15]
 8001fc8:	2b28      	cmp	r3, #40	; 0x28
 8001fca:	d005      	beq.n	8001fd8 <I2C_ITError+0x44>
 8001fcc:	7bfb      	ldrb	r3, [r7, #15]
 8001fce:	2b29      	cmp	r3, #41	; 0x29
 8001fd0:	d002      	beq.n	8001fd8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8001fd2:	7bfb      	ldrb	r3, [r7, #15]
 8001fd4:	2b2a      	cmp	r3, #42	; 0x2a
 8001fd6:	d10b      	bne.n	8001ff0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001fd8:	2103      	movs	r1, #3
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 f9ea 	bl	80023b4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2228      	movs	r2, #40	; 0x28
 8001fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a60      	ldr	r2, [pc, #384]	; (800216c <I2C_ITError+0x1d8>)
 8001fec:	635a      	str	r2, [r3, #52]	; 0x34
 8001fee:	e030      	b.n	8002052 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001ff0:	f248 0103 	movw	r1, #32771	; 0x8003
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f000 f9dd 	bl	80023b4 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f000 f8e1 	bl	80021c2 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002006:	b2db      	uxtb	r3, r3
 8002008:	2b60      	cmp	r3, #96	; 0x60
 800200a:	d01f      	beq.n	800204c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2220      	movs	r2, #32
 8002010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	699b      	ldr	r3, [r3, #24]
 800201a:	f003 0320 	and.w	r3, r3, #32
 800201e:	2b20      	cmp	r3, #32
 8002020:	d114      	bne.n	800204c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	f003 0310 	and.w	r3, r3, #16
 800202c:	2b10      	cmp	r3, #16
 800202e:	d109      	bne.n	8002044 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2210      	movs	r2, #16
 8002036:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203c:	f043 0204 	orr.w	r2, r3, #4
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2220      	movs	r2, #32
 800204a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002056:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800205c:	2b00      	cmp	r3, #0
 800205e:	d039      	beq.n	80020d4 <I2C_ITError+0x140>
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	2b11      	cmp	r3, #17
 8002064:	d002      	beq.n	800206c <I2C_ITError+0xd8>
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	2b21      	cmp	r3, #33	; 0x21
 800206a:	d133      	bne.n	80020d4 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002076:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800207a:	d107      	bne.n	800208c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800208a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002090:	4618      	mov	r0, r3
 8002092:	f7fe fc7d 	bl	8000990 <HAL_DMA_GetState>
 8002096:	4603      	mov	r3, r0
 8002098:	2b01      	cmp	r3, #1
 800209a:	d017      	beq.n	80020cc <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020a0:	4a33      	ldr	r2, [pc, #204]	; (8002170 <I2C_ITError+0x1dc>)
 80020a2:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7fe fc2c 	bl	800090e <HAL_DMA_Abort_IT>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d04d      	beq.n	8002158 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80020c6:	4610      	mov	r0, r2
 80020c8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80020ca:	e045      	b.n	8002158 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f000 f851 	bl	8002174 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80020d2:	e041      	b.n	8002158 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d039      	beq.n	8002150 <I2C_ITError+0x1bc>
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	2b12      	cmp	r3, #18
 80020e0:	d002      	beq.n	80020e8 <I2C_ITError+0x154>
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	2b22      	cmp	r3, #34	; 0x22
 80020e6:	d133      	bne.n	8002150 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020f6:	d107      	bne.n	8002108 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002106:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800210c:	4618      	mov	r0, r3
 800210e:	f7fe fc3f 	bl	8000990 <HAL_DMA_GetState>
 8002112:	4603      	mov	r3, r0
 8002114:	2b01      	cmp	r3, #1
 8002116:	d017      	beq.n	8002148 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800211c:	4a14      	ldr	r2, [pc, #80]	; (8002170 <I2C_ITError+0x1dc>)
 800211e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800212c:	4618      	mov	r0, r3
 800212e:	f7fe fbee 	bl	800090e <HAL_DMA_Abort_IT>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d011      	beq.n	800215c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800213c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002142:	4610      	mov	r0, r2
 8002144:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002146:	e009      	b.n	800215c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f000 f813 	bl	8002174 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800214e:	e005      	b.n	800215c <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f000 f80f 	bl	8002174 <I2C_TreatErrorCallback>
  }
}
 8002156:	e002      	b.n	800215e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002158:	bf00      	nop
 800215a:	e000      	b.n	800215e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800215c:	bf00      	nop
}
 800215e:	bf00      	nop
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	ffff0000 	.word	0xffff0000
 800216c:	0800113f 	.word	0x0800113f
 8002170:	0800220b 	.word	0x0800220b

08002174 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002182:	b2db      	uxtb	r3, r3
 8002184:	2b60      	cmp	r3, #96	; 0x60
 8002186:	d10e      	bne.n	80021a6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2220      	movs	r2, #32
 800218c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f7fe ffc3 	bl	800112a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80021a4:	e009      	b.n	80021ba <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f7fe f913 	bl	80003e0 <HAL_I2C_ErrorCallback>
}
 80021ba:	bf00      	nop
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80021c2:	b480      	push	{r7}
 80021c4:	b083      	sub	sp, #12
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d103      	bne.n	80021e0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2200      	movs	r2, #0
 80021de:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d007      	beq.n	80021fe <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	699a      	ldr	r2, [r3, #24]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f042 0201 	orr.w	r2, r2, #1
 80021fc:	619a      	str	r2, [r3, #24]
  }
}
 80021fe:	bf00      	nop
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr

0800220a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800220a:	b580      	push	{r7, lr}
 800220c:	b084      	sub	sp, #16
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002216:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800221c:	2b00      	cmp	r3, #0
 800221e:	d003      	beq.n	8002228 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002224:	2200      	movs	r2, #0
 8002226:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800222c:	2b00      	cmp	r3, #0
 800222e:	d003      	beq.n	8002238 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002234:	2200      	movs	r2, #0
 8002236:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8002238:	68f8      	ldr	r0, [r7, #12]
 800223a:	f7ff ff9b 	bl	8002174 <I2C_TreatErrorCallback>
}
 800223e:	bf00      	nop
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
	...

08002248 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002248:	b480      	push	{r7}
 800224a:	b087      	sub	sp, #28
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	607b      	str	r3, [r7, #4]
 8002252:	460b      	mov	r3, r1
 8002254:	817b      	strh	r3, [r7, #10]
 8002256:	4613      	mov	r3, r2
 8002258:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800225a:	897b      	ldrh	r3, [r7, #10]
 800225c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002260:	7a7b      	ldrb	r3, [r7, #9]
 8002262:	041b      	lsls	r3, r3, #16
 8002264:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002268:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800226e:	6a3b      	ldr	r3, [r7, #32]
 8002270:	4313      	orrs	r3, r2
 8002272:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002276:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	685a      	ldr	r2, [r3, #4]
 800227e:	6a3b      	ldr	r3, [r7, #32]
 8002280:	0d5b      	lsrs	r3, r3, #21
 8002282:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002286:	4b08      	ldr	r3, [pc, #32]	; (80022a8 <I2C_TransferConfig+0x60>)
 8002288:	430b      	orrs	r3, r1
 800228a:	43db      	mvns	r3, r3
 800228c:	ea02 0103 	and.w	r1, r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	697a      	ldr	r2, [r7, #20]
 8002296:	430a      	orrs	r2, r1
 8002298:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800229a:	bf00      	nop
 800229c:	371c      	adds	r7, #28
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	03ff63ff 	.word	0x03ff63ff

080022ac <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	460b      	mov	r3, r1
 80022b6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80022b8:	2300      	movs	r3, #0
 80022ba:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022c0:	4a39      	ldr	r2, [pc, #228]	; (80023a8 <I2C_Enable_IRQ+0xfc>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d032      	beq.n	800232c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80022ca:	4a38      	ldr	r2, [pc, #224]	; (80023ac <I2C_Enable_IRQ+0x100>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d02d      	beq.n	800232c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80022d4:	4a36      	ldr	r2, [pc, #216]	; (80023b0 <I2C_Enable_IRQ+0x104>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d028      	beq.n	800232c <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80022da:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	da03      	bge.n	80022ea <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80022e8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80022ea:	887b      	ldrh	r3, [r7, #2]
 80022ec:	f003 0301 	and.w	r3, r3, #1
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d003      	beq.n	80022fc <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80022fa:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80022fc:	887b      	ldrh	r3, [r7, #2]
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d003      	beq.n	800230e <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800230c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800230e:	887b      	ldrh	r3, [r7, #2]
 8002310:	2b10      	cmp	r3, #16
 8002312:	d103      	bne.n	800231c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800231a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800231c:	887b      	ldrh	r3, [r7, #2]
 800231e:	2b20      	cmp	r3, #32
 8002320:	d133      	bne.n	800238a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f043 0320 	orr.w	r3, r3, #32
 8002328:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800232a:	e02e      	b.n	800238a <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800232c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002330:	2b00      	cmp	r3, #0
 8002332:	da03      	bge.n	800233c <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800233a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800233c:	887b      	ldrh	r3, [r7, #2]
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b00      	cmp	r3, #0
 8002344:	d003      	beq.n	800234e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800234c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800234e:	887b      	ldrh	r3, [r7, #2]
 8002350:	f003 0302 	and.w	r3, r3, #2
 8002354:	2b00      	cmp	r3, #0
 8002356:	d003      	beq.n	8002360 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800235e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002360:	887b      	ldrh	r3, [r7, #2]
 8002362:	2b10      	cmp	r3, #16
 8002364:	d103      	bne.n	800236e <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800236c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800236e:	887b      	ldrh	r3, [r7, #2]
 8002370:	2b20      	cmp	r3, #32
 8002372:	d103      	bne.n	800237c <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800237a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800237c:	887b      	ldrh	r3, [r7, #2]
 800237e:	2b40      	cmp	r3, #64	; 0x40
 8002380:	d103      	bne.n	800238a <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002388:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6819      	ldr	r1, [r3, #0]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68fa      	ldr	r2, [r7, #12]
 8002396:	430a      	orrs	r2, r1
 8002398:	601a      	str	r2, [r3, #0]
}
 800239a:	bf00      	nop
 800239c:	3714      	adds	r7, #20
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	0800132f 	.word	0x0800132f
 80023ac:	08001751 	.word	0x08001751
 80023b0:	08001505 	.word	0x08001505

080023b4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	460b      	mov	r3, r1
 80023be:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80023c0:	2300      	movs	r3, #0
 80023c2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80023c4:	887b      	ldrh	r3, [r7, #2]
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d00f      	beq.n	80023ee <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80023d4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80023e2:	2b28      	cmp	r3, #40	; 0x28
 80023e4:	d003      	beq.n	80023ee <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80023ec:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80023ee:	887b      	ldrh	r3, [r7, #2]
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d00f      	beq.n	8002418 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80023fe:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002406:	b2db      	uxtb	r3, r3
 8002408:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800240c:	2b28      	cmp	r3, #40	; 0x28
 800240e:	d003      	beq.n	8002418 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002416:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002418:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800241c:	2b00      	cmp	r3, #0
 800241e:	da03      	bge.n	8002428 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8002426:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002428:	887b      	ldrh	r3, [r7, #2]
 800242a:	2b10      	cmp	r3, #16
 800242c:	d103      	bne.n	8002436 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8002434:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002436:	887b      	ldrh	r3, [r7, #2]
 8002438:	2b20      	cmp	r3, #32
 800243a:	d103      	bne.n	8002444 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f043 0320 	orr.w	r3, r3, #32
 8002442:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002444:	887b      	ldrh	r3, [r7, #2]
 8002446:	2b40      	cmp	r3, #64	; 0x40
 8002448:	d103      	bne.n	8002452 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002450:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	6819      	ldr	r1, [r3, #0]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	43da      	mvns	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	400a      	ands	r2, r1
 8002462:	601a      	str	r2, [r3, #0]
}
 8002464:	bf00      	nop
 8002466:	3714      	adds	r7, #20
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002480:	b2db      	uxtb	r3, r3
 8002482:	2b20      	cmp	r3, #32
 8002484:	d138      	bne.n	80024f8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800248c:	2b01      	cmp	r3, #1
 800248e:	d101      	bne.n	8002494 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002490:	2302      	movs	r3, #2
 8002492:	e032      	b.n	80024fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2224      	movs	r2, #36	; 0x24
 80024a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f022 0201 	bic.w	r2, r2, #1
 80024b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80024c2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	6819      	ldr	r1, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	430a      	orrs	r2, r1
 80024d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f042 0201 	orr.w	r2, r2, #1
 80024e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2220      	movs	r2, #32
 80024e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80024f4:	2300      	movs	r3, #0
 80024f6:	e000      	b.n	80024fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80024f8:	2302      	movs	r3, #2
  }
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr

08002506 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002506:	b480      	push	{r7}
 8002508:	b085      	sub	sp, #20
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
 800250e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002516:	b2db      	uxtb	r3, r3
 8002518:	2b20      	cmp	r3, #32
 800251a:	d139      	bne.n	8002590 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002522:	2b01      	cmp	r3, #1
 8002524:	d101      	bne.n	800252a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002526:	2302      	movs	r3, #2
 8002528:	e033      	b.n	8002592 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2201      	movs	r2, #1
 800252e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2224      	movs	r2, #36	; 0x24
 8002536:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f022 0201 	bic.w	r2, r2, #1
 8002548:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002558:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	021b      	lsls	r3, r3, #8
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	4313      	orrs	r3, r2
 8002562:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	68fa      	ldr	r2, [r7, #12]
 800256a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f042 0201 	orr.w	r2, r2, #1
 800257a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2220      	movs	r2, #32
 8002580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800258c:	2300      	movs	r3, #0
 800258e:	e000      	b.n	8002592 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002590:	2302      	movs	r3, #2
  }
}
 8002592:	4618      	mov	r0, r3
 8002594:	3714      	adds	r7, #20
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
	...

080025a0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80025a4:	4b04      	ldr	r3, [pc, #16]	; (80025b8 <HAL_PWREx_GetVoltageRange+0x18>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	40007000 	.word	0x40007000

080025bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80025bc:	b480      	push	{r7}
 80025be:	b085      	sub	sp, #20
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025ca:	d130      	bne.n	800262e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80025cc:	4b23      	ldr	r3, [pc, #140]	; (800265c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80025d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025d8:	d038      	beq.n	800264c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80025da:	4b20      	ldr	r3, [pc, #128]	; (800265c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80025e2:	4a1e      	ldr	r2, [pc, #120]	; (800265c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025e8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80025ea:	4b1d      	ldr	r3, [pc, #116]	; (8002660 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2232      	movs	r2, #50	; 0x32
 80025f0:	fb02 f303 	mul.w	r3, r2, r3
 80025f4:	4a1b      	ldr	r2, [pc, #108]	; (8002664 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80025f6:	fba2 2303 	umull	r2, r3, r2, r3
 80025fa:	0c9b      	lsrs	r3, r3, #18
 80025fc:	3301      	adds	r3, #1
 80025fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002600:	e002      	b.n	8002608 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	3b01      	subs	r3, #1
 8002606:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002608:	4b14      	ldr	r3, [pc, #80]	; (800265c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800260a:	695b      	ldr	r3, [r3, #20]
 800260c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002610:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002614:	d102      	bne.n	800261c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d1f2      	bne.n	8002602 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800261c:	4b0f      	ldr	r3, [pc, #60]	; (800265c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800261e:	695b      	ldr	r3, [r3, #20]
 8002620:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002624:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002628:	d110      	bne.n	800264c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e00f      	b.n	800264e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800262e:	4b0b      	ldr	r3, [pc, #44]	; (800265c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002636:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800263a:	d007      	beq.n	800264c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800263c:	4b07      	ldr	r3, [pc, #28]	; (800265c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002644:	4a05      	ldr	r2, [pc, #20]	; (800265c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002646:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800264a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3714      	adds	r7, #20
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	40007000 	.word	0x40007000
 8002660:	20000000 	.word	0x20000000
 8002664:	431bde83 	.word	0x431bde83

08002668 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b088      	sub	sp, #32
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e3ca      	b.n	8002e10 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800267a:	4b97      	ldr	r3, [pc, #604]	; (80028d8 <HAL_RCC_OscConfig+0x270>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f003 030c 	and.w	r3, r3, #12
 8002682:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002684:	4b94      	ldr	r3, [pc, #592]	; (80028d8 <HAL_RCC_OscConfig+0x270>)
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	f003 0303 	and.w	r3, r3, #3
 800268c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0310 	and.w	r3, r3, #16
 8002696:	2b00      	cmp	r3, #0
 8002698:	f000 80e4 	beq.w	8002864 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d007      	beq.n	80026b2 <HAL_RCC_OscConfig+0x4a>
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	2b0c      	cmp	r3, #12
 80026a6:	f040 808b 	bne.w	80027c0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	f040 8087 	bne.w	80027c0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026b2:	4b89      	ldr	r3, [pc, #548]	; (80028d8 <HAL_RCC_OscConfig+0x270>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d005      	beq.n	80026ca <HAL_RCC_OscConfig+0x62>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e3a2      	b.n	8002e10 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a1a      	ldr	r2, [r3, #32]
 80026ce:	4b82      	ldr	r3, [pc, #520]	; (80028d8 <HAL_RCC_OscConfig+0x270>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0308 	and.w	r3, r3, #8
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d004      	beq.n	80026e4 <HAL_RCC_OscConfig+0x7c>
 80026da:	4b7f      	ldr	r3, [pc, #508]	; (80028d8 <HAL_RCC_OscConfig+0x270>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026e2:	e005      	b.n	80026f0 <HAL_RCC_OscConfig+0x88>
 80026e4:	4b7c      	ldr	r3, [pc, #496]	; (80028d8 <HAL_RCC_OscConfig+0x270>)
 80026e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026ea:	091b      	lsrs	r3, r3, #4
 80026ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d223      	bcs.n	800273c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a1b      	ldr	r3, [r3, #32]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f000 fd1d 	bl	8003138 <RCC_SetFlashLatencyFromMSIRange>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e383      	b.n	8002e10 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002708:	4b73      	ldr	r3, [pc, #460]	; (80028d8 <HAL_RCC_OscConfig+0x270>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a72      	ldr	r2, [pc, #456]	; (80028d8 <HAL_RCC_OscConfig+0x270>)
 800270e:	f043 0308 	orr.w	r3, r3, #8
 8002712:	6013      	str	r3, [r2, #0]
 8002714:	4b70      	ldr	r3, [pc, #448]	; (80028d8 <HAL_RCC_OscConfig+0x270>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	496d      	ldr	r1, [pc, #436]	; (80028d8 <HAL_RCC_OscConfig+0x270>)
 8002722:	4313      	orrs	r3, r2
 8002724:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002726:	4b6c      	ldr	r3, [pc, #432]	; (80028d8 <HAL_RCC_OscConfig+0x270>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	69db      	ldr	r3, [r3, #28]
 8002732:	021b      	lsls	r3, r3, #8
 8002734:	4968      	ldr	r1, [pc, #416]	; (80028d8 <HAL_RCC_OscConfig+0x270>)
 8002736:	4313      	orrs	r3, r2
 8002738:	604b      	str	r3, [r1, #4]
 800273a:	e025      	b.n	8002788 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800273c:	4b66      	ldr	r3, [pc, #408]	; (80028d8 <HAL_RCC_OscConfig+0x270>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a65      	ldr	r2, [pc, #404]	; (80028d8 <HAL_RCC_OscConfig+0x270>)
 8002742:	f043 0308 	orr.w	r3, r3, #8
 8002746:	6013      	str	r3, [r2, #0]
 8002748:	4b63      	ldr	r3, [pc, #396]	; (80028d8 <HAL_RCC_OscConfig+0x270>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a1b      	ldr	r3, [r3, #32]
 8002754:	4960      	ldr	r1, [pc, #384]	; (80028d8 <HAL_RCC_OscConfig+0x270>)
 8002756:	4313      	orrs	r3, r2
 8002758:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800275a:	4b5f      	ldr	r3, [pc, #380]	; (80028d8 <HAL_RCC_OscConfig+0x270>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	69db      	ldr	r3, [r3, #28]
 8002766:	021b      	lsls	r3, r3, #8
 8002768:	495b      	ldr	r1, [pc, #364]	; (80028d8 <HAL_RCC_OscConfig+0x270>)
 800276a:	4313      	orrs	r3, r2
 800276c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d109      	bne.n	8002788 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a1b      	ldr	r3, [r3, #32]
 8002778:	4618      	mov	r0, r3
 800277a:	f000 fcdd 	bl	8003138 <RCC_SetFlashLatencyFromMSIRange>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e343      	b.n	8002e10 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002788:	f000 fc4a 	bl	8003020 <HAL_RCC_GetSysClockFreq>
 800278c:	4602      	mov	r2, r0
 800278e:	4b52      	ldr	r3, [pc, #328]	; (80028d8 <HAL_RCC_OscConfig+0x270>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	091b      	lsrs	r3, r3, #4
 8002794:	f003 030f 	and.w	r3, r3, #15
 8002798:	4950      	ldr	r1, [pc, #320]	; (80028dc <HAL_RCC_OscConfig+0x274>)
 800279a:	5ccb      	ldrb	r3, [r1, r3]
 800279c:	f003 031f 	and.w	r3, r3, #31
 80027a0:	fa22 f303 	lsr.w	r3, r2, r3
 80027a4:	4a4e      	ldr	r2, [pc, #312]	; (80028e0 <HAL_RCC_OscConfig+0x278>)
 80027a6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80027a8:	4b4e      	ldr	r3, [pc, #312]	; (80028e4 <HAL_RCC_OscConfig+0x27c>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7fd ff41 	bl	8000634 <HAL_InitTick>
 80027b2:	4603      	mov	r3, r0
 80027b4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80027b6:	7bfb      	ldrb	r3, [r7, #15]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d052      	beq.n	8002862 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80027bc:	7bfb      	ldrb	r3, [r7, #15]
 80027be:	e327      	b.n	8002e10 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d032      	beq.n	800282e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80027c8:	4b43      	ldr	r3, [pc, #268]	; (80028d8 <HAL_RCC_OscConfig+0x270>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a42      	ldr	r2, [pc, #264]	; (80028d8 <HAL_RCC_OscConfig+0x270>)
 80027ce:	f043 0301 	orr.w	r3, r3, #1
 80027d2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027d4:	f7fd ff7e 	bl	80006d4 <HAL_GetTick>
 80027d8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027da:	e008      	b.n	80027ee <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027dc:	f7fd ff7a 	bl	80006d4 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e310      	b.n	8002e10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027ee:	4b3a      	ldr	r3, [pc, #232]	; (80028d8 <HAL_RCC_OscConfig+0x270>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d0f0      	beq.n	80027dc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027fa:	4b37      	ldr	r3, [pc, #220]	; (80028d8 <HAL_RCC_OscConfig+0x270>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a36      	ldr	r2, [pc, #216]	; (80028d8 <HAL_RCC_OscConfig+0x270>)
 8002800:	f043 0308 	orr.w	r3, r3, #8
 8002804:	6013      	str	r3, [r2, #0]
 8002806:	4b34      	ldr	r3, [pc, #208]	; (80028d8 <HAL_RCC_OscConfig+0x270>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a1b      	ldr	r3, [r3, #32]
 8002812:	4931      	ldr	r1, [pc, #196]	; (80028d8 <HAL_RCC_OscConfig+0x270>)
 8002814:	4313      	orrs	r3, r2
 8002816:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002818:	4b2f      	ldr	r3, [pc, #188]	; (80028d8 <HAL_RCC_OscConfig+0x270>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	69db      	ldr	r3, [r3, #28]
 8002824:	021b      	lsls	r3, r3, #8
 8002826:	492c      	ldr	r1, [pc, #176]	; (80028d8 <HAL_RCC_OscConfig+0x270>)
 8002828:	4313      	orrs	r3, r2
 800282a:	604b      	str	r3, [r1, #4]
 800282c:	e01a      	b.n	8002864 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800282e:	4b2a      	ldr	r3, [pc, #168]	; (80028d8 <HAL_RCC_OscConfig+0x270>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a29      	ldr	r2, [pc, #164]	; (80028d8 <HAL_RCC_OscConfig+0x270>)
 8002834:	f023 0301 	bic.w	r3, r3, #1
 8002838:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800283a:	f7fd ff4b 	bl	80006d4 <HAL_GetTick>
 800283e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002840:	e008      	b.n	8002854 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002842:	f7fd ff47 	bl	80006d4 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b02      	cmp	r3, #2
 800284e:	d901      	bls.n	8002854 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e2dd      	b.n	8002e10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002854:	4b20      	ldr	r3, [pc, #128]	; (80028d8 <HAL_RCC_OscConfig+0x270>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d1f0      	bne.n	8002842 <HAL_RCC_OscConfig+0x1da>
 8002860:	e000      	b.n	8002864 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002862:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	2b00      	cmp	r3, #0
 800286e:	d074      	beq.n	800295a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	2b08      	cmp	r3, #8
 8002874:	d005      	beq.n	8002882 <HAL_RCC_OscConfig+0x21a>
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	2b0c      	cmp	r3, #12
 800287a:	d10e      	bne.n	800289a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	2b03      	cmp	r3, #3
 8002880:	d10b      	bne.n	800289a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002882:	4b15      	ldr	r3, [pc, #84]	; (80028d8 <HAL_RCC_OscConfig+0x270>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d064      	beq.n	8002958 <HAL_RCC_OscConfig+0x2f0>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d160      	bne.n	8002958 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e2ba      	b.n	8002e10 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028a2:	d106      	bne.n	80028b2 <HAL_RCC_OscConfig+0x24a>
 80028a4:	4b0c      	ldr	r3, [pc, #48]	; (80028d8 <HAL_RCC_OscConfig+0x270>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a0b      	ldr	r2, [pc, #44]	; (80028d8 <HAL_RCC_OscConfig+0x270>)
 80028aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ae:	6013      	str	r3, [r2, #0]
 80028b0:	e026      	b.n	8002900 <HAL_RCC_OscConfig+0x298>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028ba:	d115      	bne.n	80028e8 <HAL_RCC_OscConfig+0x280>
 80028bc:	4b06      	ldr	r3, [pc, #24]	; (80028d8 <HAL_RCC_OscConfig+0x270>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a05      	ldr	r2, [pc, #20]	; (80028d8 <HAL_RCC_OscConfig+0x270>)
 80028c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028c6:	6013      	str	r3, [r2, #0]
 80028c8:	4b03      	ldr	r3, [pc, #12]	; (80028d8 <HAL_RCC_OscConfig+0x270>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a02      	ldr	r2, [pc, #8]	; (80028d8 <HAL_RCC_OscConfig+0x270>)
 80028ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028d2:	6013      	str	r3, [r2, #0]
 80028d4:	e014      	b.n	8002900 <HAL_RCC_OscConfig+0x298>
 80028d6:	bf00      	nop
 80028d8:	40021000 	.word	0x40021000
 80028dc:	08003be0 	.word	0x08003be0
 80028e0:	20000000 	.word	0x20000000
 80028e4:	20000004 	.word	0x20000004
 80028e8:	4ba0      	ldr	r3, [pc, #640]	; (8002b6c <HAL_RCC_OscConfig+0x504>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a9f      	ldr	r2, [pc, #636]	; (8002b6c <HAL_RCC_OscConfig+0x504>)
 80028ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028f2:	6013      	str	r3, [r2, #0]
 80028f4:	4b9d      	ldr	r3, [pc, #628]	; (8002b6c <HAL_RCC_OscConfig+0x504>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a9c      	ldr	r2, [pc, #624]	; (8002b6c <HAL_RCC_OscConfig+0x504>)
 80028fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d013      	beq.n	8002930 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002908:	f7fd fee4 	bl	80006d4 <HAL_GetTick>
 800290c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800290e:	e008      	b.n	8002922 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002910:	f7fd fee0 	bl	80006d4 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b64      	cmp	r3, #100	; 0x64
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e276      	b.n	8002e10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002922:	4b92      	ldr	r3, [pc, #584]	; (8002b6c <HAL_RCC_OscConfig+0x504>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d0f0      	beq.n	8002910 <HAL_RCC_OscConfig+0x2a8>
 800292e:	e014      	b.n	800295a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002930:	f7fd fed0 	bl	80006d4 <HAL_GetTick>
 8002934:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002936:	e008      	b.n	800294a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002938:	f7fd fecc 	bl	80006d4 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b64      	cmp	r3, #100	; 0x64
 8002944:	d901      	bls.n	800294a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e262      	b.n	8002e10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800294a:	4b88      	ldr	r3, [pc, #544]	; (8002b6c <HAL_RCC_OscConfig+0x504>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d1f0      	bne.n	8002938 <HAL_RCC_OscConfig+0x2d0>
 8002956:	e000      	b.n	800295a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002958:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b00      	cmp	r3, #0
 8002964:	d060      	beq.n	8002a28 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	2b04      	cmp	r3, #4
 800296a:	d005      	beq.n	8002978 <HAL_RCC_OscConfig+0x310>
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	2b0c      	cmp	r3, #12
 8002970:	d119      	bne.n	80029a6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	2b02      	cmp	r3, #2
 8002976:	d116      	bne.n	80029a6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002978:	4b7c      	ldr	r3, [pc, #496]	; (8002b6c <HAL_RCC_OscConfig+0x504>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002980:	2b00      	cmp	r3, #0
 8002982:	d005      	beq.n	8002990 <HAL_RCC_OscConfig+0x328>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d101      	bne.n	8002990 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e23f      	b.n	8002e10 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002990:	4b76      	ldr	r3, [pc, #472]	; (8002b6c <HAL_RCC_OscConfig+0x504>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	691b      	ldr	r3, [r3, #16]
 800299c:	061b      	lsls	r3, r3, #24
 800299e:	4973      	ldr	r1, [pc, #460]	; (8002b6c <HAL_RCC_OscConfig+0x504>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029a4:	e040      	b.n	8002a28 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d023      	beq.n	80029f6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029ae:	4b6f      	ldr	r3, [pc, #444]	; (8002b6c <HAL_RCC_OscConfig+0x504>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a6e      	ldr	r2, [pc, #440]	; (8002b6c <HAL_RCC_OscConfig+0x504>)
 80029b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ba:	f7fd fe8b 	bl	80006d4 <HAL_GetTick>
 80029be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029c0:	e008      	b.n	80029d4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029c2:	f7fd fe87 	bl	80006d4 <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d901      	bls.n	80029d4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e21d      	b.n	8002e10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029d4:	4b65      	ldr	r3, [pc, #404]	; (8002b6c <HAL_RCC_OscConfig+0x504>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d0f0      	beq.n	80029c2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029e0:	4b62      	ldr	r3, [pc, #392]	; (8002b6c <HAL_RCC_OscConfig+0x504>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	691b      	ldr	r3, [r3, #16]
 80029ec:	061b      	lsls	r3, r3, #24
 80029ee:	495f      	ldr	r1, [pc, #380]	; (8002b6c <HAL_RCC_OscConfig+0x504>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	604b      	str	r3, [r1, #4]
 80029f4:	e018      	b.n	8002a28 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029f6:	4b5d      	ldr	r3, [pc, #372]	; (8002b6c <HAL_RCC_OscConfig+0x504>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a5c      	ldr	r2, [pc, #368]	; (8002b6c <HAL_RCC_OscConfig+0x504>)
 80029fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a02:	f7fd fe67 	bl	80006d4 <HAL_GetTick>
 8002a06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a08:	e008      	b.n	8002a1c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a0a:	f7fd fe63 	bl	80006d4 <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d901      	bls.n	8002a1c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e1f9      	b.n	8002e10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a1c:	4b53      	ldr	r3, [pc, #332]	; (8002b6c <HAL_RCC_OscConfig+0x504>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d1f0      	bne.n	8002a0a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0308 	and.w	r3, r3, #8
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d03c      	beq.n	8002aae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	695b      	ldr	r3, [r3, #20]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d01c      	beq.n	8002a76 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a3c:	4b4b      	ldr	r3, [pc, #300]	; (8002b6c <HAL_RCC_OscConfig+0x504>)
 8002a3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a42:	4a4a      	ldr	r2, [pc, #296]	; (8002b6c <HAL_RCC_OscConfig+0x504>)
 8002a44:	f043 0301 	orr.w	r3, r3, #1
 8002a48:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a4c:	f7fd fe42 	bl	80006d4 <HAL_GetTick>
 8002a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a52:	e008      	b.n	8002a66 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a54:	f7fd fe3e 	bl	80006d4 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e1d4      	b.n	8002e10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a66:	4b41      	ldr	r3, [pc, #260]	; (8002b6c <HAL_RCC_OscConfig+0x504>)
 8002a68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a6c:	f003 0302 	and.w	r3, r3, #2
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d0ef      	beq.n	8002a54 <HAL_RCC_OscConfig+0x3ec>
 8002a74:	e01b      	b.n	8002aae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a76:	4b3d      	ldr	r3, [pc, #244]	; (8002b6c <HAL_RCC_OscConfig+0x504>)
 8002a78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a7c:	4a3b      	ldr	r2, [pc, #236]	; (8002b6c <HAL_RCC_OscConfig+0x504>)
 8002a7e:	f023 0301 	bic.w	r3, r3, #1
 8002a82:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a86:	f7fd fe25 	bl	80006d4 <HAL_GetTick>
 8002a8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a8c:	e008      	b.n	8002aa0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a8e:	f7fd fe21 	bl	80006d4 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d901      	bls.n	8002aa0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e1b7      	b.n	8002e10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002aa0:	4b32      	ldr	r3, [pc, #200]	; (8002b6c <HAL_RCC_OscConfig+0x504>)
 8002aa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1ef      	bne.n	8002a8e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0304 	and.w	r3, r3, #4
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f000 80a6 	beq.w	8002c08 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002abc:	2300      	movs	r3, #0
 8002abe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002ac0:	4b2a      	ldr	r3, [pc, #168]	; (8002b6c <HAL_RCC_OscConfig+0x504>)
 8002ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d10d      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002acc:	4b27      	ldr	r3, [pc, #156]	; (8002b6c <HAL_RCC_OscConfig+0x504>)
 8002ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad0:	4a26      	ldr	r2, [pc, #152]	; (8002b6c <HAL_RCC_OscConfig+0x504>)
 8002ad2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ad6:	6593      	str	r3, [r2, #88]	; 0x58
 8002ad8:	4b24      	ldr	r3, [pc, #144]	; (8002b6c <HAL_RCC_OscConfig+0x504>)
 8002ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002adc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ae0:	60bb      	str	r3, [r7, #8]
 8002ae2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ae8:	4b21      	ldr	r3, [pc, #132]	; (8002b70 <HAL_RCC_OscConfig+0x508>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d118      	bne.n	8002b26 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002af4:	4b1e      	ldr	r3, [pc, #120]	; (8002b70 <HAL_RCC_OscConfig+0x508>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a1d      	ldr	r2, [pc, #116]	; (8002b70 <HAL_RCC_OscConfig+0x508>)
 8002afa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002afe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b00:	f7fd fde8 	bl	80006d4 <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b06:	e008      	b.n	8002b1a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b08:	f7fd fde4 	bl	80006d4 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e17a      	b.n	8002e10 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b1a:	4b15      	ldr	r3, [pc, #84]	; (8002b70 <HAL_RCC_OscConfig+0x508>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d0f0      	beq.n	8002b08 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d108      	bne.n	8002b40 <HAL_RCC_OscConfig+0x4d8>
 8002b2e:	4b0f      	ldr	r3, [pc, #60]	; (8002b6c <HAL_RCC_OscConfig+0x504>)
 8002b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b34:	4a0d      	ldr	r2, [pc, #52]	; (8002b6c <HAL_RCC_OscConfig+0x504>)
 8002b36:	f043 0301 	orr.w	r3, r3, #1
 8002b3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b3e:	e029      	b.n	8002b94 <HAL_RCC_OscConfig+0x52c>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	2b05      	cmp	r3, #5
 8002b46:	d115      	bne.n	8002b74 <HAL_RCC_OscConfig+0x50c>
 8002b48:	4b08      	ldr	r3, [pc, #32]	; (8002b6c <HAL_RCC_OscConfig+0x504>)
 8002b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b4e:	4a07      	ldr	r2, [pc, #28]	; (8002b6c <HAL_RCC_OscConfig+0x504>)
 8002b50:	f043 0304 	orr.w	r3, r3, #4
 8002b54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b58:	4b04      	ldr	r3, [pc, #16]	; (8002b6c <HAL_RCC_OscConfig+0x504>)
 8002b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b5e:	4a03      	ldr	r2, [pc, #12]	; (8002b6c <HAL_RCC_OscConfig+0x504>)
 8002b60:	f043 0301 	orr.w	r3, r3, #1
 8002b64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b68:	e014      	b.n	8002b94 <HAL_RCC_OscConfig+0x52c>
 8002b6a:	bf00      	nop
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	40007000 	.word	0x40007000
 8002b74:	4b9c      	ldr	r3, [pc, #624]	; (8002de8 <HAL_RCC_OscConfig+0x780>)
 8002b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b7a:	4a9b      	ldr	r2, [pc, #620]	; (8002de8 <HAL_RCC_OscConfig+0x780>)
 8002b7c:	f023 0301 	bic.w	r3, r3, #1
 8002b80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b84:	4b98      	ldr	r3, [pc, #608]	; (8002de8 <HAL_RCC_OscConfig+0x780>)
 8002b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b8a:	4a97      	ldr	r2, [pc, #604]	; (8002de8 <HAL_RCC_OscConfig+0x780>)
 8002b8c:	f023 0304 	bic.w	r3, r3, #4
 8002b90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d016      	beq.n	8002bca <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b9c:	f7fd fd9a 	bl	80006d4 <HAL_GetTick>
 8002ba0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ba2:	e00a      	b.n	8002bba <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ba4:	f7fd fd96 	bl	80006d4 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e12a      	b.n	8002e10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bba:	4b8b      	ldr	r3, [pc, #556]	; (8002de8 <HAL_RCC_OscConfig+0x780>)
 8002bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc0:	f003 0302 	and.w	r3, r3, #2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d0ed      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x53c>
 8002bc8:	e015      	b.n	8002bf6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bca:	f7fd fd83 	bl	80006d4 <HAL_GetTick>
 8002bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002bd0:	e00a      	b.n	8002be8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bd2:	f7fd fd7f 	bl	80006d4 <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d901      	bls.n	8002be8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e113      	b.n	8002e10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002be8:	4b7f      	ldr	r3, [pc, #508]	; (8002de8 <HAL_RCC_OscConfig+0x780>)
 8002bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1ed      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bf6:	7ffb      	ldrb	r3, [r7, #31]
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d105      	bne.n	8002c08 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bfc:	4b7a      	ldr	r3, [pc, #488]	; (8002de8 <HAL_RCC_OscConfig+0x780>)
 8002bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c00:	4a79      	ldr	r2, [pc, #484]	; (8002de8 <HAL_RCC_OscConfig+0x780>)
 8002c02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c06:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f000 80fe 	beq.w	8002e0e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	f040 80d0 	bne.w	8002dbc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002c1c:	4b72      	ldr	r3, [pc, #456]	; (8002de8 <HAL_RCC_OscConfig+0x780>)
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	f003 0203 	and.w	r2, r3, #3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d130      	bne.n	8002c92 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d127      	bne.n	8002c92 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c4c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d11f      	bne.n	8002c92 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c5c:	2a07      	cmp	r2, #7
 8002c5e:	bf14      	ite	ne
 8002c60:	2201      	movne	r2, #1
 8002c62:	2200      	moveq	r2, #0
 8002c64:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d113      	bne.n	8002c92 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c74:	085b      	lsrs	r3, r3, #1
 8002c76:	3b01      	subs	r3, #1
 8002c78:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d109      	bne.n	8002c92 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c88:	085b      	lsrs	r3, r3, #1
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d06e      	beq.n	8002d70 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	2b0c      	cmp	r3, #12
 8002c96:	d069      	beq.n	8002d6c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002c98:	4b53      	ldr	r3, [pc, #332]	; (8002de8 <HAL_RCC_OscConfig+0x780>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d105      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002ca4:	4b50      	ldr	r3, [pc, #320]	; (8002de8 <HAL_RCC_OscConfig+0x780>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d001      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e0ad      	b.n	8002e10 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002cb4:	4b4c      	ldr	r3, [pc, #304]	; (8002de8 <HAL_RCC_OscConfig+0x780>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a4b      	ldr	r2, [pc, #300]	; (8002de8 <HAL_RCC_OscConfig+0x780>)
 8002cba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cbe:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002cc0:	f7fd fd08 	bl	80006d4 <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cc6:	e008      	b.n	8002cda <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cc8:	f7fd fd04 	bl	80006d4 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e09a      	b.n	8002e10 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cda:	4b43      	ldr	r3, [pc, #268]	; (8002de8 <HAL_RCC_OscConfig+0x780>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1f0      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ce6:	4b40      	ldr	r3, [pc, #256]	; (8002de8 <HAL_RCC_OscConfig+0x780>)
 8002ce8:	68da      	ldr	r2, [r3, #12]
 8002cea:	4b40      	ldr	r3, [pc, #256]	; (8002dec <HAL_RCC_OscConfig+0x784>)
 8002cec:	4013      	ands	r3, r2
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002cf6:	3a01      	subs	r2, #1
 8002cf8:	0112      	lsls	r2, r2, #4
 8002cfa:	4311      	orrs	r1, r2
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d00:	0212      	lsls	r2, r2, #8
 8002d02:	4311      	orrs	r1, r2
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002d08:	0852      	lsrs	r2, r2, #1
 8002d0a:	3a01      	subs	r2, #1
 8002d0c:	0552      	lsls	r2, r2, #21
 8002d0e:	4311      	orrs	r1, r2
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002d14:	0852      	lsrs	r2, r2, #1
 8002d16:	3a01      	subs	r2, #1
 8002d18:	0652      	lsls	r2, r2, #25
 8002d1a:	4311      	orrs	r1, r2
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d20:	0912      	lsrs	r2, r2, #4
 8002d22:	0452      	lsls	r2, r2, #17
 8002d24:	430a      	orrs	r2, r1
 8002d26:	4930      	ldr	r1, [pc, #192]	; (8002de8 <HAL_RCC_OscConfig+0x780>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002d2c:	4b2e      	ldr	r3, [pc, #184]	; (8002de8 <HAL_RCC_OscConfig+0x780>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a2d      	ldr	r2, [pc, #180]	; (8002de8 <HAL_RCC_OscConfig+0x780>)
 8002d32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d36:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d38:	4b2b      	ldr	r3, [pc, #172]	; (8002de8 <HAL_RCC_OscConfig+0x780>)
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	4a2a      	ldr	r2, [pc, #168]	; (8002de8 <HAL_RCC_OscConfig+0x780>)
 8002d3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d42:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d44:	f7fd fcc6 	bl	80006d4 <HAL_GetTick>
 8002d48:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d4c:	f7fd fcc2 	bl	80006d4 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e058      	b.n	8002e10 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d5e:	4b22      	ldr	r3, [pc, #136]	; (8002de8 <HAL_RCC_OscConfig+0x780>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d0f0      	beq.n	8002d4c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d6a:	e050      	b.n	8002e0e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e04f      	b.n	8002e10 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d70:	4b1d      	ldr	r3, [pc, #116]	; (8002de8 <HAL_RCC_OscConfig+0x780>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d148      	bne.n	8002e0e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002d7c:	4b1a      	ldr	r3, [pc, #104]	; (8002de8 <HAL_RCC_OscConfig+0x780>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a19      	ldr	r2, [pc, #100]	; (8002de8 <HAL_RCC_OscConfig+0x780>)
 8002d82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d86:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d88:	4b17      	ldr	r3, [pc, #92]	; (8002de8 <HAL_RCC_OscConfig+0x780>)
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	4a16      	ldr	r2, [pc, #88]	; (8002de8 <HAL_RCC_OscConfig+0x780>)
 8002d8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d92:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d94:	f7fd fc9e 	bl	80006d4 <HAL_GetTick>
 8002d98:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d9a:	e008      	b.n	8002dae <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d9c:	f7fd fc9a 	bl	80006d4 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e030      	b.n	8002e10 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dae:	4b0e      	ldr	r3, [pc, #56]	; (8002de8 <HAL_RCC_OscConfig+0x780>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d0f0      	beq.n	8002d9c <HAL_RCC_OscConfig+0x734>
 8002dba:	e028      	b.n	8002e0e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	2b0c      	cmp	r3, #12
 8002dc0:	d023      	beq.n	8002e0a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dc2:	4b09      	ldr	r3, [pc, #36]	; (8002de8 <HAL_RCC_OscConfig+0x780>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a08      	ldr	r2, [pc, #32]	; (8002de8 <HAL_RCC_OscConfig+0x780>)
 8002dc8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dce:	f7fd fc81 	bl	80006d4 <HAL_GetTick>
 8002dd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dd4:	e00c      	b.n	8002df0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dd6:	f7fd fc7d 	bl	80006d4 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d905      	bls.n	8002df0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e013      	b.n	8002e10 <HAL_RCC_OscConfig+0x7a8>
 8002de8:	40021000 	.word	0x40021000
 8002dec:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002df0:	4b09      	ldr	r3, [pc, #36]	; (8002e18 <HAL_RCC_OscConfig+0x7b0>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d1ec      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002dfc:	4b06      	ldr	r3, [pc, #24]	; (8002e18 <HAL_RCC_OscConfig+0x7b0>)
 8002dfe:	68da      	ldr	r2, [r3, #12]
 8002e00:	4905      	ldr	r1, [pc, #20]	; (8002e18 <HAL_RCC_OscConfig+0x7b0>)
 8002e02:	4b06      	ldr	r3, [pc, #24]	; (8002e1c <HAL_RCC_OscConfig+0x7b4>)
 8002e04:	4013      	ands	r3, r2
 8002e06:	60cb      	str	r3, [r1, #12]
 8002e08:	e001      	b.n	8002e0e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e000      	b.n	8002e10 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3720      	adds	r7, #32
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	feeefffc 	.word	0xfeeefffc

08002e20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d101      	bne.n	8002e34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e0e7      	b.n	8003004 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e34:	4b75      	ldr	r3, [pc, #468]	; (800300c <HAL_RCC_ClockConfig+0x1ec>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0307 	and.w	r3, r3, #7
 8002e3c:	683a      	ldr	r2, [r7, #0]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d910      	bls.n	8002e64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e42:	4b72      	ldr	r3, [pc, #456]	; (800300c <HAL_RCC_ClockConfig+0x1ec>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f023 0207 	bic.w	r2, r3, #7
 8002e4a:	4970      	ldr	r1, [pc, #448]	; (800300c <HAL_RCC_ClockConfig+0x1ec>)
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e52:	4b6e      	ldr	r3, [pc, #440]	; (800300c <HAL_RCC_ClockConfig+0x1ec>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0307 	and.w	r3, r3, #7
 8002e5a:	683a      	ldr	r2, [r7, #0]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d001      	beq.n	8002e64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e0cf      	b.n	8003004 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d010      	beq.n	8002e92 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689a      	ldr	r2, [r3, #8]
 8002e74:	4b66      	ldr	r3, [pc, #408]	; (8003010 <HAL_RCC_ClockConfig+0x1f0>)
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d908      	bls.n	8002e92 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e80:	4b63      	ldr	r3, [pc, #396]	; (8003010 <HAL_RCC_ClockConfig+0x1f0>)
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	4960      	ldr	r1, [pc, #384]	; (8003010 <HAL_RCC_ClockConfig+0x1f0>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d04c      	beq.n	8002f38 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	2b03      	cmp	r3, #3
 8002ea4:	d107      	bne.n	8002eb6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ea6:	4b5a      	ldr	r3, [pc, #360]	; (8003010 <HAL_RCC_ClockConfig+0x1f0>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d121      	bne.n	8002ef6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e0a6      	b.n	8003004 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d107      	bne.n	8002ece <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ebe:	4b54      	ldr	r3, [pc, #336]	; (8003010 <HAL_RCC_ClockConfig+0x1f0>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d115      	bne.n	8002ef6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e09a      	b.n	8003004 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d107      	bne.n	8002ee6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ed6:	4b4e      	ldr	r3, [pc, #312]	; (8003010 <HAL_RCC_ClockConfig+0x1f0>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d109      	bne.n	8002ef6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e08e      	b.n	8003004 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ee6:	4b4a      	ldr	r3, [pc, #296]	; (8003010 <HAL_RCC_ClockConfig+0x1f0>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d101      	bne.n	8002ef6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e086      	b.n	8003004 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ef6:	4b46      	ldr	r3, [pc, #280]	; (8003010 <HAL_RCC_ClockConfig+0x1f0>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f023 0203 	bic.w	r2, r3, #3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	4943      	ldr	r1, [pc, #268]	; (8003010 <HAL_RCC_ClockConfig+0x1f0>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f08:	f7fd fbe4 	bl	80006d4 <HAL_GetTick>
 8002f0c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f0e:	e00a      	b.n	8002f26 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f10:	f7fd fbe0 	bl	80006d4 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e06e      	b.n	8003004 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f26:	4b3a      	ldr	r3, [pc, #232]	; (8003010 <HAL_RCC_ClockConfig+0x1f0>)
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f003 020c 	and.w	r2, r3, #12
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d1eb      	bne.n	8002f10 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0302 	and.w	r3, r3, #2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d010      	beq.n	8002f66 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689a      	ldr	r2, [r3, #8]
 8002f48:	4b31      	ldr	r3, [pc, #196]	; (8003010 <HAL_RCC_ClockConfig+0x1f0>)
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d208      	bcs.n	8002f66 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f54:	4b2e      	ldr	r3, [pc, #184]	; (8003010 <HAL_RCC_ClockConfig+0x1f0>)
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	492b      	ldr	r1, [pc, #172]	; (8003010 <HAL_RCC_ClockConfig+0x1f0>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f66:	4b29      	ldr	r3, [pc, #164]	; (800300c <HAL_RCC_ClockConfig+0x1ec>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0307 	and.w	r3, r3, #7
 8002f6e:	683a      	ldr	r2, [r7, #0]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d210      	bcs.n	8002f96 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f74:	4b25      	ldr	r3, [pc, #148]	; (800300c <HAL_RCC_ClockConfig+0x1ec>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f023 0207 	bic.w	r2, r3, #7
 8002f7c:	4923      	ldr	r1, [pc, #140]	; (800300c <HAL_RCC_ClockConfig+0x1ec>)
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f84:	4b21      	ldr	r3, [pc, #132]	; (800300c <HAL_RCC_ClockConfig+0x1ec>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0307 	and.w	r3, r3, #7
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d001      	beq.n	8002f96 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e036      	b.n	8003004 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0304 	and.w	r3, r3, #4
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d008      	beq.n	8002fb4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fa2:	4b1b      	ldr	r3, [pc, #108]	; (8003010 <HAL_RCC_ClockConfig+0x1f0>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	4918      	ldr	r1, [pc, #96]	; (8003010 <HAL_RCC_ClockConfig+0x1f0>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0308 	and.w	r3, r3, #8
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d009      	beq.n	8002fd4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fc0:	4b13      	ldr	r3, [pc, #76]	; (8003010 <HAL_RCC_ClockConfig+0x1f0>)
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	691b      	ldr	r3, [r3, #16]
 8002fcc:	00db      	lsls	r3, r3, #3
 8002fce:	4910      	ldr	r1, [pc, #64]	; (8003010 <HAL_RCC_ClockConfig+0x1f0>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002fd4:	f000 f824 	bl	8003020 <HAL_RCC_GetSysClockFreq>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	4b0d      	ldr	r3, [pc, #52]	; (8003010 <HAL_RCC_ClockConfig+0x1f0>)
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	091b      	lsrs	r3, r3, #4
 8002fe0:	f003 030f 	and.w	r3, r3, #15
 8002fe4:	490b      	ldr	r1, [pc, #44]	; (8003014 <HAL_RCC_ClockConfig+0x1f4>)
 8002fe6:	5ccb      	ldrb	r3, [r1, r3]
 8002fe8:	f003 031f 	and.w	r3, r3, #31
 8002fec:	fa22 f303 	lsr.w	r3, r2, r3
 8002ff0:	4a09      	ldr	r2, [pc, #36]	; (8003018 <HAL_RCC_ClockConfig+0x1f8>)
 8002ff2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ff4:	4b09      	ldr	r3, [pc, #36]	; (800301c <HAL_RCC_ClockConfig+0x1fc>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7fd fb1b 	bl	8000634 <HAL_InitTick>
 8002ffe:	4603      	mov	r3, r0
 8003000:	72fb      	strb	r3, [r7, #11]

  return status;
 8003002:	7afb      	ldrb	r3, [r7, #11]
}
 8003004:	4618      	mov	r0, r3
 8003006:	3710      	adds	r7, #16
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	40022000 	.word	0x40022000
 8003010:	40021000 	.word	0x40021000
 8003014:	08003be0 	.word	0x08003be0
 8003018:	20000000 	.word	0x20000000
 800301c:	20000004 	.word	0x20000004

08003020 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003020:	b480      	push	{r7}
 8003022:	b089      	sub	sp, #36	; 0x24
 8003024:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003026:	2300      	movs	r3, #0
 8003028:	61fb      	str	r3, [r7, #28]
 800302a:	2300      	movs	r3, #0
 800302c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800302e:	4b3e      	ldr	r3, [pc, #248]	; (8003128 <HAL_RCC_GetSysClockFreq+0x108>)
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f003 030c 	and.w	r3, r3, #12
 8003036:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003038:	4b3b      	ldr	r3, [pc, #236]	; (8003128 <HAL_RCC_GetSysClockFreq+0x108>)
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	f003 0303 	and.w	r3, r3, #3
 8003040:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d005      	beq.n	8003054 <HAL_RCC_GetSysClockFreq+0x34>
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	2b0c      	cmp	r3, #12
 800304c:	d121      	bne.n	8003092 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d11e      	bne.n	8003092 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003054:	4b34      	ldr	r3, [pc, #208]	; (8003128 <HAL_RCC_GetSysClockFreq+0x108>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0308 	and.w	r3, r3, #8
 800305c:	2b00      	cmp	r3, #0
 800305e:	d107      	bne.n	8003070 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003060:	4b31      	ldr	r3, [pc, #196]	; (8003128 <HAL_RCC_GetSysClockFreq+0x108>)
 8003062:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003066:	0a1b      	lsrs	r3, r3, #8
 8003068:	f003 030f 	and.w	r3, r3, #15
 800306c:	61fb      	str	r3, [r7, #28]
 800306e:	e005      	b.n	800307c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003070:	4b2d      	ldr	r3, [pc, #180]	; (8003128 <HAL_RCC_GetSysClockFreq+0x108>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	091b      	lsrs	r3, r3, #4
 8003076:	f003 030f 	and.w	r3, r3, #15
 800307a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800307c:	4a2b      	ldr	r2, [pc, #172]	; (800312c <HAL_RCC_GetSysClockFreq+0x10c>)
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003084:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d10d      	bne.n	80030a8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003090:	e00a      	b.n	80030a8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	2b04      	cmp	r3, #4
 8003096:	d102      	bne.n	800309e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003098:	4b25      	ldr	r3, [pc, #148]	; (8003130 <HAL_RCC_GetSysClockFreq+0x110>)
 800309a:	61bb      	str	r3, [r7, #24]
 800309c:	e004      	b.n	80030a8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	2b08      	cmp	r3, #8
 80030a2:	d101      	bne.n	80030a8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80030a4:	4b23      	ldr	r3, [pc, #140]	; (8003134 <HAL_RCC_GetSysClockFreq+0x114>)
 80030a6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	2b0c      	cmp	r3, #12
 80030ac:	d134      	bne.n	8003118 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80030ae:	4b1e      	ldr	r3, [pc, #120]	; (8003128 <HAL_RCC_GetSysClockFreq+0x108>)
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	f003 0303 	and.w	r3, r3, #3
 80030b6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d003      	beq.n	80030c6 <HAL_RCC_GetSysClockFreq+0xa6>
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	2b03      	cmp	r3, #3
 80030c2:	d003      	beq.n	80030cc <HAL_RCC_GetSysClockFreq+0xac>
 80030c4:	e005      	b.n	80030d2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80030c6:	4b1a      	ldr	r3, [pc, #104]	; (8003130 <HAL_RCC_GetSysClockFreq+0x110>)
 80030c8:	617b      	str	r3, [r7, #20]
      break;
 80030ca:	e005      	b.n	80030d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80030cc:	4b19      	ldr	r3, [pc, #100]	; (8003134 <HAL_RCC_GetSysClockFreq+0x114>)
 80030ce:	617b      	str	r3, [r7, #20]
      break;
 80030d0:	e002      	b.n	80030d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	617b      	str	r3, [r7, #20]
      break;
 80030d6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80030d8:	4b13      	ldr	r3, [pc, #76]	; (8003128 <HAL_RCC_GetSysClockFreq+0x108>)
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	091b      	lsrs	r3, r3, #4
 80030de:	f003 0307 	and.w	r3, r3, #7
 80030e2:	3301      	adds	r3, #1
 80030e4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80030e6:	4b10      	ldr	r3, [pc, #64]	; (8003128 <HAL_RCC_GetSysClockFreq+0x108>)
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	0a1b      	lsrs	r3, r3, #8
 80030ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030f0:	697a      	ldr	r2, [r7, #20]
 80030f2:	fb03 f202 	mul.w	r2, r3, r2
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030fc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80030fe:	4b0a      	ldr	r3, [pc, #40]	; (8003128 <HAL_RCC_GetSysClockFreq+0x108>)
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	0e5b      	lsrs	r3, r3, #25
 8003104:	f003 0303 	and.w	r3, r3, #3
 8003108:	3301      	adds	r3, #1
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	fbb2 f3f3 	udiv	r3, r2, r3
 8003116:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003118:	69bb      	ldr	r3, [r7, #24]
}
 800311a:	4618      	mov	r0, r3
 800311c:	3724      	adds	r7, #36	; 0x24
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	40021000 	.word	0x40021000
 800312c:	08003bf0 	.word	0x08003bf0
 8003130:	00f42400 	.word	0x00f42400
 8003134:	007a1200 	.word	0x007a1200

08003138 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b086      	sub	sp, #24
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003140:	2300      	movs	r3, #0
 8003142:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003144:	4b2a      	ldr	r3, [pc, #168]	; (80031f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003148:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d003      	beq.n	8003158 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003150:	f7ff fa26 	bl	80025a0 <HAL_PWREx_GetVoltageRange>
 8003154:	6178      	str	r0, [r7, #20]
 8003156:	e014      	b.n	8003182 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003158:	4b25      	ldr	r3, [pc, #148]	; (80031f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800315a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800315c:	4a24      	ldr	r2, [pc, #144]	; (80031f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800315e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003162:	6593      	str	r3, [r2, #88]	; 0x58
 8003164:	4b22      	ldr	r3, [pc, #136]	; (80031f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003168:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800316c:	60fb      	str	r3, [r7, #12]
 800316e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003170:	f7ff fa16 	bl	80025a0 <HAL_PWREx_GetVoltageRange>
 8003174:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003176:	4b1e      	ldr	r3, [pc, #120]	; (80031f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800317a:	4a1d      	ldr	r2, [pc, #116]	; (80031f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800317c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003180:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003188:	d10b      	bne.n	80031a2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2b80      	cmp	r3, #128	; 0x80
 800318e:	d919      	bls.n	80031c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2ba0      	cmp	r3, #160	; 0xa0
 8003194:	d902      	bls.n	800319c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003196:	2302      	movs	r3, #2
 8003198:	613b      	str	r3, [r7, #16]
 800319a:	e013      	b.n	80031c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800319c:	2301      	movs	r3, #1
 800319e:	613b      	str	r3, [r7, #16]
 80031a0:	e010      	b.n	80031c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2b80      	cmp	r3, #128	; 0x80
 80031a6:	d902      	bls.n	80031ae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80031a8:	2303      	movs	r3, #3
 80031aa:	613b      	str	r3, [r7, #16]
 80031ac:	e00a      	b.n	80031c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2b80      	cmp	r3, #128	; 0x80
 80031b2:	d102      	bne.n	80031ba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031b4:	2302      	movs	r3, #2
 80031b6:	613b      	str	r3, [r7, #16]
 80031b8:	e004      	b.n	80031c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2b70      	cmp	r3, #112	; 0x70
 80031be:	d101      	bne.n	80031c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031c0:	2301      	movs	r3, #1
 80031c2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80031c4:	4b0b      	ldr	r3, [pc, #44]	; (80031f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f023 0207 	bic.w	r2, r3, #7
 80031cc:	4909      	ldr	r1, [pc, #36]	; (80031f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80031d4:	4b07      	ldr	r3, [pc, #28]	; (80031f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0307 	and.w	r3, r3, #7
 80031dc:	693a      	ldr	r2, [r7, #16]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d001      	beq.n	80031e6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e000      	b.n	80031e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80031e6:	2300      	movs	r3, #0
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3718      	adds	r7, #24
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	40021000 	.word	0x40021000
 80031f4:	40022000 	.word	0x40022000

080031f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b086      	sub	sp, #24
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003200:	2300      	movs	r3, #0
 8003202:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003204:	2300      	movs	r3, #0
 8003206:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003210:	2b00      	cmp	r3, #0
 8003212:	d041      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003218:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800321c:	d02a      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800321e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003222:	d824      	bhi.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003224:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003228:	d008      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800322a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800322e:	d81e      	bhi.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003230:	2b00      	cmp	r3, #0
 8003232:	d00a      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003234:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003238:	d010      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800323a:	e018      	b.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800323c:	4b86      	ldr	r3, [pc, #536]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	4a85      	ldr	r2, [pc, #532]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003242:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003246:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003248:	e015      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	3304      	adds	r3, #4
 800324e:	2100      	movs	r1, #0
 8003250:	4618      	mov	r0, r3
 8003252:	f000 fabb 	bl	80037cc <RCCEx_PLLSAI1_Config>
 8003256:	4603      	mov	r3, r0
 8003258:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800325a:	e00c      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	3320      	adds	r3, #32
 8003260:	2100      	movs	r1, #0
 8003262:	4618      	mov	r0, r3
 8003264:	f000 fba6 	bl	80039b4 <RCCEx_PLLSAI2_Config>
 8003268:	4603      	mov	r3, r0
 800326a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800326c:	e003      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	74fb      	strb	r3, [r7, #19]
      break;
 8003272:	e000      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003274:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003276:	7cfb      	ldrb	r3, [r7, #19]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d10b      	bne.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800327c:	4b76      	ldr	r3, [pc, #472]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800327e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003282:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800328a:	4973      	ldr	r1, [pc, #460]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800328c:	4313      	orrs	r3, r2
 800328e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003292:	e001      	b.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003294:	7cfb      	ldrb	r3, [r7, #19]
 8003296:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d041      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032a8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80032ac:	d02a      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80032ae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80032b2:	d824      	bhi.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x106>
 80032b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032b8:	d008      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80032ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032be:	d81e      	bhi.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x106>
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d00a      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80032c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032c8:	d010      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80032ca:	e018      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032cc:	4b62      	ldr	r3, [pc, #392]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	4a61      	ldr	r2, [pc, #388]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032d6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032d8:	e015      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	3304      	adds	r3, #4
 80032de:	2100      	movs	r1, #0
 80032e0:	4618      	mov	r0, r3
 80032e2:	f000 fa73 	bl	80037cc <RCCEx_PLLSAI1_Config>
 80032e6:	4603      	mov	r3, r0
 80032e8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032ea:	e00c      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	3320      	adds	r3, #32
 80032f0:	2100      	movs	r1, #0
 80032f2:	4618      	mov	r0, r3
 80032f4:	f000 fb5e 	bl	80039b4 <RCCEx_PLLSAI2_Config>
 80032f8:	4603      	mov	r3, r0
 80032fa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032fc:	e003      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	74fb      	strb	r3, [r7, #19]
      break;
 8003302:	e000      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003304:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003306:	7cfb      	ldrb	r3, [r7, #19]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d10b      	bne.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800330c:	4b52      	ldr	r3, [pc, #328]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800330e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003312:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800331a:	494f      	ldr	r1, [pc, #316]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800331c:	4313      	orrs	r3, r2
 800331e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003322:	e001      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003324:	7cfb      	ldrb	r3, [r7, #19]
 8003326:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003330:	2b00      	cmp	r3, #0
 8003332:	f000 80a0 	beq.w	8003476 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003336:	2300      	movs	r3, #0
 8003338:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800333a:	4b47      	ldr	r3, [pc, #284]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800333c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800333e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d101      	bne.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003346:	2301      	movs	r3, #1
 8003348:	e000      	b.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800334a:	2300      	movs	r3, #0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d00d      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003350:	4b41      	ldr	r3, [pc, #260]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003354:	4a40      	ldr	r2, [pc, #256]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003356:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800335a:	6593      	str	r3, [r2, #88]	; 0x58
 800335c:	4b3e      	ldr	r3, [pc, #248]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800335e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003360:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003364:	60bb      	str	r3, [r7, #8]
 8003366:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003368:	2301      	movs	r3, #1
 800336a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800336c:	4b3b      	ldr	r3, [pc, #236]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a3a      	ldr	r2, [pc, #232]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003372:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003376:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003378:	f7fd f9ac 	bl	80006d4 <HAL_GetTick>
 800337c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800337e:	e009      	b.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003380:	f7fd f9a8 	bl	80006d4 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b02      	cmp	r3, #2
 800338c:	d902      	bls.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	74fb      	strb	r3, [r7, #19]
        break;
 8003392:	e005      	b.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003394:	4b31      	ldr	r3, [pc, #196]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800339c:	2b00      	cmp	r3, #0
 800339e:	d0ef      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80033a0:	7cfb      	ldrb	r3, [r7, #19]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d15c      	bne.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80033a6:	4b2c      	ldr	r3, [pc, #176]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033b0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d01f      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d019      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80033c4:	4b24      	ldr	r3, [pc, #144]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033ce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033d0:	4b21      	ldr	r3, [pc, #132]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033d6:	4a20      	ldr	r2, [pc, #128]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033e0:	4b1d      	ldr	r3, [pc, #116]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033e6:	4a1c      	ldr	r2, [pc, #112]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80033f0:	4a19      	ldr	r2, [pc, #100]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d016      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003402:	f7fd f967 	bl	80006d4 <HAL_GetTick>
 8003406:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003408:	e00b      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800340a:	f7fd f963 	bl	80006d4 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	f241 3288 	movw	r2, #5000	; 0x1388
 8003418:	4293      	cmp	r3, r2
 800341a:	d902      	bls.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	74fb      	strb	r3, [r7, #19]
            break;
 8003420:	e006      	b.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003422:	4b0d      	ldr	r3, [pc, #52]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003424:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	2b00      	cmp	r3, #0
 800342e:	d0ec      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003430:	7cfb      	ldrb	r3, [r7, #19]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d10c      	bne.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003436:	4b08      	ldr	r3, [pc, #32]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800343c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003446:	4904      	ldr	r1, [pc, #16]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003448:	4313      	orrs	r3, r2
 800344a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800344e:	e009      	b.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003450:	7cfb      	ldrb	r3, [r7, #19]
 8003452:	74bb      	strb	r3, [r7, #18]
 8003454:	e006      	b.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003456:	bf00      	nop
 8003458:	40021000 	.word	0x40021000
 800345c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003460:	7cfb      	ldrb	r3, [r7, #19]
 8003462:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003464:	7c7b      	ldrb	r3, [r7, #17]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d105      	bne.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800346a:	4b9e      	ldr	r3, [pc, #632]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800346c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800346e:	4a9d      	ldr	r2, [pc, #628]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003470:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003474:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00a      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003482:	4b98      	ldr	r3, [pc, #608]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003488:	f023 0203 	bic.w	r2, r3, #3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003490:	4994      	ldr	r1, [pc, #592]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003492:	4313      	orrs	r3, r2
 8003494:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00a      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034a4:	4b8f      	ldr	r3, [pc, #572]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034aa:	f023 020c 	bic.w	r2, r3, #12
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b2:	498c      	ldr	r1, [pc, #560]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0304 	and.w	r3, r3, #4
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00a      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80034c6:	4b87      	ldr	r3, [pc, #540]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034cc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d4:	4983      	ldr	r1, [pc, #524]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0308 	and.w	r3, r3, #8
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d00a      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034e8:	4b7e      	ldr	r3, [pc, #504]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f6:	497b      	ldr	r1, [pc, #492]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0310 	and.w	r3, r3, #16
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00a      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800350a:	4b76      	ldr	r3, [pc, #472]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800350c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003510:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003518:	4972      	ldr	r1, [pc, #456]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800351a:	4313      	orrs	r3, r2
 800351c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0320 	and.w	r3, r3, #32
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00a      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800352c:	4b6d      	ldr	r3, [pc, #436]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800352e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003532:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800353a:	496a      	ldr	r1, [pc, #424]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800353c:	4313      	orrs	r3, r2
 800353e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00a      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800354e:	4b65      	ldr	r3, [pc, #404]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003554:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800355c:	4961      	ldr	r1, [pc, #388]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800355e:	4313      	orrs	r3, r2
 8003560:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00a      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003570:	4b5c      	ldr	r3, [pc, #368]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003576:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800357e:	4959      	ldr	r1, [pc, #356]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003580:	4313      	orrs	r3, r2
 8003582:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00a      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003592:	4b54      	ldr	r3, [pc, #336]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003598:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035a0:	4950      	ldr	r1, [pc, #320]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00a      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035b4:	4b4b      	ldr	r3, [pc, #300]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c2:	4948      	ldr	r1, [pc, #288]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00a      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035d6:	4b43      	ldr	r3, [pc, #268]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e4:	493f      	ldr	r1, [pc, #252]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d028      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035f8:	4b3a      	ldr	r3, [pc, #232]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003606:	4937      	ldr	r1, [pc, #220]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003608:	4313      	orrs	r3, r2
 800360a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003612:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003616:	d106      	bne.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003618:	4b32      	ldr	r3, [pc, #200]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	4a31      	ldr	r2, [pc, #196]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800361e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003622:	60d3      	str	r3, [r2, #12]
 8003624:	e011      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800362a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800362e:	d10c      	bne.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	3304      	adds	r3, #4
 8003634:	2101      	movs	r1, #1
 8003636:	4618      	mov	r0, r3
 8003638:	f000 f8c8 	bl	80037cc <RCCEx_PLLSAI1_Config>
 800363c:	4603      	mov	r3, r0
 800363e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003640:	7cfb      	ldrb	r3, [r7, #19]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d001      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003646:	7cfb      	ldrb	r3, [r7, #19]
 8003648:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d028      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003656:	4b23      	ldr	r3, [pc, #140]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003658:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800365c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003664:	491f      	ldr	r1, [pc, #124]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003666:	4313      	orrs	r3, r2
 8003668:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003670:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003674:	d106      	bne.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003676:	4b1b      	ldr	r3, [pc, #108]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	4a1a      	ldr	r2, [pc, #104]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800367c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003680:	60d3      	str	r3, [r2, #12]
 8003682:	e011      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003688:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800368c:	d10c      	bne.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	3304      	adds	r3, #4
 8003692:	2101      	movs	r1, #1
 8003694:	4618      	mov	r0, r3
 8003696:	f000 f899 	bl	80037cc <RCCEx_PLLSAI1_Config>
 800369a:	4603      	mov	r3, r0
 800369c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800369e:	7cfb      	ldrb	r3, [r7, #19]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d001      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80036a4:	7cfb      	ldrb	r3, [r7, #19]
 80036a6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d02b      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036b4:	4b0b      	ldr	r3, [pc, #44]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036c2:	4908      	ldr	r1, [pc, #32]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036d2:	d109      	bne.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036d4:	4b03      	ldr	r3, [pc, #12]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	4a02      	ldr	r2, [pc, #8]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036de:	60d3      	str	r3, [r2, #12]
 80036e0:	e014      	b.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x514>
 80036e2:	bf00      	nop
 80036e4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036f0:	d10c      	bne.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	3304      	adds	r3, #4
 80036f6:	2101      	movs	r1, #1
 80036f8:	4618      	mov	r0, r3
 80036fa:	f000 f867 	bl	80037cc <RCCEx_PLLSAI1_Config>
 80036fe:	4603      	mov	r3, r0
 8003700:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003702:	7cfb      	ldrb	r3, [r7, #19]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d001      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003708:	7cfb      	ldrb	r3, [r7, #19]
 800370a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d02f      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003718:	4b2b      	ldr	r3, [pc, #172]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800371a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800371e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003726:	4928      	ldr	r1, [pc, #160]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003728:	4313      	orrs	r3, r2
 800372a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003732:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003736:	d10d      	bne.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	3304      	adds	r3, #4
 800373c:	2102      	movs	r1, #2
 800373e:	4618      	mov	r0, r3
 8003740:	f000 f844 	bl	80037cc <RCCEx_PLLSAI1_Config>
 8003744:	4603      	mov	r3, r0
 8003746:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003748:	7cfb      	ldrb	r3, [r7, #19]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d014      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800374e:	7cfb      	ldrb	r3, [r7, #19]
 8003750:	74bb      	strb	r3, [r7, #18]
 8003752:	e011      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003758:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800375c:	d10c      	bne.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	3320      	adds	r3, #32
 8003762:	2102      	movs	r1, #2
 8003764:	4618      	mov	r0, r3
 8003766:	f000 f925 	bl	80039b4 <RCCEx_PLLSAI2_Config>
 800376a:	4603      	mov	r3, r0
 800376c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800376e:	7cfb      	ldrb	r3, [r7, #19]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d001      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003774:	7cfb      	ldrb	r3, [r7, #19]
 8003776:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d00a      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003784:	4b10      	ldr	r3, [pc, #64]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800378a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003792:	490d      	ldr	r1, [pc, #52]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003794:	4313      	orrs	r3, r2
 8003796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00b      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80037a6:	4b08      	ldr	r3, [pc, #32]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037b6:	4904      	ldr	r1, [pc, #16]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80037be:	7cbb      	ldrb	r3, [r7, #18]
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3718      	adds	r7, #24
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	40021000 	.word	0x40021000

080037cc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037d6:	2300      	movs	r3, #0
 80037d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037da:	4b75      	ldr	r3, [pc, #468]	; (80039b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	f003 0303 	and.w	r3, r3, #3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d018      	beq.n	8003818 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80037e6:	4b72      	ldr	r3, [pc, #456]	; (80039b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	f003 0203 	and.w	r2, r3, #3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d10d      	bne.n	8003812 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
       ||
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d009      	beq.n	8003812 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80037fe:	4b6c      	ldr	r3, [pc, #432]	; (80039b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	091b      	lsrs	r3, r3, #4
 8003804:	f003 0307 	and.w	r3, r3, #7
 8003808:	1c5a      	adds	r2, r3, #1
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
       ||
 800380e:	429a      	cmp	r2, r3
 8003810:	d047      	beq.n	80038a2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	73fb      	strb	r3, [r7, #15]
 8003816:	e044      	b.n	80038a2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2b03      	cmp	r3, #3
 800381e:	d018      	beq.n	8003852 <RCCEx_PLLSAI1_Config+0x86>
 8003820:	2b03      	cmp	r3, #3
 8003822:	d825      	bhi.n	8003870 <RCCEx_PLLSAI1_Config+0xa4>
 8003824:	2b01      	cmp	r3, #1
 8003826:	d002      	beq.n	800382e <RCCEx_PLLSAI1_Config+0x62>
 8003828:	2b02      	cmp	r3, #2
 800382a:	d009      	beq.n	8003840 <RCCEx_PLLSAI1_Config+0x74>
 800382c:	e020      	b.n	8003870 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800382e:	4b60      	ldr	r3, [pc, #384]	; (80039b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b00      	cmp	r3, #0
 8003838:	d11d      	bne.n	8003876 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800383e:	e01a      	b.n	8003876 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003840:	4b5b      	ldr	r3, [pc, #364]	; (80039b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003848:	2b00      	cmp	r3, #0
 800384a:	d116      	bne.n	800387a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003850:	e013      	b.n	800387a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003852:	4b57      	ldr	r3, [pc, #348]	; (80039b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d10f      	bne.n	800387e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800385e:	4b54      	ldr	r3, [pc, #336]	; (80039b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d109      	bne.n	800387e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800386e:	e006      	b.n	800387e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	73fb      	strb	r3, [r7, #15]
      break;
 8003874:	e004      	b.n	8003880 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003876:	bf00      	nop
 8003878:	e002      	b.n	8003880 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800387a:	bf00      	nop
 800387c:	e000      	b.n	8003880 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800387e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003880:	7bfb      	ldrb	r3, [r7, #15]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d10d      	bne.n	80038a2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003886:	4b4a      	ldr	r3, [pc, #296]	; (80039b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6819      	ldr	r1, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	3b01      	subs	r3, #1
 8003898:	011b      	lsls	r3, r3, #4
 800389a:	430b      	orrs	r3, r1
 800389c:	4944      	ldr	r1, [pc, #272]	; (80039b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80038a2:	7bfb      	ldrb	r3, [r7, #15]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d17d      	bne.n	80039a4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80038a8:	4b41      	ldr	r3, [pc, #260]	; (80039b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a40      	ldr	r2, [pc, #256]	; (80039b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80038b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038b4:	f7fc ff0e 	bl	80006d4 <HAL_GetTick>
 80038b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038ba:	e009      	b.n	80038d0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038bc:	f7fc ff0a 	bl	80006d4 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d902      	bls.n	80038d0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	73fb      	strb	r3, [r7, #15]
        break;
 80038ce:	e005      	b.n	80038dc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038d0:	4b37      	ldr	r3, [pc, #220]	; (80039b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d1ef      	bne.n	80038bc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80038dc:	7bfb      	ldrb	r3, [r7, #15]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d160      	bne.n	80039a4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d111      	bne.n	800390c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038e8:	4b31      	ldr	r3, [pc, #196]	; (80039b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80038f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	6892      	ldr	r2, [r2, #8]
 80038f8:	0211      	lsls	r1, r2, #8
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	68d2      	ldr	r2, [r2, #12]
 80038fe:	0912      	lsrs	r2, r2, #4
 8003900:	0452      	lsls	r2, r2, #17
 8003902:	430a      	orrs	r2, r1
 8003904:	492a      	ldr	r1, [pc, #168]	; (80039b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003906:	4313      	orrs	r3, r2
 8003908:	610b      	str	r3, [r1, #16]
 800390a:	e027      	b.n	800395c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d112      	bne.n	8003938 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003912:	4b27      	ldr	r3, [pc, #156]	; (80039b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800391a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	6892      	ldr	r2, [r2, #8]
 8003922:	0211      	lsls	r1, r2, #8
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	6912      	ldr	r2, [r2, #16]
 8003928:	0852      	lsrs	r2, r2, #1
 800392a:	3a01      	subs	r2, #1
 800392c:	0552      	lsls	r2, r2, #21
 800392e:	430a      	orrs	r2, r1
 8003930:	491f      	ldr	r1, [pc, #124]	; (80039b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003932:	4313      	orrs	r3, r2
 8003934:	610b      	str	r3, [r1, #16]
 8003936:	e011      	b.n	800395c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003938:	4b1d      	ldr	r3, [pc, #116]	; (80039b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003940:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	6892      	ldr	r2, [r2, #8]
 8003948:	0211      	lsls	r1, r2, #8
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	6952      	ldr	r2, [r2, #20]
 800394e:	0852      	lsrs	r2, r2, #1
 8003950:	3a01      	subs	r2, #1
 8003952:	0652      	lsls	r2, r2, #25
 8003954:	430a      	orrs	r2, r1
 8003956:	4916      	ldr	r1, [pc, #88]	; (80039b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003958:	4313      	orrs	r3, r2
 800395a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800395c:	4b14      	ldr	r3, [pc, #80]	; (80039b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a13      	ldr	r2, [pc, #76]	; (80039b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003962:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003966:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003968:	f7fc feb4 	bl	80006d4 <HAL_GetTick>
 800396c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800396e:	e009      	b.n	8003984 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003970:	f7fc feb0 	bl	80006d4 <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2b02      	cmp	r3, #2
 800397c:	d902      	bls.n	8003984 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	73fb      	strb	r3, [r7, #15]
          break;
 8003982:	e005      	b.n	8003990 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003984:	4b0a      	ldr	r3, [pc, #40]	; (80039b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d0ef      	beq.n	8003970 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003990:	7bfb      	ldrb	r3, [r7, #15]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d106      	bne.n	80039a4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003996:	4b06      	ldr	r3, [pc, #24]	; (80039b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003998:	691a      	ldr	r2, [r3, #16]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	4904      	ldr	r1, [pc, #16]	; (80039b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80039a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	40021000 	.word	0x40021000

080039b4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039be:	2300      	movs	r3, #0
 80039c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80039c2:	4b6a      	ldr	r3, [pc, #424]	; (8003b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	f003 0303 	and.w	r3, r3, #3
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d018      	beq.n	8003a00 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80039ce:	4b67      	ldr	r3, [pc, #412]	; (8003b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	f003 0203 	and.w	r2, r3, #3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	429a      	cmp	r2, r3
 80039dc:	d10d      	bne.n	80039fa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
       ||
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d009      	beq.n	80039fa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80039e6:	4b61      	ldr	r3, [pc, #388]	; (8003b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	091b      	lsrs	r3, r3, #4
 80039ec:	f003 0307 	and.w	r3, r3, #7
 80039f0:	1c5a      	adds	r2, r3, #1
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
       ||
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d047      	beq.n	8003a8a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	73fb      	strb	r3, [r7, #15]
 80039fe:	e044      	b.n	8003a8a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2b03      	cmp	r3, #3
 8003a06:	d018      	beq.n	8003a3a <RCCEx_PLLSAI2_Config+0x86>
 8003a08:	2b03      	cmp	r3, #3
 8003a0a:	d825      	bhi.n	8003a58 <RCCEx_PLLSAI2_Config+0xa4>
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d002      	beq.n	8003a16 <RCCEx_PLLSAI2_Config+0x62>
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d009      	beq.n	8003a28 <RCCEx_PLLSAI2_Config+0x74>
 8003a14:	e020      	b.n	8003a58 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a16:	4b55      	ldr	r3, [pc, #340]	; (8003b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d11d      	bne.n	8003a5e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a26:	e01a      	b.n	8003a5e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a28:	4b50      	ldr	r3, [pc, #320]	; (8003b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d116      	bne.n	8003a62 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a38:	e013      	b.n	8003a62 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a3a:	4b4c      	ldr	r3, [pc, #304]	; (8003b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d10f      	bne.n	8003a66 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a46:	4b49      	ldr	r3, [pc, #292]	; (8003b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d109      	bne.n	8003a66 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a56:	e006      	b.n	8003a66 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a5c:	e004      	b.n	8003a68 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a5e:	bf00      	nop
 8003a60:	e002      	b.n	8003a68 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a62:	bf00      	nop
 8003a64:	e000      	b.n	8003a68 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a66:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a68:	7bfb      	ldrb	r3, [r7, #15]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d10d      	bne.n	8003a8a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a6e:	4b3f      	ldr	r3, [pc, #252]	; (8003b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6819      	ldr	r1, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	011b      	lsls	r3, r3, #4
 8003a82:	430b      	orrs	r3, r1
 8003a84:	4939      	ldr	r1, [pc, #228]	; (8003b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a8a:	7bfb      	ldrb	r3, [r7, #15]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d167      	bne.n	8003b60 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003a90:	4b36      	ldr	r3, [pc, #216]	; (8003b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a35      	ldr	r2, [pc, #212]	; (8003b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a9c:	f7fc fe1a 	bl	80006d4 <HAL_GetTick>
 8003aa0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003aa2:	e009      	b.n	8003ab8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003aa4:	f7fc fe16 	bl	80006d4 <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d902      	bls.n	8003ab8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	73fb      	strb	r3, [r7, #15]
        break;
 8003ab6:	e005      	b.n	8003ac4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003ab8:	4b2c      	ldr	r3, [pc, #176]	; (8003b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d1ef      	bne.n	8003aa4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003ac4:	7bfb      	ldrb	r3, [r7, #15]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d14a      	bne.n	8003b60 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d111      	bne.n	8003af4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ad0:	4b26      	ldr	r3, [pc, #152]	; (8003b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ad2:	695b      	ldr	r3, [r3, #20]
 8003ad4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003ad8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	6892      	ldr	r2, [r2, #8]
 8003ae0:	0211      	lsls	r1, r2, #8
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	68d2      	ldr	r2, [r2, #12]
 8003ae6:	0912      	lsrs	r2, r2, #4
 8003ae8:	0452      	lsls	r2, r2, #17
 8003aea:	430a      	orrs	r2, r1
 8003aec:	491f      	ldr	r1, [pc, #124]	; (8003b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	614b      	str	r3, [r1, #20]
 8003af2:	e011      	b.n	8003b18 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003af4:	4b1d      	ldr	r3, [pc, #116]	; (8003b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003af6:	695b      	ldr	r3, [r3, #20]
 8003af8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003afc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	6892      	ldr	r2, [r2, #8]
 8003b04:	0211      	lsls	r1, r2, #8
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	6912      	ldr	r2, [r2, #16]
 8003b0a:	0852      	lsrs	r2, r2, #1
 8003b0c:	3a01      	subs	r2, #1
 8003b0e:	0652      	lsls	r2, r2, #25
 8003b10:	430a      	orrs	r2, r1
 8003b12:	4916      	ldr	r1, [pc, #88]	; (8003b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003b18:	4b14      	ldr	r3, [pc, #80]	; (8003b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a13      	ldr	r2, [pc, #76]	; (8003b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b22:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b24:	f7fc fdd6 	bl	80006d4 <HAL_GetTick>
 8003b28:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b2a:	e009      	b.n	8003b40 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b2c:	f7fc fdd2 	bl	80006d4 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d902      	bls.n	8003b40 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	73fb      	strb	r3, [r7, #15]
          break;
 8003b3e:	e005      	b.n	8003b4c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b40:	4b0a      	ldr	r3, [pc, #40]	; (8003b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d0ef      	beq.n	8003b2c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003b4c:	7bfb      	ldrb	r3, [r7, #15]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d106      	bne.n	8003b60 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003b52:	4b06      	ldr	r3, [pc, #24]	; (8003b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b54:	695a      	ldr	r2, [r3, #20]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	4904      	ldr	r1, [pc, #16]	; (8003b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3710      	adds	r7, #16
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	40021000 	.word	0x40021000

08003b70 <memset>:
 8003b70:	4402      	add	r2, r0
 8003b72:	4603      	mov	r3, r0
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d100      	bne.n	8003b7a <memset+0xa>
 8003b78:	4770      	bx	lr
 8003b7a:	f803 1b01 	strb.w	r1, [r3], #1
 8003b7e:	e7f9      	b.n	8003b74 <memset+0x4>

08003b80 <__libc_init_array>:
 8003b80:	b570      	push	{r4, r5, r6, lr}
 8003b82:	4d0d      	ldr	r5, [pc, #52]	; (8003bb8 <__libc_init_array+0x38>)
 8003b84:	4c0d      	ldr	r4, [pc, #52]	; (8003bbc <__libc_init_array+0x3c>)
 8003b86:	1b64      	subs	r4, r4, r5
 8003b88:	10a4      	asrs	r4, r4, #2
 8003b8a:	2600      	movs	r6, #0
 8003b8c:	42a6      	cmp	r6, r4
 8003b8e:	d109      	bne.n	8003ba4 <__libc_init_array+0x24>
 8003b90:	4d0b      	ldr	r5, [pc, #44]	; (8003bc0 <__libc_init_array+0x40>)
 8003b92:	4c0c      	ldr	r4, [pc, #48]	; (8003bc4 <__libc_init_array+0x44>)
 8003b94:	f000 f818 	bl	8003bc8 <_init>
 8003b98:	1b64      	subs	r4, r4, r5
 8003b9a:	10a4      	asrs	r4, r4, #2
 8003b9c:	2600      	movs	r6, #0
 8003b9e:	42a6      	cmp	r6, r4
 8003ba0:	d105      	bne.n	8003bae <__libc_init_array+0x2e>
 8003ba2:	bd70      	pop	{r4, r5, r6, pc}
 8003ba4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ba8:	4798      	blx	r3
 8003baa:	3601      	adds	r6, #1
 8003bac:	e7ee      	b.n	8003b8c <__libc_init_array+0xc>
 8003bae:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bb2:	4798      	blx	r3
 8003bb4:	3601      	adds	r6, #1
 8003bb6:	e7f2      	b.n	8003b9e <__libc_init_array+0x1e>
 8003bb8:	08003c20 	.word	0x08003c20
 8003bbc:	08003c20 	.word	0x08003c20
 8003bc0:	08003c20 	.word	0x08003c20
 8003bc4:	08003c24 	.word	0x08003c24

08003bc8 <_init>:
 8003bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bca:	bf00      	nop
 8003bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bce:	bc08      	pop	{r3}
 8003bd0:	469e      	mov	lr, r3
 8003bd2:	4770      	bx	lr

08003bd4 <_fini>:
 8003bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bd6:	bf00      	nop
 8003bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bda:	bc08      	pop	{r3}
 8003bdc:	469e      	mov	lr, r3
 8003bde:	4770      	bx	lr
