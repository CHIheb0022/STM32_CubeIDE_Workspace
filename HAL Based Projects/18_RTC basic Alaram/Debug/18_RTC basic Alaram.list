
18_RTC basic Alaram.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ae4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002c6c  08002c6c  00012c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cac  08002cac  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002cac  08002cac  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002cac  08002cac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cac  08002cac  00012cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002cb0  08002cb0  00012cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002cb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000044  2000000c  08002cc0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000050  08002cc0  00020050  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008478  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018ef  00000000  00000000  000284f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008a8  00000000  00000000  00029de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000675  00000000  00000000  0002a690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025054  00000000  00000000  0002ad05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009a0d  00000000  00000000  0004fd59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4d46  00000000  00000000  00059766  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000021bc  00000000  00000000  0013e4ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000088  00000000  00000000  00140668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002c54 	.word	0x08002c54

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002c54 	.word	0x08002c54

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fa0d 	bl	80005ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f805 	bl	80001de <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f8dc 	bl	8000390 <MX_GPIO_Init>
  MX_RTC_Init();
 80001d8:	f000 f84a 	bl	8000270 <MX_RTC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001dc:	e7fe      	b.n	80001dc <main+0x14>

080001de <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001de:	b580      	push	{r7, lr}
 80001e0:	b096      	sub	sp, #88	; 0x58
 80001e2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001e4:	f107 0314 	add.w	r3, r7, #20
 80001e8:	2244      	movs	r2, #68	; 0x44
 80001ea:	2100      	movs	r1, #0
 80001ec:	4618      	mov	r0, r3
 80001ee:	f002 fd05 	bl	8002bfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001f2:	463b      	mov	r3, r7
 80001f4:	2200      	movs	r2, #0
 80001f6:	601a      	str	r2, [r3, #0]
 80001f8:	605a      	str	r2, [r3, #4]
 80001fa:	609a      	str	r2, [r3, #8]
 80001fc:	60da      	str	r2, [r3, #12]
 80001fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000200:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000204:	f000 fd62 	bl	8000ccc <HAL_PWREx_ControlVoltageScaling>
 8000208:	4603      	mov	r3, r0
 800020a:	2b00      	cmp	r3, #0
 800020c:	d001      	beq.n	8000212 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800020e:	f000 f919 	bl	8000444 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8000212:	2318      	movs	r3, #24
 8000214:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000216:	2301      	movs	r3, #1
 8000218:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800021a:	2301      	movs	r3, #1
 800021c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800021e:	2300      	movs	r3, #0
 8000220:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_8;
 8000222:	2380      	movs	r3, #128	; 0x80
 8000224:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000226:	2300      	movs	r3, #0
 8000228:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800022a:	f107 0314 	add.w	r3, r7, #20
 800022e:	4618      	mov	r0, r3
 8000230:	f000 fda2 	bl	8000d78 <HAL_RCC_OscConfig>
 8000234:	4603      	mov	r3, r0
 8000236:	2b00      	cmp	r3, #0
 8000238:	d001      	beq.n	800023e <SystemClock_Config+0x60>
  {
    Error_Handler();
 800023a:	f000 f903 	bl	8000444 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800023e:	230f      	movs	r3, #15
 8000240:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000242:	2300      	movs	r3, #0
 8000244:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000246:	2300      	movs	r3, #0
 8000248:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800024a:	2300      	movs	r3, #0
 800024c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800024e:	2300      	movs	r3, #0
 8000250:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000252:	463b      	mov	r3, r7
 8000254:	2100      	movs	r1, #0
 8000256:	4618      	mov	r0, r3
 8000258:	f001 f96a 	bl	8001530 <HAL_RCC_ClockConfig>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d001      	beq.n	8000266 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000262:	f000 f8ef 	bl	8000444 <Error_Handler>
  }
}
 8000266:	bf00      	nop
 8000268:	3758      	adds	r7, #88	; 0x58
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
	...

08000270 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b092      	sub	sp, #72	; 0x48
 8000274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000276:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800027a:	2200      	movs	r2, #0
 800027c:	601a      	str	r2, [r3, #0]
 800027e:	605a      	str	r2, [r3, #4]
 8000280:	609a      	str	r2, [r3, #8]
 8000282:	60da      	str	r2, [r3, #12]
 8000284:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000286:	2300      	movs	r3, #0
 8000288:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 800028a:	1d3b      	adds	r3, r7, #4
 800028c:	222c      	movs	r2, #44	; 0x2c
 800028e:	2100      	movs	r1, #0
 8000290:	4618      	mov	r0, r3
 8000292:	f002 fcb3 	bl	8002bfc <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000296:	4b3c      	ldr	r3, [pc, #240]	; (8000388 <MX_RTC_Init+0x118>)
 8000298:	4a3c      	ldr	r2, [pc, #240]	; (800038c <MX_RTC_Init+0x11c>)
 800029a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800029c:	4b3a      	ldr	r3, [pc, #232]	; (8000388 <MX_RTC_Init+0x118>)
 800029e:	2200      	movs	r2, #0
 80002a0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80002a2:	4b39      	ldr	r3, [pc, #228]	; (8000388 <MX_RTC_Init+0x118>)
 80002a4:	227f      	movs	r2, #127	; 0x7f
 80002a6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80002a8:	4b37      	ldr	r3, [pc, #220]	; (8000388 <MX_RTC_Init+0x118>)
 80002aa:	22ff      	movs	r2, #255	; 0xff
 80002ac:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80002ae:	4b36      	ldr	r3, [pc, #216]	; (8000388 <MX_RTC_Init+0x118>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80002b4:	4b34      	ldr	r3, [pc, #208]	; (8000388 <MX_RTC_Init+0x118>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80002ba:	4b33      	ldr	r3, [pc, #204]	; (8000388 <MX_RTC_Init+0x118>)
 80002bc:	2200      	movs	r2, #0
 80002be:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80002c0:	4b31      	ldr	r3, [pc, #196]	; (8000388 <MX_RTC_Init+0x118>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80002c6:	4830      	ldr	r0, [pc, #192]	; (8000388 <MX_RTC_Init+0x118>)
 80002c8:	f001 ffda 	bl	8002280 <HAL_RTC_Init>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 80002d2:	f000 f8b7 	bl	8000444 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80002d6:	2300      	movs	r3, #0
 80002d8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0x0;
 80002dc:	2300      	movs	r3, #0
 80002de:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0x1;
 80002e2:	2301      	movs	r3, #1
 80002e4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80002e8:	2300      	movs	r3, #0
 80002ea:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80002ec:	2300      	movs	r3, #0
 80002ee:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80002f0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80002f4:	2201      	movs	r2, #1
 80002f6:	4619      	mov	r1, r3
 80002f8:	4823      	ldr	r0, [pc, #140]	; (8000388 <MX_RTC_Init+0x118>)
 80002fa:	f002 f83c 	bl	8002376 <HAL_RTC_SetTime>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b00      	cmp	r3, #0
 8000302:	d001      	beq.n	8000308 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8000304:	f000 f89e 	bl	8000444 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000308:	2301      	movs	r3, #1
 800030a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 800030e:	2301      	movs	r3, #1
 8000310:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 0x1;
 8000314:	2301      	movs	r3, #1
 8000316:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0x0;
 800031a:	2300      	movs	r3, #0
 800031c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000320:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000324:	2201      	movs	r2, #1
 8000326:	4619      	mov	r1, r3
 8000328:	4817      	ldr	r0, [pc, #92]	; (8000388 <MX_RTC_Init+0x118>)
 800032a:	f002 f8c1 	bl	80024b0 <HAL_RTC_SetDate>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8000334:	f000 f886 	bl	8000444 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000338:	2300      	movs	r3, #0
 800033a:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 800033c:	2300      	movs	r3, #0
 800033e:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000340:	2300      	movs	r3, #0
 8000342:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000344:	2300      	movs	r3, #0
 8000346:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000348:	2300      	movs	r3, #0
 800034a:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800034c:	2300      	movs	r3, #0
 800034e:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_ALL;
 8000350:	f04f 3380 	mov.w	r3, #2155905152	; 0x80808080
 8000354:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000356:	2300      	movs	r3, #0
 8000358:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800035a:	2300      	movs	r3, #0
 800035c:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 800035e:	2301      	movs	r3, #1
 8000360:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8000364:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000368:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800036a:	1d3b      	adds	r3, r7, #4
 800036c:	2201      	movs	r2, #1
 800036e:	4619      	mov	r1, r3
 8000370:	4805      	ldr	r0, [pc, #20]	; (8000388 <MX_RTC_Init+0x118>)
 8000372:	f002 f925 	bl	80025c0 <HAL_RTC_SetAlarm_IT>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <MX_RTC_Init+0x110>
  {
    Error_Handler();
 800037c:	f000 f862 	bl	8000444 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000380:	bf00      	nop
 8000382:	3748      	adds	r7, #72	; 0x48
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}
 8000388:	20000028 	.word	0x20000028
 800038c:	40002800 	.word	0x40002800

08000390 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b086      	sub	sp, #24
 8000394:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000396:	1d3b      	adds	r3, r7, #4
 8000398:	2200      	movs	r2, #0
 800039a:	601a      	str	r2, [r3, #0]
 800039c:	605a      	str	r2, [r3, #4]
 800039e:	609a      	str	r2, [r3, #8]
 80003a0:	60da      	str	r2, [r3, #12]
 80003a2:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a4:	4b11      	ldr	r3, [pc, #68]	; (80003ec <MX_GPIO_Init+0x5c>)
 80003a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003a8:	4a10      	ldr	r2, [pc, #64]	; (80003ec <MX_GPIO_Init+0x5c>)
 80003aa:	f043 0301 	orr.w	r3, r3, #1
 80003ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003b0:	4b0e      	ldr	r3, [pc, #56]	; (80003ec <MX_GPIO_Init+0x5c>)
 80003b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003b4:	f003 0301 	and.w	r3, r3, #1
 80003b8:	603b      	str	r3, [r7, #0]
 80003ba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80003bc:	2200      	movs	r2, #0
 80003be:	2120      	movs	r1, #32
 80003c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003c4:	f000 fc42 	bl	8000c4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80003c8:	2320      	movs	r3, #32
 80003ca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003cc:	2301      	movs	r3, #1
 80003ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d0:	2300      	movs	r3, #0
 80003d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003d4:	2300      	movs	r3, #0
 80003d6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003d8:	1d3b      	adds	r3, r7, #4
 80003da:	4619      	mov	r1, r3
 80003dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003e0:	f000 fa8a 	bl	80008f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003e4:	bf00      	nop
 80003e6:	3718      	adds	r7, #24
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	40021000 	.word	0x40021000

080003f0 <HAL_RTC_AlarmAEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b08e      	sub	sp, #56	; 0x38
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
  RTC_AlarmTypeDef sAlarm;
  HAL_RTC_GetAlarm(hrtc,&sAlarm,RTC_ALARM_A,FORMAT_BIN);
 80003f8:	f107 010c 	add.w	r1, r7, #12
 80003fc:	2300      	movs	r3, #0
 80003fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000402:	6878      	ldr	r0, [r7, #4]
 8000404:	f002 fa18 	bl	8002838 <HAL_RTC_GetAlarm>
  if(sAlarm.AlarmTime.Seconds>58) {
 8000408:	7bbb      	ldrb	r3, [r7, #14]
 800040a:	2b3a      	cmp	r3, #58	; 0x3a
 800040c:	d902      	bls.n	8000414 <HAL_RTC_AlarmAEventCallback+0x24>
    sAlarm.AlarmTime.Seconds=0;
 800040e:	2300      	movs	r3, #0
 8000410:	73bb      	strb	r3, [r7, #14]
 8000412:	e003      	b.n	800041c <HAL_RTC_AlarmAEventCallback+0x2c>
  }else{
    sAlarm.AlarmTime.Seconds=sAlarm.AlarmTime.Seconds+1;
 8000414:	7bbb      	ldrb	r3, [r7, #14]
 8000416:	3301      	adds	r3, #1
 8000418:	b2db      	uxtb	r3, r3
 800041a:	73bb      	strb	r3, [r7, #14]
  }
    while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 800041c:	bf00      	nop
 800041e:	f107 030c 	add.w	r3, r7, #12
 8000422:	2200      	movs	r2, #0
 8000424:	4619      	mov	r1, r3
 8000426:	6878      	ldr	r0, [r7, #4]
 8000428:	f002 f8ca 	bl	80025c0 <HAL_RTC_SetAlarm_IT>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d1f5      	bne.n	800041e <HAL_RTC_AlarmAEventCallback+0x2e>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000432:	2120      	movs	r1, #32
 8000434:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000438:	f000 fc20 	bl	8000c7c <HAL_GPIO_TogglePin>
}
 800043c:	bf00      	nop
 800043e:	3738      	adds	r7, #56	; 0x38
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}

08000444 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000444:	b480      	push	{r7}
 8000446:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000448:	b672      	cpsid	i
}
 800044a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800044c:	e7fe      	b.n	800044c <Error_Handler+0x8>
	...

08000450 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000450:	b480      	push	{r7}
 8000452:	b083      	sub	sp, #12
 8000454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000456:	4b0f      	ldr	r3, [pc, #60]	; (8000494 <HAL_MspInit+0x44>)
 8000458:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800045a:	4a0e      	ldr	r2, [pc, #56]	; (8000494 <HAL_MspInit+0x44>)
 800045c:	f043 0301 	orr.w	r3, r3, #1
 8000460:	6613      	str	r3, [r2, #96]	; 0x60
 8000462:	4b0c      	ldr	r3, [pc, #48]	; (8000494 <HAL_MspInit+0x44>)
 8000464:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000466:	f003 0301 	and.w	r3, r3, #1
 800046a:	607b      	str	r3, [r7, #4]
 800046c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800046e:	4b09      	ldr	r3, [pc, #36]	; (8000494 <HAL_MspInit+0x44>)
 8000470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000472:	4a08      	ldr	r2, [pc, #32]	; (8000494 <HAL_MspInit+0x44>)
 8000474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000478:	6593      	str	r3, [r2, #88]	; 0x58
 800047a:	4b06      	ldr	r3, [pc, #24]	; (8000494 <HAL_MspInit+0x44>)
 800047c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800047e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000482:	603b      	str	r3, [r7, #0]
 8000484:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000486:	bf00      	nop
 8000488:	370c      	adds	r7, #12
 800048a:	46bd      	mov	sp, r7
 800048c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop
 8000494:	40021000 	.word	0x40021000

08000498 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b0a4      	sub	sp, #144	; 0x90
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004a0:	f107 0308 	add.w	r3, r7, #8
 80004a4:	2288      	movs	r2, #136	; 0x88
 80004a6:	2100      	movs	r1, #0
 80004a8:	4618      	mov	r0, r3
 80004aa:	f002 fba7 	bl	8002bfc <memset>
  if(hrtc->Instance==RTC)
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	4a14      	ldr	r2, [pc, #80]	; (8000504 <HAL_RTC_MspInit+0x6c>)
 80004b4:	4293      	cmp	r3, r2
 80004b6:	d120      	bne.n	80004fa <HAL_RTC_MspInit+0x62>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80004b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80004bc:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80004be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004c6:	f107 0308 	add.w	r3, r7, #8
 80004ca:	4618      	mov	r0, r3
 80004cc:	f001 fa1c 	bl	8001908 <HAL_RCCEx_PeriphCLKConfig>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d001      	beq.n	80004da <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80004d6:	f7ff ffb5 	bl	8000444 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80004da:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <HAL_RTC_MspInit+0x70>)
 80004dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80004e0:	4a09      	ldr	r2, [pc, #36]	; (8000508 <HAL_RTC_MspInit+0x70>)
 80004e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80004e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80004ea:	2200      	movs	r2, #0
 80004ec:	2100      	movs	r1, #0
 80004ee:	2029      	movs	r0, #41	; 0x29
 80004f0:	f000 f9cb 	bl	800088a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80004f4:	2029      	movs	r0, #41	; 0x29
 80004f6:	f000 f9e4 	bl	80008c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80004fa:	bf00      	nop
 80004fc:	3790      	adds	r7, #144	; 0x90
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	40002800 	.word	0x40002800
 8000508:	40021000 	.word	0x40021000

0800050c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000510:	e7fe      	b.n	8000510 <NMI_Handler+0x4>

08000512 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000512:	b480      	push	{r7}
 8000514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000516:	e7fe      	b.n	8000516 <HardFault_Handler+0x4>

08000518 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800051c:	e7fe      	b.n	800051c <MemManage_Handler+0x4>

0800051e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800051e:	b480      	push	{r7}
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000522:	e7fe      	b.n	8000522 <BusFault_Handler+0x4>

08000524 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000528:	e7fe      	b.n	8000528 <UsageFault_Handler+0x4>

0800052a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800052a:	b480      	push	{r7}
 800052c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800052e:	bf00      	nop
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr

08000538 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800053c:	bf00      	nop
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr

08000546 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000546:	b480      	push	{r7}
 8000548:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800054a:	bf00      	nop
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr

08000554 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000558:	f000 f89c 	bl	8000694 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800055c:	bf00      	nop
 800055e:	bd80      	pop	{r7, pc}

08000560 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000564:	4802      	ldr	r0, [pc, #8]	; (8000570 <RTC_Alarm_IRQHandler+0x10>)
 8000566:	f002 fa27 	bl	80029b8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800056a:	bf00      	nop
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	20000028 	.word	0x20000028

08000574 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000578:	4b06      	ldr	r3, [pc, #24]	; (8000594 <SystemInit+0x20>)
 800057a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800057e:	4a05      	ldr	r2, [pc, #20]	; (8000594 <SystemInit+0x20>)
 8000580:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000584:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000588:	bf00      	nop
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	e000ed00 	.word	0xe000ed00

08000598 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000598:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005d0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800059c:	f7ff ffea 	bl	8000574 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005a0:	480c      	ldr	r0, [pc, #48]	; (80005d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80005a2:	490d      	ldr	r1, [pc, #52]	; (80005d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005a4:	4a0d      	ldr	r2, [pc, #52]	; (80005dc <LoopForever+0xe>)
  movs r3, #0
 80005a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005a8:	e002      	b.n	80005b0 <LoopCopyDataInit>

080005aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005ae:	3304      	adds	r3, #4

080005b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005b4:	d3f9      	bcc.n	80005aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005b6:	4a0a      	ldr	r2, [pc, #40]	; (80005e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005b8:	4c0a      	ldr	r4, [pc, #40]	; (80005e4 <LoopForever+0x16>)
  movs r3, #0
 80005ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005bc:	e001      	b.n	80005c2 <LoopFillZerobss>

080005be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005c0:	3204      	adds	r2, #4

080005c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005c4:	d3fb      	bcc.n	80005be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005c6:	f002 fb21 	bl	8002c0c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005ca:	f7ff fdfd 	bl	80001c8 <main>

080005ce <LoopForever>:

LoopForever:
    b LoopForever
 80005ce:	e7fe      	b.n	80005ce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80005d0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80005d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005d8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005dc:	08002cb4 	.word	0x08002cb4
  ldr r2, =_sbss
 80005e0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005e4:	20000050 	.word	0x20000050

080005e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005e8:	e7fe      	b.n	80005e8 <ADC1_2_IRQHandler>

080005ea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005ea:	b580      	push	{r7, lr}
 80005ec:	b082      	sub	sp, #8
 80005ee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80005f0:	2300      	movs	r3, #0
 80005f2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005f4:	2003      	movs	r0, #3
 80005f6:	f000 f93d 	bl	8000874 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005fa:	200f      	movs	r0, #15
 80005fc:	f000 f80e 	bl	800061c <HAL_InitTick>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d002      	beq.n	800060c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000606:	2301      	movs	r3, #1
 8000608:	71fb      	strb	r3, [r7, #7]
 800060a:	e001      	b.n	8000610 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800060c:	f7ff ff20 	bl	8000450 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000610:	79fb      	ldrb	r3, [r7, #7]
}
 8000612:	4618      	mov	r0, r3
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
	...

0800061c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000624:	2300      	movs	r3, #0
 8000626:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000628:	4b17      	ldr	r3, [pc, #92]	; (8000688 <HAL_InitTick+0x6c>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d023      	beq.n	8000678 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000630:	4b16      	ldr	r3, [pc, #88]	; (800068c <HAL_InitTick+0x70>)
 8000632:	681a      	ldr	r2, [r3, #0]
 8000634:	4b14      	ldr	r3, [pc, #80]	; (8000688 <HAL_InitTick+0x6c>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	4619      	mov	r1, r3
 800063a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800063e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000642:	fbb2 f3f3 	udiv	r3, r2, r3
 8000646:	4618      	mov	r0, r3
 8000648:	f000 f949 	bl	80008de <HAL_SYSTICK_Config>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d10f      	bne.n	8000672 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	2b0f      	cmp	r3, #15
 8000656:	d809      	bhi.n	800066c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000658:	2200      	movs	r2, #0
 800065a:	6879      	ldr	r1, [r7, #4]
 800065c:	f04f 30ff 	mov.w	r0, #4294967295
 8000660:	f000 f913 	bl	800088a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000664:	4a0a      	ldr	r2, [pc, #40]	; (8000690 <HAL_InitTick+0x74>)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	6013      	str	r3, [r2, #0]
 800066a:	e007      	b.n	800067c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800066c:	2301      	movs	r3, #1
 800066e:	73fb      	strb	r3, [r7, #15]
 8000670:	e004      	b.n	800067c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000672:	2301      	movs	r3, #1
 8000674:	73fb      	strb	r3, [r7, #15]
 8000676:	e001      	b.n	800067c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000678:	2301      	movs	r3, #1
 800067a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800067c:	7bfb      	ldrb	r3, [r7, #15]
}
 800067e:	4618      	mov	r0, r3
 8000680:	3710      	adds	r7, #16
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	20000008 	.word	0x20000008
 800068c:	20000000 	.word	0x20000000
 8000690:	20000004 	.word	0x20000004

08000694 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <HAL_IncTick+0x20>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	461a      	mov	r2, r3
 800069e:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <HAL_IncTick+0x24>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4413      	add	r3, r2
 80006a4:	4a04      	ldr	r2, [pc, #16]	; (80006b8 <HAL_IncTick+0x24>)
 80006a6:	6013      	str	r3, [r2, #0]
}
 80006a8:	bf00      	nop
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	20000008 	.word	0x20000008
 80006b8:	2000004c 	.word	0x2000004c

080006bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  return uwTick;
 80006c0:	4b03      	ldr	r3, [pc, #12]	; (80006d0 <HAL_GetTick+0x14>)
 80006c2:	681b      	ldr	r3, [r3, #0]
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	2000004c 	.word	0x2000004c

080006d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b085      	sub	sp, #20
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	f003 0307 	and.w	r3, r3, #7
 80006e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006e4:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <__NVIC_SetPriorityGrouping+0x44>)
 80006e6:	68db      	ldr	r3, [r3, #12]
 80006e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ea:	68ba      	ldr	r2, [r7, #8]
 80006ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006f0:	4013      	ands	r3, r2
 80006f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000704:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000706:	4a04      	ldr	r2, [pc, #16]	; (8000718 <__NVIC_SetPriorityGrouping+0x44>)
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	60d3      	str	r3, [r2, #12]
}
 800070c:	bf00      	nop
 800070e:	3714      	adds	r7, #20
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr
 8000718:	e000ed00 	.word	0xe000ed00

0800071c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000720:	4b04      	ldr	r3, [pc, #16]	; (8000734 <__NVIC_GetPriorityGrouping+0x18>)
 8000722:	68db      	ldr	r3, [r3, #12]
 8000724:	0a1b      	lsrs	r3, r3, #8
 8000726:	f003 0307 	and.w	r3, r3, #7
}
 800072a:	4618      	mov	r0, r3
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr
 8000734:	e000ed00 	.word	0xe000ed00

08000738 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000746:	2b00      	cmp	r3, #0
 8000748:	db0b      	blt.n	8000762 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800074a:	79fb      	ldrb	r3, [r7, #7]
 800074c:	f003 021f 	and.w	r2, r3, #31
 8000750:	4907      	ldr	r1, [pc, #28]	; (8000770 <__NVIC_EnableIRQ+0x38>)
 8000752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000756:	095b      	lsrs	r3, r3, #5
 8000758:	2001      	movs	r0, #1
 800075a:	fa00 f202 	lsl.w	r2, r0, r2
 800075e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000762:	bf00      	nop
 8000764:	370c      	adds	r7, #12
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	e000e100 	.word	0xe000e100

08000774 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	6039      	str	r1, [r7, #0]
 800077e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000784:	2b00      	cmp	r3, #0
 8000786:	db0a      	blt.n	800079e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	b2da      	uxtb	r2, r3
 800078c:	490c      	ldr	r1, [pc, #48]	; (80007c0 <__NVIC_SetPriority+0x4c>)
 800078e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000792:	0112      	lsls	r2, r2, #4
 8000794:	b2d2      	uxtb	r2, r2
 8000796:	440b      	add	r3, r1
 8000798:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800079c:	e00a      	b.n	80007b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	b2da      	uxtb	r2, r3
 80007a2:	4908      	ldr	r1, [pc, #32]	; (80007c4 <__NVIC_SetPriority+0x50>)
 80007a4:	79fb      	ldrb	r3, [r7, #7]
 80007a6:	f003 030f 	and.w	r3, r3, #15
 80007aa:	3b04      	subs	r3, #4
 80007ac:	0112      	lsls	r2, r2, #4
 80007ae:	b2d2      	uxtb	r2, r2
 80007b0:	440b      	add	r3, r1
 80007b2:	761a      	strb	r2, [r3, #24]
}
 80007b4:	bf00      	nop
 80007b6:	370c      	adds	r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr
 80007c0:	e000e100 	.word	0xe000e100
 80007c4:	e000ed00 	.word	0xe000ed00

080007c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b089      	sub	sp, #36	; 0x24
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	60f8      	str	r0, [r7, #12]
 80007d0:	60b9      	str	r1, [r7, #8]
 80007d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	f003 0307 	and.w	r3, r3, #7
 80007da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007dc:	69fb      	ldr	r3, [r7, #28]
 80007de:	f1c3 0307 	rsb	r3, r3, #7
 80007e2:	2b04      	cmp	r3, #4
 80007e4:	bf28      	it	cs
 80007e6:	2304      	movcs	r3, #4
 80007e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ea:	69fb      	ldr	r3, [r7, #28]
 80007ec:	3304      	adds	r3, #4
 80007ee:	2b06      	cmp	r3, #6
 80007f0:	d902      	bls.n	80007f8 <NVIC_EncodePriority+0x30>
 80007f2:	69fb      	ldr	r3, [r7, #28]
 80007f4:	3b03      	subs	r3, #3
 80007f6:	e000      	b.n	80007fa <NVIC_EncodePriority+0x32>
 80007f8:	2300      	movs	r3, #0
 80007fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007fc:	f04f 32ff 	mov.w	r2, #4294967295
 8000800:	69bb      	ldr	r3, [r7, #24]
 8000802:	fa02 f303 	lsl.w	r3, r2, r3
 8000806:	43da      	mvns	r2, r3
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	401a      	ands	r2, r3
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000810:	f04f 31ff 	mov.w	r1, #4294967295
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	fa01 f303 	lsl.w	r3, r1, r3
 800081a:	43d9      	mvns	r1, r3
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000820:	4313      	orrs	r3, r2
         );
}
 8000822:	4618      	mov	r0, r3
 8000824:	3724      	adds	r7, #36	; 0x24
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
	...

08000830 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	3b01      	subs	r3, #1
 800083c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000840:	d301      	bcc.n	8000846 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000842:	2301      	movs	r3, #1
 8000844:	e00f      	b.n	8000866 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000846:	4a0a      	ldr	r2, [pc, #40]	; (8000870 <SysTick_Config+0x40>)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	3b01      	subs	r3, #1
 800084c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800084e:	210f      	movs	r1, #15
 8000850:	f04f 30ff 	mov.w	r0, #4294967295
 8000854:	f7ff ff8e 	bl	8000774 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000858:	4b05      	ldr	r3, [pc, #20]	; (8000870 <SysTick_Config+0x40>)
 800085a:	2200      	movs	r2, #0
 800085c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800085e:	4b04      	ldr	r3, [pc, #16]	; (8000870 <SysTick_Config+0x40>)
 8000860:	2207      	movs	r2, #7
 8000862:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000864:	2300      	movs	r3, #0
}
 8000866:	4618      	mov	r0, r3
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	e000e010 	.word	0xe000e010

08000874 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800087c:	6878      	ldr	r0, [r7, #4]
 800087e:	f7ff ff29 	bl	80006d4 <__NVIC_SetPriorityGrouping>
}
 8000882:	bf00      	nop
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}

0800088a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800088a:	b580      	push	{r7, lr}
 800088c:	b086      	sub	sp, #24
 800088e:	af00      	add	r7, sp, #0
 8000890:	4603      	mov	r3, r0
 8000892:	60b9      	str	r1, [r7, #8]
 8000894:	607a      	str	r2, [r7, #4]
 8000896:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000898:	2300      	movs	r3, #0
 800089a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800089c:	f7ff ff3e 	bl	800071c <__NVIC_GetPriorityGrouping>
 80008a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008a2:	687a      	ldr	r2, [r7, #4]
 80008a4:	68b9      	ldr	r1, [r7, #8]
 80008a6:	6978      	ldr	r0, [r7, #20]
 80008a8:	f7ff ff8e 	bl	80007c8 <NVIC_EncodePriority>
 80008ac:	4602      	mov	r2, r0
 80008ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008b2:	4611      	mov	r1, r2
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff ff5d 	bl	8000774 <__NVIC_SetPriority>
}
 80008ba:	bf00      	nop
 80008bc:	3718      	adds	r7, #24
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}

080008c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008c2:	b580      	push	{r7, lr}
 80008c4:	b082      	sub	sp, #8
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	4603      	mov	r3, r0
 80008ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d0:	4618      	mov	r0, r3
 80008d2:	f7ff ff31 	bl	8000738 <__NVIC_EnableIRQ>
}
 80008d6:	bf00      	nop
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}

080008de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008de:	b580      	push	{r7, lr}
 80008e0:	b082      	sub	sp, #8
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008e6:	6878      	ldr	r0, [r7, #4]
 80008e8:	f7ff ffa2 	bl	8000830 <SysTick_Config>
 80008ec:	4603      	mov	r3, r0
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
	...

080008f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b087      	sub	sp, #28
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
 8000900:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000902:	2300      	movs	r3, #0
 8000904:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000906:	e17f      	b.n	8000c08 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	681a      	ldr	r2, [r3, #0]
 800090c:	2101      	movs	r1, #1
 800090e:	697b      	ldr	r3, [r7, #20]
 8000910:	fa01 f303 	lsl.w	r3, r1, r3
 8000914:	4013      	ands	r3, r2
 8000916:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	2b00      	cmp	r3, #0
 800091c:	f000 8171 	beq.w	8000c02 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	685b      	ldr	r3, [r3, #4]
 8000924:	f003 0303 	and.w	r3, r3, #3
 8000928:	2b01      	cmp	r3, #1
 800092a:	d005      	beq.n	8000938 <HAL_GPIO_Init+0x40>
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	f003 0303 	and.w	r3, r3, #3
 8000934:	2b02      	cmp	r3, #2
 8000936:	d130      	bne.n	800099a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	689b      	ldr	r3, [r3, #8]
 800093c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	005b      	lsls	r3, r3, #1
 8000942:	2203      	movs	r2, #3
 8000944:	fa02 f303 	lsl.w	r3, r2, r3
 8000948:	43db      	mvns	r3, r3
 800094a:	693a      	ldr	r2, [r7, #16]
 800094c:	4013      	ands	r3, r2
 800094e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	68da      	ldr	r2, [r3, #12]
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	005b      	lsls	r3, r3, #1
 8000958:	fa02 f303 	lsl.w	r3, r2, r3
 800095c:	693a      	ldr	r2, [r7, #16]
 800095e:	4313      	orrs	r3, r2
 8000960:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	693a      	ldr	r2, [r7, #16]
 8000966:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800096e:	2201      	movs	r2, #1
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	fa02 f303 	lsl.w	r3, r2, r3
 8000976:	43db      	mvns	r3, r3
 8000978:	693a      	ldr	r2, [r7, #16]
 800097a:	4013      	ands	r3, r2
 800097c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	685b      	ldr	r3, [r3, #4]
 8000982:	091b      	lsrs	r3, r3, #4
 8000984:	f003 0201 	and.w	r2, r3, #1
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	fa02 f303 	lsl.w	r3, r2, r3
 800098e:	693a      	ldr	r2, [r7, #16]
 8000990:	4313      	orrs	r3, r2
 8000992:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	693a      	ldr	r2, [r7, #16]
 8000998:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	685b      	ldr	r3, [r3, #4]
 800099e:	f003 0303 	and.w	r3, r3, #3
 80009a2:	2b03      	cmp	r3, #3
 80009a4:	d118      	bne.n	80009d8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80009ac:	2201      	movs	r2, #1
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	fa02 f303 	lsl.w	r3, r2, r3
 80009b4:	43db      	mvns	r3, r3
 80009b6:	693a      	ldr	r2, [r7, #16]
 80009b8:	4013      	ands	r3, r2
 80009ba:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	685b      	ldr	r3, [r3, #4]
 80009c0:	08db      	lsrs	r3, r3, #3
 80009c2:	f003 0201 	and.w	r2, r3, #1
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	fa02 f303 	lsl.w	r3, r2, r3
 80009cc:	693a      	ldr	r2, [r7, #16]
 80009ce:	4313      	orrs	r3, r2
 80009d0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	693a      	ldr	r2, [r7, #16]
 80009d6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	f003 0303 	and.w	r3, r3, #3
 80009e0:	2b03      	cmp	r3, #3
 80009e2:	d017      	beq.n	8000a14 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	68db      	ldr	r3, [r3, #12]
 80009e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	005b      	lsls	r3, r3, #1
 80009ee:	2203      	movs	r2, #3
 80009f0:	fa02 f303 	lsl.w	r3, r2, r3
 80009f4:	43db      	mvns	r3, r3
 80009f6:	693a      	ldr	r2, [r7, #16]
 80009f8:	4013      	ands	r3, r2
 80009fa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	689a      	ldr	r2, [r3, #8]
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	005b      	lsls	r3, r3, #1
 8000a04:	fa02 f303 	lsl.w	r3, r2, r3
 8000a08:	693a      	ldr	r2, [r7, #16]
 8000a0a:	4313      	orrs	r3, r2
 8000a0c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	693a      	ldr	r2, [r7, #16]
 8000a12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	f003 0303 	and.w	r3, r3, #3
 8000a1c:	2b02      	cmp	r3, #2
 8000a1e:	d123      	bne.n	8000a68 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	08da      	lsrs	r2, r3, #3
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	3208      	adds	r2, #8
 8000a28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	f003 0307 	and.w	r3, r3, #7
 8000a34:	009b      	lsls	r3, r3, #2
 8000a36:	220f      	movs	r2, #15
 8000a38:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3c:	43db      	mvns	r3, r3
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	4013      	ands	r3, r2
 8000a42:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	691a      	ldr	r2, [r3, #16]
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	f003 0307 	and.w	r3, r3, #7
 8000a4e:	009b      	lsls	r3, r3, #2
 8000a50:	fa02 f303 	lsl.w	r3, r2, r3
 8000a54:	693a      	ldr	r2, [r7, #16]
 8000a56:	4313      	orrs	r3, r2
 8000a58:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	08da      	lsrs	r2, r3, #3
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	3208      	adds	r2, #8
 8000a62:	6939      	ldr	r1, [r7, #16]
 8000a64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000a6e:	697b      	ldr	r3, [r7, #20]
 8000a70:	005b      	lsls	r3, r3, #1
 8000a72:	2203      	movs	r2, #3
 8000a74:	fa02 f303 	lsl.w	r3, r2, r3
 8000a78:	43db      	mvns	r3, r3
 8000a7a:	693a      	ldr	r2, [r7, #16]
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	f003 0203 	and.w	r2, r3, #3
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a90:	693a      	ldr	r2, [r7, #16]
 8000a92:	4313      	orrs	r3, r2
 8000a94:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	693a      	ldr	r2, [r7, #16]
 8000a9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	f000 80ac 	beq.w	8000c02 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aaa:	4b5f      	ldr	r3, [pc, #380]	; (8000c28 <HAL_GPIO_Init+0x330>)
 8000aac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aae:	4a5e      	ldr	r2, [pc, #376]	; (8000c28 <HAL_GPIO_Init+0x330>)
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ab6:	4b5c      	ldr	r3, [pc, #368]	; (8000c28 <HAL_GPIO_Init+0x330>)
 8000ab8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	60bb      	str	r3, [r7, #8]
 8000ac0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ac2:	4a5a      	ldr	r2, [pc, #360]	; (8000c2c <HAL_GPIO_Init+0x334>)
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	089b      	lsrs	r3, r3, #2
 8000ac8:	3302      	adds	r3, #2
 8000aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ace:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	f003 0303 	and.w	r3, r3, #3
 8000ad6:	009b      	lsls	r3, r3, #2
 8000ad8:	220f      	movs	r2, #15
 8000ada:	fa02 f303 	lsl.w	r3, r2, r3
 8000ade:	43db      	mvns	r3, r3
 8000ae0:	693a      	ldr	r2, [r7, #16]
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000aec:	d025      	beq.n	8000b3a <HAL_GPIO_Init+0x242>
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4a4f      	ldr	r2, [pc, #316]	; (8000c30 <HAL_GPIO_Init+0x338>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d01f      	beq.n	8000b36 <HAL_GPIO_Init+0x23e>
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4a4e      	ldr	r2, [pc, #312]	; (8000c34 <HAL_GPIO_Init+0x33c>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d019      	beq.n	8000b32 <HAL_GPIO_Init+0x23a>
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4a4d      	ldr	r2, [pc, #308]	; (8000c38 <HAL_GPIO_Init+0x340>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d013      	beq.n	8000b2e <HAL_GPIO_Init+0x236>
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4a4c      	ldr	r2, [pc, #304]	; (8000c3c <HAL_GPIO_Init+0x344>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d00d      	beq.n	8000b2a <HAL_GPIO_Init+0x232>
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4a4b      	ldr	r2, [pc, #300]	; (8000c40 <HAL_GPIO_Init+0x348>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d007      	beq.n	8000b26 <HAL_GPIO_Init+0x22e>
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	4a4a      	ldr	r2, [pc, #296]	; (8000c44 <HAL_GPIO_Init+0x34c>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d101      	bne.n	8000b22 <HAL_GPIO_Init+0x22a>
 8000b1e:	2306      	movs	r3, #6
 8000b20:	e00c      	b.n	8000b3c <HAL_GPIO_Init+0x244>
 8000b22:	2307      	movs	r3, #7
 8000b24:	e00a      	b.n	8000b3c <HAL_GPIO_Init+0x244>
 8000b26:	2305      	movs	r3, #5
 8000b28:	e008      	b.n	8000b3c <HAL_GPIO_Init+0x244>
 8000b2a:	2304      	movs	r3, #4
 8000b2c:	e006      	b.n	8000b3c <HAL_GPIO_Init+0x244>
 8000b2e:	2303      	movs	r3, #3
 8000b30:	e004      	b.n	8000b3c <HAL_GPIO_Init+0x244>
 8000b32:	2302      	movs	r3, #2
 8000b34:	e002      	b.n	8000b3c <HAL_GPIO_Init+0x244>
 8000b36:	2301      	movs	r3, #1
 8000b38:	e000      	b.n	8000b3c <HAL_GPIO_Init+0x244>
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	697a      	ldr	r2, [r7, #20]
 8000b3e:	f002 0203 	and.w	r2, r2, #3
 8000b42:	0092      	lsls	r2, r2, #2
 8000b44:	4093      	lsls	r3, r2
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b4c:	4937      	ldr	r1, [pc, #220]	; (8000c2c <HAL_GPIO_Init+0x334>)
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	089b      	lsrs	r3, r3, #2
 8000b52:	3302      	adds	r3, #2
 8000b54:	693a      	ldr	r2, [r7, #16]
 8000b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b5a:	4b3b      	ldr	r3, [pc, #236]	; (8000c48 <HAL_GPIO_Init+0x350>)
 8000b5c:	689b      	ldr	r3, [r3, #8]
 8000b5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	43db      	mvns	r3, r3
 8000b64:	693a      	ldr	r2, [r7, #16]
 8000b66:	4013      	ands	r3, r2
 8000b68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d003      	beq.n	8000b7e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	4313      	orrs	r3, r2
 8000b7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b7e:	4a32      	ldr	r2, [pc, #200]	; (8000c48 <HAL_GPIO_Init+0x350>)
 8000b80:	693b      	ldr	r3, [r7, #16]
 8000b82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000b84:	4b30      	ldr	r3, [pc, #192]	; (8000c48 <HAL_GPIO_Init+0x350>)
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	43db      	mvns	r3, r3
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	4013      	ands	r3, r2
 8000b92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d003      	beq.n	8000ba8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000ba0:	693a      	ldr	r2, [r7, #16]
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ba8:	4a27      	ldr	r2, [pc, #156]	; (8000c48 <HAL_GPIO_Init+0x350>)
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000bae:	4b26      	ldr	r3, [pc, #152]	; (8000c48 <HAL_GPIO_Init+0x350>)
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	43db      	mvns	r3, r3
 8000bb8:	693a      	ldr	r2, [r7, #16]
 8000bba:	4013      	ands	r3, r2
 8000bbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d003      	beq.n	8000bd2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000bd2:	4a1d      	ldr	r2, [pc, #116]	; (8000c48 <HAL_GPIO_Init+0x350>)
 8000bd4:	693b      	ldr	r3, [r7, #16]
 8000bd6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000bd8:	4b1b      	ldr	r3, [pc, #108]	; (8000c48 <HAL_GPIO_Init+0x350>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	43db      	mvns	r3, r3
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	4013      	ands	r3, r2
 8000be6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d003      	beq.n	8000bfc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000bf4:	693a      	ldr	r2, [r7, #16]
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000bfc:	4a12      	ldr	r2, [pc, #72]	; (8000c48 <HAL_GPIO_Init+0x350>)
 8000bfe:	693b      	ldr	r3, [r7, #16]
 8000c00:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	3301      	adds	r3, #1
 8000c06:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	f47f ae78 	bne.w	8000908 <HAL_GPIO_Init+0x10>
  }
}
 8000c18:	bf00      	nop
 8000c1a:	bf00      	nop
 8000c1c:	371c      	adds	r7, #28
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	40021000 	.word	0x40021000
 8000c2c:	40010000 	.word	0x40010000
 8000c30:	48000400 	.word	0x48000400
 8000c34:	48000800 	.word	0x48000800
 8000c38:	48000c00 	.word	0x48000c00
 8000c3c:	48001000 	.word	0x48001000
 8000c40:	48001400 	.word	0x48001400
 8000c44:	48001800 	.word	0x48001800
 8000c48:	40010400 	.word	0x40010400

08000c4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	460b      	mov	r3, r1
 8000c56:	807b      	strh	r3, [r7, #2]
 8000c58:	4613      	mov	r3, r2
 8000c5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c5c:	787b      	ldrb	r3, [r7, #1]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d003      	beq.n	8000c6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c62:	887a      	ldrh	r2, [r7, #2]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c68:	e002      	b.n	8000c70 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c6a:	887a      	ldrh	r2, [r7, #2]
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c70:	bf00      	nop
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	460b      	mov	r3, r1
 8000c86:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	695b      	ldr	r3, [r3, #20]
 8000c8c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000c8e:	887a      	ldrh	r2, [r7, #2]
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	4013      	ands	r3, r2
 8000c94:	041a      	lsls	r2, r3, #16
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	43d9      	mvns	r1, r3
 8000c9a:	887b      	ldrh	r3, [r7, #2]
 8000c9c:	400b      	ands	r3, r1
 8000c9e:	431a      	orrs	r2, r3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	619a      	str	r2, [r3, #24]
}
 8000ca4:	bf00      	nop
 8000ca6:	3714      	adds	r7, #20
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000cb4:	4b04      	ldr	r3, [pc, #16]	; (8000cc8 <HAL_PWREx_GetVoltageRange+0x18>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	40007000 	.word	0x40007000

08000ccc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000cda:	d130      	bne.n	8000d3e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000cdc:	4b23      	ldr	r3, [pc, #140]	; (8000d6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ce4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ce8:	d038      	beq.n	8000d5c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cea:	4b20      	ldr	r3, [pc, #128]	; (8000d6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000cf2:	4a1e      	ldr	r2, [pc, #120]	; (8000d6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cf4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cf8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000cfa:	4b1d      	ldr	r3, [pc, #116]	; (8000d70 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	2232      	movs	r2, #50	; 0x32
 8000d00:	fb02 f303 	mul.w	r3, r2, r3
 8000d04:	4a1b      	ldr	r2, [pc, #108]	; (8000d74 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000d06:	fba2 2303 	umull	r2, r3, r2, r3
 8000d0a:	0c9b      	lsrs	r3, r3, #18
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d10:	e002      	b.n	8000d18 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	3b01      	subs	r3, #1
 8000d16:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d18:	4b14      	ldr	r3, [pc, #80]	; (8000d6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d1a:	695b      	ldr	r3, [r3, #20]
 8000d1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d24:	d102      	bne.n	8000d2c <HAL_PWREx_ControlVoltageScaling+0x60>
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d1f2      	bne.n	8000d12 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000d2c:	4b0f      	ldr	r3, [pc, #60]	; (8000d6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d2e:	695b      	ldr	r3, [r3, #20]
 8000d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d38:	d110      	bne.n	8000d5c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	e00f      	b.n	8000d5e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000d3e:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000d46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d4a:	d007      	beq.n	8000d5c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d4c:	4b07      	ldr	r3, [pc, #28]	; (8000d6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000d54:	4a05      	ldr	r2, [pc, #20]	; (8000d6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d5a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000d5c:	2300      	movs	r3, #0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3714      	adds	r7, #20
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	40007000 	.word	0x40007000
 8000d70:	20000000 	.word	0x20000000
 8000d74:	431bde83 	.word	0x431bde83

08000d78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b088      	sub	sp, #32
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d101      	bne.n	8000d8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
 8000d88:	e3ca      	b.n	8001520 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d8a:	4b97      	ldr	r3, [pc, #604]	; (8000fe8 <HAL_RCC_OscConfig+0x270>)
 8000d8c:	689b      	ldr	r3, [r3, #8]
 8000d8e:	f003 030c 	and.w	r3, r3, #12
 8000d92:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d94:	4b94      	ldr	r3, [pc, #592]	; (8000fe8 <HAL_RCC_OscConfig+0x270>)
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	f003 0303 	and.w	r3, r3, #3
 8000d9c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f003 0310 	and.w	r3, r3, #16
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	f000 80e4 	beq.w	8000f74 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000dac:	69bb      	ldr	r3, [r7, #24]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d007      	beq.n	8000dc2 <HAL_RCC_OscConfig+0x4a>
 8000db2:	69bb      	ldr	r3, [r7, #24]
 8000db4:	2b0c      	cmp	r3, #12
 8000db6:	f040 808b 	bne.w	8000ed0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	f040 8087 	bne.w	8000ed0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000dc2:	4b89      	ldr	r3, [pc, #548]	; (8000fe8 <HAL_RCC_OscConfig+0x270>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f003 0302 	and.w	r3, r3, #2
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d005      	beq.n	8000dda <HAL_RCC_OscConfig+0x62>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	699b      	ldr	r3, [r3, #24]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d101      	bne.n	8000dda <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e3a2      	b.n	8001520 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6a1a      	ldr	r2, [r3, #32]
 8000dde:	4b82      	ldr	r3, [pc, #520]	; (8000fe8 <HAL_RCC_OscConfig+0x270>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f003 0308 	and.w	r3, r3, #8
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d004      	beq.n	8000df4 <HAL_RCC_OscConfig+0x7c>
 8000dea:	4b7f      	ldr	r3, [pc, #508]	; (8000fe8 <HAL_RCC_OscConfig+0x270>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000df2:	e005      	b.n	8000e00 <HAL_RCC_OscConfig+0x88>
 8000df4:	4b7c      	ldr	r3, [pc, #496]	; (8000fe8 <HAL_RCC_OscConfig+0x270>)
 8000df6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000dfa:	091b      	lsrs	r3, r3, #4
 8000dfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d223      	bcs.n	8000e4c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6a1b      	ldr	r3, [r3, #32]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f000 fd1d 	bl	8001848 <RCC_SetFlashLatencyFromMSIRange>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000e14:	2301      	movs	r3, #1
 8000e16:	e383      	b.n	8001520 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e18:	4b73      	ldr	r3, [pc, #460]	; (8000fe8 <HAL_RCC_OscConfig+0x270>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a72      	ldr	r2, [pc, #456]	; (8000fe8 <HAL_RCC_OscConfig+0x270>)
 8000e1e:	f043 0308 	orr.w	r3, r3, #8
 8000e22:	6013      	str	r3, [r2, #0]
 8000e24:	4b70      	ldr	r3, [pc, #448]	; (8000fe8 <HAL_RCC_OscConfig+0x270>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6a1b      	ldr	r3, [r3, #32]
 8000e30:	496d      	ldr	r1, [pc, #436]	; (8000fe8 <HAL_RCC_OscConfig+0x270>)
 8000e32:	4313      	orrs	r3, r2
 8000e34:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e36:	4b6c      	ldr	r3, [pc, #432]	; (8000fe8 <HAL_RCC_OscConfig+0x270>)
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	69db      	ldr	r3, [r3, #28]
 8000e42:	021b      	lsls	r3, r3, #8
 8000e44:	4968      	ldr	r1, [pc, #416]	; (8000fe8 <HAL_RCC_OscConfig+0x270>)
 8000e46:	4313      	orrs	r3, r2
 8000e48:	604b      	str	r3, [r1, #4]
 8000e4a:	e025      	b.n	8000e98 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e4c:	4b66      	ldr	r3, [pc, #408]	; (8000fe8 <HAL_RCC_OscConfig+0x270>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a65      	ldr	r2, [pc, #404]	; (8000fe8 <HAL_RCC_OscConfig+0x270>)
 8000e52:	f043 0308 	orr.w	r3, r3, #8
 8000e56:	6013      	str	r3, [r2, #0]
 8000e58:	4b63      	ldr	r3, [pc, #396]	; (8000fe8 <HAL_RCC_OscConfig+0x270>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6a1b      	ldr	r3, [r3, #32]
 8000e64:	4960      	ldr	r1, [pc, #384]	; (8000fe8 <HAL_RCC_OscConfig+0x270>)
 8000e66:	4313      	orrs	r3, r2
 8000e68:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e6a:	4b5f      	ldr	r3, [pc, #380]	; (8000fe8 <HAL_RCC_OscConfig+0x270>)
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	69db      	ldr	r3, [r3, #28]
 8000e76:	021b      	lsls	r3, r3, #8
 8000e78:	495b      	ldr	r1, [pc, #364]	; (8000fe8 <HAL_RCC_OscConfig+0x270>)
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000e7e:	69bb      	ldr	r3, [r7, #24]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d109      	bne.n	8000e98 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6a1b      	ldr	r3, [r3, #32]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f000 fcdd 	bl	8001848 <RCC_SetFlashLatencyFromMSIRange>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000e94:	2301      	movs	r3, #1
 8000e96:	e343      	b.n	8001520 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000e98:	f000 fc4a 	bl	8001730 <HAL_RCC_GetSysClockFreq>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	4b52      	ldr	r3, [pc, #328]	; (8000fe8 <HAL_RCC_OscConfig+0x270>)
 8000ea0:	689b      	ldr	r3, [r3, #8]
 8000ea2:	091b      	lsrs	r3, r3, #4
 8000ea4:	f003 030f 	and.w	r3, r3, #15
 8000ea8:	4950      	ldr	r1, [pc, #320]	; (8000fec <HAL_RCC_OscConfig+0x274>)
 8000eaa:	5ccb      	ldrb	r3, [r1, r3]
 8000eac:	f003 031f 	and.w	r3, r3, #31
 8000eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8000eb4:	4a4e      	ldr	r2, [pc, #312]	; (8000ff0 <HAL_RCC_OscConfig+0x278>)
 8000eb6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000eb8:	4b4e      	ldr	r3, [pc, #312]	; (8000ff4 <HAL_RCC_OscConfig+0x27c>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff fbad 	bl	800061c <HAL_InitTick>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000ec6:	7bfb      	ldrb	r3, [r7, #15]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d052      	beq.n	8000f72 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000ecc:	7bfb      	ldrb	r3, [r7, #15]
 8000ece:	e327      	b.n	8001520 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d032      	beq.n	8000f3e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000ed8:	4b43      	ldr	r3, [pc, #268]	; (8000fe8 <HAL_RCC_OscConfig+0x270>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a42      	ldr	r2, [pc, #264]	; (8000fe8 <HAL_RCC_OscConfig+0x270>)
 8000ede:	f043 0301 	orr.w	r3, r3, #1
 8000ee2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000ee4:	f7ff fbea 	bl	80006bc <HAL_GetTick>
 8000ee8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000eea:	e008      	b.n	8000efe <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000eec:	f7ff fbe6 	bl	80006bc <HAL_GetTick>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	2b02      	cmp	r3, #2
 8000ef8:	d901      	bls.n	8000efe <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000efa:	2303      	movs	r3, #3
 8000efc:	e310      	b.n	8001520 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000efe:	4b3a      	ldr	r3, [pc, #232]	; (8000fe8 <HAL_RCC_OscConfig+0x270>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f003 0302 	and.w	r3, r3, #2
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d0f0      	beq.n	8000eec <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f0a:	4b37      	ldr	r3, [pc, #220]	; (8000fe8 <HAL_RCC_OscConfig+0x270>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a36      	ldr	r2, [pc, #216]	; (8000fe8 <HAL_RCC_OscConfig+0x270>)
 8000f10:	f043 0308 	orr.w	r3, r3, #8
 8000f14:	6013      	str	r3, [r2, #0]
 8000f16:	4b34      	ldr	r3, [pc, #208]	; (8000fe8 <HAL_RCC_OscConfig+0x270>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6a1b      	ldr	r3, [r3, #32]
 8000f22:	4931      	ldr	r1, [pc, #196]	; (8000fe8 <HAL_RCC_OscConfig+0x270>)
 8000f24:	4313      	orrs	r3, r2
 8000f26:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f28:	4b2f      	ldr	r3, [pc, #188]	; (8000fe8 <HAL_RCC_OscConfig+0x270>)
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	69db      	ldr	r3, [r3, #28]
 8000f34:	021b      	lsls	r3, r3, #8
 8000f36:	492c      	ldr	r1, [pc, #176]	; (8000fe8 <HAL_RCC_OscConfig+0x270>)
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	604b      	str	r3, [r1, #4]
 8000f3c:	e01a      	b.n	8000f74 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000f3e:	4b2a      	ldr	r3, [pc, #168]	; (8000fe8 <HAL_RCC_OscConfig+0x270>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a29      	ldr	r2, [pc, #164]	; (8000fe8 <HAL_RCC_OscConfig+0x270>)
 8000f44:	f023 0301 	bic.w	r3, r3, #1
 8000f48:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000f4a:	f7ff fbb7 	bl	80006bc <HAL_GetTick>
 8000f4e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f50:	e008      	b.n	8000f64 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f52:	f7ff fbb3 	bl	80006bc <HAL_GetTick>
 8000f56:	4602      	mov	r2, r0
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	1ad3      	subs	r3, r2, r3
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	d901      	bls.n	8000f64 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000f60:	2303      	movs	r3, #3
 8000f62:	e2dd      	b.n	8001520 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f64:	4b20      	ldr	r3, [pc, #128]	; (8000fe8 <HAL_RCC_OscConfig+0x270>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f003 0302 	and.w	r3, r3, #2
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d1f0      	bne.n	8000f52 <HAL_RCC_OscConfig+0x1da>
 8000f70:	e000      	b.n	8000f74 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f72:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f003 0301 	and.w	r3, r3, #1
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d074      	beq.n	800106a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000f80:	69bb      	ldr	r3, [r7, #24]
 8000f82:	2b08      	cmp	r3, #8
 8000f84:	d005      	beq.n	8000f92 <HAL_RCC_OscConfig+0x21a>
 8000f86:	69bb      	ldr	r3, [r7, #24]
 8000f88:	2b0c      	cmp	r3, #12
 8000f8a:	d10e      	bne.n	8000faa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	2b03      	cmp	r3, #3
 8000f90:	d10b      	bne.n	8000faa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f92:	4b15      	ldr	r3, [pc, #84]	; (8000fe8 <HAL_RCC_OscConfig+0x270>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d064      	beq.n	8001068 <HAL_RCC_OscConfig+0x2f0>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d160      	bne.n	8001068 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e2ba      	b.n	8001520 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fb2:	d106      	bne.n	8000fc2 <HAL_RCC_OscConfig+0x24a>
 8000fb4:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <HAL_RCC_OscConfig+0x270>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a0b      	ldr	r2, [pc, #44]	; (8000fe8 <HAL_RCC_OscConfig+0x270>)
 8000fba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fbe:	6013      	str	r3, [r2, #0]
 8000fc0:	e026      	b.n	8001010 <HAL_RCC_OscConfig+0x298>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fca:	d115      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x280>
 8000fcc:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <HAL_RCC_OscConfig+0x270>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a05      	ldr	r2, [pc, #20]	; (8000fe8 <HAL_RCC_OscConfig+0x270>)
 8000fd2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fd6:	6013      	str	r3, [r2, #0]
 8000fd8:	4b03      	ldr	r3, [pc, #12]	; (8000fe8 <HAL_RCC_OscConfig+0x270>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a02      	ldr	r2, [pc, #8]	; (8000fe8 <HAL_RCC_OscConfig+0x270>)
 8000fde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fe2:	6013      	str	r3, [r2, #0]
 8000fe4:	e014      	b.n	8001010 <HAL_RCC_OscConfig+0x298>
 8000fe6:	bf00      	nop
 8000fe8:	40021000 	.word	0x40021000
 8000fec:	08002c6c 	.word	0x08002c6c
 8000ff0:	20000000 	.word	0x20000000
 8000ff4:	20000004 	.word	0x20000004
 8000ff8:	4ba0      	ldr	r3, [pc, #640]	; (800127c <HAL_RCC_OscConfig+0x504>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a9f      	ldr	r2, [pc, #636]	; (800127c <HAL_RCC_OscConfig+0x504>)
 8000ffe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001002:	6013      	str	r3, [r2, #0]
 8001004:	4b9d      	ldr	r3, [pc, #628]	; (800127c <HAL_RCC_OscConfig+0x504>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a9c      	ldr	r2, [pc, #624]	; (800127c <HAL_RCC_OscConfig+0x504>)
 800100a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800100e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d013      	beq.n	8001040 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001018:	f7ff fb50 	bl	80006bc <HAL_GetTick>
 800101c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800101e:	e008      	b.n	8001032 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001020:	f7ff fb4c 	bl	80006bc <HAL_GetTick>
 8001024:	4602      	mov	r2, r0
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	2b64      	cmp	r3, #100	; 0x64
 800102c:	d901      	bls.n	8001032 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800102e:	2303      	movs	r3, #3
 8001030:	e276      	b.n	8001520 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001032:	4b92      	ldr	r3, [pc, #584]	; (800127c <HAL_RCC_OscConfig+0x504>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800103a:	2b00      	cmp	r3, #0
 800103c:	d0f0      	beq.n	8001020 <HAL_RCC_OscConfig+0x2a8>
 800103e:	e014      	b.n	800106a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001040:	f7ff fb3c 	bl	80006bc <HAL_GetTick>
 8001044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001046:	e008      	b.n	800105a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001048:	f7ff fb38 	bl	80006bc <HAL_GetTick>
 800104c:	4602      	mov	r2, r0
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	2b64      	cmp	r3, #100	; 0x64
 8001054:	d901      	bls.n	800105a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001056:	2303      	movs	r3, #3
 8001058:	e262      	b.n	8001520 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800105a:	4b88      	ldr	r3, [pc, #544]	; (800127c <HAL_RCC_OscConfig+0x504>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001062:	2b00      	cmp	r3, #0
 8001064:	d1f0      	bne.n	8001048 <HAL_RCC_OscConfig+0x2d0>
 8001066:	e000      	b.n	800106a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001068:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f003 0302 	and.w	r3, r3, #2
 8001072:	2b00      	cmp	r3, #0
 8001074:	d060      	beq.n	8001138 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	2b04      	cmp	r3, #4
 800107a:	d005      	beq.n	8001088 <HAL_RCC_OscConfig+0x310>
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	2b0c      	cmp	r3, #12
 8001080:	d119      	bne.n	80010b6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	2b02      	cmp	r3, #2
 8001086:	d116      	bne.n	80010b6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001088:	4b7c      	ldr	r3, [pc, #496]	; (800127c <HAL_RCC_OscConfig+0x504>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001090:	2b00      	cmp	r3, #0
 8001092:	d005      	beq.n	80010a0 <HAL_RCC_OscConfig+0x328>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d101      	bne.n	80010a0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800109c:	2301      	movs	r3, #1
 800109e:	e23f      	b.n	8001520 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010a0:	4b76      	ldr	r3, [pc, #472]	; (800127c <HAL_RCC_OscConfig+0x504>)
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	691b      	ldr	r3, [r3, #16]
 80010ac:	061b      	lsls	r3, r3, #24
 80010ae:	4973      	ldr	r1, [pc, #460]	; (800127c <HAL_RCC_OscConfig+0x504>)
 80010b0:	4313      	orrs	r3, r2
 80010b2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80010b4:	e040      	b.n	8001138 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	68db      	ldr	r3, [r3, #12]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d023      	beq.n	8001106 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010be:	4b6f      	ldr	r3, [pc, #444]	; (800127c <HAL_RCC_OscConfig+0x504>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a6e      	ldr	r2, [pc, #440]	; (800127c <HAL_RCC_OscConfig+0x504>)
 80010c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010ca:	f7ff faf7 	bl	80006bc <HAL_GetTick>
 80010ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010d0:	e008      	b.n	80010e4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010d2:	f7ff faf3 	bl	80006bc <HAL_GetTick>
 80010d6:	4602      	mov	r2, r0
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	1ad3      	subs	r3, r2, r3
 80010dc:	2b02      	cmp	r3, #2
 80010de:	d901      	bls.n	80010e4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80010e0:	2303      	movs	r3, #3
 80010e2:	e21d      	b.n	8001520 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010e4:	4b65      	ldr	r3, [pc, #404]	; (800127c <HAL_RCC_OscConfig+0x504>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d0f0      	beq.n	80010d2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010f0:	4b62      	ldr	r3, [pc, #392]	; (800127c <HAL_RCC_OscConfig+0x504>)
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	691b      	ldr	r3, [r3, #16]
 80010fc:	061b      	lsls	r3, r3, #24
 80010fe:	495f      	ldr	r1, [pc, #380]	; (800127c <HAL_RCC_OscConfig+0x504>)
 8001100:	4313      	orrs	r3, r2
 8001102:	604b      	str	r3, [r1, #4]
 8001104:	e018      	b.n	8001138 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001106:	4b5d      	ldr	r3, [pc, #372]	; (800127c <HAL_RCC_OscConfig+0x504>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a5c      	ldr	r2, [pc, #368]	; (800127c <HAL_RCC_OscConfig+0x504>)
 800110c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001110:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001112:	f7ff fad3 	bl	80006bc <HAL_GetTick>
 8001116:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001118:	e008      	b.n	800112c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800111a:	f7ff facf 	bl	80006bc <HAL_GetTick>
 800111e:	4602      	mov	r2, r0
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	1ad3      	subs	r3, r2, r3
 8001124:	2b02      	cmp	r3, #2
 8001126:	d901      	bls.n	800112c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001128:	2303      	movs	r3, #3
 800112a:	e1f9      	b.n	8001520 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800112c:	4b53      	ldr	r3, [pc, #332]	; (800127c <HAL_RCC_OscConfig+0x504>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001134:	2b00      	cmp	r3, #0
 8001136:	d1f0      	bne.n	800111a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f003 0308 	and.w	r3, r3, #8
 8001140:	2b00      	cmp	r3, #0
 8001142:	d03c      	beq.n	80011be <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	695b      	ldr	r3, [r3, #20]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d01c      	beq.n	8001186 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800114c:	4b4b      	ldr	r3, [pc, #300]	; (800127c <HAL_RCC_OscConfig+0x504>)
 800114e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001152:	4a4a      	ldr	r2, [pc, #296]	; (800127c <HAL_RCC_OscConfig+0x504>)
 8001154:	f043 0301 	orr.w	r3, r3, #1
 8001158:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800115c:	f7ff faae 	bl	80006bc <HAL_GetTick>
 8001160:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001162:	e008      	b.n	8001176 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001164:	f7ff faaa 	bl	80006bc <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	2b02      	cmp	r3, #2
 8001170:	d901      	bls.n	8001176 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001172:	2303      	movs	r3, #3
 8001174:	e1d4      	b.n	8001520 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001176:	4b41      	ldr	r3, [pc, #260]	; (800127c <HAL_RCC_OscConfig+0x504>)
 8001178:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800117c:	f003 0302 	and.w	r3, r3, #2
 8001180:	2b00      	cmp	r3, #0
 8001182:	d0ef      	beq.n	8001164 <HAL_RCC_OscConfig+0x3ec>
 8001184:	e01b      	b.n	80011be <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001186:	4b3d      	ldr	r3, [pc, #244]	; (800127c <HAL_RCC_OscConfig+0x504>)
 8001188:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800118c:	4a3b      	ldr	r2, [pc, #236]	; (800127c <HAL_RCC_OscConfig+0x504>)
 800118e:	f023 0301 	bic.w	r3, r3, #1
 8001192:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001196:	f7ff fa91 	bl	80006bc <HAL_GetTick>
 800119a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800119c:	e008      	b.n	80011b0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800119e:	f7ff fa8d 	bl	80006bc <HAL_GetTick>
 80011a2:	4602      	mov	r2, r0
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d901      	bls.n	80011b0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80011ac:	2303      	movs	r3, #3
 80011ae:	e1b7      	b.n	8001520 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80011b0:	4b32      	ldr	r3, [pc, #200]	; (800127c <HAL_RCC_OscConfig+0x504>)
 80011b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d1ef      	bne.n	800119e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 0304 	and.w	r3, r3, #4
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	f000 80a6 	beq.w	8001318 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011cc:	2300      	movs	r3, #0
 80011ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80011d0:	4b2a      	ldr	r3, [pc, #168]	; (800127c <HAL_RCC_OscConfig+0x504>)
 80011d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d10d      	bne.n	80011f8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011dc:	4b27      	ldr	r3, [pc, #156]	; (800127c <HAL_RCC_OscConfig+0x504>)
 80011de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011e0:	4a26      	ldr	r2, [pc, #152]	; (800127c <HAL_RCC_OscConfig+0x504>)
 80011e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e6:	6593      	str	r3, [r2, #88]	; 0x58
 80011e8:	4b24      	ldr	r3, [pc, #144]	; (800127c <HAL_RCC_OscConfig+0x504>)
 80011ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f0:	60bb      	str	r3, [r7, #8]
 80011f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011f4:	2301      	movs	r3, #1
 80011f6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011f8:	4b21      	ldr	r3, [pc, #132]	; (8001280 <HAL_RCC_OscConfig+0x508>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001200:	2b00      	cmp	r3, #0
 8001202:	d118      	bne.n	8001236 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001204:	4b1e      	ldr	r3, [pc, #120]	; (8001280 <HAL_RCC_OscConfig+0x508>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a1d      	ldr	r2, [pc, #116]	; (8001280 <HAL_RCC_OscConfig+0x508>)
 800120a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800120e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001210:	f7ff fa54 	bl	80006bc <HAL_GetTick>
 8001214:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001216:	e008      	b.n	800122a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001218:	f7ff fa50 	bl	80006bc <HAL_GetTick>
 800121c:	4602      	mov	r2, r0
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	2b02      	cmp	r3, #2
 8001224:	d901      	bls.n	800122a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001226:	2303      	movs	r3, #3
 8001228:	e17a      	b.n	8001520 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800122a:	4b15      	ldr	r3, [pc, #84]	; (8001280 <HAL_RCC_OscConfig+0x508>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001232:	2b00      	cmp	r3, #0
 8001234:	d0f0      	beq.n	8001218 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	2b01      	cmp	r3, #1
 800123c:	d108      	bne.n	8001250 <HAL_RCC_OscConfig+0x4d8>
 800123e:	4b0f      	ldr	r3, [pc, #60]	; (800127c <HAL_RCC_OscConfig+0x504>)
 8001240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001244:	4a0d      	ldr	r2, [pc, #52]	; (800127c <HAL_RCC_OscConfig+0x504>)
 8001246:	f043 0301 	orr.w	r3, r3, #1
 800124a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800124e:	e029      	b.n	80012a4 <HAL_RCC_OscConfig+0x52c>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	2b05      	cmp	r3, #5
 8001256:	d115      	bne.n	8001284 <HAL_RCC_OscConfig+0x50c>
 8001258:	4b08      	ldr	r3, [pc, #32]	; (800127c <HAL_RCC_OscConfig+0x504>)
 800125a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800125e:	4a07      	ldr	r2, [pc, #28]	; (800127c <HAL_RCC_OscConfig+0x504>)
 8001260:	f043 0304 	orr.w	r3, r3, #4
 8001264:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001268:	4b04      	ldr	r3, [pc, #16]	; (800127c <HAL_RCC_OscConfig+0x504>)
 800126a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800126e:	4a03      	ldr	r2, [pc, #12]	; (800127c <HAL_RCC_OscConfig+0x504>)
 8001270:	f043 0301 	orr.w	r3, r3, #1
 8001274:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001278:	e014      	b.n	80012a4 <HAL_RCC_OscConfig+0x52c>
 800127a:	bf00      	nop
 800127c:	40021000 	.word	0x40021000
 8001280:	40007000 	.word	0x40007000
 8001284:	4b9c      	ldr	r3, [pc, #624]	; (80014f8 <HAL_RCC_OscConfig+0x780>)
 8001286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800128a:	4a9b      	ldr	r2, [pc, #620]	; (80014f8 <HAL_RCC_OscConfig+0x780>)
 800128c:	f023 0301 	bic.w	r3, r3, #1
 8001290:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001294:	4b98      	ldr	r3, [pc, #608]	; (80014f8 <HAL_RCC_OscConfig+0x780>)
 8001296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800129a:	4a97      	ldr	r2, [pc, #604]	; (80014f8 <HAL_RCC_OscConfig+0x780>)
 800129c:	f023 0304 	bic.w	r3, r3, #4
 80012a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d016      	beq.n	80012da <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012ac:	f7ff fa06 	bl	80006bc <HAL_GetTick>
 80012b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012b2:	e00a      	b.n	80012ca <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012b4:	f7ff fa02 	bl	80006bc <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	f241 3288 	movw	r2, #5000	; 0x1388
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d901      	bls.n	80012ca <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80012c6:	2303      	movs	r3, #3
 80012c8:	e12a      	b.n	8001520 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012ca:	4b8b      	ldr	r3, [pc, #556]	; (80014f8 <HAL_RCC_OscConfig+0x780>)
 80012cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012d0:	f003 0302 	and.w	r3, r3, #2
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d0ed      	beq.n	80012b4 <HAL_RCC_OscConfig+0x53c>
 80012d8:	e015      	b.n	8001306 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012da:	f7ff f9ef 	bl	80006bc <HAL_GetTick>
 80012de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012e0:	e00a      	b.n	80012f8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012e2:	f7ff f9eb 	bl	80006bc <HAL_GetTick>
 80012e6:	4602      	mov	r2, r0
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d901      	bls.n	80012f8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80012f4:	2303      	movs	r3, #3
 80012f6:	e113      	b.n	8001520 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012f8:	4b7f      	ldr	r3, [pc, #508]	; (80014f8 <HAL_RCC_OscConfig+0x780>)
 80012fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	2b00      	cmp	r3, #0
 8001304:	d1ed      	bne.n	80012e2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001306:	7ffb      	ldrb	r3, [r7, #31]
 8001308:	2b01      	cmp	r3, #1
 800130a:	d105      	bne.n	8001318 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800130c:	4b7a      	ldr	r3, [pc, #488]	; (80014f8 <HAL_RCC_OscConfig+0x780>)
 800130e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001310:	4a79      	ldr	r2, [pc, #484]	; (80014f8 <HAL_RCC_OscConfig+0x780>)
 8001312:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001316:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800131c:	2b00      	cmp	r3, #0
 800131e:	f000 80fe 	beq.w	800151e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001326:	2b02      	cmp	r3, #2
 8001328:	f040 80d0 	bne.w	80014cc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800132c:	4b72      	ldr	r3, [pc, #456]	; (80014f8 <HAL_RCC_OscConfig+0x780>)
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	f003 0203 	and.w	r2, r3, #3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800133c:	429a      	cmp	r2, r3
 800133e:	d130      	bne.n	80013a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	3b01      	subs	r3, #1
 800134c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800134e:	429a      	cmp	r2, r3
 8001350:	d127      	bne.n	80013a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800135c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800135e:	429a      	cmp	r2, r3
 8001360:	d11f      	bne.n	80013a2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800136c:	2a07      	cmp	r2, #7
 800136e:	bf14      	ite	ne
 8001370:	2201      	movne	r2, #1
 8001372:	2200      	moveq	r2, #0
 8001374:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001376:	4293      	cmp	r3, r2
 8001378:	d113      	bne.n	80013a2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001384:	085b      	lsrs	r3, r3, #1
 8001386:	3b01      	subs	r3, #1
 8001388:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800138a:	429a      	cmp	r2, r3
 800138c:	d109      	bne.n	80013a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001398:	085b      	lsrs	r3, r3, #1
 800139a:	3b01      	subs	r3, #1
 800139c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800139e:	429a      	cmp	r2, r3
 80013a0:	d06e      	beq.n	8001480 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	2b0c      	cmp	r3, #12
 80013a6:	d069      	beq.n	800147c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80013a8:	4b53      	ldr	r3, [pc, #332]	; (80014f8 <HAL_RCC_OscConfig+0x780>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d105      	bne.n	80013c0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80013b4:	4b50      	ldr	r3, [pc, #320]	; (80014f8 <HAL_RCC_OscConfig+0x780>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e0ad      	b.n	8001520 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80013c4:	4b4c      	ldr	r3, [pc, #304]	; (80014f8 <HAL_RCC_OscConfig+0x780>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a4b      	ldr	r2, [pc, #300]	; (80014f8 <HAL_RCC_OscConfig+0x780>)
 80013ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013ce:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80013d0:	f7ff f974 	bl	80006bc <HAL_GetTick>
 80013d4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013d6:	e008      	b.n	80013ea <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013d8:	f7ff f970 	bl	80006bc <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e09a      	b.n	8001520 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013ea:	4b43      	ldr	r3, [pc, #268]	; (80014f8 <HAL_RCC_OscConfig+0x780>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d1f0      	bne.n	80013d8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013f6:	4b40      	ldr	r3, [pc, #256]	; (80014f8 <HAL_RCC_OscConfig+0x780>)
 80013f8:	68da      	ldr	r2, [r3, #12]
 80013fa:	4b40      	ldr	r3, [pc, #256]	; (80014fc <HAL_RCC_OscConfig+0x784>)
 80013fc:	4013      	ands	r3, r2
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001406:	3a01      	subs	r2, #1
 8001408:	0112      	lsls	r2, r2, #4
 800140a:	4311      	orrs	r1, r2
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001410:	0212      	lsls	r2, r2, #8
 8001412:	4311      	orrs	r1, r2
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001418:	0852      	lsrs	r2, r2, #1
 800141a:	3a01      	subs	r2, #1
 800141c:	0552      	lsls	r2, r2, #21
 800141e:	4311      	orrs	r1, r2
 8001420:	687a      	ldr	r2, [r7, #4]
 8001422:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001424:	0852      	lsrs	r2, r2, #1
 8001426:	3a01      	subs	r2, #1
 8001428:	0652      	lsls	r2, r2, #25
 800142a:	4311      	orrs	r1, r2
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001430:	0912      	lsrs	r2, r2, #4
 8001432:	0452      	lsls	r2, r2, #17
 8001434:	430a      	orrs	r2, r1
 8001436:	4930      	ldr	r1, [pc, #192]	; (80014f8 <HAL_RCC_OscConfig+0x780>)
 8001438:	4313      	orrs	r3, r2
 800143a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800143c:	4b2e      	ldr	r3, [pc, #184]	; (80014f8 <HAL_RCC_OscConfig+0x780>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a2d      	ldr	r2, [pc, #180]	; (80014f8 <HAL_RCC_OscConfig+0x780>)
 8001442:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001446:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001448:	4b2b      	ldr	r3, [pc, #172]	; (80014f8 <HAL_RCC_OscConfig+0x780>)
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	4a2a      	ldr	r2, [pc, #168]	; (80014f8 <HAL_RCC_OscConfig+0x780>)
 800144e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001452:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001454:	f7ff f932 	bl	80006bc <HAL_GetTick>
 8001458:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800145a:	e008      	b.n	800146e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800145c:	f7ff f92e 	bl	80006bc <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b02      	cmp	r3, #2
 8001468:	d901      	bls.n	800146e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e058      	b.n	8001520 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800146e:	4b22      	ldr	r3, [pc, #136]	; (80014f8 <HAL_RCC_OscConfig+0x780>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d0f0      	beq.n	800145c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800147a:	e050      	b.n	800151e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e04f      	b.n	8001520 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001480:	4b1d      	ldr	r3, [pc, #116]	; (80014f8 <HAL_RCC_OscConfig+0x780>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d148      	bne.n	800151e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800148c:	4b1a      	ldr	r3, [pc, #104]	; (80014f8 <HAL_RCC_OscConfig+0x780>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a19      	ldr	r2, [pc, #100]	; (80014f8 <HAL_RCC_OscConfig+0x780>)
 8001492:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001496:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001498:	4b17      	ldr	r3, [pc, #92]	; (80014f8 <HAL_RCC_OscConfig+0x780>)
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	4a16      	ldr	r2, [pc, #88]	; (80014f8 <HAL_RCC_OscConfig+0x780>)
 800149e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014a2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80014a4:	f7ff f90a 	bl	80006bc <HAL_GetTick>
 80014a8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014aa:	e008      	b.n	80014be <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014ac:	f7ff f906 	bl	80006bc <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e030      	b.n	8001520 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014be:	4b0e      	ldr	r3, [pc, #56]	; (80014f8 <HAL_RCC_OscConfig+0x780>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d0f0      	beq.n	80014ac <HAL_RCC_OscConfig+0x734>
 80014ca:	e028      	b.n	800151e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	2b0c      	cmp	r3, #12
 80014d0:	d023      	beq.n	800151a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014d2:	4b09      	ldr	r3, [pc, #36]	; (80014f8 <HAL_RCC_OscConfig+0x780>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a08      	ldr	r2, [pc, #32]	; (80014f8 <HAL_RCC_OscConfig+0x780>)
 80014d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014de:	f7ff f8ed 	bl	80006bc <HAL_GetTick>
 80014e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014e4:	e00c      	b.n	8001500 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014e6:	f7ff f8e9 	bl	80006bc <HAL_GetTick>
 80014ea:	4602      	mov	r2, r0
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d905      	bls.n	8001500 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e013      	b.n	8001520 <HAL_RCC_OscConfig+0x7a8>
 80014f8:	40021000 	.word	0x40021000
 80014fc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001500:	4b09      	ldr	r3, [pc, #36]	; (8001528 <HAL_RCC_OscConfig+0x7b0>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d1ec      	bne.n	80014e6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800150c:	4b06      	ldr	r3, [pc, #24]	; (8001528 <HAL_RCC_OscConfig+0x7b0>)
 800150e:	68da      	ldr	r2, [r3, #12]
 8001510:	4905      	ldr	r1, [pc, #20]	; (8001528 <HAL_RCC_OscConfig+0x7b0>)
 8001512:	4b06      	ldr	r3, [pc, #24]	; (800152c <HAL_RCC_OscConfig+0x7b4>)
 8001514:	4013      	ands	r3, r2
 8001516:	60cb      	str	r3, [r1, #12]
 8001518:	e001      	b.n	800151e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e000      	b.n	8001520 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800151e:	2300      	movs	r3, #0
}
 8001520:	4618      	mov	r0, r3
 8001522:	3720      	adds	r7, #32
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40021000 	.word	0x40021000
 800152c:	feeefffc 	.word	0xfeeefffc

08001530 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d101      	bne.n	8001544 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	e0e7      	b.n	8001714 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001544:	4b75      	ldr	r3, [pc, #468]	; (800171c <HAL_RCC_ClockConfig+0x1ec>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 0307 	and.w	r3, r3, #7
 800154c:	683a      	ldr	r2, [r7, #0]
 800154e:	429a      	cmp	r2, r3
 8001550:	d910      	bls.n	8001574 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001552:	4b72      	ldr	r3, [pc, #456]	; (800171c <HAL_RCC_ClockConfig+0x1ec>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f023 0207 	bic.w	r2, r3, #7
 800155a:	4970      	ldr	r1, [pc, #448]	; (800171c <HAL_RCC_ClockConfig+0x1ec>)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	4313      	orrs	r3, r2
 8001560:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001562:	4b6e      	ldr	r3, [pc, #440]	; (800171c <HAL_RCC_ClockConfig+0x1ec>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0307 	and.w	r3, r3, #7
 800156a:	683a      	ldr	r2, [r7, #0]
 800156c:	429a      	cmp	r2, r3
 800156e:	d001      	beq.n	8001574 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e0cf      	b.n	8001714 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0302 	and.w	r3, r3, #2
 800157c:	2b00      	cmp	r3, #0
 800157e:	d010      	beq.n	80015a2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689a      	ldr	r2, [r3, #8]
 8001584:	4b66      	ldr	r3, [pc, #408]	; (8001720 <HAL_RCC_ClockConfig+0x1f0>)
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800158c:	429a      	cmp	r2, r3
 800158e:	d908      	bls.n	80015a2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001590:	4b63      	ldr	r3, [pc, #396]	; (8001720 <HAL_RCC_ClockConfig+0x1f0>)
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	4960      	ldr	r1, [pc, #384]	; (8001720 <HAL_RCC_ClockConfig+0x1f0>)
 800159e:	4313      	orrs	r3, r2
 80015a0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d04c      	beq.n	8001648 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	2b03      	cmp	r3, #3
 80015b4:	d107      	bne.n	80015c6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015b6:	4b5a      	ldr	r3, [pc, #360]	; (8001720 <HAL_RCC_ClockConfig+0x1f0>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d121      	bne.n	8001606 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e0a6      	b.n	8001714 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d107      	bne.n	80015de <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015ce:	4b54      	ldr	r3, [pc, #336]	; (8001720 <HAL_RCC_ClockConfig+0x1f0>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d115      	bne.n	8001606 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e09a      	b.n	8001714 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d107      	bne.n	80015f6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015e6:	4b4e      	ldr	r3, [pc, #312]	; (8001720 <HAL_RCC_ClockConfig+0x1f0>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d109      	bne.n	8001606 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e08e      	b.n	8001714 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015f6:	4b4a      	ldr	r3, [pc, #296]	; (8001720 <HAL_RCC_ClockConfig+0x1f0>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d101      	bne.n	8001606 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e086      	b.n	8001714 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001606:	4b46      	ldr	r3, [pc, #280]	; (8001720 <HAL_RCC_ClockConfig+0x1f0>)
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	f023 0203 	bic.w	r2, r3, #3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	4943      	ldr	r1, [pc, #268]	; (8001720 <HAL_RCC_ClockConfig+0x1f0>)
 8001614:	4313      	orrs	r3, r2
 8001616:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001618:	f7ff f850 	bl	80006bc <HAL_GetTick>
 800161c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800161e:	e00a      	b.n	8001636 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001620:	f7ff f84c 	bl	80006bc <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	f241 3288 	movw	r2, #5000	; 0x1388
 800162e:	4293      	cmp	r3, r2
 8001630:	d901      	bls.n	8001636 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e06e      	b.n	8001714 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001636:	4b3a      	ldr	r3, [pc, #232]	; (8001720 <HAL_RCC_ClockConfig+0x1f0>)
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	f003 020c 	and.w	r2, r3, #12
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	429a      	cmp	r2, r3
 8001646:	d1eb      	bne.n	8001620 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0302 	and.w	r3, r3, #2
 8001650:	2b00      	cmp	r3, #0
 8001652:	d010      	beq.n	8001676 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	689a      	ldr	r2, [r3, #8]
 8001658:	4b31      	ldr	r3, [pc, #196]	; (8001720 <HAL_RCC_ClockConfig+0x1f0>)
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001660:	429a      	cmp	r2, r3
 8001662:	d208      	bcs.n	8001676 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001664:	4b2e      	ldr	r3, [pc, #184]	; (8001720 <HAL_RCC_ClockConfig+0x1f0>)
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	492b      	ldr	r1, [pc, #172]	; (8001720 <HAL_RCC_ClockConfig+0x1f0>)
 8001672:	4313      	orrs	r3, r2
 8001674:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001676:	4b29      	ldr	r3, [pc, #164]	; (800171c <HAL_RCC_ClockConfig+0x1ec>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0307 	and.w	r3, r3, #7
 800167e:	683a      	ldr	r2, [r7, #0]
 8001680:	429a      	cmp	r2, r3
 8001682:	d210      	bcs.n	80016a6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001684:	4b25      	ldr	r3, [pc, #148]	; (800171c <HAL_RCC_ClockConfig+0x1ec>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f023 0207 	bic.w	r2, r3, #7
 800168c:	4923      	ldr	r1, [pc, #140]	; (800171c <HAL_RCC_ClockConfig+0x1ec>)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	4313      	orrs	r3, r2
 8001692:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001694:	4b21      	ldr	r3, [pc, #132]	; (800171c <HAL_RCC_ClockConfig+0x1ec>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0307 	and.w	r3, r3, #7
 800169c:	683a      	ldr	r2, [r7, #0]
 800169e:	429a      	cmp	r2, r3
 80016a0:	d001      	beq.n	80016a6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e036      	b.n	8001714 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0304 	and.w	r3, r3, #4
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d008      	beq.n	80016c4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016b2:	4b1b      	ldr	r3, [pc, #108]	; (8001720 <HAL_RCC_ClockConfig+0x1f0>)
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	4918      	ldr	r1, [pc, #96]	; (8001720 <HAL_RCC_ClockConfig+0x1f0>)
 80016c0:	4313      	orrs	r3, r2
 80016c2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0308 	and.w	r3, r3, #8
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d009      	beq.n	80016e4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016d0:	4b13      	ldr	r3, [pc, #76]	; (8001720 <HAL_RCC_ClockConfig+0x1f0>)
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	691b      	ldr	r3, [r3, #16]
 80016dc:	00db      	lsls	r3, r3, #3
 80016de:	4910      	ldr	r1, [pc, #64]	; (8001720 <HAL_RCC_ClockConfig+0x1f0>)
 80016e0:	4313      	orrs	r3, r2
 80016e2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016e4:	f000 f824 	bl	8001730 <HAL_RCC_GetSysClockFreq>
 80016e8:	4602      	mov	r2, r0
 80016ea:	4b0d      	ldr	r3, [pc, #52]	; (8001720 <HAL_RCC_ClockConfig+0x1f0>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	091b      	lsrs	r3, r3, #4
 80016f0:	f003 030f 	and.w	r3, r3, #15
 80016f4:	490b      	ldr	r1, [pc, #44]	; (8001724 <HAL_RCC_ClockConfig+0x1f4>)
 80016f6:	5ccb      	ldrb	r3, [r1, r3]
 80016f8:	f003 031f 	and.w	r3, r3, #31
 80016fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001700:	4a09      	ldr	r2, [pc, #36]	; (8001728 <HAL_RCC_ClockConfig+0x1f8>)
 8001702:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001704:	4b09      	ldr	r3, [pc, #36]	; (800172c <HAL_RCC_ClockConfig+0x1fc>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4618      	mov	r0, r3
 800170a:	f7fe ff87 	bl	800061c <HAL_InitTick>
 800170e:	4603      	mov	r3, r0
 8001710:	72fb      	strb	r3, [r7, #11]

  return status;
 8001712:	7afb      	ldrb	r3, [r7, #11]
}
 8001714:	4618      	mov	r0, r3
 8001716:	3710      	adds	r7, #16
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	40022000 	.word	0x40022000
 8001720:	40021000 	.word	0x40021000
 8001724:	08002c6c 	.word	0x08002c6c
 8001728:	20000000 	.word	0x20000000
 800172c:	20000004 	.word	0x20000004

08001730 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001730:	b480      	push	{r7}
 8001732:	b089      	sub	sp, #36	; 0x24
 8001734:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001736:	2300      	movs	r3, #0
 8001738:	61fb      	str	r3, [r7, #28]
 800173a:	2300      	movs	r3, #0
 800173c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800173e:	4b3e      	ldr	r3, [pc, #248]	; (8001838 <HAL_RCC_GetSysClockFreq+0x108>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	f003 030c 	and.w	r3, r3, #12
 8001746:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001748:	4b3b      	ldr	r3, [pc, #236]	; (8001838 <HAL_RCC_GetSysClockFreq+0x108>)
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	f003 0303 	and.w	r3, r3, #3
 8001750:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d005      	beq.n	8001764 <HAL_RCC_GetSysClockFreq+0x34>
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	2b0c      	cmp	r3, #12
 800175c:	d121      	bne.n	80017a2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d11e      	bne.n	80017a2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001764:	4b34      	ldr	r3, [pc, #208]	; (8001838 <HAL_RCC_GetSysClockFreq+0x108>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0308 	and.w	r3, r3, #8
 800176c:	2b00      	cmp	r3, #0
 800176e:	d107      	bne.n	8001780 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001770:	4b31      	ldr	r3, [pc, #196]	; (8001838 <HAL_RCC_GetSysClockFreq+0x108>)
 8001772:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001776:	0a1b      	lsrs	r3, r3, #8
 8001778:	f003 030f 	and.w	r3, r3, #15
 800177c:	61fb      	str	r3, [r7, #28]
 800177e:	e005      	b.n	800178c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001780:	4b2d      	ldr	r3, [pc, #180]	; (8001838 <HAL_RCC_GetSysClockFreq+0x108>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	091b      	lsrs	r3, r3, #4
 8001786:	f003 030f 	and.w	r3, r3, #15
 800178a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800178c:	4a2b      	ldr	r2, [pc, #172]	; (800183c <HAL_RCC_GetSysClockFreq+0x10c>)
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001794:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d10d      	bne.n	80017b8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017a0:	e00a      	b.n	80017b8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	2b04      	cmp	r3, #4
 80017a6:	d102      	bne.n	80017ae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80017a8:	4b25      	ldr	r3, [pc, #148]	; (8001840 <HAL_RCC_GetSysClockFreq+0x110>)
 80017aa:	61bb      	str	r3, [r7, #24]
 80017ac:	e004      	b.n	80017b8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	2b08      	cmp	r3, #8
 80017b2:	d101      	bne.n	80017b8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80017b4:	4b23      	ldr	r3, [pc, #140]	; (8001844 <HAL_RCC_GetSysClockFreq+0x114>)
 80017b6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	2b0c      	cmp	r3, #12
 80017bc:	d134      	bne.n	8001828 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80017be:	4b1e      	ldr	r3, [pc, #120]	; (8001838 <HAL_RCC_GetSysClockFreq+0x108>)
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	f003 0303 	and.w	r3, r3, #3
 80017c6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d003      	beq.n	80017d6 <HAL_RCC_GetSysClockFreq+0xa6>
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	2b03      	cmp	r3, #3
 80017d2:	d003      	beq.n	80017dc <HAL_RCC_GetSysClockFreq+0xac>
 80017d4:	e005      	b.n	80017e2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80017d6:	4b1a      	ldr	r3, [pc, #104]	; (8001840 <HAL_RCC_GetSysClockFreq+0x110>)
 80017d8:	617b      	str	r3, [r7, #20]
      break;
 80017da:	e005      	b.n	80017e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80017dc:	4b19      	ldr	r3, [pc, #100]	; (8001844 <HAL_RCC_GetSysClockFreq+0x114>)
 80017de:	617b      	str	r3, [r7, #20]
      break;
 80017e0:	e002      	b.n	80017e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	617b      	str	r3, [r7, #20]
      break;
 80017e6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80017e8:	4b13      	ldr	r3, [pc, #76]	; (8001838 <HAL_RCC_GetSysClockFreq+0x108>)
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	091b      	lsrs	r3, r3, #4
 80017ee:	f003 0307 	and.w	r3, r3, #7
 80017f2:	3301      	adds	r3, #1
 80017f4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80017f6:	4b10      	ldr	r3, [pc, #64]	; (8001838 <HAL_RCC_GetSysClockFreq+0x108>)
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	0a1b      	lsrs	r3, r3, #8
 80017fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001800:	697a      	ldr	r2, [r7, #20]
 8001802:	fb03 f202 	mul.w	r2, r3, r2
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	fbb2 f3f3 	udiv	r3, r2, r3
 800180c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800180e:	4b0a      	ldr	r3, [pc, #40]	; (8001838 <HAL_RCC_GetSysClockFreq+0x108>)
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	0e5b      	lsrs	r3, r3, #25
 8001814:	f003 0303 	and.w	r3, r3, #3
 8001818:	3301      	adds	r3, #1
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800181e:	697a      	ldr	r2, [r7, #20]
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	fbb2 f3f3 	udiv	r3, r2, r3
 8001826:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001828:	69bb      	ldr	r3, [r7, #24]
}
 800182a:	4618      	mov	r0, r3
 800182c:	3724      	adds	r7, #36	; 0x24
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	40021000 	.word	0x40021000
 800183c:	08002c7c 	.word	0x08002c7c
 8001840:	00f42400 	.word	0x00f42400
 8001844:	007a1200 	.word	0x007a1200

08001848 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001850:	2300      	movs	r3, #0
 8001852:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001854:	4b2a      	ldr	r3, [pc, #168]	; (8001900 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d003      	beq.n	8001868 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001860:	f7ff fa26 	bl	8000cb0 <HAL_PWREx_GetVoltageRange>
 8001864:	6178      	str	r0, [r7, #20]
 8001866:	e014      	b.n	8001892 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001868:	4b25      	ldr	r3, [pc, #148]	; (8001900 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800186a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800186c:	4a24      	ldr	r2, [pc, #144]	; (8001900 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800186e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001872:	6593      	str	r3, [r2, #88]	; 0x58
 8001874:	4b22      	ldr	r3, [pc, #136]	; (8001900 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001880:	f7ff fa16 	bl	8000cb0 <HAL_PWREx_GetVoltageRange>
 8001884:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001886:	4b1e      	ldr	r3, [pc, #120]	; (8001900 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800188a:	4a1d      	ldr	r2, [pc, #116]	; (8001900 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800188c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001890:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001898:	d10b      	bne.n	80018b2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2b80      	cmp	r3, #128	; 0x80
 800189e:	d919      	bls.n	80018d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2ba0      	cmp	r3, #160	; 0xa0
 80018a4:	d902      	bls.n	80018ac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80018a6:	2302      	movs	r3, #2
 80018a8:	613b      	str	r3, [r7, #16]
 80018aa:	e013      	b.n	80018d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80018ac:	2301      	movs	r3, #1
 80018ae:	613b      	str	r3, [r7, #16]
 80018b0:	e010      	b.n	80018d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2b80      	cmp	r3, #128	; 0x80
 80018b6:	d902      	bls.n	80018be <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80018b8:	2303      	movs	r3, #3
 80018ba:	613b      	str	r3, [r7, #16]
 80018bc:	e00a      	b.n	80018d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2b80      	cmp	r3, #128	; 0x80
 80018c2:	d102      	bne.n	80018ca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80018c4:	2302      	movs	r3, #2
 80018c6:	613b      	str	r3, [r7, #16]
 80018c8:	e004      	b.n	80018d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2b70      	cmp	r3, #112	; 0x70
 80018ce:	d101      	bne.n	80018d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80018d0:	2301      	movs	r3, #1
 80018d2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80018d4:	4b0b      	ldr	r3, [pc, #44]	; (8001904 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f023 0207 	bic.w	r2, r3, #7
 80018dc:	4909      	ldr	r1, [pc, #36]	; (8001904 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80018e4:	4b07      	ldr	r3, [pc, #28]	; (8001904 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0307 	and.w	r3, r3, #7
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d001      	beq.n	80018f6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e000      	b.n	80018f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80018f6:	2300      	movs	r3, #0
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3718      	adds	r7, #24
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	40021000 	.word	0x40021000
 8001904:	40022000 	.word	0x40022000

08001908 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001910:	2300      	movs	r3, #0
 8001912:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001914:	2300      	movs	r3, #0
 8001916:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001920:	2b00      	cmp	r3, #0
 8001922:	d041      	beq.n	80019a8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001928:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800192c:	d02a      	beq.n	8001984 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800192e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001932:	d824      	bhi.n	800197e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001934:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001938:	d008      	beq.n	800194c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800193a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800193e:	d81e      	bhi.n	800197e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001940:	2b00      	cmp	r3, #0
 8001942:	d00a      	beq.n	800195a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001944:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001948:	d010      	beq.n	800196c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800194a:	e018      	b.n	800197e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800194c:	4b86      	ldr	r3, [pc, #536]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	4a85      	ldr	r2, [pc, #532]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001952:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001956:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001958:	e015      	b.n	8001986 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	3304      	adds	r3, #4
 800195e:	2100      	movs	r1, #0
 8001960:	4618      	mov	r0, r3
 8001962:	f000 fabb 	bl	8001edc <RCCEx_PLLSAI1_Config>
 8001966:	4603      	mov	r3, r0
 8001968:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800196a:	e00c      	b.n	8001986 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	3320      	adds	r3, #32
 8001970:	2100      	movs	r1, #0
 8001972:	4618      	mov	r0, r3
 8001974:	f000 fba6 	bl	80020c4 <RCCEx_PLLSAI2_Config>
 8001978:	4603      	mov	r3, r0
 800197a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800197c:	e003      	b.n	8001986 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	74fb      	strb	r3, [r7, #19]
      break;
 8001982:	e000      	b.n	8001986 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001984:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001986:	7cfb      	ldrb	r3, [r7, #19]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d10b      	bne.n	80019a4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800198c:	4b76      	ldr	r3, [pc, #472]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800198e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001992:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800199a:	4973      	ldr	r1, [pc, #460]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800199c:	4313      	orrs	r3, r2
 800199e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80019a2:	e001      	b.n	80019a8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80019a4:	7cfb      	ldrb	r3, [r7, #19]
 80019a6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d041      	beq.n	8001a38 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80019b8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80019bc:	d02a      	beq.n	8001a14 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80019be:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80019c2:	d824      	bhi.n	8001a0e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80019c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80019c8:	d008      	beq.n	80019dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80019ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80019ce:	d81e      	bhi.n	8001a0e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d00a      	beq.n	80019ea <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80019d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019d8:	d010      	beq.n	80019fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80019da:	e018      	b.n	8001a0e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80019dc:	4b62      	ldr	r3, [pc, #392]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	4a61      	ldr	r2, [pc, #388]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80019e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80019e8:	e015      	b.n	8001a16 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	3304      	adds	r3, #4
 80019ee:	2100      	movs	r1, #0
 80019f0:	4618      	mov	r0, r3
 80019f2:	f000 fa73 	bl	8001edc <RCCEx_PLLSAI1_Config>
 80019f6:	4603      	mov	r3, r0
 80019f8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80019fa:	e00c      	b.n	8001a16 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	3320      	adds	r3, #32
 8001a00:	2100      	movs	r1, #0
 8001a02:	4618      	mov	r0, r3
 8001a04:	f000 fb5e 	bl	80020c4 <RCCEx_PLLSAI2_Config>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001a0c:	e003      	b.n	8001a16 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	74fb      	strb	r3, [r7, #19]
      break;
 8001a12:	e000      	b.n	8001a16 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001a14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001a16:	7cfb      	ldrb	r3, [r7, #19]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d10b      	bne.n	8001a34 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001a1c:	4b52      	ldr	r3, [pc, #328]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a22:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001a2a:	494f      	ldr	r1, [pc, #316]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001a32:	e001      	b.n	8001a38 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001a34:	7cfb      	ldrb	r3, [r7, #19]
 8001a36:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	f000 80a0 	beq.w	8001b86 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a46:	2300      	movs	r3, #0
 8001a48:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001a4a:	4b47      	ldr	r3, [pc, #284]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d101      	bne.n	8001a5a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001a56:	2301      	movs	r3, #1
 8001a58:	e000      	b.n	8001a5c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d00d      	beq.n	8001a7c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a60:	4b41      	ldr	r3, [pc, #260]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a64:	4a40      	ldr	r2, [pc, #256]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001a66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a6a:	6593      	str	r3, [r2, #88]	; 0x58
 8001a6c:	4b3e      	ldr	r3, [pc, #248]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a74:	60bb      	str	r3, [r7, #8]
 8001a76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a7c:	4b3b      	ldr	r3, [pc, #236]	; (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a3a      	ldr	r2, [pc, #232]	; (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001a82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a86:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001a88:	f7fe fe18 	bl	80006bc <HAL_GetTick>
 8001a8c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001a8e:	e009      	b.n	8001aa4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a90:	f7fe fe14 	bl	80006bc <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d902      	bls.n	8001aa4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	74fb      	strb	r3, [r7, #19]
        break;
 8001aa2:	e005      	b.n	8001ab0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001aa4:	4b31      	ldr	r3, [pc, #196]	; (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d0ef      	beq.n	8001a90 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001ab0:	7cfb      	ldrb	r3, [r7, #19]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d15c      	bne.n	8001b70 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001ab6:	4b2c      	ldr	r3, [pc, #176]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001abc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ac0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d01f      	beq.n	8001b08 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ace:	697a      	ldr	r2, [r7, #20]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d019      	beq.n	8001b08 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001ad4:	4b24      	ldr	r3, [pc, #144]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ada:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ade:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001ae0:	4b21      	ldr	r3, [pc, #132]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ae6:	4a20      	ldr	r2, [pc, #128]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ae8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001af0:	4b1d      	ldr	r3, [pc, #116]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001af6:	4a1c      	ldr	r2, [pc, #112]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001af8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001afc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001b00:	4a19      	ldr	r2, [pc, #100]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d016      	beq.n	8001b40 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b12:	f7fe fdd3 	bl	80006bc <HAL_GetTick>
 8001b16:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b18:	e00b      	b.n	8001b32 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b1a:	f7fe fdcf 	bl	80006bc <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d902      	bls.n	8001b32 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	74fb      	strb	r3, [r7, #19]
            break;
 8001b30:	e006      	b.n	8001b40 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b32:	4b0d      	ldr	r3, [pc, #52]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b38:	f003 0302 	and.w	r3, r3, #2
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d0ec      	beq.n	8001b1a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001b40:	7cfb      	ldrb	r3, [r7, #19]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d10c      	bne.n	8001b60 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b46:	4b08      	ldr	r3, [pc, #32]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b56:	4904      	ldr	r1, [pc, #16]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001b5e:	e009      	b.n	8001b74 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001b60:	7cfb      	ldrb	r3, [r7, #19]
 8001b62:	74bb      	strb	r3, [r7, #18]
 8001b64:	e006      	b.n	8001b74 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8001b66:	bf00      	nop
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001b70:	7cfb      	ldrb	r3, [r7, #19]
 8001b72:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b74:	7c7b      	ldrb	r3, [r7, #17]
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d105      	bne.n	8001b86 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b7a:	4b9e      	ldr	r3, [pc, #632]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b7e:	4a9d      	ldr	r2, [pc, #628]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001b80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b84:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d00a      	beq.n	8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001b92:	4b98      	ldr	r3, [pc, #608]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b98:	f023 0203 	bic.w	r2, r3, #3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ba0:	4994      	ldr	r1, [pc, #592]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0302 	and.w	r3, r3, #2
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d00a      	beq.n	8001bca <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001bb4:	4b8f      	ldr	r3, [pc, #572]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bba:	f023 020c 	bic.w	r2, r3, #12
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bc2:	498c      	ldr	r1, [pc, #560]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0304 	and.w	r3, r3, #4
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d00a      	beq.n	8001bec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001bd6:	4b87      	ldr	r3, [pc, #540]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bdc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be4:	4983      	ldr	r1, [pc, #524]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001be6:	4313      	orrs	r3, r2
 8001be8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0308 	and.w	r3, r3, #8
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d00a      	beq.n	8001c0e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001bf8:	4b7e      	ldr	r3, [pc, #504]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bfe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c06:	497b      	ldr	r1, [pc, #492]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0310 	and.w	r3, r3, #16
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d00a      	beq.n	8001c30 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001c1a:	4b76      	ldr	r3, [pc, #472]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c28:	4972      	ldr	r1, [pc, #456]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0320 	and.w	r3, r3, #32
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d00a      	beq.n	8001c52 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001c3c:	4b6d      	ldr	r3, [pc, #436]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c42:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c4a:	496a      	ldr	r1, [pc, #424]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d00a      	beq.n	8001c74 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001c5e:	4b65      	ldr	r3, [pc, #404]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c64:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c6c:	4961      	ldr	r1, [pc, #388]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d00a      	beq.n	8001c96 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001c80:	4b5c      	ldr	r3, [pc, #368]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c86:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c8e:	4959      	ldr	r1, [pc, #356]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c90:	4313      	orrs	r3, r2
 8001c92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d00a      	beq.n	8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ca2:	4b54      	ldr	r3, [pc, #336]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ca8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cb0:	4950      	ldr	r1, [pc, #320]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d00a      	beq.n	8001cda <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001cc4:	4b4b      	ldr	r3, [pc, #300]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cca:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cd2:	4948      	ldr	r1, [pc, #288]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d00a      	beq.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001ce6:	4b43      	ldr	r3, [pc, #268]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf4:	493f      	ldr	r1, [pc, #252]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d028      	beq.n	8001d5a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001d08:	4b3a      	ldr	r3, [pc, #232]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d0e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d16:	4937      	ldr	r1, [pc, #220]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001d26:	d106      	bne.n	8001d36 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001d28:	4b32      	ldr	r3, [pc, #200]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	4a31      	ldr	r2, [pc, #196]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d32:	60d3      	str	r3, [r2, #12]
 8001d34:	e011      	b.n	8001d5a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d3a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001d3e:	d10c      	bne.n	8001d5a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	3304      	adds	r3, #4
 8001d44:	2101      	movs	r1, #1
 8001d46:	4618      	mov	r0, r3
 8001d48:	f000 f8c8 	bl	8001edc <RCCEx_PLLSAI1_Config>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8001d50:	7cfb      	ldrb	r3, [r7, #19]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8001d56:	7cfb      	ldrb	r3, [r7, #19]
 8001d58:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d028      	beq.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001d66:	4b23      	ldr	r3, [pc, #140]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d6c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d74:	491f      	ldr	r1, [pc, #124]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001d84:	d106      	bne.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001d86:	4b1b      	ldr	r3, [pc, #108]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	4a1a      	ldr	r2, [pc, #104]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d90:	60d3      	str	r3, [r2, #12]
 8001d92:	e011      	b.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001d9c:	d10c      	bne.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	3304      	adds	r3, #4
 8001da2:	2101      	movs	r1, #1
 8001da4:	4618      	mov	r0, r3
 8001da6:	f000 f899 	bl	8001edc <RCCEx_PLLSAI1_Config>
 8001daa:	4603      	mov	r3, r0
 8001dac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001dae:	7cfb      	ldrb	r3, [r7, #19]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8001db4:	7cfb      	ldrb	r3, [r7, #19]
 8001db6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d02b      	beq.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001dc4:	4b0b      	ldr	r3, [pc, #44]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dd2:	4908      	ldr	r1, [pc, #32]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dde:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001de2:	d109      	bne.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001de4:	4b03      	ldr	r3, [pc, #12]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	4a02      	ldr	r2, [pc, #8]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001dea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001dee:	60d3      	str	r3, [r2, #12]
 8001df0:	e014      	b.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8001df2:	bf00      	nop
 8001df4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dfc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001e00:	d10c      	bne.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	3304      	adds	r3, #4
 8001e06:	2101      	movs	r1, #1
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f000 f867 	bl	8001edc <RCCEx_PLLSAI1_Config>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001e12:	7cfb      	ldrb	r3, [r7, #19]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8001e18:	7cfb      	ldrb	r3, [r7, #19]
 8001e1a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d02f      	beq.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001e28:	4b2b      	ldr	r3, [pc, #172]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8001e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e2e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001e36:	4928      	ldr	r1, [pc, #160]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001e42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001e46:	d10d      	bne.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3304      	adds	r3, #4
 8001e4c:	2102      	movs	r1, #2
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f000 f844 	bl	8001edc <RCCEx_PLLSAI1_Config>
 8001e54:	4603      	mov	r3, r0
 8001e56:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001e58:	7cfb      	ldrb	r3, [r7, #19]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d014      	beq.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8001e5e:	7cfb      	ldrb	r3, [r7, #19]
 8001e60:	74bb      	strb	r3, [r7, #18]
 8001e62:	e011      	b.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001e68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e6c:	d10c      	bne.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	3320      	adds	r3, #32
 8001e72:	2102      	movs	r1, #2
 8001e74:	4618      	mov	r0, r3
 8001e76:	f000 f925 	bl	80020c4 <RCCEx_PLLSAI2_Config>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001e7e:	7cfb      	ldrb	r3, [r7, #19]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8001e84:	7cfb      	ldrb	r3, [r7, #19]
 8001e86:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d00a      	beq.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001e94:	4b10      	ldr	r3, [pc, #64]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8001e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e9a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001ea2:	490d      	ldr	r1, [pc, #52]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d00b      	beq.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001eb6:	4b08      	ldr	r3, [pc, #32]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8001eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ebc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ec6:	4904      	ldr	r1, [pc, #16]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8001ece:	7cbb      	ldrb	r3, [r7, #18]
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3718      	adds	r7, #24
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40021000 	.word	0x40021000

08001edc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001eea:	4b75      	ldr	r3, [pc, #468]	; (80020c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	f003 0303 	and.w	r3, r3, #3
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d018      	beq.n	8001f28 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001ef6:	4b72      	ldr	r3, [pc, #456]	; (80020c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	f003 0203 	and.w	r2, r3, #3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d10d      	bne.n	8001f22 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
       ||
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d009      	beq.n	8001f22 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001f0e:	4b6c      	ldr	r3, [pc, #432]	; (80020c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	091b      	lsrs	r3, r3, #4
 8001f14:	f003 0307 	and.w	r3, r3, #7
 8001f18:	1c5a      	adds	r2, r3, #1
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
       ||
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d047      	beq.n	8001fb2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	73fb      	strb	r3, [r7, #15]
 8001f26:	e044      	b.n	8001fb2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2b03      	cmp	r3, #3
 8001f2e:	d018      	beq.n	8001f62 <RCCEx_PLLSAI1_Config+0x86>
 8001f30:	2b03      	cmp	r3, #3
 8001f32:	d825      	bhi.n	8001f80 <RCCEx_PLLSAI1_Config+0xa4>
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d002      	beq.n	8001f3e <RCCEx_PLLSAI1_Config+0x62>
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d009      	beq.n	8001f50 <RCCEx_PLLSAI1_Config+0x74>
 8001f3c:	e020      	b.n	8001f80 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001f3e:	4b60      	ldr	r3, [pc, #384]	; (80020c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d11d      	bne.n	8001f86 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f4e:	e01a      	b.n	8001f86 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001f50:	4b5b      	ldr	r3, [pc, #364]	; (80020c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d116      	bne.n	8001f8a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f60:	e013      	b.n	8001f8a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001f62:	4b57      	ldr	r3, [pc, #348]	; (80020c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d10f      	bne.n	8001f8e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001f6e:	4b54      	ldr	r3, [pc, #336]	; (80020c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d109      	bne.n	8001f8e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8001f7e:	e006      	b.n	8001f8e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	73fb      	strb	r3, [r7, #15]
      break;
 8001f84:	e004      	b.n	8001f90 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8001f86:	bf00      	nop
 8001f88:	e002      	b.n	8001f90 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8001f8a:	bf00      	nop
 8001f8c:	e000      	b.n	8001f90 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8001f8e:	bf00      	nop
    }

    if(status == HAL_OK)
 8001f90:	7bfb      	ldrb	r3, [r7, #15]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d10d      	bne.n	8001fb2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001f96:	4b4a      	ldr	r3, [pc, #296]	; (80020c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6819      	ldr	r1, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	011b      	lsls	r3, r3, #4
 8001faa:	430b      	orrs	r3, r1
 8001fac:	4944      	ldr	r1, [pc, #272]	; (80020c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8001fb2:	7bfb      	ldrb	r3, [r7, #15]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d17d      	bne.n	80020b4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8001fb8:	4b41      	ldr	r3, [pc, #260]	; (80020c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a40      	ldr	r2, [pc, #256]	; (80020c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001fbe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001fc2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fc4:	f7fe fb7a 	bl	80006bc <HAL_GetTick>
 8001fc8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001fca:	e009      	b.n	8001fe0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001fcc:	f7fe fb76 	bl	80006bc <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d902      	bls.n	8001fe0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	73fb      	strb	r3, [r7, #15]
        break;
 8001fde:	e005      	b.n	8001fec <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001fe0:	4b37      	ldr	r3, [pc, #220]	; (80020c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d1ef      	bne.n	8001fcc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8001fec:	7bfb      	ldrb	r3, [r7, #15]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d160      	bne.n	80020b4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d111      	bne.n	800201c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001ff8:	4b31      	ldr	r3, [pc, #196]	; (80020c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001ffa:	691b      	ldr	r3, [r3, #16]
 8001ffc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002000:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	6892      	ldr	r2, [r2, #8]
 8002008:	0211      	lsls	r1, r2, #8
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	68d2      	ldr	r2, [r2, #12]
 800200e:	0912      	lsrs	r2, r2, #4
 8002010:	0452      	lsls	r2, r2, #17
 8002012:	430a      	orrs	r2, r1
 8002014:	492a      	ldr	r1, [pc, #168]	; (80020c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002016:	4313      	orrs	r3, r2
 8002018:	610b      	str	r3, [r1, #16]
 800201a:	e027      	b.n	800206c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d112      	bne.n	8002048 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002022:	4b27      	ldr	r3, [pc, #156]	; (80020c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800202a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	6892      	ldr	r2, [r2, #8]
 8002032:	0211      	lsls	r1, r2, #8
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	6912      	ldr	r2, [r2, #16]
 8002038:	0852      	lsrs	r2, r2, #1
 800203a:	3a01      	subs	r2, #1
 800203c:	0552      	lsls	r2, r2, #21
 800203e:	430a      	orrs	r2, r1
 8002040:	491f      	ldr	r1, [pc, #124]	; (80020c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002042:	4313      	orrs	r3, r2
 8002044:	610b      	str	r3, [r1, #16]
 8002046:	e011      	b.n	800206c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002048:	4b1d      	ldr	r3, [pc, #116]	; (80020c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800204a:	691b      	ldr	r3, [r3, #16]
 800204c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002050:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	6892      	ldr	r2, [r2, #8]
 8002058:	0211      	lsls	r1, r2, #8
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	6952      	ldr	r2, [r2, #20]
 800205e:	0852      	lsrs	r2, r2, #1
 8002060:	3a01      	subs	r2, #1
 8002062:	0652      	lsls	r2, r2, #25
 8002064:	430a      	orrs	r2, r1
 8002066:	4916      	ldr	r1, [pc, #88]	; (80020c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002068:	4313      	orrs	r3, r2
 800206a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800206c:	4b14      	ldr	r3, [pc, #80]	; (80020c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a13      	ldr	r2, [pc, #76]	; (80020c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002072:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002076:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002078:	f7fe fb20 	bl	80006bc <HAL_GetTick>
 800207c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800207e:	e009      	b.n	8002094 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002080:	f7fe fb1c 	bl	80006bc <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d902      	bls.n	8002094 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	73fb      	strb	r3, [r7, #15]
          break;
 8002092:	e005      	b.n	80020a0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002094:	4b0a      	ldr	r3, [pc, #40]	; (80020c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d0ef      	beq.n	8002080 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80020a0:	7bfb      	ldrb	r3, [r7, #15]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d106      	bne.n	80020b4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80020a6:	4b06      	ldr	r3, [pc, #24]	; (80020c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80020a8:	691a      	ldr	r2, [r3, #16]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	699b      	ldr	r3, [r3, #24]
 80020ae:	4904      	ldr	r1, [pc, #16]	; (80020c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80020b0:	4313      	orrs	r3, r2
 80020b2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80020b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3710      	adds	r7, #16
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	40021000 	.word	0x40021000

080020c4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80020ce:	2300      	movs	r3, #0
 80020d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80020d2:	4b6a      	ldr	r3, [pc, #424]	; (800227c <RCCEx_PLLSAI2_Config+0x1b8>)
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	f003 0303 	and.w	r3, r3, #3
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d018      	beq.n	8002110 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80020de:	4b67      	ldr	r3, [pc, #412]	; (800227c <RCCEx_PLLSAI2_Config+0x1b8>)
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	f003 0203 	and.w	r2, r3, #3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d10d      	bne.n	800210a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
       ||
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d009      	beq.n	800210a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80020f6:	4b61      	ldr	r3, [pc, #388]	; (800227c <RCCEx_PLLSAI2_Config+0x1b8>)
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	091b      	lsrs	r3, r3, #4
 80020fc:	f003 0307 	and.w	r3, r3, #7
 8002100:	1c5a      	adds	r2, r3, #1
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
       ||
 8002106:	429a      	cmp	r2, r3
 8002108:	d047      	beq.n	800219a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	73fb      	strb	r3, [r7, #15]
 800210e:	e044      	b.n	800219a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2b03      	cmp	r3, #3
 8002116:	d018      	beq.n	800214a <RCCEx_PLLSAI2_Config+0x86>
 8002118:	2b03      	cmp	r3, #3
 800211a:	d825      	bhi.n	8002168 <RCCEx_PLLSAI2_Config+0xa4>
 800211c:	2b01      	cmp	r3, #1
 800211e:	d002      	beq.n	8002126 <RCCEx_PLLSAI2_Config+0x62>
 8002120:	2b02      	cmp	r3, #2
 8002122:	d009      	beq.n	8002138 <RCCEx_PLLSAI2_Config+0x74>
 8002124:	e020      	b.n	8002168 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002126:	4b55      	ldr	r3, [pc, #340]	; (800227c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d11d      	bne.n	800216e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002136:	e01a      	b.n	800216e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002138:	4b50      	ldr	r3, [pc, #320]	; (800227c <RCCEx_PLLSAI2_Config+0x1b8>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002140:	2b00      	cmp	r3, #0
 8002142:	d116      	bne.n	8002172 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002148:	e013      	b.n	8002172 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800214a:	4b4c      	ldr	r3, [pc, #304]	; (800227c <RCCEx_PLLSAI2_Config+0x1b8>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d10f      	bne.n	8002176 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002156:	4b49      	ldr	r3, [pc, #292]	; (800227c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d109      	bne.n	8002176 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002166:	e006      	b.n	8002176 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	73fb      	strb	r3, [r7, #15]
      break;
 800216c:	e004      	b.n	8002178 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800216e:	bf00      	nop
 8002170:	e002      	b.n	8002178 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002172:	bf00      	nop
 8002174:	e000      	b.n	8002178 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002176:	bf00      	nop
    }

    if(status == HAL_OK)
 8002178:	7bfb      	ldrb	r3, [r7, #15]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d10d      	bne.n	800219a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800217e:	4b3f      	ldr	r3, [pc, #252]	; (800227c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6819      	ldr	r1, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	3b01      	subs	r3, #1
 8002190:	011b      	lsls	r3, r3, #4
 8002192:	430b      	orrs	r3, r1
 8002194:	4939      	ldr	r1, [pc, #228]	; (800227c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002196:	4313      	orrs	r3, r2
 8002198:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800219a:	7bfb      	ldrb	r3, [r7, #15]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d167      	bne.n	8002270 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80021a0:	4b36      	ldr	r3, [pc, #216]	; (800227c <RCCEx_PLLSAI2_Config+0x1b8>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a35      	ldr	r2, [pc, #212]	; (800227c <RCCEx_PLLSAI2_Config+0x1b8>)
 80021a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021ac:	f7fe fa86 	bl	80006bc <HAL_GetTick>
 80021b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80021b2:	e009      	b.n	80021c8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80021b4:	f7fe fa82 	bl	80006bc <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d902      	bls.n	80021c8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	73fb      	strb	r3, [r7, #15]
        break;
 80021c6:	e005      	b.n	80021d4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80021c8:	4b2c      	ldr	r3, [pc, #176]	; (800227c <RCCEx_PLLSAI2_Config+0x1b8>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d1ef      	bne.n	80021b4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80021d4:	7bfb      	ldrb	r3, [r7, #15]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d14a      	bne.n	8002270 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d111      	bne.n	8002204 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80021e0:	4b26      	ldr	r3, [pc, #152]	; (800227c <RCCEx_PLLSAI2_Config+0x1b8>)
 80021e2:	695b      	ldr	r3, [r3, #20]
 80021e4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80021e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	6892      	ldr	r2, [r2, #8]
 80021f0:	0211      	lsls	r1, r2, #8
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	68d2      	ldr	r2, [r2, #12]
 80021f6:	0912      	lsrs	r2, r2, #4
 80021f8:	0452      	lsls	r2, r2, #17
 80021fa:	430a      	orrs	r2, r1
 80021fc:	491f      	ldr	r1, [pc, #124]	; (800227c <RCCEx_PLLSAI2_Config+0x1b8>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	614b      	str	r3, [r1, #20]
 8002202:	e011      	b.n	8002228 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002204:	4b1d      	ldr	r3, [pc, #116]	; (800227c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002206:	695b      	ldr	r3, [r3, #20]
 8002208:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800220c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	6892      	ldr	r2, [r2, #8]
 8002214:	0211      	lsls	r1, r2, #8
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	6912      	ldr	r2, [r2, #16]
 800221a:	0852      	lsrs	r2, r2, #1
 800221c:	3a01      	subs	r2, #1
 800221e:	0652      	lsls	r2, r2, #25
 8002220:	430a      	orrs	r2, r1
 8002222:	4916      	ldr	r1, [pc, #88]	; (800227c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002224:	4313      	orrs	r3, r2
 8002226:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002228:	4b14      	ldr	r3, [pc, #80]	; (800227c <RCCEx_PLLSAI2_Config+0x1b8>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a13      	ldr	r2, [pc, #76]	; (800227c <RCCEx_PLLSAI2_Config+0x1b8>)
 800222e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002232:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002234:	f7fe fa42 	bl	80006bc <HAL_GetTick>
 8002238:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800223a:	e009      	b.n	8002250 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800223c:	f7fe fa3e 	bl	80006bc <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d902      	bls.n	8002250 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	73fb      	strb	r3, [r7, #15]
          break;
 800224e:	e005      	b.n	800225c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002250:	4b0a      	ldr	r3, [pc, #40]	; (800227c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d0ef      	beq.n	800223c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800225c:	7bfb      	ldrb	r3, [r7, #15]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d106      	bne.n	8002270 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002262:	4b06      	ldr	r3, [pc, #24]	; (800227c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002264:	695a      	ldr	r2, [r3, #20]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	695b      	ldr	r3, [r3, #20]
 800226a:	4904      	ldr	r1, [pc, #16]	; (800227c <RCCEx_PLLSAI2_Config+0x1b8>)
 800226c:	4313      	orrs	r3, r2
 800226e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002270:	7bfb      	ldrb	r3, [r7, #15]
}
 8002272:	4618      	mov	r0, r3
 8002274:	3710      	adds	r7, #16
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	40021000 	.word	0x40021000

08002280 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d06c      	beq.n	800236c <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d106      	bne.n	80022ac <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f7fe f8f6 	bl	8000498 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2202      	movs	r2, #2
 80022b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	22ca      	movs	r2, #202	; 0xca
 80022ba:	625a      	str	r2, [r3, #36]	; 0x24
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2253      	movs	r2, #83	; 0x53
 80022c2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f000 fbe3 	bl	8002a90 <RTC_EnterInitMode>
 80022ca:	4603      	mov	r3, r0
 80022cc:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80022ce:	7bfb      	ldrb	r3, [r7, #15]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d14b      	bne.n	800236c <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	6812      	ldr	r2, [r2, #0]
 80022de:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80022e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80022e6:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	6899      	ldr	r1, [r3, #8]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685a      	ldr	r2, [r3, #4]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	431a      	orrs	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	431a      	orrs	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	430a      	orrs	r2, r1
 8002304:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	68d2      	ldr	r2, [r2, #12]
 800230e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	6919      	ldr	r1, [r3, #16]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	041a      	lsls	r2, r3, #16
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	430a      	orrs	r2, r1
 8002322:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f000 fbe7 	bl	8002af8 <RTC_ExitInitMode>
 800232a:	4603      	mov	r3, r0
 800232c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800232e:	7bfb      	ldrb	r3, [r7, #15]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d11b      	bne.n	800236c <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f022 0203 	bic.w	r2, r2, #3
 8002342:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	69da      	ldr	r2, [r3, #28]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	695b      	ldr	r3, [r3, #20]
 8002352:	431a      	orrs	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	430a      	orrs	r2, r1
 800235a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	22ff      	movs	r2, #255	; 0xff
 8002362:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 800236c:	7bfb      	ldrb	r3, [r7, #15]
}
 800236e:	4618      	mov	r0, r3
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002376:	b590      	push	{r4, r7, lr}
 8002378:	b087      	sub	sp, #28
 800237a:	af00      	add	r7, sp, #0
 800237c:	60f8      	str	r0, [r7, #12]
 800237e:	60b9      	str	r1, [r7, #8]
 8002380:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d101      	bne.n	8002390 <HAL_RTC_SetTime+0x1a>
 800238c:	2302      	movs	r3, #2
 800238e:	e08b      	b.n	80024a8 <HAL_RTC_SetTime+0x132>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2202      	movs	r2, #2
 800239c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	22ca      	movs	r2, #202	; 0xca
 80023a6:	625a      	str	r2, [r3, #36]	; 0x24
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2253      	movs	r2, #83	; 0x53
 80023ae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80023b0:	68f8      	ldr	r0, [r7, #12]
 80023b2:	f000 fb6d 	bl	8002a90 <RTC_EnterInitMode>
 80023b6:	4603      	mov	r3, r0
 80023b8:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80023ba:	7cfb      	ldrb	r3, [r7, #19]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d163      	bne.n	8002488 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d126      	bne.n	8002414 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d102      	bne.n	80023da <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	2200      	movs	r2, #0
 80023d8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	4618      	mov	r0, r3
 80023e0:	f000 fbc8 	bl	8002b74 <RTC_ByteToBcd2>
 80023e4:	4603      	mov	r3, r0
 80023e6:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	785b      	ldrb	r3, [r3, #1]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f000 fbc1 	bl	8002b74 <RTC_ByteToBcd2>
 80023f2:	4603      	mov	r3, r0
 80023f4:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80023f6:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	789b      	ldrb	r3, [r3, #2]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f000 fbb9 	bl	8002b74 <RTC_ByteToBcd2>
 8002402:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002404:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	78db      	ldrb	r3, [r3, #3]
 800240c:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800240e:	4313      	orrs	r3, r2
 8002410:	617b      	str	r3, [r7, #20]
 8002412:	e018      	b.n	8002446 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800241e:	2b00      	cmp	r3, #0
 8002420:	d102      	bne.n	8002428 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	2200      	movs	r2, #0
 8002426:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	785b      	ldrb	r3, [r3, #1]
 8002432:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002434:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002436:	68ba      	ldr	r2, [r7, #8]
 8002438:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800243a:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	78db      	ldrb	r3, [r3, #3]
 8002440:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002442:	4313      	orrs	r3, r2
 8002444:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002450:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002454:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	689a      	ldr	r2, [r3, #8]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002464:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	6899      	ldr	r1, [r3, #8]
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	68da      	ldr	r2, [r3, #12]
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	431a      	orrs	r2, r3
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	430a      	orrs	r2, r1
 800247c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800247e:	68f8      	ldr	r0, [r7, #12]
 8002480:	f000 fb3a 	bl	8002af8 <RTC_ExitInitMode>
 8002484:	4603      	mov	r3, r0
 8002486:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	22ff      	movs	r2, #255	; 0xff
 800248e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8002490:	7cfb      	ldrb	r3, [r7, #19]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d103      	bne.n	800249e <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2201      	movs	r2, #1
 800249a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80024a6:	7cfb      	ldrb	r3, [r7, #19]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	371c      	adds	r7, #28
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd90      	pop	{r4, r7, pc}

080024b0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80024b0:	b590      	push	{r4, r7, lr}
 80024b2:	b087      	sub	sp, #28
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d101      	bne.n	80024ca <HAL_RTC_SetDate+0x1a>
 80024c6:	2302      	movs	r3, #2
 80024c8:	e075      	b.n	80025b6 <HAL_RTC_SetDate+0x106>
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2201      	movs	r2, #1
 80024ce:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2202      	movs	r2, #2
 80024d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d10e      	bne.n	80024fe <HAL_RTC_SetDate+0x4e>
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	785b      	ldrb	r3, [r3, #1]
 80024e4:	f003 0310 	and.w	r3, r3, #16
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d008      	beq.n	80024fe <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	785b      	ldrb	r3, [r3, #1]
 80024f0:	f023 0310 	bic.w	r3, r3, #16
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	330a      	adds	r3, #10
 80024f8:	b2da      	uxtb	r2, r3
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d11c      	bne.n	800253e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	78db      	ldrb	r3, [r3, #3]
 8002508:	4618      	mov	r0, r3
 800250a:	f000 fb33 	bl	8002b74 <RTC_ByteToBcd2>
 800250e:	4603      	mov	r3, r0
 8002510:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	785b      	ldrb	r3, [r3, #1]
 8002516:	4618      	mov	r0, r3
 8002518:	f000 fb2c 	bl	8002b74 <RTC_ByteToBcd2>
 800251c:	4603      	mov	r3, r0
 800251e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002520:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	789b      	ldrb	r3, [r3, #2]
 8002526:	4618      	mov	r0, r3
 8002528:	f000 fb24 	bl	8002b74 <RTC_ByteToBcd2>
 800252c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800252e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002538:	4313      	orrs	r3, r2
 800253a:	617b      	str	r3, [r7, #20]
 800253c:	e00e      	b.n	800255c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	78db      	ldrb	r3, [r3, #3]
 8002542:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	785b      	ldrb	r3, [r3, #1]
 8002548:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800254a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800254c:	68ba      	ldr	r2, [r7, #8]
 800254e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002550:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002558:	4313      	orrs	r3, r2
 800255a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	22ca      	movs	r2, #202	; 0xca
 8002562:	625a      	str	r2, [r3, #36]	; 0x24
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2253      	movs	r2, #83	; 0x53
 800256a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800256c:	68f8      	ldr	r0, [r7, #12]
 800256e:	f000 fa8f 	bl	8002a90 <RTC_EnterInitMode>
 8002572:	4603      	mov	r3, r0
 8002574:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8002576:	7cfb      	ldrb	r3, [r7, #19]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d10c      	bne.n	8002596 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002586:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800258a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800258c:	68f8      	ldr	r0, [r7, #12]
 800258e:	f000 fab3 	bl	8002af8 <RTC_ExitInitMode>
 8002592:	4603      	mov	r3, r0
 8002594:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	22ff      	movs	r2, #255	; 0xff
 800259c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800259e:	7cfb      	ldrb	r3, [r7, #19]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d103      	bne.n	80025ac <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80025b4:	7cfb      	ldrb	r3, [r7, #19]
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	371c      	adds	r7, #28
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd90      	pop	{r4, r7, pc}
	...

080025c0 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80025c0:	b590      	push	{r4, r7, lr}
 80025c2:	b089      	sub	sp, #36	; 0x24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d101      	bne.n	80025da <HAL_RTC_SetAlarm_IT+0x1a>
 80025d6:	2302      	movs	r3, #2
 80025d8:	e127      	b.n	800282a <HAL_RTC_SetAlarm_IT+0x26a>
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2201      	movs	r2, #1
 80025de:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2202      	movs	r2, #2
 80025e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d137      	bne.n	8002660 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d102      	bne.n	8002604 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	2200      	movs	r2, #0
 8002602:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	4618      	mov	r0, r3
 800260a:	f000 fab3 	bl	8002b74 <RTC_ByteToBcd2>
 800260e:	4603      	mov	r3, r0
 8002610:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	785b      	ldrb	r3, [r3, #1]
 8002616:	4618      	mov	r0, r3
 8002618:	f000 faac 	bl	8002b74 <RTC_ByteToBcd2>
 800261c:	4603      	mov	r3, r0
 800261e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002620:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	789b      	ldrb	r3, [r3, #2]
 8002626:	4618      	mov	r0, r3
 8002628:	f000 faa4 	bl	8002b74 <RTC_ByteToBcd2>
 800262c:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800262e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	78db      	ldrb	r3, [r3, #3]
 8002636:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002638:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002642:	4618      	mov	r0, r3
 8002644:	f000 fa96 	bl	8002b74 <RTC_ByteToBcd2>
 8002648:	4603      	mov	r3, r0
 800264a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800264c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002654:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800265a:	4313      	orrs	r3, r2
 800265c:	61fb      	str	r3, [r7, #28]
 800265e:	e023      	b.n	80026a8 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800266a:	2b00      	cmp	r3, #0
 800266c:	d102      	bne.n	8002674 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	2200      	movs	r2, #0
 8002672:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	785b      	ldrb	r3, [r3, #1]
 800267e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002680:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002682:	68ba      	ldr	r2, [r7, #8]
 8002684:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002686:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	78db      	ldrb	r3, [r3, #3]
 800268c:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800268e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002696:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002698:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800269e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80026a4:	4313      	orrs	r3, r2
 80026a6:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	685a      	ldr	r2, [r3, #4]
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	69db      	ldr	r3, [r3, #28]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	22ca      	movs	r2, #202	; 0xca
 80026ba:	625a      	str	r2, [r3, #36]	; 0x24
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2253      	movs	r2, #83	; 0x53
 80026c2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026cc:	d14a      	bne.n	8002764 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	689a      	ldr	r2, [r3, #8]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026dc:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	b2da      	uxtb	r2, r3
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80026ee:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 80026f0:	f7fd ffe4 	bl	80006bc <HAL_GetTick>
 80026f4:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80026f6:	e015      	b.n	8002724 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80026f8:	f7fd ffe0 	bl	80006bc <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002706:	d90d      	bls.n	8002724 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	22ff      	movs	r2, #255	; 0xff
 800270e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2203      	movs	r2, #3
 8002714:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e082      	b.n	800282a <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	2b00      	cmp	r3, #0
 8002730:	d0e2      	beq.n	80026f8 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	69fa      	ldr	r2, [r7, #28]
 8002738:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002750:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	689a      	ldr	r2, [r3, #8]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002760:	609a      	str	r2, [r3, #8]
 8002762:	e049      	b.n	80027f8 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	689a      	ldr	r2, [r3, #8]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002772:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	b2da      	uxtb	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f462 7220 	orn	r2, r2, #640	; 0x280
 8002784:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 8002786:	f7fd ff99 	bl	80006bc <HAL_GetTick>
 800278a:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800278c:	e015      	b.n	80027ba <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800278e:	f7fd ff95 	bl	80006bc <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800279c:	d90d      	bls.n	80027ba <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	22ff      	movs	r2, #255	; 0xff
 80027a4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2203      	movs	r2, #3
 80027aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e037      	b.n	800282a <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	f003 0302 	and.w	r3, r3, #2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d0e2      	beq.n	800278e <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	69fa      	ldr	r2, [r7, #28]
 80027ce:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	689a      	ldr	r2, [r3, #8]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027e6:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	689a      	ldr	r2, [r3, #8]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027f6:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80027f8:	4b0e      	ldr	r3, [pc, #56]	; (8002834 <HAL_RTC_SetAlarm_IT+0x274>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a0d      	ldr	r2, [pc, #52]	; (8002834 <HAL_RTC_SetAlarm_IT+0x274>)
 80027fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002802:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8002804:	4b0b      	ldr	r3, [pc, #44]	; (8002834 <HAL_RTC_SetAlarm_IT+0x274>)
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	4a0a      	ldr	r2, [pc, #40]	; (8002834 <HAL_RTC_SetAlarm_IT+0x274>)
 800280a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800280e:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	22ff      	movs	r2, #255	; 0xff
 8002816:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3724      	adds	r7, #36	; 0x24
 800282e:	46bd      	mov	sp, r7
 8002830:	bd90      	pop	{r4, r7, pc}
 8002832:	bf00      	nop
 8002834:	40010400 	.word	0x40010400

08002838 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b086      	sub	sp, #24
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
 8002844:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if (Alarm == RTC_ALARM_A)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800284c:	d143      	bne.n	80028d6 <HAL_RTC_GetAlarm+0x9e>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002854:	629a      	str	r2, [r3, #40]	; 0x28

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	69db      	ldr	r3, [r3, #28]
 800285c:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR) & RTC_ALRMASSR_SS);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002864:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002868:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	0c1b      	lsrs	r3, r3, #16
 800286e:	b2db      	uxtb	r3, r3
 8002870:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002874:	b2da      	uxtb	r2, r3
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	0a1b      	lsrs	r3, r3, #8
 800287e:	b2db      	uxtb	r3, r3
 8002880:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002884:	b2da      	uxtb	r2, r3
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	b2db      	uxtb	r3, r3
 800288e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002892:	b2da      	uxtb	r2, r3
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	0d9b      	lsrs	r3, r3, #22
 800289c:	b2db      	uxtb	r3, r3
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	b2da      	uxtb	r2, r3
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	693a      	ldr	r2, [r7, #16]
 80028ac:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	0e1b      	lsrs	r3, r3, #24
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028b8:	b2da      	uxtb	r2, r3
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	621a      	str	r2, [r3, #32]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	615a      	str	r2, [r3, #20]
 80028d4:	e042      	b.n	800295c <HAL_RTC_GetAlarm+0x124>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028dc:	629a      	str	r2, [r3, #40]	; 0x28

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	6a1b      	ldr	r3, [r3, #32]
 80028e4:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028ec:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80028f0:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	0c1b      	lsrs	r3, r3, #16
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028fc:	b2da      	uxtb	r2, r3
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	0a1b      	lsrs	r3, r3, #8
 8002906:	b2db      	uxtb	r3, r3
 8002908:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800290c:	b2da      	uxtb	r2, r3
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	b2db      	uxtb	r3, r3
 8002916:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800291a:	b2da      	uxtb	r2, r3
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	0d9b      	lsrs	r3, r3, #22
 8002924:	b2db      	uxtb	r3, r3
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	b2da      	uxtb	r2, r3
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	693a      	ldr	r2, [r7, #16]
 8002934:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	0e1b      	lsrs	r3, r3, #24
 800293a:	b2db      	uxtb	r3, r3
 800293c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002940:	b2da      	uxtb	r2, r3
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	621a      	str	r2, [r3, #32]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	615a      	str	r2, [r3, #20]
  }

  if (Format == RTC_FORMAT_BIN)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d125      	bne.n	80029ae <HAL_RTC_GetAlarm+0x176>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	4618      	mov	r0, r3
 8002968:	f000 f924 	bl	8002bb4 <RTC_Bcd2ToByte>
 800296c:	4603      	mov	r3, r0
 800296e:	461a      	mov	r2, r3
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	785b      	ldrb	r3, [r3, #1]
 8002978:	4618      	mov	r0, r3
 800297a:	f000 f91b 	bl	8002bb4 <RTC_Bcd2ToByte>
 800297e:	4603      	mov	r3, r0
 8002980:	461a      	mov	r2, r3
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	789b      	ldrb	r3, [r3, #2]
 800298a:	4618      	mov	r0, r3
 800298c:	f000 f912 	bl	8002bb4 <RTC_Bcd2ToByte>
 8002990:	4603      	mov	r3, r0
 8002992:	461a      	mov	r2, r3
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800299e:	4618      	mov	r0, r3
 80029a0:	f000 f908 	bl	8002bb4 <RTC_Bcd2ToByte>
 80029a4:	4603      	mov	r3, r0
 80029a6:	461a      	mov	r2, r3
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3718      	adds	r7, #24
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80029c0:	4b1f      	ldr	r3, [pc, #124]	; (8002a40 <HAL_RTC_AlarmIRQHandler+0x88>)
 80029c2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80029c6:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d012      	beq.n	80029fc <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d00b      	beq.n	80029fc <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	b2da      	uxtb	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80029f4:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f7fd fcfa 	bl	80003f0 <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d012      	beq.n	8002a30 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d00b      	beq.n	8002a30 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	b2da      	uxtb	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f462 7220 	orn	r2, r2, #640	; 0x280
 8002a28:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 f8dc 	bl	8002be8 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8002a38:	bf00      	nop
 8002a3a:	3708      	adds	r7, #8
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	40010400 	.word	0x40010400

08002a44 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68da      	ldr	r2, [r3, #12]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002a5a:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8002a5c:	f7fd fe2e 	bl	80006bc <HAL_GetTick>
 8002a60:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002a62:	e009      	b.n	8002a78 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002a64:	f7fd fe2a 	bl	80006bc <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a72:	d901      	bls.n	8002a78 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e007      	b.n	8002a88 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	f003 0320 	and.w	r3, r3, #32
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d0ee      	beq.n	8002a64 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3710      	adds	r7, #16
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d120      	bne.n	8002aec <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f04f 32ff 	mov.w	r2, #4294967295
 8002ab2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002ab4:	f7fd fe02 	bl	80006bc <HAL_GetTick>
 8002ab8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002aba:	e00d      	b.n	8002ad8 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002abc:	f7fd fdfe 	bl	80006bc <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002aca:	d905      	bls.n	8002ad8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2203      	movs	r2, #3
 8002ad4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d102      	bne.n	8002aec <RTC_EnterInitMode+0x5c>
 8002ae6:	7bfb      	ldrb	r3, [r7, #15]
 8002ae8:	2b03      	cmp	r3, #3
 8002aea:	d1e7      	bne.n	8002abc <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8002aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3710      	adds	r7, #16
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
	...

08002af8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b00:	2300      	movs	r3, #0
 8002b02:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8002b04:	4b1a      	ldr	r3, [pc, #104]	; (8002b70 <RTC_ExitInitMode+0x78>)
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	4a19      	ldr	r2, [pc, #100]	; (8002b70 <RTC_ExitInitMode+0x78>)
 8002b0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b0e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002b10:	4b17      	ldr	r3, [pc, #92]	; (8002b70 <RTC_ExitInitMode+0x78>)
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f003 0320 	and.w	r3, r3, #32
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d10c      	bne.n	8002b36 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f7ff ff91 	bl	8002a44 <HAL_RTC_WaitForSynchro>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d01e      	beq.n	8002b66 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2203      	movs	r2, #3
 8002b2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	73fb      	strb	r3, [r7, #15]
 8002b34:	e017      	b.n	8002b66 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002b36:	4b0e      	ldr	r3, [pc, #56]	; (8002b70 <RTC_ExitInitMode+0x78>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	4a0d      	ldr	r2, [pc, #52]	; (8002b70 <RTC_ExitInitMode+0x78>)
 8002b3c:	f023 0320 	bic.w	r3, r3, #32
 8002b40:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f7ff ff7e 	bl	8002a44 <HAL_RTC_WaitForSynchro>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d005      	beq.n	8002b5a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2203      	movs	r2, #3
 8002b52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002b5a:	4b05      	ldr	r3, [pc, #20]	; (8002b70 <RTC_ExitInitMode+0x78>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	4a04      	ldr	r2, [pc, #16]	; (8002b70 <RTC_ExitInitMode+0x78>)
 8002b60:	f043 0320 	orr.w	r3, r3, #32
 8002b64:	6093      	str	r3, [r2, #8]
  }

  return status;
 8002b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3710      	adds	r7, #16
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	40002800 	.word	0x40002800

08002b74 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8002b82:	79fb      	ldrb	r3, [r7, #7]
 8002b84:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8002b86:	e005      	b.n	8002b94 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8002b8e:	7afb      	ldrb	r3, [r7, #11]
 8002b90:	3b0a      	subs	r3, #10
 8002b92:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8002b94:	7afb      	ldrb	r3, [r7, #11]
 8002b96:	2b09      	cmp	r3, #9
 8002b98:	d8f6      	bhi.n	8002b88 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	011b      	lsls	r3, r3, #4
 8002ba0:	b2da      	uxtb	r2, r3
 8002ba2:	7afb      	ldrb	r3, [r7, #11]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	b2db      	uxtb	r3, r3
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3714      	adds	r7, #20
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b085      	sub	sp, #20
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	4603      	mov	r3, r0
 8002bbc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8002bbe:	79fb      	ldrb	r3, [r7, #7]
 8002bc0:	091b      	lsrs	r3, r3, #4
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	0092      	lsls	r2, r2, #2
 8002bc8:	4413      	add	r3, r2
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8002bce:	79fb      	ldrb	r3, [r7, #7]
 8002bd0:	f003 030f 	and.w	r3, r3, #15
 8002bd4:	b2da      	uxtb	r2, r3
 8002bd6:	7bfb      	ldrb	r3, [r7, #15]
 8002bd8:	4413      	add	r3, r2
 8002bda:	b2db      	uxtb	r3, r3
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3714      	adds	r7, #20
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <memset>:
 8002bfc:	4402      	add	r2, r0
 8002bfe:	4603      	mov	r3, r0
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d100      	bne.n	8002c06 <memset+0xa>
 8002c04:	4770      	bx	lr
 8002c06:	f803 1b01 	strb.w	r1, [r3], #1
 8002c0a:	e7f9      	b.n	8002c00 <memset+0x4>

08002c0c <__libc_init_array>:
 8002c0c:	b570      	push	{r4, r5, r6, lr}
 8002c0e:	4d0d      	ldr	r5, [pc, #52]	; (8002c44 <__libc_init_array+0x38>)
 8002c10:	4c0d      	ldr	r4, [pc, #52]	; (8002c48 <__libc_init_array+0x3c>)
 8002c12:	1b64      	subs	r4, r4, r5
 8002c14:	10a4      	asrs	r4, r4, #2
 8002c16:	2600      	movs	r6, #0
 8002c18:	42a6      	cmp	r6, r4
 8002c1a:	d109      	bne.n	8002c30 <__libc_init_array+0x24>
 8002c1c:	4d0b      	ldr	r5, [pc, #44]	; (8002c4c <__libc_init_array+0x40>)
 8002c1e:	4c0c      	ldr	r4, [pc, #48]	; (8002c50 <__libc_init_array+0x44>)
 8002c20:	f000 f818 	bl	8002c54 <_init>
 8002c24:	1b64      	subs	r4, r4, r5
 8002c26:	10a4      	asrs	r4, r4, #2
 8002c28:	2600      	movs	r6, #0
 8002c2a:	42a6      	cmp	r6, r4
 8002c2c:	d105      	bne.n	8002c3a <__libc_init_array+0x2e>
 8002c2e:	bd70      	pop	{r4, r5, r6, pc}
 8002c30:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c34:	4798      	blx	r3
 8002c36:	3601      	adds	r6, #1
 8002c38:	e7ee      	b.n	8002c18 <__libc_init_array+0xc>
 8002c3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c3e:	4798      	blx	r3
 8002c40:	3601      	adds	r6, #1
 8002c42:	e7f2      	b.n	8002c2a <__libc_init_array+0x1e>
 8002c44:	08002cac 	.word	0x08002cac
 8002c48:	08002cac 	.word	0x08002cac
 8002c4c:	08002cac 	.word	0x08002cac
 8002c50:	08002cb0 	.word	0x08002cb0

08002c54 <_init>:
 8002c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c56:	bf00      	nop
 8002c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c5a:	bc08      	pop	{r3}
 8002c5c:	469e      	mov	lr, r3
 8002c5e:	4770      	bx	lr

08002c60 <_fini>:
 8002c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c62:	bf00      	nop
 8002c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c66:	bc08      	pop	{r3}
 8002c68:	469e      	mov	lr, r3
 8002c6a:	4770      	bx	lr
