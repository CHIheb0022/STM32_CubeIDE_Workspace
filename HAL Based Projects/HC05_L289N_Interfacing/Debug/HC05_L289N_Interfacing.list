
HC05_L289N_Interfacing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006350  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080064d8  080064d8  000164d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006520  08006520  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006520  08006520  00016520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006528  08006528  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006528  08006528  00016528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800652c  0800652c  0001652c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006530  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  2000000c  0800653c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  0800653c  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014a6b  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028a0  00000000  00000000  00034aea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001308  00000000  00000000  00037390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000edd  00000000  00000000  00038698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027ee9  00000000  00000000  00039575  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015b84  00000000  00000000  0006145e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00101cc3  00000000  00000000  00076fe2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000520c  00000000  00000000  00178ca8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  0017deb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080064c0 	.word	0x080064c0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080064c0 	.word	0x080064c0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ca:	f000 fbfa 	bl	8000cc2 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ce:	f000 f857 	bl	8000580 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d2:	f000 f9b1 	bl	8000838 <MX_GPIO_Init>
  MX_ADC1_Init();
 80004d6:	f000 f8a5 	bl	8000624 <MX_ADC1_Init>
  MX_TIM2_Init();
 80004da:	f000 f919 	bl	8000710 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80004de:	f000 f97b 	bl	80007d8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  //Start UART1 in Interrupt mode
  HAL_UART_Receive_IT(&huart1, RX_BUFFER, Rx_len); // START THE UART AT THE FIRST INTERRUPTION
 80004e2:	2203      	movs	r2, #3
 80004e4:	491f      	ldr	r1, [pc, #124]	; (8000564 <main+0xa0>)
 80004e6:	4820      	ldr	r0, [pc, #128]	; (8000568 <main+0xa4>)
 80004e8:	f004 fd26 	bl	8004f38 <HAL_UART_Receive_IT>

  //Start Timer 2
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 80004ec:	2100      	movs	r1, #0
 80004ee:	481f      	ldr	r0, [pc, #124]	; (800056c <main+0xa8>)
 80004f0:	f003 fe9c 	bl	800422c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2);
 80004f4:	2104      	movs	r1, #4
 80004f6:	481d      	ldr	r0, [pc, #116]	; (800056c <main+0xa8>)
 80004f8:	f003 fe98 	bl	800422c <HAL_TIM_PWM_Start>

  // Calibrate The ADC On Power-Up For Better Accuracy
  HAL_ADCEx_Calibration_Start(&hadc1,ADC_SINGLE_ENDED);
 80004fc:	217f      	movs	r1, #127	; 0x7f
 80004fe:	481c      	ldr	r0, [pc, #112]	; (8000570 <main+0xac>)
 8000500:	f001 fea0 	bl	8002244 <HAL_ADCEx_Calibration_Start>

  //Initialize Right motors direction to forward
  HAL_GPIO_WritePin(GPIOC, in3, GPIO_PIN_SET);
 8000504:	2201      	movs	r2, #1
 8000506:	2104      	movs	r1, #4
 8000508:	481a      	ldr	r0, [pc, #104]	; (8000574 <main+0xb0>)
 800050a:	f002 fae5 	bl	8002ad8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, in4, GPIO_PIN_RESET);
 800050e:	2200      	movs	r2, #0
 8000510:	2108      	movs	r1, #8
 8000512:	4818      	ldr	r0, [pc, #96]	; (8000574 <main+0xb0>)
 8000514:	f002 fae0 	bl	8002ad8 <HAL_GPIO_WritePin>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	// Start ADC Conversion
	HAL_ADC_Start(&hadc1);
 8000518:	4815      	ldr	r0, [pc, #84]	; (8000570 <main+0xac>)
 800051a:	f000 ffcb 	bl	80014b4 <HAL_ADC_Start>

	// Poll ADC1 Peripheral & TimeOut = 1mSec
	HAL_ADC_PollForConversion(&hadc1, 1);
 800051e:	2101      	movs	r1, #1
 8000520:	4813      	ldr	r0, [pc, #76]	; (8000570 <main+0xac>)
 8000522:	f001 f881 	bl	8001628 <HAL_ADC_PollForConversion>

	// Read The ADC Conversion Result & Map It To PWM DutyCycle
	ADC_RES = HAL_ADC_GetValue(&hadc1);
 8000526:	4812      	ldr	r0, [pc, #72]	; (8000570 <main+0xac>)
 8000528:	f001 f956 	bl	80017d8 <HAL_ADC_GetValue>
 800052c:	4603      	mov	r3, r0
 800052e:	b29a      	uxth	r2, r3
 8000530:	4b11      	ldr	r3, [pc, #68]	; (8000578 <main+0xb4>)
 8000532:	801a      	strh	r2, [r3, #0]
	PWM_Value = MAP(ADC_RES, 0, ADC_max, 0, PWM_max);
 8000534:	4b10      	ldr	r3, [pc, #64]	; (8000578 <main+0xb4>)
 8000536:	881b      	ldrh	r3, [r3, #0]
 8000538:	4618      	mov	r0, r3
 800053a:	23ff      	movs	r3, #255	; 0xff
 800053c:	9300      	str	r3, [sp, #0]
 800053e:	2300      	movs	r3, #0
 8000540:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000544:	2100      	movs	r1, #0
 8000546:	f000 f9e5 	bl	8000914 <MAP>
 800054a:	4603      	mov	r3, r0
 800054c:	b29a      	uxth	r2, r3
 800054e:	4b0b      	ldr	r3, [pc, #44]	; (800057c <main+0xb8>)
 8000550:	801a      	strh	r2, [r3, #0]

	//Set New PWM value
	TIM2->CCR1 = PWM_Value;
 8000552:	4b0a      	ldr	r3, [pc, #40]	; (800057c <main+0xb8>)
 8000554:	881a      	ldrh	r2, [r3, #0]
 8000556:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800055a:	635a      	str	r2, [r3, #52]	; 0x34
	//Or use
	//__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, OCC_Value);
	HAL_Delay(10);
 800055c:	200a      	movs	r0, #10
 800055e:	f000 fc25 	bl	8000dac <HAL_Delay>
	HAL_ADC_Start(&hadc1);
 8000562:	e7d9      	b.n	8000518 <main+0x54>
 8000564:	20000160 	.word	0x20000160
 8000568:	200000d8 	.word	0x200000d8
 800056c:	2000008c 	.word	0x2000008c
 8000570:	20000028 	.word	0x20000028
 8000574:	48000800 	.word	0x48000800
 8000578:	2000015c 	.word	0x2000015c
 800057c:	2000015e 	.word	0x2000015e

08000580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b096      	sub	sp, #88	; 0x58
 8000584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000586:	f107 0314 	add.w	r3, r7, #20
 800058a:	2244      	movs	r2, #68	; 0x44
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f005 ff69 	bl	8006466 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000594:	463b      	mov	r3, r7
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	605a      	str	r2, [r3, #4]
 800059c:	609a      	str	r2, [r3, #8]
 800059e:	60da      	str	r2, [r3, #12]
 80005a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005a2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005a6:	f002 fad7 	bl	8002b58 <HAL_PWREx_ControlVoltageScaling>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005b0:	f000 f9cc 	bl	800094c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005b4:	2310      	movs	r3, #16
 80005b6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005b8:	2301      	movs	r3, #1
 80005ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005bc:	2300      	movs	r3, #0
 80005be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005c0:	2360      	movs	r3, #96	; 0x60
 80005c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c4:	2302      	movs	r3, #2
 80005c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005c8:	2301      	movs	r3, #1
 80005ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005cc:	2301      	movs	r3, #1
 80005ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 36;
 80005d0:	2324      	movs	r3, #36	; 0x24
 80005d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005d4:	2307      	movs	r3, #7
 80005d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005d8:	2302      	movs	r3, #2
 80005da:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005dc:	2302      	movs	r3, #2
 80005de:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e0:	f107 0314 	add.w	r3, r7, #20
 80005e4:	4618      	mov	r0, r3
 80005e6:	f002 fb0d 	bl	8002c04 <HAL_RCC_OscConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80005f0:	f000 f9ac 	bl	800094c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f4:	230f      	movs	r3, #15
 80005f6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f8:	2303      	movs	r3, #3
 80005fa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000608:	463b      	mov	r3, r7
 800060a:	2104      	movs	r1, #4
 800060c:	4618      	mov	r0, r3
 800060e:	f002 fed5 	bl	80033bc <HAL_RCC_ClockConfig>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000618:	f000 f998 	bl	800094c <Error_Handler>
  }
}
 800061c:	bf00      	nop
 800061e:	3758      	adds	r7, #88	; 0x58
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}

08000624 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b08a      	sub	sp, #40	; 0x28
 8000628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800062a:	f107 031c 	add.w	r3, r7, #28
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]
 8000644:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000646:	4b2f      	ldr	r3, [pc, #188]	; (8000704 <MX_ADC1_Init+0xe0>)
 8000648:	4a2f      	ldr	r2, [pc, #188]	; (8000708 <MX_ADC1_Init+0xe4>)
 800064a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800064c:	4b2d      	ldr	r3, [pc, #180]	; (8000704 <MX_ADC1_Init+0xe0>)
 800064e:	2200      	movs	r2, #0
 8000650:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000652:	4b2c      	ldr	r3, [pc, #176]	; (8000704 <MX_ADC1_Init+0xe0>)
 8000654:	2208      	movs	r2, #8
 8000656:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000658:	4b2a      	ldr	r3, [pc, #168]	; (8000704 <MX_ADC1_Init+0xe0>)
 800065a:	2200      	movs	r2, #0
 800065c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800065e:	4b29      	ldr	r3, [pc, #164]	; (8000704 <MX_ADC1_Init+0xe0>)
 8000660:	2200      	movs	r2, #0
 8000662:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000664:	4b27      	ldr	r3, [pc, #156]	; (8000704 <MX_ADC1_Init+0xe0>)
 8000666:	2204      	movs	r2, #4
 8000668:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800066a:	4b26      	ldr	r3, [pc, #152]	; (8000704 <MX_ADC1_Init+0xe0>)
 800066c:	2200      	movs	r2, #0
 800066e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000670:	4b24      	ldr	r3, [pc, #144]	; (8000704 <MX_ADC1_Init+0xe0>)
 8000672:	2200      	movs	r2, #0
 8000674:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000676:	4b23      	ldr	r3, [pc, #140]	; (8000704 <MX_ADC1_Init+0xe0>)
 8000678:	2201      	movs	r2, #1
 800067a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800067c:	4b21      	ldr	r3, [pc, #132]	; (8000704 <MX_ADC1_Init+0xe0>)
 800067e:	2200      	movs	r2, #0
 8000680:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000684:	4b1f      	ldr	r3, [pc, #124]	; (8000704 <MX_ADC1_Init+0xe0>)
 8000686:	2200      	movs	r2, #0
 8000688:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800068a:	4b1e      	ldr	r3, [pc, #120]	; (8000704 <MX_ADC1_Init+0xe0>)
 800068c:	2200      	movs	r2, #0
 800068e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000690:	4b1c      	ldr	r3, [pc, #112]	; (8000704 <MX_ADC1_Init+0xe0>)
 8000692:	2200      	movs	r2, #0
 8000694:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000698:	4b1a      	ldr	r3, [pc, #104]	; (8000704 <MX_ADC1_Init+0xe0>)
 800069a:	2200      	movs	r2, #0
 800069c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800069e:	4b19      	ldr	r3, [pc, #100]	; (8000704 <MX_ADC1_Init+0xe0>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006a6:	4817      	ldr	r0, [pc, #92]	; (8000704 <MX_ADC1_Init+0xe0>)
 80006a8:	f000 fdae 	bl	8001208 <HAL_ADC_Init>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80006b2:	f000 f94b 	bl	800094c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006ba:	f107 031c 	add.w	r3, r7, #28
 80006be:	4619      	mov	r1, r3
 80006c0:	4810      	ldr	r0, [pc, #64]	; (8000704 <MX_ADC1_Init+0xe0>)
 80006c2:	f001 fe1f 	bl	8002304 <HAL_ADCEx_MultiModeConfigChannel>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80006cc:	f000 f93e 	bl	800094c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006d0:	4b0e      	ldr	r3, [pc, #56]	; (800070c <MX_ADC1_Init+0xe8>)
 80006d2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006d4:	2306      	movs	r3, #6
 80006d6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006d8:	2300      	movs	r3, #0
 80006da:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006dc:	237f      	movs	r3, #127	; 0x7f
 80006de:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006e0:	2304      	movs	r3, #4
 80006e2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e8:	1d3b      	adds	r3, r7, #4
 80006ea:	4619      	mov	r1, r3
 80006ec:	4805      	ldr	r0, [pc, #20]	; (8000704 <MX_ADC1_Init+0xe0>)
 80006ee:	f001 f881 	bl	80017f4 <HAL_ADC_ConfigChannel>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80006f8:	f000 f928 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006fc:	bf00      	nop
 80006fe:	3728      	adds	r7, #40	; 0x28
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20000028 	.word	0x20000028
 8000708:	50040000 	.word	0x50040000
 800070c:	04300002 	.word	0x04300002

08000710 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b08a      	sub	sp, #40	; 0x28
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000716:	f107 031c 	add.w	r3, r7, #28
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000722:	463b      	mov	r3, r7
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]
 800072e:	611a      	str	r2, [r3, #16]
 8000730:	615a      	str	r2, [r3, #20]
 8000732:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000734:	4b27      	ldr	r3, [pc, #156]	; (80007d4 <MX_TIM2_Init+0xc4>)
 8000736:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800073a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 881;
 800073c:	4b25      	ldr	r3, [pc, #148]	; (80007d4 <MX_TIM2_Init+0xc4>)
 800073e:	f240 3271 	movw	r2, #881	; 0x371
 8000742:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000744:	4b23      	ldr	r3, [pc, #140]	; (80007d4 <MX_TIM2_Init+0xc4>)
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 800074a:	4b22      	ldr	r3, [pc, #136]	; (80007d4 <MX_TIM2_Init+0xc4>)
 800074c:	22ff      	movs	r2, #255	; 0xff
 800074e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000750:	4b20      	ldr	r3, [pc, #128]	; (80007d4 <MX_TIM2_Init+0xc4>)
 8000752:	2200      	movs	r2, #0
 8000754:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000756:	4b1f      	ldr	r3, [pc, #124]	; (80007d4 <MX_TIM2_Init+0xc4>)
 8000758:	2280      	movs	r2, #128	; 0x80
 800075a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800075c:	481d      	ldr	r0, [pc, #116]	; (80007d4 <MX_TIM2_Init+0xc4>)
 800075e:	f003 fd0d 	bl	800417c <HAL_TIM_PWM_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000768:	f000 f8f0 	bl	800094c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800076c:	2300      	movs	r3, #0
 800076e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000770:	2300      	movs	r3, #0
 8000772:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000774:	f107 031c 	add.w	r3, r7, #28
 8000778:	4619      	mov	r1, r3
 800077a:	4816      	ldr	r0, [pc, #88]	; (80007d4 <MX_TIM2_Init+0xc4>)
 800077c:	f004 fb06 	bl	8004d8c <HAL_TIMEx_MasterConfigSynchronization>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000786:	f000 f8e1 	bl	800094c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800078a:	2360      	movs	r3, #96	; 0x60
 800078c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800078e:	2300      	movs	r3, #0
 8000790:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000792:	2300      	movs	r3, #0
 8000794:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000796:	2300      	movs	r3, #0
 8000798:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800079a:	463b      	mov	r3, r7
 800079c:	2200      	movs	r2, #0
 800079e:	4619      	mov	r1, r3
 80007a0:	480c      	ldr	r0, [pc, #48]	; (80007d4 <MX_TIM2_Init+0xc4>)
 80007a2:	f003 fe49 	bl	8004438 <HAL_TIM_PWM_ConfigChannel>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80007ac:	f000 f8ce 	bl	800094c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007b0:	463b      	mov	r3, r7
 80007b2:	2204      	movs	r2, #4
 80007b4:	4619      	mov	r1, r3
 80007b6:	4807      	ldr	r0, [pc, #28]	; (80007d4 <MX_TIM2_Init+0xc4>)
 80007b8:	f003 fe3e 	bl	8004438 <HAL_TIM_PWM_ConfigChannel>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80007c2:	f000 f8c3 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80007c6:	4803      	ldr	r0, [pc, #12]	; (80007d4 <MX_TIM2_Init+0xc4>)
 80007c8:	f000 f972 	bl	8000ab0 <HAL_TIM_MspPostInit>

}
 80007cc:	bf00      	nop
 80007ce:	3728      	adds	r7, #40	; 0x28
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	2000008c 	.word	0x2000008c

080007d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007dc:	4b14      	ldr	r3, [pc, #80]	; (8000830 <MX_USART1_UART_Init+0x58>)
 80007de:	4a15      	ldr	r2, [pc, #84]	; (8000834 <MX_USART1_UART_Init+0x5c>)
 80007e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80007e2:	4b13      	ldr	r3, [pc, #76]	; (8000830 <MX_USART1_UART_Init+0x58>)
 80007e4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80007e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007ea:	4b11      	ldr	r3, [pc, #68]	; (8000830 <MX_USART1_UART_Init+0x58>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <MX_USART1_UART_Init+0x58>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <MX_USART1_UART_Init+0x58>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007fc:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <MX_USART1_UART_Init+0x58>)
 80007fe:	220c      	movs	r2, #12
 8000800:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000802:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <MX_USART1_UART_Init+0x58>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000808:	4b09      	ldr	r3, [pc, #36]	; (8000830 <MX_USART1_UART_Init+0x58>)
 800080a:	2200      	movs	r2, #0
 800080c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800080e:	4b08      	ldr	r3, [pc, #32]	; (8000830 <MX_USART1_UART_Init+0x58>)
 8000810:	2200      	movs	r2, #0
 8000812:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <MX_USART1_UART_Init+0x58>)
 8000816:	2200      	movs	r2, #0
 8000818:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800081a:	4805      	ldr	r0, [pc, #20]	; (8000830 <MX_USART1_UART_Init+0x58>)
 800081c:	f004 fb3e 	bl	8004e9c <HAL_UART_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000826:	f000 f891 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	200000d8 	.word	0x200000d8
 8000834:	40013800 	.word	0x40013800

08000838 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b088      	sub	sp, #32
 800083c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083e:	f107 030c 	add.w	r3, r7, #12
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]
 8000848:	609a      	str	r2, [r3, #8]
 800084a:	60da      	str	r2, [r3, #12]
 800084c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800084e:	4b22      	ldr	r3, [pc, #136]	; (80008d8 <MX_GPIO_Init+0xa0>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000852:	4a21      	ldr	r2, [pc, #132]	; (80008d8 <MX_GPIO_Init+0xa0>)
 8000854:	f043 0304 	orr.w	r3, r3, #4
 8000858:	64d3      	str	r3, [r2, #76]	; 0x4c
 800085a:	4b1f      	ldr	r3, [pc, #124]	; (80008d8 <MX_GPIO_Init+0xa0>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085e:	f003 0304 	and.w	r3, r3, #4
 8000862:	60bb      	str	r3, [r7, #8]
 8000864:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	4b1c      	ldr	r3, [pc, #112]	; (80008d8 <MX_GPIO_Init+0xa0>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086a:	4a1b      	ldr	r2, [pc, #108]	; (80008d8 <MX_GPIO_Init+0xa0>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000872:	4b19      	ldr	r3, [pc, #100]	; (80008d8 <MX_GPIO_Init+0xa0>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	2106      	movs	r1, #6
 8000882:	4816      	ldr	r0, [pc, #88]	; (80008dc <MX_GPIO_Init+0xa4>)
 8000884:	f002 f928 	bl	8002ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000888:	2200      	movs	r2, #0
 800088a:	2120      	movs	r1, #32
 800088c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000890:	f002 f922 	bl	8002ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000894:	2306      	movs	r3, #6
 8000896:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000898:	2301      	movs	r3, #1
 800089a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a0:	2300      	movs	r3, #0
 80008a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008a4:	f107 030c 	add.w	r3, r7, #12
 80008a8:	4619      	mov	r1, r3
 80008aa:	480c      	ldr	r0, [pc, #48]	; (80008dc <MX_GPIO_Init+0xa4>)
 80008ac:	f001 ff6a 	bl	8002784 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80008b0:	2320      	movs	r3, #32
 80008b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b4:	2301      	movs	r3, #1
 80008b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008bc:	2300      	movs	r3, #0
 80008be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c0:	f107 030c 	add.w	r3, r7, #12
 80008c4:	4619      	mov	r1, r3
 80008c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ca:	f001 ff5b 	bl	8002784 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008ce:	bf00      	nop
 80008d0:	3720      	adds	r7, #32
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40021000 	.word	0x40021000
 80008dc:	48000800 	.word	0x48000800

080008e0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]

	//Check the Cplt callback function call belongs to the UART1 instance.
	if (huart == &huart1) {
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	4a08      	ldr	r2, [pc, #32]	; (800090c <HAL_UART_RxCpltCallback+0x2c>)
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d109      	bne.n	8000904 <HAL_UART_RxCpltCallback+0x24>

	//Toggle LED connected to PA5
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80008f0:	2120      	movs	r1, #32
 80008f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008f6:	f002 f907 	bl	8002b08 <HAL_GPIO_TogglePin>
    	}

	 */

	// Réactivez la réception UART pour la prochaine commande
	HAL_UART_Receive_IT(&huart1,RX_BUFFER,Rx_len);
 80008fa:	2203      	movs	r2, #3
 80008fc:	4904      	ldr	r1, [pc, #16]	; (8000910 <HAL_UART_RxCpltCallback+0x30>)
 80008fe:	4803      	ldr	r0, [pc, #12]	; (800090c <HAL_UART_RxCpltCallback+0x2c>)
 8000900:	f004 fb1a 	bl	8004f38 <HAL_UART_Receive_IT>
	}

}
 8000904:	bf00      	nop
 8000906:	3708      	adds	r7, #8
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	200000d8 	.word	0x200000d8
 8000910:	20000160 	.word	0x20000160

08000914 <MAP>:

uint32_t MAP(uint32_t au32_IN, uint32_t au32_INmin, uint32_t au32_INmax, uint32_t au32_OUTmin, uint32_t au32_OUTmax)
{
 8000914:	b480      	push	{r7}
 8000916:	b085      	sub	sp, #20
 8000918:	af00      	add	r7, sp, #0
 800091a:	60f8      	str	r0, [r7, #12]
 800091c:	60b9      	str	r1, [r7, #8]
 800091e:	607a      	str	r2, [r7, #4]
 8000920:	603b      	str	r3, [r7, #0]
	return ((((au32_IN - au32_INmin)*(au32_OUTmax - au32_OUTmin))/(au32_INmax - au32_INmin)) + au32_OUTmin);
 8000922:	68fa      	ldr	r2, [r7, #12]
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	1ad3      	subs	r3, r2, r3
 8000928:	69b9      	ldr	r1, [r7, #24]
 800092a:	683a      	ldr	r2, [r7, #0]
 800092c:	1a8a      	subs	r2, r1, r2
 800092e:	fb03 f202 	mul.w	r2, r3, r2
 8000932:	6879      	ldr	r1, [r7, #4]
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	1acb      	subs	r3, r1, r3
 8000938:	fbb2 f2f3 	udiv	r2, r2, r3
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	4413      	add	r3, r2
}
 8000940:	4618      	mov	r0, r3
 8000942:	3714      	adds	r7, #20
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr

0800094c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000950:	b672      	cpsid	i
}
 8000952:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000954:	e7fe      	b.n	8000954 <Error_Handler+0x8>
	...

08000958 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095e:	4b0f      	ldr	r3, [pc, #60]	; (800099c <HAL_MspInit+0x44>)
 8000960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000962:	4a0e      	ldr	r2, [pc, #56]	; (800099c <HAL_MspInit+0x44>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	6613      	str	r3, [r2, #96]	; 0x60
 800096a:	4b0c      	ldr	r3, [pc, #48]	; (800099c <HAL_MspInit+0x44>)
 800096c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000976:	4b09      	ldr	r3, [pc, #36]	; (800099c <HAL_MspInit+0x44>)
 8000978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800097a:	4a08      	ldr	r2, [pc, #32]	; (800099c <HAL_MspInit+0x44>)
 800097c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000980:	6593      	str	r3, [r2, #88]	; 0x58
 8000982:	4b06      	ldr	r3, [pc, #24]	; (800099c <HAL_MspInit+0x44>)
 8000984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098a:	603b      	str	r3, [r7, #0]
 800098c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800098e:	bf00      	nop
 8000990:	370c      	adds	r7, #12
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	40021000 	.word	0x40021000

080009a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b0ac      	sub	sp, #176	; 0xb0
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
 80009b4:	60da      	str	r2, [r3, #12]
 80009b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009b8:	f107 0314 	add.w	r3, r7, #20
 80009bc:	2288      	movs	r2, #136	; 0x88
 80009be:	2100      	movs	r1, #0
 80009c0:	4618      	mov	r0, r3
 80009c2:	f005 fd50 	bl	8006466 <memset>
  if(hadc->Instance==ADC1)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4a27      	ldr	r2, [pc, #156]	; (8000a68 <HAL_ADC_MspInit+0xc8>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d146      	bne.n	8000a5e <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80009d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80009d4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80009d6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80009da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80009de:	2301      	movs	r3, #1
 80009e0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80009e2:	2301      	movs	r3, #1
 80009e4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80009e6:	2310      	movs	r3, #16
 80009e8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80009ea:	2307      	movs	r3, #7
 80009ec:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80009ee:	2302      	movs	r3, #2
 80009f0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80009f2:	2302      	movs	r3, #2
 80009f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80009f6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80009fa:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	4618      	mov	r0, r3
 8000a02:	f002 feff 	bl	8003804 <HAL_RCCEx_PeriphCLKConfig>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000a0c:	f7ff ff9e 	bl	800094c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000a10:	4b16      	ldr	r3, [pc, #88]	; (8000a6c <HAL_ADC_MspInit+0xcc>)
 8000a12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a14:	4a15      	ldr	r2, [pc, #84]	; (8000a6c <HAL_ADC_MspInit+0xcc>)
 8000a16:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a1c:	4b13      	ldr	r3, [pc, #76]	; (8000a6c <HAL_ADC_MspInit+0xcc>)
 8000a1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a24:	613b      	str	r3, [r7, #16]
 8000a26:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a28:	4b10      	ldr	r3, [pc, #64]	; (8000a6c <HAL_ADC_MspInit+0xcc>)
 8000a2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2c:	4a0f      	ldr	r2, [pc, #60]	; (8000a6c <HAL_ADC_MspInit+0xcc>)
 8000a2e:	f043 0304 	orr.w	r3, r3, #4
 8000a32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a34:	4b0d      	ldr	r3, [pc, #52]	; (8000a6c <HAL_ADC_MspInit+0xcc>)
 8000a36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a38:	f003 0304 	and.w	r3, r3, #4
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a40:	2301      	movs	r3, #1
 8000a42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a46:	230b      	movs	r3, #11
 8000a48:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a52:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a56:	4619      	mov	r1, r3
 8000a58:	4805      	ldr	r0, [pc, #20]	; (8000a70 <HAL_ADC_MspInit+0xd0>)
 8000a5a:	f001 fe93 	bl	8002784 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a5e:	bf00      	nop
 8000a60:	37b0      	adds	r7, #176	; 0xb0
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	50040000 	.word	0x50040000
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	48000800 	.word	0x48000800

08000a74 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b085      	sub	sp, #20
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a84:	d10b      	bne.n	8000a9e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a86:	4b09      	ldr	r3, [pc, #36]	; (8000aac <HAL_TIM_PWM_MspInit+0x38>)
 8000a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a8a:	4a08      	ldr	r2, [pc, #32]	; (8000aac <HAL_TIM_PWM_MspInit+0x38>)
 8000a8c:	f043 0301 	orr.w	r3, r3, #1
 8000a90:	6593      	str	r3, [r2, #88]	; 0x58
 8000a92:	4b06      	ldr	r3, [pc, #24]	; (8000aac <HAL_TIM_PWM_MspInit+0x38>)
 8000a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a96:	f003 0301 	and.w	r3, r3, #1
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a9e:	bf00      	nop
 8000aa0:	3714      	adds	r7, #20
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	40021000 	.word	0x40021000

08000ab0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b088      	sub	sp, #32
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab8:	f107 030c 	add.w	r3, r7, #12
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	60da      	str	r2, [r3, #12]
 8000ac6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ad0:	d11c      	bne.n	8000b0c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad2:	4b10      	ldr	r3, [pc, #64]	; (8000b14 <HAL_TIM_MspPostInit+0x64>)
 8000ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad6:	4a0f      	ldr	r2, [pc, #60]	; (8000b14 <HAL_TIM_MspPostInit+0x64>)
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ade:	4b0d      	ldr	r3, [pc, #52]	; (8000b14 <HAL_TIM_MspPostInit+0x64>)
 8000ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	60bb      	str	r3, [r7, #8]
 8000ae8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000aea:	2303      	movs	r3, #3
 8000aec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aee:	2302      	movs	r3, #2
 8000af0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000afa:	2301      	movs	r3, #1
 8000afc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afe:	f107 030c 	add.w	r3, r7, #12
 8000b02:	4619      	mov	r1, r3
 8000b04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b08:	f001 fe3c 	bl	8002784 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000b0c:	bf00      	nop
 8000b0e:	3720      	adds	r7, #32
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40021000 	.word	0x40021000

08000b18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b0ac      	sub	sp, #176	; 0xb0
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b20:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
 8000b2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	2288      	movs	r2, #136	; 0x88
 8000b36:	2100      	movs	r1, #0
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f005 fc94 	bl	8006466 <memset>
  if(huart->Instance==USART1)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a26      	ldr	r2, [pc, #152]	; (8000bdc <HAL_UART_MspInit+0xc4>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d144      	bne.n	8000bd2 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	4618      	mov	r0, r3
 8000b56:	f002 fe55 	bl	8003804 <HAL_RCCEx_PeriphCLKConfig>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b60:	f7ff fef4 	bl	800094c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b64:	4b1e      	ldr	r3, [pc, #120]	; (8000be0 <HAL_UART_MspInit+0xc8>)
 8000b66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b68:	4a1d      	ldr	r2, [pc, #116]	; (8000be0 <HAL_UART_MspInit+0xc8>)
 8000b6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b6e:	6613      	str	r3, [r2, #96]	; 0x60
 8000b70:	4b1b      	ldr	r3, [pc, #108]	; (8000be0 <HAL_UART_MspInit+0xc8>)
 8000b72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b78:	613b      	str	r3, [r7, #16]
 8000b7a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7c:	4b18      	ldr	r3, [pc, #96]	; (8000be0 <HAL_UART_MspInit+0xc8>)
 8000b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b80:	4a17      	ldr	r2, [pc, #92]	; (8000be0 <HAL_UART_MspInit+0xc8>)
 8000b82:	f043 0301 	orr.w	r3, r3, #1
 8000b86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b88:	4b15      	ldr	r3, [pc, #84]	; (8000be0 <HAL_UART_MspInit+0xc8>)
 8000b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8c:	f003 0301 	and.w	r3, r3, #1
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b94:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba8:	2303      	movs	r3, #3
 8000baa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000bae:	2307      	movs	r3, #7
 8000bb0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000bb8:	4619      	mov	r1, r3
 8000bba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bbe:	f001 fde1 	bl	8002784 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	2025      	movs	r0, #37	; 0x25
 8000bc8:	f001 fd27 	bl	800261a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000bcc:	2025      	movs	r0, #37	; 0x25
 8000bce:	f001 fd40 	bl	8002652 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000bd2:	bf00      	nop
 8000bd4:	37b0      	adds	r7, #176	; 0xb0
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40013800 	.word	0x40013800
 8000be0:	40021000 	.word	0x40021000

08000be4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000be8:	e7fe      	b.n	8000be8 <NMI_Handler+0x4>

08000bea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bee:	e7fe      	b.n	8000bee <HardFault_Handler+0x4>

08000bf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf4:	e7fe      	b.n	8000bf4 <MemManage_Handler+0x4>

08000bf6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bfa:	e7fe      	b.n	8000bfa <BusFault_Handler+0x4>

08000bfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <UsageFault_Handler+0x4>

08000c02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr

08000c10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr

08000c1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr

08000c2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c30:	f000 f89c 	bl	8000d6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c34:	bf00      	nop
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c3c:	4802      	ldr	r0, [pc, #8]	; (8000c48 <USART1_IRQHandler+0x10>)
 8000c3e:	f004 f9d1 	bl	8004fe4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	200000d8 	.word	0x200000d8

08000c4c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c50:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <SystemInit+0x20>)
 8000c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c56:	4a05      	ldr	r2, [pc, #20]	; (8000c6c <SystemInit+0x20>)
 8000c58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ca8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c74:	f7ff ffea 	bl	8000c4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c78:	480c      	ldr	r0, [pc, #48]	; (8000cac <LoopForever+0x6>)
  ldr r1, =_edata
 8000c7a:	490d      	ldr	r1, [pc, #52]	; (8000cb0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c7c:	4a0d      	ldr	r2, [pc, #52]	; (8000cb4 <LoopForever+0xe>)
  movs r3, #0
 8000c7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c80:	e002      	b.n	8000c88 <LoopCopyDataInit>

08000c82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c86:	3304      	adds	r3, #4

08000c88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c8c:	d3f9      	bcc.n	8000c82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c8e:	4a0a      	ldr	r2, [pc, #40]	; (8000cb8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c90:	4c0a      	ldr	r4, [pc, #40]	; (8000cbc <LoopForever+0x16>)
  movs r3, #0
 8000c92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c94:	e001      	b.n	8000c9a <LoopFillZerobss>

08000c96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c98:	3204      	adds	r2, #4

08000c9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c9c:	d3fb      	bcc.n	8000c96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c9e:	f005 fbeb 	bl	8006478 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ca2:	f7ff fc0f 	bl	80004c4 <main>

08000ca6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ca6:	e7fe      	b.n	8000ca6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ca8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000cac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000cb4:	08006530 	.word	0x08006530
  ldr r2, =_sbss
 8000cb8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000cbc:	20000168 	.word	0x20000168

08000cc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cc0:	e7fe      	b.n	8000cc0 <ADC1_2_IRQHandler>

08000cc2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b082      	sub	sp, #8
 8000cc6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ccc:	2003      	movs	r0, #3
 8000cce:	f001 fc99 	bl	8002604 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cd2:	200f      	movs	r0, #15
 8000cd4:	f000 f80e 	bl	8000cf4 <HAL_InitTick>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d002      	beq.n	8000ce4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	71fb      	strb	r3, [r7, #7]
 8000ce2:	e001      	b.n	8000ce8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ce4:	f7ff fe38 	bl	8000958 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
	...

08000cf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d00:	4b17      	ldr	r3, [pc, #92]	; (8000d60 <HAL_InitTick+0x6c>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d023      	beq.n	8000d50 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d08:	4b16      	ldr	r3, [pc, #88]	; (8000d64 <HAL_InitTick+0x70>)
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	4b14      	ldr	r3, [pc, #80]	; (8000d60 <HAL_InitTick+0x6c>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	4619      	mov	r1, r3
 8000d12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f001 fca5 	bl	800266e <HAL_SYSTICK_Config>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d10f      	bne.n	8000d4a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2b0f      	cmp	r3, #15
 8000d2e:	d809      	bhi.n	8000d44 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d30:	2200      	movs	r2, #0
 8000d32:	6879      	ldr	r1, [r7, #4]
 8000d34:	f04f 30ff 	mov.w	r0, #4294967295
 8000d38:	f001 fc6f 	bl	800261a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d3c:	4a0a      	ldr	r2, [pc, #40]	; (8000d68 <HAL_InitTick+0x74>)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6013      	str	r3, [r2, #0]
 8000d42:	e007      	b.n	8000d54 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d44:	2301      	movs	r3, #1
 8000d46:	73fb      	strb	r3, [r7, #15]
 8000d48:	e004      	b.n	8000d54 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	73fb      	strb	r3, [r7, #15]
 8000d4e:	e001      	b.n	8000d54 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d50:	2301      	movs	r3, #1
 8000d52:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20000008 	.word	0x20000008
 8000d64:	20000000 	.word	0x20000000
 8000d68:	20000004 	.word	0x20000004

08000d6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d70:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <HAL_IncTick+0x20>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	461a      	mov	r2, r3
 8000d76:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <HAL_IncTick+0x24>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	4a04      	ldr	r2, [pc, #16]	; (8000d90 <HAL_IncTick+0x24>)
 8000d7e:	6013      	str	r3, [r2, #0]
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	20000008 	.word	0x20000008
 8000d90:	20000164 	.word	0x20000164

08000d94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  return uwTick;
 8000d98:	4b03      	ldr	r3, [pc, #12]	; (8000da8 <HAL_GetTick+0x14>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	20000164 	.word	0x20000164

08000dac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000db4:	f7ff ffee 	bl	8000d94 <HAL_GetTick>
 8000db8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dc4:	d005      	beq.n	8000dd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000dc6:	4b0a      	ldr	r3, [pc, #40]	; (8000df0 <HAL_Delay+0x44>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	461a      	mov	r2, r3
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	4413      	add	r3, r2
 8000dd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dd2:	bf00      	nop
 8000dd4:	f7ff ffde 	bl	8000d94 <HAL_GetTick>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	68fa      	ldr	r2, [r7, #12]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d8f7      	bhi.n	8000dd4 <HAL_Delay+0x28>
  {
  }
}
 8000de4:	bf00      	nop
 8000de6:	bf00      	nop
 8000de8:	3710      	adds	r7, #16
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	20000008 	.word	0x20000008

08000df4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	689b      	ldr	r3, [r3, #8]
 8000e02:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	431a      	orrs	r2, r3
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	609a      	str	r2, [r3, #8]
}
 8000e0e:	bf00      	nop
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr

08000e1a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	b083      	sub	sp, #12
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
 8000e22:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	431a      	orrs	r2, r3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	609a      	str	r2, [r3, #8]
}
 8000e34:	bf00      	nop
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	689b      	ldr	r3, [r3, #8]
 8000e4c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr

08000e5c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b087      	sub	sp, #28
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60f8      	str	r0, [r7, #12]
 8000e64:	60b9      	str	r1, [r7, #8]
 8000e66:	607a      	str	r2, [r7, #4]
 8000e68:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	3360      	adds	r3, #96	; 0x60
 8000e6e:	461a      	mov	r2, r3
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	4413      	add	r3, r2
 8000e76:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	4b08      	ldr	r3, [pc, #32]	; (8000ea0 <LL_ADC_SetOffset+0x44>)
 8000e7e:	4013      	ands	r3, r2
 8000e80:	687a      	ldr	r2, [r7, #4]
 8000e82:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000e86:	683a      	ldr	r2, [r7, #0]
 8000e88:	430a      	orrs	r2, r1
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000e94:	bf00      	nop
 8000e96:	371c      	adds	r7, #28
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	03fff000 	.word	0x03fff000

08000ea4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	3360      	adds	r3, #96	; 0x60
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	4413      	add	r3, r2
 8000eba:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3714      	adds	r7, #20
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr

08000ed0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b087      	sub	sp, #28
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	60b9      	str	r1, [r7, #8]
 8000eda:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	3360      	adds	r3, #96	; 0x60
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	4413      	add	r3, r2
 8000ee8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	431a      	orrs	r2, r3
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000efa:	bf00      	nop
 8000efc:	371c      	adds	r7, #28
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr

08000f06 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000f06:	b480      	push	{r7}
 8000f08:	b083      	sub	sp, #12
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	68db      	ldr	r3, [r3, #12]
 8000f12:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d101      	bne.n	8000f1e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e000      	b.n	8000f20 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000f1e:	2300      	movs	r3, #0
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b087      	sub	sp, #28
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	3330      	adds	r3, #48	; 0x30
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	0a1b      	lsrs	r3, r3, #8
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	f003 030c 	and.w	r3, r3, #12
 8000f48:	4413      	add	r3, r2
 8000f4a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	f003 031f 	and.w	r3, r3, #31
 8000f56:	211f      	movs	r1, #31
 8000f58:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	401a      	ands	r2, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	0e9b      	lsrs	r3, r3, #26
 8000f64:	f003 011f 	and.w	r1, r3, #31
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	f003 031f 	and.w	r3, r3, #31
 8000f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f72:	431a      	orrs	r2, r3
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000f78:	bf00      	nop
 8000f7a:	371c      	adds	r7, #28
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b087      	sub	sp, #28
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	3314      	adds	r3, #20
 8000f94:	461a      	mov	r2, r3
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	0e5b      	lsrs	r3, r3, #25
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	f003 0304 	and.w	r3, r3, #4
 8000fa0:	4413      	add	r3, r2
 8000fa2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	0d1b      	lsrs	r3, r3, #20
 8000fac:	f003 031f 	and.w	r3, r3, #31
 8000fb0:	2107      	movs	r1, #7
 8000fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	401a      	ands	r2, r3
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	0d1b      	lsrs	r3, r3, #20
 8000fbe:	f003 031f 	and.w	r3, r3, #31
 8000fc2:	6879      	ldr	r1, [r7, #4]
 8000fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc8:	431a      	orrs	r2, r3
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000fce:	bf00      	nop
 8000fd0:	371c      	adds	r7, #28
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
	...

08000fdc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	401a      	ands	r2, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f003 0318 	and.w	r3, r3, #24
 8000ffe:	4908      	ldr	r1, [pc, #32]	; (8001020 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001000:	40d9      	lsrs	r1, r3
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	400b      	ands	r3, r1
 8001006:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800100a:	431a      	orrs	r2, r3
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001012:	bf00      	nop
 8001014:	3714      	adds	r7, #20
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	0007ffff 	.word	0x0007ffff

08001024 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	689b      	ldr	r3, [r3, #8]
 8001030:	f003 031f 	and.w	r3, r3, #31
}
 8001034:	4618      	mov	r0, r3
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001050:	4618      	mov	r0, r3
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800106c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	6093      	str	r3, [r2, #8]
}
 8001074:	bf00      	nop
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001090:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001094:	d101      	bne.n	800109a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001096:	2301      	movs	r3, #1
 8001098:	e000      	b.n	800109c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800109a:	2300      	movs	r3, #0
}
 800109c:	4618      	mov	r0, r3
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80010b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010bc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80010e4:	d101      	bne.n	80010ea <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80010e6:	2301      	movs	r3, #1
 80010e8:	e000      	b.n	80010ec <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80010ea:	2300      	movs	r3, #0
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001108:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800110c:	f043 0201 	orr.w	r2, r3, #1
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001114:	bf00      	nop
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001130:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001134:	f043 0202 	orr.w	r2, r3, #2
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	f003 0301 	and.w	r3, r3, #1
 8001158:	2b01      	cmp	r3, #1
 800115a:	d101      	bne.n	8001160 <LL_ADC_IsEnabled+0x18>
 800115c:	2301      	movs	r3, #1
 800115e:	e000      	b.n	8001162 <LL_ADC_IsEnabled+0x1a>
 8001160:	2300      	movs	r3, #0
}
 8001162:	4618      	mov	r0, r3
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr

0800116e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800116e:	b480      	push	{r7}
 8001170:	b083      	sub	sp, #12
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	f003 0302 	and.w	r3, r3, #2
 800117e:	2b02      	cmp	r3, #2
 8001180:	d101      	bne.n	8001186 <LL_ADC_IsDisableOngoing+0x18>
 8001182:	2301      	movs	r3, #1
 8001184:	e000      	b.n	8001188 <LL_ADC_IsDisableOngoing+0x1a>
 8001186:	2300      	movs	r3, #0
}
 8001188:	4618      	mov	r0, r3
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80011a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011a8:	f043 0204 	orr.w	r2, r3, #4
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr

080011bc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	f003 0304 	and.w	r3, r3, #4
 80011cc:	2b04      	cmp	r3, #4
 80011ce:	d101      	bne.n	80011d4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80011d0:	2301      	movs	r3, #1
 80011d2:	e000      	b.n	80011d6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr

080011e2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80011e2:	b480      	push	{r7}
 80011e4:	b083      	sub	sp, #12
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	f003 0308 	and.w	r3, r3, #8
 80011f2:	2b08      	cmp	r3, #8
 80011f4:	d101      	bne.n	80011fa <LL_ADC_INJ_IsConversionOngoing+0x18>
 80011f6:	2301      	movs	r3, #1
 80011f8:	e000      	b.n	80011fc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80011fa:	2300      	movs	r3, #0
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001208:	b590      	push	{r4, r7, lr}
 800120a:	b089      	sub	sp, #36	; 0x24
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001210:	2300      	movs	r3, #0
 8001212:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001214:	2300      	movs	r3, #0
 8001216:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d101      	bne.n	8001222 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e136      	b.n	8001490 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	691b      	ldr	r3, [r3, #16]
 8001226:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800122c:	2b00      	cmp	r3, #0
 800122e:	d109      	bne.n	8001244 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f7ff fbb5 	bl	80009a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2200      	movs	r2, #0
 800123a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2200      	movs	r2, #0
 8001240:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff ff19 	bl	8001080 <LL_ADC_IsDeepPowerDownEnabled>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d004      	beq.n	800125e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff feff 	bl	800105c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff ff34 	bl	80010d0 <LL_ADC_IsInternalRegulatorEnabled>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d115      	bne.n	800129a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff ff18 	bl	80010a8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001278:	4b87      	ldr	r3, [pc, #540]	; (8001498 <HAL_ADC_Init+0x290>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	099b      	lsrs	r3, r3, #6
 800127e:	4a87      	ldr	r2, [pc, #540]	; (800149c <HAL_ADC_Init+0x294>)
 8001280:	fba2 2303 	umull	r2, r3, r2, r3
 8001284:	099b      	lsrs	r3, r3, #6
 8001286:	3301      	adds	r3, #1
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800128c:	e002      	b.n	8001294 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	3b01      	subs	r3, #1
 8001292:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1f9      	bne.n	800128e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff ff16 	bl	80010d0 <LL_ADC_IsInternalRegulatorEnabled>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d10d      	bne.n	80012c6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012ae:	f043 0210 	orr.w	r2, r3, #16
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ba:	f043 0201 	orr.w	r2, r3, #1
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff ff76 	bl	80011bc <LL_ADC_REG_IsConversionOngoing>
 80012d0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012d6:	f003 0310 	and.w	r3, r3, #16
 80012da:	2b00      	cmp	r3, #0
 80012dc:	f040 80cf 	bne.w	800147e <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	f040 80cb 	bne.w	800147e <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012ec:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80012f0:	f043 0202 	orr.w	r2, r3, #2
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff ff23 	bl	8001148 <LL_ADC_IsEnabled>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d115      	bne.n	8001334 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001308:	4865      	ldr	r0, [pc, #404]	; (80014a0 <HAL_ADC_Init+0x298>)
 800130a:	f7ff ff1d 	bl	8001148 <LL_ADC_IsEnabled>
 800130e:	4604      	mov	r4, r0
 8001310:	4864      	ldr	r0, [pc, #400]	; (80014a4 <HAL_ADC_Init+0x29c>)
 8001312:	f7ff ff19 	bl	8001148 <LL_ADC_IsEnabled>
 8001316:	4603      	mov	r3, r0
 8001318:	431c      	orrs	r4, r3
 800131a:	4863      	ldr	r0, [pc, #396]	; (80014a8 <HAL_ADC_Init+0x2a0>)
 800131c:	f7ff ff14 	bl	8001148 <LL_ADC_IsEnabled>
 8001320:	4603      	mov	r3, r0
 8001322:	4323      	orrs	r3, r4
 8001324:	2b00      	cmp	r3, #0
 8001326:	d105      	bne.n	8001334 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	4619      	mov	r1, r3
 800132e:	485f      	ldr	r0, [pc, #380]	; (80014ac <HAL_ADC_Init+0x2a4>)
 8001330:	f7ff fd60 	bl	8000df4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	7e5b      	ldrb	r3, [r3, #25]
 8001338:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800133e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001344:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800134a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001352:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001354:	4313      	orrs	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d106      	bne.n	8001370 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001366:	3b01      	subs	r3, #1
 8001368:	045b      	lsls	r3, r3, #17
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	4313      	orrs	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001374:	2b00      	cmp	r3, #0
 8001376:	d009      	beq.n	800138c <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800137c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001384:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4313      	orrs	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	68da      	ldr	r2, [r3, #12]
 8001392:	4b47      	ldr	r3, [pc, #284]	; (80014b0 <HAL_ADC_Init+0x2a8>)
 8001394:	4013      	ands	r3, r2
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	6812      	ldr	r2, [r2, #0]
 800139a:	69b9      	ldr	r1, [r7, #24]
 800139c:	430b      	orrs	r3, r1
 800139e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff ff09 	bl	80011bc <LL_ADC_REG_IsConversionOngoing>
 80013aa:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff ff16 	bl	80011e2 <LL_ADC_INJ_IsConversionOngoing>
 80013b6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d13d      	bne.n	800143a <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d13a      	bne.n	800143a <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80013c8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80013d0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80013d2:	4313      	orrs	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80013e0:	f023 0302 	bic.w	r3, r3, #2
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	6812      	ldr	r2, [r2, #0]
 80013e8:	69b9      	ldr	r1, [r7, #24]
 80013ea:	430b      	orrs	r3, r1
 80013ec:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d118      	bne.n	800142a <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	691b      	ldr	r3, [r3, #16]
 80013fe:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001402:	f023 0304 	bic.w	r3, r3, #4
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800140e:	4311      	orrs	r1, r2
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001414:	4311      	orrs	r1, r2
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800141a:	430a      	orrs	r2, r1
 800141c:	431a      	orrs	r2, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f042 0201 	orr.w	r2, r2, #1
 8001426:	611a      	str	r2, [r3, #16]
 8001428:	e007      	b.n	800143a <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	691a      	ldr	r2, [r3, #16]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f022 0201 	bic.w	r2, r2, #1
 8001438:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	691b      	ldr	r3, [r3, #16]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d10c      	bne.n	800145c <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001448:	f023 010f 	bic.w	r1, r3, #15
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	69db      	ldr	r3, [r3, #28]
 8001450:	1e5a      	subs	r2, r3, #1
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	430a      	orrs	r2, r1
 8001458:	631a      	str	r2, [r3, #48]	; 0x30
 800145a:	e007      	b.n	800146c <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f022 020f 	bic.w	r2, r2, #15
 800146a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001470:	f023 0303 	bic.w	r3, r3, #3
 8001474:	f043 0201 	orr.w	r2, r3, #1
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	655a      	str	r2, [r3, #84]	; 0x54
 800147c:	e007      	b.n	800148e <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001482:	f043 0210 	orr.w	r2, r3, #16
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800148e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001490:	4618      	mov	r0, r3
 8001492:	3724      	adds	r7, #36	; 0x24
 8001494:	46bd      	mov	sp, r7
 8001496:	bd90      	pop	{r4, r7, pc}
 8001498:	20000000 	.word	0x20000000
 800149c:	053e2d63 	.word	0x053e2d63
 80014a0:	50040000 	.word	0x50040000
 80014a4:	50040100 	.word	0x50040100
 80014a8:	50040200 	.word	0x50040200
 80014ac:	50040300 	.word	0x50040300
 80014b0:	fff0c007 	.word	0xfff0c007

080014b4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80014bc:	4857      	ldr	r0, [pc, #348]	; (800161c <HAL_ADC_Start+0x168>)
 80014be:	f7ff fdb1 	bl	8001024 <LL_ADC_GetMultimode>
 80014c2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff fe77 	bl	80011bc <LL_ADC_REG_IsConversionOngoing>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	f040 809c 	bne.w	800160e <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d101      	bne.n	80014e4 <HAL_ADC_Start+0x30>
 80014e0:	2302      	movs	r3, #2
 80014e2:	e097      	b.n	8001614 <HAL_ADC_Start+0x160>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2201      	movs	r2, #1
 80014e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f000 fd71 	bl	8001fd4 <ADC_Enable>
 80014f2:	4603      	mov	r3, r0
 80014f4:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80014f6:	7dfb      	ldrb	r3, [r7, #23]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	f040 8083 	bne.w	8001604 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001502:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001506:	f023 0301 	bic.w	r3, r3, #1
 800150a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a42      	ldr	r2, [pc, #264]	; (8001620 <HAL_ADC_Start+0x16c>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d002      	beq.n	8001522 <HAL_ADC_Start+0x6e>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	e000      	b.n	8001524 <HAL_ADC_Start+0x70>
 8001522:	4b40      	ldr	r3, [pc, #256]	; (8001624 <HAL_ADC_Start+0x170>)
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	6812      	ldr	r2, [r2, #0]
 8001528:	4293      	cmp	r3, r2
 800152a:	d002      	beq.n	8001532 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d105      	bne.n	800153e <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001536:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001542:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001546:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800154a:	d106      	bne.n	800155a <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001550:	f023 0206 	bic.w	r2, r3, #6
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	659a      	str	r2, [r3, #88]	; 0x58
 8001558:	e002      	b.n	8001560 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	221c      	movs	r2, #28
 8001566:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a2a      	ldr	r2, [pc, #168]	; (8001620 <HAL_ADC_Start+0x16c>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d002      	beq.n	8001580 <HAL_ADC_Start+0xcc>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	e000      	b.n	8001582 <HAL_ADC_Start+0xce>
 8001580:	4b28      	ldr	r3, [pc, #160]	; (8001624 <HAL_ADC_Start+0x170>)
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	6812      	ldr	r2, [r2, #0]
 8001586:	4293      	cmp	r3, r2
 8001588:	d008      	beq.n	800159c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d005      	beq.n	800159c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	2b05      	cmp	r3, #5
 8001594:	d002      	beq.n	800159c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	2b09      	cmp	r3, #9
 800159a:	d114      	bne.n	80015c6 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	68db      	ldr	r3, [r3, #12]
 80015a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d007      	beq.n	80015ba <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80015b2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff fde8 	bl	8001194 <LL_ADC_REG_StartConversion>
 80015c4:	e025      	b.n	8001612 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a12      	ldr	r2, [pc, #72]	; (8001620 <HAL_ADC_Start+0x16c>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d002      	beq.n	80015e2 <HAL_ADC_Start+0x12e>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	e000      	b.n	80015e4 <HAL_ADC_Start+0x130>
 80015e2:	4b10      	ldr	r3, [pc, #64]	; (8001624 <HAL_ADC_Start+0x170>)
 80015e4:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d00f      	beq.n	8001612 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015f6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80015fa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	655a      	str	r2, [r3, #84]	; 0x54
 8001602:	e006      	b.n	8001612 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800160c:	e001      	b.n	8001612 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800160e:	2302      	movs	r3, #2
 8001610:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001612:	7dfb      	ldrb	r3, [r7, #23]
}
 8001614:	4618      	mov	r0, r3
 8001616:	3718      	adds	r7, #24
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	50040300 	.word	0x50040300
 8001620:	50040100 	.word	0x50040100
 8001624:	50040000 	.word	0x50040000

08001628 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b088      	sub	sp, #32
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001632:	4866      	ldr	r0, [pc, #408]	; (80017cc <HAL_ADC_PollForConversion+0x1a4>)
 8001634:	f7ff fcf6 	bl	8001024 <LL_ADC_GetMultimode>
 8001638:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	2b08      	cmp	r3, #8
 8001640:	d102      	bne.n	8001648 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001642:	2308      	movs	r3, #8
 8001644:	61fb      	str	r3, [r7, #28]
 8001646:	e02a      	b.n	800169e <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d005      	beq.n	800165a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	2b05      	cmp	r3, #5
 8001652:	d002      	beq.n	800165a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	2b09      	cmp	r3, #9
 8001658:	d111      	bne.n	800167e <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	f003 0301 	and.w	r3, r3, #1
 8001664:	2b00      	cmp	r3, #0
 8001666:	d007      	beq.n	8001678 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800166c:	f043 0220 	orr.w	r2, r3, #32
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e0a4      	b.n	80017c2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001678:	2304      	movs	r3, #4
 800167a:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800167c:	e00f      	b.n	800169e <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800167e:	4853      	ldr	r0, [pc, #332]	; (80017cc <HAL_ADC_PollForConversion+0x1a4>)
 8001680:	f7ff fcde 	bl	8001040 <LL_ADC_GetMultiDMATransfer>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d007      	beq.n	800169a <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800168e:	f043 0220 	orr.w	r2, r3, #32
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e093      	b.n	80017c2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800169a:	2304      	movs	r3, #4
 800169c:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800169e:	f7ff fb79 	bl	8000d94 <HAL_GetTick>
 80016a2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80016a4:	e021      	b.n	80016ea <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016ac:	d01d      	beq.n	80016ea <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80016ae:	f7ff fb71 	bl	8000d94 <HAL_GetTick>
 80016b2:	4602      	mov	r2, r0
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	683a      	ldr	r2, [r7, #0]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d302      	bcc.n	80016c4 <HAL_ADC_PollForConversion+0x9c>
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d112      	bne.n	80016ea <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	4013      	ands	r3, r2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d10b      	bne.n	80016ea <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016d6:	f043 0204 	orr.w	r2, r3, #4
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e06b      	b.n	80017c2 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	4013      	ands	r3, r2
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d0d6      	beq.n	80016a6 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016fc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff fbfc 	bl	8000f06 <LL_ADC_REG_IsTriggerSourceSWStart>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d01c      	beq.n	800174e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	7e5b      	ldrb	r3, [r3, #25]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d118      	bne.n	800174e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0308 	and.w	r3, r3, #8
 8001726:	2b08      	cmp	r3, #8
 8001728:	d111      	bne.n	800174e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800172e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800173a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d105      	bne.n	800174e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001746:	f043 0201 	orr.w	r2, r3, #1
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a1f      	ldr	r2, [pc, #124]	; (80017d0 <HAL_ADC_PollForConversion+0x1a8>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d002      	beq.n	800175e <HAL_ADC_PollForConversion+0x136>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	e000      	b.n	8001760 <HAL_ADC_PollForConversion+0x138>
 800175e:	4b1d      	ldr	r3, [pc, #116]	; (80017d4 <HAL_ADC_PollForConversion+0x1ac>)
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	6812      	ldr	r2, [r2, #0]
 8001764:	4293      	cmp	r3, r2
 8001766:	d008      	beq.n	800177a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d005      	beq.n	800177a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	2b05      	cmp	r3, #5
 8001772:	d002      	beq.n	800177a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	2b09      	cmp	r3, #9
 8001778:	d104      	bne.n	8001784 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	61bb      	str	r3, [r7, #24]
 8001782:	e00c      	b.n	800179e <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a11      	ldr	r2, [pc, #68]	; (80017d0 <HAL_ADC_PollForConversion+0x1a8>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d002      	beq.n	8001794 <HAL_ADC_PollForConversion+0x16c>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	e000      	b.n	8001796 <HAL_ADC_PollForConversion+0x16e>
 8001794:	4b0f      	ldr	r3, [pc, #60]	; (80017d4 <HAL_ADC_PollForConversion+0x1ac>)
 8001796:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	2b08      	cmp	r3, #8
 80017a2:	d104      	bne.n	80017ae <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2208      	movs	r2, #8
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	e008      	b.n	80017c0 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d103      	bne.n	80017c0 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	220c      	movs	r2, #12
 80017be:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3720      	adds	r7, #32
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	50040300 	.word	0x50040300
 80017d0:	50040100 	.word	0x50040100
 80017d4:	50040000 	.word	0x50040000

080017d8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
	...

080017f4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b0b6      	sub	sp, #216	; 0xd8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017fe:	2300      	movs	r3, #0
 8001800:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001804:	2300      	movs	r3, #0
 8001806:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800180e:	2b01      	cmp	r3, #1
 8001810:	d101      	bne.n	8001816 <HAL_ADC_ConfigChannel+0x22>
 8001812:	2302      	movs	r3, #2
 8001814:	e3c7      	b.n	8001fa6 <HAL_ADC_ConfigChannel+0x7b2>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2201      	movs	r2, #1
 800181a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff fcca 	bl	80011bc <LL_ADC_REG_IsConversionOngoing>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	f040 83a8 	bne.w	8001f80 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	2b05      	cmp	r3, #5
 8001836:	d824      	bhi.n	8001882 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	3b02      	subs	r3, #2
 800183e:	2b03      	cmp	r3, #3
 8001840:	d81b      	bhi.n	800187a <HAL_ADC_ConfigChannel+0x86>
 8001842:	a201      	add	r2, pc, #4	; (adr r2, 8001848 <HAL_ADC_ConfigChannel+0x54>)
 8001844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001848:	08001859 	.word	0x08001859
 800184c:	08001861 	.word	0x08001861
 8001850:	08001869 	.word	0x08001869
 8001854:	08001871 	.word	0x08001871
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	220c      	movs	r2, #12
 800185c:	605a      	str	r2, [r3, #4]
          break;
 800185e:	e010      	b.n	8001882 <HAL_ADC_ConfigChannel+0x8e>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	2212      	movs	r2, #18
 8001864:	605a      	str	r2, [r3, #4]
          break;
 8001866:	e00c      	b.n	8001882 <HAL_ADC_ConfigChannel+0x8e>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	2218      	movs	r2, #24
 800186c:	605a      	str	r2, [r3, #4]
          break;
 800186e:	e008      	b.n	8001882 <HAL_ADC_ConfigChannel+0x8e>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001876:	605a      	str	r2, [r3, #4]
          break;
 8001878:	e003      	b.n	8001882 <HAL_ADC_ConfigChannel+0x8e>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	2206      	movs	r2, #6
 800187e:	605a      	str	r2, [r3, #4]
          break;
 8001880:	bf00      	nop
      }
    }
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6818      	ldr	r0, [r3, #0]
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	6859      	ldr	r1, [r3, #4]
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	461a      	mov	r2, r3
 8001890:	f7ff fb4c 	bl	8000f2c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff fc8f 	bl	80011bc <LL_ADC_REG_IsConversionOngoing>
 800189e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff fc9b 	bl	80011e2 <LL_ADC_INJ_IsConversionOngoing>
 80018ac:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80018b0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	f040 81a6 	bne.w	8001c06 <HAL_ADC_ConfigChannel+0x412>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80018ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80018be:	2b00      	cmp	r3, #0
 80018c0:	f040 81a1 	bne.w	8001c06 <HAL_ADC_ConfigChannel+0x412>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6818      	ldr	r0, [r3, #0]
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	6819      	ldr	r1, [r3, #0]
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	461a      	mov	r2, r3
 80018d2:	f7ff fb57 	bl	8000f84 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	695a      	ldr	r2, [r3, #20]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	08db      	lsrs	r3, r3, #3
 80018e2:	f003 0303 	and.w	r3, r3, #3
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	691b      	ldr	r3, [r3, #16]
 80018f4:	2b04      	cmp	r3, #4
 80018f6:	d00a      	beq.n	800190e <HAL_ADC_ConfigChannel+0x11a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6818      	ldr	r0, [r3, #0]
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	6919      	ldr	r1, [r3, #16]
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001908:	f7ff faa8 	bl	8000e5c <LL_ADC_SetOffset>
 800190c:	e17b      	b.n	8001c06 <HAL_ADC_ConfigChannel+0x412>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2100      	movs	r1, #0
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff fac5 	bl	8000ea4 <LL_ADC_GetOffsetChannel>
 800191a:	4603      	mov	r3, r0
 800191c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001920:	2b00      	cmp	r3, #0
 8001922:	d10a      	bne.n	800193a <HAL_ADC_ConfigChannel+0x146>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2100      	movs	r1, #0
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff faba 	bl	8000ea4 <LL_ADC_GetOffsetChannel>
 8001930:	4603      	mov	r3, r0
 8001932:	0e9b      	lsrs	r3, r3, #26
 8001934:	f003 021f 	and.w	r2, r3, #31
 8001938:	e01e      	b.n	8001978 <HAL_ADC_ConfigChannel+0x184>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2100      	movs	r1, #0
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff faaf 	bl	8000ea4 <LL_ADC_GetOffsetChannel>
 8001946:	4603      	mov	r3, r0
 8001948:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800194c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001950:	fa93 f3a3 	rbit	r3, r3
 8001954:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001958:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800195c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001960:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d101      	bne.n	800196c <HAL_ADC_ConfigChannel+0x178>
  {
    return 32U;
 8001968:	2320      	movs	r3, #32
 800196a:	e004      	b.n	8001976 <HAL_ADC_ConfigChannel+0x182>
  }
  return __builtin_clz(value);
 800196c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001970:	fab3 f383 	clz	r3, r3
 8001974:	b2db      	uxtb	r3, r3
 8001976:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001980:	2b00      	cmp	r3, #0
 8001982:	d105      	bne.n	8001990 <HAL_ADC_ConfigChannel+0x19c>
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	0e9b      	lsrs	r3, r3, #26
 800198a:	f003 031f 	and.w	r3, r3, #31
 800198e:	e018      	b.n	80019c2 <HAL_ADC_ConfigChannel+0x1ce>
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001998:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800199c:	fa93 f3a3 	rbit	r3, r3
 80019a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80019a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80019a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80019ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d101      	bne.n	80019b8 <HAL_ADC_ConfigChannel+0x1c4>
    return 32U;
 80019b4:	2320      	movs	r3, #32
 80019b6:	e004      	b.n	80019c2 <HAL_ADC_ConfigChannel+0x1ce>
  return __builtin_clz(value);
 80019b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80019bc:	fab3 f383 	clz	r3, r3
 80019c0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d106      	bne.n	80019d4 <HAL_ADC_ConfigChannel+0x1e0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2200      	movs	r2, #0
 80019cc:	2100      	movs	r1, #0
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff fa7e 	bl	8000ed0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2101      	movs	r1, #1
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff fa62 	bl	8000ea4 <LL_ADC_GetOffsetChannel>
 80019e0:	4603      	mov	r3, r0
 80019e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d10a      	bne.n	8001a00 <HAL_ADC_ConfigChannel+0x20c>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2101      	movs	r1, #1
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff fa57 	bl	8000ea4 <LL_ADC_GetOffsetChannel>
 80019f6:	4603      	mov	r3, r0
 80019f8:	0e9b      	lsrs	r3, r3, #26
 80019fa:	f003 021f 	and.w	r2, r3, #31
 80019fe:	e01e      	b.n	8001a3e <HAL_ADC_ConfigChannel+0x24a>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2101      	movs	r1, #1
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff fa4c 	bl	8000ea4 <LL_ADC_GetOffsetChannel>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001a16:	fa93 f3a3 	rbit	r3, r3
 8001a1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001a1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001a22:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001a26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <HAL_ADC_ConfigChannel+0x23e>
    return 32U;
 8001a2e:	2320      	movs	r3, #32
 8001a30:	e004      	b.n	8001a3c <HAL_ADC_ConfigChannel+0x248>
  return __builtin_clz(value);
 8001a32:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a36:	fab3 f383 	clz	r3, r3
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d105      	bne.n	8001a56 <HAL_ADC_ConfigChannel+0x262>
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	0e9b      	lsrs	r3, r3, #26
 8001a50:	f003 031f 	and.w	r3, r3, #31
 8001a54:	e018      	b.n	8001a88 <HAL_ADC_ConfigChannel+0x294>
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a62:	fa93 f3a3 	rbit	r3, r3
 8001a66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001a6a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001a6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001a72:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d101      	bne.n	8001a7e <HAL_ADC_ConfigChannel+0x28a>
    return 32U;
 8001a7a:	2320      	movs	r3, #32
 8001a7c:	e004      	b.n	8001a88 <HAL_ADC_ConfigChannel+0x294>
  return __builtin_clz(value);
 8001a7e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a82:	fab3 f383 	clz	r3, r3
 8001a86:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d106      	bne.n	8001a9a <HAL_ADC_ConfigChannel+0x2a6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2200      	movs	r2, #0
 8001a92:	2101      	movs	r1, #1
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff fa1b 	bl	8000ed0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2102      	movs	r1, #2
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff f9ff 	bl	8000ea4 <LL_ADC_GetOffsetChannel>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d10a      	bne.n	8001ac6 <HAL_ADC_ConfigChannel+0x2d2>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2102      	movs	r1, #2
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff f9f4 	bl	8000ea4 <LL_ADC_GetOffsetChannel>
 8001abc:	4603      	mov	r3, r0
 8001abe:	0e9b      	lsrs	r3, r3, #26
 8001ac0:	f003 021f 	and.w	r2, r3, #31
 8001ac4:	e01e      	b.n	8001b04 <HAL_ADC_ConfigChannel+0x310>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2102      	movs	r1, #2
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff f9e9 	bl	8000ea4 <LL_ADC_GetOffsetChannel>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001adc:	fa93 f3a3 	rbit	r3, r3
 8001ae0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001ae4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ae8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001aec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d101      	bne.n	8001af8 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8001af4:	2320      	movs	r3, #32
 8001af6:	e004      	b.n	8001b02 <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8001af8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001afc:	fab3 f383 	clz	r3, r3
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d105      	bne.n	8001b1c <HAL_ADC_ConfigChannel+0x328>
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	0e9b      	lsrs	r3, r3, #26
 8001b16:	f003 031f 	and.w	r3, r3, #31
 8001b1a:	e016      	b.n	8001b4a <HAL_ADC_ConfigChannel+0x356>
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b24:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b28:	fa93 f3a3 	rbit	r3, r3
 8001b2c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001b2e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001b34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d101      	bne.n	8001b40 <HAL_ADC_ConfigChannel+0x34c>
    return 32U;
 8001b3c:	2320      	movs	r3, #32
 8001b3e:	e004      	b.n	8001b4a <HAL_ADC_ConfigChannel+0x356>
  return __builtin_clz(value);
 8001b40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b44:	fab3 f383 	clz	r3, r3
 8001b48:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d106      	bne.n	8001b5c <HAL_ADC_ConfigChannel+0x368>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2200      	movs	r2, #0
 8001b54:	2102      	movs	r1, #2
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff f9ba 	bl	8000ed0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2103      	movs	r1, #3
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff f99e 	bl	8000ea4 <LL_ADC_GetOffsetChannel>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d10a      	bne.n	8001b88 <HAL_ADC_ConfigChannel+0x394>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2103      	movs	r1, #3
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff f993 	bl	8000ea4 <LL_ADC_GetOffsetChannel>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	0e9b      	lsrs	r3, r3, #26
 8001b82:	f003 021f 	and.w	r2, r3, #31
 8001b86:	e017      	b.n	8001bb8 <HAL_ADC_ConfigChannel+0x3c4>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2103      	movs	r1, #3
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff f988 	bl	8000ea4 <LL_ADC_GetOffsetChannel>
 8001b94:	4603      	mov	r3, r0
 8001b96:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b9a:	fa93 f3a3 	rbit	r3, r3
 8001b9e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001ba0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ba2:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001ba4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d101      	bne.n	8001bae <HAL_ADC_ConfigChannel+0x3ba>
    return 32U;
 8001baa:	2320      	movs	r3, #32
 8001bac:	e003      	b.n	8001bb6 <HAL_ADC_ConfigChannel+0x3c2>
  return __builtin_clz(value);
 8001bae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001bb0:	fab3 f383 	clz	r3, r3
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d105      	bne.n	8001bd0 <HAL_ADC_ConfigChannel+0x3dc>
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	0e9b      	lsrs	r3, r3, #26
 8001bca:	f003 031f 	and.w	r3, r3, #31
 8001bce:	e011      	b.n	8001bf4 <HAL_ADC_ConfigChannel+0x400>
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001bd8:	fa93 f3a3 	rbit	r3, r3
 8001bdc:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001bde:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001be0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001be2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d101      	bne.n	8001bec <HAL_ADC_ConfigChannel+0x3f8>
    return 32U;
 8001be8:	2320      	movs	r3, #32
 8001bea:	e003      	b.n	8001bf4 <HAL_ADC_ConfigChannel+0x400>
  return __builtin_clz(value);
 8001bec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bee:	fab3 f383 	clz	r3, r3
 8001bf2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d106      	bne.n	8001c06 <HAL_ADC_ConfigChannel+0x412>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	2103      	movs	r1, #3
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff f965 	bl	8000ed0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff fa9c 	bl	8001148 <LL_ADC_IsEnabled>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	f040 8140 	bne.w	8001e98 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6818      	ldr	r0, [r3, #0]
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	6819      	ldr	r1, [r3, #0]
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	461a      	mov	r2, r3
 8001c26:	f7ff f9d9 	bl	8000fdc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	4a8f      	ldr	r2, [pc, #572]	; (8001e6c <HAL_ADC_ConfigChannel+0x678>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	f040 8131 	bne.w	8001e98 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d10b      	bne.n	8001c5e <HAL_ADC_ConfigChannel+0x46a>
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	0e9b      	lsrs	r3, r3, #26
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	f003 031f 	and.w	r3, r3, #31
 8001c52:	2b09      	cmp	r3, #9
 8001c54:	bf94      	ite	ls
 8001c56:	2301      	movls	r3, #1
 8001c58:	2300      	movhi	r3, #0
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	e019      	b.n	8001c92 <HAL_ADC_ConfigChannel+0x49e>
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c66:	fa93 f3a3 	rbit	r3, r3
 8001c6a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001c6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c6e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001c70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d101      	bne.n	8001c7a <HAL_ADC_ConfigChannel+0x486>
    return 32U;
 8001c76:	2320      	movs	r3, #32
 8001c78:	e003      	b.n	8001c82 <HAL_ADC_ConfigChannel+0x48e>
  return __builtin_clz(value);
 8001c7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c7c:	fab3 f383 	clz	r3, r3
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	3301      	adds	r3, #1
 8001c84:	f003 031f 	and.w	r3, r3, #31
 8001c88:	2b09      	cmp	r3, #9
 8001c8a:	bf94      	ite	ls
 8001c8c:	2301      	movls	r3, #1
 8001c8e:	2300      	movhi	r3, #0
 8001c90:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d079      	beq.n	8001d8a <HAL_ADC_ConfigChannel+0x596>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d107      	bne.n	8001cb2 <HAL_ADC_ConfigChannel+0x4be>
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	0e9b      	lsrs	r3, r3, #26
 8001ca8:	3301      	adds	r3, #1
 8001caa:	069b      	lsls	r3, r3, #26
 8001cac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cb0:	e015      	b.n	8001cde <HAL_ADC_ConfigChannel+0x4ea>
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cba:	fa93 f3a3 	rbit	r3, r3
 8001cbe:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001cc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cc2:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001cc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d101      	bne.n	8001cce <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 8001cca:	2320      	movs	r3, #32
 8001ccc:	e003      	b.n	8001cd6 <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 8001cce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cd0:	fab3 f383 	clz	r3, r3
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	069b      	lsls	r3, r3, #26
 8001cda:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d109      	bne.n	8001cfe <HAL_ADC_ConfigChannel+0x50a>
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	0e9b      	lsrs	r3, r3, #26
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	f003 031f 	and.w	r3, r3, #31
 8001cf6:	2101      	movs	r1, #1
 8001cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfc:	e017      	b.n	8001d2e <HAL_ADC_ConfigChannel+0x53a>
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d06:	fa93 f3a3 	rbit	r3, r3
 8001d0a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001d0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d0e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001d10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d101      	bne.n	8001d1a <HAL_ADC_ConfigChannel+0x526>
    return 32U;
 8001d16:	2320      	movs	r3, #32
 8001d18:	e003      	b.n	8001d22 <HAL_ADC_ConfigChannel+0x52e>
  return __builtin_clz(value);
 8001d1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d1c:	fab3 f383 	clz	r3, r3
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	3301      	adds	r3, #1
 8001d24:	f003 031f 	and.w	r3, r3, #31
 8001d28:	2101      	movs	r1, #1
 8001d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2e:	ea42 0103 	orr.w	r1, r2, r3
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d10a      	bne.n	8001d54 <HAL_ADC_ConfigChannel+0x560>
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	0e9b      	lsrs	r3, r3, #26
 8001d44:	3301      	adds	r3, #1
 8001d46:	f003 021f 	and.w	r2, r3, #31
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	4413      	add	r3, r2
 8001d50:	051b      	lsls	r3, r3, #20
 8001d52:	e018      	b.n	8001d86 <HAL_ADC_ConfigChannel+0x592>
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d5c:	fa93 f3a3 	rbit	r3, r3
 8001d60:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d64:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001d66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d101      	bne.n	8001d70 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8001d6c:	2320      	movs	r3, #32
 8001d6e:	e003      	b.n	8001d78 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8001d70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d72:	fab3 f383 	clz	r3, r3
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	3301      	adds	r3, #1
 8001d7a:	f003 021f 	and.w	r2, r3, #31
 8001d7e:	4613      	mov	r3, r2
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	4413      	add	r3, r2
 8001d84:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d86:	430b      	orrs	r3, r1
 8001d88:	e081      	b.n	8001e8e <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d107      	bne.n	8001da6 <HAL_ADC_ConfigChannel+0x5b2>
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	0e9b      	lsrs	r3, r3, #26
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	069b      	lsls	r3, r3, #26
 8001da0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001da4:	e015      	b.n	8001dd2 <HAL_ADC_ConfigChannel+0x5de>
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dae:	fa93 f3a3 	rbit	r3, r3
 8001db2:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001db6:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d101      	bne.n	8001dc2 <HAL_ADC_ConfigChannel+0x5ce>
    return 32U;
 8001dbe:	2320      	movs	r3, #32
 8001dc0:	e003      	b.n	8001dca <HAL_ADC_ConfigChannel+0x5d6>
  return __builtin_clz(value);
 8001dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dc4:	fab3 f383 	clz	r3, r3
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	3301      	adds	r3, #1
 8001dcc:	069b      	lsls	r3, r3, #26
 8001dce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d109      	bne.n	8001df2 <HAL_ADC_ConfigChannel+0x5fe>
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	0e9b      	lsrs	r3, r3, #26
 8001de4:	3301      	adds	r3, #1
 8001de6:	f003 031f 	and.w	r3, r3, #31
 8001dea:	2101      	movs	r1, #1
 8001dec:	fa01 f303 	lsl.w	r3, r1, r3
 8001df0:	e017      	b.n	8001e22 <HAL_ADC_ConfigChannel+0x62e>
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df8:	6a3b      	ldr	r3, [r7, #32]
 8001dfa:	fa93 f3a3 	rbit	r3, r3
 8001dfe:	61fb      	str	r3, [r7, #28]
  return result;
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d101      	bne.n	8001e0e <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 8001e0a:	2320      	movs	r3, #32
 8001e0c:	e003      	b.n	8001e16 <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 8001e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e10:	fab3 f383 	clz	r3, r3
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	3301      	adds	r3, #1
 8001e18:	f003 031f 	and.w	r3, r3, #31
 8001e1c:	2101      	movs	r1, #1
 8001e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e22:	ea42 0103 	orr.w	r1, r2, r3
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d10d      	bne.n	8001e4e <HAL_ADC_ConfigChannel+0x65a>
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	0e9b      	lsrs	r3, r3, #26
 8001e38:	3301      	adds	r3, #1
 8001e3a:	f003 021f 	and.w	r2, r3, #31
 8001e3e:	4613      	mov	r3, r2
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	4413      	add	r3, r2
 8001e44:	3b1e      	subs	r3, #30
 8001e46:	051b      	lsls	r3, r3, #20
 8001e48:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e4c:	e01e      	b.n	8001e8c <HAL_ADC_ConfigChannel+0x698>
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	fa93 f3a3 	rbit	r3, r3
 8001e5a:	613b      	str	r3, [r7, #16]
  return result;
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d104      	bne.n	8001e70 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001e66:	2320      	movs	r3, #32
 8001e68:	e006      	b.n	8001e78 <HAL_ADC_ConfigChannel+0x684>
 8001e6a:	bf00      	nop
 8001e6c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	fab3 f383 	clz	r3, r3
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	3301      	adds	r3, #1
 8001e7a:	f003 021f 	and.w	r2, r3, #31
 8001e7e:	4613      	mov	r3, r2
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	4413      	add	r3, r2
 8001e84:	3b1e      	subs	r3, #30
 8001e86:	051b      	lsls	r3, r3, #20
 8001e88:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e8c:	430b      	orrs	r3, r1
 8001e8e:	683a      	ldr	r2, [r7, #0]
 8001e90:	6892      	ldr	r2, [r2, #8]
 8001e92:	4619      	mov	r1, r3
 8001e94:	f7ff f876 	bl	8000f84 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	4b44      	ldr	r3, [pc, #272]	; (8001fb0 <HAL_ADC_ConfigChannel+0x7bc>)
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d07a      	beq.n	8001f9a <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ea4:	4843      	ldr	r0, [pc, #268]	; (8001fb4 <HAL_ADC_ConfigChannel+0x7c0>)
 8001ea6:	f7fe ffcb 	bl	8000e40 <LL_ADC_GetCommonPathInternalCh>
 8001eaa:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a41      	ldr	r2, [pc, #260]	; (8001fb8 <HAL_ADC_ConfigChannel+0x7c4>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d12c      	bne.n	8001f12 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001eb8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ebc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d126      	bne.n	8001f12 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a3c      	ldr	r2, [pc, #240]	; (8001fbc <HAL_ADC_ConfigChannel+0x7c8>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d004      	beq.n	8001ed8 <HAL_ADC_ConfigChannel+0x6e4>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a3b      	ldr	r2, [pc, #236]	; (8001fc0 <HAL_ADC_ConfigChannel+0x7cc>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d15d      	bne.n	8001f94 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ed8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001edc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4834      	ldr	r0, [pc, #208]	; (8001fb4 <HAL_ADC_ConfigChannel+0x7c0>)
 8001ee4:	f7fe ff99 	bl	8000e1a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ee8:	4b36      	ldr	r3, [pc, #216]	; (8001fc4 <HAL_ADC_ConfigChannel+0x7d0>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	099b      	lsrs	r3, r3, #6
 8001eee:	4a36      	ldr	r2, [pc, #216]	; (8001fc8 <HAL_ADC_ConfigChannel+0x7d4>)
 8001ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef4:	099b      	lsrs	r3, r3, #6
 8001ef6:	1c5a      	adds	r2, r3, #1
 8001ef8:	4613      	mov	r3, r2
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	4413      	add	r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f02:	e002      	b.n	8001f0a <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	3b01      	subs	r3, #1
 8001f08:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d1f9      	bne.n	8001f04 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f10:	e040      	b.n	8001f94 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a2d      	ldr	r2, [pc, #180]	; (8001fcc <HAL_ADC_ConfigChannel+0x7d8>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d118      	bne.n	8001f4e <HAL_ADC_ConfigChannel+0x75a>
 8001f1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d112      	bne.n	8001f4e <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a23      	ldr	r2, [pc, #140]	; (8001fbc <HAL_ADC_ConfigChannel+0x7c8>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d004      	beq.n	8001f3c <HAL_ADC_ConfigChannel+0x748>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a22      	ldr	r2, [pc, #136]	; (8001fc0 <HAL_ADC_ConfigChannel+0x7cc>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d12d      	bne.n	8001f98 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f3c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f40:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f44:	4619      	mov	r1, r3
 8001f46:	481b      	ldr	r0, [pc, #108]	; (8001fb4 <HAL_ADC_ConfigChannel+0x7c0>)
 8001f48:	f7fe ff67 	bl	8000e1a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f4c:	e024      	b.n	8001f98 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a1f      	ldr	r2, [pc, #124]	; (8001fd0 <HAL_ADC_ConfigChannel+0x7dc>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d120      	bne.n	8001f9a <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001f58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d11a      	bne.n	8001f9a <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a14      	ldr	r2, [pc, #80]	; (8001fbc <HAL_ADC_ConfigChannel+0x7c8>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d115      	bne.n	8001f9a <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f72:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f76:	4619      	mov	r1, r3
 8001f78:	480e      	ldr	r0, [pc, #56]	; (8001fb4 <HAL_ADC_ConfigChannel+0x7c0>)
 8001f7a:	f7fe ff4e 	bl	8000e1a <LL_ADC_SetCommonPathInternalCh>
 8001f7e:	e00c      	b.n	8001f9a <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f84:	f043 0220 	orr.w	r2, r3, #32
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001f92:	e002      	b.n	8001f9a <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f94:	bf00      	nop
 8001f96:	e000      	b.n	8001f9a <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f98:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001fa2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	37d8      	adds	r7, #216	; 0xd8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	80080000 	.word	0x80080000
 8001fb4:	50040300 	.word	0x50040300
 8001fb8:	c7520000 	.word	0xc7520000
 8001fbc:	50040000 	.word	0x50040000
 8001fc0:	50040200 	.word	0x50040200
 8001fc4:	20000000 	.word	0x20000000
 8001fc8:	053e2d63 	.word	0x053e2d63
 8001fcc:	cb840000 	.word	0xcb840000
 8001fd0:	80000001 	.word	0x80000001

08001fd4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff f8af 	bl	8001148 <LL_ADC_IsEnabled>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d169      	bne.n	80020c4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	689a      	ldr	r2, [r3, #8]
 8001ff6:	4b36      	ldr	r3, [pc, #216]	; (80020d0 <ADC_Enable+0xfc>)
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00d      	beq.n	800201a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002002:	f043 0210 	orr.w	r2, r3, #16
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800200e:	f043 0201 	orr.w	r2, r3, #1
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e055      	b.n	80020c6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff f86a 	bl	80010f8 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002024:	482b      	ldr	r0, [pc, #172]	; (80020d4 <ADC_Enable+0x100>)
 8002026:	f7fe ff0b 	bl	8000e40 <LL_ADC_GetCommonPathInternalCh>
 800202a:	4603      	mov	r3, r0
 800202c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d013      	beq.n	800205c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002034:	4b28      	ldr	r3, [pc, #160]	; (80020d8 <ADC_Enable+0x104>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	099b      	lsrs	r3, r3, #6
 800203a:	4a28      	ldr	r2, [pc, #160]	; (80020dc <ADC_Enable+0x108>)
 800203c:	fba2 2303 	umull	r2, r3, r2, r3
 8002040:	099b      	lsrs	r3, r3, #6
 8002042:	1c5a      	adds	r2, r3, #1
 8002044:	4613      	mov	r3, r2
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	4413      	add	r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800204e:	e002      	b.n	8002056 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	3b01      	subs	r3, #1
 8002054:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d1f9      	bne.n	8002050 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800205c:	f7fe fe9a 	bl	8000d94 <HAL_GetTick>
 8002060:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002062:	e028      	b.n	80020b6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff f86d 	bl	8001148 <LL_ADC_IsEnabled>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d104      	bne.n	800207e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4618      	mov	r0, r3
 800207a:	f7ff f83d 	bl	80010f8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800207e:	f7fe fe89 	bl	8000d94 <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d914      	bls.n	80020b6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	2b01      	cmp	r3, #1
 8002098:	d00d      	beq.n	80020b6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800209e:	f043 0210 	orr.w	r2, r3, #16
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020aa:	f043 0201 	orr.w	r2, r3, #1
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e007      	b.n	80020c6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0301 	and.w	r3, r3, #1
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d1cf      	bne.n	8002064 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3710      	adds	r7, #16
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	8000003f 	.word	0x8000003f
 80020d4:	50040300 	.word	0x50040300
 80020d8:	20000000 	.word	0x20000000
 80020dc:	053e2d63 	.word	0x053e2d63

080020e0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff f83e 	bl	800116e <LL_ADC_IsDisableOngoing>
 80020f2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff f825 	bl	8001148 <LL_ADC_IsEnabled>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d047      	beq.n	8002194 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d144      	bne.n	8002194 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f003 030d 	and.w	r3, r3, #13
 8002114:	2b01      	cmp	r3, #1
 8002116:	d10c      	bne.n	8002132 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4618      	mov	r0, r3
 800211e:	f7fe ffff 	bl	8001120 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2203      	movs	r2, #3
 8002128:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800212a:	f7fe fe33 	bl	8000d94 <HAL_GetTick>
 800212e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002130:	e029      	b.n	8002186 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002136:	f043 0210 	orr.w	r2, r3, #16
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002142:	f043 0201 	orr.w	r2, r3, #1
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e023      	b.n	8002196 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800214e:	f7fe fe21 	bl	8000d94 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	2b02      	cmp	r3, #2
 800215a:	d914      	bls.n	8002186 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	2b00      	cmp	r3, #0
 8002168:	d00d      	beq.n	8002186 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800216e:	f043 0210 	orr.w	r2, r3, #16
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800217a:	f043 0201 	orr.w	r2, r3, #1
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e007      	b.n	8002196 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f003 0301 	and.w	r3, r3, #1
 8002190:	2b00      	cmp	r3, #0
 8002192:	d1dc      	bne.n	800214e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	3710      	adds	r7, #16
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <LL_ADC_IsEnabled>:
{
 800219e:	b480      	push	{r7}
 80021a0:	b083      	sub	sp, #12
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d101      	bne.n	80021b6 <LL_ADC_IsEnabled+0x18>
 80021b2:	2301      	movs	r3, #1
 80021b4:	e000      	b.n	80021b8 <LL_ADC_IsEnabled+0x1a>
 80021b6:	2300      	movs	r3, #0
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <LL_ADC_StartCalibration>:
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80021d6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021da:	683a      	ldr	r2, [r7, #0]
 80021dc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80021e0:	4313      	orrs	r3, r2
 80021e2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	609a      	str	r2, [r3, #8]
}
 80021ea:	bf00      	nop
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr

080021f6 <LL_ADC_IsCalibrationOnGoing>:
{
 80021f6:	b480      	push	{r7}
 80021f8:	b083      	sub	sp, #12
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002206:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800220a:	d101      	bne.n	8002210 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800220c:	2301      	movs	r3, #1
 800220e:	e000      	b.n	8002212 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr

0800221e <LL_ADC_REG_IsConversionOngoing>:
{
 800221e:	b480      	push	{r7}
 8002220:	b083      	sub	sp, #12
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f003 0304 	and.w	r3, r3, #4
 800222e:	2b04      	cmp	r3, #4
 8002230:	d101      	bne.n	8002236 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002232:	2301      	movs	r3, #1
 8002234:	e000      	b.n	8002238 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800224e:	2300      	movs	r3, #0
 8002250:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002258:	2b01      	cmp	r3, #1
 800225a:	d101      	bne.n	8002260 <HAL_ADCEx_Calibration_Start+0x1c>
 800225c:	2302      	movs	r3, #2
 800225e:	e04d      	b.n	80022fc <HAL_ADCEx_Calibration_Start+0xb8>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f7ff ff39 	bl	80020e0 <ADC_Disable>
 800226e:	4603      	mov	r3, r0
 8002270:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002272:	7bfb      	ldrb	r3, [r7, #15]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d136      	bne.n	80022e6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800227c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002280:	f023 0302 	bic.w	r3, r3, #2
 8002284:	f043 0202 	orr.w	r2, r3, #2
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	6839      	ldr	r1, [r7, #0]
 8002292:	4618      	mov	r0, r3
 8002294:	f7ff ff96 	bl	80021c4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002298:	e014      	b.n	80022c4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	3301      	adds	r3, #1
 800229e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 80022a6:	d30d      	bcc.n	80022c4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ac:	f023 0312 	bic.w	r3, r3, #18
 80022b0:	f043 0210 	orr.w	r2, r3, #16
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e01b      	b.n	80022fc <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7ff ff94 	bl	80021f6 <LL_ADC_IsCalibrationOnGoing>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d1e2      	bne.n	800229a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022d8:	f023 0303 	bic.w	r3, r3, #3
 80022dc:	f043 0201 	orr.w	r2, r3, #1
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	655a      	str	r2, [r3, #84]	; 0x54
 80022e4:	e005      	b.n	80022f2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ea:	f043 0210 	orr.w	r2, r3, #16
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80022fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3710      	adds	r7, #16
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002304:	b590      	push	{r4, r7, lr}
 8002306:	b09f      	sub	sp, #124	; 0x7c
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800230e:	2300      	movs	r3, #0
 8002310:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800231a:	2b01      	cmp	r3, #1
 800231c:	d101      	bne.n	8002322 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800231e:	2302      	movs	r3, #2
 8002320:	e093      	b.n	800244a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2201      	movs	r2, #1
 8002326:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800232a:	2300      	movs	r3, #0
 800232c:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800232e:	2300      	movs	r3, #0
 8002330:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a47      	ldr	r2, [pc, #284]	; (8002454 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d102      	bne.n	8002342 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800233c:	4b46      	ldr	r3, [pc, #280]	; (8002458 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800233e:	60bb      	str	r3, [r7, #8]
 8002340:	e001      	b.n	8002346 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002342:	2300      	movs	r3, #0
 8002344:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d10b      	bne.n	8002364 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002350:	f043 0220 	orr.w	r2, r3, #32
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e072      	b.n	800244a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	4618      	mov	r0, r3
 8002368:	f7ff ff59 	bl	800221e <LL_ADC_REG_IsConversionOngoing>
 800236c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4618      	mov	r0, r3
 8002374:	f7ff ff53 	bl	800221e <LL_ADC_REG_IsConversionOngoing>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d154      	bne.n	8002428 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800237e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002380:	2b00      	cmp	r3, #0
 8002382:	d151      	bne.n	8002428 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002384:	4b35      	ldr	r3, [pc, #212]	; (800245c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002386:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d02c      	beq.n	80023ea <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002390:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	6859      	ldr	r1, [r3, #4]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023a2:	035b      	lsls	r3, r3, #13
 80023a4:	430b      	orrs	r3, r1
 80023a6:	431a      	orrs	r2, r3
 80023a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023aa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023ac:	4829      	ldr	r0, [pc, #164]	; (8002454 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80023ae:	f7ff fef6 	bl	800219e <LL_ADC_IsEnabled>
 80023b2:	4604      	mov	r4, r0
 80023b4:	4828      	ldr	r0, [pc, #160]	; (8002458 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80023b6:	f7ff fef2 	bl	800219e <LL_ADC_IsEnabled>
 80023ba:	4603      	mov	r3, r0
 80023bc:	431c      	orrs	r4, r3
 80023be:	4828      	ldr	r0, [pc, #160]	; (8002460 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80023c0:	f7ff feed 	bl	800219e <LL_ADC_IsEnabled>
 80023c4:	4603      	mov	r3, r0
 80023c6:	4323      	orrs	r3, r4
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d137      	bne.n	800243c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80023cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80023d4:	f023 030f 	bic.w	r3, r3, #15
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	6811      	ldr	r1, [r2, #0]
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	6892      	ldr	r2, [r2, #8]
 80023e0:	430a      	orrs	r2, r1
 80023e2:	431a      	orrs	r2, r3
 80023e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023e6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80023e8:	e028      	b.n	800243c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80023ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023f4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023f6:	4817      	ldr	r0, [pc, #92]	; (8002454 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80023f8:	f7ff fed1 	bl	800219e <LL_ADC_IsEnabled>
 80023fc:	4604      	mov	r4, r0
 80023fe:	4816      	ldr	r0, [pc, #88]	; (8002458 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002400:	f7ff fecd 	bl	800219e <LL_ADC_IsEnabled>
 8002404:	4603      	mov	r3, r0
 8002406:	431c      	orrs	r4, r3
 8002408:	4815      	ldr	r0, [pc, #84]	; (8002460 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800240a:	f7ff fec8 	bl	800219e <LL_ADC_IsEnabled>
 800240e:	4603      	mov	r3, r0
 8002410:	4323      	orrs	r3, r4
 8002412:	2b00      	cmp	r3, #0
 8002414:	d112      	bne.n	800243c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002416:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800241e:	f023 030f 	bic.w	r3, r3, #15
 8002422:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002424:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002426:	e009      	b.n	800243c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800242c:	f043 0220 	orr.w	r2, r3, #32
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800243a:	e000      	b.n	800243e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800243c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002446:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800244a:	4618      	mov	r0, r3
 800244c:	377c      	adds	r7, #124	; 0x7c
 800244e:	46bd      	mov	sp, r7
 8002450:	bd90      	pop	{r4, r7, pc}
 8002452:	bf00      	nop
 8002454:	50040000 	.word	0x50040000
 8002458:	50040100 	.word	0x50040100
 800245c:	50040300 	.word	0x50040300
 8002460:	50040200 	.word	0x50040200

08002464 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002464:	b480      	push	{r7}
 8002466:	b085      	sub	sp, #20
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f003 0307 	and.w	r3, r3, #7
 8002472:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002474:	4b0c      	ldr	r3, [pc, #48]	; (80024a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800247a:	68ba      	ldr	r2, [r7, #8]
 800247c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002480:	4013      	ands	r3, r2
 8002482:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800248c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002490:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002494:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002496:	4a04      	ldr	r2, [pc, #16]	; (80024a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	60d3      	str	r3, [r2, #12]
}
 800249c:	bf00      	nop
 800249e:	3714      	adds	r7, #20
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr
 80024a8:	e000ed00 	.word	0xe000ed00

080024ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024b0:	4b04      	ldr	r3, [pc, #16]	; (80024c4 <__NVIC_GetPriorityGrouping+0x18>)
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	0a1b      	lsrs	r3, r3, #8
 80024b6:	f003 0307 	and.w	r3, r3, #7
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr
 80024c4:	e000ed00 	.word	0xe000ed00

080024c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	4603      	mov	r3, r0
 80024d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	db0b      	blt.n	80024f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024da:	79fb      	ldrb	r3, [r7, #7]
 80024dc:	f003 021f 	and.w	r2, r3, #31
 80024e0:	4907      	ldr	r1, [pc, #28]	; (8002500 <__NVIC_EnableIRQ+0x38>)
 80024e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e6:	095b      	lsrs	r3, r3, #5
 80024e8:	2001      	movs	r0, #1
 80024ea:	fa00 f202 	lsl.w	r2, r0, r2
 80024ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80024f2:	bf00      	nop
 80024f4:	370c      	adds	r7, #12
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	e000e100 	.word	0xe000e100

08002504 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	4603      	mov	r3, r0
 800250c:	6039      	str	r1, [r7, #0]
 800250e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002514:	2b00      	cmp	r3, #0
 8002516:	db0a      	blt.n	800252e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	b2da      	uxtb	r2, r3
 800251c:	490c      	ldr	r1, [pc, #48]	; (8002550 <__NVIC_SetPriority+0x4c>)
 800251e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002522:	0112      	lsls	r2, r2, #4
 8002524:	b2d2      	uxtb	r2, r2
 8002526:	440b      	add	r3, r1
 8002528:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800252c:	e00a      	b.n	8002544 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	b2da      	uxtb	r2, r3
 8002532:	4908      	ldr	r1, [pc, #32]	; (8002554 <__NVIC_SetPriority+0x50>)
 8002534:	79fb      	ldrb	r3, [r7, #7]
 8002536:	f003 030f 	and.w	r3, r3, #15
 800253a:	3b04      	subs	r3, #4
 800253c:	0112      	lsls	r2, r2, #4
 800253e:	b2d2      	uxtb	r2, r2
 8002540:	440b      	add	r3, r1
 8002542:	761a      	strb	r2, [r3, #24]
}
 8002544:	bf00      	nop
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr
 8002550:	e000e100 	.word	0xe000e100
 8002554:	e000ed00 	.word	0xe000ed00

08002558 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002558:	b480      	push	{r7}
 800255a:	b089      	sub	sp, #36	; 0x24
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f003 0307 	and.w	r3, r3, #7
 800256a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	f1c3 0307 	rsb	r3, r3, #7
 8002572:	2b04      	cmp	r3, #4
 8002574:	bf28      	it	cs
 8002576:	2304      	movcs	r3, #4
 8002578:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	3304      	adds	r3, #4
 800257e:	2b06      	cmp	r3, #6
 8002580:	d902      	bls.n	8002588 <NVIC_EncodePriority+0x30>
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	3b03      	subs	r3, #3
 8002586:	e000      	b.n	800258a <NVIC_EncodePriority+0x32>
 8002588:	2300      	movs	r3, #0
 800258a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800258c:	f04f 32ff 	mov.w	r2, #4294967295
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	fa02 f303 	lsl.w	r3, r2, r3
 8002596:	43da      	mvns	r2, r3
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	401a      	ands	r2, r3
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025a0:	f04f 31ff 	mov.w	r1, #4294967295
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	fa01 f303 	lsl.w	r3, r1, r3
 80025aa:	43d9      	mvns	r1, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025b0:	4313      	orrs	r3, r2
         );
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3724      	adds	r7, #36	; 0x24
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
	...

080025c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	3b01      	subs	r3, #1
 80025cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025d0:	d301      	bcc.n	80025d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025d2:	2301      	movs	r3, #1
 80025d4:	e00f      	b.n	80025f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025d6:	4a0a      	ldr	r2, [pc, #40]	; (8002600 <SysTick_Config+0x40>)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	3b01      	subs	r3, #1
 80025dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025de:	210f      	movs	r1, #15
 80025e0:	f04f 30ff 	mov.w	r0, #4294967295
 80025e4:	f7ff ff8e 	bl	8002504 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025e8:	4b05      	ldr	r3, [pc, #20]	; (8002600 <SysTick_Config+0x40>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025ee:	4b04      	ldr	r3, [pc, #16]	; (8002600 <SysTick_Config+0x40>)
 80025f0:	2207      	movs	r2, #7
 80025f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	e000e010 	.word	0xe000e010

08002604 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f7ff ff29 	bl	8002464 <__NVIC_SetPriorityGrouping>
}
 8002612:	bf00      	nop
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	b086      	sub	sp, #24
 800261e:	af00      	add	r7, sp, #0
 8002620:	4603      	mov	r3, r0
 8002622:	60b9      	str	r1, [r7, #8]
 8002624:	607a      	str	r2, [r7, #4]
 8002626:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002628:	2300      	movs	r3, #0
 800262a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800262c:	f7ff ff3e 	bl	80024ac <__NVIC_GetPriorityGrouping>
 8002630:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	68b9      	ldr	r1, [r7, #8]
 8002636:	6978      	ldr	r0, [r7, #20]
 8002638:	f7ff ff8e 	bl	8002558 <NVIC_EncodePriority>
 800263c:	4602      	mov	r2, r0
 800263e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002642:	4611      	mov	r1, r2
 8002644:	4618      	mov	r0, r3
 8002646:	f7ff ff5d 	bl	8002504 <__NVIC_SetPriority>
}
 800264a:	bf00      	nop
 800264c:	3718      	adds	r7, #24
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b082      	sub	sp, #8
 8002656:	af00      	add	r7, sp, #0
 8002658:	4603      	mov	r3, r0
 800265a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800265c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002660:	4618      	mov	r0, r3
 8002662:	f7ff ff31 	bl	80024c8 <__NVIC_EnableIRQ>
}
 8002666:	bf00      	nop
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800266e:	b580      	push	{r7, lr}
 8002670:	b082      	sub	sp, #8
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f7ff ffa2 	bl	80025c0 <SysTick_Config>
 800267c:	4603      	mov	r3, r0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002686:	b480      	push	{r7}
 8002688:	b085      	sub	sp, #20
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800268e:	2300      	movs	r3, #0
 8002690:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d008      	beq.n	80026b0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2204      	movs	r2, #4
 80026a2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e022      	b.n	80026f6 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f022 020e 	bic.w	r2, r2, #14
 80026be:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f022 0201 	bic.w	r2, r2, #1
 80026ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d4:	f003 021c 	and.w	r2, r3, #28
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026dc:	2101      	movs	r1, #1
 80026de:	fa01 f202 	lsl.w	r2, r1, r2
 80026e2:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80026f4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3714      	adds	r7, #20
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr

08002702 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002702:	b580      	push	{r7, lr}
 8002704:	b084      	sub	sp, #16
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800270a:	2300      	movs	r3, #0
 800270c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b02      	cmp	r3, #2
 8002718:	d005      	beq.n	8002726 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2204      	movs	r2, #4
 800271e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	73fb      	strb	r3, [r7, #15]
 8002724:	e029      	b.n	800277a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f022 020e 	bic.w	r2, r2, #14
 8002734:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f022 0201 	bic.w	r2, r2, #1
 8002744:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274a:	f003 021c 	and.w	r2, r3, #28
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002752:	2101      	movs	r1, #1
 8002754:	fa01 f202 	lsl.w	r2, r1, r2
 8002758:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2201      	movs	r2, #1
 800275e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800276e:	2b00      	cmp	r3, #0
 8002770:	d003      	beq.n	800277a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	4798      	blx	r3
    }
  }
  return status;
 800277a:	7bfb      	ldrb	r3, [r7, #15]
}
 800277c:	4618      	mov	r0, r3
 800277e:	3710      	adds	r7, #16
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002784:	b480      	push	{r7}
 8002786:	b087      	sub	sp, #28
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800278e:	2300      	movs	r3, #0
 8002790:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002792:	e17f      	b.n	8002a94 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	2101      	movs	r1, #1
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	fa01 f303 	lsl.w	r3, r1, r3
 80027a0:	4013      	ands	r3, r2
 80027a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f000 8171 	beq.w	8002a8e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f003 0303 	and.w	r3, r3, #3
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d005      	beq.n	80027c4 <HAL_GPIO_Init+0x40>
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f003 0303 	and.w	r3, r3, #3
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d130      	bne.n	8002826 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	2203      	movs	r2, #3
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	43db      	mvns	r3, r3
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	4013      	ands	r3, r2
 80027da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	68da      	ldr	r2, [r3, #12]
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	693a      	ldr	r2, [r7, #16]
 80027f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027fa:	2201      	movs	r2, #1
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002802:	43db      	mvns	r3, r3
 8002804:	693a      	ldr	r2, [r7, #16]
 8002806:	4013      	ands	r3, r2
 8002808:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	091b      	lsrs	r3, r3, #4
 8002810:	f003 0201 	and.w	r2, r3, #1
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	fa02 f303 	lsl.w	r3, r2, r3
 800281a:	693a      	ldr	r2, [r7, #16]
 800281c:	4313      	orrs	r3, r2
 800281e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f003 0303 	and.w	r3, r3, #3
 800282e:	2b03      	cmp	r3, #3
 8002830:	d118      	bne.n	8002864 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002836:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002838:	2201      	movs	r2, #1
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	43db      	mvns	r3, r3
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	4013      	ands	r3, r2
 8002846:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	08db      	lsrs	r3, r3, #3
 800284e:	f003 0201 	and.w	r2, r3, #1
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	4313      	orrs	r3, r2
 800285c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	693a      	ldr	r2, [r7, #16]
 8002862:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f003 0303 	and.w	r3, r3, #3
 800286c:	2b03      	cmp	r3, #3
 800286e:	d017      	beq.n	80028a0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	2203      	movs	r2, #3
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	43db      	mvns	r3, r3
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	4013      	ands	r3, r2
 8002886:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	689a      	ldr	r2, [r3, #8]
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	4313      	orrs	r3, r2
 8002898:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f003 0303 	and.w	r3, r3, #3
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d123      	bne.n	80028f4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	08da      	lsrs	r2, r3, #3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	3208      	adds	r2, #8
 80028b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	f003 0307 	and.w	r3, r3, #7
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	220f      	movs	r2, #15
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	43db      	mvns	r3, r3
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	4013      	ands	r3, r2
 80028ce:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	691a      	ldr	r2, [r3, #16]
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	f003 0307 	and.w	r3, r3, #7
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	693a      	ldr	r2, [r7, #16]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	08da      	lsrs	r2, r3, #3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	3208      	adds	r2, #8
 80028ee:	6939      	ldr	r1, [r7, #16]
 80028f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	2203      	movs	r2, #3
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	43db      	mvns	r3, r3
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	4013      	ands	r3, r2
 800290a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f003 0203 	and.w	r2, r3, #3
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	693a      	ldr	r2, [r7, #16]
 800291e:	4313      	orrs	r3, r2
 8002920:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002930:	2b00      	cmp	r3, #0
 8002932:	f000 80ac 	beq.w	8002a8e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002936:	4b5f      	ldr	r3, [pc, #380]	; (8002ab4 <HAL_GPIO_Init+0x330>)
 8002938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800293a:	4a5e      	ldr	r2, [pc, #376]	; (8002ab4 <HAL_GPIO_Init+0x330>)
 800293c:	f043 0301 	orr.w	r3, r3, #1
 8002940:	6613      	str	r3, [r2, #96]	; 0x60
 8002942:	4b5c      	ldr	r3, [pc, #368]	; (8002ab4 <HAL_GPIO_Init+0x330>)
 8002944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	60bb      	str	r3, [r7, #8]
 800294c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800294e:	4a5a      	ldr	r2, [pc, #360]	; (8002ab8 <HAL_GPIO_Init+0x334>)
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	089b      	lsrs	r3, r3, #2
 8002954:	3302      	adds	r3, #2
 8002956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800295a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	f003 0303 	and.w	r3, r3, #3
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	220f      	movs	r2, #15
 8002966:	fa02 f303 	lsl.w	r3, r2, r3
 800296a:	43db      	mvns	r3, r3
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	4013      	ands	r3, r2
 8002970:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002978:	d025      	beq.n	80029c6 <HAL_GPIO_Init+0x242>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a4f      	ldr	r2, [pc, #316]	; (8002abc <HAL_GPIO_Init+0x338>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d01f      	beq.n	80029c2 <HAL_GPIO_Init+0x23e>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a4e      	ldr	r2, [pc, #312]	; (8002ac0 <HAL_GPIO_Init+0x33c>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d019      	beq.n	80029be <HAL_GPIO_Init+0x23a>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a4d      	ldr	r2, [pc, #308]	; (8002ac4 <HAL_GPIO_Init+0x340>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d013      	beq.n	80029ba <HAL_GPIO_Init+0x236>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a4c      	ldr	r2, [pc, #304]	; (8002ac8 <HAL_GPIO_Init+0x344>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d00d      	beq.n	80029b6 <HAL_GPIO_Init+0x232>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a4b      	ldr	r2, [pc, #300]	; (8002acc <HAL_GPIO_Init+0x348>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d007      	beq.n	80029b2 <HAL_GPIO_Init+0x22e>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a4a      	ldr	r2, [pc, #296]	; (8002ad0 <HAL_GPIO_Init+0x34c>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d101      	bne.n	80029ae <HAL_GPIO_Init+0x22a>
 80029aa:	2306      	movs	r3, #6
 80029ac:	e00c      	b.n	80029c8 <HAL_GPIO_Init+0x244>
 80029ae:	2307      	movs	r3, #7
 80029b0:	e00a      	b.n	80029c8 <HAL_GPIO_Init+0x244>
 80029b2:	2305      	movs	r3, #5
 80029b4:	e008      	b.n	80029c8 <HAL_GPIO_Init+0x244>
 80029b6:	2304      	movs	r3, #4
 80029b8:	e006      	b.n	80029c8 <HAL_GPIO_Init+0x244>
 80029ba:	2303      	movs	r3, #3
 80029bc:	e004      	b.n	80029c8 <HAL_GPIO_Init+0x244>
 80029be:	2302      	movs	r3, #2
 80029c0:	e002      	b.n	80029c8 <HAL_GPIO_Init+0x244>
 80029c2:	2301      	movs	r3, #1
 80029c4:	e000      	b.n	80029c8 <HAL_GPIO_Init+0x244>
 80029c6:	2300      	movs	r3, #0
 80029c8:	697a      	ldr	r2, [r7, #20]
 80029ca:	f002 0203 	and.w	r2, r2, #3
 80029ce:	0092      	lsls	r2, r2, #2
 80029d0:	4093      	lsls	r3, r2
 80029d2:	693a      	ldr	r2, [r7, #16]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80029d8:	4937      	ldr	r1, [pc, #220]	; (8002ab8 <HAL_GPIO_Init+0x334>)
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	089b      	lsrs	r3, r3, #2
 80029de:	3302      	adds	r3, #2
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029e6:	4b3b      	ldr	r3, [pc, #236]	; (8002ad4 <HAL_GPIO_Init+0x350>)
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	43db      	mvns	r3, r3
 80029f0:	693a      	ldr	r2, [r7, #16]
 80029f2:	4013      	ands	r3, r2
 80029f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d003      	beq.n	8002a0a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002a02:	693a      	ldr	r2, [r7, #16]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a0a:	4a32      	ldr	r2, [pc, #200]	; (8002ad4 <HAL_GPIO_Init+0x350>)
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002a10:	4b30      	ldr	r3, [pc, #192]	; (8002ad4 <HAL_GPIO_Init+0x350>)
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d003      	beq.n	8002a34 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a34:	4a27      	ldr	r2, [pc, #156]	; (8002ad4 <HAL_GPIO_Init+0x350>)
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002a3a:	4b26      	ldr	r3, [pc, #152]	; (8002ad4 <HAL_GPIO_Init+0x350>)
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	43db      	mvns	r3, r3
 8002a44:	693a      	ldr	r2, [r7, #16]
 8002a46:	4013      	ands	r3, r2
 8002a48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d003      	beq.n	8002a5e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002a56:	693a      	ldr	r2, [r7, #16]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a5e:	4a1d      	ldr	r2, [pc, #116]	; (8002ad4 <HAL_GPIO_Init+0x350>)
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002a64:	4b1b      	ldr	r3, [pc, #108]	; (8002ad4 <HAL_GPIO_Init+0x350>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	43db      	mvns	r3, r3
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	4013      	ands	r3, r2
 8002a72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d003      	beq.n	8002a88 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a88:	4a12      	ldr	r2, [pc, #72]	; (8002ad4 <HAL_GPIO_Init+0x350>)
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	3301      	adds	r3, #1
 8002a92:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f47f ae78 	bne.w	8002794 <HAL_GPIO_Init+0x10>
  }
}
 8002aa4:	bf00      	nop
 8002aa6:	bf00      	nop
 8002aa8:	371c      	adds	r7, #28
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	40021000 	.word	0x40021000
 8002ab8:	40010000 	.word	0x40010000
 8002abc:	48000400 	.word	0x48000400
 8002ac0:	48000800 	.word	0x48000800
 8002ac4:	48000c00 	.word	0x48000c00
 8002ac8:	48001000 	.word	0x48001000
 8002acc:	48001400 	.word	0x48001400
 8002ad0:	48001800 	.word	0x48001800
 8002ad4:	40010400 	.word	0x40010400

08002ad8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	807b      	strh	r3, [r7, #2]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ae8:	787b      	ldrb	r3, [r7, #1]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d003      	beq.n	8002af6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002aee:	887a      	ldrh	r2, [r7, #2]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002af4:	e002      	b.n	8002afc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002af6:	887a      	ldrh	r2, [r7, #2]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002afc:	bf00      	nop
 8002afe:	370c      	adds	r7, #12
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	460b      	mov	r3, r1
 8002b12:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	695b      	ldr	r3, [r3, #20]
 8002b18:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b1a:	887a      	ldrh	r2, [r7, #2]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	041a      	lsls	r2, r3, #16
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	43d9      	mvns	r1, r3
 8002b26:	887b      	ldrh	r3, [r7, #2]
 8002b28:	400b      	ands	r3, r1
 8002b2a:	431a      	orrs	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	619a      	str	r2, [r3, #24]
}
 8002b30:	bf00      	nop
 8002b32:	3714      	adds	r7, #20
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002b40:	4b04      	ldr	r3, [pc, #16]	; (8002b54 <HAL_PWREx_GetVoltageRange+0x18>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	40007000 	.word	0x40007000

08002b58 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b66:	d130      	bne.n	8002bca <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b68:	4b23      	ldr	r3, [pc, #140]	; (8002bf8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b74:	d038      	beq.n	8002be8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b76:	4b20      	ldr	r3, [pc, #128]	; (8002bf8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b7e:	4a1e      	ldr	r2, [pc, #120]	; (8002bf8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b84:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b86:	4b1d      	ldr	r3, [pc, #116]	; (8002bfc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2232      	movs	r2, #50	; 0x32
 8002b8c:	fb02 f303 	mul.w	r3, r2, r3
 8002b90:	4a1b      	ldr	r2, [pc, #108]	; (8002c00 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002b92:	fba2 2303 	umull	r2, r3, r2, r3
 8002b96:	0c9b      	lsrs	r3, r3, #18
 8002b98:	3301      	adds	r3, #1
 8002b9a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b9c:	e002      	b.n	8002ba4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	3b01      	subs	r3, #1
 8002ba2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ba4:	4b14      	ldr	r3, [pc, #80]	; (8002bf8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ba6:	695b      	ldr	r3, [r3, #20]
 8002ba8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bb0:	d102      	bne.n	8002bb8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d1f2      	bne.n	8002b9e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002bb8:	4b0f      	ldr	r3, [pc, #60]	; (8002bf8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bba:	695b      	ldr	r3, [r3, #20]
 8002bbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bc4:	d110      	bne.n	8002be8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e00f      	b.n	8002bea <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002bca:	4b0b      	ldr	r3, [pc, #44]	; (8002bf8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002bd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bd6:	d007      	beq.n	8002be8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002bd8:	4b07      	ldr	r3, [pc, #28]	; (8002bf8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002be0:	4a05      	ldr	r2, [pc, #20]	; (8002bf8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002be2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002be6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3714      	adds	r7, #20
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	40007000 	.word	0x40007000
 8002bfc:	20000000 	.word	0x20000000
 8002c00:	431bde83 	.word	0x431bde83

08002c04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b088      	sub	sp, #32
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e3ca      	b.n	80033ac <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c16:	4b97      	ldr	r3, [pc, #604]	; (8002e74 <HAL_RCC_OscConfig+0x270>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f003 030c 	and.w	r3, r3, #12
 8002c1e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c20:	4b94      	ldr	r3, [pc, #592]	; (8002e74 <HAL_RCC_OscConfig+0x270>)
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	f003 0303 	and.w	r3, r3, #3
 8002c28:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0310 	and.w	r3, r3, #16
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f000 80e4 	beq.w	8002e00 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d007      	beq.n	8002c4e <HAL_RCC_OscConfig+0x4a>
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	2b0c      	cmp	r3, #12
 8002c42:	f040 808b 	bne.w	8002d5c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	f040 8087 	bne.w	8002d5c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c4e:	4b89      	ldr	r3, [pc, #548]	; (8002e74 <HAL_RCC_OscConfig+0x270>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d005      	beq.n	8002c66 <HAL_RCC_OscConfig+0x62>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	699b      	ldr	r3, [r3, #24]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e3a2      	b.n	80033ac <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a1a      	ldr	r2, [r3, #32]
 8002c6a:	4b82      	ldr	r3, [pc, #520]	; (8002e74 <HAL_RCC_OscConfig+0x270>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0308 	and.w	r3, r3, #8
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d004      	beq.n	8002c80 <HAL_RCC_OscConfig+0x7c>
 8002c76:	4b7f      	ldr	r3, [pc, #508]	; (8002e74 <HAL_RCC_OscConfig+0x270>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c7e:	e005      	b.n	8002c8c <HAL_RCC_OscConfig+0x88>
 8002c80:	4b7c      	ldr	r3, [pc, #496]	; (8002e74 <HAL_RCC_OscConfig+0x270>)
 8002c82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c86:	091b      	lsrs	r3, r3, #4
 8002c88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d223      	bcs.n	8002cd8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a1b      	ldr	r3, [r3, #32]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f000 fd55 	bl	8003744 <RCC_SetFlashLatencyFromMSIRange>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d001      	beq.n	8002ca4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e383      	b.n	80033ac <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ca4:	4b73      	ldr	r3, [pc, #460]	; (8002e74 <HAL_RCC_OscConfig+0x270>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a72      	ldr	r2, [pc, #456]	; (8002e74 <HAL_RCC_OscConfig+0x270>)
 8002caa:	f043 0308 	orr.w	r3, r3, #8
 8002cae:	6013      	str	r3, [r2, #0]
 8002cb0:	4b70      	ldr	r3, [pc, #448]	; (8002e74 <HAL_RCC_OscConfig+0x270>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a1b      	ldr	r3, [r3, #32]
 8002cbc:	496d      	ldr	r1, [pc, #436]	; (8002e74 <HAL_RCC_OscConfig+0x270>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cc2:	4b6c      	ldr	r3, [pc, #432]	; (8002e74 <HAL_RCC_OscConfig+0x270>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	69db      	ldr	r3, [r3, #28]
 8002cce:	021b      	lsls	r3, r3, #8
 8002cd0:	4968      	ldr	r1, [pc, #416]	; (8002e74 <HAL_RCC_OscConfig+0x270>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	604b      	str	r3, [r1, #4]
 8002cd6:	e025      	b.n	8002d24 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cd8:	4b66      	ldr	r3, [pc, #408]	; (8002e74 <HAL_RCC_OscConfig+0x270>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a65      	ldr	r2, [pc, #404]	; (8002e74 <HAL_RCC_OscConfig+0x270>)
 8002cde:	f043 0308 	orr.w	r3, r3, #8
 8002ce2:	6013      	str	r3, [r2, #0]
 8002ce4:	4b63      	ldr	r3, [pc, #396]	; (8002e74 <HAL_RCC_OscConfig+0x270>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a1b      	ldr	r3, [r3, #32]
 8002cf0:	4960      	ldr	r1, [pc, #384]	; (8002e74 <HAL_RCC_OscConfig+0x270>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cf6:	4b5f      	ldr	r3, [pc, #380]	; (8002e74 <HAL_RCC_OscConfig+0x270>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	69db      	ldr	r3, [r3, #28]
 8002d02:	021b      	lsls	r3, r3, #8
 8002d04:	495b      	ldr	r1, [pc, #364]	; (8002e74 <HAL_RCC_OscConfig+0x270>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d109      	bne.n	8002d24 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a1b      	ldr	r3, [r3, #32]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f000 fd15 	bl	8003744 <RCC_SetFlashLatencyFromMSIRange>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e343      	b.n	80033ac <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d24:	f000 fc4a 	bl	80035bc <HAL_RCC_GetSysClockFreq>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	4b52      	ldr	r3, [pc, #328]	; (8002e74 <HAL_RCC_OscConfig+0x270>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	091b      	lsrs	r3, r3, #4
 8002d30:	f003 030f 	and.w	r3, r3, #15
 8002d34:	4950      	ldr	r1, [pc, #320]	; (8002e78 <HAL_RCC_OscConfig+0x274>)
 8002d36:	5ccb      	ldrb	r3, [r1, r3]
 8002d38:	f003 031f 	and.w	r3, r3, #31
 8002d3c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d40:	4a4e      	ldr	r2, [pc, #312]	; (8002e7c <HAL_RCC_OscConfig+0x278>)
 8002d42:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002d44:	4b4e      	ldr	r3, [pc, #312]	; (8002e80 <HAL_RCC_OscConfig+0x27c>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7fd ffd3 	bl	8000cf4 <HAL_InitTick>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002d52:	7bfb      	ldrb	r3, [r7, #15]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d052      	beq.n	8002dfe <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002d58:	7bfb      	ldrb	r3, [r7, #15]
 8002d5a:	e327      	b.n	80033ac <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d032      	beq.n	8002dca <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002d64:	4b43      	ldr	r3, [pc, #268]	; (8002e74 <HAL_RCC_OscConfig+0x270>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a42      	ldr	r2, [pc, #264]	; (8002e74 <HAL_RCC_OscConfig+0x270>)
 8002d6a:	f043 0301 	orr.w	r3, r3, #1
 8002d6e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d70:	f7fe f810 	bl	8000d94 <HAL_GetTick>
 8002d74:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d76:	e008      	b.n	8002d8a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d78:	f7fe f80c 	bl	8000d94 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e310      	b.n	80033ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d8a:	4b3a      	ldr	r3, [pc, #232]	; (8002e74 <HAL_RCC_OscConfig+0x270>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d0f0      	beq.n	8002d78 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d96:	4b37      	ldr	r3, [pc, #220]	; (8002e74 <HAL_RCC_OscConfig+0x270>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a36      	ldr	r2, [pc, #216]	; (8002e74 <HAL_RCC_OscConfig+0x270>)
 8002d9c:	f043 0308 	orr.w	r3, r3, #8
 8002da0:	6013      	str	r3, [r2, #0]
 8002da2:	4b34      	ldr	r3, [pc, #208]	; (8002e74 <HAL_RCC_OscConfig+0x270>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a1b      	ldr	r3, [r3, #32]
 8002dae:	4931      	ldr	r1, [pc, #196]	; (8002e74 <HAL_RCC_OscConfig+0x270>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002db4:	4b2f      	ldr	r3, [pc, #188]	; (8002e74 <HAL_RCC_OscConfig+0x270>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	69db      	ldr	r3, [r3, #28]
 8002dc0:	021b      	lsls	r3, r3, #8
 8002dc2:	492c      	ldr	r1, [pc, #176]	; (8002e74 <HAL_RCC_OscConfig+0x270>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	604b      	str	r3, [r1, #4]
 8002dc8:	e01a      	b.n	8002e00 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002dca:	4b2a      	ldr	r3, [pc, #168]	; (8002e74 <HAL_RCC_OscConfig+0x270>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a29      	ldr	r2, [pc, #164]	; (8002e74 <HAL_RCC_OscConfig+0x270>)
 8002dd0:	f023 0301 	bic.w	r3, r3, #1
 8002dd4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002dd6:	f7fd ffdd 	bl	8000d94 <HAL_GetTick>
 8002dda:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ddc:	e008      	b.n	8002df0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002dde:	f7fd ffd9 	bl	8000d94 <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d901      	bls.n	8002df0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e2dd      	b.n	80033ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002df0:	4b20      	ldr	r3, [pc, #128]	; (8002e74 <HAL_RCC_OscConfig+0x270>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0302 	and.w	r3, r3, #2
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d1f0      	bne.n	8002dde <HAL_RCC_OscConfig+0x1da>
 8002dfc:	e000      	b.n	8002e00 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002dfe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0301 	and.w	r3, r3, #1
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d074      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	2b08      	cmp	r3, #8
 8002e10:	d005      	beq.n	8002e1e <HAL_RCC_OscConfig+0x21a>
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	2b0c      	cmp	r3, #12
 8002e16:	d10e      	bne.n	8002e36 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	2b03      	cmp	r3, #3
 8002e1c:	d10b      	bne.n	8002e36 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e1e:	4b15      	ldr	r3, [pc, #84]	; (8002e74 <HAL_RCC_OscConfig+0x270>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d064      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x2f0>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d160      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e2ba      	b.n	80033ac <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e3e:	d106      	bne.n	8002e4e <HAL_RCC_OscConfig+0x24a>
 8002e40:	4b0c      	ldr	r3, [pc, #48]	; (8002e74 <HAL_RCC_OscConfig+0x270>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a0b      	ldr	r2, [pc, #44]	; (8002e74 <HAL_RCC_OscConfig+0x270>)
 8002e46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e4a:	6013      	str	r3, [r2, #0]
 8002e4c:	e026      	b.n	8002e9c <HAL_RCC_OscConfig+0x298>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e56:	d115      	bne.n	8002e84 <HAL_RCC_OscConfig+0x280>
 8002e58:	4b06      	ldr	r3, [pc, #24]	; (8002e74 <HAL_RCC_OscConfig+0x270>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a05      	ldr	r2, [pc, #20]	; (8002e74 <HAL_RCC_OscConfig+0x270>)
 8002e5e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e62:	6013      	str	r3, [r2, #0]
 8002e64:	4b03      	ldr	r3, [pc, #12]	; (8002e74 <HAL_RCC_OscConfig+0x270>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a02      	ldr	r2, [pc, #8]	; (8002e74 <HAL_RCC_OscConfig+0x270>)
 8002e6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e6e:	6013      	str	r3, [r2, #0]
 8002e70:	e014      	b.n	8002e9c <HAL_RCC_OscConfig+0x298>
 8002e72:	bf00      	nop
 8002e74:	40021000 	.word	0x40021000
 8002e78:	080064d8 	.word	0x080064d8
 8002e7c:	20000000 	.word	0x20000000
 8002e80:	20000004 	.word	0x20000004
 8002e84:	4ba0      	ldr	r3, [pc, #640]	; (8003108 <HAL_RCC_OscConfig+0x504>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a9f      	ldr	r2, [pc, #636]	; (8003108 <HAL_RCC_OscConfig+0x504>)
 8002e8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e8e:	6013      	str	r3, [r2, #0]
 8002e90:	4b9d      	ldr	r3, [pc, #628]	; (8003108 <HAL_RCC_OscConfig+0x504>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a9c      	ldr	r2, [pc, #624]	; (8003108 <HAL_RCC_OscConfig+0x504>)
 8002e96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d013      	beq.n	8002ecc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea4:	f7fd ff76 	bl	8000d94 <HAL_GetTick>
 8002ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002eaa:	e008      	b.n	8002ebe <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002eac:	f7fd ff72 	bl	8000d94 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b64      	cmp	r3, #100	; 0x64
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e276      	b.n	80033ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ebe:	4b92      	ldr	r3, [pc, #584]	; (8003108 <HAL_RCC_OscConfig+0x504>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d0f0      	beq.n	8002eac <HAL_RCC_OscConfig+0x2a8>
 8002eca:	e014      	b.n	8002ef6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ecc:	f7fd ff62 	bl	8000d94 <HAL_GetTick>
 8002ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ed2:	e008      	b.n	8002ee6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ed4:	f7fd ff5e 	bl	8000d94 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b64      	cmp	r3, #100	; 0x64
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e262      	b.n	80033ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ee6:	4b88      	ldr	r3, [pc, #544]	; (8003108 <HAL_RCC_OscConfig+0x504>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1f0      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x2d0>
 8002ef2:	e000      	b.n	8002ef6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ef4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d060      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	2b04      	cmp	r3, #4
 8002f06:	d005      	beq.n	8002f14 <HAL_RCC_OscConfig+0x310>
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	2b0c      	cmp	r3, #12
 8002f0c:	d119      	bne.n	8002f42 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d116      	bne.n	8002f42 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f14:	4b7c      	ldr	r3, [pc, #496]	; (8003108 <HAL_RCC_OscConfig+0x504>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d005      	beq.n	8002f2c <HAL_RCC_OscConfig+0x328>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d101      	bne.n	8002f2c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e23f      	b.n	80033ac <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f2c:	4b76      	ldr	r3, [pc, #472]	; (8003108 <HAL_RCC_OscConfig+0x504>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	061b      	lsls	r3, r3, #24
 8002f3a:	4973      	ldr	r1, [pc, #460]	; (8003108 <HAL_RCC_OscConfig+0x504>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f40:	e040      	b.n	8002fc4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d023      	beq.n	8002f92 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f4a:	4b6f      	ldr	r3, [pc, #444]	; (8003108 <HAL_RCC_OscConfig+0x504>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a6e      	ldr	r2, [pc, #440]	; (8003108 <HAL_RCC_OscConfig+0x504>)
 8002f50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f56:	f7fd ff1d 	bl	8000d94 <HAL_GetTick>
 8002f5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f5c:	e008      	b.n	8002f70 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f5e:	f7fd ff19 	bl	8000d94 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d901      	bls.n	8002f70 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e21d      	b.n	80033ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f70:	4b65      	ldr	r3, [pc, #404]	; (8003108 <HAL_RCC_OscConfig+0x504>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d0f0      	beq.n	8002f5e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f7c:	4b62      	ldr	r3, [pc, #392]	; (8003108 <HAL_RCC_OscConfig+0x504>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	691b      	ldr	r3, [r3, #16]
 8002f88:	061b      	lsls	r3, r3, #24
 8002f8a:	495f      	ldr	r1, [pc, #380]	; (8003108 <HAL_RCC_OscConfig+0x504>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	604b      	str	r3, [r1, #4]
 8002f90:	e018      	b.n	8002fc4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f92:	4b5d      	ldr	r3, [pc, #372]	; (8003108 <HAL_RCC_OscConfig+0x504>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a5c      	ldr	r2, [pc, #368]	; (8003108 <HAL_RCC_OscConfig+0x504>)
 8002f98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f9e:	f7fd fef9 	bl	8000d94 <HAL_GetTick>
 8002fa2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002fa4:	e008      	b.n	8002fb8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fa6:	f7fd fef5 	bl	8000d94 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e1f9      	b.n	80033ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002fb8:	4b53      	ldr	r3, [pc, #332]	; (8003108 <HAL_RCC_OscConfig+0x504>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1f0      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0308 	and.w	r3, r3, #8
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d03c      	beq.n	800304a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	695b      	ldr	r3, [r3, #20]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d01c      	beq.n	8003012 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fd8:	4b4b      	ldr	r3, [pc, #300]	; (8003108 <HAL_RCC_OscConfig+0x504>)
 8002fda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fde:	4a4a      	ldr	r2, [pc, #296]	; (8003108 <HAL_RCC_OscConfig+0x504>)
 8002fe0:	f043 0301 	orr.w	r3, r3, #1
 8002fe4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fe8:	f7fd fed4 	bl	8000d94 <HAL_GetTick>
 8002fec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fee:	e008      	b.n	8003002 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ff0:	f7fd fed0 	bl	8000d94 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e1d4      	b.n	80033ac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003002:	4b41      	ldr	r3, [pc, #260]	; (8003108 <HAL_RCC_OscConfig+0x504>)
 8003004:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003008:	f003 0302 	and.w	r3, r3, #2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d0ef      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x3ec>
 8003010:	e01b      	b.n	800304a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003012:	4b3d      	ldr	r3, [pc, #244]	; (8003108 <HAL_RCC_OscConfig+0x504>)
 8003014:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003018:	4a3b      	ldr	r2, [pc, #236]	; (8003108 <HAL_RCC_OscConfig+0x504>)
 800301a:	f023 0301 	bic.w	r3, r3, #1
 800301e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003022:	f7fd feb7 	bl	8000d94 <HAL_GetTick>
 8003026:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003028:	e008      	b.n	800303c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800302a:	f7fd feb3 	bl	8000d94 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	2b02      	cmp	r3, #2
 8003036:	d901      	bls.n	800303c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e1b7      	b.n	80033ac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800303c:	4b32      	ldr	r3, [pc, #200]	; (8003108 <HAL_RCC_OscConfig+0x504>)
 800303e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1ef      	bne.n	800302a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0304 	and.w	r3, r3, #4
 8003052:	2b00      	cmp	r3, #0
 8003054:	f000 80a6 	beq.w	80031a4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003058:	2300      	movs	r3, #0
 800305a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800305c:	4b2a      	ldr	r3, [pc, #168]	; (8003108 <HAL_RCC_OscConfig+0x504>)
 800305e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d10d      	bne.n	8003084 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003068:	4b27      	ldr	r3, [pc, #156]	; (8003108 <HAL_RCC_OscConfig+0x504>)
 800306a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800306c:	4a26      	ldr	r2, [pc, #152]	; (8003108 <HAL_RCC_OscConfig+0x504>)
 800306e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003072:	6593      	str	r3, [r2, #88]	; 0x58
 8003074:	4b24      	ldr	r3, [pc, #144]	; (8003108 <HAL_RCC_OscConfig+0x504>)
 8003076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003078:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800307c:	60bb      	str	r3, [r7, #8]
 800307e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003080:	2301      	movs	r3, #1
 8003082:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003084:	4b21      	ldr	r3, [pc, #132]	; (800310c <HAL_RCC_OscConfig+0x508>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800308c:	2b00      	cmp	r3, #0
 800308e:	d118      	bne.n	80030c2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003090:	4b1e      	ldr	r3, [pc, #120]	; (800310c <HAL_RCC_OscConfig+0x508>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a1d      	ldr	r2, [pc, #116]	; (800310c <HAL_RCC_OscConfig+0x508>)
 8003096:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800309a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800309c:	f7fd fe7a 	bl	8000d94 <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030a4:	f7fd fe76 	bl	8000d94 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e17a      	b.n	80033ac <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030b6:	4b15      	ldr	r3, [pc, #84]	; (800310c <HAL_RCC_OscConfig+0x508>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d0f0      	beq.n	80030a4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d108      	bne.n	80030dc <HAL_RCC_OscConfig+0x4d8>
 80030ca:	4b0f      	ldr	r3, [pc, #60]	; (8003108 <HAL_RCC_OscConfig+0x504>)
 80030cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d0:	4a0d      	ldr	r2, [pc, #52]	; (8003108 <HAL_RCC_OscConfig+0x504>)
 80030d2:	f043 0301 	orr.w	r3, r3, #1
 80030d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030da:	e029      	b.n	8003130 <HAL_RCC_OscConfig+0x52c>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	2b05      	cmp	r3, #5
 80030e2:	d115      	bne.n	8003110 <HAL_RCC_OscConfig+0x50c>
 80030e4:	4b08      	ldr	r3, [pc, #32]	; (8003108 <HAL_RCC_OscConfig+0x504>)
 80030e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ea:	4a07      	ldr	r2, [pc, #28]	; (8003108 <HAL_RCC_OscConfig+0x504>)
 80030ec:	f043 0304 	orr.w	r3, r3, #4
 80030f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030f4:	4b04      	ldr	r3, [pc, #16]	; (8003108 <HAL_RCC_OscConfig+0x504>)
 80030f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030fa:	4a03      	ldr	r2, [pc, #12]	; (8003108 <HAL_RCC_OscConfig+0x504>)
 80030fc:	f043 0301 	orr.w	r3, r3, #1
 8003100:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003104:	e014      	b.n	8003130 <HAL_RCC_OscConfig+0x52c>
 8003106:	bf00      	nop
 8003108:	40021000 	.word	0x40021000
 800310c:	40007000 	.word	0x40007000
 8003110:	4b9c      	ldr	r3, [pc, #624]	; (8003384 <HAL_RCC_OscConfig+0x780>)
 8003112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003116:	4a9b      	ldr	r2, [pc, #620]	; (8003384 <HAL_RCC_OscConfig+0x780>)
 8003118:	f023 0301 	bic.w	r3, r3, #1
 800311c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003120:	4b98      	ldr	r3, [pc, #608]	; (8003384 <HAL_RCC_OscConfig+0x780>)
 8003122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003126:	4a97      	ldr	r2, [pc, #604]	; (8003384 <HAL_RCC_OscConfig+0x780>)
 8003128:	f023 0304 	bic.w	r3, r3, #4
 800312c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d016      	beq.n	8003166 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003138:	f7fd fe2c 	bl	8000d94 <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800313e:	e00a      	b.n	8003156 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003140:	f7fd fe28 	bl	8000d94 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	f241 3288 	movw	r2, #5000	; 0x1388
 800314e:	4293      	cmp	r3, r2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e12a      	b.n	80033ac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003156:	4b8b      	ldr	r3, [pc, #556]	; (8003384 <HAL_RCC_OscConfig+0x780>)
 8003158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d0ed      	beq.n	8003140 <HAL_RCC_OscConfig+0x53c>
 8003164:	e015      	b.n	8003192 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003166:	f7fd fe15 	bl	8000d94 <HAL_GetTick>
 800316a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800316c:	e00a      	b.n	8003184 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800316e:	f7fd fe11 	bl	8000d94 <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	f241 3288 	movw	r2, #5000	; 0x1388
 800317c:	4293      	cmp	r3, r2
 800317e:	d901      	bls.n	8003184 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e113      	b.n	80033ac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003184:	4b7f      	ldr	r3, [pc, #508]	; (8003384 <HAL_RCC_OscConfig+0x780>)
 8003186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1ed      	bne.n	800316e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003192:	7ffb      	ldrb	r3, [r7, #31]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d105      	bne.n	80031a4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003198:	4b7a      	ldr	r3, [pc, #488]	; (8003384 <HAL_RCC_OscConfig+0x780>)
 800319a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800319c:	4a79      	ldr	r2, [pc, #484]	; (8003384 <HAL_RCC_OscConfig+0x780>)
 800319e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031a2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	f000 80fe 	beq.w	80033aa <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	f040 80d0 	bne.w	8003358 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80031b8:	4b72      	ldr	r3, [pc, #456]	; (8003384 <HAL_RCC_OscConfig+0x780>)
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	f003 0203 	and.w	r2, r3, #3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d130      	bne.n	800322e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d6:	3b01      	subs	r3, #1
 80031d8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80031da:	429a      	cmp	r2, r3
 80031dc:	d127      	bne.n	800322e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031e8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d11f      	bne.n	800322e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80031f8:	2a07      	cmp	r2, #7
 80031fa:	bf14      	ite	ne
 80031fc:	2201      	movne	r2, #1
 80031fe:	2200      	moveq	r2, #0
 8003200:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003202:	4293      	cmp	r3, r2
 8003204:	d113      	bne.n	800322e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003210:	085b      	lsrs	r3, r3, #1
 8003212:	3b01      	subs	r3, #1
 8003214:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003216:	429a      	cmp	r2, r3
 8003218:	d109      	bne.n	800322e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003224:	085b      	lsrs	r3, r3, #1
 8003226:	3b01      	subs	r3, #1
 8003228:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800322a:	429a      	cmp	r2, r3
 800322c:	d06e      	beq.n	800330c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	2b0c      	cmp	r3, #12
 8003232:	d069      	beq.n	8003308 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003234:	4b53      	ldr	r3, [pc, #332]	; (8003384 <HAL_RCC_OscConfig+0x780>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d105      	bne.n	800324c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003240:	4b50      	ldr	r3, [pc, #320]	; (8003384 <HAL_RCC_OscConfig+0x780>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d001      	beq.n	8003250 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e0ad      	b.n	80033ac <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003250:	4b4c      	ldr	r3, [pc, #304]	; (8003384 <HAL_RCC_OscConfig+0x780>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a4b      	ldr	r2, [pc, #300]	; (8003384 <HAL_RCC_OscConfig+0x780>)
 8003256:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800325a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800325c:	f7fd fd9a 	bl	8000d94 <HAL_GetTick>
 8003260:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003262:	e008      	b.n	8003276 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003264:	f7fd fd96 	bl	8000d94 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b02      	cmp	r3, #2
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e09a      	b.n	80033ac <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003276:	4b43      	ldr	r3, [pc, #268]	; (8003384 <HAL_RCC_OscConfig+0x780>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1f0      	bne.n	8003264 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003282:	4b40      	ldr	r3, [pc, #256]	; (8003384 <HAL_RCC_OscConfig+0x780>)
 8003284:	68da      	ldr	r2, [r3, #12]
 8003286:	4b40      	ldr	r3, [pc, #256]	; (8003388 <HAL_RCC_OscConfig+0x784>)
 8003288:	4013      	ands	r3, r2
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003292:	3a01      	subs	r2, #1
 8003294:	0112      	lsls	r2, r2, #4
 8003296:	4311      	orrs	r1, r2
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800329c:	0212      	lsls	r2, r2, #8
 800329e:	4311      	orrs	r1, r2
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80032a4:	0852      	lsrs	r2, r2, #1
 80032a6:	3a01      	subs	r2, #1
 80032a8:	0552      	lsls	r2, r2, #21
 80032aa:	4311      	orrs	r1, r2
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80032b0:	0852      	lsrs	r2, r2, #1
 80032b2:	3a01      	subs	r2, #1
 80032b4:	0652      	lsls	r2, r2, #25
 80032b6:	4311      	orrs	r1, r2
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032bc:	0912      	lsrs	r2, r2, #4
 80032be:	0452      	lsls	r2, r2, #17
 80032c0:	430a      	orrs	r2, r1
 80032c2:	4930      	ldr	r1, [pc, #192]	; (8003384 <HAL_RCC_OscConfig+0x780>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80032c8:	4b2e      	ldr	r3, [pc, #184]	; (8003384 <HAL_RCC_OscConfig+0x780>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a2d      	ldr	r2, [pc, #180]	; (8003384 <HAL_RCC_OscConfig+0x780>)
 80032ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032d2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032d4:	4b2b      	ldr	r3, [pc, #172]	; (8003384 <HAL_RCC_OscConfig+0x780>)
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	4a2a      	ldr	r2, [pc, #168]	; (8003384 <HAL_RCC_OscConfig+0x780>)
 80032da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032de:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80032e0:	f7fd fd58 	bl	8000d94 <HAL_GetTick>
 80032e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032e6:	e008      	b.n	80032fa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032e8:	f7fd fd54 	bl	8000d94 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e058      	b.n	80033ac <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032fa:	4b22      	ldr	r3, [pc, #136]	; (8003384 <HAL_RCC_OscConfig+0x780>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d0f0      	beq.n	80032e8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003306:	e050      	b.n	80033aa <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e04f      	b.n	80033ac <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800330c:	4b1d      	ldr	r3, [pc, #116]	; (8003384 <HAL_RCC_OscConfig+0x780>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d148      	bne.n	80033aa <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003318:	4b1a      	ldr	r3, [pc, #104]	; (8003384 <HAL_RCC_OscConfig+0x780>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a19      	ldr	r2, [pc, #100]	; (8003384 <HAL_RCC_OscConfig+0x780>)
 800331e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003322:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003324:	4b17      	ldr	r3, [pc, #92]	; (8003384 <HAL_RCC_OscConfig+0x780>)
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	4a16      	ldr	r2, [pc, #88]	; (8003384 <HAL_RCC_OscConfig+0x780>)
 800332a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800332e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003330:	f7fd fd30 	bl	8000d94 <HAL_GetTick>
 8003334:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003336:	e008      	b.n	800334a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003338:	f7fd fd2c 	bl	8000d94 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b02      	cmp	r3, #2
 8003344:	d901      	bls.n	800334a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e030      	b.n	80033ac <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800334a:	4b0e      	ldr	r3, [pc, #56]	; (8003384 <HAL_RCC_OscConfig+0x780>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d0f0      	beq.n	8003338 <HAL_RCC_OscConfig+0x734>
 8003356:	e028      	b.n	80033aa <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	2b0c      	cmp	r3, #12
 800335c:	d023      	beq.n	80033a6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800335e:	4b09      	ldr	r3, [pc, #36]	; (8003384 <HAL_RCC_OscConfig+0x780>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a08      	ldr	r2, [pc, #32]	; (8003384 <HAL_RCC_OscConfig+0x780>)
 8003364:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003368:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800336a:	f7fd fd13 	bl	8000d94 <HAL_GetTick>
 800336e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003370:	e00c      	b.n	800338c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003372:	f7fd fd0f 	bl	8000d94 <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	2b02      	cmp	r3, #2
 800337e:	d905      	bls.n	800338c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e013      	b.n	80033ac <HAL_RCC_OscConfig+0x7a8>
 8003384:	40021000 	.word	0x40021000
 8003388:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800338c:	4b09      	ldr	r3, [pc, #36]	; (80033b4 <HAL_RCC_OscConfig+0x7b0>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d1ec      	bne.n	8003372 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003398:	4b06      	ldr	r3, [pc, #24]	; (80033b4 <HAL_RCC_OscConfig+0x7b0>)
 800339a:	68da      	ldr	r2, [r3, #12]
 800339c:	4905      	ldr	r1, [pc, #20]	; (80033b4 <HAL_RCC_OscConfig+0x7b0>)
 800339e:	4b06      	ldr	r3, [pc, #24]	; (80033b8 <HAL_RCC_OscConfig+0x7b4>)
 80033a0:	4013      	ands	r3, r2
 80033a2:	60cb      	str	r3, [r1, #12]
 80033a4:	e001      	b.n	80033aa <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e000      	b.n	80033ac <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3720      	adds	r7, #32
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	40021000 	.word	0x40021000
 80033b8:	feeefffc 	.word	0xfeeefffc

080033bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d101      	bne.n	80033d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e0e7      	b.n	80035a0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033d0:	4b75      	ldr	r3, [pc, #468]	; (80035a8 <HAL_RCC_ClockConfig+0x1ec>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0307 	and.w	r3, r3, #7
 80033d8:	683a      	ldr	r2, [r7, #0]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d910      	bls.n	8003400 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033de:	4b72      	ldr	r3, [pc, #456]	; (80035a8 <HAL_RCC_ClockConfig+0x1ec>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f023 0207 	bic.w	r2, r3, #7
 80033e6:	4970      	ldr	r1, [pc, #448]	; (80035a8 <HAL_RCC_ClockConfig+0x1ec>)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ee:	4b6e      	ldr	r3, [pc, #440]	; (80035a8 <HAL_RCC_ClockConfig+0x1ec>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0307 	and.w	r3, r3, #7
 80033f6:	683a      	ldr	r2, [r7, #0]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d001      	beq.n	8003400 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e0cf      	b.n	80035a0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0302 	and.w	r3, r3, #2
 8003408:	2b00      	cmp	r3, #0
 800340a:	d010      	beq.n	800342e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	689a      	ldr	r2, [r3, #8]
 8003410:	4b66      	ldr	r3, [pc, #408]	; (80035ac <HAL_RCC_ClockConfig+0x1f0>)
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003418:	429a      	cmp	r2, r3
 800341a:	d908      	bls.n	800342e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800341c:	4b63      	ldr	r3, [pc, #396]	; (80035ac <HAL_RCC_ClockConfig+0x1f0>)
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	4960      	ldr	r1, [pc, #384]	; (80035ac <HAL_RCC_ClockConfig+0x1f0>)
 800342a:	4313      	orrs	r3, r2
 800342c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	2b00      	cmp	r3, #0
 8003438:	d04c      	beq.n	80034d4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	2b03      	cmp	r3, #3
 8003440:	d107      	bne.n	8003452 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003442:	4b5a      	ldr	r3, [pc, #360]	; (80035ac <HAL_RCC_ClockConfig+0x1f0>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d121      	bne.n	8003492 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e0a6      	b.n	80035a0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	2b02      	cmp	r3, #2
 8003458:	d107      	bne.n	800346a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800345a:	4b54      	ldr	r3, [pc, #336]	; (80035ac <HAL_RCC_ClockConfig+0x1f0>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d115      	bne.n	8003492 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e09a      	b.n	80035a0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d107      	bne.n	8003482 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003472:	4b4e      	ldr	r3, [pc, #312]	; (80035ac <HAL_RCC_ClockConfig+0x1f0>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	2b00      	cmp	r3, #0
 800347c:	d109      	bne.n	8003492 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e08e      	b.n	80035a0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003482:	4b4a      	ldr	r3, [pc, #296]	; (80035ac <HAL_RCC_ClockConfig+0x1f0>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800348a:	2b00      	cmp	r3, #0
 800348c:	d101      	bne.n	8003492 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e086      	b.n	80035a0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003492:	4b46      	ldr	r3, [pc, #280]	; (80035ac <HAL_RCC_ClockConfig+0x1f0>)
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f023 0203 	bic.w	r2, r3, #3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	4943      	ldr	r1, [pc, #268]	; (80035ac <HAL_RCC_ClockConfig+0x1f0>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034a4:	f7fd fc76 	bl	8000d94 <HAL_GetTick>
 80034a8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034aa:	e00a      	b.n	80034c2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034ac:	f7fd fc72 	bl	8000d94 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e06e      	b.n	80035a0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034c2:	4b3a      	ldr	r3, [pc, #232]	; (80035ac <HAL_RCC_ClockConfig+0x1f0>)
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f003 020c 	and.w	r2, r3, #12
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d1eb      	bne.n	80034ac <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0302 	and.w	r3, r3, #2
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d010      	beq.n	8003502 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	4b31      	ldr	r3, [pc, #196]	; (80035ac <HAL_RCC_ClockConfig+0x1f0>)
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d208      	bcs.n	8003502 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034f0:	4b2e      	ldr	r3, [pc, #184]	; (80035ac <HAL_RCC_ClockConfig+0x1f0>)
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	492b      	ldr	r1, [pc, #172]	; (80035ac <HAL_RCC_ClockConfig+0x1f0>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003502:	4b29      	ldr	r3, [pc, #164]	; (80035a8 <HAL_RCC_ClockConfig+0x1ec>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0307 	and.w	r3, r3, #7
 800350a:	683a      	ldr	r2, [r7, #0]
 800350c:	429a      	cmp	r2, r3
 800350e:	d210      	bcs.n	8003532 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003510:	4b25      	ldr	r3, [pc, #148]	; (80035a8 <HAL_RCC_ClockConfig+0x1ec>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f023 0207 	bic.w	r2, r3, #7
 8003518:	4923      	ldr	r1, [pc, #140]	; (80035a8 <HAL_RCC_ClockConfig+0x1ec>)
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	4313      	orrs	r3, r2
 800351e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003520:	4b21      	ldr	r3, [pc, #132]	; (80035a8 <HAL_RCC_ClockConfig+0x1ec>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0307 	and.w	r3, r3, #7
 8003528:	683a      	ldr	r2, [r7, #0]
 800352a:	429a      	cmp	r2, r3
 800352c:	d001      	beq.n	8003532 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e036      	b.n	80035a0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0304 	and.w	r3, r3, #4
 800353a:	2b00      	cmp	r3, #0
 800353c:	d008      	beq.n	8003550 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800353e:	4b1b      	ldr	r3, [pc, #108]	; (80035ac <HAL_RCC_ClockConfig+0x1f0>)
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	4918      	ldr	r1, [pc, #96]	; (80035ac <HAL_RCC_ClockConfig+0x1f0>)
 800354c:	4313      	orrs	r3, r2
 800354e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0308 	and.w	r3, r3, #8
 8003558:	2b00      	cmp	r3, #0
 800355a:	d009      	beq.n	8003570 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800355c:	4b13      	ldr	r3, [pc, #76]	; (80035ac <HAL_RCC_ClockConfig+0x1f0>)
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	00db      	lsls	r3, r3, #3
 800356a:	4910      	ldr	r1, [pc, #64]	; (80035ac <HAL_RCC_ClockConfig+0x1f0>)
 800356c:	4313      	orrs	r3, r2
 800356e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003570:	f000 f824 	bl	80035bc <HAL_RCC_GetSysClockFreq>
 8003574:	4602      	mov	r2, r0
 8003576:	4b0d      	ldr	r3, [pc, #52]	; (80035ac <HAL_RCC_ClockConfig+0x1f0>)
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	091b      	lsrs	r3, r3, #4
 800357c:	f003 030f 	and.w	r3, r3, #15
 8003580:	490b      	ldr	r1, [pc, #44]	; (80035b0 <HAL_RCC_ClockConfig+0x1f4>)
 8003582:	5ccb      	ldrb	r3, [r1, r3]
 8003584:	f003 031f 	and.w	r3, r3, #31
 8003588:	fa22 f303 	lsr.w	r3, r2, r3
 800358c:	4a09      	ldr	r2, [pc, #36]	; (80035b4 <HAL_RCC_ClockConfig+0x1f8>)
 800358e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003590:	4b09      	ldr	r3, [pc, #36]	; (80035b8 <HAL_RCC_ClockConfig+0x1fc>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4618      	mov	r0, r3
 8003596:	f7fd fbad 	bl	8000cf4 <HAL_InitTick>
 800359a:	4603      	mov	r3, r0
 800359c:	72fb      	strb	r3, [r7, #11]

  return status;
 800359e:	7afb      	ldrb	r3, [r7, #11]
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3710      	adds	r7, #16
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	40022000 	.word	0x40022000
 80035ac:	40021000 	.word	0x40021000
 80035b0:	080064d8 	.word	0x080064d8
 80035b4:	20000000 	.word	0x20000000
 80035b8:	20000004 	.word	0x20000004

080035bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035bc:	b480      	push	{r7}
 80035be:	b089      	sub	sp, #36	; 0x24
 80035c0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80035c2:	2300      	movs	r3, #0
 80035c4:	61fb      	str	r3, [r7, #28]
 80035c6:	2300      	movs	r3, #0
 80035c8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035ca:	4b3e      	ldr	r3, [pc, #248]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f003 030c 	and.w	r3, r3, #12
 80035d2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035d4:	4b3b      	ldr	r3, [pc, #236]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	f003 0303 	and.w	r3, r3, #3
 80035dc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d005      	beq.n	80035f0 <HAL_RCC_GetSysClockFreq+0x34>
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	2b0c      	cmp	r3, #12
 80035e8:	d121      	bne.n	800362e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d11e      	bne.n	800362e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80035f0:	4b34      	ldr	r3, [pc, #208]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0308 	and.w	r3, r3, #8
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d107      	bne.n	800360c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80035fc:	4b31      	ldr	r3, [pc, #196]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80035fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003602:	0a1b      	lsrs	r3, r3, #8
 8003604:	f003 030f 	and.w	r3, r3, #15
 8003608:	61fb      	str	r3, [r7, #28]
 800360a:	e005      	b.n	8003618 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800360c:	4b2d      	ldr	r3, [pc, #180]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	091b      	lsrs	r3, r3, #4
 8003612:	f003 030f 	and.w	r3, r3, #15
 8003616:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003618:	4a2b      	ldr	r2, [pc, #172]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003620:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d10d      	bne.n	8003644 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800362c:	e00a      	b.n	8003644 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	2b04      	cmp	r3, #4
 8003632:	d102      	bne.n	800363a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003634:	4b25      	ldr	r3, [pc, #148]	; (80036cc <HAL_RCC_GetSysClockFreq+0x110>)
 8003636:	61bb      	str	r3, [r7, #24]
 8003638:	e004      	b.n	8003644 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	2b08      	cmp	r3, #8
 800363e:	d101      	bne.n	8003644 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003640:	4b23      	ldr	r3, [pc, #140]	; (80036d0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003642:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	2b0c      	cmp	r3, #12
 8003648:	d134      	bne.n	80036b4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800364a:	4b1e      	ldr	r3, [pc, #120]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	f003 0303 	and.w	r3, r3, #3
 8003652:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	2b02      	cmp	r3, #2
 8003658:	d003      	beq.n	8003662 <HAL_RCC_GetSysClockFreq+0xa6>
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	2b03      	cmp	r3, #3
 800365e:	d003      	beq.n	8003668 <HAL_RCC_GetSysClockFreq+0xac>
 8003660:	e005      	b.n	800366e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003662:	4b1a      	ldr	r3, [pc, #104]	; (80036cc <HAL_RCC_GetSysClockFreq+0x110>)
 8003664:	617b      	str	r3, [r7, #20]
      break;
 8003666:	e005      	b.n	8003674 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003668:	4b19      	ldr	r3, [pc, #100]	; (80036d0 <HAL_RCC_GetSysClockFreq+0x114>)
 800366a:	617b      	str	r3, [r7, #20]
      break;
 800366c:	e002      	b.n	8003674 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	617b      	str	r3, [r7, #20]
      break;
 8003672:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003674:	4b13      	ldr	r3, [pc, #76]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	091b      	lsrs	r3, r3, #4
 800367a:	f003 0307 	and.w	r3, r3, #7
 800367e:	3301      	adds	r3, #1
 8003680:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003682:	4b10      	ldr	r3, [pc, #64]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	0a1b      	lsrs	r3, r3, #8
 8003688:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800368c:	697a      	ldr	r2, [r7, #20]
 800368e:	fb03 f202 	mul.w	r2, r3, r2
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	fbb2 f3f3 	udiv	r3, r2, r3
 8003698:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800369a:	4b0a      	ldr	r3, [pc, #40]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	0e5b      	lsrs	r3, r3, #25
 80036a0:	f003 0303 	and.w	r3, r3, #3
 80036a4:	3301      	adds	r3, #1
 80036a6:	005b      	lsls	r3, r3, #1
 80036a8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80036aa:	697a      	ldr	r2, [r7, #20]
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80036b4:	69bb      	ldr	r3, [r7, #24]
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3724      	adds	r7, #36	; 0x24
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	40021000 	.word	0x40021000
 80036c8:	080064f0 	.word	0x080064f0
 80036cc:	00f42400 	.word	0x00f42400
 80036d0:	007a1200 	.word	0x007a1200

080036d4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036d4:	b480      	push	{r7}
 80036d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036d8:	4b03      	ldr	r3, [pc, #12]	; (80036e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80036da:	681b      	ldr	r3, [r3, #0]
}
 80036dc:	4618      	mov	r0, r3
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	20000000 	.word	0x20000000

080036ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80036f0:	f7ff fff0 	bl	80036d4 <HAL_RCC_GetHCLKFreq>
 80036f4:	4602      	mov	r2, r0
 80036f6:	4b06      	ldr	r3, [pc, #24]	; (8003710 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	0a1b      	lsrs	r3, r3, #8
 80036fc:	f003 0307 	and.w	r3, r3, #7
 8003700:	4904      	ldr	r1, [pc, #16]	; (8003714 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003702:	5ccb      	ldrb	r3, [r1, r3]
 8003704:	f003 031f 	and.w	r3, r3, #31
 8003708:	fa22 f303 	lsr.w	r3, r2, r3
}
 800370c:	4618      	mov	r0, r3
 800370e:	bd80      	pop	{r7, pc}
 8003710:	40021000 	.word	0x40021000
 8003714:	080064e8 	.word	0x080064e8

08003718 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800371c:	f7ff ffda 	bl	80036d4 <HAL_RCC_GetHCLKFreq>
 8003720:	4602      	mov	r2, r0
 8003722:	4b06      	ldr	r3, [pc, #24]	; (800373c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	0adb      	lsrs	r3, r3, #11
 8003728:	f003 0307 	and.w	r3, r3, #7
 800372c:	4904      	ldr	r1, [pc, #16]	; (8003740 <HAL_RCC_GetPCLK2Freq+0x28>)
 800372e:	5ccb      	ldrb	r3, [r1, r3]
 8003730:	f003 031f 	and.w	r3, r3, #31
 8003734:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003738:	4618      	mov	r0, r3
 800373a:	bd80      	pop	{r7, pc}
 800373c:	40021000 	.word	0x40021000
 8003740:	080064e8 	.word	0x080064e8

08003744 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b086      	sub	sp, #24
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800374c:	2300      	movs	r3, #0
 800374e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003750:	4b2a      	ldr	r3, [pc, #168]	; (80037fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d003      	beq.n	8003764 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800375c:	f7ff f9ee 	bl	8002b3c <HAL_PWREx_GetVoltageRange>
 8003760:	6178      	str	r0, [r7, #20]
 8003762:	e014      	b.n	800378e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003764:	4b25      	ldr	r3, [pc, #148]	; (80037fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003768:	4a24      	ldr	r2, [pc, #144]	; (80037fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800376a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800376e:	6593      	str	r3, [r2, #88]	; 0x58
 8003770:	4b22      	ldr	r3, [pc, #136]	; (80037fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003778:	60fb      	str	r3, [r7, #12]
 800377a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800377c:	f7ff f9de 	bl	8002b3c <HAL_PWREx_GetVoltageRange>
 8003780:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003782:	4b1e      	ldr	r3, [pc, #120]	; (80037fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003786:	4a1d      	ldr	r2, [pc, #116]	; (80037fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003788:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800378c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003794:	d10b      	bne.n	80037ae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2b80      	cmp	r3, #128	; 0x80
 800379a:	d919      	bls.n	80037d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2ba0      	cmp	r3, #160	; 0xa0
 80037a0:	d902      	bls.n	80037a8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80037a2:	2302      	movs	r3, #2
 80037a4:	613b      	str	r3, [r7, #16]
 80037a6:	e013      	b.n	80037d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80037a8:	2301      	movs	r3, #1
 80037aa:	613b      	str	r3, [r7, #16]
 80037ac:	e010      	b.n	80037d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2b80      	cmp	r3, #128	; 0x80
 80037b2:	d902      	bls.n	80037ba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80037b4:	2303      	movs	r3, #3
 80037b6:	613b      	str	r3, [r7, #16]
 80037b8:	e00a      	b.n	80037d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2b80      	cmp	r3, #128	; 0x80
 80037be:	d102      	bne.n	80037c6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80037c0:	2302      	movs	r3, #2
 80037c2:	613b      	str	r3, [r7, #16]
 80037c4:	e004      	b.n	80037d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2b70      	cmp	r3, #112	; 0x70
 80037ca:	d101      	bne.n	80037d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80037cc:	2301      	movs	r3, #1
 80037ce:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80037d0:	4b0b      	ldr	r3, [pc, #44]	; (8003800 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f023 0207 	bic.w	r2, r3, #7
 80037d8:	4909      	ldr	r1, [pc, #36]	; (8003800 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	4313      	orrs	r3, r2
 80037de:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80037e0:	4b07      	ldr	r3, [pc, #28]	; (8003800 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0307 	and.w	r3, r3, #7
 80037e8:	693a      	ldr	r2, [r7, #16]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d001      	beq.n	80037f2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e000      	b.n	80037f4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3718      	adds	r7, #24
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	40021000 	.word	0x40021000
 8003800:	40022000 	.word	0x40022000

08003804 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b086      	sub	sp, #24
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800380c:	2300      	movs	r3, #0
 800380e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003810:	2300      	movs	r3, #0
 8003812:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800381c:	2b00      	cmp	r3, #0
 800381e:	d041      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003824:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003828:	d02a      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800382a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800382e:	d824      	bhi.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003830:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003834:	d008      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003836:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800383a:	d81e      	bhi.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800383c:	2b00      	cmp	r3, #0
 800383e:	d00a      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003840:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003844:	d010      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003846:	e018      	b.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003848:	4b86      	ldr	r3, [pc, #536]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	4a85      	ldr	r2, [pc, #532]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800384e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003852:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003854:	e015      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	3304      	adds	r3, #4
 800385a:	2100      	movs	r1, #0
 800385c:	4618      	mov	r0, r3
 800385e:	f000 fabb 	bl	8003dd8 <RCCEx_PLLSAI1_Config>
 8003862:	4603      	mov	r3, r0
 8003864:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003866:	e00c      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	3320      	adds	r3, #32
 800386c:	2100      	movs	r1, #0
 800386e:	4618      	mov	r0, r3
 8003870:	f000 fba6 	bl	8003fc0 <RCCEx_PLLSAI2_Config>
 8003874:	4603      	mov	r3, r0
 8003876:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003878:	e003      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	74fb      	strb	r3, [r7, #19]
      break;
 800387e:	e000      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003880:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003882:	7cfb      	ldrb	r3, [r7, #19]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d10b      	bne.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003888:	4b76      	ldr	r3, [pc, #472]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800388a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800388e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003896:	4973      	ldr	r1, [pc, #460]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003898:	4313      	orrs	r3, r2
 800389a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800389e:	e001      	b.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038a0:	7cfb      	ldrb	r3, [r7, #19]
 80038a2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d041      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038b4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80038b8:	d02a      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80038ba:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80038be:	d824      	bhi.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80038c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038c4:	d008      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80038c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038ca:	d81e      	bhi.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00a      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80038d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038d4:	d010      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80038d6:	e018      	b.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80038d8:	4b62      	ldr	r3, [pc, #392]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	4a61      	ldr	r2, [pc, #388]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038e2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80038e4:	e015      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	3304      	adds	r3, #4
 80038ea:	2100      	movs	r1, #0
 80038ec:	4618      	mov	r0, r3
 80038ee:	f000 fa73 	bl	8003dd8 <RCCEx_PLLSAI1_Config>
 80038f2:	4603      	mov	r3, r0
 80038f4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80038f6:	e00c      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	3320      	adds	r3, #32
 80038fc:	2100      	movs	r1, #0
 80038fe:	4618      	mov	r0, r3
 8003900:	f000 fb5e 	bl	8003fc0 <RCCEx_PLLSAI2_Config>
 8003904:	4603      	mov	r3, r0
 8003906:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003908:	e003      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	74fb      	strb	r3, [r7, #19]
      break;
 800390e:	e000      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003910:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003912:	7cfb      	ldrb	r3, [r7, #19]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d10b      	bne.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003918:	4b52      	ldr	r3, [pc, #328]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800391a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800391e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003926:	494f      	ldr	r1, [pc, #316]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003928:	4313      	orrs	r3, r2
 800392a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800392e:	e001      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003930:	7cfb      	ldrb	r3, [r7, #19]
 8003932:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800393c:	2b00      	cmp	r3, #0
 800393e:	f000 80a0 	beq.w	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003942:	2300      	movs	r3, #0
 8003944:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003946:	4b47      	ldr	r3, [pc, #284]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800394a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d101      	bne.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003952:	2301      	movs	r3, #1
 8003954:	e000      	b.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003956:	2300      	movs	r3, #0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d00d      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800395c:	4b41      	ldr	r3, [pc, #260]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800395e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003960:	4a40      	ldr	r2, [pc, #256]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003962:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003966:	6593      	str	r3, [r2, #88]	; 0x58
 8003968:	4b3e      	ldr	r3, [pc, #248]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800396a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800396c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003970:	60bb      	str	r3, [r7, #8]
 8003972:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003974:	2301      	movs	r3, #1
 8003976:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003978:	4b3b      	ldr	r3, [pc, #236]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a3a      	ldr	r2, [pc, #232]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800397e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003982:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003984:	f7fd fa06 	bl	8000d94 <HAL_GetTick>
 8003988:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800398a:	e009      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800398c:	f7fd fa02 	bl	8000d94 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b02      	cmp	r3, #2
 8003998:	d902      	bls.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	74fb      	strb	r3, [r7, #19]
        break;
 800399e:	e005      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80039a0:	4b31      	ldr	r3, [pc, #196]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d0ef      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80039ac:	7cfb      	ldrb	r3, [r7, #19]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d15c      	bne.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80039b2:	4b2c      	ldr	r3, [pc, #176]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039bc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d01f      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039ca:	697a      	ldr	r2, [r7, #20]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d019      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80039d0:	4b24      	ldr	r3, [pc, #144]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039da:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80039dc:	4b21      	ldr	r3, [pc, #132]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039e2:	4a20      	ldr	r2, [pc, #128]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80039ec:	4b1d      	ldr	r3, [pc, #116]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f2:	4a1c      	ldr	r2, [pc, #112]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80039fc:	4a19      	ldr	r2, [pc, #100]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	f003 0301 	and.w	r3, r3, #1
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d016      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a0e:	f7fd f9c1 	bl	8000d94 <HAL_GetTick>
 8003a12:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a14:	e00b      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a16:	f7fd f9bd 	bl	8000d94 <HAL_GetTick>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d902      	bls.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	74fb      	strb	r3, [r7, #19]
            break;
 8003a2c:	e006      	b.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a2e:	4b0d      	ldr	r3, [pc, #52]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a34:	f003 0302 	and.w	r3, r3, #2
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d0ec      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003a3c:	7cfb      	ldrb	r3, [r7, #19]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d10c      	bne.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a42:	4b08      	ldr	r3, [pc, #32]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a52:	4904      	ldr	r1, [pc, #16]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003a5a:	e009      	b.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a5c:	7cfb      	ldrb	r3, [r7, #19]
 8003a5e:	74bb      	strb	r3, [r7, #18]
 8003a60:	e006      	b.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003a62:	bf00      	nop
 8003a64:	40021000 	.word	0x40021000
 8003a68:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a6c:	7cfb      	ldrb	r3, [r7, #19]
 8003a6e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a70:	7c7b      	ldrb	r3, [r7, #17]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d105      	bne.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a76:	4b9e      	ldr	r3, [pc, #632]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a7a:	4a9d      	ldr	r2, [pc, #628]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a80:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00a      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a8e:	4b98      	ldr	r3, [pc, #608]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a94:	f023 0203 	bic.w	r2, r3, #3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a9c:	4994      	ldr	r1, [pc, #592]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0302 	and.w	r3, r3, #2
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d00a      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ab0:	4b8f      	ldr	r3, [pc, #572]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab6:	f023 020c 	bic.w	r2, r3, #12
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003abe:	498c      	ldr	r1, [pc, #560]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0304 	and.w	r3, r3, #4
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d00a      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ad2:	4b87      	ldr	r3, [pc, #540]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae0:	4983      	ldr	r1, [pc, #524]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0308 	and.w	r3, r3, #8
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d00a      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003af4:	4b7e      	ldr	r3, [pc, #504]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003afa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b02:	497b      	ldr	r1, [pc, #492]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b04:	4313      	orrs	r3, r2
 8003b06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0310 	and.w	r3, r3, #16
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00a      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b16:	4b76      	ldr	r3, [pc, #472]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b24:	4972      	ldr	r1, [pc, #456]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0320 	and.w	r3, r3, #32
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d00a      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b38:	4b6d      	ldr	r3, [pc, #436]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b3e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b46:	496a      	ldr	r1, [pc, #424]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00a      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b5a:	4b65      	ldr	r3, [pc, #404]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b60:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b68:	4961      	ldr	r1, [pc, #388]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d00a      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b7c:	4b5c      	ldr	r3, [pc, #368]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b82:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b8a:	4959      	ldr	r1, [pc, #356]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00a      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b9e:	4b54      	ldr	r3, [pc, #336]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bac:	4950      	ldr	r1, [pc, #320]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d00a      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003bc0:	4b4b      	ldr	r3, [pc, #300]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bc6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bce:	4948      	ldr	r1, [pc, #288]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00a      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003be2:	4b43      	ldr	r3, [pc, #268]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf0:	493f      	ldr	r1, [pc, #252]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d028      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c04:	4b3a      	ldr	r3, [pc, #232]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c0a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c12:	4937      	ldr	r1, [pc, #220]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c22:	d106      	bne.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c24:	4b32      	ldr	r3, [pc, #200]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	4a31      	ldr	r2, [pc, #196]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c2e:	60d3      	str	r3, [r2, #12]
 8003c30:	e011      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c36:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c3a:	d10c      	bne.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	3304      	adds	r3, #4
 8003c40:	2101      	movs	r1, #1
 8003c42:	4618      	mov	r0, r3
 8003c44:	f000 f8c8 	bl	8003dd8 <RCCEx_PLLSAI1_Config>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003c4c:	7cfb      	ldrb	r3, [r7, #19]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d001      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003c52:	7cfb      	ldrb	r3, [r7, #19]
 8003c54:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d028      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003c62:	4b23      	ldr	r3, [pc, #140]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c68:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c70:	491f      	ldr	r1, [pc, #124]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c80:	d106      	bne.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c82:	4b1b      	ldr	r3, [pc, #108]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	4a1a      	ldr	r2, [pc, #104]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c8c:	60d3      	str	r3, [r2, #12]
 8003c8e:	e011      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c98:	d10c      	bne.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	3304      	adds	r3, #4
 8003c9e:	2101      	movs	r1, #1
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f000 f899 	bl	8003dd8 <RCCEx_PLLSAI1_Config>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003caa:	7cfb      	ldrb	r3, [r7, #19]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d001      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003cb0:	7cfb      	ldrb	r3, [r7, #19]
 8003cb2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d02b      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003cc0:	4b0b      	ldr	r3, [pc, #44]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cce:	4908      	ldr	r1, [pc, #32]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cde:	d109      	bne.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ce0:	4b03      	ldr	r3, [pc, #12]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	4a02      	ldr	r2, [pc, #8]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ce6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cea:	60d3      	str	r3, [r2, #12]
 8003cec:	e014      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003cee:	bf00      	nop
 8003cf0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cf8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003cfc:	d10c      	bne.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	3304      	adds	r3, #4
 8003d02:	2101      	movs	r1, #1
 8003d04:	4618      	mov	r0, r3
 8003d06:	f000 f867 	bl	8003dd8 <RCCEx_PLLSAI1_Config>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d0e:	7cfb      	ldrb	r3, [r7, #19]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d001      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003d14:	7cfb      	ldrb	r3, [r7, #19]
 8003d16:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d02f      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d24:	4b2b      	ldr	r3, [pc, #172]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d2a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d32:	4928      	ldr	r1, [pc, #160]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d42:	d10d      	bne.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	3304      	adds	r3, #4
 8003d48:	2102      	movs	r1, #2
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f000 f844 	bl	8003dd8 <RCCEx_PLLSAI1_Config>
 8003d50:	4603      	mov	r3, r0
 8003d52:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d54:	7cfb      	ldrb	r3, [r7, #19]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d014      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003d5a:	7cfb      	ldrb	r3, [r7, #19]
 8003d5c:	74bb      	strb	r3, [r7, #18]
 8003d5e:	e011      	b.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d68:	d10c      	bne.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	3320      	adds	r3, #32
 8003d6e:	2102      	movs	r1, #2
 8003d70:	4618      	mov	r0, r3
 8003d72:	f000 f925 	bl	8003fc0 <RCCEx_PLLSAI2_Config>
 8003d76:	4603      	mov	r3, r0
 8003d78:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d7a:	7cfb      	ldrb	r3, [r7, #19]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d001      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003d80:	7cfb      	ldrb	r3, [r7, #19]
 8003d82:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d00a      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003d90:	4b10      	ldr	r3, [pc, #64]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d96:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d9e:	490d      	ldr	r1, [pc, #52]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00b      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003db2:	4b08      	ldr	r3, [pc, #32]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003db8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dc2:	4904      	ldr	r1, [pc, #16]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003dca:	7cbb      	ldrb	r3, [r7, #18]
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3718      	adds	r7, #24
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	40021000 	.word	0x40021000

08003dd8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003de2:	2300      	movs	r3, #0
 8003de4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003de6:	4b75      	ldr	r3, [pc, #468]	; (8003fbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	f003 0303 	and.w	r3, r3, #3
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d018      	beq.n	8003e24 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003df2:	4b72      	ldr	r3, [pc, #456]	; (8003fbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	f003 0203 	and.w	r2, r3, #3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d10d      	bne.n	8003e1e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
       ||
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d009      	beq.n	8003e1e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003e0a:	4b6c      	ldr	r3, [pc, #432]	; (8003fbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	091b      	lsrs	r3, r3, #4
 8003e10:	f003 0307 	and.w	r3, r3, #7
 8003e14:	1c5a      	adds	r2, r3, #1
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
       ||
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d047      	beq.n	8003eae <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	73fb      	strb	r3, [r7, #15]
 8003e22:	e044      	b.n	8003eae <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2b03      	cmp	r3, #3
 8003e2a:	d018      	beq.n	8003e5e <RCCEx_PLLSAI1_Config+0x86>
 8003e2c:	2b03      	cmp	r3, #3
 8003e2e:	d825      	bhi.n	8003e7c <RCCEx_PLLSAI1_Config+0xa4>
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d002      	beq.n	8003e3a <RCCEx_PLLSAI1_Config+0x62>
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d009      	beq.n	8003e4c <RCCEx_PLLSAI1_Config+0x74>
 8003e38:	e020      	b.n	8003e7c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003e3a:	4b60      	ldr	r3, [pc, #384]	; (8003fbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0302 	and.w	r3, r3, #2
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d11d      	bne.n	8003e82 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e4a:	e01a      	b.n	8003e82 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003e4c:	4b5b      	ldr	r3, [pc, #364]	; (8003fbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d116      	bne.n	8003e86 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e5c:	e013      	b.n	8003e86 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e5e:	4b57      	ldr	r3, [pc, #348]	; (8003fbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d10f      	bne.n	8003e8a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003e6a:	4b54      	ldr	r3, [pc, #336]	; (8003fbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d109      	bne.n	8003e8a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003e7a:	e006      	b.n	8003e8a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	73fb      	strb	r3, [r7, #15]
      break;
 8003e80:	e004      	b.n	8003e8c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e82:	bf00      	nop
 8003e84:	e002      	b.n	8003e8c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e86:	bf00      	nop
 8003e88:	e000      	b.n	8003e8c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e8a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003e8c:	7bfb      	ldrb	r3, [r7, #15]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d10d      	bne.n	8003eae <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003e92:	4b4a      	ldr	r3, [pc, #296]	; (8003fbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6819      	ldr	r1, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	3b01      	subs	r3, #1
 8003ea4:	011b      	lsls	r3, r3, #4
 8003ea6:	430b      	orrs	r3, r1
 8003ea8:	4944      	ldr	r1, [pc, #272]	; (8003fbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003eae:	7bfb      	ldrb	r3, [r7, #15]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d17d      	bne.n	8003fb0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003eb4:	4b41      	ldr	r3, [pc, #260]	; (8003fbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a40      	ldr	r2, [pc, #256]	; (8003fbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003eba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003ebe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ec0:	f7fc ff68 	bl	8000d94 <HAL_GetTick>
 8003ec4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ec6:	e009      	b.n	8003edc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ec8:	f7fc ff64 	bl	8000d94 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d902      	bls.n	8003edc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	73fb      	strb	r3, [r7, #15]
        break;
 8003eda:	e005      	b.n	8003ee8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003edc:	4b37      	ldr	r3, [pc, #220]	; (8003fbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1ef      	bne.n	8003ec8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003ee8:	7bfb      	ldrb	r3, [r7, #15]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d160      	bne.n	8003fb0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d111      	bne.n	8003f18 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ef4:	4b31      	ldr	r3, [pc, #196]	; (8003fbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003efc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	6892      	ldr	r2, [r2, #8]
 8003f04:	0211      	lsls	r1, r2, #8
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	68d2      	ldr	r2, [r2, #12]
 8003f0a:	0912      	lsrs	r2, r2, #4
 8003f0c:	0452      	lsls	r2, r2, #17
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	492a      	ldr	r1, [pc, #168]	; (8003fbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	610b      	str	r3, [r1, #16]
 8003f16:	e027      	b.n	8003f68 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d112      	bne.n	8003f44 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f1e:	4b27      	ldr	r3, [pc, #156]	; (8003fbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003f26:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	6892      	ldr	r2, [r2, #8]
 8003f2e:	0211      	lsls	r1, r2, #8
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	6912      	ldr	r2, [r2, #16]
 8003f34:	0852      	lsrs	r2, r2, #1
 8003f36:	3a01      	subs	r2, #1
 8003f38:	0552      	lsls	r2, r2, #21
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	491f      	ldr	r1, [pc, #124]	; (8003fbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	610b      	str	r3, [r1, #16]
 8003f42:	e011      	b.n	8003f68 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f44:	4b1d      	ldr	r3, [pc, #116]	; (8003fbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003f4c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	6892      	ldr	r2, [r2, #8]
 8003f54:	0211      	lsls	r1, r2, #8
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	6952      	ldr	r2, [r2, #20]
 8003f5a:	0852      	lsrs	r2, r2, #1
 8003f5c:	3a01      	subs	r2, #1
 8003f5e:	0652      	lsls	r2, r2, #25
 8003f60:	430a      	orrs	r2, r1
 8003f62:	4916      	ldr	r1, [pc, #88]	; (8003fbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003f68:	4b14      	ldr	r3, [pc, #80]	; (8003fbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a13      	ldr	r2, [pc, #76]	; (8003fbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f6e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f72:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f74:	f7fc ff0e 	bl	8000d94 <HAL_GetTick>
 8003f78:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f7a:	e009      	b.n	8003f90 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f7c:	f7fc ff0a 	bl	8000d94 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d902      	bls.n	8003f90 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	73fb      	strb	r3, [r7, #15]
          break;
 8003f8e:	e005      	b.n	8003f9c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f90:	4b0a      	ldr	r3, [pc, #40]	; (8003fbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d0ef      	beq.n	8003f7c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003f9c:	7bfb      	ldrb	r3, [r7, #15]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d106      	bne.n	8003fb0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003fa2:	4b06      	ldr	r3, [pc, #24]	; (8003fbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fa4:	691a      	ldr	r2, [r3, #16]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	699b      	ldr	r3, [r3, #24]
 8003faa:	4904      	ldr	r1, [pc, #16]	; (8003fbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3710      	adds	r7, #16
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	40021000 	.word	0x40021000

08003fc0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003fce:	4b6a      	ldr	r3, [pc, #424]	; (8004178 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	f003 0303 	and.w	r3, r3, #3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d018      	beq.n	800400c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003fda:	4b67      	ldr	r3, [pc, #412]	; (8004178 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	f003 0203 	and.w	r2, r3, #3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d10d      	bne.n	8004006 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
       ||
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d009      	beq.n	8004006 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003ff2:	4b61      	ldr	r3, [pc, #388]	; (8004178 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	091b      	lsrs	r3, r3, #4
 8003ff8:	f003 0307 	and.w	r3, r3, #7
 8003ffc:	1c5a      	adds	r2, r3, #1
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
       ||
 8004002:	429a      	cmp	r2, r3
 8004004:	d047      	beq.n	8004096 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	73fb      	strb	r3, [r7, #15]
 800400a:	e044      	b.n	8004096 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2b03      	cmp	r3, #3
 8004012:	d018      	beq.n	8004046 <RCCEx_PLLSAI2_Config+0x86>
 8004014:	2b03      	cmp	r3, #3
 8004016:	d825      	bhi.n	8004064 <RCCEx_PLLSAI2_Config+0xa4>
 8004018:	2b01      	cmp	r3, #1
 800401a:	d002      	beq.n	8004022 <RCCEx_PLLSAI2_Config+0x62>
 800401c:	2b02      	cmp	r3, #2
 800401e:	d009      	beq.n	8004034 <RCCEx_PLLSAI2_Config+0x74>
 8004020:	e020      	b.n	8004064 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004022:	4b55      	ldr	r3, [pc, #340]	; (8004178 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0302 	and.w	r3, r3, #2
 800402a:	2b00      	cmp	r3, #0
 800402c:	d11d      	bne.n	800406a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004032:	e01a      	b.n	800406a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004034:	4b50      	ldr	r3, [pc, #320]	; (8004178 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800403c:	2b00      	cmp	r3, #0
 800403e:	d116      	bne.n	800406e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004044:	e013      	b.n	800406e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004046:	4b4c      	ldr	r3, [pc, #304]	; (8004178 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d10f      	bne.n	8004072 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004052:	4b49      	ldr	r3, [pc, #292]	; (8004178 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d109      	bne.n	8004072 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004062:	e006      	b.n	8004072 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	73fb      	strb	r3, [r7, #15]
      break;
 8004068:	e004      	b.n	8004074 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800406a:	bf00      	nop
 800406c:	e002      	b.n	8004074 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800406e:	bf00      	nop
 8004070:	e000      	b.n	8004074 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004072:	bf00      	nop
    }

    if(status == HAL_OK)
 8004074:	7bfb      	ldrb	r3, [r7, #15]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d10d      	bne.n	8004096 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800407a:	4b3f      	ldr	r3, [pc, #252]	; (8004178 <RCCEx_PLLSAI2_Config+0x1b8>)
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6819      	ldr	r1, [r3, #0]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	3b01      	subs	r3, #1
 800408c:	011b      	lsls	r3, r3, #4
 800408e:	430b      	orrs	r3, r1
 8004090:	4939      	ldr	r1, [pc, #228]	; (8004178 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004092:	4313      	orrs	r3, r2
 8004094:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004096:	7bfb      	ldrb	r3, [r7, #15]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d167      	bne.n	800416c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800409c:	4b36      	ldr	r3, [pc, #216]	; (8004178 <RCCEx_PLLSAI2_Config+0x1b8>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a35      	ldr	r2, [pc, #212]	; (8004178 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040a8:	f7fc fe74 	bl	8000d94 <HAL_GetTick>
 80040ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80040ae:	e009      	b.n	80040c4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80040b0:	f7fc fe70 	bl	8000d94 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d902      	bls.n	80040c4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	73fb      	strb	r3, [r7, #15]
        break;
 80040c2:	e005      	b.n	80040d0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80040c4:	4b2c      	ldr	r3, [pc, #176]	; (8004178 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d1ef      	bne.n	80040b0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80040d0:	7bfb      	ldrb	r3, [r7, #15]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d14a      	bne.n	800416c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d111      	bne.n	8004100 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80040dc:	4b26      	ldr	r3, [pc, #152]	; (8004178 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040de:	695b      	ldr	r3, [r3, #20]
 80040e0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80040e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	6892      	ldr	r2, [r2, #8]
 80040ec:	0211      	lsls	r1, r2, #8
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	68d2      	ldr	r2, [r2, #12]
 80040f2:	0912      	lsrs	r2, r2, #4
 80040f4:	0452      	lsls	r2, r2, #17
 80040f6:	430a      	orrs	r2, r1
 80040f8:	491f      	ldr	r1, [pc, #124]	; (8004178 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	614b      	str	r3, [r1, #20]
 80040fe:	e011      	b.n	8004124 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004100:	4b1d      	ldr	r3, [pc, #116]	; (8004178 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004102:	695b      	ldr	r3, [r3, #20]
 8004104:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004108:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	6892      	ldr	r2, [r2, #8]
 8004110:	0211      	lsls	r1, r2, #8
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	6912      	ldr	r2, [r2, #16]
 8004116:	0852      	lsrs	r2, r2, #1
 8004118:	3a01      	subs	r2, #1
 800411a:	0652      	lsls	r2, r2, #25
 800411c:	430a      	orrs	r2, r1
 800411e:	4916      	ldr	r1, [pc, #88]	; (8004178 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004120:	4313      	orrs	r3, r2
 8004122:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004124:	4b14      	ldr	r3, [pc, #80]	; (8004178 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a13      	ldr	r2, [pc, #76]	; (8004178 <RCCEx_PLLSAI2_Config+0x1b8>)
 800412a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800412e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004130:	f7fc fe30 	bl	8000d94 <HAL_GetTick>
 8004134:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004136:	e009      	b.n	800414c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004138:	f7fc fe2c 	bl	8000d94 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	2b02      	cmp	r3, #2
 8004144:	d902      	bls.n	800414c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	73fb      	strb	r3, [r7, #15]
          break;
 800414a:	e005      	b.n	8004158 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800414c:	4b0a      	ldr	r3, [pc, #40]	; (8004178 <RCCEx_PLLSAI2_Config+0x1b8>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d0ef      	beq.n	8004138 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004158:	7bfb      	ldrb	r3, [r7, #15]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d106      	bne.n	800416c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800415e:	4b06      	ldr	r3, [pc, #24]	; (8004178 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004160:	695a      	ldr	r2, [r3, #20]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	4904      	ldr	r1, [pc, #16]	; (8004178 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004168:	4313      	orrs	r3, r2
 800416a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800416c:	7bfb      	ldrb	r3, [r7, #15]
}
 800416e:	4618      	mov	r0, r3
 8004170:	3710      	adds	r7, #16
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	40021000 	.word	0x40021000

0800417c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d101      	bne.n	800418e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e049      	b.n	8004222 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004194:	b2db      	uxtb	r3, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d106      	bne.n	80041a8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f7fc fc66 	bl	8000a74 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2202      	movs	r2, #2
 80041ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	3304      	adds	r3, #4
 80041b8:	4619      	mov	r1, r3
 80041ba:	4610      	mov	r0, r2
 80041bc:	f000 fa50 	bl	8004660 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	3708      	adds	r7, #8
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
	...

0800422c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d109      	bne.n	8004250 <HAL_TIM_PWM_Start+0x24>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004242:	b2db      	uxtb	r3, r3
 8004244:	2b01      	cmp	r3, #1
 8004246:	bf14      	ite	ne
 8004248:	2301      	movne	r3, #1
 800424a:	2300      	moveq	r3, #0
 800424c:	b2db      	uxtb	r3, r3
 800424e:	e03c      	b.n	80042ca <HAL_TIM_PWM_Start+0x9e>
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	2b04      	cmp	r3, #4
 8004254:	d109      	bne.n	800426a <HAL_TIM_PWM_Start+0x3e>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800425c:	b2db      	uxtb	r3, r3
 800425e:	2b01      	cmp	r3, #1
 8004260:	bf14      	ite	ne
 8004262:	2301      	movne	r3, #1
 8004264:	2300      	moveq	r3, #0
 8004266:	b2db      	uxtb	r3, r3
 8004268:	e02f      	b.n	80042ca <HAL_TIM_PWM_Start+0x9e>
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	2b08      	cmp	r3, #8
 800426e:	d109      	bne.n	8004284 <HAL_TIM_PWM_Start+0x58>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004276:	b2db      	uxtb	r3, r3
 8004278:	2b01      	cmp	r3, #1
 800427a:	bf14      	ite	ne
 800427c:	2301      	movne	r3, #1
 800427e:	2300      	moveq	r3, #0
 8004280:	b2db      	uxtb	r3, r3
 8004282:	e022      	b.n	80042ca <HAL_TIM_PWM_Start+0x9e>
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	2b0c      	cmp	r3, #12
 8004288:	d109      	bne.n	800429e <HAL_TIM_PWM_Start+0x72>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004290:	b2db      	uxtb	r3, r3
 8004292:	2b01      	cmp	r3, #1
 8004294:	bf14      	ite	ne
 8004296:	2301      	movne	r3, #1
 8004298:	2300      	moveq	r3, #0
 800429a:	b2db      	uxtb	r3, r3
 800429c:	e015      	b.n	80042ca <HAL_TIM_PWM_Start+0x9e>
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	2b10      	cmp	r3, #16
 80042a2:	d109      	bne.n	80042b8 <HAL_TIM_PWM_Start+0x8c>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	bf14      	ite	ne
 80042b0:	2301      	movne	r3, #1
 80042b2:	2300      	moveq	r3, #0
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	e008      	b.n	80042ca <HAL_TIM_PWM_Start+0x9e>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	bf14      	ite	ne
 80042c4:	2301      	movne	r3, #1
 80042c6:	2300      	moveq	r3, #0
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d001      	beq.n	80042d2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e09c      	b.n	800440c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d104      	bne.n	80042e2 <HAL_TIM_PWM_Start+0xb6>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2202      	movs	r2, #2
 80042dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042e0:	e023      	b.n	800432a <HAL_TIM_PWM_Start+0xfe>
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	2b04      	cmp	r3, #4
 80042e6:	d104      	bne.n	80042f2 <HAL_TIM_PWM_Start+0xc6>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2202      	movs	r2, #2
 80042ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042f0:	e01b      	b.n	800432a <HAL_TIM_PWM_Start+0xfe>
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	2b08      	cmp	r3, #8
 80042f6:	d104      	bne.n	8004302 <HAL_TIM_PWM_Start+0xd6>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2202      	movs	r2, #2
 80042fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004300:	e013      	b.n	800432a <HAL_TIM_PWM_Start+0xfe>
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	2b0c      	cmp	r3, #12
 8004306:	d104      	bne.n	8004312 <HAL_TIM_PWM_Start+0xe6>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2202      	movs	r2, #2
 800430c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004310:	e00b      	b.n	800432a <HAL_TIM_PWM_Start+0xfe>
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	2b10      	cmp	r3, #16
 8004316:	d104      	bne.n	8004322 <HAL_TIM_PWM_Start+0xf6>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2202      	movs	r2, #2
 800431c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004320:	e003      	b.n	800432a <HAL_TIM_PWM_Start+0xfe>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2202      	movs	r2, #2
 8004326:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2201      	movs	r2, #1
 8004330:	6839      	ldr	r1, [r7, #0]
 8004332:	4618      	mov	r0, r3
 8004334:	f000 fd04 	bl	8004d40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a35      	ldr	r2, [pc, #212]	; (8004414 <HAL_TIM_PWM_Start+0x1e8>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d013      	beq.n	800436a <HAL_TIM_PWM_Start+0x13e>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a34      	ldr	r2, [pc, #208]	; (8004418 <HAL_TIM_PWM_Start+0x1ec>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d00e      	beq.n	800436a <HAL_TIM_PWM_Start+0x13e>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a32      	ldr	r2, [pc, #200]	; (800441c <HAL_TIM_PWM_Start+0x1f0>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d009      	beq.n	800436a <HAL_TIM_PWM_Start+0x13e>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a31      	ldr	r2, [pc, #196]	; (8004420 <HAL_TIM_PWM_Start+0x1f4>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d004      	beq.n	800436a <HAL_TIM_PWM_Start+0x13e>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a2f      	ldr	r2, [pc, #188]	; (8004424 <HAL_TIM_PWM_Start+0x1f8>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d101      	bne.n	800436e <HAL_TIM_PWM_Start+0x142>
 800436a:	2301      	movs	r3, #1
 800436c:	e000      	b.n	8004370 <HAL_TIM_PWM_Start+0x144>
 800436e:	2300      	movs	r3, #0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d007      	beq.n	8004384 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004382:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a22      	ldr	r2, [pc, #136]	; (8004414 <HAL_TIM_PWM_Start+0x1e8>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d01d      	beq.n	80043ca <HAL_TIM_PWM_Start+0x19e>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004396:	d018      	beq.n	80043ca <HAL_TIM_PWM_Start+0x19e>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a22      	ldr	r2, [pc, #136]	; (8004428 <HAL_TIM_PWM_Start+0x1fc>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d013      	beq.n	80043ca <HAL_TIM_PWM_Start+0x19e>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a21      	ldr	r2, [pc, #132]	; (800442c <HAL_TIM_PWM_Start+0x200>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d00e      	beq.n	80043ca <HAL_TIM_PWM_Start+0x19e>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a1f      	ldr	r2, [pc, #124]	; (8004430 <HAL_TIM_PWM_Start+0x204>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d009      	beq.n	80043ca <HAL_TIM_PWM_Start+0x19e>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a17      	ldr	r2, [pc, #92]	; (8004418 <HAL_TIM_PWM_Start+0x1ec>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d004      	beq.n	80043ca <HAL_TIM_PWM_Start+0x19e>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a15      	ldr	r2, [pc, #84]	; (800441c <HAL_TIM_PWM_Start+0x1f0>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d115      	bne.n	80043f6 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	689a      	ldr	r2, [r3, #8]
 80043d0:	4b18      	ldr	r3, [pc, #96]	; (8004434 <HAL_TIM_PWM_Start+0x208>)
 80043d2:	4013      	ands	r3, r2
 80043d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2b06      	cmp	r3, #6
 80043da:	d015      	beq.n	8004408 <HAL_TIM_PWM_Start+0x1dc>
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043e2:	d011      	beq.n	8004408 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f042 0201 	orr.w	r2, r2, #1
 80043f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043f4:	e008      	b.n	8004408 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f042 0201 	orr.w	r2, r2, #1
 8004404:	601a      	str	r2, [r3, #0]
 8004406:	e000      	b.n	800440a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004408:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800440a:	2300      	movs	r3, #0
}
 800440c:	4618      	mov	r0, r3
 800440e:	3710      	adds	r7, #16
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}
 8004414:	40012c00 	.word	0x40012c00
 8004418:	40013400 	.word	0x40013400
 800441c:	40014000 	.word	0x40014000
 8004420:	40014400 	.word	0x40014400
 8004424:	40014800 	.word	0x40014800
 8004428:	40000400 	.word	0x40000400
 800442c:	40000800 	.word	0x40000800
 8004430:	40000c00 	.word	0x40000c00
 8004434:	00010007 	.word	0x00010007

08004438 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b086      	sub	sp, #24
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004444:	2300      	movs	r3, #0
 8004446:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800444e:	2b01      	cmp	r3, #1
 8004450:	d101      	bne.n	8004456 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004452:	2302      	movs	r3, #2
 8004454:	e0ff      	b.n	8004656 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2201      	movs	r2, #1
 800445a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2b14      	cmp	r3, #20
 8004462:	f200 80f0 	bhi.w	8004646 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004466:	a201      	add	r2, pc, #4	; (adr r2, 800446c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800446c:	080044c1 	.word	0x080044c1
 8004470:	08004647 	.word	0x08004647
 8004474:	08004647 	.word	0x08004647
 8004478:	08004647 	.word	0x08004647
 800447c:	08004501 	.word	0x08004501
 8004480:	08004647 	.word	0x08004647
 8004484:	08004647 	.word	0x08004647
 8004488:	08004647 	.word	0x08004647
 800448c:	08004543 	.word	0x08004543
 8004490:	08004647 	.word	0x08004647
 8004494:	08004647 	.word	0x08004647
 8004498:	08004647 	.word	0x08004647
 800449c:	08004583 	.word	0x08004583
 80044a0:	08004647 	.word	0x08004647
 80044a4:	08004647 	.word	0x08004647
 80044a8:	08004647 	.word	0x08004647
 80044ac:	080045c5 	.word	0x080045c5
 80044b0:	08004647 	.word	0x08004647
 80044b4:	08004647 	.word	0x08004647
 80044b8:	08004647 	.word	0x08004647
 80044bc:	08004605 	.word	0x08004605
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68b9      	ldr	r1, [r7, #8]
 80044c6:	4618      	mov	r0, r3
 80044c8:	f000 f964 	bl	8004794 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	699a      	ldr	r2, [r3, #24]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f042 0208 	orr.w	r2, r2, #8
 80044da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	699a      	ldr	r2, [r3, #24]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f022 0204 	bic.w	r2, r2, #4
 80044ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	6999      	ldr	r1, [r3, #24]
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	691a      	ldr	r2, [r3, #16]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	430a      	orrs	r2, r1
 80044fc:	619a      	str	r2, [r3, #24]
      break;
 80044fe:	e0a5      	b.n	800464c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68b9      	ldr	r1, [r7, #8]
 8004506:	4618      	mov	r0, r3
 8004508:	f000 f9d4 	bl	80048b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	699a      	ldr	r2, [r3, #24]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800451a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	699a      	ldr	r2, [r3, #24]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800452a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	6999      	ldr	r1, [r3, #24]
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	021a      	lsls	r2, r3, #8
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	430a      	orrs	r2, r1
 800453e:	619a      	str	r2, [r3, #24]
      break;
 8004540:	e084      	b.n	800464c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68b9      	ldr	r1, [r7, #8]
 8004548:	4618      	mov	r0, r3
 800454a:	f000 fa3d 	bl	80049c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	69da      	ldr	r2, [r3, #28]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f042 0208 	orr.w	r2, r2, #8
 800455c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	69da      	ldr	r2, [r3, #28]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f022 0204 	bic.w	r2, r2, #4
 800456c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	69d9      	ldr	r1, [r3, #28]
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	691a      	ldr	r2, [r3, #16]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	430a      	orrs	r2, r1
 800457e:	61da      	str	r2, [r3, #28]
      break;
 8004580:	e064      	b.n	800464c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	68b9      	ldr	r1, [r7, #8]
 8004588:	4618      	mov	r0, r3
 800458a:	f000 faa5 	bl	8004ad8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	69da      	ldr	r2, [r3, #28]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800459c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	69da      	ldr	r2, [r3, #28]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	69d9      	ldr	r1, [r3, #28]
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	691b      	ldr	r3, [r3, #16]
 80045b8:	021a      	lsls	r2, r3, #8
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	430a      	orrs	r2, r1
 80045c0:	61da      	str	r2, [r3, #28]
      break;
 80045c2:	e043      	b.n	800464c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68b9      	ldr	r1, [r7, #8]
 80045ca:	4618      	mov	r0, r3
 80045cc:	f000 faee 	bl	8004bac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f042 0208 	orr.w	r2, r2, #8
 80045de:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f022 0204 	bic.w	r2, r2, #4
 80045ee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	691a      	ldr	r2, [r3, #16]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	430a      	orrs	r2, r1
 8004600:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004602:	e023      	b.n	800464c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68b9      	ldr	r1, [r7, #8]
 800460a:	4618      	mov	r0, r3
 800460c:	f000 fb32 	bl	8004c74 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800461e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800462e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	021a      	lsls	r2, r3, #8
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	430a      	orrs	r2, r1
 8004642:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004644:	e002      	b.n	800464c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	75fb      	strb	r3, [r7, #23]
      break;
 800464a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004654:	7dfb      	ldrb	r3, [r7, #23]
}
 8004656:	4618      	mov	r0, r3
 8004658:	3718      	adds	r7, #24
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop

08004660 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004660:	b480      	push	{r7}
 8004662:	b085      	sub	sp, #20
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4a40      	ldr	r2, [pc, #256]	; (8004774 <TIM_Base_SetConfig+0x114>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d013      	beq.n	80046a0 <TIM_Base_SetConfig+0x40>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800467e:	d00f      	beq.n	80046a0 <TIM_Base_SetConfig+0x40>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a3d      	ldr	r2, [pc, #244]	; (8004778 <TIM_Base_SetConfig+0x118>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d00b      	beq.n	80046a0 <TIM_Base_SetConfig+0x40>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a3c      	ldr	r2, [pc, #240]	; (800477c <TIM_Base_SetConfig+0x11c>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d007      	beq.n	80046a0 <TIM_Base_SetConfig+0x40>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a3b      	ldr	r2, [pc, #236]	; (8004780 <TIM_Base_SetConfig+0x120>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d003      	beq.n	80046a0 <TIM_Base_SetConfig+0x40>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4a3a      	ldr	r2, [pc, #232]	; (8004784 <TIM_Base_SetConfig+0x124>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d108      	bne.n	80046b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a2f      	ldr	r2, [pc, #188]	; (8004774 <TIM_Base_SetConfig+0x114>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d01f      	beq.n	80046fa <TIM_Base_SetConfig+0x9a>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046c0:	d01b      	beq.n	80046fa <TIM_Base_SetConfig+0x9a>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a2c      	ldr	r2, [pc, #176]	; (8004778 <TIM_Base_SetConfig+0x118>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d017      	beq.n	80046fa <TIM_Base_SetConfig+0x9a>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a2b      	ldr	r2, [pc, #172]	; (800477c <TIM_Base_SetConfig+0x11c>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d013      	beq.n	80046fa <TIM_Base_SetConfig+0x9a>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a2a      	ldr	r2, [pc, #168]	; (8004780 <TIM_Base_SetConfig+0x120>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d00f      	beq.n	80046fa <TIM_Base_SetConfig+0x9a>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a29      	ldr	r2, [pc, #164]	; (8004784 <TIM_Base_SetConfig+0x124>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d00b      	beq.n	80046fa <TIM_Base_SetConfig+0x9a>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a28      	ldr	r2, [pc, #160]	; (8004788 <TIM_Base_SetConfig+0x128>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d007      	beq.n	80046fa <TIM_Base_SetConfig+0x9a>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a27      	ldr	r2, [pc, #156]	; (800478c <TIM_Base_SetConfig+0x12c>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d003      	beq.n	80046fa <TIM_Base_SetConfig+0x9a>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a26      	ldr	r2, [pc, #152]	; (8004790 <TIM_Base_SetConfig+0x130>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d108      	bne.n	800470c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004700:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	4313      	orrs	r3, r2
 800470a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	4313      	orrs	r3, r2
 8004718:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	689a      	ldr	r2, [r3, #8]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a10      	ldr	r2, [pc, #64]	; (8004774 <TIM_Base_SetConfig+0x114>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d00f      	beq.n	8004758 <TIM_Base_SetConfig+0xf8>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	4a12      	ldr	r2, [pc, #72]	; (8004784 <TIM_Base_SetConfig+0x124>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d00b      	beq.n	8004758 <TIM_Base_SetConfig+0xf8>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	4a11      	ldr	r2, [pc, #68]	; (8004788 <TIM_Base_SetConfig+0x128>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d007      	beq.n	8004758 <TIM_Base_SetConfig+0xf8>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4a10      	ldr	r2, [pc, #64]	; (800478c <TIM_Base_SetConfig+0x12c>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d003      	beq.n	8004758 <TIM_Base_SetConfig+0xf8>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4a0f      	ldr	r2, [pc, #60]	; (8004790 <TIM_Base_SetConfig+0x130>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d103      	bne.n	8004760 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	691a      	ldr	r2, [r3, #16]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	615a      	str	r2, [r3, #20]
}
 8004766:	bf00      	nop
 8004768:	3714      	adds	r7, #20
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	40012c00 	.word	0x40012c00
 8004778:	40000400 	.word	0x40000400
 800477c:	40000800 	.word	0x40000800
 8004780:	40000c00 	.word	0x40000c00
 8004784:	40013400 	.word	0x40013400
 8004788:	40014000 	.word	0x40014000
 800478c:	40014400 	.word	0x40014400
 8004790:	40014800 	.word	0x40014800

08004794 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004794:	b480      	push	{r7}
 8004796:	b087      	sub	sp, #28
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a1b      	ldr	r3, [r3, #32]
 80047a2:	f023 0201 	bic.w	r2, r3, #1
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a1b      	ldr	r3, [r3, #32]
 80047ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	699b      	ldr	r3, [r3, #24]
 80047ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f023 0303 	bic.w	r3, r3, #3
 80047ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	f023 0302 	bic.w	r3, r3, #2
 80047e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	697a      	ldr	r2, [r7, #20]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a2c      	ldr	r2, [pc, #176]	; (80048a0 <TIM_OC1_SetConfig+0x10c>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d00f      	beq.n	8004814 <TIM_OC1_SetConfig+0x80>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	4a2b      	ldr	r2, [pc, #172]	; (80048a4 <TIM_OC1_SetConfig+0x110>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d00b      	beq.n	8004814 <TIM_OC1_SetConfig+0x80>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a2a      	ldr	r2, [pc, #168]	; (80048a8 <TIM_OC1_SetConfig+0x114>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d007      	beq.n	8004814 <TIM_OC1_SetConfig+0x80>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4a29      	ldr	r2, [pc, #164]	; (80048ac <TIM_OC1_SetConfig+0x118>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d003      	beq.n	8004814 <TIM_OC1_SetConfig+0x80>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a28      	ldr	r2, [pc, #160]	; (80048b0 <TIM_OC1_SetConfig+0x11c>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d10c      	bne.n	800482e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	f023 0308 	bic.w	r3, r3, #8
 800481a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	697a      	ldr	r2, [r7, #20]
 8004822:	4313      	orrs	r3, r2
 8004824:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	f023 0304 	bic.w	r3, r3, #4
 800482c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a1b      	ldr	r2, [pc, #108]	; (80048a0 <TIM_OC1_SetConfig+0x10c>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d00f      	beq.n	8004856 <TIM_OC1_SetConfig+0xc2>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a1a      	ldr	r2, [pc, #104]	; (80048a4 <TIM_OC1_SetConfig+0x110>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d00b      	beq.n	8004856 <TIM_OC1_SetConfig+0xc2>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a19      	ldr	r2, [pc, #100]	; (80048a8 <TIM_OC1_SetConfig+0x114>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d007      	beq.n	8004856 <TIM_OC1_SetConfig+0xc2>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a18      	ldr	r2, [pc, #96]	; (80048ac <TIM_OC1_SetConfig+0x118>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d003      	beq.n	8004856 <TIM_OC1_SetConfig+0xc2>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a17      	ldr	r2, [pc, #92]	; (80048b0 <TIM_OC1_SetConfig+0x11c>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d111      	bne.n	800487a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800485c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004864:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	695b      	ldr	r3, [r3, #20]
 800486a:	693a      	ldr	r2, [r7, #16]
 800486c:	4313      	orrs	r3, r2
 800486e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	699b      	ldr	r3, [r3, #24]
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	4313      	orrs	r3, r2
 8004878:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	693a      	ldr	r2, [r7, #16]
 800487e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	685a      	ldr	r2, [r3, #4]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	697a      	ldr	r2, [r7, #20]
 8004892:	621a      	str	r2, [r3, #32]
}
 8004894:	bf00      	nop
 8004896:	371c      	adds	r7, #28
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr
 80048a0:	40012c00 	.word	0x40012c00
 80048a4:	40013400 	.word	0x40013400
 80048a8:	40014000 	.word	0x40014000
 80048ac:	40014400 	.word	0x40014400
 80048b0:	40014800 	.word	0x40014800

080048b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b087      	sub	sp, #28
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	f023 0210 	bic.w	r2, r3, #16
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a1b      	ldr	r3, [r3, #32]
 80048ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	021b      	lsls	r3, r3, #8
 80048f6:	68fa      	ldr	r2, [r7, #12]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	f023 0320 	bic.w	r3, r3, #32
 8004902:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	011b      	lsls	r3, r3, #4
 800490a:	697a      	ldr	r2, [r7, #20]
 800490c:	4313      	orrs	r3, r2
 800490e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a28      	ldr	r2, [pc, #160]	; (80049b4 <TIM_OC2_SetConfig+0x100>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d003      	beq.n	8004920 <TIM_OC2_SetConfig+0x6c>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a27      	ldr	r2, [pc, #156]	; (80049b8 <TIM_OC2_SetConfig+0x104>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d10d      	bne.n	800493c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004926:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	011b      	lsls	r3, r3, #4
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	4313      	orrs	r3, r2
 8004932:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800493a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a1d      	ldr	r2, [pc, #116]	; (80049b4 <TIM_OC2_SetConfig+0x100>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d00f      	beq.n	8004964 <TIM_OC2_SetConfig+0xb0>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a1c      	ldr	r2, [pc, #112]	; (80049b8 <TIM_OC2_SetConfig+0x104>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d00b      	beq.n	8004964 <TIM_OC2_SetConfig+0xb0>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a1b      	ldr	r2, [pc, #108]	; (80049bc <TIM_OC2_SetConfig+0x108>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d007      	beq.n	8004964 <TIM_OC2_SetConfig+0xb0>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4a1a      	ldr	r2, [pc, #104]	; (80049c0 <TIM_OC2_SetConfig+0x10c>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d003      	beq.n	8004964 <TIM_OC2_SetConfig+0xb0>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a19      	ldr	r2, [pc, #100]	; (80049c4 <TIM_OC2_SetConfig+0x110>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d113      	bne.n	800498c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800496a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004972:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	695b      	ldr	r3, [r3, #20]
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	693a      	ldr	r2, [r7, #16]
 800497c:	4313      	orrs	r3, r2
 800497e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	699b      	ldr	r3, [r3, #24]
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	693a      	ldr	r2, [r7, #16]
 8004988:	4313      	orrs	r3, r2
 800498a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	693a      	ldr	r2, [r7, #16]
 8004990:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	685a      	ldr	r2, [r3, #4]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	697a      	ldr	r2, [r7, #20]
 80049a4:	621a      	str	r2, [r3, #32]
}
 80049a6:	bf00      	nop
 80049a8:	371c      	adds	r7, #28
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	40012c00 	.word	0x40012c00
 80049b8:	40013400 	.word	0x40013400
 80049bc:	40014000 	.word	0x40014000
 80049c0:	40014400 	.word	0x40014400
 80049c4:	40014800 	.word	0x40014800

080049c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b087      	sub	sp, #28
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a1b      	ldr	r3, [r3, #32]
 80049d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a1b      	ldr	r3, [r3, #32]
 80049e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	69db      	ldr	r3, [r3, #28]
 80049ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f023 0303 	bic.w	r3, r3, #3
 8004a02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	68fa      	ldr	r2, [r7, #12]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	021b      	lsls	r3, r3, #8
 8004a1c:	697a      	ldr	r2, [r7, #20]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a27      	ldr	r2, [pc, #156]	; (8004ac4 <TIM_OC3_SetConfig+0xfc>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d003      	beq.n	8004a32 <TIM_OC3_SetConfig+0x6a>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a26      	ldr	r2, [pc, #152]	; (8004ac8 <TIM_OC3_SetConfig+0x100>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d10d      	bne.n	8004a4e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	021b      	lsls	r3, r3, #8
 8004a40:	697a      	ldr	r2, [r7, #20]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a1c      	ldr	r2, [pc, #112]	; (8004ac4 <TIM_OC3_SetConfig+0xfc>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d00f      	beq.n	8004a76 <TIM_OC3_SetConfig+0xae>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a1b      	ldr	r2, [pc, #108]	; (8004ac8 <TIM_OC3_SetConfig+0x100>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d00b      	beq.n	8004a76 <TIM_OC3_SetConfig+0xae>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a1a      	ldr	r2, [pc, #104]	; (8004acc <TIM_OC3_SetConfig+0x104>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d007      	beq.n	8004a76 <TIM_OC3_SetConfig+0xae>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a19      	ldr	r2, [pc, #100]	; (8004ad0 <TIM_OC3_SetConfig+0x108>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d003      	beq.n	8004a76 <TIM_OC3_SetConfig+0xae>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a18      	ldr	r2, [pc, #96]	; (8004ad4 <TIM_OC3_SetConfig+0x10c>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d113      	bne.n	8004a9e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	011b      	lsls	r3, r3, #4
 8004a8c:	693a      	ldr	r2, [r7, #16]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	011b      	lsls	r3, r3, #4
 8004a98:	693a      	ldr	r2, [r7, #16]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	693a      	ldr	r2, [r7, #16]
 8004aa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	685a      	ldr	r2, [r3, #4]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	697a      	ldr	r2, [r7, #20]
 8004ab6:	621a      	str	r2, [r3, #32]
}
 8004ab8:	bf00      	nop
 8004aba:	371c      	adds	r7, #28
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr
 8004ac4:	40012c00 	.word	0x40012c00
 8004ac8:	40013400 	.word	0x40013400
 8004acc:	40014000 	.word	0x40014000
 8004ad0:	40014400 	.word	0x40014400
 8004ad4:	40014800 	.word	0x40014800

08004ad8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b087      	sub	sp, #28
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a1b      	ldr	r3, [r3, #32]
 8004ae6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a1b      	ldr	r3, [r3, #32]
 8004af2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	69db      	ldr	r3, [r3, #28]
 8004afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	021b      	lsls	r3, r3, #8
 8004b1a:	68fa      	ldr	r2, [r7, #12]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	031b      	lsls	r3, r3, #12
 8004b2e:	693a      	ldr	r2, [r7, #16]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	4a18      	ldr	r2, [pc, #96]	; (8004b98 <TIM_OC4_SetConfig+0xc0>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d00f      	beq.n	8004b5c <TIM_OC4_SetConfig+0x84>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	4a17      	ldr	r2, [pc, #92]	; (8004b9c <TIM_OC4_SetConfig+0xc4>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d00b      	beq.n	8004b5c <TIM_OC4_SetConfig+0x84>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	4a16      	ldr	r2, [pc, #88]	; (8004ba0 <TIM_OC4_SetConfig+0xc8>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d007      	beq.n	8004b5c <TIM_OC4_SetConfig+0x84>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4a15      	ldr	r2, [pc, #84]	; (8004ba4 <TIM_OC4_SetConfig+0xcc>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d003      	beq.n	8004b5c <TIM_OC4_SetConfig+0x84>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a14      	ldr	r2, [pc, #80]	; (8004ba8 <TIM_OC4_SetConfig+0xd0>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d109      	bne.n	8004b70 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	695b      	ldr	r3, [r3, #20]
 8004b68:	019b      	lsls	r3, r3, #6
 8004b6a:	697a      	ldr	r2, [r7, #20]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	697a      	ldr	r2, [r7, #20]
 8004b74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	685a      	ldr	r2, [r3, #4]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	693a      	ldr	r2, [r7, #16]
 8004b88:	621a      	str	r2, [r3, #32]
}
 8004b8a:	bf00      	nop
 8004b8c:	371c      	adds	r7, #28
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop
 8004b98:	40012c00 	.word	0x40012c00
 8004b9c:	40013400 	.word	0x40013400
 8004ba0:	40014000 	.word	0x40014000
 8004ba4:	40014400 	.word	0x40014400
 8004ba8:	40014800 	.word	0x40014800

08004bac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b087      	sub	sp, #28
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
 8004bba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a1b      	ldr	r3, [r3, #32]
 8004bc6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	68fa      	ldr	r2, [r7, #12]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004bf0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	041b      	lsls	r3, r3, #16
 8004bf8:	693a      	ldr	r2, [r7, #16]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a17      	ldr	r2, [pc, #92]	; (8004c60 <TIM_OC5_SetConfig+0xb4>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d00f      	beq.n	8004c26 <TIM_OC5_SetConfig+0x7a>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a16      	ldr	r2, [pc, #88]	; (8004c64 <TIM_OC5_SetConfig+0xb8>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d00b      	beq.n	8004c26 <TIM_OC5_SetConfig+0x7a>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a15      	ldr	r2, [pc, #84]	; (8004c68 <TIM_OC5_SetConfig+0xbc>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d007      	beq.n	8004c26 <TIM_OC5_SetConfig+0x7a>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a14      	ldr	r2, [pc, #80]	; (8004c6c <TIM_OC5_SetConfig+0xc0>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d003      	beq.n	8004c26 <TIM_OC5_SetConfig+0x7a>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a13      	ldr	r2, [pc, #76]	; (8004c70 <TIM_OC5_SetConfig+0xc4>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d109      	bne.n	8004c3a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c2c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	021b      	lsls	r3, r3, #8
 8004c34:	697a      	ldr	r2, [r7, #20]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	697a      	ldr	r2, [r7, #20]
 8004c3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	685a      	ldr	r2, [r3, #4]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	693a      	ldr	r2, [r7, #16]
 8004c52:	621a      	str	r2, [r3, #32]
}
 8004c54:	bf00      	nop
 8004c56:	371c      	adds	r7, #28
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr
 8004c60:	40012c00 	.word	0x40012c00
 8004c64:	40013400 	.word	0x40013400
 8004c68:	40014000 	.word	0x40014000
 8004c6c:	40014400 	.word	0x40014400
 8004c70:	40014800 	.word	0x40014800

08004c74 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b087      	sub	sp, #28
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a1b      	ldr	r3, [r3, #32]
 8004c8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ca2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ca6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	021b      	lsls	r3, r3, #8
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004cba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	051b      	lsls	r3, r3, #20
 8004cc2:	693a      	ldr	r2, [r7, #16]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4a18      	ldr	r2, [pc, #96]	; (8004d2c <TIM_OC6_SetConfig+0xb8>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d00f      	beq.n	8004cf0 <TIM_OC6_SetConfig+0x7c>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a17      	ldr	r2, [pc, #92]	; (8004d30 <TIM_OC6_SetConfig+0xbc>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d00b      	beq.n	8004cf0 <TIM_OC6_SetConfig+0x7c>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a16      	ldr	r2, [pc, #88]	; (8004d34 <TIM_OC6_SetConfig+0xc0>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d007      	beq.n	8004cf0 <TIM_OC6_SetConfig+0x7c>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	4a15      	ldr	r2, [pc, #84]	; (8004d38 <TIM_OC6_SetConfig+0xc4>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d003      	beq.n	8004cf0 <TIM_OC6_SetConfig+0x7c>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a14      	ldr	r2, [pc, #80]	; (8004d3c <TIM_OC6_SetConfig+0xc8>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d109      	bne.n	8004d04 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cf6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	695b      	ldr	r3, [r3, #20]
 8004cfc:	029b      	lsls	r3, r3, #10
 8004cfe:	697a      	ldr	r2, [r7, #20]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	697a      	ldr	r2, [r7, #20]
 8004d08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	68fa      	ldr	r2, [r7, #12]
 8004d0e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	685a      	ldr	r2, [r3, #4]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	693a      	ldr	r2, [r7, #16]
 8004d1c:	621a      	str	r2, [r3, #32]
}
 8004d1e:	bf00      	nop
 8004d20:	371c      	adds	r7, #28
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop
 8004d2c:	40012c00 	.word	0x40012c00
 8004d30:	40013400 	.word	0x40013400
 8004d34:	40014000 	.word	0x40014000
 8004d38:	40014400 	.word	0x40014400
 8004d3c:	40014800 	.word	0x40014800

08004d40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b087      	sub	sp, #28
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	f003 031f 	and.w	r3, r3, #31
 8004d52:	2201      	movs	r2, #1
 8004d54:	fa02 f303 	lsl.w	r3, r2, r3
 8004d58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	6a1a      	ldr	r2, [r3, #32]
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	43db      	mvns	r3, r3
 8004d62:	401a      	ands	r2, r3
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6a1a      	ldr	r2, [r3, #32]
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	f003 031f 	and.w	r3, r3, #31
 8004d72:	6879      	ldr	r1, [r7, #4]
 8004d74:	fa01 f303 	lsl.w	r3, r1, r3
 8004d78:	431a      	orrs	r2, r3
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	621a      	str	r2, [r3, #32]
}
 8004d7e:	bf00      	nop
 8004d80:	371c      	adds	r7, #28
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr
	...

08004d8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b085      	sub	sp, #20
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d101      	bne.n	8004da4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004da0:	2302      	movs	r3, #2
 8004da2:	e068      	b.n	8004e76 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2202      	movs	r2, #2
 8004db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a2e      	ldr	r2, [pc, #184]	; (8004e84 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d004      	beq.n	8004dd8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a2d      	ldr	r2, [pc, #180]	; (8004e88 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d108      	bne.n	8004dea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004dde:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	68fa      	ldr	r2, [r7, #12]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004df0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a1e      	ldr	r2, [pc, #120]	; (8004e84 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d01d      	beq.n	8004e4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e16:	d018      	beq.n	8004e4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a1b      	ldr	r2, [pc, #108]	; (8004e8c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d013      	beq.n	8004e4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a1a      	ldr	r2, [pc, #104]	; (8004e90 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d00e      	beq.n	8004e4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a18      	ldr	r2, [pc, #96]	; (8004e94 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d009      	beq.n	8004e4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a13      	ldr	r2, [pc, #76]	; (8004e88 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d004      	beq.n	8004e4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a14      	ldr	r2, [pc, #80]	; (8004e98 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d10c      	bne.n	8004e64 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	68ba      	ldr	r2, [r7, #8]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	68ba      	ldr	r2, [r7, #8]
 8004e62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e74:	2300      	movs	r3, #0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3714      	adds	r7, #20
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop
 8004e84:	40012c00 	.word	0x40012c00
 8004e88:	40013400 	.word	0x40013400
 8004e8c:	40000400 	.word	0x40000400
 8004e90:	40000800 	.word	0x40000800
 8004e94:	40000c00 	.word	0x40000c00
 8004e98:	40014000 	.word	0x40014000

08004e9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b082      	sub	sp, #8
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d101      	bne.n	8004eae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e040      	b.n	8004f30 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d106      	bne.n	8004ec4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f7fb fe2a 	bl	8000b18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2224      	movs	r2, #36	; 0x24
 8004ec8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f022 0201 	bic.w	r2, r2, #1
 8004ed8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 fb84 	bl	80055e8 <UART_SetConfig>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d101      	bne.n	8004eea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e022      	b.n	8004f30 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d002      	beq.n	8004ef8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 fe30 	bl	8005b58 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	685a      	ldr	r2, [r3, #4]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	689a      	ldr	r2, [r3, #8]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f042 0201 	orr.w	r2, r2, #1
 8004f26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f000 feb7 	bl	8005c9c <UART_CheckIdleState>
 8004f2e:	4603      	mov	r3, r0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3708      	adds	r7, #8
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b08a      	sub	sp, #40	; 0x28
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	4613      	mov	r3, r2
 8004f44:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f4a:	2b20      	cmp	r3, #32
 8004f4c:	d142      	bne.n	8004fd4 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d002      	beq.n	8004f5a <HAL_UART_Receive_IT+0x22>
 8004f54:	88fb      	ldrh	r3, [r7, #6]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d101      	bne.n	8004f5e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e03b      	b.n	8004fd6 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d101      	bne.n	8004f6c <HAL_UART_Receive_IT+0x34>
 8004f68:	2302      	movs	r3, #2
 8004f6a:	e034      	b.n	8004fd6 <HAL_UART_Receive_IT+0x9e>
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2200      	movs	r2, #0
 8004f78:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a18      	ldr	r2, [pc, #96]	; (8004fe0 <HAL_UART_Receive_IT+0xa8>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d01f      	beq.n	8004fc4 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d018      	beq.n	8004fc4 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	e853 3f00 	ldrex	r3, [r3]
 8004f9e:	613b      	str	r3, [r7, #16]
   return(result);
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004fa6:	627b      	str	r3, [r7, #36]	; 0x24
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	461a      	mov	r2, r3
 8004fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb0:	623b      	str	r3, [r7, #32]
 8004fb2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb4:	69f9      	ldr	r1, [r7, #28]
 8004fb6:	6a3a      	ldr	r2, [r7, #32]
 8004fb8:	e841 2300 	strex	r3, r2, [r1]
 8004fbc:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d1e6      	bne.n	8004f92 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004fc4:	88fb      	ldrh	r3, [r7, #6]
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	68b9      	ldr	r1, [r7, #8]
 8004fca:	68f8      	ldr	r0, [r7, #12]
 8004fcc:	f000 ff74 	bl	8005eb8 <UART_Start_Receive_IT>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	e000      	b.n	8004fd6 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004fd4:	2302      	movs	r3, #2
  }
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3728      	adds	r7, #40	; 0x28
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	40008000 	.word	0x40008000

08004fe4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b0ba      	sub	sp, #232	; 0xe8
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	69db      	ldr	r3, [r3, #28]
 8004ff2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800500a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800500e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005012:	4013      	ands	r3, r2
 8005014:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005018:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800501c:	2b00      	cmp	r3, #0
 800501e:	d115      	bne.n	800504c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005020:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005024:	f003 0320 	and.w	r3, r3, #32
 8005028:	2b00      	cmp	r3, #0
 800502a:	d00f      	beq.n	800504c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800502c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005030:	f003 0320 	and.w	r3, r3, #32
 8005034:	2b00      	cmp	r3, #0
 8005036:	d009      	beq.n	800504c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800503c:	2b00      	cmp	r3, #0
 800503e:	f000 82a6 	beq.w	800558e <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	4798      	blx	r3
      }
      return;
 800504a:	e2a0      	b.n	800558e <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800504c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005050:	2b00      	cmp	r3, #0
 8005052:	f000 8117 	beq.w	8005284 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005056:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800505a:	f003 0301 	and.w	r3, r3, #1
 800505e:	2b00      	cmp	r3, #0
 8005060:	d106      	bne.n	8005070 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005062:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005066:	4b85      	ldr	r3, [pc, #532]	; (800527c <HAL_UART_IRQHandler+0x298>)
 8005068:	4013      	ands	r3, r2
 800506a:	2b00      	cmp	r3, #0
 800506c:	f000 810a 	beq.w	8005284 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005070:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005074:	f003 0301 	and.w	r3, r3, #1
 8005078:	2b00      	cmp	r3, #0
 800507a:	d011      	beq.n	80050a0 <HAL_UART_IRQHandler+0xbc>
 800507c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005084:	2b00      	cmp	r3, #0
 8005086:	d00b      	beq.n	80050a0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2201      	movs	r2, #1
 800508e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005096:	f043 0201 	orr.w	r2, r3, #1
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80050a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050a4:	f003 0302 	and.w	r3, r3, #2
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d011      	beq.n	80050d0 <HAL_UART_IRQHandler+0xec>
 80050ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050b0:	f003 0301 	and.w	r3, r3, #1
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d00b      	beq.n	80050d0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2202      	movs	r2, #2
 80050be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050c6:	f043 0204 	orr.w	r2, r3, #4
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80050d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050d4:	f003 0304 	and.w	r3, r3, #4
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d011      	beq.n	8005100 <HAL_UART_IRQHandler+0x11c>
 80050dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050e0:	f003 0301 	and.w	r3, r3, #1
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d00b      	beq.n	8005100 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2204      	movs	r2, #4
 80050ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050f6:	f043 0202 	orr.w	r2, r3, #2
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005100:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005104:	f003 0308 	and.w	r3, r3, #8
 8005108:	2b00      	cmp	r3, #0
 800510a:	d017      	beq.n	800513c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800510c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005110:	f003 0320 	and.w	r3, r3, #32
 8005114:	2b00      	cmp	r3, #0
 8005116:	d105      	bne.n	8005124 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005118:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800511c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005120:	2b00      	cmp	r3, #0
 8005122:	d00b      	beq.n	800513c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2208      	movs	r2, #8
 800512a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005132:	f043 0208 	orr.w	r2, r3, #8
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800513c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005140:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005144:	2b00      	cmp	r3, #0
 8005146:	d012      	beq.n	800516e <HAL_UART_IRQHandler+0x18a>
 8005148:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800514c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005150:	2b00      	cmp	r3, #0
 8005152:	d00c      	beq.n	800516e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800515c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005164:	f043 0220 	orr.w	r2, r3, #32
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005174:	2b00      	cmp	r3, #0
 8005176:	f000 820c 	beq.w	8005592 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800517a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800517e:	f003 0320 	and.w	r3, r3, #32
 8005182:	2b00      	cmp	r3, #0
 8005184:	d00d      	beq.n	80051a2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005186:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800518a:	f003 0320 	and.w	r3, r3, #32
 800518e:	2b00      	cmp	r3, #0
 8005190:	d007      	beq.n	80051a2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005196:	2b00      	cmp	r3, #0
 8005198:	d003      	beq.n	80051a2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051b6:	2b40      	cmp	r3, #64	; 0x40
 80051b8:	d005      	beq.n	80051c6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80051ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80051be:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d04f      	beq.n	8005266 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 ff40 	bl	800604c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d6:	2b40      	cmp	r3, #64	; 0x40
 80051d8:	d141      	bne.n	800525e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	3308      	adds	r3, #8
 80051e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80051e8:	e853 3f00 	ldrex	r3, [r3]
 80051ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80051f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80051f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	3308      	adds	r3, #8
 8005202:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005206:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800520a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800520e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005212:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005216:	e841 2300 	strex	r3, r2, [r1]
 800521a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800521e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d1d9      	bne.n	80051da <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800522a:	2b00      	cmp	r3, #0
 800522c:	d013      	beq.n	8005256 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005232:	4a13      	ldr	r2, [pc, #76]	; (8005280 <HAL_UART_IRQHandler+0x29c>)
 8005234:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800523a:	4618      	mov	r0, r3
 800523c:	f7fd fa61 	bl	8002702 <HAL_DMA_Abort_IT>
 8005240:	4603      	mov	r3, r0
 8005242:	2b00      	cmp	r3, #0
 8005244:	d017      	beq.n	8005276 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800524a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005250:	4610      	mov	r0, r2
 8005252:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005254:	e00f      	b.n	8005276 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 f9b0 	bl	80055bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800525c:	e00b      	b.n	8005276 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 f9ac 	bl	80055bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005264:	e007      	b.n	8005276 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 f9a8 	bl	80055bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005274:	e18d      	b.n	8005592 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005276:	bf00      	nop
    return;
 8005278:	e18b      	b.n	8005592 <HAL_UART_IRQHandler+0x5ae>
 800527a:	bf00      	nop
 800527c:	04000120 	.word	0x04000120
 8005280:	08006113 	.word	0x08006113

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005288:	2b01      	cmp	r3, #1
 800528a:	f040 8146 	bne.w	800551a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800528e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005292:	f003 0310 	and.w	r3, r3, #16
 8005296:	2b00      	cmp	r3, #0
 8005298:	f000 813f 	beq.w	800551a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800529c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052a0:	f003 0310 	and.w	r3, r3, #16
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	f000 8138 	beq.w	800551a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2210      	movs	r2, #16
 80052b0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052bc:	2b40      	cmp	r3, #64	; 0x40
 80052be:	f040 80b4 	bne.w	800542a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80052ce:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	f000 815f 	beq.w	8005596 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80052de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80052e2:	429a      	cmp	r2, r3
 80052e4:	f080 8157 	bcs.w	8005596 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80052ee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 0320 	and.w	r3, r3, #32
 80052fe:	2b00      	cmp	r3, #0
 8005300:	f040 8085 	bne.w	800540e <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800530c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005310:	e853 3f00 	ldrex	r3, [r3]
 8005314:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005318:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800531c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005320:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	461a      	mov	r2, r3
 800532a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800532e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005332:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005336:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800533a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800533e:	e841 2300 	strex	r3, r2, [r1]
 8005342:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005346:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800534a:	2b00      	cmp	r3, #0
 800534c:	d1da      	bne.n	8005304 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	3308      	adds	r3, #8
 8005354:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005356:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005358:	e853 3f00 	ldrex	r3, [r3]
 800535c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800535e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005360:	f023 0301 	bic.w	r3, r3, #1
 8005364:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	3308      	adds	r3, #8
 800536e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005372:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005376:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005378:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800537a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800537e:	e841 2300 	strex	r3, r2, [r1]
 8005382:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005384:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005386:	2b00      	cmp	r3, #0
 8005388:	d1e1      	bne.n	800534e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	3308      	adds	r3, #8
 8005390:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005392:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005394:	e853 3f00 	ldrex	r3, [r3]
 8005398:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800539a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800539c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	3308      	adds	r3, #8
 80053aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80053ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 80053b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80053b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80053b6:	e841 2300 	strex	r3, r2, [r1]
 80053ba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80053bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d1e3      	bne.n	800538a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2220      	movs	r2, #32
 80053c6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053d6:	e853 3f00 	ldrex	r3, [r3]
 80053da:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80053dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053de:	f023 0310 	bic.w	r3, r3, #16
 80053e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	461a      	mov	r2, r3
 80053ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80053f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80053f2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80053f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80053f8:	e841 2300 	strex	r3, r2, [r1]
 80053fc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80053fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005400:	2b00      	cmp	r3, #0
 8005402:	d1e4      	bne.n	80053ce <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005408:	4618      	mov	r0, r3
 800540a:	f7fd f93c 	bl	8002686 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800541a:	b29b      	uxth	r3, r3
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	b29b      	uxth	r3, r3
 8005420:	4619      	mov	r1, r3
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 f8d4 	bl	80055d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005428:	e0b5      	b.n	8005596 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005436:	b29b      	uxth	r3, r3
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005444:	b29b      	uxth	r3, r3
 8005446:	2b00      	cmp	r3, #0
 8005448:	f000 80a7 	beq.w	800559a <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800544c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005450:	2b00      	cmp	r3, #0
 8005452:	f000 80a2 	beq.w	800559a <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800545c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800545e:	e853 3f00 	ldrex	r3, [r3]
 8005462:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005466:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800546a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	461a      	mov	r2, r3
 8005474:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005478:	647b      	str	r3, [r7, #68]	; 0x44
 800547a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800547c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800547e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005480:	e841 2300 	strex	r3, r2, [r1]
 8005484:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005488:	2b00      	cmp	r3, #0
 800548a:	d1e4      	bne.n	8005456 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	3308      	adds	r3, #8
 8005492:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005496:	e853 3f00 	ldrex	r3, [r3]
 800549a:	623b      	str	r3, [r7, #32]
   return(result);
 800549c:	6a3b      	ldr	r3, [r7, #32]
 800549e:	f023 0301 	bic.w	r3, r3, #1
 80054a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	3308      	adds	r3, #8
 80054ac:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80054b0:	633a      	str	r2, [r7, #48]	; 0x30
 80054b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80054b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054b8:	e841 2300 	strex	r3, r2, [r1]
 80054bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80054be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d1e3      	bne.n	800548c <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2220      	movs	r2, #32
 80054c8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	e853 3f00 	ldrex	r3, [r3]
 80054e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f023 0310 	bic.w	r3, r3, #16
 80054ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	461a      	mov	r2, r3
 80054f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80054f8:	61fb      	str	r3, [r7, #28]
 80054fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054fc:	69b9      	ldr	r1, [r7, #24]
 80054fe:	69fa      	ldr	r2, [r7, #28]
 8005500:	e841 2300 	strex	r3, r2, [r1]
 8005504:	617b      	str	r3, [r7, #20]
   return(result);
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d1e4      	bne.n	80054d6 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800550c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005510:	4619      	mov	r1, r3
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 f85c 	bl	80055d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005518:	e03f      	b.n	800559a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800551a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800551e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005522:	2b00      	cmp	r3, #0
 8005524:	d00e      	beq.n	8005544 <HAL_UART_IRQHandler+0x560>
 8005526:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800552a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d008      	beq.n	8005544 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800553a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f000 ff88 	bl	8006452 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005542:	e02d      	b.n	80055a0 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005544:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005548:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800554c:	2b00      	cmp	r3, #0
 800554e:	d00e      	beq.n	800556e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005550:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005554:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005558:	2b00      	cmp	r3, #0
 800555a:	d008      	beq.n	800556e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005560:	2b00      	cmp	r3, #0
 8005562:	d01c      	beq.n	800559e <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	4798      	blx	r3
    }
    return;
 800556c:	e017      	b.n	800559e <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800556e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005576:	2b00      	cmp	r3, #0
 8005578:	d012      	beq.n	80055a0 <HAL_UART_IRQHandler+0x5bc>
 800557a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800557e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00c      	beq.n	80055a0 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 fdd9 	bl	800613e <UART_EndTransmit_IT>
    return;
 800558c:	e008      	b.n	80055a0 <HAL_UART_IRQHandler+0x5bc>
      return;
 800558e:	bf00      	nop
 8005590:	e006      	b.n	80055a0 <HAL_UART_IRQHandler+0x5bc>
    return;
 8005592:	bf00      	nop
 8005594:	e004      	b.n	80055a0 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005596:	bf00      	nop
 8005598:	e002      	b.n	80055a0 <HAL_UART_IRQHandler+0x5bc>
      return;
 800559a:	bf00      	nop
 800559c:	e000      	b.n	80055a0 <HAL_UART_IRQHandler+0x5bc>
    return;
 800559e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80055a0:	37e8      	adds	r7, #232	; 0xe8
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop

080055a8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80055b0:	bf00      	nop
 80055b2:	370c      	adds	r7, #12
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80055c4:	bf00      	nop
 80055c6:	370c      	adds	r7, #12
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b083      	sub	sp, #12
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	460b      	mov	r3, r1
 80055da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80055dc:	bf00      	nop
 80055de:	370c      	adds	r7, #12
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055ec:	b08a      	sub	sp, #40	; 0x28
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80055f2:	2300      	movs	r3, #0
 80055f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	689a      	ldr	r2, [r3, #8]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	691b      	ldr	r3, [r3, #16]
 8005600:	431a      	orrs	r2, r3
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	695b      	ldr	r3, [r3, #20]
 8005606:	431a      	orrs	r2, r3
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	69db      	ldr	r3, [r3, #28]
 800560c:	4313      	orrs	r3, r2
 800560e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	4ba4      	ldr	r3, [pc, #656]	; (80058a8 <UART_SetConfig+0x2c0>)
 8005618:	4013      	ands	r3, r2
 800561a:	68fa      	ldr	r2, [r7, #12]
 800561c:	6812      	ldr	r2, [r2, #0]
 800561e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005620:	430b      	orrs	r3, r1
 8005622:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	68da      	ldr	r2, [r3, #12]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	430a      	orrs	r2, r1
 8005638:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	699b      	ldr	r3, [r3, #24]
 800563e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a99      	ldr	r2, [pc, #612]	; (80058ac <UART_SetConfig+0x2c4>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d004      	beq.n	8005654 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6a1b      	ldr	r3, [r3, #32]
 800564e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005650:	4313      	orrs	r3, r2
 8005652:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005664:	430a      	orrs	r2, r1
 8005666:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a90      	ldr	r2, [pc, #576]	; (80058b0 <UART_SetConfig+0x2c8>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d126      	bne.n	80056c0 <UART_SetConfig+0xd8>
 8005672:	4b90      	ldr	r3, [pc, #576]	; (80058b4 <UART_SetConfig+0x2cc>)
 8005674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005678:	f003 0303 	and.w	r3, r3, #3
 800567c:	2b03      	cmp	r3, #3
 800567e:	d81b      	bhi.n	80056b8 <UART_SetConfig+0xd0>
 8005680:	a201      	add	r2, pc, #4	; (adr r2, 8005688 <UART_SetConfig+0xa0>)
 8005682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005686:	bf00      	nop
 8005688:	08005699 	.word	0x08005699
 800568c:	080056a9 	.word	0x080056a9
 8005690:	080056a1 	.word	0x080056a1
 8005694:	080056b1 	.word	0x080056b1
 8005698:	2301      	movs	r3, #1
 800569a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800569e:	e116      	b.n	80058ce <UART_SetConfig+0x2e6>
 80056a0:	2302      	movs	r3, #2
 80056a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056a6:	e112      	b.n	80058ce <UART_SetConfig+0x2e6>
 80056a8:	2304      	movs	r3, #4
 80056aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056ae:	e10e      	b.n	80058ce <UART_SetConfig+0x2e6>
 80056b0:	2308      	movs	r3, #8
 80056b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056b6:	e10a      	b.n	80058ce <UART_SetConfig+0x2e6>
 80056b8:	2310      	movs	r3, #16
 80056ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056be:	e106      	b.n	80058ce <UART_SetConfig+0x2e6>
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a7c      	ldr	r2, [pc, #496]	; (80058b8 <UART_SetConfig+0x2d0>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d138      	bne.n	800573c <UART_SetConfig+0x154>
 80056ca:	4b7a      	ldr	r3, [pc, #488]	; (80058b4 <UART_SetConfig+0x2cc>)
 80056cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056d0:	f003 030c 	and.w	r3, r3, #12
 80056d4:	2b0c      	cmp	r3, #12
 80056d6:	d82d      	bhi.n	8005734 <UART_SetConfig+0x14c>
 80056d8:	a201      	add	r2, pc, #4	; (adr r2, 80056e0 <UART_SetConfig+0xf8>)
 80056da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056de:	bf00      	nop
 80056e0:	08005715 	.word	0x08005715
 80056e4:	08005735 	.word	0x08005735
 80056e8:	08005735 	.word	0x08005735
 80056ec:	08005735 	.word	0x08005735
 80056f0:	08005725 	.word	0x08005725
 80056f4:	08005735 	.word	0x08005735
 80056f8:	08005735 	.word	0x08005735
 80056fc:	08005735 	.word	0x08005735
 8005700:	0800571d 	.word	0x0800571d
 8005704:	08005735 	.word	0x08005735
 8005708:	08005735 	.word	0x08005735
 800570c:	08005735 	.word	0x08005735
 8005710:	0800572d 	.word	0x0800572d
 8005714:	2300      	movs	r3, #0
 8005716:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800571a:	e0d8      	b.n	80058ce <UART_SetConfig+0x2e6>
 800571c:	2302      	movs	r3, #2
 800571e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005722:	e0d4      	b.n	80058ce <UART_SetConfig+0x2e6>
 8005724:	2304      	movs	r3, #4
 8005726:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800572a:	e0d0      	b.n	80058ce <UART_SetConfig+0x2e6>
 800572c:	2308      	movs	r3, #8
 800572e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005732:	e0cc      	b.n	80058ce <UART_SetConfig+0x2e6>
 8005734:	2310      	movs	r3, #16
 8005736:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800573a:	e0c8      	b.n	80058ce <UART_SetConfig+0x2e6>
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a5e      	ldr	r2, [pc, #376]	; (80058bc <UART_SetConfig+0x2d4>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d125      	bne.n	8005792 <UART_SetConfig+0x1aa>
 8005746:	4b5b      	ldr	r3, [pc, #364]	; (80058b4 <UART_SetConfig+0x2cc>)
 8005748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800574c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005750:	2b30      	cmp	r3, #48	; 0x30
 8005752:	d016      	beq.n	8005782 <UART_SetConfig+0x19a>
 8005754:	2b30      	cmp	r3, #48	; 0x30
 8005756:	d818      	bhi.n	800578a <UART_SetConfig+0x1a2>
 8005758:	2b20      	cmp	r3, #32
 800575a:	d00a      	beq.n	8005772 <UART_SetConfig+0x18a>
 800575c:	2b20      	cmp	r3, #32
 800575e:	d814      	bhi.n	800578a <UART_SetConfig+0x1a2>
 8005760:	2b00      	cmp	r3, #0
 8005762:	d002      	beq.n	800576a <UART_SetConfig+0x182>
 8005764:	2b10      	cmp	r3, #16
 8005766:	d008      	beq.n	800577a <UART_SetConfig+0x192>
 8005768:	e00f      	b.n	800578a <UART_SetConfig+0x1a2>
 800576a:	2300      	movs	r3, #0
 800576c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005770:	e0ad      	b.n	80058ce <UART_SetConfig+0x2e6>
 8005772:	2302      	movs	r3, #2
 8005774:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005778:	e0a9      	b.n	80058ce <UART_SetConfig+0x2e6>
 800577a:	2304      	movs	r3, #4
 800577c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005780:	e0a5      	b.n	80058ce <UART_SetConfig+0x2e6>
 8005782:	2308      	movs	r3, #8
 8005784:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005788:	e0a1      	b.n	80058ce <UART_SetConfig+0x2e6>
 800578a:	2310      	movs	r3, #16
 800578c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005790:	e09d      	b.n	80058ce <UART_SetConfig+0x2e6>
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a4a      	ldr	r2, [pc, #296]	; (80058c0 <UART_SetConfig+0x2d8>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d125      	bne.n	80057e8 <UART_SetConfig+0x200>
 800579c:	4b45      	ldr	r3, [pc, #276]	; (80058b4 <UART_SetConfig+0x2cc>)
 800579e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057a2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80057a6:	2bc0      	cmp	r3, #192	; 0xc0
 80057a8:	d016      	beq.n	80057d8 <UART_SetConfig+0x1f0>
 80057aa:	2bc0      	cmp	r3, #192	; 0xc0
 80057ac:	d818      	bhi.n	80057e0 <UART_SetConfig+0x1f8>
 80057ae:	2b80      	cmp	r3, #128	; 0x80
 80057b0:	d00a      	beq.n	80057c8 <UART_SetConfig+0x1e0>
 80057b2:	2b80      	cmp	r3, #128	; 0x80
 80057b4:	d814      	bhi.n	80057e0 <UART_SetConfig+0x1f8>
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d002      	beq.n	80057c0 <UART_SetConfig+0x1d8>
 80057ba:	2b40      	cmp	r3, #64	; 0x40
 80057bc:	d008      	beq.n	80057d0 <UART_SetConfig+0x1e8>
 80057be:	e00f      	b.n	80057e0 <UART_SetConfig+0x1f8>
 80057c0:	2300      	movs	r3, #0
 80057c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057c6:	e082      	b.n	80058ce <UART_SetConfig+0x2e6>
 80057c8:	2302      	movs	r3, #2
 80057ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057ce:	e07e      	b.n	80058ce <UART_SetConfig+0x2e6>
 80057d0:	2304      	movs	r3, #4
 80057d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057d6:	e07a      	b.n	80058ce <UART_SetConfig+0x2e6>
 80057d8:	2308      	movs	r3, #8
 80057da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057de:	e076      	b.n	80058ce <UART_SetConfig+0x2e6>
 80057e0:	2310      	movs	r3, #16
 80057e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057e6:	e072      	b.n	80058ce <UART_SetConfig+0x2e6>
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a35      	ldr	r2, [pc, #212]	; (80058c4 <UART_SetConfig+0x2dc>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d12a      	bne.n	8005848 <UART_SetConfig+0x260>
 80057f2:	4b30      	ldr	r3, [pc, #192]	; (80058b4 <UART_SetConfig+0x2cc>)
 80057f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005800:	d01a      	beq.n	8005838 <UART_SetConfig+0x250>
 8005802:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005806:	d81b      	bhi.n	8005840 <UART_SetConfig+0x258>
 8005808:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800580c:	d00c      	beq.n	8005828 <UART_SetConfig+0x240>
 800580e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005812:	d815      	bhi.n	8005840 <UART_SetConfig+0x258>
 8005814:	2b00      	cmp	r3, #0
 8005816:	d003      	beq.n	8005820 <UART_SetConfig+0x238>
 8005818:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800581c:	d008      	beq.n	8005830 <UART_SetConfig+0x248>
 800581e:	e00f      	b.n	8005840 <UART_SetConfig+0x258>
 8005820:	2300      	movs	r3, #0
 8005822:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005826:	e052      	b.n	80058ce <UART_SetConfig+0x2e6>
 8005828:	2302      	movs	r3, #2
 800582a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800582e:	e04e      	b.n	80058ce <UART_SetConfig+0x2e6>
 8005830:	2304      	movs	r3, #4
 8005832:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005836:	e04a      	b.n	80058ce <UART_SetConfig+0x2e6>
 8005838:	2308      	movs	r3, #8
 800583a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800583e:	e046      	b.n	80058ce <UART_SetConfig+0x2e6>
 8005840:	2310      	movs	r3, #16
 8005842:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005846:	e042      	b.n	80058ce <UART_SetConfig+0x2e6>
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a17      	ldr	r2, [pc, #92]	; (80058ac <UART_SetConfig+0x2c4>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d13a      	bne.n	80058c8 <UART_SetConfig+0x2e0>
 8005852:	4b18      	ldr	r3, [pc, #96]	; (80058b4 <UART_SetConfig+0x2cc>)
 8005854:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005858:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800585c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005860:	d01a      	beq.n	8005898 <UART_SetConfig+0x2b0>
 8005862:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005866:	d81b      	bhi.n	80058a0 <UART_SetConfig+0x2b8>
 8005868:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800586c:	d00c      	beq.n	8005888 <UART_SetConfig+0x2a0>
 800586e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005872:	d815      	bhi.n	80058a0 <UART_SetConfig+0x2b8>
 8005874:	2b00      	cmp	r3, #0
 8005876:	d003      	beq.n	8005880 <UART_SetConfig+0x298>
 8005878:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800587c:	d008      	beq.n	8005890 <UART_SetConfig+0x2a8>
 800587e:	e00f      	b.n	80058a0 <UART_SetConfig+0x2b8>
 8005880:	2300      	movs	r3, #0
 8005882:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005886:	e022      	b.n	80058ce <UART_SetConfig+0x2e6>
 8005888:	2302      	movs	r3, #2
 800588a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800588e:	e01e      	b.n	80058ce <UART_SetConfig+0x2e6>
 8005890:	2304      	movs	r3, #4
 8005892:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005896:	e01a      	b.n	80058ce <UART_SetConfig+0x2e6>
 8005898:	2308      	movs	r3, #8
 800589a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800589e:	e016      	b.n	80058ce <UART_SetConfig+0x2e6>
 80058a0:	2310      	movs	r3, #16
 80058a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058a6:	e012      	b.n	80058ce <UART_SetConfig+0x2e6>
 80058a8:	efff69f3 	.word	0xefff69f3
 80058ac:	40008000 	.word	0x40008000
 80058b0:	40013800 	.word	0x40013800
 80058b4:	40021000 	.word	0x40021000
 80058b8:	40004400 	.word	0x40004400
 80058bc:	40004800 	.word	0x40004800
 80058c0:	40004c00 	.word	0x40004c00
 80058c4:	40005000 	.word	0x40005000
 80058c8:	2310      	movs	r3, #16
 80058ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a9f      	ldr	r2, [pc, #636]	; (8005b50 <UART_SetConfig+0x568>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d17a      	bne.n	80059ce <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80058d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80058dc:	2b08      	cmp	r3, #8
 80058de:	d824      	bhi.n	800592a <UART_SetConfig+0x342>
 80058e0:	a201      	add	r2, pc, #4	; (adr r2, 80058e8 <UART_SetConfig+0x300>)
 80058e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058e6:	bf00      	nop
 80058e8:	0800590d 	.word	0x0800590d
 80058ec:	0800592b 	.word	0x0800592b
 80058f0:	08005915 	.word	0x08005915
 80058f4:	0800592b 	.word	0x0800592b
 80058f8:	0800591b 	.word	0x0800591b
 80058fc:	0800592b 	.word	0x0800592b
 8005900:	0800592b 	.word	0x0800592b
 8005904:	0800592b 	.word	0x0800592b
 8005908:	08005923 	.word	0x08005923
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800590c:	f7fd feee 	bl	80036ec <HAL_RCC_GetPCLK1Freq>
 8005910:	61f8      	str	r0, [r7, #28]
        break;
 8005912:	e010      	b.n	8005936 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005914:	4b8f      	ldr	r3, [pc, #572]	; (8005b54 <UART_SetConfig+0x56c>)
 8005916:	61fb      	str	r3, [r7, #28]
        break;
 8005918:	e00d      	b.n	8005936 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800591a:	f7fd fe4f 	bl	80035bc <HAL_RCC_GetSysClockFreq>
 800591e:	61f8      	str	r0, [r7, #28]
        break;
 8005920:	e009      	b.n	8005936 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005922:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005926:	61fb      	str	r3, [r7, #28]
        break;
 8005928:	e005      	b.n	8005936 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800592a:	2300      	movs	r3, #0
 800592c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005934:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	2b00      	cmp	r3, #0
 800593a:	f000 80fb 	beq.w	8005b34 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	685a      	ldr	r2, [r3, #4]
 8005942:	4613      	mov	r3, r2
 8005944:	005b      	lsls	r3, r3, #1
 8005946:	4413      	add	r3, r2
 8005948:	69fa      	ldr	r2, [r7, #28]
 800594a:	429a      	cmp	r2, r3
 800594c:	d305      	bcc.n	800595a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005954:	69fa      	ldr	r2, [r7, #28]
 8005956:	429a      	cmp	r2, r3
 8005958:	d903      	bls.n	8005962 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005960:	e0e8      	b.n	8005b34 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	2200      	movs	r2, #0
 8005966:	461c      	mov	r4, r3
 8005968:	4615      	mov	r5, r2
 800596a:	f04f 0200 	mov.w	r2, #0
 800596e:	f04f 0300 	mov.w	r3, #0
 8005972:	022b      	lsls	r3, r5, #8
 8005974:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005978:	0222      	lsls	r2, r4, #8
 800597a:	68f9      	ldr	r1, [r7, #12]
 800597c:	6849      	ldr	r1, [r1, #4]
 800597e:	0849      	lsrs	r1, r1, #1
 8005980:	2000      	movs	r0, #0
 8005982:	4688      	mov	r8, r1
 8005984:	4681      	mov	r9, r0
 8005986:	eb12 0a08 	adds.w	sl, r2, r8
 800598a:	eb43 0b09 	adc.w	fp, r3, r9
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	603b      	str	r3, [r7, #0]
 8005996:	607a      	str	r2, [r7, #4]
 8005998:	e9d7 2300 	ldrd	r2, r3, [r7]
 800599c:	4650      	mov	r0, sl
 800599e:	4659      	mov	r1, fp
 80059a0:	f7fa fc12 	bl	80001c8 <__aeabi_uldivmod>
 80059a4:	4602      	mov	r2, r0
 80059a6:	460b      	mov	r3, r1
 80059a8:	4613      	mov	r3, r2
 80059aa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80059ac:	69bb      	ldr	r3, [r7, #24]
 80059ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059b2:	d308      	bcc.n	80059c6 <UART_SetConfig+0x3de>
 80059b4:	69bb      	ldr	r3, [r7, #24]
 80059b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059ba:	d204      	bcs.n	80059c6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	69ba      	ldr	r2, [r7, #24]
 80059c2:	60da      	str	r2, [r3, #12]
 80059c4:	e0b6      	b.n	8005b34 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80059cc:	e0b2      	b.n	8005b34 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	69db      	ldr	r3, [r3, #28]
 80059d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059d6:	d15e      	bne.n	8005a96 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80059d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80059dc:	2b08      	cmp	r3, #8
 80059de:	d828      	bhi.n	8005a32 <UART_SetConfig+0x44a>
 80059e0:	a201      	add	r2, pc, #4	; (adr r2, 80059e8 <UART_SetConfig+0x400>)
 80059e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e6:	bf00      	nop
 80059e8:	08005a0d 	.word	0x08005a0d
 80059ec:	08005a15 	.word	0x08005a15
 80059f0:	08005a1d 	.word	0x08005a1d
 80059f4:	08005a33 	.word	0x08005a33
 80059f8:	08005a23 	.word	0x08005a23
 80059fc:	08005a33 	.word	0x08005a33
 8005a00:	08005a33 	.word	0x08005a33
 8005a04:	08005a33 	.word	0x08005a33
 8005a08:	08005a2b 	.word	0x08005a2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a0c:	f7fd fe6e 	bl	80036ec <HAL_RCC_GetPCLK1Freq>
 8005a10:	61f8      	str	r0, [r7, #28]
        break;
 8005a12:	e014      	b.n	8005a3e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a14:	f7fd fe80 	bl	8003718 <HAL_RCC_GetPCLK2Freq>
 8005a18:	61f8      	str	r0, [r7, #28]
        break;
 8005a1a:	e010      	b.n	8005a3e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a1c:	4b4d      	ldr	r3, [pc, #308]	; (8005b54 <UART_SetConfig+0x56c>)
 8005a1e:	61fb      	str	r3, [r7, #28]
        break;
 8005a20:	e00d      	b.n	8005a3e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a22:	f7fd fdcb 	bl	80035bc <HAL_RCC_GetSysClockFreq>
 8005a26:	61f8      	str	r0, [r7, #28]
        break;
 8005a28:	e009      	b.n	8005a3e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a2e:	61fb      	str	r3, [r7, #28]
        break;
 8005a30:	e005      	b.n	8005a3e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005a32:	2300      	movs	r3, #0
 8005a34:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005a3c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d077      	beq.n	8005b34 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	005a      	lsls	r2, r3, #1
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	085b      	lsrs	r3, r3, #1
 8005a4e:	441a      	add	r2, r3
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a58:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a5a:	69bb      	ldr	r3, [r7, #24]
 8005a5c:	2b0f      	cmp	r3, #15
 8005a5e:	d916      	bls.n	8005a8e <UART_SetConfig+0x4a6>
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a66:	d212      	bcs.n	8005a8e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a68:	69bb      	ldr	r3, [r7, #24]
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	f023 030f 	bic.w	r3, r3, #15
 8005a70:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	085b      	lsrs	r3, r3, #1
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	f003 0307 	and.w	r3, r3, #7
 8005a7c:	b29a      	uxth	r2, r3
 8005a7e:	8afb      	ldrh	r3, [r7, #22]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	8afa      	ldrh	r2, [r7, #22]
 8005a8a:	60da      	str	r2, [r3, #12]
 8005a8c:	e052      	b.n	8005b34 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005a94:	e04e      	b.n	8005b34 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a96:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a9a:	2b08      	cmp	r3, #8
 8005a9c:	d827      	bhi.n	8005aee <UART_SetConfig+0x506>
 8005a9e:	a201      	add	r2, pc, #4	; (adr r2, 8005aa4 <UART_SetConfig+0x4bc>)
 8005aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa4:	08005ac9 	.word	0x08005ac9
 8005aa8:	08005ad1 	.word	0x08005ad1
 8005aac:	08005ad9 	.word	0x08005ad9
 8005ab0:	08005aef 	.word	0x08005aef
 8005ab4:	08005adf 	.word	0x08005adf
 8005ab8:	08005aef 	.word	0x08005aef
 8005abc:	08005aef 	.word	0x08005aef
 8005ac0:	08005aef 	.word	0x08005aef
 8005ac4:	08005ae7 	.word	0x08005ae7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ac8:	f7fd fe10 	bl	80036ec <HAL_RCC_GetPCLK1Freq>
 8005acc:	61f8      	str	r0, [r7, #28]
        break;
 8005ace:	e014      	b.n	8005afa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ad0:	f7fd fe22 	bl	8003718 <HAL_RCC_GetPCLK2Freq>
 8005ad4:	61f8      	str	r0, [r7, #28]
        break;
 8005ad6:	e010      	b.n	8005afa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ad8:	4b1e      	ldr	r3, [pc, #120]	; (8005b54 <UART_SetConfig+0x56c>)
 8005ada:	61fb      	str	r3, [r7, #28]
        break;
 8005adc:	e00d      	b.n	8005afa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ade:	f7fd fd6d 	bl	80035bc <HAL_RCC_GetSysClockFreq>
 8005ae2:	61f8      	str	r0, [r7, #28]
        break;
 8005ae4:	e009      	b.n	8005afa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ae6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005aea:	61fb      	str	r3, [r7, #28]
        break;
 8005aec:	e005      	b.n	8005afa <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005aee:	2300      	movs	r3, #0
 8005af0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005af8:	bf00      	nop
    }

    if (pclk != 0U)
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d019      	beq.n	8005b34 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	085a      	lsrs	r2, r3, #1
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	441a      	add	r2, r3
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b12:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	2b0f      	cmp	r3, #15
 8005b18:	d909      	bls.n	8005b2e <UART_SetConfig+0x546>
 8005b1a:	69bb      	ldr	r3, [r7, #24]
 8005b1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b20:	d205      	bcs.n	8005b2e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005b22:	69bb      	ldr	r3, [r7, #24]
 8005b24:	b29a      	uxth	r2, r3
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	60da      	str	r2, [r3, #12]
 8005b2c:	e002      	b.n	8005b34 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2200      	movs	r2, #0
 8005b38:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005b40:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3728      	adds	r7, #40	; 0x28
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b4e:	bf00      	nop
 8005b50:	40008000 	.word	0x40008000
 8005b54:	00f42400 	.word	0x00f42400

08005b58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b64:	f003 0301 	and.w	r3, r3, #1
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d00a      	beq.n	8005b82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	430a      	orrs	r2, r1
 8005b80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b86:	f003 0302 	and.w	r3, r3, #2
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d00a      	beq.n	8005ba4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	430a      	orrs	r2, r1
 8005ba2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba8:	f003 0304 	and.w	r3, r3, #4
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d00a      	beq.n	8005bc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	430a      	orrs	r2, r1
 8005bc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bca:	f003 0308 	and.w	r3, r3, #8
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d00a      	beq.n	8005be8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	430a      	orrs	r2, r1
 8005be6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bec:	f003 0310 	and.w	r3, r3, #16
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d00a      	beq.n	8005c0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	430a      	orrs	r2, r1
 8005c08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0e:	f003 0320 	and.w	r3, r3, #32
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d00a      	beq.n	8005c2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	430a      	orrs	r2, r1
 8005c2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d01a      	beq.n	8005c6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	430a      	orrs	r2, r1
 8005c4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c56:	d10a      	bne.n	8005c6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	430a      	orrs	r2, r1
 8005c6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d00a      	beq.n	8005c90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	430a      	orrs	r2, r1
 8005c8e:	605a      	str	r2, [r3, #4]
  }
}
 8005c90:	bf00      	nop
 8005c92:	370c      	adds	r7, #12
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b086      	sub	sp, #24
 8005ca0:	af02      	add	r7, sp, #8
 8005ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005cac:	f7fb f872 	bl	8000d94 <HAL_GetTick>
 8005cb0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 0308 	and.w	r3, r3, #8
 8005cbc:	2b08      	cmp	r3, #8
 8005cbe:	d10e      	bne.n	8005cde <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cc0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005cc4:	9300      	str	r3, [sp, #0]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f000 f82d 	bl	8005d2e <UART_WaitOnFlagUntilTimeout>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d001      	beq.n	8005cde <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cda:	2303      	movs	r3, #3
 8005cdc:	e023      	b.n	8005d26 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 0304 	and.w	r3, r3, #4
 8005ce8:	2b04      	cmp	r3, #4
 8005cea:	d10e      	bne.n	8005d0a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005cf0:	9300      	str	r3, [sp, #0]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 f817 	bl	8005d2e <UART_WaitOnFlagUntilTimeout>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d001      	beq.n	8005d0a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d06:	2303      	movs	r3, #3
 8005d08:	e00d      	b.n	8005d26 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2220      	movs	r2, #32
 8005d0e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2220      	movs	r2, #32
 8005d14:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3710      	adds	r7, #16
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}

08005d2e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d2e:	b580      	push	{r7, lr}
 8005d30:	b09c      	sub	sp, #112	; 0x70
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	60f8      	str	r0, [r7, #12]
 8005d36:	60b9      	str	r1, [r7, #8]
 8005d38:	603b      	str	r3, [r7, #0]
 8005d3a:	4613      	mov	r3, r2
 8005d3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d3e:	e0a5      	b.n	8005e8c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d46:	f000 80a1 	beq.w	8005e8c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d4a:	f7fb f823 	bl	8000d94 <HAL_GetTick>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	1ad3      	subs	r3, r2, r3
 8005d54:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d302      	bcc.n	8005d60 <UART_WaitOnFlagUntilTimeout+0x32>
 8005d5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d13e      	bne.n	8005dde <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d68:	e853 3f00 	ldrex	r3, [r3]
 8005d6c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005d6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d70:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005d74:	667b      	str	r3, [r7, #100]	; 0x64
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d80:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d82:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005d84:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005d86:	e841 2300 	strex	r3, r2, [r1]
 8005d8a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005d8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d1e6      	bne.n	8005d60 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	3308      	adds	r3, #8
 8005d98:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d9c:	e853 3f00 	ldrex	r3, [r3]
 8005da0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da4:	f023 0301 	bic.w	r3, r3, #1
 8005da8:	663b      	str	r3, [r7, #96]	; 0x60
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	3308      	adds	r3, #8
 8005db0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005db2:	64ba      	str	r2, [r7, #72]	; 0x48
 8005db4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005db8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005dba:	e841 2300 	strex	r3, r2, [r1]
 8005dbe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005dc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d1e5      	bne.n	8005d92 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2220      	movs	r2, #32
 8005dca:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2220      	movs	r2, #32
 8005dd0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005dda:	2303      	movs	r3, #3
 8005ddc:	e067      	b.n	8005eae <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 0304 	and.w	r3, r3, #4
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d04f      	beq.n	8005e8c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	69db      	ldr	r3, [r3, #28]
 8005df2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005df6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dfa:	d147      	bne.n	8005e8c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e04:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e0e:	e853 3f00 	ldrex	r3, [r3]
 8005e12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e16:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e1a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	461a      	mov	r2, r3
 8005e22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e24:	637b      	str	r3, [r7, #52]	; 0x34
 8005e26:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e2c:	e841 2300 	strex	r3, r2, [r1]
 8005e30:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d1e6      	bne.n	8005e06 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	3308      	adds	r3, #8
 8005e3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	e853 3f00 	ldrex	r3, [r3]
 8005e46:	613b      	str	r3, [r7, #16]
   return(result);
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	f023 0301 	bic.w	r3, r3, #1
 8005e4e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	3308      	adds	r3, #8
 8005e56:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005e58:	623a      	str	r2, [r7, #32]
 8005e5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e5c:	69f9      	ldr	r1, [r7, #28]
 8005e5e:	6a3a      	ldr	r2, [r7, #32]
 8005e60:	e841 2300 	strex	r3, r2, [r1]
 8005e64:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d1e5      	bne.n	8005e38 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2220      	movs	r2, #32
 8005e70:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2220      	movs	r2, #32
 8005e76:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2220      	movs	r2, #32
 8005e7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005e88:	2303      	movs	r3, #3
 8005e8a:	e010      	b.n	8005eae <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	69da      	ldr	r2, [r3, #28]
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	4013      	ands	r3, r2
 8005e96:	68ba      	ldr	r2, [r7, #8]
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	bf0c      	ite	eq
 8005e9c:	2301      	moveq	r3, #1
 8005e9e:	2300      	movne	r3, #0
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	79fb      	ldrb	r3, [r7, #7]
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	f43f af4a 	beq.w	8005d40 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005eac:	2300      	movs	r3, #0
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3770      	adds	r7, #112	; 0x70
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
	...

08005eb8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b097      	sub	sp, #92	; 0x5c
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	4613      	mov	r3, r2
 8005ec4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	68ba      	ldr	r2, [r7, #8]
 8005eca:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	88fa      	ldrh	r2, [r7, #6]
 8005ed0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	88fa      	ldrh	r2, [r7, #6]
 8005ed8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eea:	d10e      	bne.n	8005f0a <UART_Start_Receive_IT+0x52>
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	691b      	ldr	r3, [r3, #16]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d105      	bne.n	8005f00 <UART_Start_Receive_IT+0x48>
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005efa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005efe:	e02d      	b.n	8005f5c <UART_Start_Receive_IT+0xa4>
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	22ff      	movs	r2, #255	; 0xff
 8005f04:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005f08:	e028      	b.n	8005f5c <UART_Start_Receive_IT+0xa4>
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d10d      	bne.n	8005f2e <UART_Start_Receive_IT+0x76>
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d104      	bne.n	8005f24 <UART_Start_Receive_IT+0x6c>
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	22ff      	movs	r2, #255	; 0xff
 8005f1e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005f22:	e01b      	b.n	8005f5c <UART_Start_Receive_IT+0xa4>
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	227f      	movs	r2, #127	; 0x7f
 8005f28:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005f2c:	e016      	b.n	8005f5c <UART_Start_Receive_IT+0xa4>
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f36:	d10d      	bne.n	8005f54 <UART_Start_Receive_IT+0x9c>
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	691b      	ldr	r3, [r3, #16]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d104      	bne.n	8005f4a <UART_Start_Receive_IT+0x92>
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	227f      	movs	r2, #127	; 0x7f
 8005f44:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005f48:	e008      	b.n	8005f5c <UART_Start_Receive_IT+0xa4>
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	223f      	movs	r2, #63	; 0x3f
 8005f4e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005f52:	e003      	b.n	8005f5c <UART_Start_Receive_IT+0xa4>
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2200      	movs	r2, #0
 8005f58:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2222      	movs	r2, #34	; 0x22
 8005f68:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	3308      	adds	r3, #8
 8005f70:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f74:	e853 3f00 	ldrex	r3, [r3]
 8005f78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f7c:	f043 0301 	orr.w	r3, r3, #1
 8005f80:	657b      	str	r3, [r7, #84]	; 0x54
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	3308      	adds	r3, #8
 8005f88:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005f8a:	64ba      	str	r2, [r7, #72]	; 0x48
 8005f8c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f8e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005f90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f92:	e841 2300 	strex	r3, r2, [r1]
 8005f96:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005f98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d1e5      	bne.n	8005f6a <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fa6:	d107      	bne.n	8005fb8 <UART_Start_Receive_IT+0x100>
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	691b      	ldr	r3, [r3, #16]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d103      	bne.n	8005fb8 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	4a24      	ldr	r2, [pc, #144]	; (8006044 <UART_Start_Receive_IT+0x18c>)
 8005fb4:	665a      	str	r2, [r3, #100]	; 0x64
 8005fb6:	e002      	b.n	8005fbe <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	4a23      	ldr	r2, [pc, #140]	; (8006048 <UART_Start_Receive_IT+0x190>)
 8005fbc:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d019      	beq.n	8006002 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd6:	e853 3f00 	ldrex	r3, [r3]
 8005fda:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fde:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005fe2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	461a      	mov	r2, r3
 8005fea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fec:	637b      	str	r3, [r7, #52]	; 0x34
 8005fee:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ff2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ff4:	e841 2300 	strex	r3, r2, [r1]
 8005ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d1e6      	bne.n	8005fce <UART_Start_Receive_IT+0x116>
 8006000:	e018      	b.n	8006034 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	e853 3f00 	ldrex	r3, [r3]
 800600e:	613b      	str	r3, [r7, #16]
   return(result);
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	f043 0320 	orr.w	r3, r3, #32
 8006016:	653b      	str	r3, [r7, #80]	; 0x50
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	461a      	mov	r2, r3
 800601e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006020:	623b      	str	r3, [r7, #32]
 8006022:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006024:	69f9      	ldr	r1, [r7, #28]
 8006026:	6a3a      	ldr	r2, [r7, #32]
 8006028:	e841 2300 	strex	r3, r2, [r1]
 800602c:	61bb      	str	r3, [r7, #24]
   return(result);
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d1e6      	bne.n	8006002 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8006034:	2300      	movs	r3, #0
}
 8006036:	4618      	mov	r0, r3
 8006038:	375c      	adds	r7, #92	; 0x5c
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr
 8006042:	bf00      	nop
 8006044:	080062f3 	.word	0x080062f3
 8006048:	08006193 	.word	0x08006193

0800604c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800604c:	b480      	push	{r7}
 800604e:	b095      	sub	sp, #84	; 0x54
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800605a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800605c:	e853 3f00 	ldrex	r3, [r3]
 8006060:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006064:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006068:	64fb      	str	r3, [r7, #76]	; 0x4c
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	461a      	mov	r2, r3
 8006070:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006072:	643b      	str	r3, [r7, #64]	; 0x40
 8006074:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006076:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006078:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800607a:	e841 2300 	strex	r3, r2, [r1]
 800607e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006082:	2b00      	cmp	r3, #0
 8006084:	d1e6      	bne.n	8006054 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	3308      	adds	r3, #8
 800608c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800608e:	6a3b      	ldr	r3, [r7, #32]
 8006090:	e853 3f00 	ldrex	r3, [r3]
 8006094:	61fb      	str	r3, [r7, #28]
   return(result);
 8006096:	69fb      	ldr	r3, [r7, #28]
 8006098:	f023 0301 	bic.w	r3, r3, #1
 800609c:	64bb      	str	r3, [r7, #72]	; 0x48
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	3308      	adds	r3, #8
 80060a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060a8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060ae:	e841 2300 	strex	r3, r2, [r1]
 80060b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d1e5      	bne.n	8006086 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d118      	bne.n	80060f4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	e853 3f00 	ldrex	r3, [r3]
 80060ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	f023 0310 	bic.w	r3, r3, #16
 80060d6:	647b      	str	r3, [r7, #68]	; 0x44
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	461a      	mov	r2, r3
 80060de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060e0:	61bb      	str	r3, [r7, #24]
 80060e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e4:	6979      	ldr	r1, [r7, #20]
 80060e6:	69ba      	ldr	r2, [r7, #24]
 80060e8:	e841 2300 	strex	r3, r2, [r1]
 80060ec:	613b      	str	r3, [r7, #16]
   return(result);
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d1e6      	bne.n	80060c2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2220      	movs	r2, #32
 80060f8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2200      	movs	r2, #0
 80060fe:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006106:	bf00      	nop
 8006108:	3754      	adds	r7, #84	; 0x54
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr

08006112 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006112:	b580      	push	{r7, lr}
 8006114:	b084      	sub	sp, #16
 8006116:	af00      	add	r7, sp, #0
 8006118:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800611e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2200      	movs	r2, #0
 8006124:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2200      	movs	r2, #0
 800612c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006130:	68f8      	ldr	r0, [r7, #12]
 8006132:	f7ff fa43 	bl	80055bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006136:	bf00      	nop
 8006138:	3710      	adds	r7, #16
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}

0800613e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800613e:	b580      	push	{r7, lr}
 8006140:	b088      	sub	sp, #32
 8006142:	af00      	add	r7, sp, #0
 8006144:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	e853 3f00 	ldrex	r3, [r3]
 8006152:	60bb      	str	r3, [r7, #8]
   return(result);
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800615a:	61fb      	str	r3, [r7, #28]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	461a      	mov	r2, r3
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	61bb      	str	r3, [r7, #24]
 8006166:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006168:	6979      	ldr	r1, [r7, #20]
 800616a:	69ba      	ldr	r2, [r7, #24]
 800616c:	e841 2300 	strex	r3, r2, [r1]
 8006170:	613b      	str	r3, [r7, #16]
   return(result);
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d1e6      	bne.n	8006146 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2220      	movs	r2, #32
 800617c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f7ff fa0f 	bl	80055a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800618a:	bf00      	nop
 800618c:	3720      	adds	r7, #32
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}

08006192 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006192:	b580      	push	{r7, lr}
 8006194:	b096      	sub	sp, #88	; 0x58
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80061a0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061a8:	2b22      	cmp	r3, #34	; 0x22
 80061aa:	f040 8094 	bne.w	80062d6 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80061b4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80061b8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80061bc:	b2d9      	uxtb	r1, r3
 80061be:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80061c2:	b2da      	uxtb	r2, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061c8:	400a      	ands	r2, r1
 80061ca:	b2d2      	uxtb	r2, r2
 80061cc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061d2:	1c5a      	adds	r2, r3, #1
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80061de:	b29b      	uxth	r3, r3
 80061e0:	3b01      	subs	r3, #1
 80061e2:	b29a      	uxth	r2, r3
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d179      	bne.n	80062ea <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061fe:	e853 3f00 	ldrex	r3, [r3]
 8006202:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006206:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800620a:	653b      	str	r3, [r7, #80]	; 0x50
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	461a      	mov	r2, r3
 8006212:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006214:	647b      	str	r3, [r7, #68]	; 0x44
 8006216:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006218:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800621a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800621c:	e841 2300 	strex	r3, r2, [r1]
 8006220:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006224:	2b00      	cmp	r3, #0
 8006226:	d1e6      	bne.n	80061f6 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	3308      	adds	r3, #8
 800622e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006232:	e853 3f00 	ldrex	r3, [r3]
 8006236:	623b      	str	r3, [r7, #32]
   return(result);
 8006238:	6a3b      	ldr	r3, [r7, #32]
 800623a:	f023 0301 	bic.w	r3, r3, #1
 800623e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	3308      	adds	r3, #8
 8006246:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006248:	633a      	str	r2, [r7, #48]	; 0x30
 800624a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800624c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800624e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006250:	e841 2300 	strex	r3, r2, [r1]
 8006254:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006258:	2b00      	cmp	r3, #0
 800625a:	d1e5      	bne.n	8006228 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2220      	movs	r2, #32
 8006260:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2200      	movs	r2, #0
 8006266:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800626c:	2b01      	cmp	r3, #1
 800626e:	d12e      	bne.n	80062ce <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	e853 3f00 	ldrex	r3, [r3]
 8006282:	60fb      	str	r3, [r7, #12]
   return(result);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f023 0310 	bic.w	r3, r3, #16
 800628a:	64bb      	str	r3, [r7, #72]	; 0x48
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	461a      	mov	r2, r3
 8006292:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006294:	61fb      	str	r3, [r7, #28]
 8006296:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006298:	69b9      	ldr	r1, [r7, #24]
 800629a:	69fa      	ldr	r2, [r7, #28]
 800629c:	e841 2300 	strex	r3, r2, [r1]
 80062a0:	617b      	str	r3, [r7, #20]
   return(result);
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d1e6      	bne.n	8006276 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	69db      	ldr	r3, [r3, #28]
 80062ae:	f003 0310 	and.w	r3, r3, #16
 80062b2:	2b10      	cmp	r3, #16
 80062b4:	d103      	bne.n	80062be <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	2210      	movs	r2, #16
 80062bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80062c4:	4619      	mov	r1, r3
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f7ff f982 	bl	80055d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80062cc:	e00d      	b.n	80062ea <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f7fa fb06 	bl	80008e0 <HAL_UART_RxCpltCallback>
}
 80062d4:	e009      	b.n	80062ea <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	8b1b      	ldrh	r3, [r3, #24]
 80062dc:	b29a      	uxth	r2, r3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f042 0208 	orr.w	r2, r2, #8
 80062e6:	b292      	uxth	r2, r2
 80062e8:	831a      	strh	r2, [r3, #24]
}
 80062ea:	bf00      	nop
 80062ec:	3758      	adds	r7, #88	; 0x58
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}

080062f2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80062f2:	b580      	push	{r7, lr}
 80062f4:	b096      	sub	sp, #88	; 0x58
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006300:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006308:	2b22      	cmp	r3, #34	; 0x22
 800630a:	f040 8094 	bne.w	8006436 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006314:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800631c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800631e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006322:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006326:	4013      	ands	r3, r2
 8006328:	b29a      	uxth	r2, r3
 800632a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800632c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006332:	1c9a      	adds	r2, r3, #2
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800633e:	b29b      	uxth	r3, r3
 8006340:	3b01      	subs	r3, #1
 8006342:	b29a      	uxth	r2, r3
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006350:	b29b      	uxth	r3, r3
 8006352:	2b00      	cmp	r3, #0
 8006354:	d179      	bne.n	800644a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800635c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800635e:	e853 3f00 	ldrex	r3, [r3]
 8006362:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006366:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800636a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	461a      	mov	r2, r3
 8006372:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006374:	643b      	str	r3, [r7, #64]	; 0x40
 8006376:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006378:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800637a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800637c:	e841 2300 	strex	r3, r2, [r1]
 8006380:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006384:	2b00      	cmp	r3, #0
 8006386:	d1e6      	bne.n	8006356 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	3308      	adds	r3, #8
 800638e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006390:	6a3b      	ldr	r3, [r7, #32]
 8006392:	e853 3f00 	ldrex	r3, [r3]
 8006396:	61fb      	str	r3, [r7, #28]
   return(result);
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	f023 0301 	bic.w	r3, r3, #1
 800639e:	64bb      	str	r3, [r7, #72]	; 0x48
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	3308      	adds	r3, #8
 80063a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063b0:	e841 2300 	strex	r3, r2, [r1]
 80063b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d1e5      	bne.n	8006388 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2220      	movs	r2, #32
 80063c0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d12e      	bne.n	800642e <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	e853 3f00 	ldrex	r3, [r3]
 80063e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	f023 0310 	bic.w	r3, r3, #16
 80063ea:	647b      	str	r3, [r7, #68]	; 0x44
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	461a      	mov	r2, r3
 80063f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063f4:	61bb      	str	r3, [r7, #24]
 80063f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f8:	6979      	ldr	r1, [r7, #20]
 80063fa:	69ba      	ldr	r2, [r7, #24]
 80063fc:	e841 2300 	strex	r3, r2, [r1]
 8006400:	613b      	str	r3, [r7, #16]
   return(result);
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d1e6      	bne.n	80063d6 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	69db      	ldr	r3, [r3, #28]
 800640e:	f003 0310 	and.w	r3, r3, #16
 8006412:	2b10      	cmp	r3, #16
 8006414:	d103      	bne.n	800641e <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2210      	movs	r2, #16
 800641c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006424:	4619      	mov	r1, r3
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f7ff f8d2 	bl	80055d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800642c:	e00d      	b.n	800644a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f7fa fa56 	bl	80008e0 <HAL_UART_RxCpltCallback>
}
 8006434:	e009      	b.n	800644a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	8b1b      	ldrh	r3, [r3, #24]
 800643c:	b29a      	uxth	r2, r3
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f042 0208 	orr.w	r2, r2, #8
 8006446:	b292      	uxth	r2, r2
 8006448:	831a      	strh	r2, [r3, #24]
}
 800644a:	bf00      	nop
 800644c:	3758      	adds	r7, #88	; 0x58
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}

08006452 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006452:	b480      	push	{r7}
 8006454:	b083      	sub	sp, #12
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800645a:	bf00      	nop
 800645c:	370c      	adds	r7, #12
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr

08006466 <memset>:
 8006466:	4402      	add	r2, r0
 8006468:	4603      	mov	r3, r0
 800646a:	4293      	cmp	r3, r2
 800646c:	d100      	bne.n	8006470 <memset+0xa>
 800646e:	4770      	bx	lr
 8006470:	f803 1b01 	strb.w	r1, [r3], #1
 8006474:	e7f9      	b.n	800646a <memset+0x4>
	...

08006478 <__libc_init_array>:
 8006478:	b570      	push	{r4, r5, r6, lr}
 800647a:	4d0d      	ldr	r5, [pc, #52]	; (80064b0 <__libc_init_array+0x38>)
 800647c:	4c0d      	ldr	r4, [pc, #52]	; (80064b4 <__libc_init_array+0x3c>)
 800647e:	1b64      	subs	r4, r4, r5
 8006480:	10a4      	asrs	r4, r4, #2
 8006482:	2600      	movs	r6, #0
 8006484:	42a6      	cmp	r6, r4
 8006486:	d109      	bne.n	800649c <__libc_init_array+0x24>
 8006488:	4d0b      	ldr	r5, [pc, #44]	; (80064b8 <__libc_init_array+0x40>)
 800648a:	4c0c      	ldr	r4, [pc, #48]	; (80064bc <__libc_init_array+0x44>)
 800648c:	f000 f818 	bl	80064c0 <_init>
 8006490:	1b64      	subs	r4, r4, r5
 8006492:	10a4      	asrs	r4, r4, #2
 8006494:	2600      	movs	r6, #0
 8006496:	42a6      	cmp	r6, r4
 8006498:	d105      	bne.n	80064a6 <__libc_init_array+0x2e>
 800649a:	bd70      	pop	{r4, r5, r6, pc}
 800649c:	f855 3b04 	ldr.w	r3, [r5], #4
 80064a0:	4798      	blx	r3
 80064a2:	3601      	adds	r6, #1
 80064a4:	e7ee      	b.n	8006484 <__libc_init_array+0xc>
 80064a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80064aa:	4798      	blx	r3
 80064ac:	3601      	adds	r6, #1
 80064ae:	e7f2      	b.n	8006496 <__libc_init_array+0x1e>
 80064b0:	08006528 	.word	0x08006528
 80064b4:	08006528 	.word	0x08006528
 80064b8:	08006528 	.word	0x08006528
 80064bc:	0800652c 	.word	0x0800652c

080064c0 <_init>:
 80064c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064c2:	bf00      	nop
 80064c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064c6:	bc08      	pop	{r3}
 80064c8:	469e      	mov	lr, r3
 80064ca:	4770      	bx	lr

080064cc <_fini>:
 80064cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ce:	bf00      	nop
 80064d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064d2:	bc08      	pop	{r3}
 80064d4:	469e      	mov	lr, r3
 80064d6:	4770      	bx	lr
