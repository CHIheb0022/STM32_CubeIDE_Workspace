
Real_Time_Plotting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f44  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  080050d4  080050d4  000150d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005234  08005234  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08005234  08005234  00015234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800523c  0800523c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800523c  0800523c  0001523c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005240  08005240  00015240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005244  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  20000068  080052ac  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000294  080052ac  00020294  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c4c1  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f78  00000000  00000000  0002c59c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a60  00000000  00000000  0002e518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007e4  00000000  00000000  0002ef78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000269b4  00000000  00000000  0002f75c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d00c  00000000  00000000  00056110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e965b  00000000  00000000  0006311c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003434  00000000  00000000  0014c778  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  0014fbac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080050bc 	.word	0x080050bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080050bc 	.word	0x080050bc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b086      	sub	sp, #24
 8000580:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000582:	f000 fb19 	bl	8000bb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000586:	f000 f8b9 	bl	80006fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058a:	f000 f939 	bl	8000800 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800058e:	f000 f907 	bl	80007a0 <MX_USART2_UART_Init>


  /* USER CODE BEGIN 2 */

  bool data_stream_active = false;
 8000592:	2300      	movs	r3, #0
 8000594:	73fb      	strb	r3, [r7, #15]

  // Read data from the PC (Python code request).
  while (1) {
      HAL_UART_Receive(&huart2, (uint8_t *)Rx_Buffer, sizeof(Rx_Buffer), 100);
 8000596:	2364      	movs	r3, #100	; 0x64
 8000598:	2201      	movs	r2, #1
 800059a:	4951      	ldr	r1, [pc, #324]	; (80006e0 <main+0x164>)
 800059c:	4851      	ldr	r0, [pc, #324]	; (80006e4 <main+0x168>)
 800059e:	f002 fae7 	bl	8002b70 <HAL_UART_Receive>
      // Check the request
      if (Rx_Buffer[0] == 103) { // if the user enters the 'g' character
 80005a2:	4b4f      	ldr	r3, [pc, #316]	; (80006e0 <main+0x164>)
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	2b67      	cmp	r3, #103	; 0x67
 80005a8:	d11d      	bne.n	80005e6 <main+0x6a>
          if (!data_stream_active) {
 80005aa:	7bfb      	ldrb	r3, [r7, #15]
 80005ac:	f083 0301 	eor.w	r3, r3, #1
 80005b0:	b2db      	uxtb	r3, r3
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d00c      	beq.n	80005d0 <main+0x54>
              //sprintf(Tx_Buffer, "Data stream initiated\n"); python script will handle logging infos to the user.
              HAL_UART_Transmit(&huart2, (uint8_t *)Tx_Buffer, strlen(Tx_Buffer), 100);
 80005b6:	484c      	ldr	r0, [pc, #304]	; (80006e8 <main+0x16c>)
 80005b8:	f7ff fe0a 	bl	80001d0 <strlen>
 80005bc:	4603      	mov	r3, r0
 80005be:	b29a      	uxth	r2, r3
 80005c0:	2364      	movs	r3, #100	; 0x64
 80005c2:	4949      	ldr	r1, [pc, #292]	; (80006e8 <main+0x16c>)
 80005c4:	4847      	ldr	r0, [pc, #284]	; (80006e4 <main+0x168>)
 80005c6:	f002 fa3f 	bl	8002a48 <HAL_UART_Transmit>
              data_stream_active = true;
 80005ca:	2301      	movs	r3, #1
 80005cc:	73fb      	strb	r3, [r7, #15]
 80005ce:	e082      	b.n	80006d6 <main+0x15a>
          } else {
              //sprintf(Tx_Buffer, "Data stream already active\n");
              HAL_UART_Transmit(&huart2, (uint8_t *)Tx_Buffer, strlen(Tx_Buffer), 100);
 80005d0:	4845      	ldr	r0, [pc, #276]	; (80006e8 <main+0x16c>)
 80005d2:	f7ff fdfd 	bl	80001d0 <strlen>
 80005d6:	4603      	mov	r3, r0
 80005d8:	b29a      	uxth	r2, r3
 80005da:	2364      	movs	r3, #100	; 0x64
 80005dc:	4942      	ldr	r1, [pc, #264]	; (80006e8 <main+0x16c>)
 80005de:	4841      	ldr	r0, [pc, #260]	; (80006e4 <main+0x168>)
 80005e0:	f002 fa32 	bl	8002a48 <HAL_UART_Transmit>
 80005e4:	e077      	b.n	80006d6 <main+0x15a>
          }
      } else if (Rx_Buffer[0] == 115) { // if the user enters the 's' character
 80005e6:	4b3e      	ldr	r3, [pc, #248]	; (80006e0 <main+0x164>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	2b73      	cmp	r3, #115	; 0x73
 80005ec:	d11e      	bne.n	800062c <main+0xb0>
          if (data_stream_active) {
 80005ee:	7bfb      	ldrb	r3, [r7, #15]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d00c      	beq.n	800060e <main+0x92>
              //sprintf(Tx_Buffer, "Data stream stopped\n");
              HAL_UART_Transmit(&huart2, (uint8_t *)Tx_Buffer, strlen(Tx_Buffer), 100);
 80005f4:	483c      	ldr	r0, [pc, #240]	; (80006e8 <main+0x16c>)
 80005f6:	f7ff fdeb 	bl	80001d0 <strlen>
 80005fa:	4603      	mov	r3, r0
 80005fc:	b29a      	uxth	r2, r3
 80005fe:	2364      	movs	r3, #100	; 0x64
 8000600:	4939      	ldr	r1, [pc, #228]	; (80006e8 <main+0x16c>)
 8000602:	4838      	ldr	r0, [pc, #224]	; (80006e4 <main+0x168>)
 8000604:	f002 fa20 	bl	8002a48 <HAL_UART_Transmit>
              data_stream_active = false;
 8000608:	2300      	movs	r3, #0
 800060a:	73fb      	strb	r3, [r7, #15]
 800060c:	e063      	b.n	80006d6 <main+0x15a>
          } else {
              sprintf(Tx_Buffer, "Data stream not active\n");
 800060e:	4937      	ldr	r1, [pc, #220]	; (80006ec <main+0x170>)
 8000610:	4835      	ldr	r0, [pc, #212]	; (80006e8 <main+0x16c>)
 8000612:	f003 fc95 	bl	8003f40 <siprintf>
              HAL_UART_Transmit(&huart2, (uint8_t *)Tx_Buffer, strlen(Tx_Buffer), 100);
 8000616:	4834      	ldr	r0, [pc, #208]	; (80006e8 <main+0x16c>)
 8000618:	f7ff fdda 	bl	80001d0 <strlen>
 800061c:	4603      	mov	r3, r0
 800061e:	b29a      	uxth	r2, r3
 8000620:	2364      	movs	r3, #100	; 0x64
 8000622:	4931      	ldr	r1, [pc, #196]	; (80006e8 <main+0x16c>)
 8000624:	482f      	ldr	r0, [pc, #188]	; (80006e4 <main+0x168>)
 8000626:	f002 fa0f 	bl	8002a48 <HAL_UART_Transmit>
 800062a:	e054      	b.n	80006d6 <main+0x15a>
          }
      } else if (Rx_Buffer[0] != '\0') { // if it's not 'g' or 's' and it's not empty.
 800062c:	4b2c      	ldr	r3, [pc, #176]	; (80006e0 <main+0x164>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d050      	beq.n	80006d6 <main+0x15a>
          // Handle invalid request.
          sprintf(Tx_Buffer, "Invalid Request\n");
 8000634:	492e      	ldr	r1, [pc, #184]	; (80006f0 <main+0x174>)
 8000636:	482c      	ldr	r0, [pc, #176]	; (80006e8 <main+0x16c>)
 8000638:	f003 fc82 	bl	8003f40 <siprintf>
          HAL_UART_Transmit(&huart2, (uint8_t *)Tx_Buffer, strlen(Tx_Buffer), 100);
 800063c:	482a      	ldr	r0, [pc, #168]	; (80006e8 <main+0x16c>)
 800063e:	f7ff fdc7 	bl	80001d0 <strlen>
 8000642:	4603      	mov	r3, r0
 8000644:	b29a      	uxth	r2, r3
 8000646:	2364      	movs	r3, #100	; 0x64
 8000648:	4927      	ldr	r1, [pc, #156]	; (80006e8 <main+0x16c>)
 800064a:	4826      	ldr	r0, [pc, #152]	; (80006e4 <main+0x168>)
 800064c:	f002 f9fc 	bl	8002a48 <HAL_UART_Transmit>
      }

      // If the data stream is active, proceed with data transmission
      while (data_stream_active) {//This while loop must be transformed as a task (Welcome to freeRtos). As well as the outer while loop.
 8000650:	e041      	b.n	80006d6 <main+0x15a>
          // Generate random values for x and y
          int x = rand() % 1000; // Generate a random value between 0 and 999 for x
 8000652:	f003 fb75 	bl	8003d40 <rand>
 8000656:	4603      	mov	r3, r0
 8000658:	4a26      	ldr	r2, [pc, #152]	; (80006f4 <main+0x178>)
 800065a:	fb82 1203 	smull	r1, r2, r2, r3
 800065e:	1191      	asrs	r1, r2, #6
 8000660:	17da      	asrs	r2, r3, #31
 8000662:	1a8a      	subs	r2, r1, r2
 8000664:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000668:	fb01 f202 	mul.w	r2, r1, r2
 800066c:	1a9b      	subs	r3, r3, r2
 800066e:	60bb      	str	r3, [r7, #8]
          int y = rand() % 1000; // Generate a random value between 0 and 999 for y
 8000670:	f003 fb66 	bl	8003d40 <rand>
 8000674:	4603      	mov	r3, r0
 8000676:	4a1f      	ldr	r2, [pc, #124]	; (80006f4 <main+0x178>)
 8000678:	fb82 1203 	smull	r1, r2, r2, r3
 800067c:	1191      	asrs	r1, r2, #6
 800067e:	17da      	asrs	r2, r3, #31
 8000680:	1a8a      	subs	r2, r1, r2
 8000682:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000686:	fb01 f202 	mul.w	r2, r1, r2
 800068a:	1a9b      	subs	r3, r3, r2
 800068c:	607b      	str	r3, [r7, #4]
          int z = rand() % 1000; // Generate a random value between 0 and 999 for y
 800068e:	f003 fb57 	bl	8003d40 <rand>
 8000692:	4603      	mov	r3, r0
 8000694:	4a17      	ldr	r2, [pc, #92]	; (80006f4 <main+0x178>)
 8000696:	fb82 1203 	smull	r1, r2, r2, r3
 800069a:	1191      	asrs	r1, r2, #6
 800069c:	17da      	asrs	r2, r3, #31
 800069e:	1a8a      	subs	r2, r1, r2
 80006a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006a4:	fb01 f202 	mul.w	r2, r1, r2
 80006a8:	1a9b      	subs	r3, r3, r2
 80006aa:	603b      	str	r3, [r7, #0]

          // Create a string with the format "x,y,z\n"
          sprintf(Tx_Buffer, "%d,%d,%d\n", x, y,z);
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	9300      	str	r3, [sp, #0]
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	68ba      	ldr	r2, [r7, #8]
 80006b4:	4910      	ldr	r1, [pc, #64]	; (80006f8 <main+0x17c>)
 80006b6:	480c      	ldr	r0, [pc, #48]	; (80006e8 <main+0x16c>)
 80006b8:	f003 fc42 	bl	8003f40 <siprintf>

          // Transmit the string over UART
          HAL_UART_Transmit(&huart2, (uint8_t *)Tx_Buffer, strlen(Tx_Buffer), 100);
 80006bc:	480a      	ldr	r0, [pc, #40]	; (80006e8 <main+0x16c>)
 80006be:	f7ff fd87 	bl	80001d0 <strlen>
 80006c2:	4603      	mov	r3, r0
 80006c4:	b29a      	uxth	r2, r3
 80006c6:	2364      	movs	r3, #100	; 0x64
 80006c8:	4907      	ldr	r1, [pc, #28]	; (80006e8 <main+0x16c>)
 80006ca:	4806      	ldr	r0, [pc, #24]	; (80006e4 <main+0x168>)
 80006cc:	f002 f9bc 	bl	8002a48 <HAL_UART_Transmit>

          // Introduce some delay before the next transmission (adjust the value based on your requirements)
          HAL_Delay(100);
 80006d0:	2064      	movs	r0, #100	; 0x64
 80006d2:	f000 faed 	bl	8000cb0 <HAL_Delay>
      while (data_stream_active) {//This while loop must be transformed as a task (Welcome to freeRtos). As well as the outer while loop.
 80006d6:	7bfb      	ldrb	r3, [r7, #15]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d1ba      	bne.n	8000652 <main+0xd6>
      HAL_UART_Receive(&huart2, (uint8_t *)Rx_Buffer, sizeof(Rx_Buffer), 100);
 80006dc:	e75b      	b.n	8000596 <main+0x1a>
 80006de:	bf00      	nop
 80006e0:	2000013c 	.word	0x2000013c
 80006e4:	20000084 	.word	0x20000084
 80006e8:	20000108 	.word	0x20000108
 80006ec:	080050d4 	.word	0x080050d4
 80006f0:	080050ec 	.word	0x080050ec
 80006f4:	10624dd3 	.word	0x10624dd3
 80006f8:	08005100 	.word	0x08005100

080006fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b096      	sub	sp, #88	; 0x58
 8000700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000702:	f107 0314 	add.w	r3, r7, #20
 8000706:	2244      	movs	r2, #68	; 0x44
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f003 fc7b 	bl	8004006 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000710:	463b      	mov	r3, r7
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]
 800071a:	60da      	str	r2, [r3, #12]
 800071c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800071e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000722:	f000 fe31 	bl	8001388 <HAL_PWREx_ControlVoltageScaling>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800072c:	f000 f880 	bl	8000830 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000730:	2302      	movs	r3, #2
 8000732:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000734:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000738:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800073a:	2310      	movs	r3, #16
 800073c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073e:	2302      	movs	r3, #2
 8000740:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000742:	2302      	movs	r3, #2
 8000744:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000746:	2301      	movs	r3, #1
 8000748:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800074a:	230a      	movs	r3, #10
 800074c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800074e:	2307      	movs	r3, #7
 8000750:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000752:	2302      	movs	r3, #2
 8000754:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000756:	2302      	movs	r3, #2
 8000758:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075a:	f107 0314 	add.w	r3, r7, #20
 800075e:	4618      	mov	r0, r3
 8000760:	f000 fe68 	bl	8001434 <HAL_RCC_OscConfig>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800076a:	f000 f861 	bl	8000830 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076e:	230f      	movs	r3, #15
 8000770:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000772:	2303      	movs	r3, #3
 8000774:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000776:	2300      	movs	r3, #0
 8000778:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800077a:	2300      	movs	r3, #0
 800077c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800077e:	2300      	movs	r3, #0
 8000780:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000782:	463b      	mov	r3, r7
 8000784:	2104      	movs	r1, #4
 8000786:	4618      	mov	r0, r3
 8000788:	f001 fa30 	bl	8001bec <HAL_RCC_ClockConfig>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000792:	f000 f84d 	bl	8000830 <Error_Handler>
  }
}
 8000796:	bf00      	nop
 8000798:	3758      	adds	r7, #88	; 0x58
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
	...

080007a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007a4:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007a6:	4a15      	ldr	r2, [pc, #84]	; (80007fc <MX_USART2_UART_Init+0x5c>)
 80007a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80007aa:	4b13      	ldr	r3, [pc, #76]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007ac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80007b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007b2:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007b8:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007c4:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007c6:	220c      	movs	r2, #12
 80007c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ca:	4b0b      	ldr	r3, [pc, #44]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d0:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007d6:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007d8:	2200      	movs	r2, #0
 80007da:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007de:	2200      	movs	r2, #0
 80007e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007e2:	4805      	ldr	r0, [pc, #20]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007e4:	f002 f8e2 	bl	80029ac <HAL_UART_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007ee:	f000 f81f 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000084 	.word	0x20000084
 80007fc:	40004400 	.word	0x40004400

08000800 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000806:	4b09      	ldr	r3, [pc, #36]	; (800082c <MX_GPIO_Init+0x2c>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080a:	4a08      	ldr	r2, [pc, #32]	; (800082c <MX_GPIO_Init+0x2c>)
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000812:	4b06      	ldr	r3, [pc, #24]	; (800082c <MX_GPIO_Init+0x2c>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800081e:	bf00      	nop
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	40021000 	.word	0x40021000

08000830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000834:	b672      	cpsid	i
}
 8000836:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000838:	e7fe      	b.n	8000838 <Error_Handler+0x8>
	...

0800083c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000842:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <HAL_MspInit+0x44>)
 8000844:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000846:	4a0e      	ldr	r2, [pc, #56]	; (8000880 <HAL_MspInit+0x44>)
 8000848:	f043 0301 	orr.w	r3, r3, #1
 800084c:	6613      	str	r3, [r2, #96]	; 0x60
 800084e:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <HAL_MspInit+0x44>)
 8000850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800085a:	4b09      	ldr	r3, [pc, #36]	; (8000880 <HAL_MspInit+0x44>)
 800085c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800085e:	4a08      	ldr	r2, [pc, #32]	; (8000880 <HAL_MspInit+0x44>)
 8000860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000864:	6593      	str	r3, [r2, #88]	; 0x58
 8000866:	4b06      	ldr	r3, [pc, #24]	; (8000880 <HAL_MspInit+0x44>)
 8000868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800086a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800086e:	603b      	str	r3, [r7, #0]
 8000870:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000872:	bf00      	nop
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	40021000 	.word	0x40021000

08000884 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b0ac      	sub	sp, #176	; 0xb0
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
 800089a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800089c:	f107 0314 	add.w	r3, r7, #20
 80008a0:	2288      	movs	r2, #136	; 0x88
 80008a2:	2100      	movs	r1, #0
 80008a4:	4618      	mov	r0, r3
 80008a6:	f003 fbae 	bl	8004006 <memset>
  if(huart->Instance==USART2)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4a25      	ldr	r2, [pc, #148]	; (8000944 <HAL_UART_MspInit+0xc0>)
 80008b0:	4293      	cmp	r3, r2
 80008b2:	d143      	bne.n	800093c <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008b4:	2302      	movs	r3, #2
 80008b6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008b8:	2300      	movs	r3, #0
 80008ba:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008bc:	f107 0314 	add.w	r3, r7, #20
 80008c0:	4618      	mov	r0, r3
 80008c2:	f001 fbb7 	bl	8002034 <HAL_RCCEx_PeriphCLKConfig>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80008cc:	f7ff ffb0 	bl	8000830 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008d0:	4b1d      	ldr	r3, [pc, #116]	; (8000948 <HAL_UART_MspInit+0xc4>)
 80008d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008d4:	4a1c      	ldr	r2, [pc, #112]	; (8000948 <HAL_UART_MspInit+0xc4>)
 80008d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008da:	6593      	str	r3, [r2, #88]	; 0x58
 80008dc:	4b1a      	ldr	r3, [pc, #104]	; (8000948 <HAL_UART_MspInit+0xc4>)
 80008de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008e4:	613b      	str	r3, [r7, #16]
 80008e6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e8:	4b17      	ldr	r3, [pc, #92]	; (8000948 <HAL_UART_MspInit+0xc4>)
 80008ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ec:	4a16      	ldr	r2, [pc, #88]	; (8000948 <HAL_UART_MspInit+0xc4>)
 80008ee:	f043 0301 	orr.w	r3, r3, #1
 80008f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008f4:	4b14      	ldr	r3, [pc, #80]	; (8000948 <HAL_UART_MspInit+0xc4>)
 80008f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f8:	f003 0301 	and.w	r3, r3, #1
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000900:	230c      	movs	r3, #12
 8000902:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000906:	2302      	movs	r3, #2
 8000908:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000912:	2303      	movs	r3, #3
 8000914:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000918:	2307      	movs	r3, #7
 800091a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000922:	4619      	mov	r1, r3
 8000924:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000928:	f000 fb76 	bl	8001018 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800092c:	2200      	movs	r2, #0
 800092e:	2100      	movs	r1, #0
 8000930:	2026      	movs	r0, #38	; 0x26
 8000932:	f000 fabc 	bl	8000eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000936:	2026      	movs	r0, #38	; 0x26
 8000938:	f000 fad5 	bl	8000ee6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800093c:	bf00      	nop
 800093e:	37b0      	adds	r7, #176	; 0xb0
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40004400 	.word	0x40004400
 8000948:	40021000 	.word	0x40021000

0800094c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000950:	e7fe      	b.n	8000950 <NMI_Handler+0x4>

08000952 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000956:	e7fe      	b.n	8000956 <HardFault_Handler+0x4>

08000958 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800095c:	e7fe      	b.n	800095c <MemManage_Handler+0x4>

0800095e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000962:	e7fe      	b.n	8000962 <BusFault_Handler+0x4>

08000964 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000968:	e7fe      	b.n	8000968 <UsageFault_Handler+0x4>

0800096a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr

08000986 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr

08000994 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000998:	f000 f96a 	bl	8000c70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}

080009a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009a4:	4802      	ldr	r0, [pc, #8]	; (80009b0 <USART2_IRQHandler+0x10>)
 80009a6:	f002 f9b5 	bl	8002d14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20000084 	.word	0x20000084

080009b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  return 1;
 80009b8:	2301      	movs	r3, #1
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr

080009c4 <_kill>:

int _kill(int pid, int sig)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80009ce:	f003 fb69 	bl	80040a4 <__errno>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2216      	movs	r2, #22
 80009d6:	601a      	str	r2, [r3, #0]
  return -1;
 80009d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3708      	adds	r7, #8
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <_exit>:

void _exit (int status)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80009ec:	f04f 31ff 	mov.w	r1, #4294967295
 80009f0:	6878      	ldr	r0, [r7, #4]
 80009f2:	f7ff ffe7 	bl	80009c4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80009f6:	e7fe      	b.n	80009f6 <_exit+0x12>

080009f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b086      	sub	sp, #24
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	60f8      	str	r0, [r7, #12]
 8000a00:	60b9      	str	r1, [r7, #8]
 8000a02:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a04:	2300      	movs	r3, #0
 8000a06:	617b      	str	r3, [r7, #20]
 8000a08:	e00a      	b.n	8000a20 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a0a:	f3af 8000 	nop.w
 8000a0e:	4601      	mov	r1, r0
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	1c5a      	adds	r2, r3, #1
 8000a14:	60ba      	str	r2, [r7, #8]
 8000a16:	b2ca      	uxtb	r2, r1
 8000a18:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	617b      	str	r3, [r7, #20]
 8000a20:	697a      	ldr	r2, [r7, #20]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	dbf0      	blt.n	8000a0a <_read+0x12>
  }

  return len;
 8000a28:	687b      	ldr	r3, [r7, #4]
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3718      	adds	r7, #24
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a32:	b580      	push	{r7, lr}
 8000a34:	b086      	sub	sp, #24
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	60f8      	str	r0, [r7, #12]
 8000a3a:	60b9      	str	r1, [r7, #8]
 8000a3c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a3e:	2300      	movs	r3, #0
 8000a40:	617b      	str	r3, [r7, #20]
 8000a42:	e009      	b.n	8000a58 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	1c5a      	adds	r2, r3, #1
 8000a48:	60ba      	str	r2, [r7, #8]
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	3301      	adds	r3, #1
 8000a56:	617b      	str	r3, [r7, #20]
 8000a58:	697a      	ldr	r2, [r7, #20]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	dbf1      	blt.n	8000a44 <_write+0x12>
  }
  return len;
 8000a60:	687b      	ldr	r3, [r7, #4]
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3718      	adds	r7, #24
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}

08000a6a <_close>:

int _close(int file)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	b083      	sub	sp, #12
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr

08000a82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a82:	b480      	push	{r7}
 8000a84:	b083      	sub	sp, #12
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]
 8000a8a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a92:	605a      	str	r2, [r3, #4]
  return 0;
 8000a94:	2300      	movs	r3, #0
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	370c      	adds	r7, #12
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr

08000aa2 <_isatty>:

int _isatty(int file)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	b083      	sub	sp, #12
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000aaa:	2301      	movs	r3, #1
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	60f8      	str	r0, [r7, #12]
 8000ac0:	60b9      	str	r1, [r7, #8]
 8000ac2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ac4:	2300      	movs	r3, #0
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3714      	adds	r7, #20
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
	...

08000ad4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b086      	sub	sp, #24
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000adc:	4a14      	ldr	r2, [pc, #80]	; (8000b30 <_sbrk+0x5c>)
 8000ade:	4b15      	ldr	r3, [pc, #84]	; (8000b34 <_sbrk+0x60>)
 8000ae0:	1ad3      	subs	r3, r2, r3
 8000ae2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ae8:	4b13      	ldr	r3, [pc, #76]	; (8000b38 <_sbrk+0x64>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d102      	bne.n	8000af6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000af0:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <_sbrk+0x64>)
 8000af2:	4a12      	ldr	r2, [pc, #72]	; (8000b3c <_sbrk+0x68>)
 8000af4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000af6:	4b10      	ldr	r3, [pc, #64]	; (8000b38 <_sbrk+0x64>)
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4413      	add	r3, r2
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	d207      	bcs.n	8000b14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b04:	f003 face 	bl	80040a4 <__errno>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	220c      	movs	r2, #12
 8000b0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b12:	e009      	b.n	8000b28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b14:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <_sbrk+0x64>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b1a:	4b07      	ldr	r3, [pc, #28]	; (8000b38 <_sbrk+0x64>)
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4413      	add	r3, r2
 8000b22:	4a05      	ldr	r2, [pc, #20]	; (8000b38 <_sbrk+0x64>)
 8000b24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b26:	68fb      	ldr	r3, [r7, #12]
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3718      	adds	r7, #24
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20018000 	.word	0x20018000
 8000b34:	00000400 	.word	0x00000400
 8000b38:	20000140 	.word	0x20000140
 8000b3c:	20000298 	.word	0x20000298

08000b40 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <SystemInit+0x20>)
 8000b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b4a:	4a05      	ldr	r2, [pc, #20]	; (8000b60 <SystemInit+0x20>)
 8000b4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b9c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b68:	f7ff ffea 	bl	8000b40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b6c:	480c      	ldr	r0, [pc, #48]	; (8000ba0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b6e:	490d      	ldr	r1, [pc, #52]	; (8000ba4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b70:	4a0d      	ldr	r2, [pc, #52]	; (8000ba8 <LoopForever+0xe>)
  movs r3, #0
 8000b72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b74:	e002      	b.n	8000b7c <LoopCopyDataInit>

08000b76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b7a:	3304      	adds	r3, #4

08000b7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b80:	d3f9      	bcc.n	8000b76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b82:	4a0a      	ldr	r2, [pc, #40]	; (8000bac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b84:	4c0a      	ldr	r4, [pc, #40]	; (8000bb0 <LoopForever+0x16>)
  movs r3, #0
 8000b86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b88:	e001      	b.n	8000b8e <LoopFillZerobss>

08000b8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b8c:	3204      	adds	r2, #4

08000b8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b90:	d3fb      	bcc.n	8000b8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b92:	f003 fa8d 	bl	80040b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b96:	f7ff fcf1 	bl	800057c <main>

08000b9a <LoopForever>:

LoopForever:
    b LoopForever
 8000b9a:	e7fe      	b.n	8000b9a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b9c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ba0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ba4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000ba8:	08005244 	.word	0x08005244
  ldr r2, =_sbss
 8000bac:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000bb0:	20000294 	.word	0x20000294

08000bb4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bb4:	e7fe      	b.n	8000bb4 <ADC1_2_IRQHandler>
	...

08000bb8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bc2:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <HAL_Init+0x3c>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4a0b      	ldr	r2, [pc, #44]	; (8000bf4 <HAL_Init+0x3c>)
 8000bc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bcc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bce:	2003      	movs	r0, #3
 8000bd0:	f000 f962 	bl	8000e98 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bd4:	2000      	movs	r0, #0
 8000bd6:	f000 f80f 	bl	8000bf8 <HAL_InitTick>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d002      	beq.n	8000be6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000be0:	2301      	movs	r3, #1
 8000be2:	71fb      	strb	r3, [r7, #7]
 8000be4:	e001      	b.n	8000bea <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000be6:	f7ff fe29 	bl	800083c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bea:	79fb      	ldrb	r3, [r7, #7]
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40022000 	.word	0x40022000

08000bf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c00:	2300      	movs	r3, #0
 8000c02:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c04:	4b17      	ldr	r3, [pc, #92]	; (8000c64 <HAL_InitTick+0x6c>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d023      	beq.n	8000c54 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c0c:	4b16      	ldr	r3, [pc, #88]	; (8000c68 <HAL_InitTick+0x70>)
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	4b14      	ldr	r3, [pc, #80]	; (8000c64 <HAL_InitTick+0x6c>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	4619      	mov	r1, r3
 8000c16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c22:	4618      	mov	r0, r3
 8000c24:	f000 f96d 	bl	8000f02 <HAL_SYSTICK_Config>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d10f      	bne.n	8000c4e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2b0f      	cmp	r3, #15
 8000c32:	d809      	bhi.n	8000c48 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c34:	2200      	movs	r2, #0
 8000c36:	6879      	ldr	r1, [r7, #4]
 8000c38:	f04f 30ff 	mov.w	r0, #4294967295
 8000c3c:	f000 f937 	bl	8000eae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c40:	4a0a      	ldr	r2, [pc, #40]	; (8000c6c <HAL_InitTick+0x74>)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6013      	str	r3, [r2, #0]
 8000c46:	e007      	b.n	8000c58 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	73fb      	strb	r3, [r7, #15]
 8000c4c:	e004      	b.n	8000c58 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	73fb      	strb	r3, [r7, #15]
 8000c52:	e001      	b.n	8000c58 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c54:	2301      	movs	r3, #1
 8000c56:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20000008 	.word	0x20000008
 8000c68:	20000000 	.word	0x20000000
 8000c6c:	20000004 	.word	0x20000004

08000c70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c74:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <HAL_IncTick+0x20>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	461a      	mov	r2, r3
 8000c7a:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <HAL_IncTick+0x24>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4413      	add	r3, r2
 8000c80:	4a04      	ldr	r2, [pc, #16]	; (8000c94 <HAL_IncTick+0x24>)
 8000c82:	6013      	str	r3, [r2, #0]
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	20000008 	.word	0x20000008
 8000c94:	20000144 	.word	0x20000144

08000c98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c9c:	4b03      	ldr	r3, [pc, #12]	; (8000cac <HAL_GetTick+0x14>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	20000144 	.word	0x20000144

08000cb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cb8:	f7ff ffee 	bl	8000c98 <HAL_GetTick>
 8000cbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cc8:	d005      	beq.n	8000cd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000cca:	4b0a      	ldr	r3, [pc, #40]	; (8000cf4 <HAL_Delay+0x44>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	461a      	mov	r2, r3
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cd6:	bf00      	nop
 8000cd8:	f7ff ffde 	bl	8000c98 <HAL_GetTick>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	68fa      	ldr	r2, [r7, #12]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d8f7      	bhi.n	8000cd8 <HAL_Delay+0x28>
  {
  }
}
 8000ce8:	bf00      	nop
 8000cea:	bf00      	nop
 8000cec:	3710      	adds	r7, #16
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000008 	.word	0x20000008

08000cf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b085      	sub	sp, #20
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	f003 0307 	and.w	r3, r3, #7
 8000d06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d08:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__NVIC_SetPriorityGrouping+0x44>)
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d0e:	68ba      	ldr	r2, [r7, #8]
 8000d10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d14:	4013      	ands	r3, r2
 8000d16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d2a:	4a04      	ldr	r2, [pc, #16]	; (8000d3c <__NVIC_SetPriorityGrouping+0x44>)
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	60d3      	str	r3, [r2, #12]
}
 8000d30:	bf00      	nop
 8000d32:	3714      	adds	r7, #20
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d44:	4b04      	ldr	r3, [pc, #16]	; (8000d58 <__NVIC_GetPriorityGrouping+0x18>)
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	0a1b      	lsrs	r3, r3, #8
 8000d4a:	f003 0307 	and.w	r3, r3, #7
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	db0b      	blt.n	8000d86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	f003 021f 	and.w	r2, r3, #31
 8000d74:	4907      	ldr	r1, [pc, #28]	; (8000d94 <__NVIC_EnableIRQ+0x38>)
 8000d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7a:	095b      	lsrs	r3, r3, #5
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d86:	bf00      	nop
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	e000e100 	.word	0xe000e100

08000d98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	6039      	str	r1, [r7, #0]
 8000da2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	db0a      	blt.n	8000dc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	b2da      	uxtb	r2, r3
 8000db0:	490c      	ldr	r1, [pc, #48]	; (8000de4 <__NVIC_SetPriority+0x4c>)
 8000db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db6:	0112      	lsls	r2, r2, #4
 8000db8:	b2d2      	uxtb	r2, r2
 8000dba:	440b      	add	r3, r1
 8000dbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dc0:	e00a      	b.n	8000dd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	4908      	ldr	r1, [pc, #32]	; (8000de8 <__NVIC_SetPriority+0x50>)
 8000dc8:	79fb      	ldrb	r3, [r7, #7]
 8000dca:	f003 030f 	and.w	r3, r3, #15
 8000dce:	3b04      	subs	r3, #4
 8000dd0:	0112      	lsls	r2, r2, #4
 8000dd2:	b2d2      	uxtb	r2, r2
 8000dd4:	440b      	add	r3, r1
 8000dd6:	761a      	strb	r2, [r3, #24]
}
 8000dd8:	bf00      	nop
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	e000e100 	.word	0xe000e100
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b089      	sub	sp, #36	; 0x24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	f003 0307 	and.w	r3, r3, #7
 8000dfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	f1c3 0307 	rsb	r3, r3, #7
 8000e06:	2b04      	cmp	r3, #4
 8000e08:	bf28      	it	cs
 8000e0a:	2304      	movcs	r3, #4
 8000e0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	3304      	adds	r3, #4
 8000e12:	2b06      	cmp	r3, #6
 8000e14:	d902      	bls.n	8000e1c <NVIC_EncodePriority+0x30>
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	3b03      	subs	r3, #3
 8000e1a:	e000      	b.n	8000e1e <NVIC_EncodePriority+0x32>
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e20:	f04f 32ff 	mov.w	r2, #4294967295
 8000e24:	69bb      	ldr	r3, [r7, #24]
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	43da      	mvns	r2, r3
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	401a      	ands	r2, r3
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e34:	f04f 31ff 	mov.w	r1, #4294967295
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e3e:	43d9      	mvns	r1, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e44:	4313      	orrs	r3, r2
         );
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3724      	adds	r7, #36	; 0x24
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
	...

08000e54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e64:	d301      	bcc.n	8000e6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e66:	2301      	movs	r3, #1
 8000e68:	e00f      	b.n	8000e8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e6a:	4a0a      	ldr	r2, [pc, #40]	; (8000e94 <SysTick_Config+0x40>)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e72:	210f      	movs	r1, #15
 8000e74:	f04f 30ff 	mov.w	r0, #4294967295
 8000e78:	f7ff ff8e 	bl	8000d98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e7c:	4b05      	ldr	r3, [pc, #20]	; (8000e94 <SysTick_Config+0x40>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e82:	4b04      	ldr	r3, [pc, #16]	; (8000e94 <SysTick_Config+0x40>)
 8000e84:	2207      	movs	r2, #7
 8000e86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	e000e010 	.word	0xe000e010

08000e98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f7ff ff29 	bl	8000cf8 <__NVIC_SetPriorityGrouping>
}
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b086      	sub	sp, #24
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	60b9      	str	r1, [r7, #8]
 8000eb8:	607a      	str	r2, [r7, #4]
 8000eba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ec0:	f7ff ff3e 	bl	8000d40 <__NVIC_GetPriorityGrouping>
 8000ec4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ec6:	687a      	ldr	r2, [r7, #4]
 8000ec8:	68b9      	ldr	r1, [r7, #8]
 8000eca:	6978      	ldr	r0, [r7, #20]
 8000ecc:	f7ff ff8e 	bl	8000dec <NVIC_EncodePriority>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ed6:	4611      	mov	r1, r2
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff ff5d 	bl	8000d98 <__NVIC_SetPriority>
}
 8000ede:	bf00      	nop
 8000ee0:	3718      	adds	r7, #24
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b082      	sub	sp, #8
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	4603      	mov	r3, r0
 8000eee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff ff31 	bl	8000d5c <__NVIC_EnableIRQ>
}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b082      	sub	sp, #8
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f7ff ffa2 	bl	8000e54 <SysTick_Config>
 8000f10:	4603      	mov	r3, r0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	b085      	sub	sp, #20
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f22:	2300      	movs	r3, #0
 8000f24:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d008      	beq.n	8000f44 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2204      	movs	r2, #4
 8000f36:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f40:	2301      	movs	r3, #1
 8000f42:	e022      	b.n	8000f8a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f022 020e 	bic.w	r2, r2, #14
 8000f52:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f022 0201 	bic.w	r2, r2, #1
 8000f62:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f68:	f003 021c 	and.w	r2, r3, #28
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f70:	2101      	movs	r1, #1
 8000f72:	fa01 f202 	lsl.w	r2, r1, r2
 8000f76:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2200      	movs	r2, #0
 8000f84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8000f88:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3714      	adds	r7, #20
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr

08000f96 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b084      	sub	sp, #16
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	d005      	beq.n	8000fba <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2204      	movs	r2, #4
 8000fb2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	73fb      	strb	r3, [r7, #15]
 8000fb8:	e029      	b.n	800100e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f022 020e 	bic.w	r2, r2, #14
 8000fc8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f022 0201 	bic.w	r2, r2, #1
 8000fd8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fde:	f003 021c 	and.w	r2, r3, #28
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	fa01 f202 	lsl.w	r2, r1, r2
 8000fec:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001002:	2b00      	cmp	r3, #0
 8001004:	d003      	beq.n	800100e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	4798      	blx	r3
    }
  }
  return status;
 800100e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3710      	adds	r7, #16
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001018:	b480      	push	{r7}
 800101a:	b087      	sub	sp, #28
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001026:	e17f      	b.n	8001328 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	2101      	movs	r1, #1
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	fa01 f303 	lsl.w	r3, r1, r3
 8001034:	4013      	ands	r3, r2
 8001036:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	2b00      	cmp	r3, #0
 800103c:	f000 8171 	beq.w	8001322 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f003 0303 	and.w	r3, r3, #3
 8001048:	2b01      	cmp	r3, #1
 800104a:	d005      	beq.n	8001058 <HAL_GPIO_Init+0x40>
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f003 0303 	and.w	r3, r3, #3
 8001054:	2b02      	cmp	r3, #2
 8001056:	d130      	bne.n	80010ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	2203      	movs	r2, #3
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	43db      	mvns	r3, r3
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	4013      	ands	r3, r2
 800106e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	68da      	ldr	r2, [r3, #12]
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	4313      	orrs	r3, r2
 8001080:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800108e:	2201      	movs	r2, #1
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	43db      	mvns	r3, r3
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	4013      	ands	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	091b      	lsrs	r3, r3, #4
 80010a4:	f003 0201 	and.w	r2, r3, #1
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f003 0303 	and.w	r3, r3, #3
 80010c2:	2b03      	cmp	r3, #3
 80010c4:	d118      	bne.n	80010f8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80010cc:	2201      	movs	r2, #1
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	4013      	ands	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	08db      	lsrs	r3, r3, #3
 80010e2:	f003 0201 	and.w	r2, r3, #1
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f003 0303 	and.w	r3, r3, #3
 8001100:	2b03      	cmp	r3, #3
 8001102:	d017      	beq.n	8001134 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	2203      	movs	r2, #3
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	43db      	mvns	r3, r3
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	4013      	ands	r3, r2
 800111a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	689a      	ldr	r2, [r3, #8]
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	4313      	orrs	r3, r2
 800112c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f003 0303 	and.w	r3, r3, #3
 800113c:	2b02      	cmp	r3, #2
 800113e:	d123      	bne.n	8001188 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	08da      	lsrs	r2, r3, #3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3208      	adds	r2, #8
 8001148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800114c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	f003 0307 	and.w	r3, r3, #7
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	220f      	movs	r2, #15
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	4013      	ands	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	691a      	ldr	r2, [r3, #16]
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	4313      	orrs	r3, r2
 8001178:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	08da      	lsrs	r2, r3, #3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	3208      	adds	r2, #8
 8001182:	6939      	ldr	r1, [r7, #16]
 8001184:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	2203      	movs	r2, #3
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	43db      	mvns	r3, r3
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	4013      	ands	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f003 0203 	and.w	r2, r3, #3
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	693a      	ldr	r2, [r7, #16]
 80011ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	f000 80ac 	beq.w	8001322 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ca:	4b5f      	ldr	r3, [pc, #380]	; (8001348 <HAL_GPIO_Init+0x330>)
 80011cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ce:	4a5e      	ldr	r2, [pc, #376]	; (8001348 <HAL_GPIO_Init+0x330>)
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	6613      	str	r3, [r2, #96]	; 0x60
 80011d6:	4b5c      	ldr	r3, [pc, #368]	; (8001348 <HAL_GPIO_Init+0x330>)
 80011d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	60bb      	str	r3, [r7, #8]
 80011e0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011e2:	4a5a      	ldr	r2, [pc, #360]	; (800134c <HAL_GPIO_Init+0x334>)
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	089b      	lsrs	r3, r3, #2
 80011e8:	3302      	adds	r3, #2
 80011ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	f003 0303 	and.w	r3, r3, #3
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	220f      	movs	r2, #15
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	43db      	mvns	r3, r3
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	4013      	ands	r3, r2
 8001204:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800120c:	d025      	beq.n	800125a <HAL_GPIO_Init+0x242>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a4f      	ldr	r2, [pc, #316]	; (8001350 <HAL_GPIO_Init+0x338>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d01f      	beq.n	8001256 <HAL_GPIO_Init+0x23e>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a4e      	ldr	r2, [pc, #312]	; (8001354 <HAL_GPIO_Init+0x33c>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d019      	beq.n	8001252 <HAL_GPIO_Init+0x23a>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a4d      	ldr	r2, [pc, #308]	; (8001358 <HAL_GPIO_Init+0x340>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d013      	beq.n	800124e <HAL_GPIO_Init+0x236>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a4c      	ldr	r2, [pc, #304]	; (800135c <HAL_GPIO_Init+0x344>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d00d      	beq.n	800124a <HAL_GPIO_Init+0x232>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a4b      	ldr	r2, [pc, #300]	; (8001360 <HAL_GPIO_Init+0x348>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d007      	beq.n	8001246 <HAL_GPIO_Init+0x22e>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a4a      	ldr	r2, [pc, #296]	; (8001364 <HAL_GPIO_Init+0x34c>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d101      	bne.n	8001242 <HAL_GPIO_Init+0x22a>
 800123e:	2306      	movs	r3, #6
 8001240:	e00c      	b.n	800125c <HAL_GPIO_Init+0x244>
 8001242:	2307      	movs	r3, #7
 8001244:	e00a      	b.n	800125c <HAL_GPIO_Init+0x244>
 8001246:	2305      	movs	r3, #5
 8001248:	e008      	b.n	800125c <HAL_GPIO_Init+0x244>
 800124a:	2304      	movs	r3, #4
 800124c:	e006      	b.n	800125c <HAL_GPIO_Init+0x244>
 800124e:	2303      	movs	r3, #3
 8001250:	e004      	b.n	800125c <HAL_GPIO_Init+0x244>
 8001252:	2302      	movs	r3, #2
 8001254:	e002      	b.n	800125c <HAL_GPIO_Init+0x244>
 8001256:	2301      	movs	r3, #1
 8001258:	e000      	b.n	800125c <HAL_GPIO_Init+0x244>
 800125a:	2300      	movs	r3, #0
 800125c:	697a      	ldr	r2, [r7, #20]
 800125e:	f002 0203 	and.w	r2, r2, #3
 8001262:	0092      	lsls	r2, r2, #2
 8001264:	4093      	lsls	r3, r2
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	4313      	orrs	r3, r2
 800126a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800126c:	4937      	ldr	r1, [pc, #220]	; (800134c <HAL_GPIO_Init+0x334>)
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	089b      	lsrs	r3, r3, #2
 8001272:	3302      	adds	r3, #2
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800127a:	4b3b      	ldr	r3, [pc, #236]	; (8001368 <HAL_GPIO_Init+0x350>)
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	43db      	mvns	r3, r3
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	4013      	ands	r3, r2
 8001288:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d003      	beq.n	800129e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	4313      	orrs	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800129e:	4a32      	ldr	r2, [pc, #200]	; (8001368 <HAL_GPIO_Init+0x350>)
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012a4:	4b30      	ldr	r3, [pc, #192]	; (8001368 <HAL_GPIO_Init+0x350>)
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	43db      	mvns	r3, r3
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	4013      	ands	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d003      	beq.n	80012c8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012c8:	4a27      	ldr	r2, [pc, #156]	; (8001368 <HAL_GPIO_Init+0x350>)
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80012ce:	4b26      	ldr	r3, [pc, #152]	; (8001368 <HAL_GPIO_Init+0x350>)
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	43db      	mvns	r3, r3
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	4013      	ands	r3, r2
 80012dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d003      	beq.n	80012f2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012f2:	4a1d      	ldr	r2, [pc, #116]	; (8001368 <HAL_GPIO_Init+0x350>)
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80012f8:	4b1b      	ldr	r3, [pc, #108]	; (8001368 <HAL_GPIO_Init+0x350>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	43db      	mvns	r3, r3
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	4013      	ands	r3, r2
 8001306:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d003      	beq.n	800131c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	4313      	orrs	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800131c:	4a12      	ldr	r2, [pc, #72]	; (8001368 <HAL_GPIO_Init+0x350>)
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	3301      	adds	r3, #1
 8001326:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	fa22 f303 	lsr.w	r3, r2, r3
 8001332:	2b00      	cmp	r3, #0
 8001334:	f47f ae78 	bne.w	8001028 <HAL_GPIO_Init+0x10>
  }
}
 8001338:	bf00      	nop
 800133a:	bf00      	nop
 800133c:	371c      	adds	r7, #28
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	40021000 	.word	0x40021000
 800134c:	40010000 	.word	0x40010000
 8001350:	48000400 	.word	0x48000400
 8001354:	48000800 	.word	0x48000800
 8001358:	48000c00 	.word	0x48000c00
 800135c:	48001000 	.word	0x48001000
 8001360:	48001400 	.word	0x48001400
 8001364:	48001800 	.word	0x48001800
 8001368:	40010400 	.word	0x40010400

0800136c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001370:	4b04      	ldr	r3, [pc, #16]	; (8001384 <HAL_PWREx_GetVoltageRange+0x18>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001378:	4618      	mov	r0, r3
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	40007000 	.word	0x40007000

08001388 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001396:	d130      	bne.n	80013fa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001398:	4b23      	ldr	r3, [pc, #140]	; (8001428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013a4:	d038      	beq.n	8001418 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80013a6:	4b20      	ldr	r3, [pc, #128]	; (8001428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013ae:	4a1e      	ldr	r2, [pc, #120]	; (8001428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013b4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80013b6:	4b1d      	ldr	r3, [pc, #116]	; (800142c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2232      	movs	r2, #50	; 0x32
 80013bc:	fb02 f303 	mul.w	r3, r2, r3
 80013c0:	4a1b      	ldr	r2, [pc, #108]	; (8001430 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80013c2:	fba2 2303 	umull	r2, r3, r2, r3
 80013c6:	0c9b      	lsrs	r3, r3, #18
 80013c8:	3301      	adds	r3, #1
 80013ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013cc:	e002      	b.n	80013d4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	3b01      	subs	r3, #1
 80013d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013d4:	4b14      	ldr	r3, [pc, #80]	; (8001428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013d6:	695b      	ldr	r3, [r3, #20]
 80013d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013e0:	d102      	bne.n	80013e8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1f2      	bne.n	80013ce <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013e8:	4b0f      	ldr	r3, [pc, #60]	; (8001428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013ea:	695b      	ldr	r3, [r3, #20]
 80013ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013f4:	d110      	bne.n	8001418 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e00f      	b.n	800141a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80013fa:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001402:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001406:	d007      	beq.n	8001418 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001408:	4b07      	ldr	r3, [pc, #28]	; (8001428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001410:	4a05      	ldr	r2, [pc, #20]	; (8001428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001412:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001416:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3714      	adds	r7, #20
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	40007000 	.word	0x40007000
 800142c:	20000000 	.word	0x20000000
 8001430:	431bde83 	.word	0x431bde83

08001434 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b088      	sub	sp, #32
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d101      	bne.n	8001446 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e3ca      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001446:	4b97      	ldr	r3, [pc, #604]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	f003 030c 	and.w	r3, r3, #12
 800144e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001450:	4b94      	ldr	r3, [pc, #592]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	f003 0303 	and.w	r3, r3, #3
 8001458:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0310 	and.w	r3, r3, #16
 8001462:	2b00      	cmp	r3, #0
 8001464:	f000 80e4 	beq.w	8001630 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d007      	beq.n	800147e <HAL_RCC_OscConfig+0x4a>
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	2b0c      	cmp	r3, #12
 8001472:	f040 808b 	bne.w	800158c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	2b01      	cmp	r3, #1
 800147a:	f040 8087 	bne.w	800158c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800147e:	4b89      	ldr	r3, [pc, #548]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	2b00      	cmp	r3, #0
 8001488:	d005      	beq.n	8001496 <HAL_RCC_OscConfig+0x62>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	699b      	ldr	r3, [r3, #24]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d101      	bne.n	8001496 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e3a2      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a1a      	ldr	r2, [r3, #32]
 800149a:	4b82      	ldr	r3, [pc, #520]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0308 	and.w	r3, r3, #8
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d004      	beq.n	80014b0 <HAL_RCC_OscConfig+0x7c>
 80014a6:	4b7f      	ldr	r3, [pc, #508]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014ae:	e005      	b.n	80014bc <HAL_RCC_OscConfig+0x88>
 80014b0:	4b7c      	ldr	r3, [pc, #496]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 80014b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014b6:	091b      	lsrs	r3, r3, #4
 80014b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014bc:	4293      	cmp	r3, r2
 80014be:	d223      	bcs.n	8001508 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6a1b      	ldr	r3, [r3, #32]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f000 fd55 	bl	8001f74 <RCC_SetFlashLatencyFromMSIRange>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e383      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014d4:	4b73      	ldr	r3, [pc, #460]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a72      	ldr	r2, [pc, #456]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 80014da:	f043 0308 	orr.w	r3, r3, #8
 80014de:	6013      	str	r3, [r2, #0]
 80014e0:	4b70      	ldr	r3, [pc, #448]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6a1b      	ldr	r3, [r3, #32]
 80014ec:	496d      	ldr	r1, [pc, #436]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 80014ee:	4313      	orrs	r3, r2
 80014f0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014f2:	4b6c      	ldr	r3, [pc, #432]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	69db      	ldr	r3, [r3, #28]
 80014fe:	021b      	lsls	r3, r3, #8
 8001500:	4968      	ldr	r1, [pc, #416]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001502:	4313      	orrs	r3, r2
 8001504:	604b      	str	r3, [r1, #4]
 8001506:	e025      	b.n	8001554 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001508:	4b66      	ldr	r3, [pc, #408]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a65      	ldr	r2, [pc, #404]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 800150e:	f043 0308 	orr.w	r3, r3, #8
 8001512:	6013      	str	r3, [r2, #0]
 8001514:	4b63      	ldr	r3, [pc, #396]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6a1b      	ldr	r3, [r3, #32]
 8001520:	4960      	ldr	r1, [pc, #384]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001522:	4313      	orrs	r3, r2
 8001524:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001526:	4b5f      	ldr	r3, [pc, #380]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	021b      	lsls	r3, r3, #8
 8001534:	495b      	ldr	r1, [pc, #364]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001536:	4313      	orrs	r3, r2
 8001538:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800153a:	69bb      	ldr	r3, [r7, #24]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d109      	bne.n	8001554 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6a1b      	ldr	r3, [r3, #32]
 8001544:	4618      	mov	r0, r3
 8001546:	f000 fd15 	bl	8001f74 <RCC_SetFlashLatencyFromMSIRange>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e343      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001554:	f000 fc4a 	bl	8001dec <HAL_RCC_GetSysClockFreq>
 8001558:	4602      	mov	r2, r0
 800155a:	4b52      	ldr	r3, [pc, #328]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	091b      	lsrs	r3, r3, #4
 8001560:	f003 030f 	and.w	r3, r3, #15
 8001564:	4950      	ldr	r1, [pc, #320]	; (80016a8 <HAL_RCC_OscConfig+0x274>)
 8001566:	5ccb      	ldrb	r3, [r1, r3]
 8001568:	f003 031f 	and.w	r3, r3, #31
 800156c:	fa22 f303 	lsr.w	r3, r2, r3
 8001570:	4a4e      	ldr	r2, [pc, #312]	; (80016ac <HAL_RCC_OscConfig+0x278>)
 8001572:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001574:	4b4e      	ldr	r3, [pc, #312]	; (80016b0 <HAL_RCC_OscConfig+0x27c>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff fb3d 	bl	8000bf8 <HAL_InitTick>
 800157e:	4603      	mov	r3, r0
 8001580:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001582:	7bfb      	ldrb	r3, [r7, #15]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d052      	beq.n	800162e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001588:	7bfb      	ldrb	r3, [r7, #15]
 800158a:	e327      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d032      	beq.n	80015fa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001594:	4b43      	ldr	r3, [pc, #268]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a42      	ldr	r2, [pc, #264]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 800159a:	f043 0301 	orr.w	r3, r3, #1
 800159e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015a0:	f7ff fb7a 	bl	8000c98 <HAL_GetTick>
 80015a4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015a6:	e008      	b.n	80015ba <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015a8:	f7ff fb76 	bl	8000c98 <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e310      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015ba:	4b3a      	ldr	r3, [pc, #232]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d0f0      	beq.n	80015a8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015c6:	4b37      	ldr	r3, [pc, #220]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a36      	ldr	r2, [pc, #216]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 80015cc:	f043 0308 	orr.w	r3, r3, #8
 80015d0:	6013      	str	r3, [r2, #0]
 80015d2:	4b34      	ldr	r3, [pc, #208]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6a1b      	ldr	r3, [r3, #32]
 80015de:	4931      	ldr	r1, [pc, #196]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 80015e0:	4313      	orrs	r3, r2
 80015e2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015e4:	4b2f      	ldr	r3, [pc, #188]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	69db      	ldr	r3, [r3, #28]
 80015f0:	021b      	lsls	r3, r3, #8
 80015f2:	492c      	ldr	r1, [pc, #176]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 80015f4:	4313      	orrs	r3, r2
 80015f6:	604b      	str	r3, [r1, #4]
 80015f8:	e01a      	b.n	8001630 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015fa:	4b2a      	ldr	r3, [pc, #168]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a29      	ldr	r2, [pc, #164]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001600:	f023 0301 	bic.w	r3, r3, #1
 8001604:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001606:	f7ff fb47 	bl	8000c98 <HAL_GetTick>
 800160a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800160c:	e008      	b.n	8001620 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800160e:	f7ff fb43 	bl	8000c98 <HAL_GetTick>
 8001612:	4602      	mov	r2, r0
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	2b02      	cmp	r3, #2
 800161a:	d901      	bls.n	8001620 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e2dd      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001620:	4b20      	ldr	r3, [pc, #128]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0302 	and.w	r3, r3, #2
 8001628:	2b00      	cmp	r3, #0
 800162a:	d1f0      	bne.n	800160e <HAL_RCC_OscConfig+0x1da>
 800162c:	e000      	b.n	8001630 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800162e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0301 	and.w	r3, r3, #1
 8001638:	2b00      	cmp	r3, #0
 800163a:	d074      	beq.n	8001726 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	2b08      	cmp	r3, #8
 8001640:	d005      	beq.n	800164e <HAL_RCC_OscConfig+0x21a>
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	2b0c      	cmp	r3, #12
 8001646:	d10e      	bne.n	8001666 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	2b03      	cmp	r3, #3
 800164c:	d10b      	bne.n	8001666 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800164e:	4b15      	ldr	r3, [pc, #84]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d064      	beq.n	8001724 <HAL_RCC_OscConfig+0x2f0>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d160      	bne.n	8001724 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e2ba      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800166e:	d106      	bne.n	800167e <HAL_RCC_OscConfig+0x24a>
 8001670:	4b0c      	ldr	r3, [pc, #48]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a0b      	ldr	r2, [pc, #44]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001676:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800167a:	6013      	str	r3, [r2, #0]
 800167c:	e026      	b.n	80016cc <HAL_RCC_OscConfig+0x298>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001686:	d115      	bne.n	80016b4 <HAL_RCC_OscConfig+0x280>
 8001688:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a05      	ldr	r2, [pc, #20]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 800168e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001692:	6013      	str	r3, [r2, #0]
 8001694:	4b03      	ldr	r3, [pc, #12]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a02      	ldr	r2, [pc, #8]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 800169a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800169e:	6013      	str	r3, [r2, #0]
 80016a0:	e014      	b.n	80016cc <HAL_RCC_OscConfig+0x298>
 80016a2:	bf00      	nop
 80016a4:	40021000 	.word	0x40021000
 80016a8:	0800510c 	.word	0x0800510c
 80016ac:	20000000 	.word	0x20000000
 80016b0:	20000004 	.word	0x20000004
 80016b4:	4ba0      	ldr	r3, [pc, #640]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a9f      	ldr	r2, [pc, #636]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 80016ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016be:	6013      	str	r3, [r2, #0]
 80016c0:	4b9d      	ldr	r3, [pc, #628]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a9c      	ldr	r2, [pc, #624]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 80016c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d013      	beq.n	80016fc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d4:	f7ff fae0 	bl	8000c98 <HAL_GetTick>
 80016d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016dc:	f7ff fadc 	bl	8000c98 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b64      	cmp	r3, #100	; 0x64
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e276      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016ee:	4b92      	ldr	r3, [pc, #584]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d0f0      	beq.n	80016dc <HAL_RCC_OscConfig+0x2a8>
 80016fa:	e014      	b.n	8001726 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016fc:	f7ff facc 	bl	8000c98 <HAL_GetTick>
 8001700:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001702:	e008      	b.n	8001716 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001704:	f7ff fac8 	bl	8000c98 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b64      	cmp	r3, #100	; 0x64
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e262      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001716:	4b88      	ldr	r3, [pc, #544]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1f0      	bne.n	8001704 <HAL_RCC_OscConfig+0x2d0>
 8001722:	e000      	b.n	8001726 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001724:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d060      	beq.n	80017f4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	2b04      	cmp	r3, #4
 8001736:	d005      	beq.n	8001744 <HAL_RCC_OscConfig+0x310>
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	2b0c      	cmp	r3, #12
 800173c:	d119      	bne.n	8001772 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	2b02      	cmp	r3, #2
 8001742:	d116      	bne.n	8001772 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001744:	4b7c      	ldr	r3, [pc, #496]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800174c:	2b00      	cmp	r3, #0
 800174e:	d005      	beq.n	800175c <HAL_RCC_OscConfig+0x328>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d101      	bne.n	800175c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e23f      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800175c:	4b76      	ldr	r3, [pc, #472]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	691b      	ldr	r3, [r3, #16]
 8001768:	061b      	lsls	r3, r3, #24
 800176a:	4973      	ldr	r1, [pc, #460]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 800176c:	4313      	orrs	r3, r2
 800176e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001770:	e040      	b.n	80017f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d023      	beq.n	80017c2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800177a:	4b6f      	ldr	r3, [pc, #444]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a6e      	ldr	r2, [pc, #440]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 8001780:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001784:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001786:	f7ff fa87 	bl	8000c98 <HAL_GetTick>
 800178a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800178c:	e008      	b.n	80017a0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800178e:	f7ff fa83 	bl	8000c98 <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	2b02      	cmp	r3, #2
 800179a:	d901      	bls.n	80017a0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e21d      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017a0:	4b65      	ldr	r3, [pc, #404]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d0f0      	beq.n	800178e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ac:	4b62      	ldr	r3, [pc, #392]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	691b      	ldr	r3, [r3, #16]
 80017b8:	061b      	lsls	r3, r3, #24
 80017ba:	495f      	ldr	r1, [pc, #380]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 80017bc:	4313      	orrs	r3, r2
 80017be:	604b      	str	r3, [r1, #4]
 80017c0:	e018      	b.n	80017f4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017c2:	4b5d      	ldr	r3, [pc, #372]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a5c      	ldr	r2, [pc, #368]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 80017c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ce:	f7ff fa63 	bl	8000c98 <HAL_GetTick>
 80017d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017d4:	e008      	b.n	80017e8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017d6:	f7ff fa5f 	bl	8000c98 <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e1f9      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017e8:	4b53      	ldr	r3, [pc, #332]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d1f0      	bne.n	80017d6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0308 	and.w	r3, r3, #8
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d03c      	beq.n	800187a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	695b      	ldr	r3, [r3, #20]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d01c      	beq.n	8001842 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001808:	4b4b      	ldr	r3, [pc, #300]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 800180a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800180e:	4a4a      	ldr	r2, [pc, #296]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 8001810:	f043 0301 	orr.w	r3, r3, #1
 8001814:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001818:	f7ff fa3e 	bl	8000c98 <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001820:	f7ff fa3a 	bl	8000c98 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b02      	cmp	r3, #2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e1d4      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001832:	4b41      	ldr	r3, [pc, #260]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 8001834:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001838:	f003 0302 	and.w	r3, r3, #2
 800183c:	2b00      	cmp	r3, #0
 800183e:	d0ef      	beq.n	8001820 <HAL_RCC_OscConfig+0x3ec>
 8001840:	e01b      	b.n	800187a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001842:	4b3d      	ldr	r3, [pc, #244]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 8001844:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001848:	4a3b      	ldr	r2, [pc, #236]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 800184a:	f023 0301 	bic.w	r3, r3, #1
 800184e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001852:	f7ff fa21 	bl	8000c98 <HAL_GetTick>
 8001856:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001858:	e008      	b.n	800186c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800185a:	f7ff fa1d 	bl	8000c98 <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e1b7      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800186c:	4b32      	ldr	r3, [pc, #200]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 800186e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1ef      	bne.n	800185a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0304 	and.w	r3, r3, #4
 8001882:	2b00      	cmp	r3, #0
 8001884:	f000 80a6 	beq.w	80019d4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001888:	2300      	movs	r3, #0
 800188a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800188c:	4b2a      	ldr	r3, [pc, #168]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 800188e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d10d      	bne.n	80018b4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001898:	4b27      	ldr	r3, [pc, #156]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 800189a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800189c:	4a26      	ldr	r2, [pc, #152]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 800189e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a2:	6593      	str	r3, [r2, #88]	; 0x58
 80018a4:	4b24      	ldr	r3, [pc, #144]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 80018a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ac:	60bb      	str	r3, [r7, #8]
 80018ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018b0:	2301      	movs	r3, #1
 80018b2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018b4:	4b21      	ldr	r3, [pc, #132]	; (800193c <HAL_RCC_OscConfig+0x508>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d118      	bne.n	80018f2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018c0:	4b1e      	ldr	r3, [pc, #120]	; (800193c <HAL_RCC_OscConfig+0x508>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a1d      	ldr	r2, [pc, #116]	; (800193c <HAL_RCC_OscConfig+0x508>)
 80018c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018cc:	f7ff f9e4 	bl	8000c98 <HAL_GetTick>
 80018d0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018d2:	e008      	b.n	80018e6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018d4:	f7ff f9e0 	bl	8000c98 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e17a      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018e6:	4b15      	ldr	r3, [pc, #84]	; (800193c <HAL_RCC_OscConfig+0x508>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d0f0      	beq.n	80018d4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d108      	bne.n	800190c <HAL_RCC_OscConfig+0x4d8>
 80018fa:	4b0f      	ldr	r3, [pc, #60]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 80018fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001900:	4a0d      	ldr	r2, [pc, #52]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 8001902:	f043 0301 	orr.w	r3, r3, #1
 8001906:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800190a:	e029      	b.n	8001960 <HAL_RCC_OscConfig+0x52c>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	2b05      	cmp	r3, #5
 8001912:	d115      	bne.n	8001940 <HAL_RCC_OscConfig+0x50c>
 8001914:	4b08      	ldr	r3, [pc, #32]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 8001916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800191a:	4a07      	ldr	r2, [pc, #28]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 800191c:	f043 0304 	orr.w	r3, r3, #4
 8001920:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001924:	4b04      	ldr	r3, [pc, #16]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 8001926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800192a:	4a03      	ldr	r2, [pc, #12]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001934:	e014      	b.n	8001960 <HAL_RCC_OscConfig+0x52c>
 8001936:	bf00      	nop
 8001938:	40021000 	.word	0x40021000
 800193c:	40007000 	.word	0x40007000
 8001940:	4b9c      	ldr	r3, [pc, #624]	; (8001bb4 <HAL_RCC_OscConfig+0x780>)
 8001942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001946:	4a9b      	ldr	r2, [pc, #620]	; (8001bb4 <HAL_RCC_OscConfig+0x780>)
 8001948:	f023 0301 	bic.w	r3, r3, #1
 800194c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001950:	4b98      	ldr	r3, [pc, #608]	; (8001bb4 <HAL_RCC_OscConfig+0x780>)
 8001952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001956:	4a97      	ldr	r2, [pc, #604]	; (8001bb4 <HAL_RCC_OscConfig+0x780>)
 8001958:	f023 0304 	bic.w	r3, r3, #4
 800195c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d016      	beq.n	8001996 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001968:	f7ff f996 	bl	8000c98 <HAL_GetTick>
 800196c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800196e:	e00a      	b.n	8001986 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001970:	f7ff f992 	bl	8000c98 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	f241 3288 	movw	r2, #5000	; 0x1388
 800197e:	4293      	cmp	r3, r2
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e12a      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001986:	4b8b      	ldr	r3, [pc, #556]	; (8001bb4 <HAL_RCC_OscConfig+0x780>)
 8001988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800198c:	f003 0302 	and.w	r3, r3, #2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d0ed      	beq.n	8001970 <HAL_RCC_OscConfig+0x53c>
 8001994:	e015      	b.n	80019c2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001996:	f7ff f97f 	bl	8000c98 <HAL_GetTick>
 800199a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800199c:	e00a      	b.n	80019b4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800199e:	f7ff f97b 	bl	8000c98 <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d901      	bls.n	80019b4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e113      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019b4:	4b7f      	ldr	r3, [pc, #508]	; (8001bb4 <HAL_RCC_OscConfig+0x780>)
 80019b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1ed      	bne.n	800199e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019c2:	7ffb      	ldrb	r3, [r7, #31]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d105      	bne.n	80019d4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019c8:	4b7a      	ldr	r3, [pc, #488]	; (8001bb4 <HAL_RCC_OscConfig+0x780>)
 80019ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019cc:	4a79      	ldr	r2, [pc, #484]	; (8001bb4 <HAL_RCC_OscConfig+0x780>)
 80019ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019d2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d8:	2b00      	cmp	r3, #0
 80019da:	f000 80fe 	beq.w	8001bda <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	f040 80d0 	bne.w	8001b88 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80019e8:	4b72      	ldr	r3, [pc, #456]	; (8001bb4 <HAL_RCC_OscConfig+0x780>)
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	f003 0203 	and.w	r2, r3, #3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d130      	bne.n	8001a5e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	3b01      	subs	r3, #1
 8001a08:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d127      	bne.n	8001a5e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a18:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d11f      	bne.n	8001a5e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a28:	2a07      	cmp	r2, #7
 8001a2a:	bf14      	ite	ne
 8001a2c:	2201      	movne	r2, #1
 8001a2e:	2200      	moveq	r2, #0
 8001a30:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d113      	bne.n	8001a5e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a40:	085b      	lsrs	r3, r3, #1
 8001a42:	3b01      	subs	r3, #1
 8001a44:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d109      	bne.n	8001a5e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a54:	085b      	lsrs	r3, r3, #1
 8001a56:	3b01      	subs	r3, #1
 8001a58:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d06e      	beq.n	8001b3c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	2b0c      	cmp	r3, #12
 8001a62:	d069      	beq.n	8001b38 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001a64:	4b53      	ldr	r3, [pc, #332]	; (8001bb4 <HAL_RCC_OscConfig+0x780>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d105      	bne.n	8001a7c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001a70:	4b50      	ldr	r3, [pc, #320]	; (8001bb4 <HAL_RCC_OscConfig+0x780>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e0ad      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a80:	4b4c      	ldr	r3, [pc, #304]	; (8001bb4 <HAL_RCC_OscConfig+0x780>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a4b      	ldr	r2, [pc, #300]	; (8001bb4 <HAL_RCC_OscConfig+0x780>)
 8001a86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a8a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a8c:	f7ff f904 	bl	8000c98 <HAL_GetTick>
 8001a90:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a92:	e008      	b.n	8001aa6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a94:	f7ff f900 	bl	8000c98 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e09a      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aa6:	4b43      	ldr	r3, [pc, #268]	; (8001bb4 <HAL_RCC_OscConfig+0x780>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1f0      	bne.n	8001a94 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ab2:	4b40      	ldr	r3, [pc, #256]	; (8001bb4 <HAL_RCC_OscConfig+0x780>)
 8001ab4:	68da      	ldr	r2, [r3, #12]
 8001ab6:	4b40      	ldr	r3, [pc, #256]	; (8001bb8 <HAL_RCC_OscConfig+0x784>)
 8001ab8:	4013      	ands	r3, r2
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001ac2:	3a01      	subs	r2, #1
 8001ac4:	0112      	lsls	r2, r2, #4
 8001ac6:	4311      	orrs	r1, r2
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001acc:	0212      	lsls	r2, r2, #8
 8001ace:	4311      	orrs	r1, r2
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ad4:	0852      	lsrs	r2, r2, #1
 8001ad6:	3a01      	subs	r2, #1
 8001ad8:	0552      	lsls	r2, r2, #21
 8001ada:	4311      	orrs	r1, r2
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001ae0:	0852      	lsrs	r2, r2, #1
 8001ae2:	3a01      	subs	r2, #1
 8001ae4:	0652      	lsls	r2, r2, #25
 8001ae6:	4311      	orrs	r1, r2
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001aec:	0912      	lsrs	r2, r2, #4
 8001aee:	0452      	lsls	r2, r2, #17
 8001af0:	430a      	orrs	r2, r1
 8001af2:	4930      	ldr	r1, [pc, #192]	; (8001bb4 <HAL_RCC_OscConfig+0x780>)
 8001af4:	4313      	orrs	r3, r2
 8001af6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001af8:	4b2e      	ldr	r3, [pc, #184]	; (8001bb4 <HAL_RCC_OscConfig+0x780>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a2d      	ldr	r2, [pc, #180]	; (8001bb4 <HAL_RCC_OscConfig+0x780>)
 8001afe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b02:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b04:	4b2b      	ldr	r3, [pc, #172]	; (8001bb4 <HAL_RCC_OscConfig+0x780>)
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	4a2a      	ldr	r2, [pc, #168]	; (8001bb4 <HAL_RCC_OscConfig+0x780>)
 8001b0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b0e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b10:	f7ff f8c2 	bl	8000c98 <HAL_GetTick>
 8001b14:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b16:	e008      	b.n	8001b2a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b18:	f7ff f8be 	bl	8000c98 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e058      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b2a:	4b22      	ldr	r3, [pc, #136]	; (8001bb4 <HAL_RCC_OscConfig+0x780>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d0f0      	beq.n	8001b18 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b36:	e050      	b.n	8001bda <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e04f      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b3c:	4b1d      	ldr	r3, [pc, #116]	; (8001bb4 <HAL_RCC_OscConfig+0x780>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d148      	bne.n	8001bda <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b48:	4b1a      	ldr	r3, [pc, #104]	; (8001bb4 <HAL_RCC_OscConfig+0x780>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a19      	ldr	r2, [pc, #100]	; (8001bb4 <HAL_RCC_OscConfig+0x780>)
 8001b4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b52:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b54:	4b17      	ldr	r3, [pc, #92]	; (8001bb4 <HAL_RCC_OscConfig+0x780>)
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	4a16      	ldr	r2, [pc, #88]	; (8001bb4 <HAL_RCC_OscConfig+0x780>)
 8001b5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b5e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b60:	f7ff f89a 	bl	8000c98 <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b68:	f7ff f896 	bl	8000c98 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e030      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b7a:	4b0e      	ldr	r3, [pc, #56]	; (8001bb4 <HAL_RCC_OscConfig+0x780>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d0f0      	beq.n	8001b68 <HAL_RCC_OscConfig+0x734>
 8001b86:	e028      	b.n	8001bda <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	2b0c      	cmp	r3, #12
 8001b8c:	d023      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b8e:	4b09      	ldr	r3, [pc, #36]	; (8001bb4 <HAL_RCC_OscConfig+0x780>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a08      	ldr	r2, [pc, #32]	; (8001bb4 <HAL_RCC_OscConfig+0x780>)
 8001b94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b9a:	f7ff f87d 	bl	8000c98 <HAL_GetTick>
 8001b9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ba0:	e00c      	b.n	8001bbc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ba2:	f7ff f879 	bl	8000c98 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d905      	bls.n	8001bbc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e013      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a8>
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bbc:	4b09      	ldr	r3, [pc, #36]	; (8001be4 <HAL_RCC_OscConfig+0x7b0>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d1ec      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001bc8:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <HAL_RCC_OscConfig+0x7b0>)
 8001bca:	68da      	ldr	r2, [r3, #12]
 8001bcc:	4905      	ldr	r1, [pc, #20]	; (8001be4 <HAL_RCC_OscConfig+0x7b0>)
 8001bce:	4b06      	ldr	r3, [pc, #24]	; (8001be8 <HAL_RCC_OscConfig+0x7b4>)
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	60cb      	str	r3, [r1, #12]
 8001bd4:	e001      	b.n	8001bda <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e000      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3720      	adds	r7, #32
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	40021000 	.word	0x40021000
 8001be8:	feeefffc 	.word	0xfeeefffc

08001bec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d101      	bne.n	8001c00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e0e7      	b.n	8001dd0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c00:	4b75      	ldr	r3, [pc, #468]	; (8001dd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0307 	and.w	r3, r3, #7
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d910      	bls.n	8001c30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c0e:	4b72      	ldr	r3, [pc, #456]	; (8001dd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f023 0207 	bic.w	r2, r3, #7
 8001c16:	4970      	ldr	r1, [pc, #448]	; (8001dd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c1e:	4b6e      	ldr	r3, [pc, #440]	; (8001dd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0307 	and.w	r3, r3, #7
 8001c26:	683a      	ldr	r2, [r7, #0]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d001      	beq.n	8001c30 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e0cf      	b.n	8001dd0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d010      	beq.n	8001c5e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689a      	ldr	r2, [r3, #8]
 8001c40:	4b66      	ldr	r3, [pc, #408]	; (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d908      	bls.n	8001c5e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c4c:	4b63      	ldr	r3, [pc, #396]	; (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	4960      	ldr	r1, [pc, #384]	; (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d04c      	beq.n	8001d04 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	2b03      	cmp	r3, #3
 8001c70:	d107      	bne.n	8001c82 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c72:	4b5a      	ldr	r3, [pc, #360]	; (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d121      	bne.n	8001cc2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e0a6      	b.n	8001dd0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d107      	bne.n	8001c9a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c8a:	4b54      	ldr	r3, [pc, #336]	; (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d115      	bne.n	8001cc2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e09a      	b.n	8001dd0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d107      	bne.n	8001cb2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ca2:	4b4e      	ldr	r3, [pc, #312]	; (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d109      	bne.n	8001cc2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e08e      	b.n	8001dd0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cb2:	4b4a      	ldr	r3, [pc, #296]	; (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d101      	bne.n	8001cc2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e086      	b.n	8001dd0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cc2:	4b46      	ldr	r3, [pc, #280]	; (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f023 0203 	bic.w	r2, r3, #3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	4943      	ldr	r1, [pc, #268]	; (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cd4:	f7fe ffe0 	bl	8000c98 <HAL_GetTick>
 8001cd8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cda:	e00a      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cdc:	f7fe ffdc 	bl	8000c98 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e06e      	b.n	8001dd0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cf2:	4b3a      	ldr	r3, [pc, #232]	; (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f003 020c 	and.w	r2, r3, #12
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d1eb      	bne.n	8001cdc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0302 	and.w	r3, r3, #2
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d010      	beq.n	8001d32 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689a      	ldr	r2, [r3, #8]
 8001d14:	4b31      	ldr	r3, [pc, #196]	; (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d208      	bcs.n	8001d32 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d20:	4b2e      	ldr	r3, [pc, #184]	; (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	492b      	ldr	r1, [pc, #172]	; (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d32:	4b29      	ldr	r3, [pc, #164]	; (8001dd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	683a      	ldr	r2, [r7, #0]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d210      	bcs.n	8001d62 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d40:	4b25      	ldr	r3, [pc, #148]	; (8001dd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f023 0207 	bic.w	r2, r3, #7
 8001d48:	4923      	ldr	r1, [pc, #140]	; (8001dd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d50:	4b21      	ldr	r3, [pc, #132]	; (8001dd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0307 	and.w	r3, r3, #7
 8001d58:	683a      	ldr	r2, [r7, #0]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d001      	beq.n	8001d62 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e036      	b.n	8001dd0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0304 	and.w	r3, r3, #4
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d008      	beq.n	8001d80 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d6e:	4b1b      	ldr	r3, [pc, #108]	; (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	4918      	ldr	r1, [pc, #96]	; (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0308 	and.w	r3, r3, #8
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d009      	beq.n	8001da0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d8c:	4b13      	ldr	r3, [pc, #76]	; (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	00db      	lsls	r3, r3, #3
 8001d9a:	4910      	ldr	r1, [pc, #64]	; (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001da0:	f000 f824 	bl	8001dec <HAL_RCC_GetSysClockFreq>
 8001da4:	4602      	mov	r2, r0
 8001da6:	4b0d      	ldr	r3, [pc, #52]	; (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	091b      	lsrs	r3, r3, #4
 8001dac:	f003 030f 	and.w	r3, r3, #15
 8001db0:	490b      	ldr	r1, [pc, #44]	; (8001de0 <HAL_RCC_ClockConfig+0x1f4>)
 8001db2:	5ccb      	ldrb	r3, [r1, r3]
 8001db4:	f003 031f 	and.w	r3, r3, #31
 8001db8:	fa22 f303 	lsr.w	r3, r2, r3
 8001dbc:	4a09      	ldr	r2, [pc, #36]	; (8001de4 <HAL_RCC_ClockConfig+0x1f8>)
 8001dbe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001dc0:	4b09      	ldr	r3, [pc, #36]	; (8001de8 <HAL_RCC_ClockConfig+0x1fc>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7fe ff17 	bl	8000bf8 <HAL_InitTick>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	72fb      	strb	r3, [r7, #11]

  return status;
 8001dce:	7afb      	ldrb	r3, [r7, #11]
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3710      	adds	r7, #16
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40022000 	.word	0x40022000
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	0800510c 	.word	0x0800510c
 8001de4:	20000000 	.word	0x20000000
 8001de8:	20000004 	.word	0x20000004

08001dec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b089      	sub	sp, #36	; 0x24
 8001df0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001df2:	2300      	movs	r3, #0
 8001df4:	61fb      	str	r3, [r7, #28]
 8001df6:	2300      	movs	r3, #0
 8001df8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dfa:	4b3e      	ldr	r3, [pc, #248]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f003 030c 	and.w	r3, r3, #12
 8001e02:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e04:	4b3b      	ldr	r3, [pc, #236]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	f003 0303 	and.w	r3, r3, #3
 8001e0c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d005      	beq.n	8001e20 <HAL_RCC_GetSysClockFreq+0x34>
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	2b0c      	cmp	r3, #12
 8001e18:	d121      	bne.n	8001e5e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d11e      	bne.n	8001e5e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e20:	4b34      	ldr	r3, [pc, #208]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0308 	and.w	r3, r3, #8
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d107      	bne.n	8001e3c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e2c:	4b31      	ldr	r3, [pc, #196]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e32:	0a1b      	lsrs	r3, r3, #8
 8001e34:	f003 030f 	and.w	r3, r3, #15
 8001e38:	61fb      	str	r3, [r7, #28]
 8001e3a:	e005      	b.n	8001e48 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e3c:	4b2d      	ldr	r3, [pc, #180]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	091b      	lsrs	r3, r3, #4
 8001e42:	f003 030f 	and.w	r3, r3, #15
 8001e46:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e48:	4a2b      	ldr	r2, [pc, #172]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e50:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d10d      	bne.n	8001e74 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e5c:	e00a      	b.n	8001e74 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	2b04      	cmp	r3, #4
 8001e62:	d102      	bne.n	8001e6a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e64:	4b25      	ldr	r3, [pc, #148]	; (8001efc <HAL_RCC_GetSysClockFreq+0x110>)
 8001e66:	61bb      	str	r3, [r7, #24]
 8001e68:	e004      	b.n	8001e74 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	2b08      	cmp	r3, #8
 8001e6e:	d101      	bne.n	8001e74 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e70:	4b23      	ldr	r3, [pc, #140]	; (8001f00 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e72:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	2b0c      	cmp	r3, #12
 8001e78:	d134      	bne.n	8001ee4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e7a:	4b1e      	ldr	r3, [pc, #120]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	f003 0303 	and.w	r3, r3, #3
 8001e82:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d003      	beq.n	8001e92 <HAL_RCC_GetSysClockFreq+0xa6>
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	2b03      	cmp	r3, #3
 8001e8e:	d003      	beq.n	8001e98 <HAL_RCC_GetSysClockFreq+0xac>
 8001e90:	e005      	b.n	8001e9e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e92:	4b1a      	ldr	r3, [pc, #104]	; (8001efc <HAL_RCC_GetSysClockFreq+0x110>)
 8001e94:	617b      	str	r3, [r7, #20]
      break;
 8001e96:	e005      	b.n	8001ea4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e98:	4b19      	ldr	r3, [pc, #100]	; (8001f00 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e9a:	617b      	str	r3, [r7, #20]
      break;
 8001e9c:	e002      	b.n	8001ea4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	617b      	str	r3, [r7, #20]
      break;
 8001ea2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ea4:	4b13      	ldr	r3, [pc, #76]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	091b      	lsrs	r3, r3, #4
 8001eaa:	f003 0307 	and.w	r3, r3, #7
 8001eae:	3301      	adds	r3, #1
 8001eb0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001eb2:	4b10      	ldr	r3, [pc, #64]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	0a1b      	lsrs	r3, r3, #8
 8001eb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ebc:	697a      	ldr	r2, [r7, #20]
 8001ebe:	fb03 f202 	mul.w	r2, r3, r2
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001eca:	4b0a      	ldr	r3, [pc, #40]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	0e5b      	lsrs	r3, r3, #25
 8001ed0:	f003 0303 	and.w	r3, r3, #3
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001eda:	697a      	ldr	r2, [r7, #20]
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001ee4:	69bb      	ldr	r3, [r7, #24]
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3724      	adds	r7, #36	; 0x24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	08005124 	.word	0x08005124
 8001efc:	00f42400 	.word	0x00f42400
 8001f00:	007a1200 	.word	0x007a1200

08001f04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f08:	4b03      	ldr	r3, [pc, #12]	; (8001f18 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	20000000 	.word	0x20000000

08001f1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001f20:	f7ff fff0 	bl	8001f04 <HAL_RCC_GetHCLKFreq>
 8001f24:	4602      	mov	r2, r0
 8001f26:	4b06      	ldr	r3, [pc, #24]	; (8001f40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	0a1b      	lsrs	r3, r3, #8
 8001f2c:	f003 0307 	and.w	r3, r3, #7
 8001f30:	4904      	ldr	r1, [pc, #16]	; (8001f44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f32:	5ccb      	ldrb	r3, [r1, r3]
 8001f34:	f003 031f 	and.w	r3, r3, #31
 8001f38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40021000 	.word	0x40021000
 8001f44:	0800511c 	.word	0x0800511c

08001f48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f4c:	f7ff ffda 	bl	8001f04 <HAL_RCC_GetHCLKFreq>
 8001f50:	4602      	mov	r2, r0
 8001f52:	4b06      	ldr	r3, [pc, #24]	; (8001f6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	0adb      	lsrs	r3, r3, #11
 8001f58:	f003 0307 	and.w	r3, r3, #7
 8001f5c:	4904      	ldr	r1, [pc, #16]	; (8001f70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f5e:	5ccb      	ldrb	r3, [r1, r3]
 8001f60:	f003 031f 	and.w	r3, r3, #31
 8001f64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	0800511c 	.word	0x0800511c

08001f74 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f80:	4b2a      	ldr	r3, [pc, #168]	; (800202c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d003      	beq.n	8001f94 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f8c:	f7ff f9ee 	bl	800136c <HAL_PWREx_GetVoltageRange>
 8001f90:	6178      	str	r0, [r7, #20]
 8001f92:	e014      	b.n	8001fbe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f94:	4b25      	ldr	r3, [pc, #148]	; (800202c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f98:	4a24      	ldr	r2, [pc, #144]	; (800202c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f9e:	6593      	str	r3, [r2, #88]	; 0x58
 8001fa0:	4b22      	ldr	r3, [pc, #136]	; (800202c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa8:	60fb      	str	r3, [r7, #12]
 8001faa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001fac:	f7ff f9de 	bl	800136c <HAL_PWREx_GetVoltageRange>
 8001fb0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001fb2:	4b1e      	ldr	r3, [pc, #120]	; (800202c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb6:	4a1d      	ldr	r2, [pc, #116]	; (800202c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fbc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fc4:	d10b      	bne.n	8001fde <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2b80      	cmp	r3, #128	; 0x80
 8001fca:	d919      	bls.n	8002000 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2ba0      	cmp	r3, #160	; 0xa0
 8001fd0:	d902      	bls.n	8001fd8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	613b      	str	r3, [r7, #16]
 8001fd6:	e013      	b.n	8002000 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fd8:	2301      	movs	r3, #1
 8001fda:	613b      	str	r3, [r7, #16]
 8001fdc:	e010      	b.n	8002000 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2b80      	cmp	r3, #128	; 0x80
 8001fe2:	d902      	bls.n	8001fea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	613b      	str	r3, [r7, #16]
 8001fe8:	e00a      	b.n	8002000 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2b80      	cmp	r3, #128	; 0x80
 8001fee:	d102      	bne.n	8001ff6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	613b      	str	r3, [r7, #16]
 8001ff4:	e004      	b.n	8002000 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2b70      	cmp	r3, #112	; 0x70
 8001ffa:	d101      	bne.n	8002000 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002000:	4b0b      	ldr	r3, [pc, #44]	; (8002030 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f023 0207 	bic.w	r2, r3, #7
 8002008:	4909      	ldr	r1, [pc, #36]	; (8002030 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	4313      	orrs	r3, r2
 800200e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002010:	4b07      	ldr	r3, [pc, #28]	; (8002030 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0307 	and.w	r3, r3, #7
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	429a      	cmp	r2, r3
 800201c:	d001      	beq.n	8002022 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e000      	b.n	8002024 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002022:	2300      	movs	r3, #0
}
 8002024:	4618      	mov	r0, r3
 8002026:	3718      	adds	r7, #24
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40021000 	.word	0x40021000
 8002030:	40022000 	.word	0x40022000

08002034 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b086      	sub	sp, #24
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800203c:	2300      	movs	r3, #0
 800203e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002040:	2300      	movs	r3, #0
 8002042:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800204c:	2b00      	cmp	r3, #0
 800204e:	d041      	beq.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002054:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002058:	d02a      	beq.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800205a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800205e:	d824      	bhi.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002060:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002064:	d008      	beq.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002066:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800206a:	d81e      	bhi.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 800206c:	2b00      	cmp	r3, #0
 800206e:	d00a      	beq.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002070:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002074:	d010      	beq.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002076:	e018      	b.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002078:	4b86      	ldr	r3, [pc, #536]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	4a85      	ldr	r2, [pc, #532]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800207e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002082:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002084:	e015      	b.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	3304      	adds	r3, #4
 800208a:	2100      	movs	r1, #0
 800208c:	4618      	mov	r0, r3
 800208e:	f000 fabb 	bl	8002608 <RCCEx_PLLSAI1_Config>
 8002092:	4603      	mov	r3, r0
 8002094:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002096:	e00c      	b.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	3320      	adds	r3, #32
 800209c:	2100      	movs	r1, #0
 800209e:	4618      	mov	r0, r3
 80020a0:	f000 fba6 	bl	80027f0 <RCCEx_PLLSAI2_Config>
 80020a4:	4603      	mov	r3, r0
 80020a6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80020a8:	e003      	b.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	74fb      	strb	r3, [r7, #19]
      break;
 80020ae:	e000      	b.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80020b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80020b2:	7cfb      	ldrb	r3, [r7, #19]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d10b      	bne.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80020b8:	4b76      	ldr	r3, [pc, #472]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020c6:	4973      	ldr	r1, [pc, #460]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80020ce:	e001      	b.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020d0:	7cfb      	ldrb	r3, [r7, #19]
 80020d2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d041      	beq.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020e4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80020e8:	d02a      	beq.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80020ea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80020ee:	d824      	bhi.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80020f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80020f4:	d008      	beq.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80020f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80020fa:	d81e      	bhi.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d00a      	beq.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002100:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002104:	d010      	beq.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002106:	e018      	b.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002108:	4b62      	ldr	r3, [pc, #392]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	4a61      	ldr	r2, [pc, #388]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800210e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002112:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002114:	e015      	b.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	3304      	adds	r3, #4
 800211a:	2100      	movs	r1, #0
 800211c:	4618      	mov	r0, r3
 800211e:	f000 fa73 	bl	8002608 <RCCEx_PLLSAI1_Config>
 8002122:	4603      	mov	r3, r0
 8002124:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002126:	e00c      	b.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	3320      	adds	r3, #32
 800212c:	2100      	movs	r1, #0
 800212e:	4618      	mov	r0, r3
 8002130:	f000 fb5e 	bl	80027f0 <RCCEx_PLLSAI2_Config>
 8002134:	4603      	mov	r3, r0
 8002136:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002138:	e003      	b.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	74fb      	strb	r3, [r7, #19]
      break;
 800213e:	e000      	b.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002140:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002142:	7cfb      	ldrb	r3, [r7, #19]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d10b      	bne.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002148:	4b52      	ldr	r3, [pc, #328]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800214a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800214e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002156:	494f      	ldr	r1, [pc, #316]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002158:	4313      	orrs	r3, r2
 800215a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800215e:	e001      	b.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002160:	7cfb      	ldrb	r3, [r7, #19]
 8002162:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216c:	2b00      	cmp	r3, #0
 800216e:	f000 80a0 	beq.w	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002172:	2300      	movs	r3, #0
 8002174:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002176:	4b47      	ldr	r3, [pc, #284]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800217a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d101      	bne.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002182:	2301      	movs	r3, #1
 8002184:	e000      	b.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002186:	2300      	movs	r3, #0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d00d      	beq.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800218c:	4b41      	ldr	r3, [pc, #260]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800218e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002190:	4a40      	ldr	r2, [pc, #256]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002192:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002196:	6593      	str	r3, [r2, #88]	; 0x58
 8002198:	4b3e      	ldr	r3, [pc, #248]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800219a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800219c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a0:	60bb      	str	r3, [r7, #8]
 80021a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021a4:	2301      	movs	r3, #1
 80021a6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021a8:	4b3b      	ldr	r3, [pc, #236]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a3a      	ldr	r2, [pc, #232]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021b4:	f7fe fd70 	bl	8000c98 <HAL_GetTick>
 80021b8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80021ba:	e009      	b.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021bc:	f7fe fd6c 	bl	8000c98 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d902      	bls.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	74fb      	strb	r3, [r7, #19]
        break;
 80021ce:	e005      	b.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80021d0:	4b31      	ldr	r3, [pc, #196]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d0ef      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80021dc:	7cfb      	ldrb	r3, [r7, #19]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d15c      	bne.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80021e2:	4b2c      	ldr	r3, [pc, #176]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021ec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d01f      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021fa:	697a      	ldr	r2, [r7, #20]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d019      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002200:	4b24      	ldr	r3, [pc, #144]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002206:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800220a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800220c:	4b21      	ldr	r3, [pc, #132]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800220e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002212:	4a20      	ldr	r2, [pc, #128]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002218:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800221c:	4b1d      	ldr	r3, [pc, #116]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800221e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002222:	4a1c      	ldr	r2, [pc, #112]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002224:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002228:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800222c:	4a19      	ldr	r2, [pc, #100]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	2b00      	cmp	r3, #0
 800223c:	d016      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800223e:	f7fe fd2b 	bl	8000c98 <HAL_GetTick>
 8002242:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002244:	e00b      	b.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002246:	f7fe fd27 	bl	8000c98 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	f241 3288 	movw	r2, #5000	; 0x1388
 8002254:	4293      	cmp	r3, r2
 8002256:	d902      	bls.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	74fb      	strb	r3, [r7, #19]
            break;
 800225c:	e006      	b.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800225e:	4b0d      	ldr	r3, [pc, #52]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002260:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	2b00      	cmp	r3, #0
 800226a:	d0ec      	beq.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800226c:	7cfb      	ldrb	r3, [r7, #19]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d10c      	bne.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002272:	4b08      	ldr	r3, [pc, #32]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002274:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002278:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002282:	4904      	ldr	r1, [pc, #16]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002284:	4313      	orrs	r3, r2
 8002286:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800228a:	e009      	b.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800228c:	7cfb      	ldrb	r3, [r7, #19]
 800228e:	74bb      	strb	r3, [r7, #18]
 8002290:	e006      	b.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002292:	bf00      	nop
 8002294:	40021000 	.word	0x40021000
 8002298:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800229c:	7cfb      	ldrb	r3, [r7, #19]
 800229e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022a0:	7c7b      	ldrb	r3, [r7, #17]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d105      	bne.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022a6:	4b9e      	ldr	r3, [pc, #632]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022aa:	4a9d      	ldr	r2, [pc, #628]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022b0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d00a      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022be:	4b98      	ldr	r3, [pc, #608]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022c4:	f023 0203 	bic.w	r2, r3, #3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022cc:	4994      	ldr	r1, [pc, #592]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d00a      	beq.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022e0:	4b8f      	ldr	r3, [pc, #572]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e6:	f023 020c 	bic.w	r2, r3, #12
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ee:	498c      	ldr	r1, [pc, #560]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0304 	and.w	r3, r3, #4
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d00a      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002302:	4b87      	ldr	r3, [pc, #540]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002308:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002310:	4983      	ldr	r1, [pc, #524]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002312:	4313      	orrs	r3, r2
 8002314:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0308 	and.w	r3, r3, #8
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00a      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002324:	4b7e      	ldr	r3, [pc, #504]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800232a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002332:	497b      	ldr	r1, [pc, #492]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002334:	4313      	orrs	r3, r2
 8002336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0310 	and.w	r3, r3, #16
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00a      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002346:	4b76      	ldr	r3, [pc, #472]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800234c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002354:	4972      	ldr	r1, [pc, #456]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002356:	4313      	orrs	r3, r2
 8002358:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0320 	and.w	r3, r3, #32
 8002364:	2b00      	cmp	r3, #0
 8002366:	d00a      	beq.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002368:	4b6d      	ldr	r3, [pc, #436]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800236a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800236e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002376:	496a      	ldr	r1, [pc, #424]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002378:	4313      	orrs	r3, r2
 800237a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002386:	2b00      	cmp	r3, #0
 8002388:	d00a      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800238a:	4b65      	ldr	r3, [pc, #404]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800238c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002390:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002398:	4961      	ldr	r1, [pc, #388]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800239a:	4313      	orrs	r3, r2
 800239c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d00a      	beq.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80023ac:	4b5c      	ldr	r3, [pc, #368]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023ba:	4959      	ldr	r1, [pc, #356]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d00a      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023ce:	4b54      	ldr	r3, [pc, #336]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023d4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023dc:	4950      	ldr	r1, [pc, #320]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d00a      	beq.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80023f0:	4b4b      	ldr	r3, [pc, #300]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023fe:	4948      	ldr	r1, [pc, #288]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002400:	4313      	orrs	r3, r2
 8002402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00a      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002412:	4b43      	ldr	r3, [pc, #268]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002418:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002420:	493f      	ldr	r1, [pc, #252]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002422:	4313      	orrs	r3, r2
 8002424:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d028      	beq.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002434:	4b3a      	ldr	r3, [pc, #232]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800243a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002442:	4937      	ldr	r1, [pc, #220]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002444:	4313      	orrs	r3, r2
 8002446:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800244e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002452:	d106      	bne.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002454:	4b32      	ldr	r3, [pc, #200]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	4a31      	ldr	r2, [pc, #196]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800245a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800245e:	60d3      	str	r3, [r2, #12]
 8002460:	e011      	b.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002466:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800246a:	d10c      	bne.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	3304      	adds	r3, #4
 8002470:	2101      	movs	r1, #1
 8002472:	4618      	mov	r0, r3
 8002474:	f000 f8c8 	bl	8002608 <RCCEx_PLLSAI1_Config>
 8002478:	4603      	mov	r3, r0
 800247a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800247c:	7cfb      	ldrb	r3, [r7, #19]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002482:	7cfb      	ldrb	r3, [r7, #19]
 8002484:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d028      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002492:	4b23      	ldr	r3, [pc, #140]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002494:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002498:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a0:	491f      	ldr	r1, [pc, #124]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024b0:	d106      	bne.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024b2:	4b1b      	ldr	r3, [pc, #108]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	4a1a      	ldr	r2, [pc, #104]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024bc:	60d3      	str	r3, [r2, #12]
 80024be:	e011      	b.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024c8:	d10c      	bne.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	3304      	adds	r3, #4
 80024ce:	2101      	movs	r1, #1
 80024d0:	4618      	mov	r0, r3
 80024d2:	f000 f899 	bl	8002608 <RCCEx_PLLSAI1_Config>
 80024d6:	4603      	mov	r3, r0
 80024d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024da:	7cfb      	ldrb	r3, [r7, #19]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80024e0:	7cfb      	ldrb	r3, [r7, #19]
 80024e2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d02b      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80024f0:	4b0b      	ldr	r3, [pc, #44]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024fe:	4908      	ldr	r1, [pc, #32]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002500:	4313      	orrs	r3, r2
 8002502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800250a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800250e:	d109      	bne.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002510:	4b03      	ldr	r3, [pc, #12]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	4a02      	ldr	r2, [pc, #8]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002516:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800251a:	60d3      	str	r3, [r2, #12]
 800251c:	e014      	b.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800251e:	bf00      	nop
 8002520:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002528:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800252c:	d10c      	bne.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	3304      	adds	r3, #4
 8002532:	2101      	movs	r1, #1
 8002534:	4618      	mov	r0, r3
 8002536:	f000 f867 	bl	8002608 <RCCEx_PLLSAI1_Config>
 800253a:	4603      	mov	r3, r0
 800253c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800253e:	7cfb      	ldrb	r3, [r7, #19]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002544:	7cfb      	ldrb	r3, [r7, #19]
 8002546:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d02f      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002554:	4b2b      	ldr	r3, [pc, #172]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800255a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002562:	4928      	ldr	r1, [pc, #160]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002564:	4313      	orrs	r3, r2
 8002566:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800256e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002572:	d10d      	bne.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	3304      	adds	r3, #4
 8002578:	2102      	movs	r1, #2
 800257a:	4618      	mov	r0, r3
 800257c:	f000 f844 	bl	8002608 <RCCEx_PLLSAI1_Config>
 8002580:	4603      	mov	r3, r0
 8002582:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002584:	7cfb      	ldrb	r3, [r7, #19]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d014      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800258a:	7cfb      	ldrb	r3, [r7, #19]
 800258c:	74bb      	strb	r3, [r7, #18]
 800258e:	e011      	b.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002594:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002598:	d10c      	bne.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	3320      	adds	r3, #32
 800259e:	2102      	movs	r1, #2
 80025a0:	4618      	mov	r0, r3
 80025a2:	f000 f925 	bl	80027f0 <RCCEx_PLLSAI2_Config>
 80025a6:	4603      	mov	r3, r0
 80025a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025aa:	7cfb      	ldrb	r3, [r7, #19]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80025b0:	7cfb      	ldrb	r3, [r7, #19]
 80025b2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d00a      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80025c0:	4b10      	ldr	r3, [pc, #64]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025ce:	490d      	ldr	r1, [pc, #52]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00b      	beq.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80025e2:	4b08      	ldr	r3, [pc, #32]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025f2:	4904      	ldr	r1, [pc, #16]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80025fa:	7cbb      	ldrb	r3, [r7, #18]
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3718      	adds	r7, #24
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	40021000 	.word	0x40021000

08002608 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002612:	2300      	movs	r3, #0
 8002614:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002616:	4b75      	ldr	r3, [pc, #468]	; (80027ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	f003 0303 	and.w	r3, r3, #3
 800261e:	2b00      	cmp	r3, #0
 8002620:	d018      	beq.n	8002654 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002622:	4b72      	ldr	r3, [pc, #456]	; (80027ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	f003 0203 	and.w	r2, r3, #3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	429a      	cmp	r2, r3
 8002630:	d10d      	bne.n	800264e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
       ||
 8002636:	2b00      	cmp	r3, #0
 8002638:	d009      	beq.n	800264e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800263a:	4b6c      	ldr	r3, [pc, #432]	; (80027ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	091b      	lsrs	r3, r3, #4
 8002640:	f003 0307 	and.w	r3, r3, #7
 8002644:	1c5a      	adds	r2, r3, #1
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
       ||
 800264a:	429a      	cmp	r2, r3
 800264c:	d047      	beq.n	80026de <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	73fb      	strb	r3, [r7, #15]
 8002652:	e044      	b.n	80026de <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2b03      	cmp	r3, #3
 800265a:	d018      	beq.n	800268e <RCCEx_PLLSAI1_Config+0x86>
 800265c:	2b03      	cmp	r3, #3
 800265e:	d825      	bhi.n	80026ac <RCCEx_PLLSAI1_Config+0xa4>
 8002660:	2b01      	cmp	r3, #1
 8002662:	d002      	beq.n	800266a <RCCEx_PLLSAI1_Config+0x62>
 8002664:	2b02      	cmp	r3, #2
 8002666:	d009      	beq.n	800267c <RCCEx_PLLSAI1_Config+0x74>
 8002668:	e020      	b.n	80026ac <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800266a:	4b60      	ldr	r3, [pc, #384]	; (80027ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d11d      	bne.n	80026b2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800267a:	e01a      	b.n	80026b2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800267c:	4b5b      	ldr	r3, [pc, #364]	; (80027ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002684:	2b00      	cmp	r3, #0
 8002686:	d116      	bne.n	80026b6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800268c:	e013      	b.n	80026b6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800268e:	4b57      	ldr	r3, [pc, #348]	; (80027ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d10f      	bne.n	80026ba <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800269a:	4b54      	ldr	r3, [pc, #336]	; (80027ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d109      	bne.n	80026ba <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80026aa:	e006      	b.n	80026ba <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	73fb      	strb	r3, [r7, #15]
      break;
 80026b0:	e004      	b.n	80026bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026b2:	bf00      	nop
 80026b4:	e002      	b.n	80026bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026b6:	bf00      	nop
 80026b8:	e000      	b.n	80026bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026ba:	bf00      	nop
    }

    if(status == HAL_OK)
 80026bc:	7bfb      	ldrb	r3, [r7, #15]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d10d      	bne.n	80026de <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80026c2:	4b4a      	ldr	r3, [pc, #296]	; (80027ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6819      	ldr	r1, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	3b01      	subs	r3, #1
 80026d4:	011b      	lsls	r3, r3, #4
 80026d6:	430b      	orrs	r3, r1
 80026d8:	4944      	ldr	r1, [pc, #272]	; (80027ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80026de:	7bfb      	ldrb	r3, [r7, #15]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d17d      	bne.n	80027e0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80026e4:	4b41      	ldr	r3, [pc, #260]	; (80027ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a40      	ldr	r2, [pc, #256]	; (80027ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80026ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80026ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026f0:	f7fe fad2 	bl	8000c98 <HAL_GetTick>
 80026f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80026f6:	e009      	b.n	800270c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026f8:	f7fe face 	bl	8000c98 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b02      	cmp	r3, #2
 8002704:	d902      	bls.n	800270c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	73fb      	strb	r3, [r7, #15]
        break;
 800270a:	e005      	b.n	8002718 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800270c:	4b37      	ldr	r3, [pc, #220]	; (80027ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1ef      	bne.n	80026f8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002718:	7bfb      	ldrb	r3, [r7, #15]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d160      	bne.n	80027e0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d111      	bne.n	8002748 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002724:	4b31      	ldr	r3, [pc, #196]	; (80027ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002726:	691b      	ldr	r3, [r3, #16]
 8002728:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800272c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	6892      	ldr	r2, [r2, #8]
 8002734:	0211      	lsls	r1, r2, #8
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	68d2      	ldr	r2, [r2, #12]
 800273a:	0912      	lsrs	r2, r2, #4
 800273c:	0452      	lsls	r2, r2, #17
 800273e:	430a      	orrs	r2, r1
 8002740:	492a      	ldr	r1, [pc, #168]	; (80027ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002742:	4313      	orrs	r3, r2
 8002744:	610b      	str	r3, [r1, #16]
 8002746:	e027      	b.n	8002798 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d112      	bne.n	8002774 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800274e:	4b27      	ldr	r3, [pc, #156]	; (80027ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002756:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	6892      	ldr	r2, [r2, #8]
 800275e:	0211      	lsls	r1, r2, #8
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	6912      	ldr	r2, [r2, #16]
 8002764:	0852      	lsrs	r2, r2, #1
 8002766:	3a01      	subs	r2, #1
 8002768:	0552      	lsls	r2, r2, #21
 800276a:	430a      	orrs	r2, r1
 800276c:	491f      	ldr	r1, [pc, #124]	; (80027ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800276e:	4313      	orrs	r3, r2
 8002770:	610b      	str	r3, [r1, #16]
 8002772:	e011      	b.n	8002798 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002774:	4b1d      	ldr	r3, [pc, #116]	; (80027ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800277c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	6892      	ldr	r2, [r2, #8]
 8002784:	0211      	lsls	r1, r2, #8
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	6952      	ldr	r2, [r2, #20]
 800278a:	0852      	lsrs	r2, r2, #1
 800278c:	3a01      	subs	r2, #1
 800278e:	0652      	lsls	r2, r2, #25
 8002790:	430a      	orrs	r2, r1
 8002792:	4916      	ldr	r1, [pc, #88]	; (80027ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002794:	4313      	orrs	r3, r2
 8002796:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002798:	4b14      	ldr	r3, [pc, #80]	; (80027ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a13      	ldr	r2, [pc, #76]	; (80027ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800279e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80027a2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a4:	f7fe fa78 	bl	8000c98 <HAL_GetTick>
 80027a8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80027aa:	e009      	b.n	80027c0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027ac:	f7fe fa74 	bl	8000c98 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d902      	bls.n	80027c0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	73fb      	strb	r3, [r7, #15]
          break;
 80027be:	e005      	b.n	80027cc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80027c0:	4b0a      	ldr	r3, [pc, #40]	; (80027ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d0ef      	beq.n	80027ac <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80027cc:	7bfb      	ldrb	r3, [r7, #15]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d106      	bne.n	80027e0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80027d2:	4b06      	ldr	r3, [pc, #24]	; (80027ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80027d4:	691a      	ldr	r2, [r3, #16]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	4904      	ldr	r1, [pc, #16]	; (80027ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80027e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	40021000 	.word	0x40021000

080027f0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80027fa:	2300      	movs	r3, #0
 80027fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80027fe:	4b6a      	ldr	r3, [pc, #424]	; (80029a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	f003 0303 	and.w	r3, r3, #3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d018      	beq.n	800283c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800280a:	4b67      	ldr	r3, [pc, #412]	; (80029a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	f003 0203 	and.w	r2, r3, #3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	429a      	cmp	r2, r3
 8002818:	d10d      	bne.n	8002836 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
       ||
 800281e:	2b00      	cmp	r3, #0
 8002820:	d009      	beq.n	8002836 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002822:	4b61      	ldr	r3, [pc, #388]	; (80029a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	091b      	lsrs	r3, r3, #4
 8002828:	f003 0307 	and.w	r3, r3, #7
 800282c:	1c5a      	adds	r2, r3, #1
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
       ||
 8002832:	429a      	cmp	r2, r3
 8002834:	d047      	beq.n	80028c6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	73fb      	strb	r3, [r7, #15]
 800283a:	e044      	b.n	80028c6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2b03      	cmp	r3, #3
 8002842:	d018      	beq.n	8002876 <RCCEx_PLLSAI2_Config+0x86>
 8002844:	2b03      	cmp	r3, #3
 8002846:	d825      	bhi.n	8002894 <RCCEx_PLLSAI2_Config+0xa4>
 8002848:	2b01      	cmp	r3, #1
 800284a:	d002      	beq.n	8002852 <RCCEx_PLLSAI2_Config+0x62>
 800284c:	2b02      	cmp	r3, #2
 800284e:	d009      	beq.n	8002864 <RCCEx_PLLSAI2_Config+0x74>
 8002850:	e020      	b.n	8002894 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002852:	4b55      	ldr	r3, [pc, #340]	; (80029a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d11d      	bne.n	800289a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002862:	e01a      	b.n	800289a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002864:	4b50      	ldr	r3, [pc, #320]	; (80029a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800286c:	2b00      	cmp	r3, #0
 800286e:	d116      	bne.n	800289e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002874:	e013      	b.n	800289e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002876:	4b4c      	ldr	r3, [pc, #304]	; (80029a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d10f      	bne.n	80028a2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002882:	4b49      	ldr	r3, [pc, #292]	; (80029a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d109      	bne.n	80028a2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002892:	e006      	b.n	80028a2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	73fb      	strb	r3, [r7, #15]
      break;
 8002898:	e004      	b.n	80028a4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800289a:	bf00      	nop
 800289c:	e002      	b.n	80028a4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800289e:	bf00      	nop
 80028a0:	e000      	b.n	80028a4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80028a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80028a4:	7bfb      	ldrb	r3, [r7, #15]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d10d      	bne.n	80028c6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80028aa:	4b3f      	ldr	r3, [pc, #252]	; (80029a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6819      	ldr	r1, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	3b01      	subs	r3, #1
 80028bc:	011b      	lsls	r3, r3, #4
 80028be:	430b      	orrs	r3, r1
 80028c0:	4939      	ldr	r1, [pc, #228]	; (80029a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80028c6:	7bfb      	ldrb	r3, [r7, #15]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d167      	bne.n	800299c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80028cc:	4b36      	ldr	r3, [pc, #216]	; (80029a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a35      	ldr	r2, [pc, #212]	; (80029a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028d8:	f7fe f9de 	bl	8000c98 <HAL_GetTick>
 80028dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80028de:	e009      	b.n	80028f4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80028e0:	f7fe f9da 	bl	8000c98 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d902      	bls.n	80028f4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	73fb      	strb	r3, [r7, #15]
        break;
 80028f2:	e005      	b.n	8002900 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80028f4:	4b2c      	ldr	r3, [pc, #176]	; (80029a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d1ef      	bne.n	80028e0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002900:	7bfb      	ldrb	r3, [r7, #15]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d14a      	bne.n	800299c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d111      	bne.n	8002930 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800290c:	4b26      	ldr	r3, [pc, #152]	; (80029a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800290e:	695b      	ldr	r3, [r3, #20]
 8002910:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002914:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	6892      	ldr	r2, [r2, #8]
 800291c:	0211      	lsls	r1, r2, #8
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	68d2      	ldr	r2, [r2, #12]
 8002922:	0912      	lsrs	r2, r2, #4
 8002924:	0452      	lsls	r2, r2, #17
 8002926:	430a      	orrs	r2, r1
 8002928:	491f      	ldr	r1, [pc, #124]	; (80029a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800292a:	4313      	orrs	r3, r2
 800292c:	614b      	str	r3, [r1, #20]
 800292e:	e011      	b.n	8002954 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002930:	4b1d      	ldr	r3, [pc, #116]	; (80029a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002932:	695b      	ldr	r3, [r3, #20]
 8002934:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002938:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	6892      	ldr	r2, [r2, #8]
 8002940:	0211      	lsls	r1, r2, #8
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	6912      	ldr	r2, [r2, #16]
 8002946:	0852      	lsrs	r2, r2, #1
 8002948:	3a01      	subs	r2, #1
 800294a:	0652      	lsls	r2, r2, #25
 800294c:	430a      	orrs	r2, r1
 800294e:	4916      	ldr	r1, [pc, #88]	; (80029a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002950:	4313      	orrs	r3, r2
 8002952:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002954:	4b14      	ldr	r3, [pc, #80]	; (80029a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a13      	ldr	r2, [pc, #76]	; (80029a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800295a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800295e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002960:	f7fe f99a 	bl	8000c98 <HAL_GetTick>
 8002964:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002966:	e009      	b.n	800297c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002968:	f7fe f996 	bl	8000c98 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d902      	bls.n	800297c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	73fb      	strb	r3, [r7, #15]
          break;
 800297a:	e005      	b.n	8002988 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800297c:	4b0a      	ldr	r3, [pc, #40]	; (80029a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d0ef      	beq.n	8002968 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002988:	7bfb      	ldrb	r3, [r7, #15]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d106      	bne.n	800299c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800298e:	4b06      	ldr	r3, [pc, #24]	; (80029a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002990:	695a      	ldr	r2, [r3, #20]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	4904      	ldr	r1, [pc, #16]	; (80029a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002998:	4313      	orrs	r3, r2
 800299a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800299c:	7bfb      	ldrb	r3, [r7, #15]
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	40021000 	.word	0x40021000

080029ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d101      	bne.n	80029be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e040      	b.n	8002a40 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d106      	bne.n	80029d4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f7fd ff58 	bl	8000884 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2224      	movs	r2, #36	; 0x24
 80029d8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f022 0201 	bic.w	r2, r2, #1
 80029e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 fc94 	bl	8003318 <UART_SetConfig>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d101      	bne.n	80029fa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e022      	b.n	8002a40 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d002      	beq.n	8002a08 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 ff40 	bl	8003888 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	685a      	ldr	r2, [r3, #4]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	689a      	ldr	r2, [r3, #8]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a26:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f042 0201 	orr.w	r2, r2, #1
 8002a36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f000 ffc7 	bl	80039cc <UART_CheckIdleState>
 8002a3e:	4603      	mov	r3, r0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3708      	adds	r7, #8
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b08a      	sub	sp, #40	; 0x28
 8002a4c:	af02      	add	r7, sp, #8
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	603b      	str	r3, [r7, #0]
 8002a54:	4613      	mov	r3, r2
 8002a56:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a5c:	2b20      	cmp	r3, #32
 8002a5e:	f040 8082 	bne.w	8002b66 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d002      	beq.n	8002a6e <HAL_UART_Transmit+0x26>
 8002a68:	88fb      	ldrh	r3, [r7, #6]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e07a      	b.n	8002b68 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d101      	bne.n	8002a80 <HAL_UART_Transmit+0x38>
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	e073      	b.n	8002b68 <HAL_UART_Transmit+0x120>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2221      	movs	r2, #33	; 0x21
 8002a94:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a96:	f7fe f8ff 	bl	8000c98 <HAL_GetTick>
 8002a9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	88fa      	ldrh	r2, [r7, #6]
 8002aa0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	88fa      	ldrh	r2, [r7, #6]
 8002aa8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ab4:	d108      	bne.n	8002ac8 <HAL_UART_Transmit+0x80>
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d104      	bne.n	8002ac8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	61bb      	str	r3, [r7, #24]
 8002ac6:	e003      	b.n	8002ad0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002acc:	2300      	movs	r3, #0
 8002ace:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002ad8:	e02d      	b.n	8002b36 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	9300      	str	r3, [sp, #0]
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	2180      	movs	r1, #128	; 0x80
 8002ae4:	68f8      	ldr	r0, [r7, #12]
 8002ae6:	f000 ffba 	bl	8003a5e <UART_WaitOnFlagUntilTimeout>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e039      	b.n	8002b68 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d10b      	bne.n	8002b12 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	881a      	ldrh	r2, [r3, #0]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b06:	b292      	uxth	r2, r2
 8002b08:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	3302      	adds	r3, #2
 8002b0e:	61bb      	str	r3, [r7, #24]
 8002b10:	e008      	b.n	8002b24 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	781a      	ldrb	r2, [r3, #0]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	b292      	uxth	r2, r2
 8002b1c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	3301      	adds	r3, #1
 8002b22:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	3b01      	subs	r3, #1
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1cb      	bne.n	8002ada <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	9300      	str	r3, [sp, #0]
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	2140      	movs	r1, #64	; 0x40
 8002b4c:	68f8      	ldr	r0, [r7, #12]
 8002b4e:	f000 ff86 	bl	8003a5e <UART_WaitOnFlagUntilTimeout>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d001      	beq.n	8002b5c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e005      	b.n	8002b68 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2220      	movs	r2, #32
 8002b60:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002b62:	2300      	movs	r3, #0
 8002b64:	e000      	b.n	8002b68 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002b66:	2302      	movs	r3, #2
  }
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3720      	adds	r7, #32
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b08a      	sub	sp, #40	; 0x28
 8002b74:	af02      	add	r7, sp, #8
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	603b      	str	r3, [r7, #0]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b84:	2b20      	cmp	r3, #32
 8002b86:	f040 80bf 	bne.w	8002d08 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d002      	beq.n	8002b96 <HAL_UART_Receive+0x26>
 8002b90:	88fb      	ldrh	r3, [r7, #6]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e0b7      	b.n	8002d0a <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d101      	bne.n	8002ba8 <HAL_UART_Receive+0x38>
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	e0b0      	b.n	8002d0a <HAL_UART_Receive+0x19a>
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2222      	movs	r2, #34	; 0x22
 8002bbc:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002bc4:	f7fe f868 	bl	8000c98 <HAL_GetTick>
 8002bc8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	88fa      	ldrh	r2, [r7, #6]
 8002bce:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	88fa      	ldrh	r2, [r7, #6]
 8002bd6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002be2:	d10e      	bne.n	8002c02 <HAL_UART_Receive+0x92>
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d105      	bne.n	8002bf8 <HAL_UART_Receive+0x88>
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002bf2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002bf6:	e02d      	b.n	8002c54 <HAL_UART_Receive+0xe4>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	22ff      	movs	r2, #255	; 0xff
 8002bfc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002c00:	e028      	b.n	8002c54 <HAL_UART_Receive+0xe4>
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d10d      	bne.n	8002c26 <HAL_UART_Receive+0xb6>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d104      	bne.n	8002c1c <HAL_UART_Receive+0xac>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	22ff      	movs	r2, #255	; 0xff
 8002c16:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002c1a:	e01b      	b.n	8002c54 <HAL_UART_Receive+0xe4>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	227f      	movs	r2, #127	; 0x7f
 8002c20:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002c24:	e016      	b.n	8002c54 <HAL_UART_Receive+0xe4>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c2e:	d10d      	bne.n	8002c4c <HAL_UART_Receive+0xdc>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	691b      	ldr	r3, [r3, #16]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d104      	bne.n	8002c42 <HAL_UART_Receive+0xd2>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	227f      	movs	r2, #127	; 0x7f
 8002c3c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002c40:	e008      	b.n	8002c54 <HAL_UART_Receive+0xe4>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	223f      	movs	r2, #63	; 0x3f
 8002c46:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002c4a:	e003      	b.n	8002c54 <HAL_UART_Receive+0xe4>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002c5a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c64:	d108      	bne.n	8002c78 <HAL_UART_Receive+0x108>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d104      	bne.n	8002c78 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	61bb      	str	r3, [r7, #24]
 8002c76:	e003      	b.n	8002c80 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002c88:	e033      	b.n	8002cf2 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	9300      	str	r3, [sp, #0]
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	2200      	movs	r2, #0
 8002c92:	2120      	movs	r1, #32
 8002c94:	68f8      	ldr	r0, [r7, #12]
 8002c96:	f000 fee2 	bl	8003a5e <UART_WaitOnFlagUntilTimeout>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d001      	beq.n	8002ca4 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e032      	b.n	8002d0a <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d10c      	bne.n	8002cc4 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002cb0:	b29a      	uxth	r2, r3
 8002cb2:	8a7b      	ldrh	r3, [r7, #18]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	b29a      	uxth	r2, r3
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	3302      	adds	r3, #2
 8002cc0:	61bb      	str	r3, [r7, #24]
 8002cc2:	e00d      	b.n	8002ce0 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	b2da      	uxtb	r2, r3
 8002cce:	8a7b      	ldrh	r3, [r7, #18]
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	b2da      	uxtb	r2, r3
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	3301      	adds	r3, #1
 8002cde:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	3b01      	subs	r3, #1
 8002cea:	b29a      	uxth	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1c5      	bne.n	8002c8a <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2220      	movs	r2, #32
 8002d02:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002d04:	2300      	movs	r3, #0
 8002d06:	e000      	b.n	8002d0a <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8002d08:	2302      	movs	r3, #2
  }
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3720      	adds	r7, #32
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
	...

08002d14 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b0ba      	sub	sp, #232	; 0xe8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	69db      	ldr	r3, [r3, #28]
 8002d22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002d3a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002d3e:	f640 030f 	movw	r3, #2063	; 0x80f
 8002d42:	4013      	ands	r3, r2
 8002d44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002d48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d115      	bne.n	8002d7c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002d50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d54:	f003 0320 	and.w	r3, r3, #32
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d00f      	beq.n	8002d7c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002d5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d60:	f003 0320 	and.w	r3, r3, #32
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d009      	beq.n	8002d7c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	f000 82a6 	beq.w	80032be <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	4798      	blx	r3
      }
      return;
 8002d7a:	e2a0      	b.n	80032be <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002d7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	f000 8117 	beq.w	8002fb4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002d86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d106      	bne.n	8002da0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002d92:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002d96:	4b85      	ldr	r3, [pc, #532]	; (8002fac <HAL_UART_IRQHandler+0x298>)
 8002d98:	4013      	ands	r3, r2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	f000 810a 	beq.w	8002fb4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002da0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002da4:	f003 0301 	and.w	r3, r3, #1
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d011      	beq.n	8002dd0 <HAL_UART_IRQHandler+0xbc>
 8002dac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d00b      	beq.n	8002dd0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dc6:	f043 0201 	orr.w	r2, r3, #1
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002dd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dd4:	f003 0302 	and.w	r3, r3, #2
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d011      	beq.n	8002e00 <HAL_UART_IRQHandler+0xec>
 8002ddc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002de0:	f003 0301 	and.w	r3, r3, #1
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d00b      	beq.n	8002e00 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2202      	movs	r2, #2
 8002dee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002df6:	f043 0204 	orr.w	r2, r3, #4
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e04:	f003 0304 	and.w	r3, r3, #4
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d011      	beq.n	8002e30 <HAL_UART_IRQHandler+0x11c>
 8002e0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e10:	f003 0301 	and.w	r3, r3, #1
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d00b      	beq.n	8002e30 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2204      	movs	r2, #4
 8002e1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e26:	f043 0202 	orr.w	r2, r3, #2
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002e30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e34:	f003 0308 	and.w	r3, r3, #8
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d017      	beq.n	8002e6c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002e3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e40:	f003 0320 	and.w	r3, r3, #32
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d105      	bne.n	8002e54 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002e48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e4c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d00b      	beq.n	8002e6c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2208      	movs	r2, #8
 8002e5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e62:	f043 0208 	orr.w	r2, r3, #8
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002e6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d012      	beq.n	8002e9e <HAL_UART_IRQHandler+0x18a>
 8002e78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d00c      	beq.n	8002e9e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e94:	f043 0220 	orr.w	r2, r3, #32
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f000 820c 	beq.w	80032c2 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eae:	f003 0320 	and.w	r3, r3, #32
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00d      	beq.n	8002ed2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002eb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002eba:	f003 0320 	and.w	r3, r3, #32
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d007      	beq.n	8002ed2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d003      	beq.n	8002ed2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ed8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee6:	2b40      	cmp	r3, #64	; 0x40
 8002ee8:	d005      	beq.n	8002ef6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002eea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002eee:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d04f      	beq.n	8002f96 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 fe75 	bl	8003be6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f06:	2b40      	cmp	r3, #64	; 0x40
 8002f08:	d141      	bne.n	8002f8e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	3308      	adds	r3, #8
 8002f10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f18:	e853 3f00 	ldrex	r3, [r3]
 8002f1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002f20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	3308      	adds	r3, #8
 8002f32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002f36:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002f3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f3e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002f42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002f46:	e841 2300 	strex	r3, r2, [r1]
 8002f4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002f4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1d9      	bne.n	8002f0a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d013      	beq.n	8002f86 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f62:	4a13      	ldr	r2, [pc, #76]	; (8002fb0 <HAL_UART_IRQHandler+0x29c>)
 8002f64:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7fe f813 	bl	8000f96 <HAL_DMA_Abort_IT>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d017      	beq.n	8002fa6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8002f80:	4610      	mov	r0, r2
 8002f82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f84:	e00f      	b.n	8002fa6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 f9b0 	bl	80032ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f8c:	e00b      	b.n	8002fa6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f000 f9ac 	bl	80032ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f94:	e007      	b.n	8002fa6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 f9a8 	bl	80032ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8002fa4:	e18d      	b.n	80032c2 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fa6:	bf00      	nop
    return;
 8002fa8:	e18b      	b.n	80032c2 <HAL_UART_IRQHandler+0x5ae>
 8002faa:	bf00      	nop
 8002fac:	04000120 	.word	0x04000120
 8002fb0:	08003cad 	.word	0x08003cad

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	f040 8146 	bne.w	800324a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002fbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fc2:	f003 0310 	and.w	r3, r3, #16
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	f000 813f 	beq.w	800324a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002fcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fd0:	f003 0310 	and.w	r3, r3, #16
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f000 8138 	beq.w	800324a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2210      	movs	r2, #16
 8002fe0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fec:	2b40      	cmp	r3, #64	; 0x40
 8002fee:	f040 80b4 	bne.w	800315a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002ffe:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003002:	2b00      	cmp	r3, #0
 8003004:	f000 815f 	beq.w	80032c6 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800300e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003012:	429a      	cmp	r2, r3
 8003014:	f080 8157 	bcs.w	80032c6 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800301e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0320 	and.w	r3, r3, #32
 800302e:	2b00      	cmp	r3, #0
 8003030:	f040 8085 	bne.w	800313e <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800303c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003040:	e853 3f00 	ldrex	r3, [r3]
 8003044:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003048:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800304c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003050:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	461a      	mov	r2, r3
 800305a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800305e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003062:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003066:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800306a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800306e:	e841 2300 	strex	r3, r2, [r1]
 8003072:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003076:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1da      	bne.n	8003034 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	3308      	adds	r3, #8
 8003084:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003086:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003088:	e853 3f00 	ldrex	r3, [r3]
 800308c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800308e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003090:	f023 0301 	bic.w	r3, r3, #1
 8003094:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	3308      	adds	r3, #8
 800309e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80030a2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80030a6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030a8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80030aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80030ae:	e841 2300 	strex	r3, r2, [r1]
 80030b2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80030b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d1e1      	bne.n	800307e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	3308      	adds	r3, #8
 80030c0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030c4:	e853 3f00 	ldrex	r3, [r3]
 80030c8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80030ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	3308      	adds	r3, #8
 80030da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80030de:	66fa      	str	r2, [r7, #108]	; 0x6c
 80030e0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030e2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80030e4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80030e6:	e841 2300 	strex	r3, r2, [r1]
 80030ea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80030ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1e3      	bne.n	80030ba <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2220      	movs	r2, #32
 80030f6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003104:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003106:	e853 3f00 	ldrex	r3, [r3]
 800310a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800310c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800310e:	f023 0310 	bic.w	r3, r3, #16
 8003112:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	461a      	mov	r2, r3
 800311c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003120:	65bb      	str	r3, [r7, #88]	; 0x58
 8003122:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003124:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003126:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003128:	e841 2300 	strex	r3, r2, [r1]
 800312c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800312e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003130:	2b00      	cmp	r3, #0
 8003132:	d1e4      	bne.n	80030fe <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003138:	4618      	mov	r0, r3
 800313a:	f7fd feee 	bl	8000f1a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800314a:	b29b      	uxth	r3, r3
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	b29b      	uxth	r3, r3
 8003150:	4619      	mov	r1, r3
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 f8d4 	bl	8003300 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003158:	e0b5      	b.n	80032c6 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003166:	b29b      	uxth	r3, r3
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003174:	b29b      	uxth	r3, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	f000 80a7 	beq.w	80032ca <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800317c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003180:	2b00      	cmp	r3, #0
 8003182:	f000 80a2 	beq.w	80032ca <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800318c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800318e:	e853 3f00 	ldrex	r3, [r3]
 8003192:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003196:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800319a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	461a      	mov	r2, r3
 80031a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80031a8:	647b      	str	r3, [r7, #68]	; 0x44
 80031aa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80031ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80031b0:	e841 2300 	strex	r3, r2, [r1]
 80031b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80031b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d1e4      	bne.n	8003186 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	3308      	adds	r3, #8
 80031c2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c6:	e853 3f00 	ldrex	r3, [r3]
 80031ca:	623b      	str	r3, [r7, #32]
   return(result);
 80031cc:	6a3b      	ldr	r3, [r7, #32]
 80031ce:	f023 0301 	bic.w	r3, r3, #1
 80031d2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	3308      	adds	r3, #8
 80031dc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80031e0:	633a      	str	r2, [r7, #48]	; 0x30
 80031e2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80031e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031e8:	e841 2300 	strex	r3, r2, [r1]
 80031ec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80031ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d1e3      	bne.n	80031bc <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2220      	movs	r2, #32
 80031f8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	e853 3f00 	ldrex	r3, [r3]
 8003212:	60fb      	str	r3, [r7, #12]
   return(result);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f023 0310 	bic.w	r3, r3, #16
 800321a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	461a      	mov	r2, r3
 8003224:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003228:	61fb      	str	r3, [r7, #28]
 800322a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800322c:	69b9      	ldr	r1, [r7, #24]
 800322e:	69fa      	ldr	r2, [r7, #28]
 8003230:	e841 2300 	strex	r3, r2, [r1]
 8003234:	617b      	str	r3, [r7, #20]
   return(result);
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d1e4      	bne.n	8003206 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800323c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003240:	4619      	mov	r1, r3
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 f85c 	bl	8003300 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003248:	e03f      	b.n	80032ca <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800324a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800324e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00e      	beq.n	8003274 <HAL_UART_IRQHandler+0x560>
 8003256:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800325a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d008      	beq.n	8003274 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800326a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f000 fd5d 	bl	8003d2c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003272:	e02d      	b.n	80032d0 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003274:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003278:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800327c:	2b00      	cmp	r3, #0
 800327e:	d00e      	beq.n	800329e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003280:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003288:	2b00      	cmp	r3, #0
 800328a:	d008      	beq.n	800329e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003290:	2b00      	cmp	r3, #0
 8003292:	d01c      	beq.n	80032ce <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	4798      	blx	r3
    }
    return;
 800329c:	e017      	b.n	80032ce <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800329e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d012      	beq.n	80032d0 <HAL_UART_IRQHandler+0x5bc>
 80032aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00c      	beq.n	80032d0 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 fd0e 	bl	8003cd8 <UART_EndTransmit_IT>
    return;
 80032bc:	e008      	b.n	80032d0 <HAL_UART_IRQHandler+0x5bc>
      return;
 80032be:	bf00      	nop
 80032c0:	e006      	b.n	80032d0 <HAL_UART_IRQHandler+0x5bc>
    return;
 80032c2:	bf00      	nop
 80032c4:	e004      	b.n	80032d0 <HAL_UART_IRQHandler+0x5bc>
      return;
 80032c6:	bf00      	nop
 80032c8:	e002      	b.n	80032d0 <HAL_UART_IRQHandler+0x5bc>
      return;
 80032ca:	bf00      	nop
 80032cc:	e000      	b.n	80032d0 <HAL_UART_IRQHandler+0x5bc>
    return;
 80032ce:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80032d0:	37e8      	adds	r7, #232	; 0xe8
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop

080032d8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80032f4:	bf00      	nop
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	460b      	mov	r3, r1
 800330a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003318:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800331c:	b08a      	sub	sp, #40	; 0x28
 800331e:	af00      	add	r7, sp, #0
 8003320:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003322:	2300      	movs	r3, #0
 8003324:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	689a      	ldr	r2, [r3, #8]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	691b      	ldr	r3, [r3, #16]
 8003330:	431a      	orrs	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	431a      	orrs	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	69db      	ldr	r3, [r3, #28]
 800333c:	4313      	orrs	r3, r2
 800333e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	4ba4      	ldr	r3, [pc, #656]	; (80035d8 <UART_SetConfig+0x2c0>)
 8003348:	4013      	ands	r3, r2
 800334a:	68fa      	ldr	r2, [r7, #12]
 800334c:	6812      	ldr	r2, [r2, #0]
 800334e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003350:	430b      	orrs	r3, r1
 8003352:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	68da      	ldr	r2, [r3, #12]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	430a      	orrs	r2, r1
 8003368:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a99      	ldr	r2, [pc, #612]	; (80035dc <UART_SetConfig+0x2c4>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d004      	beq.n	8003384 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6a1b      	ldr	r3, [r3, #32]
 800337e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003380:	4313      	orrs	r3, r2
 8003382:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003394:	430a      	orrs	r2, r1
 8003396:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a90      	ldr	r2, [pc, #576]	; (80035e0 <UART_SetConfig+0x2c8>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d126      	bne.n	80033f0 <UART_SetConfig+0xd8>
 80033a2:	4b90      	ldr	r3, [pc, #576]	; (80035e4 <UART_SetConfig+0x2cc>)
 80033a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a8:	f003 0303 	and.w	r3, r3, #3
 80033ac:	2b03      	cmp	r3, #3
 80033ae:	d81b      	bhi.n	80033e8 <UART_SetConfig+0xd0>
 80033b0:	a201      	add	r2, pc, #4	; (adr r2, 80033b8 <UART_SetConfig+0xa0>)
 80033b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b6:	bf00      	nop
 80033b8:	080033c9 	.word	0x080033c9
 80033bc:	080033d9 	.word	0x080033d9
 80033c0:	080033d1 	.word	0x080033d1
 80033c4:	080033e1 	.word	0x080033e1
 80033c8:	2301      	movs	r3, #1
 80033ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033ce:	e116      	b.n	80035fe <UART_SetConfig+0x2e6>
 80033d0:	2302      	movs	r3, #2
 80033d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033d6:	e112      	b.n	80035fe <UART_SetConfig+0x2e6>
 80033d8:	2304      	movs	r3, #4
 80033da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033de:	e10e      	b.n	80035fe <UART_SetConfig+0x2e6>
 80033e0:	2308      	movs	r3, #8
 80033e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033e6:	e10a      	b.n	80035fe <UART_SetConfig+0x2e6>
 80033e8:	2310      	movs	r3, #16
 80033ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033ee:	e106      	b.n	80035fe <UART_SetConfig+0x2e6>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a7c      	ldr	r2, [pc, #496]	; (80035e8 <UART_SetConfig+0x2d0>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d138      	bne.n	800346c <UART_SetConfig+0x154>
 80033fa:	4b7a      	ldr	r3, [pc, #488]	; (80035e4 <UART_SetConfig+0x2cc>)
 80033fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003400:	f003 030c 	and.w	r3, r3, #12
 8003404:	2b0c      	cmp	r3, #12
 8003406:	d82d      	bhi.n	8003464 <UART_SetConfig+0x14c>
 8003408:	a201      	add	r2, pc, #4	; (adr r2, 8003410 <UART_SetConfig+0xf8>)
 800340a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800340e:	bf00      	nop
 8003410:	08003445 	.word	0x08003445
 8003414:	08003465 	.word	0x08003465
 8003418:	08003465 	.word	0x08003465
 800341c:	08003465 	.word	0x08003465
 8003420:	08003455 	.word	0x08003455
 8003424:	08003465 	.word	0x08003465
 8003428:	08003465 	.word	0x08003465
 800342c:	08003465 	.word	0x08003465
 8003430:	0800344d 	.word	0x0800344d
 8003434:	08003465 	.word	0x08003465
 8003438:	08003465 	.word	0x08003465
 800343c:	08003465 	.word	0x08003465
 8003440:	0800345d 	.word	0x0800345d
 8003444:	2300      	movs	r3, #0
 8003446:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800344a:	e0d8      	b.n	80035fe <UART_SetConfig+0x2e6>
 800344c:	2302      	movs	r3, #2
 800344e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003452:	e0d4      	b.n	80035fe <UART_SetConfig+0x2e6>
 8003454:	2304      	movs	r3, #4
 8003456:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800345a:	e0d0      	b.n	80035fe <UART_SetConfig+0x2e6>
 800345c:	2308      	movs	r3, #8
 800345e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003462:	e0cc      	b.n	80035fe <UART_SetConfig+0x2e6>
 8003464:	2310      	movs	r3, #16
 8003466:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800346a:	e0c8      	b.n	80035fe <UART_SetConfig+0x2e6>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a5e      	ldr	r2, [pc, #376]	; (80035ec <UART_SetConfig+0x2d4>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d125      	bne.n	80034c2 <UART_SetConfig+0x1aa>
 8003476:	4b5b      	ldr	r3, [pc, #364]	; (80035e4 <UART_SetConfig+0x2cc>)
 8003478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800347c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003480:	2b30      	cmp	r3, #48	; 0x30
 8003482:	d016      	beq.n	80034b2 <UART_SetConfig+0x19a>
 8003484:	2b30      	cmp	r3, #48	; 0x30
 8003486:	d818      	bhi.n	80034ba <UART_SetConfig+0x1a2>
 8003488:	2b20      	cmp	r3, #32
 800348a:	d00a      	beq.n	80034a2 <UART_SetConfig+0x18a>
 800348c:	2b20      	cmp	r3, #32
 800348e:	d814      	bhi.n	80034ba <UART_SetConfig+0x1a2>
 8003490:	2b00      	cmp	r3, #0
 8003492:	d002      	beq.n	800349a <UART_SetConfig+0x182>
 8003494:	2b10      	cmp	r3, #16
 8003496:	d008      	beq.n	80034aa <UART_SetConfig+0x192>
 8003498:	e00f      	b.n	80034ba <UART_SetConfig+0x1a2>
 800349a:	2300      	movs	r3, #0
 800349c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034a0:	e0ad      	b.n	80035fe <UART_SetConfig+0x2e6>
 80034a2:	2302      	movs	r3, #2
 80034a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034a8:	e0a9      	b.n	80035fe <UART_SetConfig+0x2e6>
 80034aa:	2304      	movs	r3, #4
 80034ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034b0:	e0a5      	b.n	80035fe <UART_SetConfig+0x2e6>
 80034b2:	2308      	movs	r3, #8
 80034b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034b8:	e0a1      	b.n	80035fe <UART_SetConfig+0x2e6>
 80034ba:	2310      	movs	r3, #16
 80034bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034c0:	e09d      	b.n	80035fe <UART_SetConfig+0x2e6>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a4a      	ldr	r2, [pc, #296]	; (80035f0 <UART_SetConfig+0x2d8>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d125      	bne.n	8003518 <UART_SetConfig+0x200>
 80034cc:	4b45      	ldr	r3, [pc, #276]	; (80035e4 <UART_SetConfig+0x2cc>)
 80034ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80034d6:	2bc0      	cmp	r3, #192	; 0xc0
 80034d8:	d016      	beq.n	8003508 <UART_SetConfig+0x1f0>
 80034da:	2bc0      	cmp	r3, #192	; 0xc0
 80034dc:	d818      	bhi.n	8003510 <UART_SetConfig+0x1f8>
 80034de:	2b80      	cmp	r3, #128	; 0x80
 80034e0:	d00a      	beq.n	80034f8 <UART_SetConfig+0x1e0>
 80034e2:	2b80      	cmp	r3, #128	; 0x80
 80034e4:	d814      	bhi.n	8003510 <UART_SetConfig+0x1f8>
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d002      	beq.n	80034f0 <UART_SetConfig+0x1d8>
 80034ea:	2b40      	cmp	r3, #64	; 0x40
 80034ec:	d008      	beq.n	8003500 <UART_SetConfig+0x1e8>
 80034ee:	e00f      	b.n	8003510 <UART_SetConfig+0x1f8>
 80034f0:	2300      	movs	r3, #0
 80034f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034f6:	e082      	b.n	80035fe <UART_SetConfig+0x2e6>
 80034f8:	2302      	movs	r3, #2
 80034fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034fe:	e07e      	b.n	80035fe <UART_SetConfig+0x2e6>
 8003500:	2304      	movs	r3, #4
 8003502:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003506:	e07a      	b.n	80035fe <UART_SetConfig+0x2e6>
 8003508:	2308      	movs	r3, #8
 800350a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800350e:	e076      	b.n	80035fe <UART_SetConfig+0x2e6>
 8003510:	2310      	movs	r3, #16
 8003512:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003516:	e072      	b.n	80035fe <UART_SetConfig+0x2e6>
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a35      	ldr	r2, [pc, #212]	; (80035f4 <UART_SetConfig+0x2dc>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d12a      	bne.n	8003578 <UART_SetConfig+0x260>
 8003522:	4b30      	ldr	r3, [pc, #192]	; (80035e4 <UART_SetConfig+0x2cc>)
 8003524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003528:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800352c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003530:	d01a      	beq.n	8003568 <UART_SetConfig+0x250>
 8003532:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003536:	d81b      	bhi.n	8003570 <UART_SetConfig+0x258>
 8003538:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800353c:	d00c      	beq.n	8003558 <UART_SetConfig+0x240>
 800353e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003542:	d815      	bhi.n	8003570 <UART_SetConfig+0x258>
 8003544:	2b00      	cmp	r3, #0
 8003546:	d003      	beq.n	8003550 <UART_SetConfig+0x238>
 8003548:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800354c:	d008      	beq.n	8003560 <UART_SetConfig+0x248>
 800354e:	e00f      	b.n	8003570 <UART_SetConfig+0x258>
 8003550:	2300      	movs	r3, #0
 8003552:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003556:	e052      	b.n	80035fe <UART_SetConfig+0x2e6>
 8003558:	2302      	movs	r3, #2
 800355a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800355e:	e04e      	b.n	80035fe <UART_SetConfig+0x2e6>
 8003560:	2304      	movs	r3, #4
 8003562:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003566:	e04a      	b.n	80035fe <UART_SetConfig+0x2e6>
 8003568:	2308      	movs	r3, #8
 800356a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800356e:	e046      	b.n	80035fe <UART_SetConfig+0x2e6>
 8003570:	2310      	movs	r3, #16
 8003572:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003576:	e042      	b.n	80035fe <UART_SetConfig+0x2e6>
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a17      	ldr	r2, [pc, #92]	; (80035dc <UART_SetConfig+0x2c4>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d13a      	bne.n	80035f8 <UART_SetConfig+0x2e0>
 8003582:	4b18      	ldr	r3, [pc, #96]	; (80035e4 <UART_SetConfig+0x2cc>)
 8003584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003588:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800358c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003590:	d01a      	beq.n	80035c8 <UART_SetConfig+0x2b0>
 8003592:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003596:	d81b      	bhi.n	80035d0 <UART_SetConfig+0x2b8>
 8003598:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800359c:	d00c      	beq.n	80035b8 <UART_SetConfig+0x2a0>
 800359e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035a2:	d815      	bhi.n	80035d0 <UART_SetConfig+0x2b8>
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d003      	beq.n	80035b0 <UART_SetConfig+0x298>
 80035a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035ac:	d008      	beq.n	80035c0 <UART_SetConfig+0x2a8>
 80035ae:	e00f      	b.n	80035d0 <UART_SetConfig+0x2b8>
 80035b0:	2300      	movs	r3, #0
 80035b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035b6:	e022      	b.n	80035fe <UART_SetConfig+0x2e6>
 80035b8:	2302      	movs	r3, #2
 80035ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035be:	e01e      	b.n	80035fe <UART_SetConfig+0x2e6>
 80035c0:	2304      	movs	r3, #4
 80035c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035c6:	e01a      	b.n	80035fe <UART_SetConfig+0x2e6>
 80035c8:	2308      	movs	r3, #8
 80035ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035ce:	e016      	b.n	80035fe <UART_SetConfig+0x2e6>
 80035d0:	2310      	movs	r3, #16
 80035d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035d6:	e012      	b.n	80035fe <UART_SetConfig+0x2e6>
 80035d8:	efff69f3 	.word	0xefff69f3
 80035dc:	40008000 	.word	0x40008000
 80035e0:	40013800 	.word	0x40013800
 80035e4:	40021000 	.word	0x40021000
 80035e8:	40004400 	.word	0x40004400
 80035ec:	40004800 	.word	0x40004800
 80035f0:	40004c00 	.word	0x40004c00
 80035f4:	40005000 	.word	0x40005000
 80035f8:	2310      	movs	r3, #16
 80035fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a9f      	ldr	r2, [pc, #636]	; (8003880 <UART_SetConfig+0x568>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d17a      	bne.n	80036fe <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003608:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800360c:	2b08      	cmp	r3, #8
 800360e:	d824      	bhi.n	800365a <UART_SetConfig+0x342>
 8003610:	a201      	add	r2, pc, #4	; (adr r2, 8003618 <UART_SetConfig+0x300>)
 8003612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003616:	bf00      	nop
 8003618:	0800363d 	.word	0x0800363d
 800361c:	0800365b 	.word	0x0800365b
 8003620:	08003645 	.word	0x08003645
 8003624:	0800365b 	.word	0x0800365b
 8003628:	0800364b 	.word	0x0800364b
 800362c:	0800365b 	.word	0x0800365b
 8003630:	0800365b 	.word	0x0800365b
 8003634:	0800365b 	.word	0x0800365b
 8003638:	08003653 	.word	0x08003653
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800363c:	f7fe fc6e 	bl	8001f1c <HAL_RCC_GetPCLK1Freq>
 8003640:	61f8      	str	r0, [r7, #28]
        break;
 8003642:	e010      	b.n	8003666 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003644:	4b8f      	ldr	r3, [pc, #572]	; (8003884 <UART_SetConfig+0x56c>)
 8003646:	61fb      	str	r3, [r7, #28]
        break;
 8003648:	e00d      	b.n	8003666 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800364a:	f7fe fbcf 	bl	8001dec <HAL_RCC_GetSysClockFreq>
 800364e:	61f8      	str	r0, [r7, #28]
        break;
 8003650:	e009      	b.n	8003666 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003652:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003656:	61fb      	str	r3, [r7, #28]
        break;
 8003658:	e005      	b.n	8003666 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800365a:	2300      	movs	r3, #0
 800365c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003664:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	2b00      	cmp	r3, #0
 800366a:	f000 80fb 	beq.w	8003864 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	685a      	ldr	r2, [r3, #4]
 8003672:	4613      	mov	r3, r2
 8003674:	005b      	lsls	r3, r3, #1
 8003676:	4413      	add	r3, r2
 8003678:	69fa      	ldr	r2, [r7, #28]
 800367a:	429a      	cmp	r2, r3
 800367c:	d305      	bcc.n	800368a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003684:	69fa      	ldr	r2, [r7, #28]
 8003686:	429a      	cmp	r2, r3
 8003688:	d903      	bls.n	8003692 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003690:	e0e8      	b.n	8003864 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	2200      	movs	r2, #0
 8003696:	461c      	mov	r4, r3
 8003698:	4615      	mov	r5, r2
 800369a:	f04f 0200 	mov.w	r2, #0
 800369e:	f04f 0300 	mov.w	r3, #0
 80036a2:	022b      	lsls	r3, r5, #8
 80036a4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80036a8:	0222      	lsls	r2, r4, #8
 80036aa:	68f9      	ldr	r1, [r7, #12]
 80036ac:	6849      	ldr	r1, [r1, #4]
 80036ae:	0849      	lsrs	r1, r1, #1
 80036b0:	2000      	movs	r0, #0
 80036b2:	4688      	mov	r8, r1
 80036b4:	4681      	mov	r9, r0
 80036b6:	eb12 0a08 	adds.w	sl, r2, r8
 80036ba:	eb43 0b09 	adc.w	fp, r3, r9
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	603b      	str	r3, [r7, #0]
 80036c6:	607a      	str	r2, [r7, #4]
 80036c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80036cc:	4650      	mov	r0, sl
 80036ce:	4659      	mov	r1, fp
 80036d0:	f7fc fdd6 	bl	8000280 <__aeabi_uldivmod>
 80036d4:	4602      	mov	r2, r0
 80036d6:	460b      	mov	r3, r1
 80036d8:	4613      	mov	r3, r2
 80036da:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036e2:	d308      	bcc.n	80036f6 <UART_SetConfig+0x3de>
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036ea:	d204      	bcs.n	80036f6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	69ba      	ldr	r2, [r7, #24]
 80036f2:	60da      	str	r2, [r3, #12]
 80036f4:	e0b6      	b.n	8003864 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80036fc:	e0b2      	b.n	8003864 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	69db      	ldr	r3, [r3, #28]
 8003702:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003706:	d15e      	bne.n	80037c6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003708:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800370c:	2b08      	cmp	r3, #8
 800370e:	d828      	bhi.n	8003762 <UART_SetConfig+0x44a>
 8003710:	a201      	add	r2, pc, #4	; (adr r2, 8003718 <UART_SetConfig+0x400>)
 8003712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003716:	bf00      	nop
 8003718:	0800373d 	.word	0x0800373d
 800371c:	08003745 	.word	0x08003745
 8003720:	0800374d 	.word	0x0800374d
 8003724:	08003763 	.word	0x08003763
 8003728:	08003753 	.word	0x08003753
 800372c:	08003763 	.word	0x08003763
 8003730:	08003763 	.word	0x08003763
 8003734:	08003763 	.word	0x08003763
 8003738:	0800375b 	.word	0x0800375b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800373c:	f7fe fbee 	bl	8001f1c <HAL_RCC_GetPCLK1Freq>
 8003740:	61f8      	str	r0, [r7, #28]
        break;
 8003742:	e014      	b.n	800376e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003744:	f7fe fc00 	bl	8001f48 <HAL_RCC_GetPCLK2Freq>
 8003748:	61f8      	str	r0, [r7, #28]
        break;
 800374a:	e010      	b.n	800376e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800374c:	4b4d      	ldr	r3, [pc, #308]	; (8003884 <UART_SetConfig+0x56c>)
 800374e:	61fb      	str	r3, [r7, #28]
        break;
 8003750:	e00d      	b.n	800376e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003752:	f7fe fb4b 	bl	8001dec <HAL_RCC_GetSysClockFreq>
 8003756:	61f8      	str	r0, [r7, #28]
        break;
 8003758:	e009      	b.n	800376e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800375a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800375e:	61fb      	str	r3, [r7, #28]
        break;
 8003760:	e005      	b.n	800376e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003762:	2300      	movs	r3, #0
 8003764:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800376c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d077      	beq.n	8003864 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	005a      	lsls	r2, r3, #1
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	085b      	lsrs	r3, r3, #1
 800377e:	441a      	add	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	fbb2 f3f3 	udiv	r3, r2, r3
 8003788:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	2b0f      	cmp	r3, #15
 800378e:	d916      	bls.n	80037be <UART_SetConfig+0x4a6>
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003796:	d212      	bcs.n	80037be <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	b29b      	uxth	r3, r3
 800379c:	f023 030f 	bic.w	r3, r3, #15
 80037a0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	085b      	lsrs	r3, r3, #1
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	f003 0307 	and.w	r3, r3, #7
 80037ac:	b29a      	uxth	r2, r3
 80037ae:	8afb      	ldrh	r3, [r7, #22]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	8afa      	ldrh	r2, [r7, #22]
 80037ba:	60da      	str	r2, [r3, #12]
 80037bc:	e052      	b.n	8003864 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80037c4:	e04e      	b.n	8003864 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80037c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80037ca:	2b08      	cmp	r3, #8
 80037cc:	d827      	bhi.n	800381e <UART_SetConfig+0x506>
 80037ce:	a201      	add	r2, pc, #4	; (adr r2, 80037d4 <UART_SetConfig+0x4bc>)
 80037d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037d4:	080037f9 	.word	0x080037f9
 80037d8:	08003801 	.word	0x08003801
 80037dc:	08003809 	.word	0x08003809
 80037e0:	0800381f 	.word	0x0800381f
 80037e4:	0800380f 	.word	0x0800380f
 80037e8:	0800381f 	.word	0x0800381f
 80037ec:	0800381f 	.word	0x0800381f
 80037f0:	0800381f 	.word	0x0800381f
 80037f4:	08003817 	.word	0x08003817
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037f8:	f7fe fb90 	bl	8001f1c <HAL_RCC_GetPCLK1Freq>
 80037fc:	61f8      	str	r0, [r7, #28]
        break;
 80037fe:	e014      	b.n	800382a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003800:	f7fe fba2 	bl	8001f48 <HAL_RCC_GetPCLK2Freq>
 8003804:	61f8      	str	r0, [r7, #28]
        break;
 8003806:	e010      	b.n	800382a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003808:	4b1e      	ldr	r3, [pc, #120]	; (8003884 <UART_SetConfig+0x56c>)
 800380a:	61fb      	str	r3, [r7, #28]
        break;
 800380c:	e00d      	b.n	800382a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800380e:	f7fe faed 	bl	8001dec <HAL_RCC_GetSysClockFreq>
 8003812:	61f8      	str	r0, [r7, #28]
        break;
 8003814:	e009      	b.n	800382a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003816:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800381a:	61fb      	str	r3, [r7, #28]
        break;
 800381c:	e005      	b.n	800382a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800381e:	2300      	movs	r3, #0
 8003820:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003828:	bf00      	nop
    }

    if (pclk != 0U)
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d019      	beq.n	8003864 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	085a      	lsrs	r2, r3, #1
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	441a      	add	r2, r3
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003842:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	2b0f      	cmp	r3, #15
 8003848:	d909      	bls.n	800385e <UART_SetConfig+0x546>
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003850:	d205      	bcs.n	800385e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	b29a      	uxth	r2, r3
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	60da      	str	r2, [r3, #12]
 800385c:	e002      	b.n	8003864 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003870:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003874:	4618      	mov	r0, r3
 8003876:	3728      	adds	r7, #40	; 0x28
 8003878:	46bd      	mov	sp, r7
 800387a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800387e:	bf00      	nop
 8003880:	40008000 	.word	0x40008000
 8003884:	00f42400 	.word	0x00f42400

08003888 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003894:	f003 0301 	and.w	r3, r3, #1
 8003898:	2b00      	cmp	r3, #0
 800389a:	d00a      	beq.n	80038b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00a      	beq.n	80038d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	430a      	orrs	r2, r1
 80038d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d8:	f003 0304 	and.w	r3, r3, #4
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d00a      	beq.n	80038f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	430a      	orrs	r2, r1
 80038f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fa:	f003 0308 	and.w	r3, r3, #8
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00a      	beq.n	8003918 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	430a      	orrs	r2, r1
 8003916:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391c:	f003 0310 	and.w	r3, r3, #16
 8003920:	2b00      	cmp	r3, #0
 8003922:	d00a      	beq.n	800393a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	430a      	orrs	r2, r1
 8003938:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393e:	f003 0320 	and.w	r3, r3, #32
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00a      	beq.n	800395c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	430a      	orrs	r2, r1
 800395a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003964:	2b00      	cmp	r3, #0
 8003966:	d01a      	beq.n	800399e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	430a      	orrs	r2, r1
 800397c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003982:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003986:	d10a      	bne.n	800399e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	430a      	orrs	r2, r1
 800399c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00a      	beq.n	80039c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	430a      	orrs	r2, r1
 80039be:	605a      	str	r2, [r3, #4]
  }
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b086      	sub	sp, #24
 80039d0:	af02      	add	r7, sp, #8
 80039d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80039dc:	f7fd f95c 	bl	8000c98 <HAL_GetTick>
 80039e0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0308 	and.w	r3, r3, #8
 80039ec:	2b08      	cmp	r3, #8
 80039ee:	d10e      	bne.n	8003a0e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039f4:	9300      	str	r3, [sp, #0]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 f82d 	bl	8003a5e <UART_WaitOnFlagUntilTimeout>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d001      	beq.n	8003a0e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e023      	b.n	8003a56 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0304 	and.w	r3, r3, #4
 8003a18:	2b04      	cmp	r3, #4
 8003a1a:	d10e      	bne.n	8003a3a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a20:	9300      	str	r3, [sp, #0]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 f817 	bl	8003a5e <UART_WaitOnFlagUntilTimeout>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e00d      	b.n	8003a56 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2220      	movs	r2, #32
 8003a3e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2220      	movs	r2, #32
 8003a44:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3710      	adds	r7, #16
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b09c      	sub	sp, #112	; 0x70
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	60f8      	str	r0, [r7, #12]
 8003a66:	60b9      	str	r1, [r7, #8]
 8003a68:	603b      	str	r3, [r7, #0]
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a6e:	e0a5      	b.n	8003bbc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a76:	f000 80a1 	beq.w	8003bbc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a7a:	f7fd f90d 	bl	8000c98 <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d302      	bcc.n	8003a90 <UART_WaitOnFlagUntilTimeout+0x32>
 8003a8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d13e      	bne.n	8003b0e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a98:	e853 3f00 	ldrex	r3, [r3]
 8003a9c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003a9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aa0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003aa4:	667b      	str	r3, [r7, #100]	; 0x64
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	461a      	mov	r2, r3
 8003aac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003aae:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ab0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003ab4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003ab6:	e841 2300 	strex	r3, r2, [r1]
 8003aba:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003abc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1e6      	bne.n	8003a90 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	3308      	adds	r3, #8
 8003ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003acc:	e853 3f00 	ldrex	r3, [r3]
 8003ad0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ad4:	f023 0301 	bic.w	r3, r3, #1
 8003ad8:	663b      	str	r3, [r7, #96]	; 0x60
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	3308      	adds	r3, #8
 8003ae0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003ae2:	64ba      	str	r2, [r7, #72]	; 0x48
 8003ae4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003ae8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003aea:	e841 2300 	strex	r3, r2, [r1]
 8003aee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003af0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1e5      	bne.n	8003ac2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2220      	movs	r2, #32
 8003afa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2220      	movs	r2, #32
 8003b00:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e067      	b.n	8003bde <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0304 	and.w	r3, r3, #4
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d04f      	beq.n	8003bbc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	69db      	ldr	r3, [r3, #28]
 8003b22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b2a:	d147      	bne.n	8003bbc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b34:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b3e:	e853 3f00 	ldrex	r3, [r3]
 8003b42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b46:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b4a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	461a      	mov	r2, r3
 8003b52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b54:	637b      	str	r3, [r7, #52]	; 0x34
 8003b56:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b5c:	e841 2300 	strex	r3, r2, [r1]
 8003b60:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1e6      	bne.n	8003b36 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	3308      	adds	r3, #8
 8003b6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	e853 3f00 	ldrex	r3, [r3]
 8003b76:	613b      	str	r3, [r7, #16]
   return(result);
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	f023 0301 	bic.w	r3, r3, #1
 8003b7e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	3308      	adds	r3, #8
 8003b86:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003b88:	623a      	str	r2, [r7, #32]
 8003b8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b8c:	69f9      	ldr	r1, [r7, #28]
 8003b8e:	6a3a      	ldr	r2, [r7, #32]
 8003b90:	e841 2300 	strex	r3, r2, [r1]
 8003b94:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1e5      	bne.n	8003b68 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2220      	movs	r2, #32
 8003ba0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2220      	movs	r2, #32
 8003ba6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2220      	movs	r2, #32
 8003bac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e010      	b.n	8003bde <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	69da      	ldr	r2, [r3, #28]
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	68ba      	ldr	r2, [r7, #8]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	bf0c      	ite	eq
 8003bcc:	2301      	moveq	r3, #1
 8003bce:	2300      	movne	r3, #0
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	79fb      	ldrb	r3, [r7, #7]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	f43f af4a 	beq.w	8003a70 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3770      	adds	r7, #112	; 0x70
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}

08003be6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003be6:	b480      	push	{r7}
 8003be8:	b095      	sub	sp, #84	; 0x54
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bf6:	e853 3f00 	ldrex	r3, [r3]
 8003bfa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bfe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	461a      	mov	r2, r3
 8003c0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c0c:	643b      	str	r3, [r7, #64]	; 0x40
 8003c0e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c10:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003c12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c14:	e841 2300 	strex	r3, r2, [r1]
 8003c18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1e6      	bne.n	8003bee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	3308      	adds	r3, #8
 8003c26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c28:	6a3b      	ldr	r3, [r7, #32]
 8003c2a:	e853 3f00 	ldrex	r3, [r3]
 8003c2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	f023 0301 	bic.w	r3, r3, #1
 8003c36:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	3308      	adds	r3, #8
 8003c3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c40:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c48:	e841 2300 	strex	r3, r2, [r1]
 8003c4c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d1e5      	bne.n	8003c20 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d118      	bne.n	8003c8e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	e853 3f00 	ldrex	r3, [r3]
 8003c68:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	f023 0310 	bic.w	r3, r3, #16
 8003c70:	647b      	str	r3, [r7, #68]	; 0x44
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	461a      	mov	r2, r3
 8003c78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c7a:	61bb      	str	r3, [r7, #24]
 8003c7c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c7e:	6979      	ldr	r1, [r7, #20]
 8003c80:	69ba      	ldr	r2, [r7, #24]
 8003c82:	e841 2300 	strex	r3, r2, [r1]
 8003c86:	613b      	str	r3, [r7, #16]
   return(result);
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1e6      	bne.n	8003c5c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2220      	movs	r2, #32
 8003c92:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003ca0:	bf00      	nop
 8003ca2:	3754      	adds	r7, #84	; 0x54
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003cca:	68f8      	ldr	r0, [r7, #12]
 8003ccc:	f7ff fb0e 	bl	80032ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003cd0:	bf00      	nop
 8003cd2:	3710      	adds	r7, #16
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b088      	sub	sp, #32
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	e853 3f00 	ldrex	r3, [r3]
 8003cec:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cf4:	61fb      	str	r3, [r7, #28]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	61bb      	str	r3, [r7, #24]
 8003d00:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d02:	6979      	ldr	r1, [r7, #20]
 8003d04:	69ba      	ldr	r2, [r7, #24]
 8003d06:	e841 2300 	strex	r3, r2, [r1]
 8003d0a:	613b      	str	r3, [r7, #16]
   return(result);
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1e6      	bne.n	8003ce0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2220      	movs	r2, #32
 8003d16:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f7ff fada 	bl	80032d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d24:	bf00      	nop
 8003d26:	3720      	adds	r7, #32
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003d34:	bf00      	nop
 8003d36:	370c      	adds	r7, #12
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <rand>:
 8003d40:	4b16      	ldr	r3, [pc, #88]	; (8003d9c <rand+0x5c>)
 8003d42:	b510      	push	{r4, lr}
 8003d44:	681c      	ldr	r4, [r3, #0]
 8003d46:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003d48:	b9b3      	cbnz	r3, 8003d78 <rand+0x38>
 8003d4a:	2018      	movs	r0, #24
 8003d4c:	f000 fa42 	bl	80041d4 <malloc>
 8003d50:	4602      	mov	r2, r0
 8003d52:	6320      	str	r0, [r4, #48]	; 0x30
 8003d54:	b920      	cbnz	r0, 8003d60 <rand+0x20>
 8003d56:	4b12      	ldr	r3, [pc, #72]	; (8003da0 <rand+0x60>)
 8003d58:	4812      	ldr	r0, [pc, #72]	; (8003da4 <rand+0x64>)
 8003d5a:	2152      	movs	r1, #82	; 0x52
 8003d5c:	f000 f9d0 	bl	8004100 <__assert_func>
 8003d60:	4911      	ldr	r1, [pc, #68]	; (8003da8 <rand+0x68>)
 8003d62:	4b12      	ldr	r3, [pc, #72]	; (8003dac <rand+0x6c>)
 8003d64:	e9c0 1300 	strd	r1, r3, [r0]
 8003d68:	4b11      	ldr	r3, [pc, #68]	; (8003db0 <rand+0x70>)
 8003d6a:	6083      	str	r3, [r0, #8]
 8003d6c:	230b      	movs	r3, #11
 8003d6e:	8183      	strh	r3, [r0, #12]
 8003d70:	2100      	movs	r1, #0
 8003d72:	2001      	movs	r0, #1
 8003d74:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8003d78:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003d7a:	480e      	ldr	r0, [pc, #56]	; (8003db4 <rand+0x74>)
 8003d7c:	690b      	ldr	r3, [r1, #16]
 8003d7e:	694c      	ldr	r4, [r1, #20]
 8003d80:	4a0d      	ldr	r2, [pc, #52]	; (8003db8 <rand+0x78>)
 8003d82:	4358      	muls	r0, r3
 8003d84:	fb02 0004 	mla	r0, r2, r4, r0
 8003d88:	fba3 3202 	umull	r3, r2, r3, r2
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	eb40 0002 	adc.w	r0, r0, r2
 8003d92:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8003d96:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003d9a:	bd10      	pop	{r4, pc}
 8003d9c:	20000064 	.word	0x20000064
 8003da0:	08005154 	.word	0x08005154
 8003da4:	0800516b 	.word	0x0800516b
 8003da8:	abcd330e 	.word	0xabcd330e
 8003dac:	e66d1234 	.word	0xe66d1234
 8003db0:	0005deec 	.word	0x0005deec
 8003db4:	5851f42d 	.word	0x5851f42d
 8003db8:	4c957f2d 	.word	0x4c957f2d

08003dbc <std>:
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	b510      	push	{r4, lr}
 8003dc0:	4604      	mov	r4, r0
 8003dc2:	e9c0 3300 	strd	r3, r3, [r0]
 8003dc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003dca:	6083      	str	r3, [r0, #8]
 8003dcc:	8181      	strh	r1, [r0, #12]
 8003dce:	6643      	str	r3, [r0, #100]	; 0x64
 8003dd0:	81c2      	strh	r2, [r0, #14]
 8003dd2:	6183      	str	r3, [r0, #24]
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	2208      	movs	r2, #8
 8003dd8:	305c      	adds	r0, #92	; 0x5c
 8003dda:	f000 f914 	bl	8004006 <memset>
 8003dde:	4b0d      	ldr	r3, [pc, #52]	; (8003e14 <std+0x58>)
 8003de0:	6263      	str	r3, [r4, #36]	; 0x24
 8003de2:	4b0d      	ldr	r3, [pc, #52]	; (8003e18 <std+0x5c>)
 8003de4:	62a3      	str	r3, [r4, #40]	; 0x28
 8003de6:	4b0d      	ldr	r3, [pc, #52]	; (8003e1c <std+0x60>)
 8003de8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003dea:	4b0d      	ldr	r3, [pc, #52]	; (8003e20 <std+0x64>)
 8003dec:	6323      	str	r3, [r4, #48]	; 0x30
 8003dee:	4b0d      	ldr	r3, [pc, #52]	; (8003e24 <std+0x68>)
 8003df0:	6224      	str	r4, [r4, #32]
 8003df2:	429c      	cmp	r4, r3
 8003df4:	d006      	beq.n	8003e04 <std+0x48>
 8003df6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003dfa:	4294      	cmp	r4, r2
 8003dfc:	d002      	beq.n	8003e04 <std+0x48>
 8003dfe:	33d0      	adds	r3, #208	; 0xd0
 8003e00:	429c      	cmp	r4, r3
 8003e02:	d105      	bne.n	8003e10 <std+0x54>
 8003e04:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003e08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e0c:	f000 b974 	b.w	80040f8 <__retarget_lock_init_recursive>
 8003e10:	bd10      	pop	{r4, pc}
 8003e12:	bf00      	nop
 8003e14:	08003f81 	.word	0x08003f81
 8003e18:	08003fa3 	.word	0x08003fa3
 8003e1c:	08003fdb 	.word	0x08003fdb
 8003e20:	08003fff 	.word	0x08003fff
 8003e24:	20000148 	.word	0x20000148

08003e28 <stdio_exit_handler>:
 8003e28:	4a02      	ldr	r2, [pc, #8]	; (8003e34 <stdio_exit_handler+0xc>)
 8003e2a:	4903      	ldr	r1, [pc, #12]	; (8003e38 <stdio_exit_handler+0x10>)
 8003e2c:	4803      	ldr	r0, [pc, #12]	; (8003e3c <stdio_exit_handler+0x14>)
 8003e2e:	f000 b869 	b.w	8003f04 <_fwalk_sglue>
 8003e32:	bf00      	nop
 8003e34:	2000000c 	.word	0x2000000c
 8003e38:	08004a19 	.word	0x08004a19
 8003e3c:	20000018 	.word	0x20000018

08003e40 <cleanup_stdio>:
 8003e40:	6841      	ldr	r1, [r0, #4]
 8003e42:	4b0c      	ldr	r3, [pc, #48]	; (8003e74 <cleanup_stdio+0x34>)
 8003e44:	4299      	cmp	r1, r3
 8003e46:	b510      	push	{r4, lr}
 8003e48:	4604      	mov	r4, r0
 8003e4a:	d001      	beq.n	8003e50 <cleanup_stdio+0x10>
 8003e4c:	f000 fde4 	bl	8004a18 <_fflush_r>
 8003e50:	68a1      	ldr	r1, [r4, #8]
 8003e52:	4b09      	ldr	r3, [pc, #36]	; (8003e78 <cleanup_stdio+0x38>)
 8003e54:	4299      	cmp	r1, r3
 8003e56:	d002      	beq.n	8003e5e <cleanup_stdio+0x1e>
 8003e58:	4620      	mov	r0, r4
 8003e5a:	f000 fddd 	bl	8004a18 <_fflush_r>
 8003e5e:	68e1      	ldr	r1, [r4, #12]
 8003e60:	4b06      	ldr	r3, [pc, #24]	; (8003e7c <cleanup_stdio+0x3c>)
 8003e62:	4299      	cmp	r1, r3
 8003e64:	d004      	beq.n	8003e70 <cleanup_stdio+0x30>
 8003e66:	4620      	mov	r0, r4
 8003e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e6c:	f000 bdd4 	b.w	8004a18 <_fflush_r>
 8003e70:	bd10      	pop	{r4, pc}
 8003e72:	bf00      	nop
 8003e74:	20000148 	.word	0x20000148
 8003e78:	200001b0 	.word	0x200001b0
 8003e7c:	20000218 	.word	0x20000218

08003e80 <global_stdio_init.part.0>:
 8003e80:	b510      	push	{r4, lr}
 8003e82:	4b0b      	ldr	r3, [pc, #44]	; (8003eb0 <global_stdio_init.part.0+0x30>)
 8003e84:	4c0b      	ldr	r4, [pc, #44]	; (8003eb4 <global_stdio_init.part.0+0x34>)
 8003e86:	4a0c      	ldr	r2, [pc, #48]	; (8003eb8 <global_stdio_init.part.0+0x38>)
 8003e88:	601a      	str	r2, [r3, #0]
 8003e8a:	4620      	mov	r0, r4
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	2104      	movs	r1, #4
 8003e90:	f7ff ff94 	bl	8003dbc <std>
 8003e94:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003e98:	2201      	movs	r2, #1
 8003e9a:	2109      	movs	r1, #9
 8003e9c:	f7ff ff8e 	bl	8003dbc <std>
 8003ea0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003ea4:	2202      	movs	r2, #2
 8003ea6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003eaa:	2112      	movs	r1, #18
 8003eac:	f7ff bf86 	b.w	8003dbc <std>
 8003eb0:	20000280 	.word	0x20000280
 8003eb4:	20000148 	.word	0x20000148
 8003eb8:	08003e29 	.word	0x08003e29

08003ebc <__sfp_lock_acquire>:
 8003ebc:	4801      	ldr	r0, [pc, #4]	; (8003ec4 <__sfp_lock_acquire+0x8>)
 8003ebe:	f000 b91c 	b.w	80040fa <__retarget_lock_acquire_recursive>
 8003ec2:	bf00      	nop
 8003ec4:	20000289 	.word	0x20000289

08003ec8 <__sfp_lock_release>:
 8003ec8:	4801      	ldr	r0, [pc, #4]	; (8003ed0 <__sfp_lock_release+0x8>)
 8003eca:	f000 b917 	b.w	80040fc <__retarget_lock_release_recursive>
 8003ece:	bf00      	nop
 8003ed0:	20000289 	.word	0x20000289

08003ed4 <__sinit>:
 8003ed4:	b510      	push	{r4, lr}
 8003ed6:	4604      	mov	r4, r0
 8003ed8:	f7ff fff0 	bl	8003ebc <__sfp_lock_acquire>
 8003edc:	6a23      	ldr	r3, [r4, #32]
 8003ede:	b11b      	cbz	r3, 8003ee8 <__sinit+0x14>
 8003ee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ee4:	f7ff bff0 	b.w	8003ec8 <__sfp_lock_release>
 8003ee8:	4b04      	ldr	r3, [pc, #16]	; (8003efc <__sinit+0x28>)
 8003eea:	6223      	str	r3, [r4, #32]
 8003eec:	4b04      	ldr	r3, [pc, #16]	; (8003f00 <__sinit+0x2c>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d1f5      	bne.n	8003ee0 <__sinit+0xc>
 8003ef4:	f7ff ffc4 	bl	8003e80 <global_stdio_init.part.0>
 8003ef8:	e7f2      	b.n	8003ee0 <__sinit+0xc>
 8003efa:	bf00      	nop
 8003efc:	08003e41 	.word	0x08003e41
 8003f00:	20000280 	.word	0x20000280

08003f04 <_fwalk_sglue>:
 8003f04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f08:	4607      	mov	r7, r0
 8003f0a:	4688      	mov	r8, r1
 8003f0c:	4614      	mov	r4, r2
 8003f0e:	2600      	movs	r6, #0
 8003f10:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003f14:	f1b9 0901 	subs.w	r9, r9, #1
 8003f18:	d505      	bpl.n	8003f26 <_fwalk_sglue+0x22>
 8003f1a:	6824      	ldr	r4, [r4, #0]
 8003f1c:	2c00      	cmp	r4, #0
 8003f1e:	d1f7      	bne.n	8003f10 <_fwalk_sglue+0xc>
 8003f20:	4630      	mov	r0, r6
 8003f22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f26:	89ab      	ldrh	r3, [r5, #12]
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d907      	bls.n	8003f3c <_fwalk_sglue+0x38>
 8003f2c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003f30:	3301      	adds	r3, #1
 8003f32:	d003      	beq.n	8003f3c <_fwalk_sglue+0x38>
 8003f34:	4629      	mov	r1, r5
 8003f36:	4638      	mov	r0, r7
 8003f38:	47c0      	blx	r8
 8003f3a:	4306      	orrs	r6, r0
 8003f3c:	3568      	adds	r5, #104	; 0x68
 8003f3e:	e7e9      	b.n	8003f14 <_fwalk_sglue+0x10>

08003f40 <siprintf>:
 8003f40:	b40e      	push	{r1, r2, r3}
 8003f42:	b500      	push	{lr}
 8003f44:	b09c      	sub	sp, #112	; 0x70
 8003f46:	ab1d      	add	r3, sp, #116	; 0x74
 8003f48:	9002      	str	r0, [sp, #8]
 8003f4a:	9006      	str	r0, [sp, #24]
 8003f4c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003f50:	4809      	ldr	r0, [pc, #36]	; (8003f78 <siprintf+0x38>)
 8003f52:	9107      	str	r1, [sp, #28]
 8003f54:	9104      	str	r1, [sp, #16]
 8003f56:	4909      	ldr	r1, [pc, #36]	; (8003f7c <siprintf+0x3c>)
 8003f58:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f5c:	9105      	str	r1, [sp, #20]
 8003f5e:	6800      	ldr	r0, [r0, #0]
 8003f60:	9301      	str	r3, [sp, #4]
 8003f62:	a902      	add	r1, sp, #8
 8003f64:	f000 fa44 	bl	80043f0 <_svfiprintf_r>
 8003f68:	9b02      	ldr	r3, [sp, #8]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	701a      	strb	r2, [r3, #0]
 8003f6e:	b01c      	add	sp, #112	; 0x70
 8003f70:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f74:	b003      	add	sp, #12
 8003f76:	4770      	bx	lr
 8003f78:	20000064 	.word	0x20000064
 8003f7c:	ffff0208 	.word	0xffff0208

08003f80 <__sread>:
 8003f80:	b510      	push	{r4, lr}
 8003f82:	460c      	mov	r4, r1
 8003f84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f88:	f000 f868 	bl	800405c <_read_r>
 8003f8c:	2800      	cmp	r0, #0
 8003f8e:	bfab      	itete	ge
 8003f90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003f92:	89a3      	ldrhlt	r3, [r4, #12]
 8003f94:	181b      	addge	r3, r3, r0
 8003f96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003f9a:	bfac      	ite	ge
 8003f9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8003f9e:	81a3      	strhlt	r3, [r4, #12]
 8003fa0:	bd10      	pop	{r4, pc}

08003fa2 <__swrite>:
 8003fa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fa6:	461f      	mov	r7, r3
 8003fa8:	898b      	ldrh	r3, [r1, #12]
 8003faa:	05db      	lsls	r3, r3, #23
 8003fac:	4605      	mov	r5, r0
 8003fae:	460c      	mov	r4, r1
 8003fb0:	4616      	mov	r6, r2
 8003fb2:	d505      	bpl.n	8003fc0 <__swrite+0x1e>
 8003fb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fb8:	2302      	movs	r3, #2
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f000 f83c 	bl	8004038 <_lseek_r>
 8003fc0:	89a3      	ldrh	r3, [r4, #12]
 8003fc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003fc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003fca:	81a3      	strh	r3, [r4, #12]
 8003fcc:	4632      	mov	r2, r6
 8003fce:	463b      	mov	r3, r7
 8003fd0:	4628      	mov	r0, r5
 8003fd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003fd6:	f000 b853 	b.w	8004080 <_write_r>

08003fda <__sseek>:
 8003fda:	b510      	push	{r4, lr}
 8003fdc:	460c      	mov	r4, r1
 8003fde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fe2:	f000 f829 	bl	8004038 <_lseek_r>
 8003fe6:	1c43      	adds	r3, r0, #1
 8003fe8:	89a3      	ldrh	r3, [r4, #12]
 8003fea:	bf15      	itete	ne
 8003fec:	6560      	strne	r0, [r4, #84]	; 0x54
 8003fee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003ff2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003ff6:	81a3      	strheq	r3, [r4, #12]
 8003ff8:	bf18      	it	ne
 8003ffa:	81a3      	strhne	r3, [r4, #12]
 8003ffc:	bd10      	pop	{r4, pc}

08003ffe <__sclose>:
 8003ffe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004002:	f000 b809 	b.w	8004018 <_close_r>

08004006 <memset>:
 8004006:	4402      	add	r2, r0
 8004008:	4603      	mov	r3, r0
 800400a:	4293      	cmp	r3, r2
 800400c:	d100      	bne.n	8004010 <memset+0xa>
 800400e:	4770      	bx	lr
 8004010:	f803 1b01 	strb.w	r1, [r3], #1
 8004014:	e7f9      	b.n	800400a <memset+0x4>
	...

08004018 <_close_r>:
 8004018:	b538      	push	{r3, r4, r5, lr}
 800401a:	4d06      	ldr	r5, [pc, #24]	; (8004034 <_close_r+0x1c>)
 800401c:	2300      	movs	r3, #0
 800401e:	4604      	mov	r4, r0
 8004020:	4608      	mov	r0, r1
 8004022:	602b      	str	r3, [r5, #0]
 8004024:	f7fc fd21 	bl	8000a6a <_close>
 8004028:	1c43      	adds	r3, r0, #1
 800402a:	d102      	bne.n	8004032 <_close_r+0x1a>
 800402c:	682b      	ldr	r3, [r5, #0]
 800402e:	b103      	cbz	r3, 8004032 <_close_r+0x1a>
 8004030:	6023      	str	r3, [r4, #0]
 8004032:	bd38      	pop	{r3, r4, r5, pc}
 8004034:	20000284 	.word	0x20000284

08004038 <_lseek_r>:
 8004038:	b538      	push	{r3, r4, r5, lr}
 800403a:	4d07      	ldr	r5, [pc, #28]	; (8004058 <_lseek_r+0x20>)
 800403c:	4604      	mov	r4, r0
 800403e:	4608      	mov	r0, r1
 8004040:	4611      	mov	r1, r2
 8004042:	2200      	movs	r2, #0
 8004044:	602a      	str	r2, [r5, #0]
 8004046:	461a      	mov	r2, r3
 8004048:	f7fc fd36 	bl	8000ab8 <_lseek>
 800404c:	1c43      	adds	r3, r0, #1
 800404e:	d102      	bne.n	8004056 <_lseek_r+0x1e>
 8004050:	682b      	ldr	r3, [r5, #0]
 8004052:	b103      	cbz	r3, 8004056 <_lseek_r+0x1e>
 8004054:	6023      	str	r3, [r4, #0]
 8004056:	bd38      	pop	{r3, r4, r5, pc}
 8004058:	20000284 	.word	0x20000284

0800405c <_read_r>:
 800405c:	b538      	push	{r3, r4, r5, lr}
 800405e:	4d07      	ldr	r5, [pc, #28]	; (800407c <_read_r+0x20>)
 8004060:	4604      	mov	r4, r0
 8004062:	4608      	mov	r0, r1
 8004064:	4611      	mov	r1, r2
 8004066:	2200      	movs	r2, #0
 8004068:	602a      	str	r2, [r5, #0]
 800406a:	461a      	mov	r2, r3
 800406c:	f7fc fcc4 	bl	80009f8 <_read>
 8004070:	1c43      	adds	r3, r0, #1
 8004072:	d102      	bne.n	800407a <_read_r+0x1e>
 8004074:	682b      	ldr	r3, [r5, #0]
 8004076:	b103      	cbz	r3, 800407a <_read_r+0x1e>
 8004078:	6023      	str	r3, [r4, #0]
 800407a:	bd38      	pop	{r3, r4, r5, pc}
 800407c:	20000284 	.word	0x20000284

08004080 <_write_r>:
 8004080:	b538      	push	{r3, r4, r5, lr}
 8004082:	4d07      	ldr	r5, [pc, #28]	; (80040a0 <_write_r+0x20>)
 8004084:	4604      	mov	r4, r0
 8004086:	4608      	mov	r0, r1
 8004088:	4611      	mov	r1, r2
 800408a:	2200      	movs	r2, #0
 800408c:	602a      	str	r2, [r5, #0]
 800408e:	461a      	mov	r2, r3
 8004090:	f7fc fccf 	bl	8000a32 <_write>
 8004094:	1c43      	adds	r3, r0, #1
 8004096:	d102      	bne.n	800409e <_write_r+0x1e>
 8004098:	682b      	ldr	r3, [r5, #0]
 800409a:	b103      	cbz	r3, 800409e <_write_r+0x1e>
 800409c:	6023      	str	r3, [r4, #0]
 800409e:	bd38      	pop	{r3, r4, r5, pc}
 80040a0:	20000284 	.word	0x20000284

080040a4 <__errno>:
 80040a4:	4b01      	ldr	r3, [pc, #4]	; (80040ac <__errno+0x8>)
 80040a6:	6818      	ldr	r0, [r3, #0]
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	20000064 	.word	0x20000064

080040b0 <__libc_init_array>:
 80040b0:	b570      	push	{r4, r5, r6, lr}
 80040b2:	4d0d      	ldr	r5, [pc, #52]	; (80040e8 <__libc_init_array+0x38>)
 80040b4:	4c0d      	ldr	r4, [pc, #52]	; (80040ec <__libc_init_array+0x3c>)
 80040b6:	1b64      	subs	r4, r4, r5
 80040b8:	10a4      	asrs	r4, r4, #2
 80040ba:	2600      	movs	r6, #0
 80040bc:	42a6      	cmp	r6, r4
 80040be:	d109      	bne.n	80040d4 <__libc_init_array+0x24>
 80040c0:	4d0b      	ldr	r5, [pc, #44]	; (80040f0 <__libc_init_array+0x40>)
 80040c2:	4c0c      	ldr	r4, [pc, #48]	; (80040f4 <__libc_init_array+0x44>)
 80040c4:	f000 fffa 	bl	80050bc <_init>
 80040c8:	1b64      	subs	r4, r4, r5
 80040ca:	10a4      	asrs	r4, r4, #2
 80040cc:	2600      	movs	r6, #0
 80040ce:	42a6      	cmp	r6, r4
 80040d0:	d105      	bne.n	80040de <__libc_init_array+0x2e>
 80040d2:	bd70      	pop	{r4, r5, r6, pc}
 80040d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80040d8:	4798      	blx	r3
 80040da:	3601      	adds	r6, #1
 80040dc:	e7ee      	b.n	80040bc <__libc_init_array+0xc>
 80040de:	f855 3b04 	ldr.w	r3, [r5], #4
 80040e2:	4798      	blx	r3
 80040e4:	3601      	adds	r6, #1
 80040e6:	e7f2      	b.n	80040ce <__libc_init_array+0x1e>
 80040e8:	0800523c 	.word	0x0800523c
 80040ec:	0800523c 	.word	0x0800523c
 80040f0:	0800523c 	.word	0x0800523c
 80040f4:	08005240 	.word	0x08005240

080040f8 <__retarget_lock_init_recursive>:
 80040f8:	4770      	bx	lr

080040fa <__retarget_lock_acquire_recursive>:
 80040fa:	4770      	bx	lr

080040fc <__retarget_lock_release_recursive>:
 80040fc:	4770      	bx	lr
	...

08004100 <__assert_func>:
 8004100:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004102:	4614      	mov	r4, r2
 8004104:	461a      	mov	r2, r3
 8004106:	4b09      	ldr	r3, [pc, #36]	; (800412c <__assert_func+0x2c>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4605      	mov	r5, r0
 800410c:	68d8      	ldr	r0, [r3, #12]
 800410e:	b14c      	cbz	r4, 8004124 <__assert_func+0x24>
 8004110:	4b07      	ldr	r3, [pc, #28]	; (8004130 <__assert_func+0x30>)
 8004112:	9100      	str	r1, [sp, #0]
 8004114:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004118:	4906      	ldr	r1, [pc, #24]	; (8004134 <__assert_func+0x34>)
 800411a:	462b      	mov	r3, r5
 800411c:	f000 fca4 	bl	8004a68 <fiprintf>
 8004120:	f000 fcec 	bl	8004afc <abort>
 8004124:	4b04      	ldr	r3, [pc, #16]	; (8004138 <__assert_func+0x38>)
 8004126:	461c      	mov	r4, r3
 8004128:	e7f3      	b.n	8004112 <__assert_func+0x12>
 800412a:	bf00      	nop
 800412c:	20000064 	.word	0x20000064
 8004130:	080051c3 	.word	0x080051c3
 8004134:	080051d0 	.word	0x080051d0
 8004138:	080051fe 	.word	0x080051fe

0800413c <_free_r>:
 800413c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800413e:	2900      	cmp	r1, #0
 8004140:	d044      	beq.n	80041cc <_free_r+0x90>
 8004142:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004146:	9001      	str	r0, [sp, #4]
 8004148:	2b00      	cmp	r3, #0
 800414a:	f1a1 0404 	sub.w	r4, r1, #4
 800414e:	bfb8      	it	lt
 8004150:	18e4      	addlt	r4, r4, r3
 8004152:	f000 f8e7 	bl	8004324 <__malloc_lock>
 8004156:	4a1e      	ldr	r2, [pc, #120]	; (80041d0 <_free_r+0x94>)
 8004158:	9801      	ldr	r0, [sp, #4]
 800415a:	6813      	ldr	r3, [r2, #0]
 800415c:	b933      	cbnz	r3, 800416c <_free_r+0x30>
 800415e:	6063      	str	r3, [r4, #4]
 8004160:	6014      	str	r4, [r2, #0]
 8004162:	b003      	add	sp, #12
 8004164:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004168:	f000 b8e2 	b.w	8004330 <__malloc_unlock>
 800416c:	42a3      	cmp	r3, r4
 800416e:	d908      	bls.n	8004182 <_free_r+0x46>
 8004170:	6825      	ldr	r5, [r4, #0]
 8004172:	1961      	adds	r1, r4, r5
 8004174:	428b      	cmp	r3, r1
 8004176:	bf01      	itttt	eq
 8004178:	6819      	ldreq	r1, [r3, #0]
 800417a:	685b      	ldreq	r3, [r3, #4]
 800417c:	1949      	addeq	r1, r1, r5
 800417e:	6021      	streq	r1, [r4, #0]
 8004180:	e7ed      	b.n	800415e <_free_r+0x22>
 8004182:	461a      	mov	r2, r3
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	b10b      	cbz	r3, 800418c <_free_r+0x50>
 8004188:	42a3      	cmp	r3, r4
 800418a:	d9fa      	bls.n	8004182 <_free_r+0x46>
 800418c:	6811      	ldr	r1, [r2, #0]
 800418e:	1855      	adds	r5, r2, r1
 8004190:	42a5      	cmp	r5, r4
 8004192:	d10b      	bne.n	80041ac <_free_r+0x70>
 8004194:	6824      	ldr	r4, [r4, #0]
 8004196:	4421      	add	r1, r4
 8004198:	1854      	adds	r4, r2, r1
 800419a:	42a3      	cmp	r3, r4
 800419c:	6011      	str	r1, [r2, #0]
 800419e:	d1e0      	bne.n	8004162 <_free_r+0x26>
 80041a0:	681c      	ldr	r4, [r3, #0]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	6053      	str	r3, [r2, #4]
 80041a6:	440c      	add	r4, r1
 80041a8:	6014      	str	r4, [r2, #0]
 80041aa:	e7da      	b.n	8004162 <_free_r+0x26>
 80041ac:	d902      	bls.n	80041b4 <_free_r+0x78>
 80041ae:	230c      	movs	r3, #12
 80041b0:	6003      	str	r3, [r0, #0]
 80041b2:	e7d6      	b.n	8004162 <_free_r+0x26>
 80041b4:	6825      	ldr	r5, [r4, #0]
 80041b6:	1961      	adds	r1, r4, r5
 80041b8:	428b      	cmp	r3, r1
 80041ba:	bf04      	itt	eq
 80041bc:	6819      	ldreq	r1, [r3, #0]
 80041be:	685b      	ldreq	r3, [r3, #4]
 80041c0:	6063      	str	r3, [r4, #4]
 80041c2:	bf04      	itt	eq
 80041c4:	1949      	addeq	r1, r1, r5
 80041c6:	6021      	streq	r1, [r4, #0]
 80041c8:	6054      	str	r4, [r2, #4]
 80041ca:	e7ca      	b.n	8004162 <_free_r+0x26>
 80041cc:	b003      	add	sp, #12
 80041ce:	bd30      	pop	{r4, r5, pc}
 80041d0:	2000028c 	.word	0x2000028c

080041d4 <malloc>:
 80041d4:	4b02      	ldr	r3, [pc, #8]	; (80041e0 <malloc+0xc>)
 80041d6:	4601      	mov	r1, r0
 80041d8:	6818      	ldr	r0, [r3, #0]
 80041da:	f000 b823 	b.w	8004224 <_malloc_r>
 80041de:	bf00      	nop
 80041e0:	20000064 	.word	0x20000064

080041e4 <sbrk_aligned>:
 80041e4:	b570      	push	{r4, r5, r6, lr}
 80041e6:	4e0e      	ldr	r6, [pc, #56]	; (8004220 <sbrk_aligned+0x3c>)
 80041e8:	460c      	mov	r4, r1
 80041ea:	6831      	ldr	r1, [r6, #0]
 80041ec:	4605      	mov	r5, r0
 80041ee:	b911      	cbnz	r1, 80041f6 <sbrk_aligned+0x12>
 80041f0:	f000 fc66 	bl	8004ac0 <_sbrk_r>
 80041f4:	6030      	str	r0, [r6, #0]
 80041f6:	4621      	mov	r1, r4
 80041f8:	4628      	mov	r0, r5
 80041fa:	f000 fc61 	bl	8004ac0 <_sbrk_r>
 80041fe:	1c43      	adds	r3, r0, #1
 8004200:	d00a      	beq.n	8004218 <sbrk_aligned+0x34>
 8004202:	1cc4      	adds	r4, r0, #3
 8004204:	f024 0403 	bic.w	r4, r4, #3
 8004208:	42a0      	cmp	r0, r4
 800420a:	d007      	beq.n	800421c <sbrk_aligned+0x38>
 800420c:	1a21      	subs	r1, r4, r0
 800420e:	4628      	mov	r0, r5
 8004210:	f000 fc56 	bl	8004ac0 <_sbrk_r>
 8004214:	3001      	adds	r0, #1
 8004216:	d101      	bne.n	800421c <sbrk_aligned+0x38>
 8004218:	f04f 34ff 	mov.w	r4, #4294967295
 800421c:	4620      	mov	r0, r4
 800421e:	bd70      	pop	{r4, r5, r6, pc}
 8004220:	20000290 	.word	0x20000290

08004224 <_malloc_r>:
 8004224:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004228:	1ccd      	adds	r5, r1, #3
 800422a:	f025 0503 	bic.w	r5, r5, #3
 800422e:	3508      	adds	r5, #8
 8004230:	2d0c      	cmp	r5, #12
 8004232:	bf38      	it	cc
 8004234:	250c      	movcc	r5, #12
 8004236:	2d00      	cmp	r5, #0
 8004238:	4607      	mov	r7, r0
 800423a:	db01      	blt.n	8004240 <_malloc_r+0x1c>
 800423c:	42a9      	cmp	r1, r5
 800423e:	d905      	bls.n	800424c <_malloc_r+0x28>
 8004240:	230c      	movs	r3, #12
 8004242:	603b      	str	r3, [r7, #0]
 8004244:	2600      	movs	r6, #0
 8004246:	4630      	mov	r0, r6
 8004248:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800424c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004320 <_malloc_r+0xfc>
 8004250:	f000 f868 	bl	8004324 <__malloc_lock>
 8004254:	f8d8 3000 	ldr.w	r3, [r8]
 8004258:	461c      	mov	r4, r3
 800425a:	bb5c      	cbnz	r4, 80042b4 <_malloc_r+0x90>
 800425c:	4629      	mov	r1, r5
 800425e:	4638      	mov	r0, r7
 8004260:	f7ff ffc0 	bl	80041e4 <sbrk_aligned>
 8004264:	1c43      	adds	r3, r0, #1
 8004266:	4604      	mov	r4, r0
 8004268:	d155      	bne.n	8004316 <_malloc_r+0xf2>
 800426a:	f8d8 4000 	ldr.w	r4, [r8]
 800426e:	4626      	mov	r6, r4
 8004270:	2e00      	cmp	r6, #0
 8004272:	d145      	bne.n	8004300 <_malloc_r+0xdc>
 8004274:	2c00      	cmp	r4, #0
 8004276:	d048      	beq.n	800430a <_malloc_r+0xe6>
 8004278:	6823      	ldr	r3, [r4, #0]
 800427a:	4631      	mov	r1, r6
 800427c:	4638      	mov	r0, r7
 800427e:	eb04 0903 	add.w	r9, r4, r3
 8004282:	f000 fc1d 	bl	8004ac0 <_sbrk_r>
 8004286:	4581      	cmp	r9, r0
 8004288:	d13f      	bne.n	800430a <_malloc_r+0xe6>
 800428a:	6821      	ldr	r1, [r4, #0]
 800428c:	1a6d      	subs	r5, r5, r1
 800428e:	4629      	mov	r1, r5
 8004290:	4638      	mov	r0, r7
 8004292:	f7ff ffa7 	bl	80041e4 <sbrk_aligned>
 8004296:	3001      	adds	r0, #1
 8004298:	d037      	beq.n	800430a <_malloc_r+0xe6>
 800429a:	6823      	ldr	r3, [r4, #0]
 800429c:	442b      	add	r3, r5
 800429e:	6023      	str	r3, [r4, #0]
 80042a0:	f8d8 3000 	ldr.w	r3, [r8]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d038      	beq.n	800431a <_malloc_r+0xf6>
 80042a8:	685a      	ldr	r2, [r3, #4]
 80042aa:	42a2      	cmp	r2, r4
 80042ac:	d12b      	bne.n	8004306 <_malloc_r+0xe2>
 80042ae:	2200      	movs	r2, #0
 80042b0:	605a      	str	r2, [r3, #4]
 80042b2:	e00f      	b.n	80042d4 <_malloc_r+0xb0>
 80042b4:	6822      	ldr	r2, [r4, #0]
 80042b6:	1b52      	subs	r2, r2, r5
 80042b8:	d41f      	bmi.n	80042fa <_malloc_r+0xd6>
 80042ba:	2a0b      	cmp	r2, #11
 80042bc:	d917      	bls.n	80042ee <_malloc_r+0xca>
 80042be:	1961      	adds	r1, r4, r5
 80042c0:	42a3      	cmp	r3, r4
 80042c2:	6025      	str	r5, [r4, #0]
 80042c4:	bf18      	it	ne
 80042c6:	6059      	strne	r1, [r3, #4]
 80042c8:	6863      	ldr	r3, [r4, #4]
 80042ca:	bf08      	it	eq
 80042cc:	f8c8 1000 	streq.w	r1, [r8]
 80042d0:	5162      	str	r2, [r4, r5]
 80042d2:	604b      	str	r3, [r1, #4]
 80042d4:	4638      	mov	r0, r7
 80042d6:	f104 060b 	add.w	r6, r4, #11
 80042da:	f000 f829 	bl	8004330 <__malloc_unlock>
 80042de:	f026 0607 	bic.w	r6, r6, #7
 80042e2:	1d23      	adds	r3, r4, #4
 80042e4:	1af2      	subs	r2, r6, r3
 80042e6:	d0ae      	beq.n	8004246 <_malloc_r+0x22>
 80042e8:	1b9b      	subs	r3, r3, r6
 80042ea:	50a3      	str	r3, [r4, r2]
 80042ec:	e7ab      	b.n	8004246 <_malloc_r+0x22>
 80042ee:	42a3      	cmp	r3, r4
 80042f0:	6862      	ldr	r2, [r4, #4]
 80042f2:	d1dd      	bne.n	80042b0 <_malloc_r+0x8c>
 80042f4:	f8c8 2000 	str.w	r2, [r8]
 80042f8:	e7ec      	b.n	80042d4 <_malloc_r+0xb0>
 80042fa:	4623      	mov	r3, r4
 80042fc:	6864      	ldr	r4, [r4, #4]
 80042fe:	e7ac      	b.n	800425a <_malloc_r+0x36>
 8004300:	4634      	mov	r4, r6
 8004302:	6876      	ldr	r6, [r6, #4]
 8004304:	e7b4      	b.n	8004270 <_malloc_r+0x4c>
 8004306:	4613      	mov	r3, r2
 8004308:	e7cc      	b.n	80042a4 <_malloc_r+0x80>
 800430a:	230c      	movs	r3, #12
 800430c:	603b      	str	r3, [r7, #0]
 800430e:	4638      	mov	r0, r7
 8004310:	f000 f80e 	bl	8004330 <__malloc_unlock>
 8004314:	e797      	b.n	8004246 <_malloc_r+0x22>
 8004316:	6025      	str	r5, [r4, #0]
 8004318:	e7dc      	b.n	80042d4 <_malloc_r+0xb0>
 800431a:	605b      	str	r3, [r3, #4]
 800431c:	deff      	udf	#255	; 0xff
 800431e:	bf00      	nop
 8004320:	2000028c 	.word	0x2000028c

08004324 <__malloc_lock>:
 8004324:	4801      	ldr	r0, [pc, #4]	; (800432c <__malloc_lock+0x8>)
 8004326:	f7ff bee8 	b.w	80040fa <__retarget_lock_acquire_recursive>
 800432a:	bf00      	nop
 800432c:	20000288 	.word	0x20000288

08004330 <__malloc_unlock>:
 8004330:	4801      	ldr	r0, [pc, #4]	; (8004338 <__malloc_unlock+0x8>)
 8004332:	f7ff bee3 	b.w	80040fc <__retarget_lock_release_recursive>
 8004336:	bf00      	nop
 8004338:	20000288 	.word	0x20000288

0800433c <__ssputs_r>:
 800433c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004340:	688e      	ldr	r6, [r1, #8]
 8004342:	461f      	mov	r7, r3
 8004344:	42be      	cmp	r6, r7
 8004346:	680b      	ldr	r3, [r1, #0]
 8004348:	4682      	mov	sl, r0
 800434a:	460c      	mov	r4, r1
 800434c:	4690      	mov	r8, r2
 800434e:	d82c      	bhi.n	80043aa <__ssputs_r+0x6e>
 8004350:	898a      	ldrh	r2, [r1, #12]
 8004352:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004356:	d026      	beq.n	80043a6 <__ssputs_r+0x6a>
 8004358:	6965      	ldr	r5, [r4, #20]
 800435a:	6909      	ldr	r1, [r1, #16]
 800435c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004360:	eba3 0901 	sub.w	r9, r3, r1
 8004364:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004368:	1c7b      	adds	r3, r7, #1
 800436a:	444b      	add	r3, r9
 800436c:	106d      	asrs	r5, r5, #1
 800436e:	429d      	cmp	r5, r3
 8004370:	bf38      	it	cc
 8004372:	461d      	movcc	r5, r3
 8004374:	0553      	lsls	r3, r2, #21
 8004376:	d527      	bpl.n	80043c8 <__ssputs_r+0x8c>
 8004378:	4629      	mov	r1, r5
 800437a:	f7ff ff53 	bl	8004224 <_malloc_r>
 800437e:	4606      	mov	r6, r0
 8004380:	b360      	cbz	r0, 80043dc <__ssputs_r+0xa0>
 8004382:	6921      	ldr	r1, [r4, #16]
 8004384:	464a      	mov	r2, r9
 8004386:	f000 fbab 	bl	8004ae0 <memcpy>
 800438a:	89a3      	ldrh	r3, [r4, #12]
 800438c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004394:	81a3      	strh	r3, [r4, #12]
 8004396:	6126      	str	r6, [r4, #16]
 8004398:	6165      	str	r5, [r4, #20]
 800439a:	444e      	add	r6, r9
 800439c:	eba5 0509 	sub.w	r5, r5, r9
 80043a0:	6026      	str	r6, [r4, #0]
 80043a2:	60a5      	str	r5, [r4, #8]
 80043a4:	463e      	mov	r6, r7
 80043a6:	42be      	cmp	r6, r7
 80043a8:	d900      	bls.n	80043ac <__ssputs_r+0x70>
 80043aa:	463e      	mov	r6, r7
 80043ac:	6820      	ldr	r0, [r4, #0]
 80043ae:	4632      	mov	r2, r6
 80043b0:	4641      	mov	r1, r8
 80043b2:	f000 fb6b 	bl	8004a8c <memmove>
 80043b6:	68a3      	ldr	r3, [r4, #8]
 80043b8:	1b9b      	subs	r3, r3, r6
 80043ba:	60a3      	str	r3, [r4, #8]
 80043bc:	6823      	ldr	r3, [r4, #0]
 80043be:	4433      	add	r3, r6
 80043c0:	6023      	str	r3, [r4, #0]
 80043c2:	2000      	movs	r0, #0
 80043c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043c8:	462a      	mov	r2, r5
 80043ca:	f000 fb9e 	bl	8004b0a <_realloc_r>
 80043ce:	4606      	mov	r6, r0
 80043d0:	2800      	cmp	r0, #0
 80043d2:	d1e0      	bne.n	8004396 <__ssputs_r+0x5a>
 80043d4:	6921      	ldr	r1, [r4, #16]
 80043d6:	4650      	mov	r0, sl
 80043d8:	f7ff feb0 	bl	800413c <_free_r>
 80043dc:	230c      	movs	r3, #12
 80043de:	f8ca 3000 	str.w	r3, [sl]
 80043e2:	89a3      	ldrh	r3, [r4, #12]
 80043e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043e8:	81a3      	strh	r3, [r4, #12]
 80043ea:	f04f 30ff 	mov.w	r0, #4294967295
 80043ee:	e7e9      	b.n	80043c4 <__ssputs_r+0x88>

080043f0 <_svfiprintf_r>:
 80043f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043f4:	4698      	mov	r8, r3
 80043f6:	898b      	ldrh	r3, [r1, #12]
 80043f8:	061b      	lsls	r3, r3, #24
 80043fa:	b09d      	sub	sp, #116	; 0x74
 80043fc:	4607      	mov	r7, r0
 80043fe:	460d      	mov	r5, r1
 8004400:	4614      	mov	r4, r2
 8004402:	d50e      	bpl.n	8004422 <_svfiprintf_r+0x32>
 8004404:	690b      	ldr	r3, [r1, #16]
 8004406:	b963      	cbnz	r3, 8004422 <_svfiprintf_r+0x32>
 8004408:	2140      	movs	r1, #64	; 0x40
 800440a:	f7ff ff0b 	bl	8004224 <_malloc_r>
 800440e:	6028      	str	r0, [r5, #0]
 8004410:	6128      	str	r0, [r5, #16]
 8004412:	b920      	cbnz	r0, 800441e <_svfiprintf_r+0x2e>
 8004414:	230c      	movs	r3, #12
 8004416:	603b      	str	r3, [r7, #0]
 8004418:	f04f 30ff 	mov.w	r0, #4294967295
 800441c:	e0d0      	b.n	80045c0 <_svfiprintf_r+0x1d0>
 800441e:	2340      	movs	r3, #64	; 0x40
 8004420:	616b      	str	r3, [r5, #20]
 8004422:	2300      	movs	r3, #0
 8004424:	9309      	str	r3, [sp, #36]	; 0x24
 8004426:	2320      	movs	r3, #32
 8004428:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800442c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004430:	2330      	movs	r3, #48	; 0x30
 8004432:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80045d8 <_svfiprintf_r+0x1e8>
 8004436:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800443a:	f04f 0901 	mov.w	r9, #1
 800443e:	4623      	mov	r3, r4
 8004440:	469a      	mov	sl, r3
 8004442:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004446:	b10a      	cbz	r2, 800444c <_svfiprintf_r+0x5c>
 8004448:	2a25      	cmp	r2, #37	; 0x25
 800444a:	d1f9      	bne.n	8004440 <_svfiprintf_r+0x50>
 800444c:	ebba 0b04 	subs.w	fp, sl, r4
 8004450:	d00b      	beq.n	800446a <_svfiprintf_r+0x7a>
 8004452:	465b      	mov	r3, fp
 8004454:	4622      	mov	r2, r4
 8004456:	4629      	mov	r1, r5
 8004458:	4638      	mov	r0, r7
 800445a:	f7ff ff6f 	bl	800433c <__ssputs_r>
 800445e:	3001      	adds	r0, #1
 8004460:	f000 80a9 	beq.w	80045b6 <_svfiprintf_r+0x1c6>
 8004464:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004466:	445a      	add	r2, fp
 8004468:	9209      	str	r2, [sp, #36]	; 0x24
 800446a:	f89a 3000 	ldrb.w	r3, [sl]
 800446e:	2b00      	cmp	r3, #0
 8004470:	f000 80a1 	beq.w	80045b6 <_svfiprintf_r+0x1c6>
 8004474:	2300      	movs	r3, #0
 8004476:	f04f 32ff 	mov.w	r2, #4294967295
 800447a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800447e:	f10a 0a01 	add.w	sl, sl, #1
 8004482:	9304      	str	r3, [sp, #16]
 8004484:	9307      	str	r3, [sp, #28]
 8004486:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800448a:	931a      	str	r3, [sp, #104]	; 0x68
 800448c:	4654      	mov	r4, sl
 800448e:	2205      	movs	r2, #5
 8004490:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004494:	4850      	ldr	r0, [pc, #320]	; (80045d8 <_svfiprintf_r+0x1e8>)
 8004496:	f7fb fea3 	bl	80001e0 <memchr>
 800449a:	9a04      	ldr	r2, [sp, #16]
 800449c:	b9d8      	cbnz	r0, 80044d6 <_svfiprintf_r+0xe6>
 800449e:	06d0      	lsls	r0, r2, #27
 80044a0:	bf44      	itt	mi
 80044a2:	2320      	movmi	r3, #32
 80044a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044a8:	0711      	lsls	r1, r2, #28
 80044aa:	bf44      	itt	mi
 80044ac:	232b      	movmi	r3, #43	; 0x2b
 80044ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044b2:	f89a 3000 	ldrb.w	r3, [sl]
 80044b6:	2b2a      	cmp	r3, #42	; 0x2a
 80044b8:	d015      	beq.n	80044e6 <_svfiprintf_r+0xf6>
 80044ba:	9a07      	ldr	r2, [sp, #28]
 80044bc:	4654      	mov	r4, sl
 80044be:	2000      	movs	r0, #0
 80044c0:	f04f 0c0a 	mov.w	ip, #10
 80044c4:	4621      	mov	r1, r4
 80044c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80044ca:	3b30      	subs	r3, #48	; 0x30
 80044cc:	2b09      	cmp	r3, #9
 80044ce:	d94d      	bls.n	800456c <_svfiprintf_r+0x17c>
 80044d0:	b1b0      	cbz	r0, 8004500 <_svfiprintf_r+0x110>
 80044d2:	9207      	str	r2, [sp, #28]
 80044d4:	e014      	b.n	8004500 <_svfiprintf_r+0x110>
 80044d6:	eba0 0308 	sub.w	r3, r0, r8
 80044da:	fa09 f303 	lsl.w	r3, r9, r3
 80044de:	4313      	orrs	r3, r2
 80044e0:	9304      	str	r3, [sp, #16]
 80044e2:	46a2      	mov	sl, r4
 80044e4:	e7d2      	b.n	800448c <_svfiprintf_r+0x9c>
 80044e6:	9b03      	ldr	r3, [sp, #12]
 80044e8:	1d19      	adds	r1, r3, #4
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	9103      	str	r1, [sp, #12]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	bfbb      	ittet	lt
 80044f2:	425b      	neglt	r3, r3
 80044f4:	f042 0202 	orrlt.w	r2, r2, #2
 80044f8:	9307      	strge	r3, [sp, #28]
 80044fa:	9307      	strlt	r3, [sp, #28]
 80044fc:	bfb8      	it	lt
 80044fe:	9204      	strlt	r2, [sp, #16]
 8004500:	7823      	ldrb	r3, [r4, #0]
 8004502:	2b2e      	cmp	r3, #46	; 0x2e
 8004504:	d10c      	bne.n	8004520 <_svfiprintf_r+0x130>
 8004506:	7863      	ldrb	r3, [r4, #1]
 8004508:	2b2a      	cmp	r3, #42	; 0x2a
 800450a:	d134      	bne.n	8004576 <_svfiprintf_r+0x186>
 800450c:	9b03      	ldr	r3, [sp, #12]
 800450e:	1d1a      	adds	r2, r3, #4
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	9203      	str	r2, [sp, #12]
 8004514:	2b00      	cmp	r3, #0
 8004516:	bfb8      	it	lt
 8004518:	f04f 33ff 	movlt.w	r3, #4294967295
 800451c:	3402      	adds	r4, #2
 800451e:	9305      	str	r3, [sp, #20]
 8004520:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80045e8 <_svfiprintf_r+0x1f8>
 8004524:	7821      	ldrb	r1, [r4, #0]
 8004526:	2203      	movs	r2, #3
 8004528:	4650      	mov	r0, sl
 800452a:	f7fb fe59 	bl	80001e0 <memchr>
 800452e:	b138      	cbz	r0, 8004540 <_svfiprintf_r+0x150>
 8004530:	9b04      	ldr	r3, [sp, #16]
 8004532:	eba0 000a 	sub.w	r0, r0, sl
 8004536:	2240      	movs	r2, #64	; 0x40
 8004538:	4082      	lsls	r2, r0
 800453a:	4313      	orrs	r3, r2
 800453c:	3401      	adds	r4, #1
 800453e:	9304      	str	r3, [sp, #16]
 8004540:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004544:	4825      	ldr	r0, [pc, #148]	; (80045dc <_svfiprintf_r+0x1ec>)
 8004546:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800454a:	2206      	movs	r2, #6
 800454c:	f7fb fe48 	bl	80001e0 <memchr>
 8004550:	2800      	cmp	r0, #0
 8004552:	d038      	beq.n	80045c6 <_svfiprintf_r+0x1d6>
 8004554:	4b22      	ldr	r3, [pc, #136]	; (80045e0 <_svfiprintf_r+0x1f0>)
 8004556:	bb1b      	cbnz	r3, 80045a0 <_svfiprintf_r+0x1b0>
 8004558:	9b03      	ldr	r3, [sp, #12]
 800455a:	3307      	adds	r3, #7
 800455c:	f023 0307 	bic.w	r3, r3, #7
 8004560:	3308      	adds	r3, #8
 8004562:	9303      	str	r3, [sp, #12]
 8004564:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004566:	4433      	add	r3, r6
 8004568:	9309      	str	r3, [sp, #36]	; 0x24
 800456a:	e768      	b.n	800443e <_svfiprintf_r+0x4e>
 800456c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004570:	460c      	mov	r4, r1
 8004572:	2001      	movs	r0, #1
 8004574:	e7a6      	b.n	80044c4 <_svfiprintf_r+0xd4>
 8004576:	2300      	movs	r3, #0
 8004578:	3401      	adds	r4, #1
 800457a:	9305      	str	r3, [sp, #20]
 800457c:	4619      	mov	r1, r3
 800457e:	f04f 0c0a 	mov.w	ip, #10
 8004582:	4620      	mov	r0, r4
 8004584:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004588:	3a30      	subs	r2, #48	; 0x30
 800458a:	2a09      	cmp	r2, #9
 800458c:	d903      	bls.n	8004596 <_svfiprintf_r+0x1a6>
 800458e:	2b00      	cmp	r3, #0
 8004590:	d0c6      	beq.n	8004520 <_svfiprintf_r+0x130>
 8004592:	9105      	str	r1, [sp, #20]
 8004594:	e7c4      	b.n	8004520 <_svfiprintf_r+0x130>
 8004596:	fb0c 2101 	mla	r1, ip, r1, r2
 800459a:	4604      	mov	r4, r0
 800459c:	2301      	movs	r3, #1
 800459e:	e7f0      	b.n	8004582 <_svfiprintf_r+0x192>
 80045a0:	ab03      	add	r3, sp, #12
 80045a2:	9300      	str	r3, [sp, #0]
 80045a4:	462a      	mov	r2, r5
 80045a6:	4b0f      	ldr	r3, [pc, #60]	; (80045e4 <_svfiprintf_r+0x1f4>)
 80045a8:	a904      	add	r1, sp, #16
 80045aa:	4638      	mov	r0, r7
 80045ac:	f3af 8000 	nop.w
 80045b0:	1c42      	adds	r2, r0, #1
 80045b2:	4606      	mov	r6, r0
 80045b4:	d1d6      	bne.n	8004564 <_svfiprintf_r+0x174>
 80045b6:	89ab      	ldrh	r3, [r5, #12]
 80045b8:	065b      	lsls	r3, r3, #25
 80045ba:	f53f af2d 	bmi.w	8004418 <_svfiprintf_r+0x28>
 80045be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80045c0:	b01d      	add	sp, #116	; 0x74
 80045c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045c6:	ab03      	add	r3, sp, #12
 80045c8:	9300      	str	r3, [sp, #0]
 80045ca:	462a      	mov	r2, r5
 80045cc:	4b05      	ldr	r3, [pc, #20]	; (80045e4 <_svfiprintf_r+0x1f4>)
 80045ce:	a904      	add	r1, sp, #16
 80045d0:	4638      	mov	r0, r7
 80045d2:	f000 f879 	bl	80046c8 <_printf_i>
 80045d6:	e7eb      	b.n	80045b0 <_svfiprintf_r+0x1c0>
 80045d8:	080051ff 	.word	0x080051ff
 80045dc:	08005209 	.word	0x08005209
 80045e0:	00000000 	.word	0x00000000
 80045e4:	0800433d 	.word	0x0800433d
 80045e8:	08005205 	.word	0x08005205

080045ec <_printf_common>:
 80045ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045f0:	4616      	mov	r6, r2
 80045f2:	4699      	mov	r9, r3
 80045f4:	688a      	ldr	r2, [r1, #8]
 80045f6:	690b      	ldr	r3, [r1, #16]
 80045f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80045fc:	4293      	cmp	r3, r2
 80045fe:	bfb8      	it	lt
 8004600:	4613      	movlt	r3, r2
 8004602:	6033      	str	r3, [r6, #0]
 8004604:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004608:	4607      	mov	r7, r0
 800460a:	460c      	mov	r4, r1
 800460c:	b10a      	cbz	r2, 8004612 <_printf_common+0x26>
 800460e:	3301      	adds	r3, #1
 8004610:	6033      	str	r3, [r6, #0]
 8004612:	6823      	ldr	r3, [r4, #0]
 8004614:	0699      	lsls	r1, r3, #26
 8004616:	bf42      	ittt	mi
 8004618:	6833      	ldrmi	r3, [r6, #0]
 800461a:	3302      	addmi	r3, #2
 800461c:	6033      	strmi	r3, [r6, #0]
 800461e:	6825      	ldr	r5, [r4, #0]
 8004620:	f015 0506 	ands.w	r5, r5, #6
 8004624:	d106      	bne.n	8004634 <_printf_common+0x48>
 8004626:	f104 0a19 	add.w	sl, r4, #25
 800462a:	68e3      	ldr	r3, [r4, #12]
 800462c:	6832      	ldr	r2, [r6, #0]
 800462e:	1a9b      	subs	r3, r3, r2
 8004630:	42ab      	cmp	r3, r5
 8004632:	dc26      	bgt.n	8004682 <_printf_common+0x96>
 8004634:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004638:	1e13      	subs	r3, r2, #0
 800463a:	6822      	ldr	r2, [r4, #0]
 800463c:	bf18      	it	ne
 800463e:	2301      	movne	r3, #1
 8004640:	0692      	lsls	r2, r2, #26
 8004642:	d42b      	bmi.n	800469c <_printf_common+0xb0>
 8004644:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004648:	4649      	mov	r1, r9
 800464a:	4638      	mov	r0, r7
 800464c:	47c0      	blx	r8
 800464e:	3001      	adds	r0, #1
 8004650:	d01e      	beq.n	8004690 <_printf_common+0xa4>
 8004652:	6823      	ldr	r3, [r4, #0]
 8004654:	6922      	ldr	r2, [r4, #16]
 8004656:	f003 0306 	and.w	r3, r3, #6
 800465a:	2b04      	cmp	r3, #4
 800465c:	bf02      	ittt	eq
 800465e:	68e5      	ldreq	r5, [r4, #12]
 8004660:	6833      	ldreq	r3, [r6, #0]
 8004662:	1aed      	subeq	r5, r5, r3
 8004664:	68a3      	ldr	r3, [r4, #8]
 8004666:	bf0c      	ite	eq
 8004668:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800466c:	2500      	movne	r5, #0
 800466e:	4293      	cmp	r3, r2
 8004670:	bfc4      	itt	gt
 8004672:	1a9b      	subgt	r3, r3, r2
 8004674:	18ed      	addgt	r5, r5, r3
 8004676:	2600      	movs	r6, #0
 8004678:	341a      	adds	r4, #26
 800467a:	42b5      	cmp	r5, r6
 800467c:	d11a      	bne.n	80046b4 <_printf_common+0xc8>
 800467e:	2000      	movs	r0, #0
 8004680:	e008      	b.n	8004694 <_printf_common+0xa8>
 8004682:	2301      	movs	r3, #1
 8004684:	4652      	mov	r2, sl
 8004686:	4649      	mov	r1, r9
 8004688:	4638      	mov	r0, r7
 800468a:	47c0      	blx	r8
 800468c:	3001      	adds	r0, #1
 800468e:	d103      	bne.n	8004698 <_printf_common+0xac>
 8004690:	f04f 30ff 	mov.w	r0, #4294967295
 8004694:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004698:	3501      	adds	r5, #1
 800469a:	e7c6      	b.n	800462a <_printf_common+0x3e>
 800469c:	18e1      	adds	r1, r4, r3
 800469e:	1c5a      	adds	r2, r3, #1
 80046a0:	2030      	movs	r0, #48	; 0x30
 80046a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80046a6:	4422      	add	r2, r4
 80046a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80046ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80046b0:	3302      	adds	r3, #2
 80046b2:	e7c7      	b.n	8004644 <_printf_common+0x58>
 80046b4:	2301      	movs	r3, #1
 80046b6:	4622      	mov	r2, r4
 80046b8:	4649      	mov	r1, r9
 80046ba:	4638      	mov	r0, r7
 80046bc:	47c0      	blx	r8
 80046be:	3001      	adds	r0, #1
 80046c0:	d0e6      	beq.n	8004690 <_printf_common+0xa4>
 80046c2:	3601      	adds	r6, #1
 80046c4:	e7d9      	b.n	800467a <_printf_common+0x8e>
	...

080046c8 <_printf_i>:
 80046c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046cc:	7e0f      	ldrb	r7, [r1, #24]
 80046ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80046d0:	2f78      	cmp	r7, #120	; 0x78
 80046d2:	4691      	mov	r9, r2
 80046d4:	4680      	mov	r8, r0
 80046d6:	460c      	mov	r4, r1
 80046d8:	469a      	mov	sl, r3
 80046da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80046de:	d807      	bhi.n	80046f0 <_printf_i+0x28>
 80046e0:	2f62      	cmp	r7, #98	; 0x62
 80046e2:	d80a      	bhi.n	80046fa <_printf_i+0x32>
 80046e4:	2f00      	cmp	r7, #0
 80046e6:	f000 80d4 	beq.w	8004892 <_printf_i+0x1ca>
 80046ea:	2f58      	cmp	r7, #88	; 0x58
 80046ec:	f000 80c0 	beq.w	8004870 <_printf_i+0x1a8>
 80046f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80046f8:	e03a      	b.n	8004770 <_printf_i+0xa8>
 80046fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80046fe:	2b15      	cmp	r3, #21
 8004700:	d8f6      	bhi.n	80046f0 <_printf_i+0x28>
 8004702:	a101      	add	r1, pc, #4	; (adr r1, 8004708 <_printf_i+0x40>)
 8004704:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004708:	08004761 	.word	0x08004761
 800470c:	08004775 	.word	0x08004775
 8004710:	080046f1 	.word	0x080046f1
 8004714:	080046f1 	.word	0x080046f1
 8004718:	080046f1 	.word	0x080046f1
 800471c:	080046f1 	.word	0x080046f1
 8004720:	08004775 	.word	0x08004775
 8004724:	080046f1 	.word	0x080046f1
 8004728:	080046f1 	.word	0x080046f1
 800472c:	080046f1 	.word	0x080046f1
 8004730:	080046f1 	.word	0x080046f1
 8004734:	08004879 	.word	0x08004879
 8004738:	080047a1 	.word	0x080047a1
 800473c:	08004833 	.word	0x08004833
 8004740:	080046f1 	.word	0x080046f1
 8004744:	080046f1 	.word	0x080046f1
 8004748:	0800489b 	.word	0x0800489b
 800474c:	080046f1 	.word	0x080046f1
 8004750:	080047a1 	.word	0x080047a1
 8004754:	080046f1 	.word	0x080046f1
 8004758:	080046f1 	.word	0x080046f1
 800475c:	0800483b 	.word	0x0800483b
 8004760:	682b      	ldr	r3, [r5, #0]
 8004762:	1d1a      	adds	r2, r3, #4
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	602a      	str	r2, [r5, #0]
 8004768:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800476c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004770:	2301      	movs	r3, #1
 8004772:	e09f      	b.n	80048b4 <_printf_i+0x1ec>
 8004774:	6820      	ldr	r0, [r4, #0]
 8004776:	682b      	ldr	r3, [r5, #0]
 8004778:	0607      	lsls	r7, r0, #24
 800477a:	f103 0104 	add.w	r1, r3, #4
 800477e:	6029      	str	r1, [r5, #0]
 8004780:	d501      	bpl.n	8004786 <_printf_i+0xbe>
 8004782:	681e      	ldr	r6, [r3, #0]
 8004784:	e003      	b.n	800478e <_printf_i+0xc6>
 8004786:	0646      	lsls	r6, r0, #25
 8004788:	d5fb      	bpl.n	8004782 <_printf_i+0xba>
 800478a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800478e:	2e00      	cmp	r6, #0
 8004790:	da03      	bge.n	800479a <_printf_i+0xd2>
 8004792:	232d      	movs	r3, #45	; 0x2d
 8004794:	4276      	negs	r6, r6
 8004796:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800479a:	485a      	ldr	r0, [pc, #360]	; (8004904 <_printf_i+0x23c>)
 800479c:	230a      	movs	r3, #10
 800479e:	e012      	b.n	80047c6 <_printf_i+0xfe>
 80047a0:	682b      	ldr	r3, [r5, #0]
 80047a2:	6820      	ldr	r0, [r4, #0]
 80047a4:	1d19      	adds	r1, r3, #4
 80047a6:	6029      	str	r1, [r5, #0]
 80047a8:	0605      	lsls	r5, r0, #24
 80047aa:	d501      	bpl.n	80047b0 <_printf_i+0xe8>
 80047ac:	681e      	ldr	r6, [r3, #0]
 80047ae:	e002      	b.n	80047b6 <_printf_i+0xee>
 80047b0:	0641      	lsls	r1, r0, #25
 80047b2:	d5fb      	bpl.n	80047ac <_printf_i+0xe4>
 80047b4:	881e      	ldrh	r6, [r3, #0]
 80047b6:	4853      	ldr	r0, [pc, #332]	; (8004904 <_printf_i+0x23c>)
 80047b8:	2f6f      	cmp	r7, #111	; 0x6f
 80047ba:	bf0c      	ite	eq
 80047bc:	2308      	moveq	r3, #8
 80047be:	230a      	movne	r3, #10
 80047c0:	2100      	movs	r1, #0
 80047c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80047c6:	6865      	ldr	r5, [r4, #4]
 80047c8:	60a5      	str	r5, [r4, #8]
 80047ca:	2d00      	cmp	r5, #0
 80047cc:	bfa2      	ittt	ge
 80047ce:	6821      	ldrge	r1, [r4, #0]
 80047d0:	f021 0104 	bicge.w	r1, r1, #4
 80047d4:	6021      	strge	r1, [r4, #0]
 80047d6:	b90e      	cbnz	r6, 80047dc <_printf_i+0x114>
 80047d8:	2d00      	cmp	r5, #0
 80047da:	d04b      	beq.n	8004874 <_printf_i+0x1ac>
 80047dc:	4615      	mov	r5, r2
 80047de:	fbb6 f1f3 	udiv	r1, r6, r3
 80047e2:	fb03 6711 	mls	r7, r3, r1, r6
 80047e6:	5dc7      	ldrb	r7, [r0, r7]
 80047e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80047ec:	4637      	mov	r7, r6
 80047ee:	42bb      	cmp	r3, r7
 80047f0:	460e      	mov	r6, r1
 80047f2:	d9f4      	bls.n	80047de <_printf_i+0x116>
 80047f4:	2b08      	cmp	r3, #8
 80047f6:	d10b      	bne.n	8004810 <_printf_i+0x148>
 80047f8:	6823      	ldr	r3, [r4, #0]
 80047fa:	07de      	lsls	r6, r3, #31
 80047fc:	d508      	bpl.n	8004810 <_printf_i+0x148>
 80047fe:	6923      	ldr	r3, [r4, #16]
 8004800:	6861      	ldr	r1, [r4, #4]
 8004802:	4299      	cmp	r1, r3
 8004804:	bfde      	ittt	le
 8004806:	2330      	movle	r3, #48	; 0x30
 8004808:	f805 3c01 	strble.w	r3, [r5, #-1]
 800480c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004810:	1b52      	subs	r2, r2, r5
 8004812:	6122      	str	r2, [r4, #16]
 8004814:	f8cd a000 	str.w	sl, [sp]
 8004818:	464b      	mov	r3, r9
 800481a:	aa03      	add	r2, sp, #12
 800481c:	4621      	mov	r1, r4
 800481e:	4640      	mov	r0, r8
 8004820:	f7ff fee4 	bl	80045ec <_printf_common>
 8004824:	3001      	adds	r0, #1
 8004826:	d14a      	bne.n	80048be <_printf_i+0x1f6>
 8004828:	f04f 30ff 	mov.w	r0, #4294967295
 800482c:	b004      	add	sp, #16
 800482e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004832:	6823      	ldr	r3, [r4, #0]
 8004834:	f043 0320 	orr.w	r3, r3, #32
 8004838:	6023      	str	r3, [r4, #0]
 800483a:	4833      	ldr	r0, [pc, #204]	; (8004908 <_printf_i+0x240>)
 800483c:	2778      	movs	r7, #120	; 0x78
 800483e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004842:	6823      	ldr	r3, [r4, #0]
 8004844:	6829      	ldr	r1, [r5, #0]
 8004846:	061f      	lsls	r7, r3, #24
 8004848:	f851 6b04 	ldr.w	r6, [r1], #4
 800484c:	d402      	bmi.n	8004854 <_printf_i+0x18c>
 800484e:	065f      	lsls	r7, r3, #25
 8004850:	bf48      	it	mi
 8004852:	b2b6      	uxthmi	r6, r6
 8004854:	07df      	lsls	r7, r3, #31
 8004856:	bf48      	it	mi
 8004858:	f043 0320 	orrmi.w	r3, r3, #32
 800485c:	6029      	str	r1, [r5, #0]
 800485e:	bf48      	it	mi
 8004860:	6023      	strmi	r3, [r4, #0]
 8004862:	b91e      	cbnz	r6, 800486c <_printf_i+0x1a4>
 8004864:	6823      	ldr	r3, [r4, #0]
 8004866:	f023 0320 	bic.w	r3, r3, #32
 800486a:	6023      	str	r3, [r4, #0]
 800486c:	2310      	movs	r3, #16
 800486e:	e7a7      	b.n	80047c0 <_printf_i+0xf8>
 8004870:	4824      	ldr	r0, [pc, #144]	; (8004904 <_printf_i+0x23c>)
 8004872:	e7e4      	b.n	800483e <_printf_i+0x176>
 8004874:	4615      	mov	r5, r2
 8004876:	e7bd      	b.n	80047f4 <_printf_i+0x12c>
 8004878:	682b      	ldr	r3, [r5, #0]
 800487a:	6826      	ldr	r6, [r4, #0]
 800487c:	6961      	ldr	r1, [r4, #20]
 800487e:	1d18      	adds	r0, r3, #4
 8004880:	6028      	str	r0, [r5, #0]
 8004882:	0635      	lsls	r5, r6, #24
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	d501      	bpl.n	800488c <_printf_i+0x1c4>
 8004888:	6019      	str	r1, [r3, #0]
 800488a:	e002      	b.n	8004892 <_printf_i+0x1ca>
 800488c:	0670      	lsls	r0, r6, #25
 800488e:	d5fb      	bpl.n	8004888 <_printf_i+0x1c0>
 8004890:	8019      	strh	r1, [r3, #0]
 8004892:	2300      	movs	r3, #0
 8004894:	6123      	str	r3, [r4, #16]
 8004896:	4615      	mov	r5, r2
 8004898:	e7bc      	b.n	8004814 <_printf_i+0x14c>
 800489a:	682b      	ldr	r3, [r5, #0]
 800489c:	1d1a      	adds	r2, r3, #4
 800489e:	602a      	str	r2, [r5, #0]
 80048a0:	681d      	ldr	r5, [r3, #0]
 80048a2:	6862      	ldr	r2, [r4, #4]
 80048a4:	2100      	movs	r1, #0
 80048a6:	4628      	mov	r0, r5
 80048a8:	f7fb fc9a 	bl	80001e0 <memchr>
 80048ac:	b108      	cbz	r0, 80048b2 <_printf_i+0x1ea>
 80048ae:	1b40      	subs	r0, r0, r5
 80048b0:	6060      	str	r0, [r4, #4]
 80048b2:	6863      	ldr	r3, [r4, #4]
 80048b4:	6123      	str	r3, [r4, #16]
 80048b6:	2300      	movs	r3, #0
 80048b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048bc:	e7aa      	b.n	8004814 <_printf_i+0x14c>
 80048be:	6923      	ldr	r3, [r4, #16]
 80048c0:	462a      	mov	r2, r5
 80048c2:	4649      	mov	r1, r9
 80048c4:	4640      	mov	r0, r8
 80048c6:	47d0      	blx	sl
 80048c8:	3001      	adds	r0, #1
 80048ca:	d0ad      	beq.n	8004828 <_printf_i+0x160>
 80048cc:	6823      	ldr	r3, [r4, #0]
 80048ce:	079b      	lsls	r3, r3, #30
 80048d0:	d413      	bmi.n	80048fa <_printf_i+0x232>
 80048d2:	68e0      	ldr	r0, [r4, #12]
 80048d4:	9b03      	ldr	r3, [sp, #12]
 80048d6:	4298      	cmp	r0, r3
 80048d8:	bfb8      	it	lt
 80048da:	4618      	movlt	r0, r3
 80048dc:	e7a6      	b.n	800482c <_printf_i+0x164>
 80048de:	2301      	movs	r3, #1
 80048e0:	4632      	mov	r2, r6
 80048e2:	4649      	mov	r1, r9
 80048e4:	4640      	mov	r0, r8
 80048e6:	47d0      	blx	sl
 80048e8:	3001      	adds	r0, #1
 80048ea:	d09d      	beq.n	8004828 <_printf_i+0x160>
 80048ec:	3501      	adds	r5, #1
 80048ee:	68e3      	ldr	r3, [r4, #12]
 80048f0:	9903      	ldr	r1, [sp, #12]
 80048f2:	1a5b      	subs	r3, r3, r1
 80048f4:	42ab      	cmp	r3, r5
 80048f6:	dcf2      	bgt.n	80048de <_printf_i+0x216>
 80048f8:	e7eb      	b.n	80048d2 <_printf_i+0x20a>
 80048fa:	2500      	movs	r5, #0
 80048fc:	f104 0619 	add.w	r6, r4, #25
 8004900:	e7f5      	b.n	80048ee <_printf_i+0x226>
 8004902:	bf00      	nop
 8004904:	08005210 	.word	0x08005210
 8004908:	08005221 	.word	0x08005221

0800490c <__sflush_r>:
 800490c:	898a      	ldrh	r2, [r1, #12]
 800490e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004912:	4605      	mov	r5, r0
 8004914:	0710      	lsls	r0, r2, #28
 8004916:	460c      	mov	r4, r1
 8004918:	d458      	bmi.n	80049cc <__sflush_r+0xc0>
 800491a:	684b      	ldr	r3, [r1, #4]
 800491c:	2b00      	cmp	r3, #0
 800491e:	dc05      	bgt.n	800492c <__sflush_r+0x20>
 8004920:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004922:	2b00      	cmp	r3, #0
 8004924:	dc02      	bgt.n	800492c <__sflush_r+0x20>
 8004926:	2000      	movs	r0, #0
 8004928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800492c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800492e:	2e00      	cmp	r6, #0
 8004930:	d0f9      	beq.n	8004926 <__sflush_r+0x1a>
 8004932:	2300      	movs	r3, #0
 8004934:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004938:	682f      	ldr	r7, [r5, #0]
 800493a:	6a21      	ldr	r1, [r4, #32]
 800493c:	602b      	str	r3, [r5, #0]
 800493e:	d032      	beq.n	80049a6 <__sflush_r+0x9a>
 8004940:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004942:	89a3      	ldrh	r3, [r4, #12]
 8004944:	075a      	lsls	r2, r3, #29
 8004946:	d505      	bpl.n	8004954 <__sflush_r+0x48>
 8004948:	6863      	ldr	r3, [r4, #4]
 800494a:	1ac0      	subs	r0, r0, r3
 800494c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800494e:	b10b      	cbz	r3, 8004954 <__sflush_r+0x48>
 8004950:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004952:	1ac0      	subs	r0, r0, r3
 8004954:	2300      	movs	r3, #0
 8004956:	4602      	mov	r2, r0
 8004958:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800495a:	6a21      	ldr	r1, [r4, #32]
 800495c:	4628      	mov	r0, r5
 800495e:	47b0      	blx	r6
 8004960:	1c43      	adds	r3, r0, #1
 8004962:	89a3      	ldrh	r3, [r4, #12]
 8004964:	d106      	bne.n	8004974 <__sflush_r+0x68>
 8004966:	6829      	ldr	r1, [r5, #0]
 8004968:	291d      	cmp	r1, #29
 800496a:	d82b      	bhi.n	80049c4 <__sflush_r+0xb8>
 800496c:	4a29      	ldr	r2, [pc, #164]	; (8004a14 <__sflush_r+0x108>)
 800496e:	410a      	asrs	r2, r1
 8004970:	07d6      	lsls	r6, r2, #31
 8004972:	d427      	bmi.n	80049c4 <__sflush_r+0xb8>
 8004974:	2200      	movs	r2, #0
 8004976:	6062      	str	r2, [r4, #4]
 8004978:	04d9      	lsls	r1, r3, #19
 800497a:	6922      	ldr	r2, [r4, #16]
 800497c:	6022      	str	r2, [r4, #0]
 800497e:	d504      	bpl.n	800498a <__sflush_r+0x7e>
 8004980:	1c42      	adds	r2, r0, #1
 8004982:	d101      	bne.n	8004988 <__sflush_r+0x7c>
 8004984:	682b      	ldr	r3, [r5, #0]
 8004986:	b903      	cbnz	r3, 800498a <__sflush_r+0x7e>
 8004988:	6560      	str	r0, [r4, #84]	; 0x54
 800498a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800498c:	602f      	str	r7, [r5, #0]
 800498e:	2900      	cmp	r1, #0
 8004990:	d0c9      	beq.n	8004926 <__sflush_r+0x1a>
 8004992:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004996:	4299      	cmp	r1, r3
 8004998:	d002      	beq.n	80049a0 <__sflush_r+0x94>
 800499a:	4628      	mov	r0, r5
 800499c:	f7ff fbce 	bl	800413c <_free_r>
 80049a0:	2000      	movs	r0, #0
 80049a2:	6360      	str	r0, [r4, #52]	; 0x34
 80049a4:	e7c0      	b.n	8004928 <__sflush_r+0x1c>
 80049a6:	2301      	movs	r3, #1
 80049a8:	4628      	mov	r0, r5
 80049aa:	47b0      	blx	r6
 80049ac:	1c41      	adds	r1, r0, #1
 80049ae:	d1c8      	bne.n	8004942 <__sflush_r+0x36>
 80049b0:	682b      	ldr	r3, [r5, #0]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d0c5      	beq.n	8004942 <__sflush_r+0x36>
 80049b6:	2b1d      	cmp	r3, #29
 80049b8:	d001      	beq.n	80049be <__sflush_r+0xb2>
 80049ba:	2b16      	cmp	r3, #22
 80049bc:	d101      	bne.n	80049c2 <__sflush_r+0xb6>
 80049be:	602f      	str	r7, [r5, #0]
 80049c0:	e7b1      	b.n	8004926 <__sflush_r+0x1a>
 80049c2:	89a3      	ldrh	r3, [r4, #12]
 80049c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049c8:	81a3      	strh	r3, [r4, #12]
 80049ca:	e7ad      	b.n	8004928 <__sflush_r+0x1c>
 80049cc:	690f      	ldr	r7, [r1, #16]
 80049ce:	2f00      	cmp	r7, #0
 80049d0:	d0a9      	beq.n	8004926 <__sflush_r+0x1a>
 80049d2:	0793      	lsls	r3, r2, #30
 80049d4:	680e      	ldr	r6, [r1, #0]
 80049d6:	bf08      	it	eq
 80049d8:	694b      	ldreq	r3, [r1, #20]
 80049da:	600f      	str	r7, [r1, #0]
 80049dc:	bf18      	it	ne
 80049de:	2300      	movne	r3, #0
 80049e0:	eba6 0807 	sub.w	r8, r6, r7
 80049e4:	608b      	str	r3, [r1, #8]
 80049e6:	f1b8 0f00 	cmp.w	r8, #0
 80049ea:	dd9c      	ble.n	8004926 <__sflush_r+0x1a>
 80049ec:	6a21      	ldr	r1, [r4, #32]
 80049ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80049f0:	4643      	mov	r3, r8
 80049f2:	463a      	mov	r2, r7
 80049f4:	4628      	mov	r0, r5
 80049f6:	47b0      	blx	r6
 80049f8:	2800      	cmp	r0, #0
 80049fa:	dc06      	bgt.n	8004a0a <__sflush_r+0xfe>
 80049fc:	89a3      	ldrh	r3, [r4, #12]
 80049fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a02:	81a3      	strh	r3, [r4, #12]
 8004a04:	f04f 30ff 	mov.w	r0, #4294967295
 8004a08:	e78e      	b.n	8004928 <__sflush_r+0x1c>
 8004a0a:	4407      	add	r7, r0
 8004a0c:	eba8 0800 	sub.w	r8, r8, r0
 8004a10:	e7e9      	b.n	80049e6 <__sflush_r+0xda>
 8004a12:	bf00      	nop
 8004a14:	dfbffffe 	.word	0xdfbffffe

08004a18 <_fflush_r>:
 8004a18:	b538      	push	{r3, r4, r5, lr}
 8004a1a:	690b      	ldr	r3, [r1, #16]
 8004a1c:	4605      	mov	r5, r0
 8004a1e:	460c      	mov	r4, r1
 8004a20:	b913      	cbnz	r3, 8004a28 <_fflush_r+0x10>
 8004a22:	2500      	movs	r5, #0
 8004a24:	4628      	mov	r0, r5
 8004a26:	bd38      	pop	{r3, r4, r5, pc}
 8004a28:	b118      	cbz	r0, 8004a32 <_fflush_r+0x1a>
 8004a2a:	6a03      	ldr	r3, [r0, #32]
 8004a2c:	b90b      	cbnz	r3, 8004a32 <_fflush_r+0x1a>
 8004a2e:	f7ff fa51 	bl	8003ed4 <__sinit>
 8004a32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d0f3      	beq.n	8004a22 <_fflush_r+0xa>
 8004a3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004a3c:	07d0      	lsls	r0, r2, #31
 8004a3e:	d404      	bmi.n	8004a4a <_fflush_r+0x32>
 8004a40:	0599      	lsls	r1, r3, #22
 8004a42:	d402      	bmi.n	8004a4a <_fflush_r+0x32>
 8004a44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a46:	f7ff fb58 	bl	80040fa <__retarget_lock_acquire_recursive>
 8004a4a:	4628      	mov	r0, r5
 8004a4c:	4621      	mov	r1, r4
 8004a4e:	f7ff ff5d 	bl	800490c <__sflush_r>
 8004a52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a54:	07da      	lsls	r2, r3, #31
 8004a56:	4605      	mov	r5, r0
 8004a58:	d4e4      	bmi.n	8004a24 <_fflush_r+0xc>
 8004a5a:	89a3      	ldrh	r3, [r4, #12]
 8004a5c:	059b      	lsls	r3, r3, #22
 8004a5e:	d4e1      	bmi.n	8004a24 <_fflush_r+0xc>
 8004a60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a62:	f7ff fb4b 	bl	80040fc <__retarget_lock_release_recursive>
 8004a66:	e7dd      	b.n	8004a24 <_fflush_r+0xc>

08004a68 <fiprintf>:
 8004a68:	b40e      	push	{r1, r2, r3}
 8004a6a:	b503      	push	{r0, r1, lr}
 8004a6c:	4601      	mov	r1, r0
 8004a6e:	ab03      	add	r3, sp, #12
 8004a70:	4805      	ldr	r0, [pc, #20]	; (8004a88 <fiprintf+0x20>)
 8004a72:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a76:	6800      	ldr	r0, [r0, #0]
 8004a78:	9301      	str	r3, [sp, #4]
 8004a7a:	f000 f89f 	bl	8004bbc <_vfiprintf_r>
 8004a7e:	b002      	add	sp, #8
 8004a80:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a84:	b003      	add	sp, #12
 8004a86:	4770      	bx	lr
 8004a88:	20000064 	.word	0x20000064

08004a8c <memmove>:
 8004a8c:	4288      	cmp	r0, r1
 8004a8e:	b510      	push	{r4, lr}
 8004a90:	eb01 0402 	add.w	r4, r1, r2
 8004a94:	d902      	bls.n	8004a9c <memmove+0x10>
 8004a96:	4284      	cmp	r4, r0
 8004a98:	4623      	mov	r3, r4
 8004a9a:	d807      	bhi.n	8004aac <memmove+0x20>
 8004a9c:	1e43      	subs	r3, r0, #1
 8004a9e:	42a1      	cmp	r1, r4
 8004aa0:	d008      	beq.n	8004ab4 <memmove+0x28>
 8004aa2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004aa6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004aaa:	e7f8      	b.n	8004a9e <memmove+0x12>
 8004aac:	4402      	add	r2, r0
 8004aae:	4601      	mov	r1, r0
 8004ab0:	428a      	cmp	r2, r1
 8004ab2:	d100      	bne.n	8004ab6 <memmove+0x2a>
 8004ab4:	bd10      	pop	{r4, pc}
 8004ab6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004aba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004abe:	e7f7      	b.n	8004ab0 <memmove+0x24>

08004ac0 <_sbrk_r>:
 8004ac0:	b538      	push	{r3, r4, r5, lr}
 8004ac2:	4d06      	ldr	r5, [pc, #24]	; (8004adc <_sbrk_r+0x1c>)
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	4604      	mov	r4, r0
 8004ac8:	4608      	mov	r0, r1
 8004aca:	602b      	str	r3, [r5, #0]
 8004acc:	f7fc f802 	bl	8000ad4 <_sbrk>
 8004ad0:	1c43      	adds	r3, r0, #1
 8004ad2:	d102      	bne.n	8004ada <_sbrk_r+0x1a>
 8004ad4:	682b      	ldr	r3, [r5, #0]
 8004ad6:	b103      	cbz	r3, 8004ada <_sbrk_r+0x1a>
 8004ad8:	6023      	str	r3, [r4, #0]
 8004ada:	bd38      	pop	{r3, r4, r5, pc}
 8004adc:	20000284 	.word	0x20000284

08004ae0 <memcpy>:
 8004ae0:	440a      	add	r2, r1
 8004ae2:	4291      	cmp	r1, r2
 8004ae4:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ae8:	d100      	bne.n	8004aec <memcpy+0xc>
 8004aea:	4770      	bx	lr
 8004aec:	b510      	push	{r4, lr}
 8004aee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004af2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004af6:	4291      	cmp	r1, r2
 8004af8:	d1f9      	bne.n	8004aee <memcpy+0xe>
 8004afa:	bd10      	pop	{r4, pc}

08004afc <abort>:
 8004afc:	b508      	push	{r3, lr}
 8004afe:	2006      	movs	r0, #6
 8004b00:	f000 fa34 	bl	8004f6c <raise>
 8004b04:	2001      	movs	r0, #1
 8004b06:	f7fb ff6d 	bl	80009e4 <_exit>

08004b0a <_realloc_r>:
 8004b0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b0e:	4680      	mov	r8, r0
 8004b10:	4614      	mov	r4, r2
 8004b12:	460e      	mov	r6, r1
 8004b14:	b921      	cbnz	r1, 8004b20 <_realloc_r+0x16>
 8004b16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b1a:	4611      	mov	r1, r2
 8004b1c:	f7ff bb82 	b.w	8004224 <_malloc_r>
 8004b20:	b92a      	cbnz	r2, 8004b2e <_realloc_r+0x24>
 8004b22:	f7ff fb0b 	bl	800413c <_free_r>
 8004b26:	4625      	mov	r5, r4
 8004b28:	4628      	mov	r0, r5
 8004b2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b2e:	f000 fa39 	bl	8004fa4 <_malloc_usable_size_r>
 8004b32:	4284      	cmp	r4, r0
 8004b34:	4607      	mov	r7, r0
 8004b36:	d802      	bhi.n	8004b3e <_realloc_r+0x34>
 8004b38:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004b3c:	d812      	bhi.n	8004b64 <_realloc_r+0x5a>
 8004b3e:	4621      	mov	r1, r4
 8004b40:	4640      	mov	r0, r8
 8004b42:	f7ff fb6f 	bl	8004224 <_malloc_r>
 8004b46:	4605      	mov	r5, r0
 8004b48:	2800      	cmp	r0, #0
 8004b4a:	d0ed      	beq.n	8004b28 <_realloc_r+0x1e>
 8004b4c:	42bc      	cmp	r4, r7
 8004b4e:	4622      	mov	r2, r4
 8004b50:	4631      	mov	r1, r6
 8004b52:	bf28      	it	cs
 8004b54:	463a      	movcs	r2, r7
 8004b56:	f7ff ffc3 	bl	8004ae0 <memcpy>
 8004b5a:	4631      	mov	r1, r6
 8004b5c:	4640      	mov	r0, r8
 8004b5e:	f7ff faed 	bl	800413c <_free_r>
 8004b62:	e7e1      	b.n	8004b28 <_realloc_r+0x1e>
 8004b64:	4635      	mov	r5, r6
 8004b66:	e7df      	b.n	8004b28 <_realloc_r+0x1e>

08004b68 <__sfputc_r>:
 8004b68:	6893      	ldr	r3, [r2, #8]
 8004b6a:	3b01      	subs	r3, #1
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	b410      	push	{r4}
 8004b70:	6093      	str	r3, [r2, #8]
 8004b72:	da08      	bge.n	8004b86 <__sfputc_r+0x1e>
 8004b74:	6994      	ldr	r4, [r2, #24]
 8004b76:	42a3      	cmp	r3, r4
 8004b78:	db01      	blt.n	8004b7e <__sfputc_r+0x16>
 8004b7a:	290a      	cmp	r1, #10
 8004b7c:	d103      	bne.n	8004b86 <__sfputc_r+0x1e>
 8004b7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b82:	f000 b935 	b.w	8004df0 <__swbuf_r>
 8004b86:	6813      	ldr	r3, [r2, #0]
 8004b88:	1c58      	adds	r0, r3, #1
 8004b8a:	6010      	str	r0, [r2, #0]
 8004b8c:	7019      	strb	r1, [r3, #0]
 8004b8e:	4608      	mov	r0, r1
 8004b90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b94:	4770      	bx	lr

08004b96 <__sfputs_r>:
 8004b96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b98:	4606      	mov	r6, r0
 8004b9a:	460f      	mov	r7, r1
 8004b9c:	4614      	mov	r4, r2
 8004b9e:	18d5      	adds	r5, r2, r3
 8004ba0:	42ac      	cmp	r4, r5
 8004ba2:	d101      	bne.n	8004ba8 <__sfputs_r+0x12>
 8004ba4:	2000      	movs	r0, #0
 8004ba6:	e007      	b.n	8004bb8 <__sfputs_r+0x22>
 8004ba8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bac:	463a      	mov	r2, r7
 8004bae:	4630      	mov	r0, r6
 8004bb0:	f7ff ffda 	bl	8004b68 <__sfputc_r>
 8004bb4:	1c43      	adds	r3, r0, #1
 8004bb6:	d1f3      	bne.n	8004ba0 <__sfputs_r+0xa>
 8004bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004bbc <_vfiprintf_r>:
 8004bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bc0:	460d      	mov	r5, r1
 8004bc2:	b09d      	sub	sp, #116	; 0x74
 8004bc4:	4614      	mov	r4, r2
 8004bc6:	4698      	mov	r8, r3
 8004bc8:	4606      	mov	r6, r0
 8004bca:	b118      	cbz	r0, 8004bd4 <_vfiprintf_r+0x18>
 8004bcc:	6a03      	ldr	r3, [r0, #32]
 8004bce:	b90b      	cbnz	r3, 8004bd4 <_vfiprintf_r+0x18>
 8004bd0:	f7ff f980 	bl	8003ed4 <__sinit>
 8004bd4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004bd6:	07d9      	lsls	r1, r3, #31
 8004bd8:	d405      	bmi.n	8004be6 <_vfiprintf_r+0x2a>
 8004bda:	89ab      	ldrh	r3, [r5, #12]
 8004bdc:	059a      	lsls	r2, r3, #22
 8004bde:	d402      	bmi.n	8004be6 <_vfiprintf_r+0x2a>
 8004be0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004be2:	f7ff fa8a 	bl	80040fa <__retarget_lock_acquire_recursive>
 8004be6:	89ab      	ldrh	r3, [r5, #12]
 8004be8:	071b      	lsls	r3, r3, #28
 8004bea:	d501      	bpl.n	8004bf0 <_vfiprintf_r+0x34>
 8004bec:	692b      	ldr	r3, [r5, #16]
 8004bee:	b99b      	cbnz	r3, 8004c18 <_vfiprintf_r+0x5c>
 8004bf0:	4629      	mov	r1, r5
 8004bf2:	4630      	mov	r0, r6
 8004bf4:	f000 f93a 	bl	8004e6c <__swsetup_r>
 8004bf8:	b170      	cbz	r0, 8004c18 <_vfiprintf_r+0x5c>
 8004bfa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004bfc:	07dc      	lsls	r4, r3, #31
 8004bfe:	d504      	bpl.n	8004c0a <_vfiprintf_r+0x4e>
 8004c00:	f04f 30ff 	mov.w	r0, #4294967295
 8004c04:	b01d      	add	sp, #116	; 0x74
 8004c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c0a:	89ab      	ldrh	r3, [r5, #12]
 8004c0c:	0598      	lsls	r0, r3, #22
 8004c0e:	d4f7      	bmi.n	8004c00 <_vfiprintf_r+0x44>
 8004c10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004c12:	f7ff fa73 	bl	80040fc <__retarget_lock_release_recursive>
 8004c16:	e7f3      	b.n	8004c00 <_vfiprintf_r+0x44>
 8004c18:	2300      	movs	r3, #0
 8004c1a:	9309      	str	r3, [sp, #36]	; 0x24
 8004c1c:	2320      	movs	r3, #32
 8004c1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004c22:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c26:	2330      	movs	r3, #48	; 0x30
 8004c28:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004ddc <_vfiprintf_r+0x220>
 8004c2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004c30:	f04f 0901 	mov.w	r9, #1
 8004c34:	4623      	mov	r3, r4
 8004c36:	469a      	mov	sl, r3
 8004c38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c3c:	b10a      	cbz	r2, 8004c42 <_vfiprintf_r+0x86>
 8004c3e:	2a25      	cmp	r2, #37	; 0x25
 8004c40:	d1f9      	bne.n	8004c36 <_vfiprintf_r+0x7a>
 8004c42:	ebba 0b04 	subs.w	fp, sl, r4
 8004c46:	d00b      	beq.n	8004c60 <_vfiprintf_r+0xa4>
 8004c48:	465b      	mov	r3, fp
 8004c4a:	4622      	mov	r2, r4
 8004c4c:	4629      	mov	r1, r5
 8004c4e:	4630      	mov	r0, r6
 8004c50:	f7ff ffa1 	bl	8004b96 <__sfputs_r>
 8004c54:	3001      	adds	r0, #1
 8004c56:	f000 80a9 	beq.w	8004dac <_vfiprintf_r+0x1f0>
 8004c5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c5c:	445a      	add	r2, fp
 8004c5e:	9209      	str	r2, [sp, #36]	; 0x24
 8004c60:	f89a 3000 	ldrb.w	r3, [sl]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	f000 80a1 	beq.w	8004dac <_vfiprintf_r+0x1f0>
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8004c70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c74:	f10a 0a01 	add.w	sl, sl, #1
 8004c78:	9304      	str	r3, [sp, #16]
 8004c7a:	9307      	str	r3, [sp, #28]
 8004c7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004c80:	931a      	str	r3, [sp, #104]	; 0x68
 8004c82:	4654      	mov	r4, sl
 8004c84:	2205      	movs	r2, #5
 8004c86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c8a:	4854      	ldr	r0, [pc, #336]	; (8004ddc <_vfiprintf_r+0x220>)
 8004c8c:	f7fb faa8 	bl	80001e0 <memchr>
 8004c90:	9a04      	ldr	r2, [sp, #16]
 8004c92:	b9d8      	cbnz	r0, 8004ccc <_vfiprintf_r+0x110>
 8004c94:	06d1      	lsls	r1, r2, #27
 8004c96:	bf44      	itt	mi
 8004c98:	2320      	movmi	r3, #32
 8004c9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c9e:	0713      	lsls	r3, r2, #28
 8004ca0:	bf44      	itt	mi
 8004ca2:	232b      	movmi	r3, #43	; 0x2b
 8004ca4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ca8:	f89a 3000 	ldrb.w	r3, [sl]
 8004cac:	2b2a      	cmp	r3, #42	; 0x2a
 8004cae:	d015      	beq.n	8004cdc <_vfiprintf_r+0x120>
 8004cb0:	9a07      	ldr	r2, [sp, #28]
 8004cb2:	4654      	mov	r4, sl
 8004cb4:	2000      	movs	r0, #0
 8004cb6:	f04f 0c0a 	mov.w	ip, #10
 8004cba:	4621      	mov	r1, r4
 8004cbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004cc0:	3b30      	subs	r3, #48	; 0x30
 8004cc2:	2b09      	cmp	r3, #9
 8004cc4:	d94d      	bls.n	8004d62 <_vfiprintf_r+0x1a6>
 8004cc6:	b1b0      	cbz	r0, 8004cf6 <_vfiprintf_r+0x13a>
 8004cc8:	9207      	str	r2, [sp, #28]
 8004cca:	e014      	b.n	8004cf6 <_vfiprintf_r+0x13a>
 8004ccc:	eba0 0308 	sub.w	r3, r0, r8
 8004cd0:	fa09 f303 	lsl.w	r3, r9, r3
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	9304      	str	r3, [sp, #16]
 8004cd8:	46a2      	mov	sl, r4
 8004cda:	e7d2      	b.n	8004c82 <_vfiprintf_r+0xc6>
 8004cdc:	9b03      	ldr	r3, [sp, #12]
 8004cde:	1d19      	adds	r1, r3, #4
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	9103      	str	r1, [sp, #12]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	bfbb      	ittet	lt
 8004ce8:	425b      	neglt	r3, r3
 8004cea:	f042 0202 	orrlt.w	r2, r2, #2
 8004cee:	9307      	strge	r3, [sp, #28]
 8004cf0:	9307      	strlt	r3, [sp, #28]
 8004cf2:	bfb8      	it	lt
 8004cf4:	9204      	strlt	r2, [sp, #16]
 8004cf6:	7823      	ldrb	r3, [r4, #0]
 8004cf8:	2b2e      	cmp	r3, #46	; 0x2e
 8004cfa:	d10c      	bne.n	8004d16 <_vfiprintf_r+0x15a>
 8004cfc:	7863      	ldrb	r3, [r4, #1]
 8004cfe:	2b2a      	cmp	r3, #42	; 0x2a
 8004d00:	d134      	bne.n	8004d6c <_vfiprintf_r+0x1b0>
 8004d02:	9b03      	ldr	r3, [sp, #12]
 8004d04:	1d1a      	adds	r2, r3, #4
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	9203      	str	r2, [sp, #12]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	bfb8      	it	lt
 8004d0e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004d12:	3402      	adds	r4, #2
 8004d14:	9305      	str	r3, [sp, #20]
 8004d16:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004dec <_vfiprintf_r+0x230>
 8004d1a:	7821      	ldrb	r1, [r4, #0]
 8004d1c:	2203      	movs	r2, #3
 8004d1e:	4650      	mov	r0, sl
 8004d20:	f7fb fa5e 	bl	80001e0 <memchr>
 8004d24:	b138      	cbz	r0, 8004d36 <_vfiprintf_r+0x17a>
 8004d26:	9b04      	ldr	r3, [sp, #16]
 8004d28:	eba0 000a 	sub.w	r0, r0, sl
 8004d2c:	2240      	movs	r2, #64	; 0x40
 8004d2e:	4082      	lsls	r2, r0
 8004d30:	4313      	orrs	r3, r2
 8004d32:	3401      	adds	r4, #1
 8004d34:	9304      	str	r3, [sp, #16]
 8004d36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d3a:	4829      	ldr	r0, [pc, #164]	; (8004de0 <_vfiprintf_r+0x224>)
 8004d3c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004d40:	2206      	movs	r2, #6
 8004d42:	f7fb fa4d 	bl	80001e0 <memchr>
 8004d46:	2800      	cmp	r0, #0
 8004d48:	d03f      	beq.n	8004dca <_vfiprintf_r+0x20e>
 8004d4a:	4b26      	ldr	r3, [pc, #152]	; (8004de4 <_vfiprintf_r+0x228>)
 8004d4c:	bb1b      	cbnz	r3, 8004d96 <_vfiprintf_r+0x1da>
 8004d4e:	9b03      	ldr	r3, [sp, #12]
 8004d50:	3307      	adds	r3, #7
 8004d52:	f023 0307 	bic.w	r3, r3, #7
 8004d56:	3308      	adds	r3, #8
 8004d58:	9303      	str	r3, [sp, #12]
 8004d5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d5c:	443b      	add	r3, r7
 8004d5e:	9309      	str	r3, [sp, #36]	; 0x24
 8004d60:	e768      	b.n	8004c34 <_vfiprintf_r+0x78>
 8004d62:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d66:	460c      	mov	r4, r1
 8004d68:	2001      	movs	r0, #1
 8004d6a:	e7a6      	b.n	8004cba <_vfiprintf_r+0xfe>
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	3401      	adds	r4, #1
 8004d70:	9305      	str	r3, [sp, #20]
 8004d72:	4619      	mov	r1, r3
 8004d74:	f04f 0c0a 	mov.w	ip, #10
 8004d78:	4620      	mov	r0, r4
 8004d7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d7e:	3a30      	subs	r2, #48	; 0x30
 8004d80:	2a09      	cmp	r2, #9
 8004d82:	d903      	bls.n	8004d8c <_vfiprintf_r+0x1d0>
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d0c6      	beq.n	8004d16 <_vfiprintf_r+0x15a>
 8004d88:	9105      	str	r1, [sp, #20]
 8004d8a:	e7c4      	b.n	8004d16 <_vfiprintf_r+0x15a>
 8004d8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d90:	4604      	mov	r4, r0
 8004d92:	2301      	movs	r3, #1
 8004d94:	e7f0      	b.n	8004d78 <_vfiprintf_r+0x1bc>
 8004d96:	ab03      	add	r3, sp, #12
 8004d98:	9300      	str	r3, [sp, #0]
 8004d9a:	462a      	mov	r2, r5
 8004d9c:	4b12      	ldr	r3, [pc, #72]	; (8004de8 <_vfiprintf_r+0x22c>)
 8004d9e:	a904      	add	r1, sp, #16
 8004da0:	4630      	mov	r0, r6
 8004da2:	f3af 8000 	nop.w
 8004da6:	4607      	mov	r7, r0
 8004da8:	1c78      	adds	r0, r7, #1
 8004daa:	d1d6      	bne.n	8004d5a <_vfiprintf_r+0x19e>
 8004dac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004dae:	07d9      	lsls	r1, r3, #31
 8004db0:	d405      	bmi.n	8004dbe <_vfiprintf_r+0x202>
 8004db2:	89ab      	ldrh	r3, [r5, #12]
 8004db4:	059a      	lsls	r2, r3, #22
 8004db6:	d402      	bmi.n	8004dbe <_vfiprintf_r+0x202>
 8004db8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004dba:	f7ff f99f 	bl	80040fc <__retarget_lock_release_recursive>
 8004dbe:	89ab      	ldrh	r3, [r5, #12]
 8004dc0:	065b      	lsls	r3, r3, #25
 8004dc2:	f53f af1d 	bmi.w	8004c00 <_vfiprintf_r+0x44>
 8004dc6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004dc8:	e71c      	b.n	8004c04 <_vfiprintf_r+0x48>
 8004dca:	ab03      	add	r3, sp, #12
 8004dcc:	9300      	str	r3, [sp, #0]
 8004dce:	462a      	mov	r2, r5
 8004dd0:	4b05      	ldr	r3, [pc, #20]	; (8004de8 <_vfiprintf_r+0x22c>)
 8004dd2:	a904      	add	r1, sp, #16
 8004dd4:	4630      	mov	r0, r6
 8004dd6:	f7ff fc77 	bl	80046c8 <_printf_i>
 8004dda:	e7e4      	b.n	8004da6 <_vfiprintf_r+0x1ea>
 8004ddc:	080051ff 	.word	0x080051ff
 8004de0:	08005209 	.word	0x08005209
 8004de4:	00000000 	.word	0x00000000
 8004de8:	08004b97 	.word	0x08004b97
 8004dec:	08005205 	.word	0x08005205

08004df0 <__swbuf_r>:
 8004df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004df2:	460e      	mov	r6, r1
 8004df4:	4614      	mov	r4, r2
 8004df6:	4605      	mov	r5, r0
 8004df8:	b118      	cbz	r0, 8004e02 <__swbuf_r+0x12>
 8004dfa:	6a03      	ldr	r3, [r0, #32]
 8004dfc:	b90b      	cbnz	r3, 8004e02 <__swbuf_r+0x12>
 8004dfe:	f7ff f869 	bl	8003ed4 <__sinit>
 8004e02:	69a3      	ldr	r3, [r4, #24]
 8004e04:	60a3      	str	r3, [r4, #8]
 8004e06:	89a3      	ldrh	r3, [r4, #12]
 8004e08:	071a      	lsls	r2, r3, #28
 8004e0a:	d525      	bpl.n	8004e58 <__swbuf_r+0x68>
 8004e0c:	6923      	ldr	r3, [r4, #16]
 8004e0e:	b31b      	cbz	r3, 8004e58 <__swbuf_r+0x68>
 8004e10:	6823      	ldr	r3, [r4, #0]
 8004e12:	6922      	ldr	r2, [r4, #16]
 8004e14:	1a98      	subs	r0, r3, r2
 8004e16:	6963      	ldr	r3, [r4, #20]
 8004e18:	b2f6      	uxtb	r6, r6
 8004e1a:	4283      	cmp	r3, r0
 8004e1c:	4637      	mov	r7, r6
 8004e1e:	dc04      	bgt.n	8004e2a <__swbuf_r+0x3a>
 8004e20:	4621      	mov	r1, r4
 8004e22:	4628      	mov	r0, r5
 8004e24:	f7ff fdf8 	bl	8004a18 <_fflush_r>
 8004e28:	b9e0      	cbnz	r0, 8004e64 <__swbuf_r+0x74>
 8004e2a:	68a3      	ldr	r3, [r4, #8]
 8004e2c:	3b01      	subs	r3, #1
 8004e2e:	60a3      	str	r3, [r4, #8]
 8004e30:	6823      	ldr	r3, [r4, #0]
 8004e32:	1c5a      	adds	r2, r3, #1
 8004e34:	6022      	str	r2, [r4, #0]
 8004e36:	701e      	strb	r6, [r3, #0]
 8004e38:	6962      	ldr	r2, [r4, #20]
 8004e3a:	1c43      	adds	r3, r0, #1
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d004      	beq.n	8004e4a <__swbuf_r+0x5a>
 8004e40:	89a3      	ldrh	r3, [r4, #12]
 8004e42:	07db      	lsls	r3, r3, #31
 8004e44:	d506      	bpl.n	8004e54 <__swbuf_r+0x64>
 8004e46:	2e0a      	cmp	r6, #10
 8004e48:	d104      	bne.n	8004e54 <__swbuf_r+0x64>
 8004e4a:	4621      	mov	r1, r4
 8004e4c:	4628      	mov	r0, r5
 8004e4e:	f7ff fde3 	bl	8004a18 <_fflush_r>
 8004e52:	b938      	cbnz	r0, 8004e64 <__swbuf_r+0x74>
 8004e54:	4638      	mov	r0, r7
 8004e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e58:	4621      	mov	r1, r4
 8004e5a:	4628      	mov	r0, r5
 8004e5c:	f000 f806 	bl	8004e6c <__swsetup_r>
 8004e60:	2800      	cmp	r0, #0
 8004e62:	d0d5      	beq.n	8004e10 <__swbuf_r+0x20>
 8004e64:	f04f 37ff 	mov.w	r7, #4294967295
 8004e68:	e7f4      	b.n	8004e54 <__swbuf_r+0x64>
	...

08004e6c <__swsetup_r>:
 8004e6c:	b538      	push	{r3, r4, r5, lr}
 8004e6e:	4b2a      	ldr	r3, [pc, #168]	; (8004f18 <__swsetup_r+0xac>)
 8004e70:	4605      	mov	r5, r0
 8004e72:	6818      	ldr	r0, [r3, #0]
 8004e74:	460c      	mov	r4, r1
 8004e76:	b118      	cbz	r0, 8004e80 <__swsetup_r+0x14>
 8004e78:	6a03      	ldr	r3, [r0, #32]
 8004e7a:	b90b      	cbnz	r3, 8004e80 <__swsetup_r+0x14>
 8004e7c:	f7ff f82a 	bl	8003ed4 <__sinit>
 8004e80:	89a3      	ldrh	r3, [r4, #12]
 8004e82:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e86:	0718      	lsls	r0, r3, #28
 8004e88:	d422      	bmi.n	8004ed0 <__swsetup_r+0x64>
 8004e8a:	06d9      	lsls	r1, r3, #27
 8004e8c:	d407      	bmi.n	8004e9e <__swsetup_r+0x32>
 8004e8e:	2309      	movs	r3, #9
 8004e90:	602b      	str	r3, [r5, #0]
 8004e92:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004e96:	81a3      	strh	r3, [r4, #12]
 8004e98:	f04f 30ff 	mov.w	r0, #4294967295
 8004e9c:	e034      	b.n	8004f08 <__swsetup_r+0x9c>
 8004e9e:	0758      	lsls	r0, r3, #29
 8004ea0:	d512      	bpl.n	8004ec8 <__swsetup_r+0x5c>
 8004ea2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ea4:	b141      	cbz	r1, 8004eb8 <__swsetup_r+0x4c>
 8004ea6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004eaa:	4299      	cmp	r1, r3
 8004eac:	d002      	beq.n	8004eb4 <__swsetup_r+0x48>
 8004eae:	4628      	mov	r0, r5
 8004eb0:	f7ff f944 	bl	800413c <_free_r>
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	6363      	str	r3, [r4, #52]	; 0x34
 8004eb8:	89a3      	ldrh	r3, [r4, #12]
 8004eba:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004ebe:	81a3      	strh	r3, [r4, #12]
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	6063      	str	r3, [r4, #4]
 8004ec4:	6923      	ldr	r3, [r4, #16]
 8004ec6:	6023      	str	r3, [r4, #0]
 8004ec8:	89a3      	ldrh	r3, [r4, #12]
 8004eca:	f043 0308 	orr.w	r3, r3, #8
 8004ece:	81a3      	strh	r3, [r4, #12]
 8004ed0:	6923      	ldr	r3, [r4, #16]
 8004ed2:	b94b      	cbnz	r3, 8004ee8 <__swsetup_r+0x7c>
 8004ed4:	89a3      	ldrh	r3, [r4, #12]
 8004ed6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004eda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ede:	d003      	beq.n	8004ee8 <__swsetup_r+0x7c>
 8004ee0:	4621      	mov	r1, r4
 8004ee2:	4628      	mov	r0, r5
 8004ee4:	f000 f88c 	bl	8005000 <__smakebuf_r>
 8004ee8:	89a0      	ldrh	r0, [r4, #12]
 8004eea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004eee:	f010 0301 	ands.w	r3, r0, #1
 8004ef2:	d00a      	beq.n	8004f0a <__swsetup_r+0x9e>
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	60a3      	str	r3, [r4, #8]
 8004ef8:	6963      	ldr	r3, [r4, #20]
 8004efa:	425b      	negs	r3, r3
 8004efc:	61a3      	str	r3, [r4, #24]
 8004efe:	6923      	ldr	r3, [r4, #16]
 8004f00:	b943      	cbnz	r3, 8004f14 <__swsetup_r+0xa8>
 8004f02:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004f06:	d1c4      	bne.n	8004e92 <__swsetup_r+0x26>
 8004f08:	bd38      	pop	{r3, r4, r5, pc}
 8004f0a:	0781      	lsls	r1, r0, #30
 8004f0c:	bf58      	it	pl
 8004f0e:	6963      	ldrpl	r3, [r4, #20]
 8004f10:	60a3      	str	r3, [r4, #8]
 8004f12:	e7f4      	b.n	8004efe <__swsetup_r+0x92>
 8004f14:	2000      	movs	r0, #0
 8004f16:	e7f7      	b.n	8004f08 <__swsetup_r+0x9c>
 8004f18:	20000064 	.word	0x20000064

08004f1c <_raise_r>:
 8004f1c:	291f      	cmp	r1, #31
 8004f1e:	b538      	push	{r3, r4, r5, lr}
 8004f20:	4604      	mov	r4, r0
 8004f22:	460d      	mov	r5, r1
 8004f24:	d904      	bls.n	8004f30 <_raise_r+0x14>
 8004f26:	2316      	movs	r3, #22
 8004f28:	6003      	str	r3, [r0, #0]
 8004f2a:	f04f 30ff 	mov.w	r0, #4294967295
 8004f2e:	bd38      	pop	{r3, r4, r5, pc}
 8004f30:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8004f32:	b112      	cbz	r2, 8004f3a <_raise_r+0x1e>
 8004f34:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004f38:	b94b      	cbnz	r3, 8004f4e <_raise_r+0x32>
 8004f3a:	4620      	mov	r0, r4
 8004f3c:	f000 f830 	bl	8004fa0 <_getpid_r>
 8004f40:	462a      	mov	r2, r5
 8004f42:	4601      	mov	r1, r0
 8004f44:	4620      	mov	r0, r4
 8004f46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f4a:	f000 b817 	b.w	8004f7c <_kill_r>
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d00a      	beq.n	8004f68 <_raise_r+0x4c>
 8004f52:	1c59      	adds	r1, r3, #1
 8004f54:	d103      	bne.n	8004f5e <_raise_r+0x42>
 8004f56:	2316      	movs	r3, #22
 8004f58:	6003      	str	r3, [r0, #0]
 8004f5a:	2001      	movs	r0, #1
 8004f5c:	e7e7      	b.n	8004f2e <_raise_r+0x12>
 8004f5e:	2400      	movs	r4, #0
 8004f60:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004f64:	4628      	mov	r0, r5
 8004f66:	4798      	blx	r3
 8004f68:	2000      	movs	r0, #0
 8004f6a:	e7e0      	b.n	8004f2e <_raise_r+0x12>

08004f6c <raise>:
 8004f6c:	4b02      	ldr	r3, [pc, #8]	; (8004f78 <raise+0xc>)
 8004f6e:	4601      	mov	r1, r0
 8004f70:	6818      	ldr	r0, [r3, #0]
 8004f72:	f7ff bfd3 	b.w	8004f1c <_raise_r>
 8004f76:	bf00      	nop
 8004f78:	20000064 	.word	0x20000064

08004f7c <_kill_r>:
 8004f7c:	b538      	push	{r3, r4, r5, lr}
 8004f7e:	4d07      	ldr	r5, [pc, #28]	; (8004f9c <_kill_r+0x20>)
 8004f80:	2300      	movs	r3, #0
 8004f82:	4604      	mov	r4, r0
 8004f84:	4608      	mov	r0, r1
 8004f86:	4611      	mov	r1, r2
 8004f88:	602b      	str	r3, [r5, #0]
 8004f8a:	f7fb fd1b 	bl	80009c4 <_kill>
 8004f8e:	1c43      	adds	r3, r0, #1
 8004f90:	d102      	bne.n	8004f98 <_kill_r+0x1c>
 8004f92:	682b      	ldr	r3, [r5, #0]
 8004f94:	b103      	cbz	r3, 8004f98 <_kill_r+0x1c>
 8004f96:	6023      	str	r3, [r4, #0]
 8004f98:	bd38      	pop	{r3, r4, r5, pc}
 8004f9a:	bf00      	nop
 8004f9c:	20000284 	.word	0x20000284

08004fa0 <_getpid_r>:
 8004fa0:	f7fb bd08 	b.w	80009b4 <_getpid>

08004fa4 <_malloc_usable_size_r>:
 8004fa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fa8:	1f18      	subs	r0, r3, #4
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	bfbc      	itt	lt
 8004fae:	580b      	ldrlt	r3, [r1, r0]
 8004fb0:	18c0      	addlt	r0, r0, r3
 8004fb2:	4770      	bx	lr

08004fb4 <__swhatbuf_r>:
 8004fb4:	b570      	push	{r4, r5, r6, lr}
 8004fb6:	460c      	mov	r4, r1
 8004fb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fbc:	2900      	cmp	r1, #0
 8004fbe:	b096      	sub	sp, #88	; 0x58
 8004fc0:	4615      	mov	r5, r2
 8004fc2:	461e      	mov	r6, r3
 8004fc4:	da0d      	bge.n	8004fe2 <__swhatbuf_r+0x2e>
 8004fc6:	89a3      	ldrh	r3, [r4, #12]
 8004fc8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004fcc:	f04f 0100 	mov.w	r1, #0
 8004fd0:	bf0c      	ite	eq
 8004fd2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004fd6:	2340      	movne	r3, #64	; 0x40
 8004fd8:	2000      	movs	r0, #0
 8004fda:	6031      	str	r1, [r6, #0]
 8004fdc:	602b      	str	r3, [r5, #0]
 8004fde:	b016      	add	sp, #88	; 0x58
 8004fe0:	bd70      	pop	{r4, r5, r6, pc}
 8004fe2:	466a      	mov	r2, sp
 8004fe4:	f000 f848 	bl	8005078 <_fstat_r>
 8004fe8:	2800      	cmp	r0, #0
 8004fea:	dbec      	blt.n	8004fc6 <__swhatbuf_r+0x12>
 8004fec:	9901      	ldr	r1, [sp, #4]
 8004fee:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004ff2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004ff6:	4259      	negs	r1, r3
 8004ff8:	4159      	adcs	r1, r3
 8004ffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ffe:	e7eb      	b.n	8004fd8 <__swhatbuf_r+0x24>

08005000 <__smakebuf_r>:
 8005000:	898b      	ldrh	r3, [r1, #12]
 8005002:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005004:	079d      	lsls	r5, r3, #30
 8005006:	4606      	mov	r6, r0
 8005008:	460c      	mov	r4, r1
 800500a:	d507      	bpl.n	800501c <__smakebuf_r+0x1c>
 800500c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005010:	6023      	str	r3, [r4, #0]
 8005012:	6123      	str	r3, [r4, #16]
 8005014:	2301      	movs	r3, #1
 8005016:	6163      	str	r3, [r4, #20]
 8005018:	b002      	add	sp, #8
 800501a:	bd70      	pop	{r4, r5, r6, pc}
 800501c:	ab01      	add	r3, sp, #4
 800501e:	466a      	mov	r2, sp
 8005020:	f7ff ffc8 	bl	8004fb4 <__swhatbuf_r>
 8005024:	9900      	ldr	r1, [sp, #0]
 8005026:	4605      	mov	r5, r0
 8005028:	4630      	mov	r0, r6
 800502a:	f7ff f8fb 	bl	8004224 <_malloc_r>
 800502e:	b948      	cbnz	r0, 8005044 <__smakebuf_r+0x44>
 8005030:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005034:	059a      	lsls	r2, r3, #22
 8005036:	d4ef      	bmi.n	8005018 <__smakebuf_r+0x18>
 8005038:	f023 0303 	bic.w	r3, r3, #3
 800503c:	f043 0302 	orr.w	r3, r3, #2
 8005040:	81a3      	strh	r3, [r4, #12]
 8005042:	e7e3      	b.n	800500c <__smakebuf_r+0xc>
 8005044:	89a3      	ldrh	r3, [r4, #12]
 8005046:	6020      	str	r0, [r4, #0]
 8005048:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800504c:	81a3      	strh	r3, [r4, #12]
 800504e:	9b00      	ldr	r3, [sp, #0]
 8005050:	6163      	str	r3, [r4, #20]
 8005052:	9b01      	ldr	r3, [sp, #4]
 8005054:	6120      	str	r0, [r4, #16]
 8005056:	b15b      	cbz	r3, 8005070 <__smakebuf_r+0x70>
 8005058:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800505c:	4630      	mov	r0, r6
 800505e:	f000 f81d 	bl	800509c <_isatty_r>
 8005062:	b128      	cbz	r0, 8005070 <__smakebuf_r+0x70>
 8005064:	89a3      	ldrh	r3, [r4, #12]
 8005066:	f023 0303 	bic.w	r3, r3, #3
 800506a:	f043 0301 	orr.w	r3, r3, #1
 800506e:	81a3      	strh	r3, [r4, #12]
 8005070:	89a3      	ldrh	r3, [r4, #12]
 8005072:	431d      	orrs	r5, r3
 8005074:	81a5      	strh	r5, [r4, #12]
 8005076:	e7cf      	b.n	8005018 <__smakebuf_r+0x18>

08005078 <_fstat_r>:
 8005078:	b538      	push	{r3, r4, r5, lr}
 800507a:	4d07      	ldr	r5, [pc, #28]	; (8005098 <_fstat_r+0x20>)
 800507c:	2300      	movs	r3, #0
 800507e:	4604      	mov	r4, r0
 8005080:	4608      	mov	r0, r1
 8005082:	4611      	mov	r1, r2
 8005084:	602b      	str	r3, [r5, #0]
 8005086:	f7fb fcfc 	bl	8000a82 <_fstat>
 800508a:	1c43      	adds	r3, r0, #1
 800508c:	d102      	bne.n	8005094 <_fstat_r+0x1c>
 800508e:	682b      	ldr	r3, [r5, #0]
 8005090:	b103      	cbz	r3, 8005094 <_fstat_r+0x1c>
 8005092:	6023      	str	r3, [r4, #0]
 8005094:	bd38      	pop	{r3, r4, r5, pc}
 8005096:	bf00      	nop
 8005098:	20000284 	.word	0x20000284

0800509c <_isatty_r>:
 800509c:	b538      	push	{r3, r4, r5, lr}
 800509e:	4d06      	ldr	r5, [pc, #24]	; (80050b8 <_isatty_r+0x1c>)
 80050a0:	2300      	movs	r3, #0
 80050a2:	4604      	mov	r4, r0
 80050a4:	4608      	mov	r0, r1
 80050a6:	602b      	str	r3, [r5, #0]
 80050a8:	f7fb fcfb 	bl	8000aa2 <_isatty>
 80050ac:	1c43      	adds	r3, r0, #1
 80050ae:	d102      	bne.n	80050b6 <_isatty_r+0x1a>
 80050b0:	682b      	ldr	r3, [r5, #0]
 80050b2:	b103      	cbz	r3, 80050b6 <_isatty_r+0x1a>
 80050b4:	6023      	str	r3, [r4, #0]
 80050b6:	bd38      	pop	{r3, r4, r5, pc}
 80050b8:	20000284 	.word	0x20000284

080050bc <_init>:
 80050bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050be:	bf00      	nop
 80050c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050c2:	bc08      	pop	{r3}
 80050c4:	469e      	mov	lr, r3
 80050c6:	4770      	bx	lr

080050c8 <_fini>:
 80050c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ca:	bf00      	nop
 80050cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050ce:	bc08      	pop	{r3}
 80050d0:	469e      	mov	lr, r3
 80050d2:	4770      	bx	lr
