
MPU 9250 - Based project -- Over I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002568  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080026f0  080026f0  000126f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002730  08002730  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08002730  08002730  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002730  08002730  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002730  08002730  00012730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002734  08002734  00012734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002738  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  20000010  08002748  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  08002748  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000840f  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000171e  00000000  00000000  00028492  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008c0  00000000  00000000  00029bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000696  00000000  00000000  0002a470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000016a4  00000000  00000000  0002ab06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000adf4  00000000  00000000  0002c1aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1b4c  00000000  00000000  00036f9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002230  00000000  00000000  00118aec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000099  00000000  00000000  0011ad1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080026d8 	.word	0x080026d8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	080026d8 	.word	0x080026d8

080001c8 <MPU9250_IsConnected>:
{
}

#ifndef USE_SPI
bool	MPU9250_IsConnected()
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	if(HAL_I2C_IsDeviceReady(&_MPU9250_I2C,_dev_add,1,HAL_MAX_DELAY)==HAL_OK){
 80001cc:	21d0      	movs	r1, #208	; 0xd0
 80001ce:	f04f 33ff 	mov.w	r3, #4294967295
 80001d2:	2201      	movs	r2, #1
 80001d4:	4806      	ldr	r0, [pc, #24]	; (80001f0 <MPU9250_IsConnected+0x28>)
 80001d6:	f001 f839 	bl	800124c <HAL_I2C_IsDeviceReady>
 80001da:	4603      	mov	r3, r0
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d104      	bne.n	80001ea <MPU9250_IsConnected+0x22>
		x = 1;
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <MPU9250_IsConnected+0x2c>)
 80001e2:	2201      	movs	r2, #1
 80001e4:	601a      	str	r2, [r3, #0]
		return true;
 80001e6:	2301      	movs	r3, #1
 80001e8:	e000      	b.n	80001ec <MPU9250_IsConnected+0x24>
	}
	else
		return false;
 80001ea:	2300      	movs	r3, #0
}
 80001ec:	4618      	mov	r0, r3
 80001ee:	bd80      	pop	{r7, pc}
 80001f0:	20000048 	.word	0x20000048
 80001f4:	200000b8 	.word	0x200000b8

080001f8 <MPU_I2C_Write>:

void MPU_I2C_Write(uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b086      	sub	sp, #24
 80001fc:	af04      	add	r7, sp, #16
 80001fe:	6078      	str	r0, [r7, #4]
 8000200:	460b      	mov	r3, r1
 8000202:	70fb      	strb	r3, [r7, #3]
 8000204:	4613      	mov	r3, r2
 8000206:	803b      	strh	r3, [r7, #0]
	HAL_I2C_Mem_Write(&_MPU9250_I2C,_dev_add,WriteAddr,I2C_MEMADD_SIZE_8BIT,pBuffer,NumByteToWrite,HAL_MAX_DELAY);
 8000208:	21d0      	movs	r1, #208	; 0xd0
 800020a:	78fb      	ldrb	r3, [r7, #3]
 800020c:	b29a      	uxth	r2, r3
 800020e:	f04f 33ff 	mov.w	r3, #4294967295
 8000212:	9302      	str	r3, [sp, #8]
 8000214:	883b      	ldrh	r3, [r7, #0]
 8000216:	9301      	str	r3, [sp, #4]
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	9300      	str	r3, [sp, #0]
 800021c:	2301      	movs	r3, #1
 800021e:	4803      	ldr	r0, [pc, #12]	; (800022c <MPU_I2C_Write+0x34>)
 8000220:	f000 ff00 	bl	8001024 <HAL_I2C_Mem_Write>
}
 8000224:	bf00      	nop
 8000226:	3708      	adds	r7, #8
 8000228:	46bd      	mov	sp, r7
 800022a:	bd80      	pop	{r7, pc}
 800022c:	20000048 	.word	0x20000048

08000230 <MPU_I2C_Read>:

void MPU_I2C_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b086      	sub	sp, #24
 8000234:	af02      	add	r7, sp, #8
 8000236:	6078      	str	r0, [r7, #4]
 8000238:	460b      	mov	r3, r1
 800023a:	70fb      	strb	r3, [r7, #3]
 800023c:	4613      	mov	r3, r2
 800023e:	803b      	strh	r3, [r7, #0]
	uint8_t data = ReadAddr | READWRITE_CMD;
 8000240:	2280      	movs	r2, #128	; 0x80
 8000242:	78fb      	ldrb	r3, [r7, #3]
 8000244:	4313      	orrs	r3, r2
 8000246:	b2db      	uxtb	r3, r3
 8000248:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&_MPU9250_I2C,_dev_add,&data,1,HAL_MAX_DELAY);
 800024a:	21d0      	movs	r1, #208	; 0xd0
 800024c:	f107 020f 	add.w	r2, r7, #15
 8000250:	f04f 33ff 	mov.w	r3, #4294967295
 8000254:	9300      	str	r3, [sp, #0]
 8000256:	2301      	movs	r3, #1
 8000258:	4807      	ldr	r0, [pc, #28]	; (8000278 <MPU_I2C_Read+0x48>)
 800025a:	f000 fcf9 	bl	8000c50 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&_MPU9250_I2C,_dev_add,pBuffer,NumByteToRead,HAL_MAX_DELAY);
 800025e:	21d0      	movs	r1, #208	; 0xd0
 8000260:	883b      	ldrh	r3, [r7, #0]
 8000262:	f04f 32ff 	mov.w	r2, #4294967295
 8000266:	9200      	str	r2, [sp, #0]
 8000268:	687a      	ldr	r2, [r7, #4]
 800026a:	4803      	ldr	r0, [pc, #12]	; (8000278 <MPU_I2C_Read+0x48>)
 800026c:	f000 fde4 	bl	8000e38 <HAL_I2C_Master_Receive>
}
 8000270:	bf00      	nop
 8000272:	3710      	adds	r7, #16
 8000274:	46bd      	mov	sp, r7
 8000276:	bd80      	pop	{r7, pc}
 8000278:	20000048 	.word	0x20000048

0800027c <writeRegister>:
	MPU9250_Deactivate();
}
#endif
/* writes a byte to MPU9250 register given a register address and data */
void writeRegister(uint8_t subAddress, uint8_t data)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b082      	sub	sp, #8
 8000280:	af00      	add	r7, sp, #0
 8000282:	4603      	mov	r3, r0
 8000284:	460a      	mov	r2, r1
 8000286:	71fb      	strb	r3, [r7, #7]
 8000288:	4613      	mov	r3, r2
 800028a:	71bb      	strb	r3, [r7, #6]
	#ifdef USE_SPI
	MPU_SPI_Write(&data, subAddress, 1);
	#else
	MPU_I2C_Write(&data, subAddress, 1);
 800028c:	79f9      	ldrb	r1, [r7, #7]
 800028e:	1dbb      	adds	r3, r7, #6
 8000290:	2201      	movs	r2, #1
 8000292:	4618      	mov	r0, r3
 8000294:	f7ff ffb0 	bl	80001f8 <MPU_I2C_Write>
	#endif
	HAL_Delay(10);
 8000298:	200a      	movs	r0, #10
 800029a:	f000 fbcf 	bl	8000a3c <HAL_Delay>
}
 800029e:	bf00      	nop
 80002a0:	3708      	adds	r7, #8
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}

080002a6 <readRegisters>:

/* reads registers from MPU9250 given a starting register address, number of bytes, and a pointer to store data */
void readRegisters(uint8_t subAddress, uint8_t count, uint8_t* dest){
 80002a6:	b580      	push	{r7, lr}
 80002a8:	b082      	sub	sp, #8
 80002aa:	af00      	add	r7, sp, #0
 80002ac:	4603      	mov	r3, r0
 80002ae:	603a      	str	r2, [r7, #0]
 80002b0:	71fb      	strb	r3, [r7, #7]
 80002b2:	460b      	mov	r3, r1
 80002b4:	71bb      	strb	r3, [r7, #6]
	#ifdef USE_SPI
	MPU_SPI_Read(dest, subAddress, count);
	#else
	MPU_I2C_Read(dest, subAddress, count);
 80002b6:	79bb      	ldrb	r3, [r7, #6]
 80002b8:	b29a      	uxth	r2, r3
 80002ba:	79fb      	ldrb	r3, [r7, #7]
 80002bc:	4619      	mov	r1, r3
 80002be:	6838      	ldr	r0, [r7, #0]
 80002c0:	f7ff ffb6 	bl	8000230 <MPU_I2C_Read>
	#endif
}
 80002c4:	bf00      	nop
 80002c6:	3708      	adds	r7, #8
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd80      	pop	{r7, pc}

080002cc <writeAK8963Register>:

/* writes a register to the AK8963 given a register address and data */
void writeAK8963Register(uint8_t subAddress, uint8_t data)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b082      	sub	sp, #8
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	4603      	mov	r3, r0
 80002d4:	460a      	mov	r2, r1
 80002d6:	71fb      	strb	r3, [r7, #7]
 80002d8:	4613      	mov	r3, r2
 80002da:	71bb      	strb	r3, [r7, #6]
	// set slave 0 to the AK8963 and set for write
	writeRegister(I2C_SLV0_ADDR,AK8963_I2C_ADDR);
 80002dc:	2325      	movs	r3, #37	; 0x25
 80002de:	220c      	movs	r2, #12
 80002e0:	4611      	mov	r1, r2
 80002e2:	4618      	mov	r0, r3
 80002e4:	f7ff ffca 	bl	800027c <writeRegister>

	// set the register to the desired AK8963 sub address
	writeRegister(I2C_SLV0_REG,subAddress);
 80002e8:	2226      	movs	r2, #38	; 0x26
 80002ea:	79fb      	ldrb	r3, [r7, #7]
 80002ec:	4619      	mov	r1, r3
 80002ee:	4610      	mov	r0, r2
 80002f0:	f7ff ffc4 	bl	800027c <writeRegister>

	// store the data for write
	writeRegister(I2C_SLV0_DO,data);
 80002f4:	2263      	movs	r2, #99	; 0x63
 80002f6:	79bb      	ldrb	r3, [r7, #6]
 80002f8:	4619      	mov	r1, r3
 80002fa:	4610      	mov	r0, r2
 80002fc:	f7ff ffbe 	bl	800027c <writeRegister>

	// enable I2C and send 1 byte
	writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | (uint8_t)1);
 8000300:	2227      	movs	r2, #39	; 0x27
 8000302:	2380      	movs	r3, #128	; 0x80
 8000304:	f043 0301 	orr.w	r3, r3, #1
 8000308:	b2db      	uxtb	r3, r3
 800030a:	4619      	mov	r1, r3
 800030c:	4610      	mov	r0, r2
 800030e:	f7ff ffb5 	bl	800027c <writeRegister>
}
 8000312:	bf00      	nop
 8000314:	3708      	adds	r7, #8
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}

0800031a <readAK8963Registers>:

/* reads registers from the AK8963 */
void readAK8963Registers(uint8_t subAddress, uint8_t count, uint8_t* dest)
{
 800031a:	b580      	push	{r7, lr}
 800031c:	b082      	sub	sp, #8
 800031e:	af00      	add	r7, sp, #0
 8000320:	4603      	mov	r3, r0
 8000322:	603a      	str	r2, [r7, #0]
 8000324:	71fb      	strb	r3, [r7, #7]
 8000326:	460b      	mov	r3, r1
 8000328:	71bb      	strb	r3, [r7, #6]
	// set slave 0 to the AK8963 and set for read
	writeRegister(I2C_SLV0_ADDR, AK8963_I2C_ADDR | I2C_READ_FLAG);
 800032a:	2025      	movs	r0, #37	; 0x25
 800032c:	220c      	movs	r2, #12
 800032e:	2380      	movs	r3, #128	; 0x80
 8000330:	4313      	orrs	r3, r2
 8000332:	b2db      	uxtb	r3, r3
 8000334:	4619      	mov	r1, r3
 8000336:	f7ff ffa1 	bl	800027c <writeRegister>

	// set the register to the desired AK8963 sub address
	writeRegister(I2C_SLV0_REG,subAddress);
 800033a:	2226      	movs	r2, #38	; 0x26
 800033c:	79fb      	ldrb	r3, [r7, #7]
 800033e:	4619      	mov	r1, r3
 8000340:	4610      	mov	r0, r2
 8000342:	f7ff ff9b 	bl	800027c <writeRegister>

	// enable I2C and request the bytes
	writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | count);
 8000346:	2027      	movs	r0, #39	; 0x27
 8000348:	2280      	movs	r2, #128	; 0x80
 800034a:	79bb      	ldrb	r3, [r7, #6]
 800034c:	4313      	orrs	r3, r2
 800034e:	b2db      	uxtb	r3, r3
 8000350:	4619      	mov	r1, r3
 8000352:	f7ff ff93 	bl	800027c <writeRegister>

	// takes some time for these registers to fill
	HAL_Delay(1);
 8000356:	2001      	movs	r0, #1
 8000358:	f000 fb70 	bl	8000a3c <HAL_Delay>

	// read the bytes off the MPU9250 EXT_SENS_DATA registers
	readRegisters(EXT_SENS_DATA_00,count,dest);
 800035c:	2049      	movs	r0, #73	; 0x49
 800035e:	79bb      	ldrb	r3, [r7, #6]
 8000360:	683a      	ldr	r2, [r7, #0]
 8000362:	4619      	mov	r1, r3
 8000364:	f7ff ff9f 	bl	80002a6 <readRegisters>
}
 8000368:	bf00      	nop
 800036a:	3708      	adds	r7, #8
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}

08000370 <whoAmI>:

/* gets the MPU9250 WHO_AM_I register value, expected to be 0x71 */
static uint8_t whoAmI(){
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
	// read the WHO AM I register
	readRegisters(WHO_AM_I,1,_buffer);
 8000374:	2375      	movs	r3, #117	; 0x75
 8000376:	4a04      	ldr	r2, [pc, #16]	; (8000388 <whoAmI+0x18>)
 8000378:	2101      	movs	r1, #1
 800037a:	4618      	mov	r0, r3
 800037c:	f7ff ff93 	bl	80002a6 <readRegisters>

	// return the register value
	return _buffer[0];
 8000380:	4b01      	ldr	r3, [pc, #4]	; (8000388 <whoAmI+0x18>)
 8000382:	781b      	ldrb	r3, [r3, #0]
}
 8000384:	4618      	mov	r0, r3
 8000386:	bd80      	pop	{r7, pc}
 8000388:	2000002c 	.word	0x2000002c

0800038c <whoAmIAK8963>:

/* gets the AK8963 WHO_AM_I register value, expected to be 0x48 */
static int whoAmIAK8963(){
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
	// read the WHO AM I register
	readAK8963Registers(AK8963_WHO_AM_I,1,_buffer);
 8000390:	2300      	movs	r3, #0
 8000392:	4a04      	ldr	r2, [pc, #16]	; (80003a4 <whoAmIAK8963+0x18>)
 8000394:	2101      	movs	r1, #1
 8000396:	4618      	mov	r0, r3
 8000398:	f7ff ffbf 	bl	800031a <readAK8963Registers>
	// return the register value
	return _buffer[0];
 800039c:	4b01      	ldr	r3, [pc, #4]	; (80003a4 <whoAmIAK8963+0x18>)
 800039e:	781b      	ldrb	r3, [r3, #0]
}
 80003a0:	4618      	mov	r0, r3
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	2000002c 	.word	0x2000002c

080003a8 <MPU9250_Init>:

/* starts communication with the MPU-9250 */
uint8_t MPU9250_Init()
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
	#ifndef USE_SPI
	while(MPU9250_IsConnected() == false)
 80003ae:	e002      	b.n	80003b6 <MPU9250_Init+0xe>
	{
		HAL_Delay(100);
 80003b0:	2064      	movs	r0, #100	; 0x64
 80003b2:	f000 fb43 	bl	8000a3c <HAL_Delay>
	while(MPU9250_IsConnected() == false)
 80003b6:	f7ff ff07 	bl	80001c8 <MPU9250_IsConnected>
 80003ba:	4603      	mov	r3, r0
 80003bc:	f083 0301 	eor.w	r3, r3, #1
 80003c0:	b2db      	uxtb	r3, r3
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d1f4      	bne.n	80003b0 <MPU9250_Init+0x8>
	}
	#endif
	// select clock source to gyro
	writeRegister(PWR_MGMNT_1, CLOCK_SEL_PLL);
 80003c6:	236b      	movs	r3, #107	; 0x6b
 80003c8:	2201      	movs	r2, #1
 80003ca:	4611      	mov	r1, r2
 80003cc:	4618      	mov	r0, r3
 80003ce:	f7ff ff55 	bl	800027c <writeRegister>
	// enable I2C master mode
	writeRegister(USER_CTRL, I2C_MST_EN);
 80003d2:	236a      	movs	r3, #106	; 0x6a
 80003d4:	2220      	movs	r2, #32
 80003d6:	4611      	mov	r1, r2
 80003d8:	4618      	mov	r0, r3
 80003da:	f7ff ff4f 	bl	800027c <writeRegister>
	// set the I2C bus speed to 400 kHz
	writeRegister(I2C_MST_CTRL, I2C_MST_CLK);
 80003de:	2324      	movs	r3, #36	; 0x24
 80003e0:	220d      	movs	r2, #13
 80003e2:	4611      	mov	r1, r2
 80003e4:	4618      	mov	r0, r3
 80003e6:	f7ff ff49 	bl	800027c <writeRegister>

	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 80003ea:	230a      	movs	r3, #10
 80003ec:	2200      	movs	r2, #0
 80003ee:	4611      	mov	r1, r2
 80003f0:	4618      	mov	r0, r3
 80003f2:	f7ff ff6b 	bl	80002cc <writeAK8963Register>
	// reset the MPU9250
	writeRegister(PWR_MGMNT_1,PWR_RESET);
 80003f6:	236b      	movs	r3, #107	; 0x6b
 80003f8:	2280      	movs	r2, #128	; 0x80
 80003fa:	4611      	mov	r1, r2
 80003fc:	4618      	mov	r0, r3
 80003fe:	f7ff ff3d 	bl	800027c <writeRegister>
	// wait for MPU-9250 to come back up
	HAL_Delay(10);
 8000402:	200a      	movs	r0, #10
 8000404:	f000 fb1a 	bl	8000a3c <HAL_Delay>
	// reset the AK8963
	writeAK8963Register(AK8963_CNTL2,AK8963_RESET);
 8000408:	230b      	movs	r3, #11
 800040a:	2201      	movs	r2, #1
 800040c:	4611      	mov	r1, r2
 800040e:	4618      	mov	r0, r3
 8000410:	f7ff ff5c 	bl	80002cc <writeAK8963Register>
	// select clock source to gyro
	writeRegister(PWR_MGMNT_1,CLOCK_SEL_PLL);
 8000414:	236b      	movs	r3, #107	; 0x6b
 8000416:	2201      	movs	r2, #1
 8000418:	4611      	mov	r1, r2
 800041a:	4618      	mov	r0, r3
 800041c:	f7ff ff2e 	bl	800027c <writeRegister>

	// check the WHO AM I byte, expected value is 0x71 (decimal 113) or 0x73 (decimal 115)
	uint8_t who = whoAmI();
 8000420:	f7ff ffa6 	bl	8000370 <whoAmI>
 8000424:	4603      	mov	r3, r0
 8000426:	71fb      	strb	r3, [r7, #7]
	if((who != 0x71) && ( who != 0x73))
 8000428:	79fb      	ldrb	r3, [r7, #7]
 800042a:	2b71      	cmp	r3, #113	; 0x71
 800042c:	d004      	beq.n	8000438 <MPU9250_Init+0x90>
 800042e:	79fb      	ldrb	r3, [r7, #7]
 8000430:	2b73      	cmp	r3, #115	; 0x73
 8000432:	d001      	beq.n	8000438 <MPU9250_Init+0x90>
	{
		return 1;
 8000434:	2301      	movs	r3, #1
 8000436:	e06c      	b.n	8000512 <MPU9250_Init+0x16a>
	}

	// enable accelerometer and gyro
	writeRegister(PWR_MGMNT_2,SEN_ENABLE);
 8000438:	236c      	movs	r3, #108	; 0x6c
 800043a:	2200      	movs	r2, #0
 800043c:	4611      	mov	r1, r2
 800043e:	4618      	mov	r0, r3
 8000440:	f7ff ff1c 	bl	800027c <writeRegister>

	// setting accel range to 16G as default
	writeRegister(ACCEL_CONFIG,ACCEL_FS_SEL_16G);
 8000444:	231c      	movs	r3, #28
 8000446:	2218      	movs	r2, #24
 8000448:	4611      	mov	r1, r2
 800044a:	4618      	mov	r0, r3
 800044c:	f7ff ff16 	bl	800027c <writeRegister>

	// setting the gyro range to 250DPS as default
	writeRegister(GYRO_CONFIG,GYRO_FS_SEL_250DPS);
 8000450:	231b      	movs	r3, #27
 8000452:	2200      	movs	r2, #0
 8000454:	4611      	mov	r1, r2
 8000456:	4618      	mov	r0, r3
 8000458:	f7ff ff10 	bl	800027c <writeRegister>

	// setting bandwidth to 184Hz as default
	writeRegister(ACCEL_CONFIG2,DLPF_184);
 800045c:	231d      	movs	r3, #29
 800045e:	2201      	movs	r2, #1
 8000460:	4611      	mov	r1, r2
 8000462:	4618      	mov	r0, r3
 8000464:	f7ff ff0a 	bl	800027c <writeRegister>

	// setting gyro bandwidth to 184Hz
	writeRegister(CONFIG,DLPF_184);
 8000468:	231a      	movs	r3, #26
 800046a:	2201      	movs	r2, #1
 800046c:	4611      	mov	r1, r2
 800046e:	4618      	mov	r0, r3
 8000470:	f7ff ff04 	bl	800027c <writeRegister>

	// setting the sample rate divider to 0 as default
	writeRegister(SMPDIV,0x00);
 8000474:	2319      	movs	r3, #25
 8000476:	2100      	movs	r1, #0
 8000478:	4618      	mov	r0, r3
 800047a:	f7ff feff 	bl	800027c <writeRegister>

	// enable I2C master mode
	writeRegister(USER_CTRL,I2C_MST_EN);
 800047e:	236a      	movs	r3, #106	; 0x6a
 8000480:	2220      	movs	r2, #32
 8000482:	4611      	mov	r1, r2
 8000484:	4618      	mov	r0, r3
 8000486:	f7ff fef9 	bl	800027c <writeRegister>

	// set the I2C bus speed to 400 kHz
	writeRegister(I2C_MST_CTRL,I2C_MST_CLK);
 800048a:	2324      	movs	r3, #36	; 0x24
 800048c:	220d      	movs	r2, #13
 800048e:	4611      	mov	r1, r2
 8000490:	4618      	mov	r0, r3
 8000492:	f7ff fef3 	bl	800027c <writeRegister>

	// check AK8963 WHO AM I register, expected value is 0x48 (decimal 72)
	if( whoAmIAK8963() != 0x48 )
 8000496:	f7ff ff79 	bl	800038c <whoAmIAK8963>
 800049a:	4603      	mov	r3, r0
 800049c:	2b48      	cmp	r3, #72	; 0x48
 800049e:	d001      	beq.n	80004a4 <MPU9250_Init+0xfc>
	{
		return 1;
 80004a0:	2301      	movs	r3, #1
 80004a2:	e036      	b.n	8000512 <MPU9250_Init+0x16a>
	}

	/* get the magnetometer calibration */
	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 80004a4:	230a      	movs	r3, #10
 80004a6:	2200      	movs	r2, #0
 80004a8:	4611      	mov	r1, r2
 80004aa:	4618      	mov	r0, r3
 80004ac:	f7ff ff0e 	bl	80002cc <writeAK8963Register>

	HAL_Delay(100); // long wait between AK8963 mode changes
 80004b0:	2064      	movs	r0, #100	; 0x64
 80004b2:	f000 fac3 	bl	8000a3c <HAL_Delay>

	// set AK8963 to FUSE ROM access
	writeAK8963Register(AK8963_CNTL1,AK8963_FUSE_ROM);
 80004b6:	230a      	movs	r3, #10
 80004b8:	220f      	movs	r2, #15
 80004ba:	4611      	mov	r1, r2
 80004bc:	4618      	mov	r0, r3
 80004be:	f7ff ff05 	bl	80002cc <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 80004c2:	2064      	movs	r0, #100	; 0x64
 80004c4:	f000 faba 	bl	8000a3c <HAL_Delay>

	// read the AK8963 ASA registers and compute magnetometer scale factors
	readAK8963Registers(AK8963_ASA, 3, _mag_adjust);
 80004c8:	2310      	movs	r3, #16
 80004ca:	4a14      	ldr	r2, [pc, #80]	; (800051c <MPU9250_Init+0x174>)
 80004cc:	2103      	movs	r1, #3
 80004ce:	4618      	mov	r0, r3
 80004d0:	f7ff ff23 	bl	800031a <readAK8963Registers>

	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 80004d4:	230a      	movs	r3, #10
 80004d6:	2200      	movs	r2, #0
 80004d8:	4611      	mov	r1, r2
 80004da:	4618      	mov	r0, r3
 80004dc:	f7ff fef6 	bl	80002cc <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 80004e0:	2064      	movs	r0, #100	; 0x64
 80004e2:	f000 faab 	bl	8000a3c <HAL_Delay>

	// set AK8963 to 16 bit resolution, 100 Hz update rate
	writeAK8963Register(AK8963_CNTL1,AK8963_CNT_MEAS2);
 80004e6:	230a      	movs	r3, #10
 80004e8:	2216      	movs	r2, #22
 80004ea:	4611      	mov	r1, r2
 80004ec:	4618      	mov	r0, r3
 80004ee:	f7ff feed 	bl	80002cc <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 80004f2:	2064      	movs	r0, #100	; 0x64
 80004f4:	f000 faa2 	bl	8000a3c <HAL_Delay>

	// select clock source to gyro
	writeRegister(PWR_MGMNT_1,CLOCK_SEL_PLL);
 80004f8:	236b      	movs	r3, #107	; 0x6b
 80004fa:	2201      	movs	r2, #1
 80004fc:	4611      	mov	r1, r2
 80004fe:	4618      	mov	r0, r3
 8000500:	f7ff febc 	bl	800027c <writeRegister>

	// instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
	readAK8963Registers(AK8963_HXL,7,_buffer);
 8000504:	2303      	movs	r3, #3
 8000506:	4a06      	ldr	r2, [pc, #24]	; (8000520 <MPU9250_Init+0x178>)
 8000508:	2107      	movs	r1, #7
 800050a:	4618      	mov	r0, r3
 800050c:	f7ff ff05 	bl	800031a <readAK8963Registers>

	// successful init, return 0
	return 0;
 8000510:	2300      	movs	r3, #0
}
 8000512:	4618      	mov	r0, r3
 8000514:	3708      	adds	r7, #8
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	20000044 	.word	0x20000044
 8000520:	2000002c 	.word	0x2000002c

08000524 <MPU9250_GetData>:
	writeRegister(SMPDIV, srd);
}

/* read the data, each argiment should point to a array for x, y, and z , at last read the temperature data */
void MPU9250_GetData(int16_t* AccData, int16_t* MagData, int16_t* GyroData, float *TempData)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b086      	sub	sp, #24
 8000528:	af00      	add	r7, sp, #0
 800052a:	60f8      	str	r0, [r7, #12]
 800052c:	60b9      	str	r1, [r7, #8]
 800052e:	607a      	str	r2, [r7, #4]
 8000530:	603b      	str	r3, [r7, #0]
	// grab the data from the MPU9250
	readRegisters(ACCEL_OUT, 21, _buffer);
 8000532:	233b      	movs	r3, #59	; 0x3b
 8000534:	4a6e      	ldr	r2, [pc, #440]	; (80006f0 <MPU9250_GetData+0x1cc>)
 8000536:	2115      	movs	r1, #21
 8000538:	4618      	mov	r0, r3
 800053a:	f7ff feb4 	bl	80002a6 <readRegisters>

	// combine into 16 bit values
	AccData[0] = (((int16_t)_buffer[0]) << 8) | _buffer[1];
 800053e:	4b6c      	ldr	r3, [pc, #432]	; (80006f0 <MPU9250_GetData+0x1cc>)
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	021b      	lsls	r3, r3, #8
 8000544:	b21a      	sxth	r2, r3
 8000546:	4b6a      	ldr	r3, [pc, #424]	; (80006f0 <MPU9250_GetData+0x1cc>)
 8000548:	785b      	ldrb	r3, [r3, #1]
 800054a:	b21b      	sxth	r3, r3
 800054c:	4313      	orrs	r3, r2
 800054e:	b21a      	sxth	r2, r3
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	801a      	strh	r2, [r3, #0]
	AccData[1] = (((int16_t)_buffer[2]) << 8) | _buffer[3];
 8000554:	4b66      	ldr	r3, [pc, #408]	; (80006f0 <MPU9250_GetData+0x1cc>)
 8000556:	789b      	ldrb	r3, [r3, #2]
 8000558:	021b      	lsls	r3, r3, #8
 800055a:	b219      	sxth	r1, r3
 800055c:	4b64      	ldr	r3, [pc, #400]	; (80006f0 <MPU9250_GetData+0x1cc>)
 800055e:	78db      	ldrb	r3, [r3, #3]
 8000560:	b21a      	sxth	r2, r3
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	3302      	adds	r3, #2
 8000566:	430a      	orrs	r2, r1
 8000568:	b212      	sxth	r2, r2
 800056a:	801a      	strh	r2, [r3, #0]
	AccData[2] = (((int16_t)_buffer[4]) << 8) | _buffer[5];
 800056c:	4b60      	ldr	r3, [pc, #384]	; (80006f0 <MPU9250_GetData+0x1cc>)
 800056e:	791b      	ldrb	r3, [r3, #4]
 8000570:	021b      	lsls	r3, r3, #8
 8000572:	b219      	sxth	r1, r3
 8000574:	4b5e      	ldr	r3, [pc, #376]	; (80006f0 <MPU9250_GetData+0x1cc>)
 8000576:	795b      	ldrb	r3, [r3, #5]
 8000578:	b21a      	sxth	r2, r3
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	3304      	adds	r3, #4
 800057e:	430a      	orrs	r2, r1
 8000580:	b212      	sxth	r2, r2
 8000582:	801a      	strh	r2, [r3, #0]
	
	GyroData[0] = (((int16_t)_buffer[8]) << 8) | _buffer[9];
 8000584:	4b5a      	ldr	r3, [pc, #360]	; (80006f0 <MPU9250_GetData+0x1cc>)
 8000586:	7a1b      	ldrb	r3, [r3, #8]
 8000588:	021b      	lsls	r3, r3, #8
 800058a:	b21a      	sxth	r2, r3
 800058c:	4b58      	ldr	r3, [pc, #352]	; (80006f0 <MPU9250_GetData+0x1cc>)
 800058e:	7a5b      	ldrb	r3, [r3, #9]
 8000590:	b21b      	sxth	r3, r3
 8000592:	4313      	orrs	r3, r2
 8000594:	b21a      	sxth	r2, r3
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	801a      	strh	r2, [r3, #0]
	GyroData[1] = (((int16_t)_buffer[10]) << 8) | _buffer[11];
 800059a:	4b55      	ldr	r3, [pc, #340]	; (80006f0 <MPU9250_GetData+0x1cc>)
 800059c:	7a9b      	ldrb	r3, [r3, #10]
 800059e:	021b      	lsls	r3, r3, #8
 80005a0:	b219      	sxth	r1, r3
 80005a2:	4b53      	ldr	r3, [pc, #332]	; (80006f0 <MPU9250_GetData+0x1cc>)
 80005a4:	7adb      	ldrb	r3, [r3, #11]
 80005a6:	b21a      	sxth	r2, r3
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	3302      	adds	r3, #2
 80005ac:	430a      	orrs	r2, r1
 80005ae:	b212      	sxth	r2, r2
 80005b0:	801a      	strh	r2, [r3, #0]
	GyroData[2] = (((int16_t)_buffer[12]) << 8) | _buffer[13];
 80005b2:	4b4f      	ldr	r3, [pc, #316]	; (80006f0 <MPU9250_GetData+0x1cc>)
 80005b4:	7b1b      	ldrb	r3, [r3, #12]
 80005b6:	021b      	lsls	r3, r3, #8
 80005b8:	b219      	sxth	r1, r3
 80005ba:	4b4d      	ldr	r3, [pc, #308]	; (80006f0 <MPU9250_GetData+0x1cc>)
 80005bc:	7b5b      	ldrb	r3, [r3, #13]
 80005be:	b21a      	sxth	r2, r3
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	3304      	adds	r3, #4
 80005c4:	430a      	orrs	r2, r1
 80005c6:	b212      	sxth	r2, r2
 80005c8:	801a      	strh	r2, [r3, #0]

	int16_t magx = (((int16_t)_buffer[15]) << 8) | _buffer[14];
 80005ca:	4b49      	ldr	r3, [pc, #292]	; (80006f0 <MPU9250_GetData+0x1cc>)
 80005cc:	7bdb      	ldrb	r3, [r3, #15]
 80005ce:	021b      	lsls	r3, r3, #8
 80005d0:	b21a      	sxth	r2, r3
 80005d2:	4b47      	ldr	r3, [pc, #284]	; (80006f0 <MPU9250_GetData+0x1cc>)
 80005d4:	7b9b      	ldrb	r3, [r3, #14]
 80005d6:	b21b      	sxth	r3, r3
 80005d8:	4313      	orrs	r3, r2
 80005da:	82fb      	strh	r3, [r7, #22]
	int16_t magy = (((int16_t)_buffer[17]) << 8) | _buffer[16];
 80005dc:	4b44      	ldr	r3, [pc, #272]	; (80006f0 <MPU9250_GetData+0x1cc>)
 80005de:	7c5b      	ldrb	r3, [r3, #17]
 80005e0:	021b      	lsls	r3, r3, #8
 80005e2:	b21a      	sxth	r2, r3
 80005e4:	4b42      	ldr	r3, [pc, #264]	; (80006f0 <MPU9250_GetData+0x1cc>)
 80005e6:	7c1b      	ldrb	r3, [r3, #16]
 80005e8:	b21b      	sxth	r3, r3
 80005ea:	4313      	orrs	r3, r2
 80005ec:	82bb      	strh	r3, [r7, #20]
	int16_t magz = (((int16_t)_buffer[19]) << 8) | _buffer[18];
 80005ee:	4b40      	ldr	r3, [pc, #256]	; (80006f0 <MPU9250_GetData+0x1cc>)
 80005f0:	7cdb      	ldrb	r3, [r3, #19]
 80005f2:	021b      	lsls	r3, r3, #8
 80005f4:	b21a      	sxth	r2, r3
 80005f6:	4b3e      	ldr	r3, [pc, #248]	; (80006f0 <MPU9250_GetData+0x1cc>)
 80005f8:	7c9b      	ldrb	r3, [r3, #18]
 80005fa:	b21b      	sxth	r3, r3
 80005fc:	4313      	orrs	r3, r2
 80005fe:	827b      	strh	r3, [r7, #18]

	MagData[0] = (int16_t)((float)magx * ((float)(_mag_adjust[0] - 128) / 256.0f + 1.0f));
 8000600:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000604:	ee07 3a90 	vmov	s15, r3
 8000608:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800060c:	4b39      	ldr	r3, [pc, #228]	; (80006f4 <MPU9250_GetData+0x1d0>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	3b80      	subs	r3, #128	; 0x80
 8000612:	ee07 3a90 	vmov	s15, r3
 8000616:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800061a:	ed9f 6a37 	vldr	s12, [pc, #220]	; 80006f8 <MPU9250_GetData+0x1d4>
 800061e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000622:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000626:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800062a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800062e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000632:	ee17 3a90 	vmov	r3, s15
 8000636:	b21a      	sxth	r2, r3
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	801a      	strh	r2, [r3, #0]
	MagData[1] = (int16_t)((float)magy * ((float)(_mag_adjust[1] - 128) / 256.0f + 1.0f));
 800063c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000640:	ee07 3a90 	vmov	s15, r3
 8000644:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000648:	4b2a      	ldr	r3, [pc, #168]	; (80006f4 <MPU9250_GetData+0x1d0>)
 800064a:	785b      	ldrb	r3, [r3, #1]
 800064c:	3b80      	subs	r3, #128	; 0x80
 800064e:	ee07 3a90 	vmov	s15, r3
 8000652:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000656:	ed9f 6a28 	vldr	s12, [pc, #160]	; 80006f8 <MPU9250_GetData+0x1d4>
 800065a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800065e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000662:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800066a:	68bb      	ldr	r3, [r7, #8]
 800066c:	3302      	adds	r3, #2
 800066e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000672:	ee17 2a90 	vmov	r2, s15
 8000676:	b212      	sxth	r2, r2
 8000678:	801a      	strh	r2, [r3, #0]
	MagData[2] = (int16_t)((float)magz * ((float)(_mag_adjust[2] - 128) / 256.0f + 1.0f));
 800067a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800067e:	ee07 3a90 	vmov	s15, r3
 8000682:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000686:	4b1b      	ldr	r3, [pc, #108]	; (80006f4 <MPU9250_GetData+0x1d0>)
 8000688:	789b      	ldrb	r3, [r3, #2]
 800068a:	3b80      	subs	r3, #128	; 0x80
 800068c:	ee07 3a90 	vmov	s15, r3
 8000690:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000694:	ed9f 6a18 	vldr	s12, [pc, #96]	; 80006f8 <MPU9250_GetData+0x1d4>
 8000698:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800069c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80006a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80006a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	3304      	adds	r3, #4
 80006ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006b0:	ee17 2a90 	vmov	r2, s15
 80006b4:	b212      	sxth	r2, r2
 80006b6:	801a      	strh	r2, [r3, #0]
	
	//transform Temperature data into float 32 bit values 
	*TempData = (float)((((((int16_t)_buffer[6]) << 8) | _buffer[7]) - RoomTemp_Offset) / Temp_Sensitivity + 21.0f); //according to the register map file 4.23, TEMP_degC = ((TEMP_OUT - RoomTemp_Offset)/ Temp_Sensitivity) + 21degC
 80006b8:	4b0d      	ldr	r3, [pc, #52]	; (80006f0 <MPU9250_GetData+0x1cc>)
 80006ba:	799b      	ldrb	r3, [r3, #6]
 80006bc:	021b      	lsls	r3, r3, #8
 80006be:	4a0c      	ldr	r2, [pc, #48]	; (80006f0 <MPU9250_GetData+0x1cc>)
 80006c0:	79d2      	ldrb	r2, [r2, #7]
 80006c2:	4313      	orrs	r3, r2
 80006c4:	2215      	movs	r2, #21
 80006c6:	1a9b      	subs	r3, r3, r2
 80006c8:	ee07 3a90 	vmov	s15, r3
 80006cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006d0:	eddf 6a0a 	vldr	s13, [pc, #40]	; 80006fc <MPU9250_GetData+0x1d8>
 80006d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006d8:	eeb3 7a05 	vmov.f32	s14, #53	; 0x41a80000  21.0
 80006dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	edc3 7a00 	vstr	s15, [r3]
	
	//according to the datasheet 3.4.2, RoomTemp_Offset = 21, Sensitivity = 333.87
	
}
 80006e6:	bf00      	nop
 80006e8:	3718      	adds	r7, #24
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	2000002c 	.word	0x2000002c
 80006f4:	20000044 	.word	0x20000044
 80006f8:	43800000 	.word	0x43800000
 80006fc:	43a6ef5c 	.word	0x43a6ef5c

08000700 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000706:	4b09      	ldr	r3, [pc, #36]	; (800072c <MX_GPIO_Init+0x2c>)
 8000708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070a:	4a08      	ldr	r2, [pc, #32]	; (800072c <MX_GPIO_Init+0x2c>)
 800070c:	f043 0302 	orr.w	r3, r3, #2
 8000710:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000712:	4b06      	ldr	r3, [pc, #24]	; (800072c <MX_GPIO_Init+0x2c>)
 8000714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000716:	f003 0302 	and.w	r3, r3, #2
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	687b      	ldr	r3, [r7, #4]

}
 800071e:	bf00      	nop
 8000720:	370c      	adds	r7, #12
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	40021000 	.word	0x40021000

08000730 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000734:	f000 f906 	bl	8000944 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000738:	f000 f81a 	bl	8000770 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800073c:	f7ff ffe0 	bl	8000700 <MX_GPIO_Init>
  //MX_I2C1_Init();
  /* USER CODE BEGIN 2 */
  n = MPU9250_Init();
 8000740:	f7ff fe32 	bl	80003a8 <MPU9250_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	b29a      	uxth	r2, r3
 8000748:	4b04      	ldr	r3, [pc, #16]	; (800075c <main+0x2c>)
 800074a:	801a      	strh	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	MPU9250_GetData(AccData,MagData,GyroData,&Temp);
 800074c:	4b04      	ldr	r3, [pc, #16]	; (8000760 <main+0x30>)
 800074e:	4a05      	ldr	r2, [pc, #20]	; (8000764 <main+0x34>)
 8000750:	4905      	ldr	r1, [pc, #20]	; (8000768 <main+0x38>)
 8000752:	4806      	ldr	r0, [pc, #24]	; (800076c <main+0x3c>)
 8000754:	f7ff fee6 	bl	8000524 <MPU9250_GetData>
 8000758:	e7f8      	b.n	800074c <main+0x1c>
 800075a:	bf00      	nop
 800075c:	20000000 	.word	0x20000000
 8000760:	200000b4 	.word	0x200000b4
 8000764:	200000a4 	.word	0x200000a4
 8000768:	200000ac 	.word	0x200000ac
 800076c:	2000009c 	.word	0x2000009c

08000770 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b096      	sub	sp, #88	; 0x58
 8000774:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000776:	f107 0314 	add.w	r3, r7, #20
 800077a:	2244      	movs	r2, #68	; 0x44
 800077c:	2100      	movs	r1, #0
 800077e:	4618      	mov	r0, r3
 8000780:	f001 ff7e 	bl	8002680 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000784:	463b      	mov	r3, r7
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	60da      	str	r2, [r3, #12]
 8000790:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000792:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000796:	f001 f955 	bl	8001a44 <HAL_PWREx_ControlVoltageScaling>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007a0:	f000 f837 	bl	8000812 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007a4:	2302      	movs	r3, #2
 80007a6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007ac:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007ae:	2310      	movs	r3, #16
 80007b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b2:	2302      	movs	r3, #2
 80007b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007b6:	2302      	movs	r3, #2
 80007b8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007ba:	2301      	movs	r3, #1
 80007bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80007be:	230a      	movs	r3, #10
 80007c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007c2:	2307      	movs	r3, #7
 80007c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007c6:	2302      	movs	r3, #2
 80007c8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007ca:	2302      	movs	r3, #2
 80007cc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ce:	f107 0314 	add.w	r3, r7, #20
 80007d2:	4618      	mov	r0, r3
 80007d4:	f001 f98c 	bl	8001af0 <HAL_RCC_OscConfig>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80007de:	f000 f818 	bl	8000812 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e2:	230f      	movs	r3, #15
 80007e4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e6:	2303      	movs	r3, #3
 80007e8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ea:	2300      	movs	r3, #0
 80007ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007ee:	2300      	movs	r3, #0
 80007f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007f2:	2300      	movs	r3, #0
 80007f4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007f6:	463b      	mov	r3, r7
 80007f8:	2104      	movs	r1, #4
 80007fa:	4618      	mov	r0, r3
 80007fc:	f001 fd54 	bl	80022a8 <HAL_RCC_ClockConfig>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000806:	f000 f804 	bl	8000812 <Error_Handler>
  }
}
 800080a:	bf00      	nop
 800080c:	3758      	adds	r7, #88	; 0x58
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}

08000812 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000812:	b480      	push	{r7}
 8000814:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000816:	b672      	cpsid	i
}
 8000818:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800081a:	e7fe      	b.n	800081a <Error_Handler+0x8>

0800081c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000822:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <HAL_MspInit+0x44>)
 8000824:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000826:	4a0e      	ldr	r2, [pc, #56]	; (8000860 <HAL_MspInit+0x44>)
 8000828:	f043 0301 	orr.w	r3, r3, #1
 800082c:	6613      	str	r3, [r2, #96]	; 0x60
 800082e:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <HAL_MspInit+0x44>)
 8000830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800083a:	4b09      	ldr	r3, [pc, #36]	; (8000860 <HAL_MspInit+0x44>)
 800083c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800083e:	4a08      	ldr	r2, [pc, #32]	; (8000860 <HAL_MspInit+0x44>)
 8000840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000844:	6593      	str	r3, [r2, #88]	; 0x58
 8000846:	4b06      	ldr	r3, [pc, #24]	; (8000860 <HAL_MspInit+0x44>)
 8000848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800084a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800084e:	603b      	str	r3, [r7, #0]
 8000850:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000852:	bf00      	nop
 8000854:	370c      	adds	r7, #12
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	40021000 	.word	0x40021000

08000864 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000868:	e7fe      	b.n	8000868 <NMI_Handler+0x4>

0800086a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800086a:	b480      	push	{r7}
 800086c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800086e:	e7fe      	b.n	800086e <HardFault_Handler+0x4>

08000870 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000874:	e7fe      	b.n	8000874 <MemManage_Handler+0x4>

08000876 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800087a:	e7fe      	b.n	800087a <BusFault_Handler+0x4>

0800087c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000880:	e7fe      	b.n	8000880 <UsageFault_Handler+0x4>

08000882 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000886:	bf00      	nop
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr

08000890 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000894:	bf00      	nop
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr

0800089e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800089e:	b480      	push	{r7}
 80008a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008a2:	bf00      	nop
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr

080008ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008b0:	f000 f8a4 	bl	80009fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80008bc:	4802      	ldr	r0, [pc, #8]	; (80008c8 <I2C1_EV_IRQHandler+0x10>)
 80008be:	f000 fdcc 	bl	800145a <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20000048 	.word	0x20000048

080008cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80008d0:	4b06      	ldr	r3, [pc, #24]	; (80008ec <SystemInit+0x20>)
 80008d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008d6:	4a05      	ldr	r2, [pc, #20]	; (80008ec <SystemInit+0x20>)
 80008d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	e000ed00 	.word	0xe000ed00

080008f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80008f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000928 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008f4:	f7ff ffea 	bl	80008cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008f8:	480c      	ldr	r0, [pc, #48]	; (800092c <LoopForever+0x6>)
  ldr r1, =_edata
 80008fa:	490d      	ldr	r1, [pc, #52]	; (8000930 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008fc:	4a0d      	ldr	r2, [pc, #52]	; (8000934 <LoopForever+0xe>)
  movs r3, #0
 80008fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000900:	e002      	b.n	8000908 <LoopCopyDataInit>

08000902 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000902:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000904:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000906:	3304      	adds	r3, #4

08000908 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000908:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800090a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800090c:	d3f9      	bcc.n	8000902 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800090e:	4a0a      	ldr	r2, [pc, #40]	; (8000938 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000910:	4c0a      	ldr	r4, [pc, #40]	; (800093c <LoopForever+0x16>)
  movs r3, #0
 8000912:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000914:	e001      	b.n	800091a <LoopFillZerobss>

08000916 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000916:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000918:	3204      	adds	r2, #4

0800091a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800091a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800091c:	d3fb      	bcc.n	8000916 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800091e:	f001 feb7 	bl	8002690 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000922:	f7ff ff05 	bl	8000730 <main>

08000926 <LoopForever>:

LoopForever:
    b LoopForever
 8000926:	e7fe      	b.n	8000926 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000928:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800092c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000930:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000934:	08002738 	.word	0x08002738
  ldr r2, =_sbss
 8000938:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800093c:	200000c0 	.word	0x200000c0

08000940 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000940:	e7fe      	b.n	8000940 <ADC1_2_IRQHandler>
	...

08000944 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800094a:	2300      	movs	r3, #0
 800094c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800094e:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <HAL_Init+0x3c>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4a0b      	ldr	r2, [pc, #44]	; (8000980 <HAL_Init+0x3c>)
 8000954:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000958:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800095a:	2003      	movs	r0, #3
 800095c:	f000 f944 	bl	8000be8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000960:	2000      	movs	r0, #0
 8000962:	f000 f80f 	bl	8000984 <HAL_InitTick>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d002      	beq.n	8000972 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800096c:	2301      	movs	r3, #1
 800096e:	71fb      	strb	r3, [r7, #7]
 8000970:	e001      	b.n	8000976 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000972:	f7ff ff53 	bl	800081c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000976:	79fb      	ldrb	r3, [r7, #7]
}
 8000978:	4618      	mov	r0, r3
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	40022000 	.word	0x40022000

08000984 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800098c:	2300      	movs	r3, #0
 800098e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000990:	4b17      	ldr	r3, [pc, #92]	; (80009f0 <HAL_InitTick+0x6c>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d023      	beq.n	80009e0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000998:	4b16      	ldr	r3, [pc, #88]	; (80009f4 <HAL_InitTick+0x70>)
 800099a:	681a      	ldr	r2, [r3, #0]
 800099c:	4b14      	ldr	r3, [pc, #80]	; (80009f0 <HAL_InitTick+0x6c>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	4619      	mov	r1, r3
 80009a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ae:	4618      	mov	r0, r3
 80009b0:	f000 f941 	bl	8000c36 <HAL_SYSTICK_Config>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d10f      	bne.n	80009da <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	2b0f      	cmp	r3, #15
 80009be:	d809      	bhi.n	80009d4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009c0:	2200      	movs	r2, #0
 80009c2:	6879      	ldr	r1, [r7, #4]
 80009c4:	f04f 30ff 	mov.w	r0, #4294967295
 80009c8:	f000 f919 	bl	8000bfe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009cc:	4a0a      	ldr	r2, [pc, #40]	; (80009f8 <HAL_InitTick+0x74>)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	6013      	str	r3, [r2, #0]
 80009d2:	e007      	b.n	80009e4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80009d4:	2301      	movs	r3, #1
 80009d6:	73fb      	strb	r3, [r7, #15]
 80009d8:	e004      	b.n	80009e4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009da:	2301      	movs	r3, #1
 80009dc:	73fb      	strb	r3, [r7, #15]
 80009de:	e001      	b.n	80009e4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009e0:	2301      	movs	r3, #1
 80009e2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3710      	adds	r7, #16
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	2000000c 	.word	0x2000000c
 80009f4:	20000004 	.word	0x20000004
 80009f8:	20000008 	.word	0x20000008

080009fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <HAL_IncTick+0x20>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	461a      	mov	r2, r3
 8000a06:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <HAL_IncTick+0x24>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4413      	add	r3, r2
 8000a0c:	4a04      	ldr	r2, [pc, #16]	; (8000a20 <HAL_IncTick+0x24>)
 8000a0e:	6013      	str	r3, [r2, #0]
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	2000000c 	.word	0x2000000c
 8000a20:	200000bc 	.word	0x200000bc

08000a24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  return uwTick;
 8000a28:	4b03      	ldr	r3, [pc, #12]	; (8000a38 <HAL_GetTick+0x14>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	200000bc 	.word	0x200000bc

08000a3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a44:	f7ff ffee 	bl	8000a24 <HAL_GetTick>
 8000a48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a54:	d005      	beq.n	8000a62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000a56:	4b0a      	ldr	r3, [pc, #40]	; (8000a80 <HAL_Delay+0x44>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	4413      	add	r3, r2
 8000a60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a62:	bf00      	nop
 8000a64:	f7ff ffde 	bl	8000a24 <HAL_GetTick>
 8000a68:	4602      	mov	r2, r0
 8000a6a:	68bb      	ldr	r3, [r7, #8]
 8000a6c:	1ad3      	subs	r3, r2, r3
 8000a6e:	68fa      	ldr	r2, [r7, #12]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	d8f7      	bhi.n	8000a64 <HAL_Delay+0x28>
  {
  }
}
 8000a74:	bf00      	nop
 8000a76:	bf00      	nop
 8000a78:	3710      	adds	r7, #16
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	2000000c 	.word	0x2000000c

08000a84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b085      	sub	sp, #20
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	f003 0307 	and.w	r3, r3, #7
 8000a92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a94:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a96:	68db      	ldr	r3, [r3, #12]
 8000a98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a9a:	68ba      	ldr	r2, [r7, #8]
 8000a9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ab4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ab6:	4a04      	ldr	r2, [pc, #16]	; (8000ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	60d3      	str	r3, [r2, #12]
}
 8000abc:	bf00      	nop
 8000abe:	3714      	adds	r7, #20
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ad0:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	0a1b      	lsrs	r3, r3, #8
 8000ad6:	f003 0307 	and.w	r3, r3, #7
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	6039      	str	r1, [r7, #0]
 8000af2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	db0a      	blt.n	8000b12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	b2da      	uxtb	r2, r3
 8000b00:	490c      	ldr	r1, [pc, #48]	; (8000b34 <__NVIC_SetPriority+0x4c>)
 8000b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b06:	0112      	lsls	r2, r2, #4
 8000b08:	b2d2      	uxtb	r2, r2
 8000b0a:	440b      	add	r3, r1
 8000b0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b10:	e00a      	b.n	8000b28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	b2da      	uxtb	r2, r3
 8000b16:	4908      	ldr	r1, [pc, #32]	; (8000b38 <__NVIC_SetPriority+0x50>)
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	f003 030f 	and.w	r3, r3, #15
 8000b1e:	3b04      	subs	r3, #4
 8000b20:	0112      	lsls	r2, r2, #4
 8000b22:	b2d2      	uxtb	r2, r2
 8000b24:	440b      	add	r3, r1
 8000b26:	761a      	strb	r2, [r3, #24]
}
 8000b28:	bf00      	nop
 8000b2a:	370c      	adds	r7, #12
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr
 8000b34:	e000e100 	.word	0xe000e100
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b089      	sub	sp, #36	; 0x24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	60f8      	str	r0, [r7, #12]
 8000b44:	60b9      	str	r1, [r7, #8]
 8000b46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	f003 0307 	and.w	r3, r3, #7
 8000b4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b50:	69fb      	ldr	r3, [r7, #28]
 8000b52:	f1c3 0307 	rsb	r3, r3, #7
 8000b56:	2b04      	cmp	r3, #4
 8000b58:	bf28      	it	cs
 8000b5a:	2304      	movcs	r3, #4
 8000b5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	3304      	adds	r3, #4
 8000b62:	2b06      	cmp	r3, #6
 8000b64:	d902      	bls.n	8000b6c <NVIC_EncodePriority+0x30>
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	3b03      	subs	r3, #3
 8000b6a:	e000      	b.n	8000b6e <NVIC_EncodePriority+0x32>
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b70:	f04f 32ff 	mov.w	r2, #4294967295
 8000b74:	69bb      	ldr	r3, [r7, #24]
 8000b76:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7a:	43da      	mvns	r2, r3
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	401a      	ands	r2, r3
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b84:	f04f 31ff 	mov.w	r1, #4294967295
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b8e:	43d9      	mvns	r1, r3
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b94:	4313      	orrs	r3, r2
         );
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3724      	adds	r7, #36	; 0x24
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
	...

08000ba4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	3b01      	subs	r3, #1
 8000bb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bb4:	d301      	bcc.n	8000bba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e00f      	b.n	8000bda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bba:	4a0a      	ldr	r2, [pc, #40]	; (8000be4 <SysTick_Config+0x40>)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	3b01      	subs	r3, #1
 8000bc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bc2:	210f      	movs	r1, #15
 8000bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc8:	f7ff ff8e 	bl	8000ae8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bcc:	4b05      	ldr	r3, [pc, #20]	; (8000be4 <SysTick_Config+0x40>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bd2:	4b04      	ldr	r3, [pc, #16]	; (8000be4 <SysTick_Config+0x40>)
 8000bd4:	2207      	movs	r2, #7
 8000bd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bd8:	2300      	movs	r3, #0
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	e000e010 	.word	0xe000e010

08000be8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f7ff ff47 	bl	8000a84 <__NVIC_SetPriorityGrouping>
}
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b086      	sub	sp, #24
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	4603      	mov	r3, r0
 8000c06:	60b9      	str	r1, [r7, #8]
 8000c08:	607a      	str	r2, [r7, #4]
 8000c0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c10:	f7ff ff5c 	bl	8000acc <__NVIC_GetPriorityGrouping>
 8000c14:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c16:	687a      	ldr	r2, [r7, #4]
 8000c18:	68b9      	ldr	r1, [r7, #8]
 8000c1a:	6978      	ldr	r0, [r7, #20]
 8000c1c:	f7ff ff8e 	bl	8000b3c <NVIC_EncodePriority>
 8000c20:	4602      	mov	r2, r0
 8000c22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c26:	4611      	mov	r1, r2
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff ff5d 	bl	8000ae8 <__NVIC_SetPriority>
}
 8000c2e:	bf00      	nop
 8000c30:	3718      	adds	r7, #24
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b082      	sub	sp, #8
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c3e:	6878      	ldr	r0, [r7, #4]
 8000c40:	f7ff ffb0 	bl	8000ba4 <SysTick_Config>
 8000c44:	4603      	mov	r3, r0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
	...

08000c50 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b088      	sub	sp, #32
 8000c54:	af02      	add	r7, sp, #8
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	607a      	str	r2, [r7, #4]
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	460b      	mov	r3, r1
 8000c5e:	817b      	strh	r3, [r7, #10]
 8000c60:	4613      	mov	r3, r2
 8000c62:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	2b20      	cmp	r3, #32
 8000c6e:	f040 80da 	bne.w	8000e26 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d101      	bne.n	8000c80 <HAL_I2C_Master_Transmit+0x30>
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	e0d3      	b.n	8000e28 <HAL_I2C_Master_Transmit+0x1d8>
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	2201      	movs	r2, #1
 8000c84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000c88:	f7ff fecc 	bl	8000a24 <HAL_GetTick>
 8000c8c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	9300      	str	r3, [sp, #0]
 8000c92:	2319      	movs	r3, #25
 8000c94:	2201      	movs	r2, #1
 8000c96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c9a:	68f8      	ldr	r0, [r7, #12]
 8000c9c:	f000 fc70 	bl	8001580 <I2C_WaitOnFlagUntilTimeout>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e0be      	b.n	8000e28 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	2221      	movs	r2, #33	; 0x21
 8000cae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	2210      	movs	r2, #16
 8000cb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	687a      	ldr	r2, [r7, #4]
 8000cc4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	893a      	ldrh	r2, [r7, #8]
 8000cca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	2200      	movs	r2, #0
 8000cd0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000cd6:	b29b      	uxth	r3, r3
 8000cd8:	2bff      	cmp	r3, #255	; 0xff
 8000cda:	d90e      	bls.n	8000cfa <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	22ff      	movs	r2, #255	; 0xff
 8000ce0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ce6:	b2da      	uxtb	r2, r3
 8000ce8:	8979      	ldrh	r1, [r7, #10]
 8000cea:	4b51      	ldr	r3, [pc, #324]	; (8000e30 <HAL_I2C_Master_Transmit+0x1e0>)
 8000cec:	9300      	str	r3, [sp, #0]
 8000cee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000cf2:	68f8      	ldr	r0, [r7, #12]
 8000cf4:	f000 fe66 	bl	80019c4 <I2C_TransferConfig>
 8000cf8:	e06c      	b.n	8000dd4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000cfe:	b29a      	uxth	r2, r3
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000d08:	b2da      	uxtb	r2, r3
 8000d0a:	8979      	ldrh	r1, [r7, #10]
 8000d0c:	4b48      	ldr	r3, [pc, #288]	; (8000e30 <HAL_I2C_Master_Transmit+0x1e0>)
 8000d0e:	9300      	str	r3, [sp, #0]
 8000d10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d14:	68f8      	ldr	r0, [r7, #12]
 8000d16:	f000 fe55 	bl	80019c4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8000d1a:	e05b      	b.n	8000dd4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000d1c:	697a      	ldr	r2, [r7, #20]
 8000d1e:	6a39      	ldr	r1, [r7, #32]
 8000d20:	68f8      	ldr	r0, [r7, #12]
 8000d22:	f000 fc6d 	bl	8001600 <I2C_WaitOnTXISFlagUntilTimeout>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	e07b      	b.n	8000e28 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d34:	781a      	ldrb	r2, [r3, #0]
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d40:	1c5a      	adds	r2, r3, #1
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000d4a:	b29b      	uxth	r3, r3
 8000d4c:	3b01      	subs	r3, #1
 8000d4e:	b29a      	uxth	r2, r3
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000d58:	3b01      	subs	r3, #1
 8000d5a:	b29a      	uxth	r2, r3
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000d64:	b29b      	uxth	r3, r3
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d034      	beq.n	8000dd4 <HAL_I2C_Master_Transmit+0x184>
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d130      	bne.n	8000dd4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	9300      	str	r3, [sp, #0]
 8000d76:	6a3b      	ldr	r3, [r7, #32]
 8000d78:	2200      	movs	r2, #0
 8000d7a:	2180      	movs	r1, #128	; 0x80
 8000d7c:	68f8      	ldr	r0, [r7, #12]
 8000d7e:	f000 fbff 	bl	8001580 <I2C_WaitOnFlagUntilTimeout>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	e04d      	b.n	8000e28 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000d90:	b29b      	uxth	r3, r3
 8000d92:	2bff      	cmp	r3, #255	; 0xff
 8000d94:	d90e      	bls.n	8000db4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	22ff      	movs	r2, #255	; 0xff
 8000d9a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000da0:	b2da      	uxtb	r2, r3
 8000da2:	8979      	ldrh	r1, [r7, #10]
 8000da4:	2300      	movs	r3, #0
 8000da6:	9300      	str	r3, [sp, #0]
 8000da8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000dac:	68f8      	ldr	r0, [r7, #12]
 8000dae:	f000 fe09 	bl	80019c4 <I2C_TransferConfig>
 8000db2:	e00f      	b.n	8000dd4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000db8:	b29a      	uxth	r2, r3
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000dc2:	b2da      	uxtb	r2, r3
 8000dc4:	8979      	ldrh	r1, [r7, #10]
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	9300      	str	r3, [sp, #0]
 8000dca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000dce:	68f8      	ldr	r0, [r7, #12]
 8000dd0:	f000 fdf8 	bl	80019c4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000dd8:	b29b      	uxth	r3, r3
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d19e      	bne.n	8000d1c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000dde:	697a      	ldr	r2, [r7, #20]
 8000de0:	6a39      	ldr	r1, [r7, #32]
 8000de2:	68f8      	ldr	r0, [r7, #12]
 8000de4:	f000 fc4c 	bl	8001680 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
 8000df0:	e01a      	b.n	8000e28 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	2220      	movs	r2, #32
 8000df8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	6859      	ldr	r1, [r3, #4]
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	4b0b      	ldr	r3, [pc, #44]	; (8000e34 <HAL_I2C_Master_Transmit+0x1e4>)
 8000e06:	400b      	ands	r3, r1
 8000e08:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	2220      	movs	r2, #32
 8000e0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	2200      	movs	r2, #0
 8000e16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000e22:	2300      	movs	r3, #0
 8000e24:	e000      	b.n	8000e28 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8000e26:	2302      	movs	r3, #2
  }
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3718      	adds	r7, #24
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	80002000 	.word	0x80002000
 8000e34:	fe00e800 	.word	0xfe00e800

08000e38 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b088      	sub	sp, #32
 8000e3c:	af02      	add	r7, sp, #8
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	607a      	str	r2, [r7, #4]
 8000e42:	461a      	mov	r2, r3
 8000e44:	460b      	mov	r3, r1
 8000e46:	817b      	strh	r3, [r7, #10]
 8000e48:	4613      	mov	r3, r2
 8000e4a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	2b20      	cmp	r3, #32
 8000e56:	f040 80db 	bne.w	8001010 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d101      	bne.n	8000e68 <HAL_I2C_Master_Receive+0x30>
 8000e64:	2302      	movs	r3, #2
 8000e66:	e0d4      	b.n	8001012 <HAL_I2C_Master_Receive+0x1da>
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000e70:	f7ff fdd8 	bl	8000a24 <HAL_GetTick>
 8000e74:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	9300      	str	r3, [sp, #0]
 8000e7a:	2319      	movs	r3, #25
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e82:	68f8      	ldr	r0, [r7, #12]
 8000e84:	f000 fb7c 	bl	8001580 <I2C_WaitOnFlagUntilTimeout>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e0bf      	b.n	8001012 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	2222      	movs	r2, #34	; 0x22
 8000e96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	2210      	movs	r2, #16
 8000e9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	893a      	ldrh	r2, [r7, #8]
 8000eb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ebe:	b29b      	uxth	r3, r3
 8000ec0:	2bff      	cmp	r3, #255	; 0xff
 8000ec2:	d90e      	bls.n	8000ee2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	22ff      	movs	r2, #255	; 0xff
 8000ec8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ece:	b2da      	uxtb	r2, r3
 8000ed0:	8979      	ldrh	r1, [r7, #10]
 8000ed2:	4b52      	ldr	r3, [pc, #328]	; (800101c <HAL_I2C_Master_Receive+0x1e4>)
 8000ed4:	9300      	str	r3, [sp, #0]
 8000ed6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000eda:	68f8      	ldr	r0, [r7, #12]
 8000edc:	f000 fd72 	bl	80019c4 <I2C_TransferConfig>
 8000ee0:	e06d      	b.n	8000fbe <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ee6:	b29a      	uxth	r2, r3
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ef0:	b2da      	uxtb	r2, r3
 8000ef2:	8979      	ldrh	r1, [r7, #10]
 8000ef4:	4b49      	ldr	r3, [pc, #292]	; (800101c <HAL_I2C_Master_Receive+0x1e4>)
 8000ef6:	9300      	str	r3, [sp, #0]
 8000ef8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000efc:	68f8      	ldr	r0, [r7, #12]
 8000efe:	f000 fd61 	bl	80019c4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8000f02:	e05c      	b.n	8000fbe <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f04:	697a      	ldr	r2, [r7, #20]
 8000f06:	6a39      	ldr	r1, [r7, #32]
 8000f08:	68f8      	ldr	r0, [r7, #12]
 8000f0a:	f000 fbf5 	bl	80016f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8000f14:	2301      	movs	r3, #1
 8000f16:	e07c      	b.n	8001012 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f22:	b2d2      	uxtb	r2, r2
 8000f24:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f2a:	1c5a      	adds	r2, r3, #1
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f34:	3b01      	subs	r3, #1
 8000f36:	b29a      	uxth	r2, r3
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f40:	b29b      	uxth	r3, r3
 8000f42:	3b01      	subs	r3, #1
 8000f44:	b29a      	uxth	r2, r3
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d034      	beq.n	8000fbe <HAL_I2C_Master_Receive+0x186>
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d130      	bne.n	8000fbe <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	9300      	str	r3, [sp, #0]
 8000f60:	6a3b      	ldr	r3, [r7, #32]
 8000f62:	2200      	movs	r2, #0
 8000f64:	2180      	movs	r1, #128	; 0x80
 8000f66:	68f8      	ldr	r0, [r7, #12]
 8000f68:	f000 fb0a 	bl	8001580 <I2C_WaitOnFlagUntilTimeout>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e04d      	b.n	8001012 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f7a:	b29b      	uxth	r3, r3
 8000f7c:	2bff      	cmp	r3, #255	; 0xff
 8000f7e:	d90e      	bls.n	8000f9e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	22ff      	movs	r2, #255	; 0xff
 8000f84:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f8a:	b2da      	uxtb	r2, r3
 8000f8c:	8979      	ldrh	r1, [r7, #10]
 8000f8e:	2300      	movs	r3, #0
 8000f90:	9300      	str	r3, [sp, #0]
 8000f92:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f96:	68f8      	ldr	r0, [r7, #12]
 8000f98:	f000 fd14 	bl	80019c4 <I2C_TransferConfig>
 8000f9c:	e00f      	b.n	8000fbe <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fa2:	b29a      	uxth	r2, r3
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fac:	b2da      	uxtb	r2, r3
 8000fae:	8979      	ldrh	r1, [r7, #10]
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	9300      	str	r3, [sp, #0]
 8000fb4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000fb8:	68f8      	ldr	r0, [r7, #12]
 8000fba:	f000 fd03 	bl	80019c4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fc2:	b29b      	uxth	r3, r3
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d19d      	bne.n	8000f04 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000fc8:	697a      	ldr	r2, [r7, #20]
 8000fca:	6a39      	ldr	r1, [r7, #32]
 8000fcc:	68f8      	ldr	r0, [r7, #12]
 8000fce:	f000 fb57 	bl	8001680 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e01a      	b.n	8001012 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2220      	movs	r2, #32
 8000fe2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	6859      	ldr	r1, [r3, #4]
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <HAL_I2C_Master_Receive+0x1e8>)
 8000ff0:	400b      	ands	r3, r1
 8000ff2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	2220      	movs	r2, #32
 8000ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	2200      	movs	r2, #0
 8001000:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	2200      	movs	r2, #0
 8001008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800100c:	2300      	movs	r3, #0
 800100e:	e000      	b.n	8001012 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001010:	2302      	movs	r3, #2
  }
}
 8001012:	4618      	mov	r0, r3
 8001014:	3718      	adds	r7, #24
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	80002400 	.word	0x80002400
 8001020:	fe00e800 	.word	0xfe00e800

08001024 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b088      	sub	sp, #32
 8001028:	af02      	add	r7, sp, #8
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	4608      	mov	r0, r1
 800102e:	4611      	mov	r1, r2
 8001030:	461a      	mov	r2, r3
 8001032:	4603      	mov	r3, r0
 8001034:	817b      	strh	r3, [r7, #10]
 8001036:	460b      	mov	r3, r1
 8001038:	813b      	strh	r3, [r7, #8]
 800103a:	4613      	mov	r3, r2
 800103c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001044:	b2db      	uxtb	r3, r3
 8001046:	2b20      	cmp	r3, #32
 8001048:	f040 80f9 	bne.w	800123e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800104c:	6a3b      	ldr	r3, [r7, #32]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d002      	beq.n	8001058 <HAL_I2C_Mem_Write+0x34>
 8001052:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001054:	2b00      	cmp	r3, #0
 8001056:	d105      	bne.n	8001064 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800105e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001060:	2301      	movs	r3, #1
 8001062:	e0ed      	b.n	8001240 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800106a:	2b01      	cmp	r3, #1
 800106c:	d101      	bne.n	8001072 <HAL_I2C_Mem_Write+0x4e>
 800106e:	2302      	movs	r3, #2
 8001070:	e0e6      	b.n	8001240 <HAL_I2C_Mem_Write+0x21c>
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	2201      	movs	r2, #1
 8001076:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800107a:	f7ff fcd3 	bl	8000a24 <HAL_GetTick>
 800107e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	9300      	str	r3, [sp, #0]
 8001084:	2319      	movs	r3, #25
 8001086:	2201      	movs	r2, #1
 8001088:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800108c:	68f8      	ldr	r0, [r7, #12]
 800108e:	f000 fa77 	bl	8001580 <I2C_WaitOnFlagUntilTimeout>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001098:	2301      	movs	r3, #1
 800109a:	e0d1      	b.n	8001240 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	2221      	movs	r2, #33	; 0x21
 80010a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	2240      	movs	r2, #64	; 0x40
 80010a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	2200      	movs	r2, #0
 80010b0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	6a3a      	ldr	r2, [r7, #32]
 80010b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80010bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	2200      	movs	r2, #0
 80010c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80010c4:	88f8      	ldrh	r0, [r7, #6]
 80010c6:	893a      	ldrh	r2, [r7, #8]
 80010c8:	8979      	ldrh	r1, [r7, #10]
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	9301      	str	r3, [sp, #4]
 80010ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010d0:	9300      	str	r3, [sp, #0]
 80010d2:	4603      	mov	r3, r0
 80010d4:	68f8      	ldr	r0, [r7, #12]
 80010d6:	f000 f9db 	bl	8001490 <I2C_RequestMemoryWrite>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d005      	beq.n	80010ec <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	2200      	movs	r2, #0
 80010e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e0a9      	b.n	8001240 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	2bff      	cmp	r3, #255	; 0xff
 80010f4:	d90e      	bls.n	8001114 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	22ff      	movs	r2, #255	; 0xff
 80010fa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001100:	b2da      	uxtb	r2, r3
 8001102:	8979      	ldrh	r1, [r7, #10]
 8001104:	2300      	movs	r3, #0
 8001106:	9300      	str	r3, [sp, #0]
 8001108:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800110c:	68f8      	ldr	r0, [r7, #12]
 800110e:	f000 fc59 	bl	80019c4 <I2C_TransferConfig>
 8001112:	e00f      	b.n	8001134 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001118:	b29a      	uxth	r2, r3
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001122:	b2da      	uxtb	r2, r3
 8001124:	8979      	ldrh	r1, [r7, #10]
 8001126:	2300      	movs	r3, #0
 8001128:	9300      	str	r3, [sp, #0]
 800112a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800112e:	68f8      	ldr	r0, [r7, #12]
 8001130:	f000 fc48 	bl	80019c4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001134:	697a      	ldr	r2, [r7, #20]
 8001136:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001138:	68f8      	ldr	r0, [r7, #12]
 800113a:	f000 fa61 	bl	8001600 <I2C_WaitOnTXISFlagUntilTimeout>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	e07b      	b.n	8001240 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800114c:	781a      	ldrb	r2, [r3, #0]
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001158:	1c5a      	adds	r2, r3, #1
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001162:	b29b      	uxth	r3, r3
 8001164:	3b01      	subs	r3, #1
 8001166:	b29a      	uxth	r2, r3
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001170:	3b01      	subs	r3, #1
 8001172:	b29a      	uxth	r2, r3
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800117c:	b29b      	uxth	r3, r3
 800117e:	2b00      	cmp	r3, #0
 8001180:	d034      	beq.n	80011ec <HAL_I2C_Mem_Write+0x1c8>
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001186:	2b00      	cmp	r3, #0
 8001188:	d130      	bne.n	80011ec <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	9300      	str	r3, [sp, #0]
 800118e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001190:	2200      	movs	r2, #0
 8001192:	2180      	movs	r1, #128	; 0x80
 8001194:	68f8      	ldr	r0, [r7, #12]
 8001196:	f000 f9f3 	bl	8001580 <I2C_WaitOnFlagUntilTimeout>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80011a0:	2301      	movs	r3, #1
 80011a2:	e04d      	b.n	8001240 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	2bff      	cmp	r3, #255	; 0xff
 80011ac:	d90e      	bls.n	80011cc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	22ff      	movs	r2, #255	; 0xff
 80011b2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011b8:	b2da      	uxtb	r2, r3
 80011ba:	8979      	ldrh	r1, [r7, #10]
 80011bc:	2300      	movs	r3, #0
 80011be:	9300      	str	r3, [sp, #0]
 80011c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011c4:	68f8      	ldr	r0, [r7, #12]
 80011c6:	f000 fbfd 	bl	80019c4 <I2C_TransferConfig>
 80011ca:	e00f      	b.n	80011ec <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011d0:	b29a      	uxth	r2, r3
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011da:	b2da      	uxtb	r2, r3
 80011dc:	8979      	ldrh	r1, [r7, #10]
 80011de:	2300      	movs	r3, #0
 80011e0:	9300      	str	r3, [sp, #0]
 80011e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011e6:	68f8      	ldr	r0, [r7, #12]
 80011e8:	f000 fbec 	bl	80019c4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d19e      	bne.n	8001134 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011f6:	697a      	ldr	r2, [r7, #20]
 80011f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80011fa:	68f8      	ldr	r0, [r7, #12]
 80011fc:	f000 fa40 	bl	8001680 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e01a      	b.n	8001240 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2220      	movs	r2, #32
 8001210:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	6859      	ldr	r1, [r3, #4]
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <HAL_I2C_Mem_Write+0x224>)
 800121e:	400b      	ands	r3, r1
 8001220:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	2220      	movs	r2, #32
 8001226:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	2200      	movs	r2, #0
 800122e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	2200      	movs	r2, #0
 8001236:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800123a:	2300      	movs	r3, #0
 800123c:	e000      	b.n	8001240 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800123e:	2302      	movs	r3, #2
  }
}
 8001240:	4618      	mov	r0, r3
 8001242:	3718      	adds	r7, #24
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	fe00e800 	.word	0xfe00e800

0800124c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08a      	sub	sp, #40	; 0x28
 8001250:	af02      	add	r7, sp, #8
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	607a      	str	r2, [r7, #4]
 8001256:	603b      	str	r3, [r7, #0]
 8001258:	460b      	mov	r3, r1
 800125a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800125c:	2300      	movs	r3, #0
 800125e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001266:	b2db      	uxtb	r3, r3
 8001268:	2b20      	cmp	r3, #32
 800126a:	f040 80f1 	bne.w	8001450 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001278:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800127c:	d101      	bne.n	8001282 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800127e:	2302      	movs	r3, #2
 8001280:	e0e7      	b.n	8001452 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001288:	2b01      	cmp	r3, #1
 800128a:	d101      	bne.n	8001290 <HAL_I2C_IsDeviceReady+0x44>
 800128c:	2302      	movs	r3, #2
 800128e:	e0e0      	b.n	8001452 <HAL_I2C_IsDeviceReady+0x206>
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	2201      	movs	r2, #1
 8001294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	2224      	movs	r2, #36	; 0x24
 800129c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	2200      	movs	r2, #0
 80012a4:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d107      	bne.n	80012be <HAL_I2C_IsDeviceReady+0x72>
 80012ae:	897b      	ldrh	r3, [r7, #10]
 80012b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80012b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80012bc:	e004      	b.n	80012c8 <HAL_I2C_IsDeviceReady+0x7c>
 80012be:	897b      	ldrh	r3, [r7, #10]
 80012c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80012c4:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80012c8:	68fa      	ldr	r2, [r7, #12]
 80012ca:	6812      	ldr	r2, [r2, #0]
 80012cc:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80012ce:	f7ff fba9 	bl	8000a24 <HAL_GetTick>
 80012d2:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	699b      	ldr	r3, [r3, #24]
 80012da:	f003 0320 	and.w	r3, r3, #32
 80012de:	2b20      	cmp	r3, #32
 80012e0:	bf0c      	ite	eq
 80012e2:	2301      	moveq	r3, #1
 80012e4:	2300      	movne	r3, #0
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	f003 0310 	and.w	r3, r3, #16
 80012f4:	2b10      	cmp	r3, #16
 80012f6:	bf0c      	ite	eq
 80012f8:	2301      	moveq	r3, #1
 80012fa:	2300      	movne	r3, #0
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001300:	e034      	b.n	800136c <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001308:	d01a      	beq.n	8001340 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800130a:	f7ff fb8b 	bl	8000a24 <HAL_GetTick>
 800130e:	4602      	mov	r2, r0
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	683a      	ldr	r2, [r7, #0]
 8001316:	429a      	cmp	r2, r3
 8001318:	d302      	bcc.n	8001320 <HAL_I2C_IsDeviceReady+0xd4>
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d10f      	bne.n	8001340 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	2220      	movs	r2, #32
 8001324:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132c:	f043 0220 	orr.w	r2, r3, #32
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	2200      	movs	r2, #0
 8001338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	e088      	b.n	8001452 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	699b      	ldr	r3, [r3, #24]
 8001346:	f003 0320 	and.w	r3, r3, #32
 800134a:	2b20      	cmp	r3, #32
 800134c:	bf0c      	ite	eq
 800134e:	2301      	moveq	r3, #1
 8001350:	2300      	movne	r3, #0
 8001352:	b2db      	uxtb	r3, r3
 8001354:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	f003 0310 	and.w	r3, r3, #16
 8001360:	2b10      	cmp	r3, #16
 8001362:	bf0c      	ite	eq
 8001364:	2301      	moveq	r3, #1
 8001366:	2300      	movne	r3, #0
 8001368:	b2db      	uxtb	r3, r3
 800136a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800136c:	7ffb      	ldrb	r3, [r7, #31]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d102      	bne.n	8001378 <HAL_I2C_IsDeviceReady+0x12c>
 8001372:	7fbb      	ldrb	r3, [r7, #30]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d0c4      	beq.n	8001302 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	699b      	ldr	r3, [r3, #24]
 800137e:	f003 0310 	and.w	r3, r3, #16
 8001382:	2b10      	cmp	r3, #16
 8001384:	d01a      	beq.n	80013bc <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	9300      	str	r3, [sp, #0]
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	2200      	movs	r2, #0
 800138e:	2120      	movs	r1, #32
 8001390:	68f8      	ldr	r0, [r7, #12]
 8001392:	f000 f8f5 	bl	8001580 <I2C_WaitOnFlagUntilTimeout>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e058      	b.n	8001452 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2220      	movs	r2, #32
 80013a6:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	2220      	movs	r2, #32
 80013ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	2200      	movs	r2, #0
 80013b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80013b8:	2300      	movs	r3, #0
 80013ba:	e04a      	b.n	8001452 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	9300      	str	r3, [sp, #0]
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	2200      	movs	r2, #0
 80013c4:	2120      	movs	r1, #32
 80013c6:	68f8      	ldr	r0, [r7, #12]
 80013c8:	f000 f8da 	bl	8001580 <I2C_WaitOnFlagUntilTimeout>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e03d      	b.n	8001452 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2210      	movs	r2, #16
 80013dc:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2220      	movs	r2, #32
 80013e4:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	687a      	ldr	r2, [r7, #4]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d118      	bne.n	8001420 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	685a      	ldr	r2, [r3, #4]
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80013fc:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	9300      	str	r3, [sp, #0]
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	2200      	movs	r2, #0
 8001406:	2120      	movs	r1, #32
 8001408:	68f8      	ldr	r0, [r7, #12]
 800140a:	f000 f8b9 	bl	8001580 <I2C_WaitOnFlagUntilTimeout>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	e01c      	b.n	8001452 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2220      	movs	r2, #32
 800141e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	3301      	adds	r3, #1
 8001424:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	429a      	cmp	r2, r3
 800142c:	f63f af3b 	bhi.w	80012a6 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	2220      	movs	r2, #32
 8001434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143c:	f043 0220 	orr.w	r2, r3, #32
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	2200      	movs	r2, #0
 8001448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e000      	b.n	8001452 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8001450:	2302      	movs	r3, #2
  }
}
 8001452:	4618      	mov	r0, r3
 8001454:	3720      	adds	r7, #32
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b084      	sub	sp, #16
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001476:	2b00      	cmp	r3, #0
 8001478:	d005      	beq.n	8001486 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800147e:	68ba      	ldr	r2, [r7, #8]
 8001480:	68f9      	ldr	r1, [r7, #12]
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	4798      	blx	r3
  }
}
 8001486:	bf00      	nop
 8001488:	3710      	adds	r7, #16
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
	...

08001490 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af02      	add	r7, sp, #8
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	4608      	mov	r0, r1
 800149a:	4611      	mov	r1, r2
 800149c:	461a      	mov	r2, r3
 800149e:	4603      	mov	r3, r0
 80014a0:	817b      	strh	r3, [r7, #10]
 80014a2:	460b      	mov	r3, r1
 80014a4:	813b      	strh	r3, [r7, #8]
 80014a6:	4613      	mov	r3, r2
 80014a8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80014aa:	88fb      	ldrh	r3, [r7, #6]
 80014ac:	b2da      	uxtb	r2, r3
 80014ae:	8979      	ldrh	r1, [r7, #10]
 80014b0:	4b20      	ldr	r3, [pc, #128]	; (8001534 <I2C_RequestMemoryWrite+0xa4>)
 80014b2:	9300      	str	r3, [sp, #0]
 80014b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014b8:	68f8      	ldr	r0, [r7, #12]
 80014ba:	f000 fa83 	bl	80019c4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80014be:	69fa      	ldr	r2, [r7, #28]
 80014c0:	69b9      	ldr	r1, [r7, #24]
 80014c2:	68f8      	ldr	r0, [r7, #12]
 80014c4:	f000 f89c 	bl	8001600 <I2C_WaitOnTXISFlagUntilTimeout>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e02c      	b.n	800152c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80014d2:	88fb      	ldrh	r3, [r7, #6]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d105      	bne.n	80014e4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80014d8:	893b      	ldrh	r3, [r7, #8]
 80014da:	b2da      	uxtb	r2, r3
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	629a      	str	r2, [r3, #40]	; 0x28
 80014e2:	e015      	b.n	8001510 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80014e4:	893b      	ldrh	r3, [r7, #8]
 80014e6:	0a1b      	lsrs	r3, r3, #8
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	b2da      	uxtb	r2, r3
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80014f2:	69fa      	ldr	r2, [r7, #28]
 80014f4:	69b9      	ldr	r1, [r7, #24]
 80014f6:	68f8      	ldr	r0, [r7, #12]
 80014f8:	f000 f882 	bl	8001600 <I2C_WaitOnTXISFlagUntilTimeout>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e012      	b.n	800152c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001506:	893b      	ldrh	r3, [r7, #8]
 8001508:	b2da      	uxtb	r2, r3
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	9300      	str	r3, [sp, #0]
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	2200      	movs	r2, #0
 8001518:	2180      	movs	r1, #128	; 0x80
 800151a:	68f8      	ldr	r0, [r7, #12]
 800151c:	f000 f830 	bl	8001580 <I2C_WaitOnFlagUntilTimeout>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e000      	b.n	800152c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800152a:	2300      	movs	r3, #0
}
 800152c:	4618      	mov	r0, r3
 800152e:	3710      	adds	r7, #16
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	80002000 	.word	0x80002000

08001538 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	699b      	ldr	r3, [r3, #24]
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	2b02      	cmp	r3, #2
 800154c:	d103      	bne.n	8001556 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2200      	movs	r2, #0
 8001554:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	f003 0301 	and.w	r3, r3, #1
 8001560:	2b01      	cmp	r3, #1
 8001562:	d007      	beq.n	8001574 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	699a      	ldr	r2, [r3, #24]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f042 0201 	orr.w	r2, r2, #1
 8001572:	619a      	str	r2, [r3, #24]
  }
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	603b      	str	r3, [r7, #0]
 800158c:	4613      	mov	r3, r2
 800158e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001590:	e022      	b.n	80015d8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001598:	d01e      	beq.n	80015d8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800159a:	f7ff fa43 	bl	8000a24 <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d302      	bcc.n	80015b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d113      	bne.n	80015d8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b4:	f043 0220 	orr.w	r2, r3, #32
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	2220      	movs	r2, #32
 80015c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2200      	movs	r2, #0
 80015c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	2200      	movs	r2, #0
 80015d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e00f      	b.n	80015f8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	699a      	ldr	r2, [r3, #24]
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	4013      	ands	r3, r2
 80015e2:	68ba      	ldr	r2, [r7, #8]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	bf0c      	ite	eq
 80015e8:	2301      	moveq	r3, #1
 80015ea:	2300      	movne	r3, #0
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	461a      	mov	r2, r3
 80015f0:	79fb      	ldrb	r3, [r7, #7]
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d0cd      	beq.n	8001592 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80015f6:	2300      	movs	r3, #0
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3710      	adds	r7, #16
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}

08001600 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	60b9      	str	r1, [r7, #8]
 800160a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800160c:	e02c      	b.n	8001668 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	68b9      	ldr	r1, [r7, #8]
 8001612:	68f8      	ldr	r0, [r7, #12]
 8001614:	f000 f8ea 	bl	80017ec <I2C_IsErrorOccurred>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e02a      	b.n	8001678 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001628:	d01e      	beq.n	8001668 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800162a:	f7ff f9fb 	bl	8000a24 <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	68ba      	ldr	r2, [r7, #8]
 8001636:	429a      	cmp	r2, r3
 8001638:	d302      	bcc.n	8001640 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d113      	bne.n	8001668 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001644:	f043 0220 	orr.w	r2, r3, #32
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2220      	movs	r2, #32
 8001650:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	2200      	movs	r2, #0
 8001658:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	2200      	movs	r2, #0
 8001660:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e007      	b.n	8001678 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	699b      	ldr	r3, [r3, #24]
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b02      	cmp	r3, #2
 8001674:	d1cb      	bne.n	800160e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001676:	2300      	movs	r3, #0
}
 8001678:	4618      	mov	r0, r3
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800168c:	e028      	b.n	80016e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	68b9      	ldr	r1, [r7, #8]
 8001692:	68f8      	ldr	r0, [r7, #12]
 8001694:	f000 f8aa 	bl	80017ec <I2C_IsErrorOccurred>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e026      	b.n	80016f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016a2:	f7ff f9bf 	bl	8000a24 <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	68ba      	ldr	r2, [r7, #8]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d302      	bcc.n	80016b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d113      	bne.n	80016e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016bc:	f043 0220 	orr.w	r2, r3, #32
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2220      	movs	r2, #32
 80016c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	2200      	movs	r2, #0
 80016d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2200      	movs	r2, #0
 80016d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e007      	b.n	80016f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	699b      	ldr	r3, [r3, #24]
 80016e6:	f003 0320 	and.w	r3, r3, #32
 80016ea:	2b20      	cmp	r3, #32
 80016ec:	d1cf      	bne.n	800168e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80016ee:	2300      	movs	r3, #0
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3710      	adds	r7, #16
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	60b9      	str	r1, [r7, #8]
 8001702:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001704:	e064      	b.n	80017d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	68b9      	ldr	r1, [r7, #8]
 800170a:	68f8      	ldr	r0, [r7, #12]
 800170c:	f000 f86e 	bl	80017ec <I2C_IsErrorOccurred>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e062      	b.n	80017e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	f003 0320 	and.w	r3, r3, #32
 8001724:	2b20      	cmp	r3, #32
 8001726:	d138      	bne.n	800179a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	f003 0304 	and.w	r3, r3, #4
 8001732:	2b04      	cmp	r3, #4
 8001734:	d105      	bne.n	8001742 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800173e:	2300      	movs	r3, #0
 8001740:	e04e      	b.n	80017e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	f003 0310 	and.w	r3, r3, #16
 800174c:	2b10      	cmp	r3, #16
 800174e:	d107      	bne.n	8001760 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2210      	movs	r2, #16
 8001756:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2204      	movs	r2, #4
 800175c:	645a      	str	r2, [r3, #68]	; 0x44
 800175e:	e002      	b.n	8001766 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2200      	movs	r2, #0
 8001764:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2220      	movs	r2, #32
 800176c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	6859      	ldr	r1, [r3, #4]
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	4b1b      	ldr	r3, [pc, #108]	; (80017e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800177a:	400b      	ands	r3, r1
 800177c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	2220      	movs	r2, #32
 8001782:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	2200      	movs	r2, #0
 800178a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2200      	movs	r2, #0
 8001792:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e022      	b.n	80017e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800179a:	f7ff f943 	bl	8000a24 <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	68ba      	ldr	r2, [r7, #8]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d302      	bcc.n	80017b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d10f      	bne.n	80017d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b4:	f043 0220 	orr.w	r2, r3, #32
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2220      	movs	r2, #32
 80017c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2200      	movs	r2, #0
 80017c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e007      	b.n	80017e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	699b      	ldr	r3, [r3, #24]
 80017d6:	f003 0304 	and.w	r3, r3, #4
 80017da:	2b04      	cmp	r3, #4
 80017dc:	d193      	bne.n	8001706 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80017de:	2300      	movs	r3, #0
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3710      	adds	r7, #16
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	fe00e800 	.word	0xfe00e800

080017ec <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b08a      	sub	sp, #40	; 0x28
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017f8:	2300      	movs	r3, #0
 80017fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001806:	2300      	movs	r3, #0
 8001808:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	f003 0310 	and.w	r3, r3, #16
 8001814:	2b00      	cmp	r3, #0
 8001816:	d075      	beq.n	8001904 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2210      	movs	r2, #16
 800181e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001820:	e056      	b.n	80018d0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001828:	d052      	beq.n	80018d0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800182a:	f7ff f8fb 	bl	8000a24 <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	68ba      	ldr	r2, [r7, #8]
 8001836:	429a      	cmp	r2, r3
 8001838:	d302      	bcc.n	8001840 <I2C_IsErrorOccurred+0x54>
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d147      	bne.n	80018d0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800184a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001852:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	699b      	ldr	r3, [r3, #24]
 800185a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800185e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001862:	d12e      	bne.n	80018c2 <I2C_IsErrorOccurred+0xd6>
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800186a:	d02a      	beq.n	80018c2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800186c:	7cfb      	ldrb	r3, [r7, #19]
 800186e:	2b20      	cmp	r3, #32
 8001870:	d027      	beq.n	80018c2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	685a      	ldr	r2, [r3, #4]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001880:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001882:	f7ff f8cf 	bl	8000a24 <HAL_GetTick>
 8001886:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001888:	e01b      	b.n	80018c2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800188a:	f7ff f8cb 	bl	8000a24 <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	2b19      	cmp	r3, #25
 8001896:	d914      	bls.n	80018c2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189c:	f043 0220 	orr.w	r2, r3, #32
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2220      	movs	r2, #32
 80018a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2200      	movs	r2, #0
 80018b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2200      	movs	r2, #0
 80018b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	f003 0320 	and.w	r3, r3, #32
 80018cc:	2b20      	cmp	r3, #32
 80018ce:	d1dc      	bne.n	800188a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	699b      	ldr	r3, [r3, #24]
 80018d6:	f003 0320 	and.w	r3, r3, #32
 80018da:	2b20      	cmp	r3, #32
 80018dc:	d003      	beq.n	80018e6 <I2C_IsErrorOccurred+0xfa>
 80018de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d09d      	beq.n	8001822 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80018e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d103      	bne.n	80018f6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2220      	movs	r2, #32
 80018f4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80018f6:	6a3b      	ldr	r3, [r7, #32]
 80018f8:	f043 0304 	orr.w	r3, r3, #4
 80018fc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	699b      	ldr	r3, [r3, #24]
 800190a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001912:	2b00      	cmp	r3, #0
 8001914:	d00b      	beq.n	800192e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001916:	6a3b      	ldr	r3, [r7, #32]
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001926:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001934:	2b00      	cmp	r3, #0
 8001936:	d00b      	beq.n	8001950 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001938:	6a3b      	ldr	r3, [r7, #32]
 800193a:	f043 0308 	orr.w	r3, r3, #8
 800193e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001948:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001956:	2b00      	cmp	r3, #0
 8001958:	d00b      	beq.n	8001972 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800195a:	6a3b      	ldr	r3, [r7, #32]
 800195c:	f043 0302 	orr.w	r3, r3, #2
 8001960:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f44f 7200 	mov.w	r2, #512	; 0x200
 800196a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001972:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001976:	2b00      	cmp	r3, #0
 8001978:	d01c      	beq.n	80019b4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800197a:	68f8      	ldr	r0, [r7, #12]
 800197c:	f7ff fddc 	bl	8001538 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	6859      	ldr	r1, [r3, #4]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	4b0d      	ldr	r3, [pc, #52]	; (80019c0 <I2C_IsErrorOccurred+0x1d4>)
 800198c:	400b      	ands	r3, r1
 800198e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001994:	6a3b      	ldr	r3, [r7, #32]
 8001996:	431a      	orrs	r2, r3
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2220      	movs	r2, #32
 80019a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2200      	movs	r2, #0
 80019a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2200      	movs	r2, #0
 80019b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80019b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3728      	adds	r7, #40	; 0x28
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	fe00e800 	.word	0xfe00e800

080019c4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b087      	sub	sp, #28
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	607b      	str	r3, [r7, #4]
 80019ce:	460b      	mov	r3, r1
 80019d0:	817b      	strh	r3, [r7, #10]
 80019d2:	4613      	mov	r3, r2
 80019d4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80019d6:	897b      	ldrh	r3, [r7, #10]
 80019d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80019dc:	7a7b      	ldrb	r3, [r7, #9]
 80019de:	041b      	lsls	r3, r3, #16
 80019e0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80019e4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80019ea:	6a3b      	ldr	r3, [r7, #32]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80019f2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	685a      	ldr	r2, [r3, #4]
 80019fa:	6a3b      	ldr	r3, [r7, #32]
 80019fc:	0d5b      	lsrs	r3, r3, #21
 80019fe:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001a02:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <I2C_TransferConfig+0x60>)
 8001a04:	430b      	orrs	r3, r1
 8001a06:	43db      	mvns	r3, r3
 8001a08:	ea02 0103 	and.w	r1, r2, r3
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	697a      	ldr	r2, [r7, #20]
 8001a12:	430a      	orrs	r2, r1
 8001a14:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001a16:	bf00      	nop
 8001a18:	371c      	adds	r7, #28
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	03ff63ff 	.word	0x03ff63ff

08001a28 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001a2c:	4b04      	ldr	r3, [pc, #16]	; (8001a40 <HAL_PWREx_GetVoltageRange+0x18>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	40007000 	.word	0x40007000

08001a44 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a52:	d130      	bne.n	8001ab6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a54:	4b23      	ldr	r3, [pc, #140]	; (8001ae4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a60:	d038      	beq.n	8001ad4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a62:	4b20      	ldr	r3, [pc, #128]	; (8001ae4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a6a:	4a1e      	ldr	r2, [pc, #120]	; (8001ae4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a70:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a72:	4b1d      	ldr	r3, [pc, #116]	; (8001ae8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2232      	movs	r2, #50	; 0x32
 8001a78:	fb02 f303 	mul.w	r3, r2, r3
 8001a7c:	4a1b      	ldr	r2, [pc, #108]	; (8001aec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a82:	0c9b      	lsrs	r3, r3, #18
 8001a84:	3301      	adds	r3, #1
 8001a86:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a88:	e002      	b.n	8001a90 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a90:	4b14      	ldr	r3, [pc, #80]	; (8001ae4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a92:	695b      	ldr	r3, [r3, #20]
 8001a94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a9c:	d102      	bne.n	8001aa4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d1f2      	bne.n	8001a8a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001aa4:	4b0f      	ldr	r3, [pc, #60]	; (8001ae4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001aa6:	695b      	ldr	r3, [r3, #20]
 8001aa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ab0:	d110      	bne.n	8001ad4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e00f      	b.n	8001ad6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ab6:	4b0b      	ldr	r3, [pc, #44]	; (8001ae4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001abe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ac2:	d007      	beq.n	8001ad4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ac4:	4b07      	ldr	r3, [pc, #28]	; (8001ae4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001acc:	4a05      	ldr	r2, [pc, #20]	; (8001ae4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ace:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ad2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3714      	adds	r7, #20
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	40007000 	.word	0x40007000
 8001ae8:	20000004 	.word	0x20000004
 8001aec:	431bde83 	.word	0x431bde83

08001af0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b088      	sub	sp, #32
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e3ca      	b.n	8002298 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b02:	4b97      	ldr	r3, [pc, #604]	; (8001d60 <HAL_RCC_OscConfig+0x270>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f003 030c 	and.w	r3, r3, #12
 8001b0a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b0c:	4b94      	ldr	r3, [pc, #592]	; (8001d60 <HAL_RCC_OscConfig+0x270>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	f003 0303 	and.w	r3, r3, #3
 8001b14:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0310 	and.w	r3, r3, #16
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	f000 80e4 	beq.w	8001cec <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d007      	beq.n	8001b3a <HAL_RCC_OscConfig+0x4a>
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	2b0c      	cmp	r3, #12
 8001b2e:	f040 808b 	bne.w	8001c48 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	f040 8087 	bne.w	8001c48 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b3a:	4b89      	ldr	r3, [pc, #548]	; (8001d60 <HAL_RCC_OscConfig+0x270>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d005      	beq.n	8001b52 <HAL_RCC_OscConfig+0x62>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d101      	bne.n	8001b52 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e3a2      	b.n	8002298 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a1a      	ldr	r2, [r3, #32]
 8001b56:	4b82      	ldr	r3, [pc, #520]	; (8001d60 <HAL_RCC_OscConfig+0x270>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0308 	and.w	r3, r3, #8
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d004      	beq.n	8001b6c <HAL_RCC_OscConfig+0x7c>
 8001b62:	4b7f      	ldr	r3, [pc, #508]	; (8001d60 <HAL_RCC_OscConfig+0x270>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b6a:	e005      	b.n	8001b78 <HAL_RCC_OscConfig+0x88>
 8001b6c:	4b7c      	ldr	r3, [pc, #496]	; (8001d60 <HAL_RCC_OscConfig+0x270>)
 8001b6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b72:	091b      	lsrs	r3, r3, #4
 8001b74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d223      	bcs.n	8001bc4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a1b      	ldr	r3, [r3, #32]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f000 fd1d 	bl	80025c0 <RCC_SetFlashLatencyFromMSIRange>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e383      	b.n	8002298 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b90:	4b73      	ldr	r3, [pc, #460]	; (8001d60 <HAL_RCC_OscConfig+0x270>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a72      	ldr	r2, [pc, #456]	; (8001d60 <HAL_RCC_OscConfig+0x270>)
 8001b96:	f043 0308 	orr.w	r3, r3, #8
 8001b9a:	6013      	str	r3, [r2, #0]
 8001b9c:	4b70      	ldr	r3, [pc, #448]	; (8001d60 <HAL_RCC_OscConfig+0x270>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6a1b      	ldr	r3, [r3, #32]
 8001ba8:	496d      	ldr	r1, [pc, #436]	; (8001d60 <HAL_RCC_OscConfig+0x270>)
 8001baa:	4313      	orrs	r3, r2
 8001bac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bae:	4b6c      	ldr	r3, [pc, #432]	; (8001d60 <HAL_RCC_OscConfig+0x270>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	69db      	ldr	r3, [r3, #28]
 8001bba:	021b      	lsls	r3, r3, #8
 8001bbc:	4968      	ldr	r1, [pc, #416]	; (8001d60 <HAL_RCC_OscConfig+0x270>)
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	604b      	str	r3, [r1, #4]
 8001bc2:	e025      	b.n	8001c10 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bc4:	4b66      	ldr	r3, [pc, #408]	; (8001d60 <HAL_RCC_OscConfig+0x270>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a65      	ldr	r2, [pc, #404]	; (8001d60 <HAL_RCC_OscConfig+0x270>)
 8001bca:	f043 0308 	orr.w	r3, r3, #8
 8001bce:	6013      	str	r3, [r2, #0]
 8001bd0:	4b63      	ldr	r3, [pc, #396]	; (8001d60 <HAL_RCC_OscConfig+0x270>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a1b      	ldr	r3, [r3, #32]
 8001bdc:	4960      	ldr	r1, [pc, #384]	; (8001d60 <HAL_RCC_OscConfig+0x270>)
 8001bde:	4313      	orrs	r3, r2
 8001be0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001be2:	4b5f      	ldr	r3, [pc, #380]	; (8001d60 <HAL_RCC_OscConfig+0x270>)
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	69db      	ldr	r3, [r3, #28]
 8001bee:	021b      	lsls	r3, r3, #8
 8001bf0:	495b      	ldr	r1, [pc, #364]	; (8001d60 <HAL_RCC_OscConfig+0x270>)
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d109      	bne.n	8001c10 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a1b      	ldr	r3, [r3, #32]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f000 fcdd 	bl	80025c0 <RCC_SetFlashLatencyFromMSIRange>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e343      	b.n	8002298 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c10:	f000 fc4a 	bl	80024a8 <HAL_RCC_GetSysClockFreq>
 8001c14:	4602      	mov	r2, r0
 8001c16:	4b52      	ldr	r3, [pc, #328]	; (8001d60 <HAL_RCC_OscConfig+0x270>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	091b      	lsrs	r3, r3, #4
 8001c1c:	f003 030f 	and.w	r3, r3, #15
 8001c20:	4950      	ldr	r1, [pc, #320]	; (8001d64 <HAL_RCC_OscConfig+0x274>)
 8001c22:	5ccb      	ldrb	r3, [r1, r3]
 8001c24:	f003 031f 	and.w	r3, r3, #31
 8001c28:	fa22 f303 	lsr.w	r3, r2, r3
 8001c2c:	4a4e      	ldr	r2, [pc, #312]	; (8001d68 <HAL_RCC_OscConfig+0x278>)
 8001c2e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001c30:	4b4e      	ldr	r3, [pc, #312]	; (8001d6c <HAL_RCC_OscConfig+0x27c>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7fe fea5 	bl	8000984 <HAL_InitTick>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001c3e:	7bfb      	ldrb	r3, [r7, #15]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d052      	beq.n	8001cea <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001c44:	7bfb      	ldrb	r3, [r7, #15]
 8001c46:	e327      	b.n	8002298 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d032      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c50:	4b43      	ldr	r3, [pc, #268]	; (8001d60 <HAL_RCC_OscConfig+0x270>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a42      	ldr	r2, [pc, #264]	; (8001d60 <HAL_RCC_OscConfig+0x270>)
 8001c56:	f043 0301 	orr.w	r3, r3, #1
 8001c5a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c5c:	f7fe fee2 	bl	8000a24 <HAL_GetTick>
 8001c60:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c62:	e008      	b.n	8001c76 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c64:	f7fe fede 	bl	8000a24 <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e310      	b.n	8002298 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c76:	4b3a      	ldr	r3, [pc, #232]	; (8001d60 <HAL_RCC_OscConfig+0x270>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d0f0      	beq.n	8001c64 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c82:	4b37      	ldr	r3, [pc, #220]	; (8001d60 <HAL_RCC_OscConfig+0x270>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a36      	ldr	r2, [pc, #216]	; (8001d60 <HAL_RCC_OscConfig+0x270>)
 8001c88:	f043 0308 	orr.w	r3, r3, #8
 8001c8c:	6013      	str	r3, [r2, #0]
 8001c8e:	4b34      	ldr	r3, [pc, #208]	; (8001d60 <HAL_RCC_OscConfig+0x270>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a1b      	ldr	r3, [r3, #32]
 8001c9a:	4931      	ldr	r1, [pc, #196]	; (8001d60 <HAL_RCC_OscConfig+0x270>)
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ca0:	4b2f      	ldr	r3, [pc, #188]	; (8001d60 <HAL_RCC_OscConfig+0x270>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	69db      	ldr	r3, [r3, #28]
 8001cac:	021b      	lsls	r3, r3, #8
 8001cae:	492c      	ldr	r1, [pc, #176]	; (8001d60 <HAL_RCC_OscConfig+0x270>)
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	604b      	str	r3, [r1, #4]
 8001cb4:	e01a      	b.n	8001cec <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001cb6:	4b2a      	ldr	r3, [pc, #168]	; (8001d60 <HAL_RCC_OscConfig+0x270>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a29      	ldr	r2, [pc, #164]	; (8001d60 <HAL_RCC_OscConfig+0x270>)
 8001cbc:	f023 0301 	bic.w	r3, r3, #1
 8001cc0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001cc2:	f7fe feaf 	bl	8000a24 <HAL_GetTick>
 8001cc6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001cc8:	e008      	b.n	8001cdc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cca:	f7fe feab 	bl	8000a24 <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e2dd      	b.n	8002298 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001cdc:	4b20      	ldr	r3, [pc, #128]	; (8001d60 <HAL_RCC_OscConfig+0x270>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0302 	and.w	r3, r3, #2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d1f0      	bne.n	8001cca <HAL_RCC_OscConfig+0x1da>
 8001ce8:	e000      	b.n	8001cec <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cea:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0301 	and.w	r3, r3, #1
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d074      	beq.n	8001de2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	2b08      	cmp	r3, #8
 8001cfc:	d005      	beq.n	8001d0a <HAL_RCC_OscConfig+0x21a>
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	2b0c      	cmp	r3, #12
 8001d02:	d10e      	bne.n	8001d22 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	2b03      	cmp	r3, #3
 8001d08:	d10b      	bne.n	8001d22 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d0a:	4b15      	ldr	r3, [pc, #84]	; (8001d60 <HAL_RCC_OscConfig+0x270>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d064      	beq.n	8001de0 <HAL_RCC_OscConfig+0x2f0>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d160      	bne.n	8001de0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e2ba      	b.n	8002298 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d2a:	d106      	bne.n	8001d3a <HAL_RCC_OscConfig+0x24a>
 8001d2c:	4b0c      	ldr	r3, [pc, #48]	; (8001d60 <HAL_RCC_OscConfig+0x270>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a0b      	ldr	r2, [pc, #44]	; (8001d60 <HAL_RCC_OscConfig+0x270>)
 8001d32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d36:	6013      	str	r3, [r2, #0]
 8001d38:	e026      	b.n	8001d88 <HAL_RCC_OscConfig+0x298>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d42:	d115      	bne.n	8001d70 <HAL_RCC_OscConfig+0x280>
 8001d44:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <HAL_RCC_OscConfig+0x270>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a05      	ldr	r2, [pc, #20]	; (8001d60 <HAL_RCC_OscConfig+0x270>)
 8001d4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d4e:	6013      	str	r3, [r2, #0]
 8001d50:	4b03      	ldr	r3, [pc, #12]	; (8001d60 <HAL_RCC_OscConfig+0x270>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a02      	ldr	r2, [pc, #8]	; (8001d60 <HAL_RCC_OscConfig+0x270>)
 8001d56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d5a:	6013      	str	r3, [r2, #0]
 8001d5c:	e014      	b.n	8001d88 <HAL_RCC_OscConfig+0x298>
 8001d5e:	bf00      	nop
 8001d60:	40021000 	.word	0x40021000
 8001d64:	080026f0 	.word	0x080026f0
 8001d68:	20000004 	.word	0x20000004
 8001d6c:	20000008 	.word	0x20000008
 8001d70:	4ba0      	ldr	r3, [pc, #640]	; (8001ff4 <HAL_RCC_OscConfig+0x504>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a9f      	ldr	r2, [pc, #636]	; (8001ff4 <HAL_RCC_OscConfig+0x504>)
 8001d76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d7a:	6013      	str	r3, [r2, #0]
 8001d7c:	4b9d      	ldr	r3, [pc, #628]	; (8001ff4 <HAL_RCC_OscConfig+0x504>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a9c      	ldr	r2, [pc, #624]	; (8001ff4 <HAL_RCC_OscConfig+0x504>)
 8001d82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d013      	beq.n	8001db8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d90:	f7fe fe48 	bl	8000a24 <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d98:	f7fe fe44 	bl	8000a24 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b64      	cmp	r3, #100	; 0x64
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e276      	b.n	8002298 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001daa:	4b92      	ldr	r3, [pc, #584]	; (8001ff4 <HAL_RCC_OscConfig+0x504>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d0f0      	beq.n	8001d98 <HAL_RCC_OscConfig+0x2a8>
 8001db6:	e014      	b.n	8001de2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db8:	f7fe fe34 	bl	8000a24 <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dc0:	f7fe fe30 	bl	8000a24 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b64      	cmp	r3, #100	; 0x64
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e262      	b.n	8002298 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dd2:	4b88      	ldr	r3, [pc, #544]	; (8001ff4 <HAL_RCC_OscConfig+0x504>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1f0      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x2d0>
 8001dde:	e000      	b.n	8001de2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d060      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	2b04      	cmp	r3, #4
 8001df2:	d005      	beq.n	8001e00 <HAL_RCC_OscConfig+0x310>
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	2b0c      	cmp	r3, #12
 8001df8:	d119      	bne.n	8001e2e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d116      	bne.n	8001e2e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e00:	4b7c      	ldr	r3, [pc, #496]	; (8001ff4 <HAL_RCC_OscConfig+0x504>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d005      	beq.n	8001e18 <HAL_RCC_OscConfig+0x328>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d101      	bne.n	8001e18 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e23f      	b.n	8002298 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e18:	4b76      	ldr	r3, [pc, #472]	; (8001ff4 <HAL_RCC_OscConfig+0x504>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	691b      	ldr	r3, [r3, #16]
 8001e24:	061b      	lsls	r3, r3, #24
 8001e26:	4973      	ldr	r1, [pc, #460]	; (8001ff4 <HAL_RCC_OscConfig+0x504>)
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e2c:	e040      	b.n	8001eb0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d023      	beq.n	8001e7e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e36:	4b6f      	ldr	r3, [pc, #444]	; (8001ff4 <HAL_RCC_OscConfig+0x504>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a6e      	ldr	r2, [pc, #440]	; (8001ff4 <HAL_RCC_OscConfig+0x504>)
 8001e3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e42:	f7fe fdef 	bl	8000a24 <HAL_GetTick>
 8001e46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e48:	e008      	b.n	8001e5c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e4a:	f7fe fdeb 	bl	8000a24 <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d901      	bls.n	8001e5c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e21d      	b.n	8002298 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e5c:	4b65      	ldr	r3, [pc, #404]	; (8001ff4 <HAL_RCC_OscConfig+0x504>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d0f0      	beq.n	8001e4a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e68:	4b62      	ldr	r3, [pc, #392]	; (8001ff4 <HAL_RCC_OscConfig+0x504>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	691b      	ldr	r3, [r3, #16]
 8001e74:	061b      	lsls	r3, r3, #24
 8001e76:	495f      	ldr	r1, [pc, #380]	; (8001ff4 <HAL_RCC_OscConfig+0x504>)
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	604b      	str	r3, [r1, #4]
 8001e7c:	e018      	b.n	8001eb0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e7e:	4b5d      	ldr	r3, [pc, #372]	; (8001ff4 <HAL_RCC_OscConfig+0x504>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a5c      	ldr	r2, [pc, #368]	; (8001ff4 <HAL_RCC_OscConfig+0x504>)
 8001e84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e8a:	f7fe fdcb 	bl	8000a24 <HAL_GetTick>
 8001e8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e90:	e008      	b.n	8001ea4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e92:	f7fe fdc7 	bl	8000a24 <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d901      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e1f9      	b.n	8002298 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ea4:	4b53      	ldr	r3, [pc, #332]	; (8001ff4 <HAL_RCC_OscConfig+0x504>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d1f0      	bne.n	8001e92 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0308 	and.w	r3, r3, #8
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d03c      	beq.n	8001f36 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	695b      	ldr	r3, [r3, #20]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d01c      	beq.n	8001efe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ec4:	4b4b      	ldr	r3, [pc, #300]	; (8001ff4 <HAL_RCC_OscConfig+0x504>)
 8001ec6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eca:	4a4a      	ldr	r2, [pc, #296]	; (8001ff4 <HAL_RCC_OscConfig+0x504>)
 8001ecc:	f043 0301 	orr.w	r3, r3, #1
 8001ed0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed4:	f7fe fda6 	bl	8000a24 <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001edc:	f7fe fda2 	bl	8000a24 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e1d4      	b.n	8002298 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001eee:	4b41      	ldr	r3, [pc, #260]	; (8001ff4 <HAL_RCC_OscConfig+0x504>)
 8001ef0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d0ef      	beq.n	8001edc <HAL_RCC_OscConfig+0x3ec>
 8001efc:	e01b      	b.n	8001f36 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001efe:	4b3d      	ldr	r3, [pc, #244]	; (8001ff4 <HAL_RCC_OscConfig+0x504>)
 8001f00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f04:	4a3b      	ldr	r2, [pc, #236]	; (8001ff4 <HAL_RCC_OscConfig+0x504>)
 8001f06:	f023 0301 	bic.w	r3, r3, #1
 8001f0a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f0e:	f7fe fd89 	bl	8000a24 <HAL_GetTick>
 8001f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f14:	e008      	b.n	8001f28 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f16:	f7fe fd85 	bl	8000a24 <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d901      	bls.n	8001f28 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e1b7      	b.n	8002298 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f28:	4b32      	ldr	r3, [pc, #200]	; (8001ff4 <HAL_RCC_OscConfig+0x504>)
 8001f2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1ef      	bne.n	8001f16 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0304 	and.w	r3, r3, #4
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f000 80a6 	beq.w	8002090 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f44:	2300      	movs	r3, #0
 8001f46:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001f48:	4b2a      	ldr	r3, [pc, #168]	; (8001ff4 <HAL_RCC_OscConfig+0x504>)
 8001f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d10d      	bne.n	8001f70 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f54:	4b27      	ldr	r3, [pc, #156]	; (8001ff4 <HAL_RCC_OscConfig+0x504>)
 8001f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f58:	4a26      	ldr	r2, [pc, #152]	; (8001ff4 <HAL_RCC_OscConfig+0x504>)
 8001f5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f5e:	6593      	str	r3, [r2, #88]	; 0x58
 8001f60:	4b24      	ldr	r3, [pc, #144]	; (8001ff4 <HAL_RCC_OscConfig+0x504>)
 8001f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f68:	60bb      	str	r3, [r7, #8]
 8001f6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f70:	4b21      	ldr	r3, [pc, #132]	; (8001ff8 <HAL_RCC_OscConfig+0x508>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d118      	bne.n	8001fae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f7c:	4b1e      	ldr	r3, [pc, #120]	; (8001ff8 <HAL_RCC_OscConfig+0x508>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a1d      	ldr	r2, [pc, #116]	; (8001ff8 <HAL_RCC_OscConfig+0x508>)
 8001f82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f86:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f88:	f7fe fd4c 	bl	8000a24 <HAL_GetTick>
 8001f8c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f8e:	e008      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f90:	f7fe fd48 	bl	8000a24 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e17a      	b.n	8002298 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fa2:	4b15      	ldr	r3, [pc, #84]	; (8001ff8 <HAL_RCC_OscConfig+0x508>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d0f0      	beq.n	8001f90 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d108      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x4d8>
 8001fb6:	4b0f      	ldr	r3, [pc, #60]	; (8001ff4 <HAL_RCC_OscConfig+0x504>)
 8001fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fbc:	4a0d      	ldr	r2, [pc, #52]	; (8001ff4 <HAL_RCC_OscConfig+0x504>)
 8001fbe:	f043 0301 	orr.w	r3, r3, #1
 8001fc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fc6:	e029      	b.n	800201c <HAL_RCC_OscConfig+0x52c>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	2b05      	cmp	r3, #5
 8001fce:	d115      	bne.n	8001ffc <HAL_RCC_OscConfig+0x50c>
 8001fd0:	4b08      	ldr	r3, [pc, #32]	; (8001ff4 <HAL_RCC_OscConfig+0x504>)
 8001fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fd6:	4a07      	ldr	r2, [pc, #28]	; (8001ff4 <HAL_RCC_OscConfig+0x504>)
 8001fd8:	f043 0304 	orr.w	r3, r3, #4
 8001fdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fe0:	4b04      	ldr	r3, [pc, #16]	; (8001ff4 <HAL_RCC_OscConfig+0x504>)
 8001fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fe6:	4a03      	ldr	r2, [pc, #12]	; (8001ff4 <HAL_RCC_OscConfig+0x504>)
 8001fe8:	f043 0301 	orr.w	r3, r3, #1
 8001fec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ff0:	e014      	b.n	800201c <HAL_RCC_OscConfig+0x52c>
 8001ff2:	bf00      	nop
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	40007000 	.word	0x40007000
 8001ffc:	4b9c      	ldr	r3, [pc, #624]	; (8002270 <HAL_RCC_OscConfig+0x780>)
 8001ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002002:	4a9b      	ldr	r2, [pc, #620]	; (8002270 <HAL_RCC_OscConfig+0x780>)
 8002004:	f023 0301 	bic.w	r3, r3, #1
 8002008:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800200c:	4b98      	ldr	r3, [pc, #608]	; (8002270 <HAL_RCC_OscConfig+0x780>)
 800200e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002012:	4a97      	ldr	r2, [pc, #604]	; (8002270 <HAL_RCC_OscConfig+0x780>)
 8002014:	f023 0304 	bic.w	r3, r3, #4
 8002018:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d016      	beq.n	8002052 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002024:	f7fe fcfe 	bl	8000a24 <HAL_GetTick>
 8002028:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800202a:	e00a      	b.n	8002042 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800202c:	f7fe fcfa 	bl	8000a24 <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	f241 3288 	movw	r2, #5000	; 0x1388
 800203a:	4293      	cmp	r3, r2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e12a      	b.n	8002298 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002042:	4b8b      	ldr	r3, [pc, #556]	; (8002270 <HAL_RCC_OscConfig+0x780>)
 8002044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d0ed      	beq.n	800202c <HAL_RCC_OscConfig+0x53c>
 8002050:	e015      	b.n	800207e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002052:	f7fe fce7 	bl	8000a24 <HAL_GetTick>
 8002056:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002058:	e00a      	b.n	8002070 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800205a:	f7fe fce3 	bl	8000a24 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	f241 3288 	movw	r2, #5000	; 0x1388
 8002068:	4293      	cmp	r3, r2
 800206a:	d901      	bls.n	8002070 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e113      	b.n	8002298 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002070:	4b7f      	ldr	r3, [pc, #508]	; (8002270 <HAL_RCC_OscConfig+0x780>)
 8002072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1ed      	bne.n	800205a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800207e:	7ffb      	ldrb	r3, [r7, #31]
 8002080:	2b01      	cmp	r3, #1
 8002082:	d105      	bne.n	8002090 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002084:	4b7a      	ldr	r3, [pc, #488]	; (8002270 <HAL_RCC_OscConfig+0x780>)
 8002086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002088:	4a79      	ldr	r2, [pc, #484]	; (8002270 <HAL_RCC_OscConfig+0x780>)
 800208a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800208e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002094:	2b00      	cmp	r3, #0
 8002096:	f000 80fe 	beq.w	8002296 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800209e:	2b02      	cmp	r3, #2
 80020a0:	f040 80d0 	bne.w	8002244 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80020a4:	4b72      	ldr	r3, [pc, #456]	; (8002270 <HAL_RCC_OscConfig+0x780>)
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	f003 0203 	and.w	r2, r3, #3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d130      	bne.n	800211a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	3b01      	subs	r3, #1
 80020c4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d127      	bne.n	800211a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020d4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d11f      	bne.n	800211a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80020e4:	2a07      	cmp	r2, #7
 80020e6:	bf14      	ite	ne
 80020e8:	2201      	movne	r2, #1
 80020ea:	2200      	moveq	r2, #0
 80020ec:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d113      	bne.n	800211a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020fc:	085b      	lsrs	r3, r3, #1
 80020fe:	3b01      	subs	r3, #1
 8002100:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002102:	429a      	cmp	r2, r3
 8002104:	d109      	bne.n	800211a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002110:	085b      	lsrs	r3, r3, #1
 8002112:	3b01      	subs	r3, #1
 8002114:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002116:	429a      	cmp	r2, r3
 8002118:	d06e      	beq.n	80021f8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	2b0c      	cmp	r3, #12
 800211e:	d069      	beq.n	80021f4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002120:	4b53      	ldr	r3, [pc, #332]	; (8002270 <HAL_RCC_OscConfig+0x780>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d105      	bne.n	8002138 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800212c:	4b50      	ldr	r3, [pc, #320]	; (8002270 <HAL_RCC_OscConfig+0x780>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e0ad      	b.n	8002298 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800213c:	4b4c      	ldr	r3, [pc, #304]	; (8002270 <HAL_RCC_OscConfig+0x780>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a4b      	ldr	r2, [pc, #300]	; (8002270 <HAL_RCC_OscConfig+0x780>)
 8002142:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002146:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002148:	f7fe fc6c 	bl	8000a24 <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800214e:	e008      	b.n	8002162 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002150:	f7fe fc68 	bl	8000a24 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b02      	cmp	r3, #2
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e09a      	b.n	8002298 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002162:	4b43      	ldr	r3, [pc, #268]	; (8002270 <HAL_RCC_OscConfig+0x780>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d1f0      	bne.n	8002150 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800216e:	4b40      	ldr	r3, [pc, #256]	; (8002270 <HAL_RCC_OscConfig+0x780>)
 8002170:	68da      	ldr	r2, [r3, #12]
 8002172:	4b40      	ldr	r3, [pc, #256]	; (8002274 <HAL_RCC_OscConfig+0x784>)
 8002174:	4013      	ands	r3, r2
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800217e:	3a01      	subs	r2, #1
 8002180:	0112      	lsls	r2, r2, #4
 8002182:	4311      	orrs	r1, r2
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002188:	0212      	lsls	r2, r2, #8
 800218a:	4311      	orrs	r1, r2
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002190:	0852      	lsrs	r2, r2, #1
 8002192:	3a01      	subs	r2, #1
 8002194:	0552      	lsls	r2, r2, #21
 8002196:	4311      	orrs	r1, r2
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800219c:	0852      	lsrs	r2, r2, #1
 800219e:	3a01      	subs	r2, #1
 80021a0:	0652      	lsls	r2, r2, #25
 80021a2:	4311      	orrs	r1, r2
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80021a8:	0912      	lsrs	r2, r2, #4
 80021aa:	0452      	lsls	r2, r2, #17
 80021ac:	430a      	orrs	r2, r1
 80021ae:	4930      	ldr	r1, [pc, #192]	; (8002270 <HAL_RCC_OscConfig+0x780>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80021b4:	4b2e      	ldr	r3, [pc, #184]	; (8002270 <HAL_RCC_OscConfig+0x780>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a2d      	ldr	r2, [pc, #180]	; (8002270 <HAL_RCC_OscConfig+0x780>)
 80021ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021be:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021c0:	4b2b      	ldr	r3, [pc, #172]	; (8002270 <HAL_RCC_OscConfig+0x780>)
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	4a2a      	ldr	r2, [pc, #168]	; (8002270 <HAL_RCC_OscConfig+0x780>)
 80021c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021ca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021cc:	f7fe fc2a 	bl	8000a24 <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021d2:	e008      	b.n	80021e6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021d4:	f7fe fc26 	bl	8000a24 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e058      	b.n	8002298 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021e6:	4b22      	ldr	r3, [pc, #136]	; (8002270 <HAL_RCC_OscConfig+0x780>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d0f0      	beq.n	80021d4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021f2:	e050      	b.n	8002296 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e04f      	b.n	8002298 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021f8:	4b1d      	ldr	r3, [pc, #116]	; (8002270 <HAL_RCC_OscConfig+0x780>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d148      	bne.n	8002296 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002204:	4b1a      	ldr	r3, [pc, #104]	; (8002270 <HAL_RCC_OscConfig+0x780>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a19      	ldr	r2, [pc, #100]	; (8002270 <HAL_RCC_OscConfig+0x780>)
 800220a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800220e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002210:	4b17      	ldr	r3, [pc, #92]	; (8002270 <HAL_RCC_OscConfig+0x780>)
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	4a16      	ldr	r2, [pc, #88]	; (8002270 <HAL_RCC_OscConfig+0x780>)
 8002216:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800221a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800221c:	f7fe fc02 	bl	8000a24 <HAL_GetTick>
 8002220:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002222:	e008      	b.n	8002236 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002224:	f7fe fbfe 	bl	8000a24 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b02      	cmp	r3, #2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e030      	b.n	8002298 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002236:	4b0e      	ldr	r3, [pc, #56]	; (8002270 <HAL_RCC_OscConfig+0x780>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d0f0      	beq.n	8002224 <HAL_RCC_OscConfig+0x734>
 8002242:	e028      	b.n	8002296 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	2b0c      	cmp	r3, #12
 8002248:	d023      	beq.n	8002292 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800224a:	4b09      	ldr	r3, [pc, #36]	; (8002270 <HAL_RCC_OscConfig+0x780>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a08      	ldr	r2, [pc, #32]	; (8002270 <HAL_RCC_OscConfig+0x780>)
 8002250:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002254:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002256:	f7fe fbe5 	bl	8000a24 <HAL_GetTick>
 800225a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800225c:	e00c      	b.n	8002278 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800225e:	f7fe fbe1 	bl	8000a24 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	2b02      	cmp	r3, #2
 800226a:	d905      	bls.n	8002278 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e013      	b.n	8002298 <HAL_RCC_OscConfig+0x7a8>
 8002270:	40021000 	.word	0x40021000
 8002274:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002278:	4b09      	ldr	r3, [pc, #36]	; (80022a0 <HAL_RCC_OscConfig+0x7b0>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d1ec      	bne.n	800225e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002284:	4b06      	ldr	r3, [pc, #24]	; (80022a0 <HAL_RCC_OscConfig+0x7b0>)
 8002286:	68da      	ldr	r2, [r3, #12]
 8002288:	4905      	ldr	r1, [pc, #20]	; (80022a0 <HAL_RCC_OscConfig+0x7b0>)
 800228a:	4b06      	ldr	r3, [pc, #24]	; (80022a4 <HAL_RCC_OscConfig+0x7b4>)
 800228c:	4013      	ands	r3, r2
 800228e:	60cb      	str	r3, [r1, #12]
 8002290:	e001      	b.n	8002296 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e000      	b.n	8002298 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	3720      	adds	r7, #32
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	40021000 	.word	0x40021000
 80022a4:	feeefffc 	.word	0xfeeefffc

080022a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d101      	bne.n	80022bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e0e7      	b.n	800248c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022bc:	4b75      	ldr	r3, [pc, #468]	; (8002494 <HAL_RCC_ClockConfig+0x1ec>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0307 	and.w	r3, r3, #7
 80022c4:	683a      	ldr	r2, [r7, #0]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d910      	bls.n	80022ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ca:	4b72      	ldr	r3, [pc, #456]	; (8002494 <HAL_RCC_ClockConfig+0x1ec>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f023 0207 	bic.w	r2, r3, #7
 80022d2:	4970      	ldr	r1, [pc, #448]	; (8002494 <HAL_RCC_ClockConfig+0x1ec>)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022da:	4b6e      	ldr	r3, [pc, #440]	; (8002494 <HAL_RCC_ClockConfig+0x1ec>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0307 	and.w	r3, r3, #7
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d001      	beq.n	80022ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e0cf      	b.n	800248c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0302 	and.w	r3, r3, #2
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d010      	beq.n	800231a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	4b66      	ldr	r3, [pc, #408]	; (8002498 <HAL_RCC_ClockConfig+0x1f0>)
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002304:	429a      	cmp	r2, r3
 8002306:	d908      	bls.n	800231a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002308:	4b63      	ldr	r3, [pc, #396]	; (8002498 <HAL_RCC_ClockConfig+0x1f0>)
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	4960      	ldr	r1, [pc, #384]	; (8002498 <HAL_RCC_ClockConfig+0x1f0>)
 8002316:	4313      	orrs	r3, r2
 8002318:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	2b00      	cmp	r3, #0
 8002324:	d04c      	beq.n	80023c0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	2b03      	cmp	r3, #3
 800232c:	d107      	bne.n	800233e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800232e:	4b5a      	ldr	r3, [pc, #360]	; (8002498 <HAL_RCC_ClockConfig+0x1f0>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d121      	bne.n	800237e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e0a6      	b.n	800248c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	2b02      	cmp	r3, #2
 8002344:	d107      	bne.n	8002356 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002346:	4b54      	ldr	r3, [pc, #336]	; (8002498 <HAL_RCC_ClockConfig+0x1f0>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d115      	bne.n	800237e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e09a      	b.n	800248c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d107      	bne.n	800236e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800235e:	4b4e      	ldr	r3, [pc, #312]	; (8002498 <HAL_RCC_ClockConfig+0x1f0>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d109      	bne.n	800237e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e08e      	b.n	800248c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800236e:	4b4a      	ldr	r3, [pc, #296]	; (8002498 <HAL_RCC_ClockConfig+0x1f0>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002376:	2b00      	cmp	r3, #0
 8002378:	d101      	bne.n	800237e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e086      	b.n	800248c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800237e:	4b46      	ldr	r3, [pc, #280]	; (8002498 <HAL_RCC_ClockConfig+0x1f0>)
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f023 0203 	bic.w	r2, r3, #3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	4943      	ldr	r1, [pc, #268]	; (8002498 <HAL_RCC_ClockConfig+0x1f0>)
 800238c:	4313      	orrs	r3, r2
 800238e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002390:	f7fe fb48 	bl	8000a24 <HAL_GetTick>
 8002394:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002396:	e00a      	b.n	80023ae <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002398:	f7fe fb44 	bl	8000a24 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e06e      	b.n	800248c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ae:	4b3a      	ldr	r3, [pc, #232]	; (8002498 <HAL_RCC_ClockConfig+0x1f0>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f003 020c 	and.w	r2, r3, #12
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	429a      	cmp	r2, r3
 80023be:	d1eb      	bne.n	8002398 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0302 	and.w	r3, r3, #2
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d010      	beq.n	80023ee <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689a      	ldr	r2, [r3, #8]
 80023d0:	4b31      	ldr	r3, [pc, #196]	; (8002498 <HAL_RCC_ClockConfig+0x1f0>)
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023d8:	429a      	cmp	r2, r3
 80023da:	d208      	bcs.n	80023ee <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023dc:	4b2e      	ldr	r3, [pc, #184]	; (8002498 <HAL_RCC_ClockConfig+0x1f0>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	492b      	ldr	r1, [pc, #172]	; (8002498 <HAL_RCC_ClockConfig+0x1f0>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023ee:	4b29      	ldr	r3, [pc, #164]	; (8002494 <HAL_RCC_ClockConfig+0x1ec>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0307 	and.w	r3, r3, #7
 80023f6:	683a      	ldr	r2, [r7, #0]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d210      	bcs.n	800241e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023fc:	4b25      	ldr	r3, [pc, #148]	; (8002494 <HAL_RCC_ClockConfig+0x1ec>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f023 0207 	bic.w	r2, r3, #7
 8002404:	4923      	ldr	r1, [pc, #140]	; (8002494 <HAL_RCC_ClockConfig+0x1ec>)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	4313      	orrs	r3, r2
 800240a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800240c:	4b21      	ldr	r3, [pc, #132]	; (8002494 <HAL_RCC_ClockConfig+0x1ec>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0307 	and.w	r3, r3, #7
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	429a      	cmp	r2, r3
 8002418:	d001      	beq.n	800241e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e036      	b.n	800248c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0304 	and.w	r3, r3, #4
 8002426:	2b00      	cmp	r3, #0
 8002428:	d008      	beq.n	800243c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800242a:	4b1b      	ldr	r3, [pc, #108]	; (8002498 <HAL_RCC_ClockConfig+0x1f0>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	4918      	ldr	r1, [pc, #96]	; (8002498 <HAL_RCC_ClockConfig+0x1f0>)
 8002438:	4313      	orrs	r3, r2
 800243a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0308 	and.w	r3, r3, #8
 8002444:	2b00      	cmp	r3, #0
 8002446:	d009      	beq.n	800245c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002448:	4b13      	ldr	r3, [pc, #76]	; (8002498 <HAL_RCC_ClockConfig+0x1f0>)
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	691b      	ldr	r3, [r3, #16]
 8002454:	00db      	lsls	r3, r3, #3
 8002456:	4910      	ldr	r1, [pc, #64]	; (8002498 <HAL_RCC_ClockConfig+0x1f0>)
 8002458:	4313      	orrs	r3, r2
 800245a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800245c:	f000 f824 	bl	80024a8 <HAL_RCC_GetSysClockFreq>
 8002460:	4602      	mov	r2, r0
 8002462:	4b0d      	ldr	r3, [pc, #52]	; (8002498 <HAL_RCC_ClockConfig+0x1f0>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	091b      	lsrs	r3, r3, #4
 8002468:	f003 030f 	and.w	r3, r3, #15
 800246c:	490b      	ldr	r1, [pc, #44]	; (800249c <HAL_RCC_ClockConfig+0x1f4>)
 800246e:	5ccb      	ldrb	r3, [r1, r3]
 8002470:	f003 031f 	and.w	r3, r3, #31
 8002474:	fa22 f303 	lsr.w	r3, r2, r3
 8002478:	4a09      	ldr	r2, [pc, #36]	; (80024a0 <HAL_RCC_ClockConfig+0x1f8>)
 800247a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800247c:	4b09      	ldr	r3, [pc, #36]	; (80024a4 <HAL_RCC_ClockConfig+0x1fc>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4618      	mov	r0, r3
 8002482:	f7fe fa7f 	bl	8000984 <HAL_InitTick>
 8002486:	4603      	mov	r3, r0
 8002488:	72fb      	strb	r3, [r7, #11]

  return status;
 800248a:	7afb      	ldrb	r3, [r7, #11]
}
 800248c:	4618      	mov	r0, r3
 800248e:	3710      	adds	r7, #16
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	40022000 	.word	0x40022000
 8002498:	40021000 	.word	0x40021000
 800249c:	080026f0 	.word	0x080026f0
 80024a0:	20000004 	.word	0x20000004
 80024a4:	20000008 	.word	0x20000008

080024a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b089      	sub	sp, #36	; 0x24
 80024ac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80024ae:	2300      	movs	r3, #0
 80024b0:	61fb      	str	r3, [r7, #28]
 80024b2:	2300      	movs	r3, #0
 80024b4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024b6:	4b3e      	ldr	r3, [pc, #248]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f003 030c 	and.w	r3, r3, #12
 80024be:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024c0:	4b3b      	ldr	r3, [pc, #236]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	f003 0303 	and.w	r3, r3, #3
 80024c8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d005      	beq.n	80024dc <HAL_RCC_GetSysClockFreq+0x34>
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	2b0c      	cmp	r3, #12
 80024d4:	d121      	bne.n	800251a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d11e      	bne.n	800251a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80024dc:	4b34      	ldr	r3, [pc, #208]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0308 	and.w	r3, r3, #8
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d107      	bne.n	80024f8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80024e8:	4b31      	ldr	r3, [pc, #196]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80024ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024ee:	0a1b      	lsrs	r3, r3, #8
 80024f0:	f003 030f 	and.w	r3, r3, #15
 80024f4:	61fb      	str	r3, [r7, #28]
 80024f6:	e005      	b.n	8002504 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80024f8:	4b2d      	ldr	r3, [pc, #180]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	091b      	lsrs	r3, r3, #4
 80024fe:	f003 030f 	and.w	r3, r3, #15
 8002502:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002504:	4a2b      	ldr	r2, [pc, #172]	; (80025b4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800250c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d10d      	bne.n	8002530 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002518:	e00a      	b.n	8002530 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	2b04      	cmp	r3, #4
 800251e:	d102      	bne.n	8002526 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002520:	4b25      	ldr	r3, [pc, #148]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002522:	61bb      	str	r3, [r7, #24]
 8002524:	e004      	b.n	8002530 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	2b08      	cmp	r3, #8
 800252a:	d101      	bne.n	8002530 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800252c:	4b23      	ldr	r3, [pc, #140]	; (80025bc <HAL_RCC_GetSysClockFreq+0x114>)
 800252e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	2b0c      	cmp	r3, #12
 8002534:	d134      	bne.n	80025a0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002536:	4b1e      	ldr	r3, [pc, #120]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	f003 0303 	and.w	r3, r3, #3
 800253e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	2b02      	cmp	r3, #2
 8002544:	d003      	beq.n	800254e <HAL_RCC_GetSysClockFreq+0xa6>
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	2b03      	cmp	r3, #3
 800254a:	d003      	beq.n	8002554 <HAL_RCC_GetSysClockFreq+0xac>
 800254c:	e005      	b.n	800255a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800254e:	4b1a      	ldr	r3, [pc, #104]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002550:	617b      	str	r3, [r7, #20]
      break;
 8002552:	e005      	b.n	8002560 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002554:	4b19      	ldr	r3, [pc, #100]	; (80025bc <HAL_RCC_GetSysClockFreq+0x114>)
 8002556:	617b      	str	r3, [r7, #20]
      break;
 8002558:	e002      	b.n	8002560 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	617b      	str	r3, [r7, #20]
      break;
 800255e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002560:	4b13      	ldr	r3, [pc, #76]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	091b      	lsrs	r3, r3, #4
 8002566:	f003 0307 	and.w	r3, r3, #7
 800256a:	3301      	adds	r3, #1
 800256c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800256e:	4b10      	ldr	r3, [pc, #64]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	0a1b      	lsrs	r3, r3, #8
 8002574:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002578:	697a      	ldr	r2, [r7, #20]
 800257a:	fb03 f202 	mul.w	r2, r3, r2
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	fbb2 f3f3 	udiv	r3, r2, r3
 8002584:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002586:	4b0a      	ldr	r3, [pc, #40]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	0e5b      	lsrs	r3, r3, #25
 800258c:	f003 0303 	and.w	r3, r3, #3
 8002590:	3301      	adds	r3, #1
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002596:	697a      	ldr	r2, [r7, #20]
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	fbb2 f3f3 	udiv	r3, r2, r3
 800259e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80025a0:	69bb      	ldr	r3, [r7, #24]
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3724      	adds	r7, #36	; 0x24
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	40021000 	.word	0x40021000
 80025b4:	08002700 	.word	0x08002700
 80025b8:	00f42400 	.word	0x00f42400
 80025bc:	007a1200 	.word	0x007a1200

080025c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80025c8:	2300      	movs	r3, #0
 80025ca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80025cc:	4b2a      	ldr	r3, [pc, #168]	; (8002678 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d003      	beq.n	80025e0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80025d8:	f7ff fa26 	bl	8001a28 <HAL_PWREx_GetVoltageRange>
 80025dc:	6178      	str	r0, [r7, #20]
 80025de:	e014      	b.n	800260a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80025e0:	4b25      	ldr	r3, [pc, #148]	; (8002678 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e4:	4a24      	ldr	r2, [pc, #144]	; (8002678 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025ea:	6593      	str	r3, [r2, #88]	; 0x58
 80025ec:	4b22      	ldr	r3, [pc, #136]	; (8002678 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f4:	60fb      	str	r3, [r7, #12]
 80025f6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80025f8:	f7ff fa16 	bl	8001a28 <HAL_PWREx_GetVoltageRange>
 80025fc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80025fe:	4b1e      	ldr	r3, [pc, #120]	; (8002678 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002602:	4a1d      	ldr	r2, [pc, #116]	; (8002678 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002604:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002608:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002610:	d10b      	bne.n	800262a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2b80      	cmp	r3, #128	; 0x80
 8002616:	d919      	bls.n	800264c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2ba0      	cmp	r3, #160	; 0xa0
 800261c:	d902      	bls.n	8002624 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800261e:	2302      	movs	r3, #2
 8002620:	613b      	str	r3, [r7, #16]
 8002622:	e013      	b.n	800264c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002624:	2301      	movs	r3, #1
 8002626:	613b      	str	r3, [r7, #16]
 8002628:	e010      	b.n	800264c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2b80      	cmp	r3, #128	; 0x80
 800262e:	d902      	bls.n	8002636 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002630:	2303      	movs	r3, #3
 8002632:	613b      	str	r3, [r7, #16]
 8002634:	e00a      	b.n	800264c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2b80      	cmp	r3, #128	; 0x80
 800263a:	d102      	bne.n	8002642 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800263c:	2302      	movs	r3, #2
 800263e:	613b      	str	r3, [r7, #16]
 8002640:	e004      	b.n	800264c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2b70      	cmp	r3, #112	; 0x70
 8002646:	d101      	bne.n	800264c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002648:	2301      	movs	r3, #1
 800264a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800264c:	4b0b      	ldr	r3, [pc, #44]	; (800267c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f023 0207 	bic.w	r2, r3, #7
 8002654:	4909      	ldr	r1, [pc, #36]	; (800267c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	4313      	orrs	r3, r2
 800265a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800265c:	4b07      	ldr	r3, [pc, #28]	; (800267c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0307 	and.w	r3, r3, #7
 8002664:	693a      	ldr	r2, [r7, #16]
 8002666:	429a      	cmp	r2, r3
 8002668:	d001      	beq.n	800266e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e000      	b.n	8002670 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	3718      	adds	r7, #24
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	40021000 	.word	0x40021000
 800267c:	40022000 	.word	0x40022000

08002680 <memset>:
 8002680:	4402      	add	r2, r0
 8002682:	4603      	mov	r3, r0
 8002684:	4293      	cmp	r3, r2
 8002686:	d100      	bne.n	800268a <memset+0xa>
 8002688:	4770      	bx	lr
 800268a:	f803 1b01 	strb.w	r1, [r3], #1
 800268e:	e7f9      	b.n	8002684 <memset+0x4>

08002690 <__libc_init_array>:
 8002690:	b570      	push	{r4, r5, r6, lr}
 8002692:	4d0d      	ldr	r5, [pc, #52]	; (80026c8 <__libc_init_array+0x38>)
 8002694:	4c0d      	ldr	r4, [pc, #52]	; (80026cc <__libc_init_array+0x3c>)
 8002696:	1b64      	subs	r4, r4, r5
 8002698:	10a4      	asrs	r4, r4, #2
 800269a:	2600      	movs	r6, #0
 800269c:	42a6      	cmp	r6, r4
 800269e:	d109      	bne.n	80026b4 <__libc_init_array+0x24>
 80026a0:	4d0b      	ldr	r5, [pc, #44]	; (80026d0 <__libc_init_array+0x40>)
 80026a2:	4c0c      	ldr	r4, [pc, #48]	; (80026d4 <__libc_init_array+0x44>)
 80026a4:	f000 f818 	bl	80026d8 <_init>
 80026a8:	1b64      	subs	r4, r4, r5
 80026aa:	10a4      	asrs	r4, r4, #2
 80026ac:	2600      	movs	r6, #0
 80026ae:	42a6      	cmp	r6, r4
 80026b0:	d105      	bne.n	80026be <__libc_init_array+0x2e>
 80026b2:	bd70      	pop	{r4, r5, r6, pc}
 80026b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80026b8:	4798      	blx	r3
 80026ba:	3601      	adds	r6, #1
 80026bc:	e7ee      	b.n	800269c <__libc_init_array+0xc>
 80026be:	f855 3b04 	ldr.w	r3, [r5], #4
 80026c2:	4798      	blx	r3
 80026c4:	3601      	adds	r6, #1
 80026c6:	e7f2      	b.n	80026ae <__libc_init_array+0x1e>
 80026c8:	08002730 	.word	0x08002730
 80026cc:	08002730 	.word	0x08002730
 80026d0:	08002730 	.word	0x08002730
 80026d4:	08002734 	.word	0x08002734

080026d8 <_init>:
 80026d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026da:	bf00      	nop
 80026dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026de:	bc08      	pop	{r3}
 80026e0:	469e      	mov	lr, r3
 80026e2:	4770      	bx	lr

080026e4 <_fini>:
 80026e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026e6:	bf00      	nop
 80026e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026ea:	bc08      	pop	{r3}
 80026ec:	469e      	mov	lr, r3
 80026ee:	4770      	bx	lr
