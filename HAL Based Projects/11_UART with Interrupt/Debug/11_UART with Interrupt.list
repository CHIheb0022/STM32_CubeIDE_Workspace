
11_UART with Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b84  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003d0c  08003d0c  00013d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d54  08003d54  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003d54  08003d54  00013d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d5c  08003d5c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d5c  08003d5c  00013d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d60  08003d60  00013d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003d64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000000c  08003d70  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  08003d70  000200b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bc61  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001cd3  00000000  00000000  0002bce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009a0  00000000  00000000  0002d9b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000075d  00000000  00000000  0002e358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024ef3  00000000  00000000  0002eab5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c00a  00000000  00000000  000539a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3d23  00000000  00000000  0005f9b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002664  00000000  00000000  001436d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  00145d3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003cf4 	.word	0x08003cf4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003cf4 	.word	0x08003cf4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 f9dd 	bl	8000886 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f826 	bl	800051c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 f89a 	bl	8000608 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004d4:	f000 f868 	bl	80005a8 <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_UART_Receive_IT(&huart2, RX_Buffer, 2);// We use the EXTI to receive the data once the exception is triggered avoiding
 80004d8:	2202      	movs	r2, #2
 80004da:	490e      	ldr	r1, [pc, #56]	; (8000514 <main+0x50>)
 80004dc:	480e      	ldr	r0, [pc, #56]	; (8000518 <main+0x54>)
 80004de:	f002 f945 	bl	800276c <HAL_UART_Receive_IT>
	//polling the register status (this tracking task is handled by the CPU)
	//Toggle the LED if we receive the 'hi' message
	if ((RX_Buffer[0]=='H') && (RX_Buffer[1]=='I')) {
 80004e2:	4b0c      	ldr	r3, [pc, #48]	; (8000514 <main+0x50>)
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	2b48      	cmp	r3, #72	; 0x48
 80004e8:	d1f6      	bne.n	80004d8 <main+0x14>
 80004ea:	4b0a      	ldr	r3, [pc, #40]	; (8000514 <main+0x50>)
 80004ec:	785b      	ldrb	r3, [r3, #1]
 80004ee:	2b49      	cmp	r3, #73	; 0x49
 80004f0:	d1f2      	bne.n	80004d8 <main+0x14>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80004f2:	2120      	movs	r1, #32
 80004f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004f8:	f000 fdb0 	bl	800105c <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 80004fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000500:	f000 fa36 	bl	8000970 <HAL_Delay>
		RX_Buffer[0]=0;
 8000504:	4b03      	ldr	r3, [pc, #12]	; (8000514 <main+0x50>)
 8000506:	2200      	movs	r2, #0
 8000508:	701a      	strb	r2, [r3, #0]
		RX_Buffer[1]=0;// To avoid toggle' in in a loop the Led. // we can not see it changing state
 800050a:	4b02      	ldr	r3, [pc, #8]	; (8000514 <main+0x50>)
 800050c:	2200      	movs	r2, #0
 800050e:	705a      	strb	r2, [r3, #1]
	HAL_UART_Receive_IT(&huart2, RX_Buffer, 2);// We use the EXTI to receive the data once the exception is triggered avoiding
 8000510:	e7e2      	b.n	80004d8 <main+0x14>
 8000512:	bf00      	nop
 8000514:	200000ac 	.word	0x200000ac
 8000518:	20000028 	.word	0x20000028

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b096      	sub	sp, #88	; 0x58
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 0314 	add.w	r3, r7, #20
 8000526:	2244      	movs	r2, #68	; 0x44
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f003 fbb5 	bl	8003c9a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	463b      	mov	r3, r7
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	605a      	str	r2, [r3, #4]
 8000538:	609a      	str	r2, [r3, #8]
 800053a:	60da      	str	r2, [r3, #12]
 800053c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800053e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000542:	f000 fdb3 	bl	80010ac <HAL_PWREx_ControlVoltageScaling>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800054c:	f000 f89e 	bl	800068c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000550:	2310      	movs	r3, #16
 8000552:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000554:	2301      	movs	r3, #1
 8000556:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000558:	2300      	movs	r3, #0
 800055a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800055c:	2360      	movs	r3, #96	; 0x60
 800055e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000560:	2300      	movs	r3, #0
 8000562:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000564:	f107 0314 	add.w	r3, r7, #20
 8000568:	4618      	mov	r0, r3
 800056a:	f000 fdf5 	bl	8001158 <HAL_RCC_OscConfig>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000574:	f000 f88a 	bl	800068c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000578:	230f      	movs	r3, #15
 800057a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800057c:	2300      	movs	r3, #0
 800057e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000580:	2300      	movs	r3, #0
 8000582:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000584:	2300      	movs	r3, #0
 8000586:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000588:	2300      	movs	r3, #0
 800058a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800058c:	463b      	mov	r3, r7
 800058e:	2100      	movs	r1, #0
 8000590:	4618      	mov	r0, r3
 8000592:	f001 f9bd 	bl	8001910 <HAL_RCC_ClockConfig>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800059c:	f000 f876 	bl	800068c <Error_Handler>
  }
}
 80005a0:	bf00      	nop
 80005a2:	3758      	adds	r7, #88	; 0x58
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}

080005a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005ac:	4b14      	ldr	r3, [pc, #80]	; (8000600 <MX_USART2_UART_Init+0x58>)
 80005ae:	4a15      	ldr	r2, [pc, #84]	; (8000604 <MX_USART2_UART_Init+0x5c>)
 80005b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005b2:	4b13      	ldr	r3, [pc, #76]	; (8000600 <MX_USART2_UART_Init+0x58>)
 80005b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005ba:	4b11      	ldr	r3, [pc, #68]	; (8000600 <MX_USART2_UART_Init+0x58>)
 80005bc:	2200      	movs	r2, #0
 80005be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005c0:	4b0f      	ldr	r3, [pc, #60]	; (8000600 <MX_USART2_UART_Init+0x58>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005c6:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <MX_USART2_UART_Init+0x58>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005cc:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <MX_USART2_UART_Init+0x58>)
 80005ce:	220c      	movs	r2, #12
 80005d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005d2:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <MX_USART2_UART_Init+0x58>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005d8:	4b09      	ldr	r3, [pc, #36]	; (8000600 <MX_USART2_UART_Init+0x58>)
 80005da:	2200      	movs	r2, #0
 80005dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005de:	4b08      	ldr	r3, [pc, #32]	; (8000600 <MX_USART2_UART_Init+0x58>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005e4:	4b06      	ldr	r3, [pc, #24]	; (8000600 <MX_USART2_UART_Init+0x58>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005ea:	4805      	ldr	r0, [pc, #20]	; (8000600 <MX_USART2_UART_Init+0x58>)
 80005ec:	f002 f870 	bl	80026d0 <HAL_UART_Init>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80005f6:	f000 f849 	bl	800068c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	20000028 	.word	0x20000028
 8000604:	40004400 	.word	0x40004400

08000608 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b086      	sub	sp, #24
 800060c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800061c:	4b11      	ldr	r3, [pc, #68]	; (8000664 <MX_GPIO_Init+0x5c>)
 800061e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000620:	4a10      	ldr	r2, [pc, #64]	; (8000664 <MX_GPIO_Init+0x5c>)
 8000622:	f043 0301 	orr.w	r3, r3, #1
 8000626:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000628:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <MX_GPIO_Init+0x5c>)
 800062a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800062c:	f003 0301 	and.w	r3, r3, #1
 8000630:	603b      	str	r3, [r7, #0]
 8000632:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000634:	2200      	movs	r2, #0
 8000636:	2120      	movs	r1, #32
 8000638:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800063c:	f000 fcf6 	bl	800102c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000640:	2320      	movs	r3, #32
 8000642:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000644:	2301      	movs	r3, #1
 8000646:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000648:	2300      	movs	r3, #0
 800064a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064c:	2300      	movs	r3, #0
 800064e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	4619      	mov	r1, r3
 8000654:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000658:	f000 fb3e 	bl	8000cd8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800065c:	bf00      	nop
 800065e:	3718      	adds	r7, #24
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40021000 	.word	0x40021000

08000668 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart2, RX_Buffer, 2); //You need to toggle a breakpoint on this line!
 8000670:	2202      	movs	r2, #2
 8000672:	4904      	ldr	r1, [pc, #16]	; (8000684 <HAL_UART_RxCpltCallback+0x1c>)
 8000674:	4804      	ldr	r0, [pc, #16]	; (8000688 <HAL_UART_RxCpltCallback+0x20>)
 8000676:	f002 f879 	bl	800276c <HAL_UART_Receive_IT>
}
 800067a:	bf00      	nop
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	200000ac 	.word	0x200000ac
 8000688:	20000028 	.word	0x20000028

0800068c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000690:	b672      	cpsid	i
}
 8000692:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000694:	e7fe      	b.n	8000694 <Error_Handler+0x8>
	...

08000698 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800069e:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <HAL_MspInit+0x44>)
 80006a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006a2:	4a0e      	ldr	r2, [pc, #56]	; (80006dc <HAL_MspInit+0x44>)
 80006a4:	f043 0301 	orr.w	r3, r3, #1
 80006a8:	6613      	str	r3, [r2, #96]	; 0x60
 80006aa:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <HAL_MspInit+0x44>)
 80006ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b6:	4b09      	ldr	r3, [pc, #36]	; (80006dc <HAL_MspInit+0x44>)
 80006b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006ba:	4a08      	ldr	r2, [pc, #32]	; (80006dc <HAL_MspInit+0x44>)
 80006bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c0:	6593      	str	r3, [r2, #88]	; 0x58
 80006c2:	4b06      	ldr	r3, [pc, #24]	; (80006dc <HAL_MspInit+0x44>)
 80006c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ca:	603b      	str	r3, [r7, #0]
 80006cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ce:	bf00      	nop
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	40021000 	.word	0x40021000

080006e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b0ac      	sub	sp, #176	; 0xb0
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
 80006f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006f8:	f107 0314 	add.w	r3, r7, #20
 80006fc:	2288      	movs	r2, #136	; 0x88
 80006fe:	2100      	movs	r1, #0
 8000700:	4618      	mov	r0, r3
 8000702:	f003 faca 	bl	8003c9a <memset>
  if(huart->Instance==USART2)
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4a25      	ldr	r2, [pc, #148]	; (80007a0 <HAL_UART_MspInit+0xc0>)
 800070c:	4293      	cmp	r3, r2
 800070e:	d143      	bne.n	8000798 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000710:	2302      	movs	r3, #2
 8000712:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000714:	2300      	movs	r3, #0
 8000716:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000718:	f107 0314 	add.w	r3, r7, #20
 800071c:	4618      	mov	r0, r3
 800071e:	f001 fb1b 	bl	8001d58 <HAL_RCCEx_PeriphCLKConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000728:	f7ff ffb0 	bl	800068c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800072c:	4b1d      	ldr	r3, [pc, #116]	; (80007a4 <HAL_UART_MspInit+0xc4>)
 800072e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000730:	4a1c      	ldr	r2, [pc, #112]	; (80007a4 <HAL_UART_MspInit+0xc4>)
 8000732:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000736:	6593      	str	r3, [r2, #88]	; 0x58
 8000738:	4b1a      	ldr	r3, [pc, #104]	; (80007a4 <HAL_UART_MspInit+0xc4>)
 800073a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800073c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000740:	613b      	str	r3, [r7, #16]
 8000742:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000744:	4b17      	ldr	r3, [pc, #92]	; (80007a4 <HAL_UART_MspInit+0xc4>)
 8000746:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000748:	4a16      	ldr	r2, [pc, #88]	; (80007a4 <HAL_UART_MspInit+0xc4>)
 800074a:	f043 0301 	orr.w	r3, r3, #1
 800074e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000750:	4b14      	ldr	r3, [pc, #80]	; (80007a4 <HAL_UART_MspInit+0xc4>)
 8000752:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000754:	f003 0301 	and.w	r3, r3, #1
 8000758:	60fb      	str	r3, [r7, #12]
 800075a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800075c:	230c      	movs	r3, #12
 800075e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000762:	2302      	movs	r3, #2
 8000764:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	2300      	movs	r3, #0
 800076a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800076e:	2303      	movs	r3, #3
 8000770:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000774:	2307      	movs	r3, #7
 8000776:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800077e:	4619      	mov	r1, r3
 8000780:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000784:	f000 faa8 	bl	8000cd8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000788:	2200      	movs	r2, #0
 800078a:	2100      	movs	r1, #0
 800078c:	2026      	movs	r0, #38	; 0x26
 800078e:	f000 f9ee 	bl	8000b6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000792:	2026      	movs	r0, #38	; 0x26
 8000794:	f000 fa07 	bl	8000ba6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000798:	bf00      	nop
 800079a:	37b0      	adds	r7, #176	; 0xb0
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40004400 	.word	0x40004400
 80007a4:	40021000 	.word	0x40021000

080007a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007ac:	e7fe      	b.n	80007ac <NMI_Handler+0x4>

080007ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ae:	b480      	push	{r7}
 80007b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007b2:	e7fe      	b.n	80007b2 <HardFault_Handler+0x4>

080007b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <MemManage_Handler+0x4>

080007ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007be:	e7fe      	b.n	80007be <BusFault_Handler+0x4>

080007c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <UsageFault_Handler+0x4>

080007c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007c6:	b480      	push	{r7}
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ca:	bf00      	nop
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr

080007d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007d8:	bf00      	nop
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr

080007e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007e2:	b480      	push	{r7}
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007e6:	bf00      	nop
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr

080007f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007f4:	f000 f89c 	bl	8000930 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007f8:	bf00      	nop
 80007fa:	bd80      	pop	{r7, pc}

080007fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000800:	4802      	ldr	r0, [pc, #8]	; (800080c <USART2_IRQHandler+0x10>)
 8000802:	f002 f809 	bl	8002818 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000028 	.word	0x20000028

08000810 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <SystemInit+0x20>)
 8000816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800081a:	4a05      	ldr	r2, [pc, #20]	; (8000830 <SystemInit+0x20>)
 800081c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000820:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000824:	bf00      	nop
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	e000ed00 	.word	0xe000ed00

08000834 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000834:	f8df d034 	ldr.w	sp, [pc, #52]	; 800086c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000838:	f7ff ffea 	bl	8000810 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800083c:	480c      	ldr	r0, [pc, #48]	; (8000870 <LoopForever+0x6>)
  ldr r1, =_edata
 800083e:	490d      	ldr	r1, [pc, #52]	; (8000874 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000840:	4a0d      	ldr	r2, [pc, #52]	; (8000878 <LoopForever+0xe>)
  movs r3, #0
 8000842:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000844:	e002      	b.n	800084c <LoopCopyDataInit>

08000846 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000846:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000848:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800084a:	3304      	adds	r3, #4

0800084c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800084c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800084e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000850:	d3f9      	bcc.n	8000846 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000852:	4a0a      	ldr	r2, [pc, #40]	; (800087c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000854:	4c0a      	ldr	r4, [pc, #40]	; (8000880 <LoopForever+0x16>)
  movs r3, #0
 8000856:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000858:	e001      	b.n	800085e <LoopFillZerobss>

0800085a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800085a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800085c:	3204      	adds	r2, #4

0800085e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800085e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000860:	d3fb      	bcc.n	800085a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000862:	f003 fa23 	bl	8003cac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000866:	f7ff fe2d 	bl	80004c4 <main>

0800086a <LoopForever>:

LoopForever:
    b LoopForever
 800086a:	e7fe      	b.n	800086a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800086c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000870:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000874:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000878:	08003d64 	.word	0x08003d64
  ldr r2, =_sbss
 800087c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000880:	200000b4 	.word	0x200000b4

08000884 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000884:	e7fe      	b.n	8000884 <ADC1_2_IRQHandler>

08000886 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000886:	b580      	push	{r7, lr}
 8000888:	b082      	sub	sp, #8
 800088a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800088c:	2300      	movs	r3, #0
 800088e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000890:	2003      	movs	r0, #3
 8000892:	f000 f961 	bl	8000b58 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000896:	200f      	movs	r0, #15
 8000898:	f000 f80e 	bl	80008b8 <HAL_InitTick>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d002      	beq.n	80008a8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80008a2:	2301      	movs	r3, #1
 80008a4:	71fb      	strb	r3, [r7, #7]
 80008a6:	e001      	b.n	80008ac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008a8:	f7ff fef6 	bl	8000698 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008ac:	79fb      	ldrb	r3, [r7, #7]
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
	...

080008b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008c0:	2300      	movs	r3, #0
 80008c2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80008c4:	4b17      	ldr	r3, [pc, #92]	; (8000924 <HAL_InitTick+0x6c>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d023      	beq.n	8000914 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80008cc:	4b16      	ldr	r3, [pc, #88]	; (8000928 <HAL_InitTick+0x70>)
 80008ce:	681a      	ldr	r2, [r3, #0]
 80008d0:	4b14      	ldr	r3, [pc, #80]	; (8000924 <HAL_InitTick+0x6c>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	4619      	mov	r1, r3
 80008d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008da:	fbb3 f3f1 	udiv	r3, r3, r1
 80008de:	fbb2 f3f3 	udiv	r3, r2, r3
 80008e2:	4618      	mov	r0, r3
 80008e4:	f000 f96d 	bl	8000bc2 <HAL_SYSTICK_Config>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d10f      	bne.n	800090e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	2b0f      	cmp	r3, #15
 80008f2:	d809      	bhi.n	8000908 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008f4:	2200      	movs	r2, #0
 80008f6:	6879      	ldr	r1, [r7, #4]
 80008f8:	f04f 30ff 	mov.w	r0, #4294967295
 80008fc:	f000 f937 	bl	8000b6e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000900:	4a0a      	ldr	r2, [pc, #40]	; (800092c <HAL_InitTick+0x74>)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	6013      	str	r3, [r2, #0]
 8000906:	e007      	b.n	8000918 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000908:	2301      	movs	r3, #1
 800090a:	73fb      	strb	r3, [r7, #15]
 800090c:	e004      	b.n	8000918 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800090e:	2301      	movs	r3, #1
 8000910:	73fb      	strb	r3, [r7, #15]
 8000912:	e001      	b.n	8000918 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000914:	2301      	movs	r3, #1
 8000916:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000918:	7bfb      	ldrb	r3, [r7, #15]
}
 800091a:	4618      	mov	r0, r3
 800091c:	3710      	adds	r7, #16
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20000008 	.word	0x20000008
 8000928:	20000000 	.word	0x20000000
 800092c:	20000004 	.word	0x20000004

08000930 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <HAL_IncTick+0x20>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	461a      	mov	r2, r3
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <HAL_IncTick+0x24>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4413      	add	r3, r2
 8000940:	4a04      	ldr	r2, [pc, #16]	; (8000954 <HAL_IncTick+0x24>)
 8000942:	6013      	str	r3, [r2, #0]
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	20000008 	.word	0x20000008
 8000954:	200000b0 	.word	0x200000b0

08000958 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  return uwTick;
 800095c:	4b03      	ldr	r3, [pc, #12]	; (800096c <HAL_GetTick+0x14>)
 800095e:	681b      	ldr	r3, [r3, #0]
}
 8000960:	4618      	mov	r0, r3
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	200000b0 	.word	0x200000b0

08000970 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000978:	f7ff ffee 	bl	8000958 <HAL_GetTick>
 800097c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000988:	d005      	beq.n	8000996 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800098a:	4b0a      	ldr	r3, [pc, #40]	; (80009b4 <HAL_Delay+0x44>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	461a      	mov	r2, r3
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	4413      	add	r3, r2
 8000994:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000996:	bf00      	nop
 8000998:	f7ff ffde 	bl	8000958 <HAL_GetTick>
 800099c:	4602      	mov	r2, r0
 800099e:	68bb      	ldr	r3, [r7, #8]
 80009a0:	1ad3      	subs	r3, r2, r3
 80009a2:	68fa      	ldr	r2, [r7, #12]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	d8f7      	bhi.n	8000998 <HAL_Delay+0x28>
  {
  }
}
 80009a8:	bf00      	nop
 80009aa:	bf00      	nop
 80009ac:	3710      	adds	r7, #16
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20000008 	.word	0x20000008

080009b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b085      	sub	sp, #20
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	f003 0307 	and.w	r3, r3, #7
 80009c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009c8:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <__NVIC_SetPriorityGrouping+0x44>)
 80009ca:	68db      	ldr	r3, [r3, #12]
 80009cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ce:	68ba      	ldr	r2, [r7, #8]
 80009d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009d4:	4013      	ands	r3, r2
 80009d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ea:	4a04      	ldr	r2, [pc, #16]	; (80009fc <__NVIC_SetPriorityGrouping+0x44>)
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	60d3      	str	r3, [r2, #12]
}
 80009f0:	bf00      	nop
 80009f2:	3714      	adds	r7, #20
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr
 80009fc:	e000ed00 	.word	0xe000ed00

08000a00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a04:	4b04      	ldr	r3, [pc, #16]	; (8000a18 <__NVIC_GetPriorityGrouping+0x18>)
 8000a06:	68db      	ldr	r3, [r3, #12]
 8000a08:	0a1b      	lsrs	r3, r3, #8
 8000a0a:	f003 0307 	and.w	r3, r3, #7
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr
 8000a18:	e000ed00 	.word	0xe000ed00

08000a1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	db0b      	blt.n	8000a46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a2e:	79fb      	ldrb	r3, [r7, #7]
 8000a30:	f003 021f 	and.w	r2, r3, #31
 8000a34:	4907      	ldr	r1, [pc, #28]	; (8000a54 <__NVIC_EnableIRQ+0x38>)
 8000a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3a:	095b      	lsrs	r3, r3, #5
 8000a3c:	2001      	movs	r0, #1
 8000a3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a46:	bf00      	nop
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	e000e100 	.word	0xe000e100

08000a58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	6039      	str	r1, [r7, #0]
 8000a62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	db0a      	blt.n	8000a82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	b2da      	uxtb	r2, r3
 8000a70:	490c      	ldr	r1, [pc, #48]	; (8000aa4 <__NVIC_SetPriority+0x4c>)
 8000a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a76:	0112      	lsls	r2, r2, #4
 8000a78:	b2d2      	uxtb	r2, r2
 8000a7a:	440b      	add	r3, r1
 8000a7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a80:	e00a      	b.n	8000a98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	b2da      	uxtb	r2, r3
 8000a86:	4908      	ldr	r1, [pc, #32]	; (8000aa8 <__NVIC_SetPriority+0x50>)
 8000a88:	79fb      	ldrb	r3, [r7, #7]
 8000a8a:	f003 030f 	and.w	r3, r3, #15
 8000a8e:	3b04      	subs	r3, #4
 8000a90:	0112      	lsls	r2, r2, #4
 8000a92:	b2d2      	uxtb	r2, r2
 8000a94:	440b      	add	r3, r1
 8000a96:	761a      	strb	r2, [r3, #24]
}
 8000a98:	bf00      	nop
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr
 8000aa4:	e000e100 	.word	0xe000e100
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b089      	sub	sp, #36	; 0x24
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	60f8      	str	r0, [r7, #12]
 8000ab4:	60b9      	str	r1, [r7, #8]
 8000ab6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	f003 0307 	and.w	r3, r3, #7
 8000abe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ac0:	69fb      	ldr	r3, [r7, #28]
 8000ac2:	f1c3 0307 	rsb	r3, r3, #7
 8000ac6:	2b04      	cmp	r3, #4
 8000ac8:	bf28      	it	cs
 8000aca:	2304      	movcs	r3, #4
 8000acc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ace:	69fb      	ldr	r3, [r7, #28]
 8000ad0:	3304      	adds	r3, #4
 8000ad2:	2b06      	cmp	r3, #6
 8000ad4:	d902      	bls.n	8000adc <NVIC_EncodePriority+0x30>
 8000ad6:	69fb      	ldr	r3, [r7, #28]
 8000ad8:	3b03      	subs	r3, #3
 8000ada:	e000      	b.n	8000ade <NVIC_EncodePriority+0x32>
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ae4:	69bb      	ldr	r3, [r7, #24]
 8000ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aea:	43da      	mvns	r2, r3
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	401a      	ands	r2, r3
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000af4:	f04f 31ff 	mov.w	r1, #4294967295
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	fa01 f303 	lsl.w	r3, r1, r3
 8000afe:	43d9      	mvns	r1, r3
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b04:	4313      	orrs	r3, r2
         );
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3724      	adds	r7, #36	; 0x24
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
	...

08000b14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b24:	d301      	bcc.n	8000b2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b26:	2301      	movs	r3, #1
 8000b28:	e00f      	b.n	8000b4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b2a:	4a0a      	ldr	r2, [pc, #40]	; (8000b54 <SysTick_Config+0x40>)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	3b01      	subs	r3, #1
 8000b30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b32:	210f      	movs	r1, #15
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295
 8000b38:	f7ff ff8e 	bl	8000a58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b3c:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <SysTick_Config+0x40>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b42:	4b04      	ldr	r3, [pc, #16]	; (8000b54 <SysTick_Config+0x40>)
 8000b44:	2207      	movs	r2, #7
 8000b46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b48:	2300      	movs	r3, #0
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	e000e010 	.word	0xe000e010

08000b58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	f7ff ff29 	bl	80009b8 <__NVIC_SetPriorityGrouping>
}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b086      	sub	sp, #24
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	4603      	mov	r3, r0
 8000b76:	60b9      	str	r1, [r7, #8]
 8000b78:	607a      	str	r2, [r7, #4]
 8000b7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b80:	f7ff ff3e 	bl	8000a00 <__NVIC_GetPriorityGrouping>
 8000b84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b86:	687a      	ldr	r2, [r7, #4]
 8000b88:	68b9      	ldr	r1, [r7, #8]
 8000b8a:	6978      	ldr	r0, [r7, #20]
 8000b8c:	f7ff ff8e 	bl	8000aac <NVIC_EncodePriority>
 8000b90:	4602      	mov	r2, r0
 8000b92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b96:	4611      	mov	r1, r2
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff ff5d 	bl	8000a58 <__NVIC_SetPriority>
}
 8000b9e:	bf00      	nop
 8000ba0:	3718      	adds	r7, #24
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b082      	sub	sp, #8
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	4603      	mov	r3, r0
 8000bae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff ff31 	bl	8000a1c <__NVIC_EnableIRQ>
}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b082      	sub	sp, #8
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bca:	6878      	ldr	r0, [r7, #4]
 8000bcc:	f7ff ffa2 	bl	8000b14 <SysTick_Config>
 8000bd0:	4603      	mov	r3, r0
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}

08000bda <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	b085      	sub	sp, #20
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000be2:	2300      	movs	r3, #0
 8000be4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	2b02      	cmp	r3, #2
 8000bf0:	d008      	beq.n	8000c04 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2204      	movs	r2, #4
 8000bf6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000c00:	2301      	movs	r3, #1
 8000c02:	e022      	b.n	8000c4a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f022 020e 	bic.w	r2, r2, #14
 8000c12:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f022 0201 	bic.w	r2, r2, #1
 8000c22:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c28:	f003 021c 	and.w	r2, r3, #28
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c30:	2101      	movs	r1, #1
 8000c32:	fa01 f202 	lsl.w	r2, r1, r2
 8000c36:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2200      	movs	r2, #0
 8000c44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8000c48:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3714      	adds	r7, #20
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr

08000c56 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b084      	sub	sp, #16
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	2b02      	cmp	r3, #2
 8000c6c:	d005      	beq.n	8000c7a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2204      	movs	r2, #4
 8000c72:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000c74:	2301      	movs	r3, #1
 8000c76:	73fb      	strb	r3, [r7, #15]
 8000c78:	e029      	b.n	8000cce <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f022 020e 	bic.w	r2, r2, #14
 8000c88:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f022 0201 	bic.w	r2, r2, #1
 8000c98:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9e:	f003 021c 	and.w	r2, r3, #28
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca6:	2101      	movs	r1, #1
 8000ca8:	fa01 f202 	lsl.w	r2, r1, r2
 8000cac:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d003      	beq.n	8000cce <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cca:	6878      	ldr	r0, [r7, #4]
 8000ccc:	4798      	blx	r3
    }
  }
  return status;
 8000cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3710      	adds	r7, #16
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b087      	sub	sp, #28
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ce6:	e17f      	b.n	8000fe8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	2101      	movs	r1, #1
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	f000 8171 	beq.w	8000fe2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	f003 0303 	and.w	r3, r3, #3
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d005      	beq.n	8000d18 <HAL_GPIO_Init+0x40>
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f003 0303 	and.w	r3, r3, #3
 8000d14:	2b02      	cmp	r3, #2
 8000d16:	d130      	bne.n	8000d7a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	689b      	ldr	r3, [r3, #8]
 8000d1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	2203      	movs	r2, #3
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	43db      	mvns	r3, r3
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	68da      	ldr	r2, [r3, #12]
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	693a      	ldr	r2, [r7, #16]
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	693a      	ldr	r2, [r7, #16]
 8000d46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d4e:	2201      	movs	r2, #1
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	fa02 f303 	lsl.w	r3, r2, r3
 8000d56:	43db      	mvns	r3, r3
 8000d58:	693a      	ldr	r2, [r7, #16]
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	091b      	lsrs	r3, r3, #4
 8000d64:	f003 0201 	and.w	r2, r3, #1
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	f003 0303 	and.w	r3, r3, #3
 8000d82:	2b03      	cmp	r3, #3
 8000d84:	d118      	bne.n	8000db8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d8a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	43db      	mvns	r3, r3
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	4013      	ands	r3, r2
 8000d9a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	08db      	lsrs	r3, r3, #3
 8000da2:	f003 0201 	and.w	r2, r3, #1
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	693a      	ldr	r2, [r7, #16]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f003 0303 	and.w	r3, r3, #3
 8000dc0:	2b03      	cmp	r3, #3
 8000dc2:	d017      	beq.n	8000df4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	2203      	movs	r2, #3
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	689a      	ldr	r2, [r3, #8]
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	693a      	ldr	r2, [r7, #16]
 8000df2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f003 0303 	and.w	r3, r3, #3
 8000dfc:	2b02      	cmp	r3, #2
 8000dfe:	d123      	bne.n	8000e48 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	08da      	lsrs	r2, r3, #3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	3208      	adds	r2, #8
 8000e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	f003 0307 	and.w	r3, r3, #7
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	220f      	movs	r2, #15
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	4013      	ands	r3, r2
 8000e22:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	691a      	ldr	r2, [r3, #16]
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	f003 0307 	and.w	r3, r3, #7
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	693a      	ldr	r2, [r7, #16]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	08da      	lsrs	r2, r3, #3
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	3208      	adds	r2, #8
 8000e42:	6939      	ldr	r1, [r7, #16]
 8000e44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	2203      	movs	r2, #3
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f003 0203 	and.w	r2, r3, #3
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	693a      	ldr	r2, [r7, #16]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	f000 80ac 	beq.w	8000fe2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e8a:	4b5f      	ldr	r3, [pc, #380]	; (8001008 <HAL_GPIO_Init+0x330>)
 8000e8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e8e:	4a5e      	ldr	r2, [pc, #376]	; (8001008 <HAL_GPIO_Init+0x330>)
 8000e90:	f043 0301 	orr.w	r3, r3, #1
 8000e94:	6613      	str	r3, [r2, #96]	; 0x60
 8000e96:	4b5c      	ldr	r3, [pc, #368]	; (8001008 <HAL_GPIO_Init+0x330>)
 8000e98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	60bb      	str	r3, [r7, #8]
 8000ea0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ea2:	4a5a      	ldr	r2, [pc, #360]	; (800100c <HAL_GPIO_Init+0x334>)
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	089b      	lsrs	r3, r3, #2
 8000ea8:	3302      	adds	r3, #2
 8000eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eae:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	f003 0303 	and.w	r3, r3, #3
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	220f      	movs	r2, #15
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	43db      	mvns	r3, r3
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ecc:	d025      	beq.n	8000f1a <HAL_GPIO_Init+0x242>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a4f      	ldr	r2, [pc, #316]	; (8001010 <HAL_GPIO_Init+0x338>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d01f      	beq.n	8000f16 <HAL_GPIO_Init+0x23e>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a4e      	ldr	r2, [pc, #312]	; (8001014 <HAL_GPIO_Init+0x33c>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d019      	beq.n	8000f12 <HAL_GPIO_Init+0x23a>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a4d      	ldr	r2, [pc, #308]	; (8001018 <HAL_GPIO_Init+0x340>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d013      	beq.n	8000f0e <HAL_GPIO_Init+0x236>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a4c      	ldr	r2, [pc, #304]	; (800101c <HAL_GPIO_Init+0x344>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d00d      	beq.n	8000f0a <HAL_GPIO_Init+0x232>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a4b      	ldr	r2, [pc, #300]	; (8001020 <HAL_GPIO_Init+0x348>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d007      	beq.n	8000f06 <HAL_GPIO_Init+0x22e>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a4a      	ldr	r2, [pc, #296]	; (8001024 <HAL_GPIO_Init+0x34c>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d101      	bne.n	8000f02 <HAL_GPIO_Init+0x22a>
 8000efe:	2306      	movs	r3, #6
 8000f00:	e00c      	b.n	8000f1c <HAL_GPIO_Init+0x244>
 8000f02:	2307      	movs	r3, #7
 8000f04:	e00a      	b.n	8000f1c <HAL_GPIO_Init+0x244>
 8000f06:	2305      	movs	r3, #5
 8000f08:	e008      	b.n	8000f1c <HAL_GPIO_Init+0x244>
 8000f0a:	2304      	movs	r3, #4
 8000f0c:	e006      	b.n	8000f1c <HAL_GPIO_Init+0x244>
 8000f0e:	2303      	movs	r3, #3
 8000f10:	e004      	b.n	8000f1c <HAL_GPIO_Init+0x244>
 8000f12:	2302      	movs	r3, #2
 8000f14:	e002      	b.n	8000f1c <HAL_GPIO_Init+0x244>
 8000f16:	2301      	movs	r3, #1
 8000f18:	e000      	b.n	8000f1c <HAL_GPIO_Init+0x244>
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	697a      	ldr	r2, [r7, #20]
 8000f1e:	f002 0203 	and.w	r2, r2, #3
 8000f22:	0092      	lsls	r2, r2, #2
 8000f24:	4093      	lsls	r3, r2
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f2c:	4937      	ldr	r1, [pc, #220]	; (800100c <HAL_GPIO_Init+0x334>)
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	089b      	lsrs	r3, r3, #2
 8000f32:	3302      	adds	r3, #2
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f3a:	4b3b      	ldr	r3, [pc, #236]	; (8001028 <HAL_GPIO_Init+0x350>)
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	43db      	mvns	r3, r3
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	4013      	ands	r3, r2
 8000f48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d003      	beq.n	8000f5e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f5e:	4a32      	ldr	r2, [pc, #200]	; (8001028 <HAL_GPIO_Init+0x350>)
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f64:	4b30      	ldr	r3, [pc, #192]	; (8001028 <HAL_GPIO_Init+0x350>)
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	4013      	ands	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d003      	beq.n	8000f88 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f88:	4a27      	ldr	r2, [pc, #156]	; (8001028 <HAL_GPIO_Init+0x350>)
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f8e:	4b26      	ldr	r3, [pc, #152]	; (8001028 <HAL_GPIO_Init+0x350>)
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	43db      	mvns	r3, r3
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d003      	beq.n	8000fb2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000fb2:	4a1d      	ldr	r2, [pc, #116]	; (8001028 <HAL_GPIO_Init+0x350>)
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000fb8:	4b1b      	ldr	r3, [pc, #108]	; (8001028 <HAL_GPIO_Init+0x350>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d003      	beq.n	8000fdc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000fdc:	4a12      	ldr	r2, [pc, #72]	; (8001028 <HAL_GPIO_Init+0x350>)
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	fa22 f303 	lsr.w	r3, r2, r3
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	f47f ae78 	bne.w	8000ce8 <HAL_GPIO_Init+0x10>
  }
}
 8000ff8:	bf00      	nop
 8000ffa:	bf00      	nop
 8000ffc:	371c      	adds	r7, #28
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	40021000 	.word	0x40021000
 800100c:	40010000 	.word	0x40010000
 8001010:	48000400 	.word	0x48000400
 8001014:	48000800 	.word	0x48000800
 8001018:	48000c00 	.word	0x48000c00
 800101c:	48001000 	.word	0x48001000
 8001020:	48001400 	.word	0x48001400
 8001024:	48001800 	.word	0x48001800
 8001028:	40010400 	.word	0x40010400

0800102c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	460b      	mov	r3, r1
 8001036:	807b      	strh	r3, [r7, #2]
 8001038:	4613      	mov	r3, r2
 800103a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800103c:	787b      	ldrb	r3, [r7, #1]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d003      	beq.n	800104a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001042:	887a      	ldrh	r2, [r7, #2]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001048:	e002      	b.n	8001050 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800104a:	887a      	ldrh	r2, [r7, #2]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001050:	bf00      	nop
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800105c:	b480      	push	{r7}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	460b      	mov	r3, r1
 8001066:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	695b      	ldr	r3, [r3, #20]
 800106c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800106e:	887a      	ldrh	r2, [r7, #2]
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	4013      	ands	r3, r2
 8001074:	041a      	lsls	r2, r3, #16
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	43d9      	mvns	r1, r3
 800107a:	887b      	ldrh	r3, [r7, #2]
 800107c:	400b      	ands	r3, r1
 800107e:	431a      	orrs	r2, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	619a      	str	r2, [r3, #24]
}
 8001084:	bf00      	nop
 8001086:	3714      	adds	r7, #20
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001094:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800109c:	4618      	mov	r0, r3
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	40007000 	.word	0x40007000

080010ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010ba:	d130      	bne.n	800111e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80010bc:	4b23      	ldr	r3, [pc, #140]	; (800114c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80010c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010c8:	d038      	beq.n	800113c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80010ca:	4b20      	ldr	r3, [pc, #128]	; (800114c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010d2:	4a1e      	ldr	r2, [pc, #120]	; (800114c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010d8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80010da:	4b1d      	ldr	r3, [pc, #116]	; (8001150 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	2232      	movs	r2, #50	; 0x32
 80010e0:	fb02 f303 	mul.w	r3, r2, r3
 80010e4:	4a1b      	ldr	r2, [pc, #108]	; (8001154 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80010e6:	fba2 2303 	umull	r2, r3, r2, r3
 80010ea:	0c9b      	lsrs	r3, r3, #18
 80010ec:	3301      	adds	r3, #1
 80010ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010f0:	e002      	b.n	80010f8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	3b01      	subs	r3, #1
 80010f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010f8:	4b14      	ldr	r3, [pc, #80]	; (800114c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010fa:	695b      	ldr	r3, [r3, #20]
 80010fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001100:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001104:	d102      	bne.n	800110c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f2      	bne.n	80010f2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800110c:	4b0f      	ldr	r3, [pc, #60]	; (800114c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800110e:	695b      	ldr	r3, [r3, #20]
 8001110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001114:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001118:	d110      	bne.n	800113c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800111a:	2303      	movs	r3, #3
 800111c:	e00f      	b.n	800113e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800111e:	4b0b      	ldr	r3, [pc, #44]	; (800114c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001126:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800112a:	d007      	beq.n	800113c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800112c:	4b07      	ldr	r3, [pc, #28]	; (800114c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001134:	4a05      	ldr	r2, [pc, #20]	; (800114c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001136:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800113a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3714      	adds	r7, #20
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	40007000 	.word	0x40007000
 8001150:	20000000 	.word	0x20000000
 8001154:	431bde83 	.word	0x431bde83

08001158 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b088      	sub	sp, #32
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d101      	bne.n	800116a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e3ca      	b.n	8001900 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800116a:	4b97      	ldr	r3, [pc, #604]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	f003 030c 	and.w	r3, r3, #12
 8001172:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001174:	4b94      	ldr	r3, [pc, #592]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	f003 0303 	and.w	r3, r3, #3
 800117c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 0310 	and.w	r3, r3, #16
 8001186:	2b00      	cmp	r3, #0
 8001188:	f000 80e4 	beq.w	8001354 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d007      	beq.n	80011a2 <HAL_RCC_OscConfig+0x4a>
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	2b0c      	cmp	r3, #12
 8001196:	f040 808b 	bne.w	80012b0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	2b01      	cmp	r3, #1
 800119e:	f040 8087 	bne.w	80012b0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011a2:	4b89      	ldr	r3, [pc, #548]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d005      	beq.n	80011ba <HAL_RCC_OscConfig+0x62>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	699b      	ldr	r3, [r3, #24]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d101      	bne.n	80011ba <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e3a2      	b.n	8001900 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6a1a      	ldr	r2, [r3, #32]
 80011be:	4b82      	ldr	r3, [pc, #520]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 0308 	and.w	r3, r3, #8
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d004      	beq.n	80011d4 <HAL_RCC_OscConfig+0x7c>
 80011ca:	4b7f      	ldr	r3, [pc, #508]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80011d2:	e005      	b.n	80011e0 <HAL_RCC_OscConfig+0x88>
 80011d4:	4b7c      	ldr	r3, [pc, #496]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 80011d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011da:	091b      	lsrs	r3, r3, #4
 80011dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d223      	bcs.n	800122c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6a1b      	ldr	r3, [r3, #32]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f000 fd55 	bl	8001c98 <RCC_SetFlashLatencyFromMSIRange>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80011f4:	2301      	movs	r3, #1
 80011f6:	e383      	b.n	8001900 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011f8:	4b73      	ldr	r3, [pc, #460]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a72      	ldr	r2, [pc, #456]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 80011fe:	f043 0308 	orr.w	r3, r3, #8
 8001202:	6013      	str	r3, [r2, #0]
 8001204:	4b70      	ldr	r3, [pc, #448]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6a1b      	ldr	r3, [r3, #32]
 8001210:	496d      	ldr	r1, [pc, #436]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 8001212:	4313      	orrs	r3, r2
 8001214:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001216:	4b6c      	ldr	r3, [pc, #432]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	69db      	ldr	r3, [r3, #28]
 8001222:	021b      	lsls	r3, r3, #8
 8001224:	4968      	ldr	r1, [pc, #416]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 8001226:	4313      	orrs	r3, r2
 8001228:	604b      	str	r3, [r1, #4]
 800122a:	e025      	b.n	8001278 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800122c:	4b66      	ldr	r3, [pc, #408]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a65      	ldr	r2, [pc, #404]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 8001232:	f043 0308 	orr.w	r3, r3, #8
 8001236:	6013      	str	r3, [r2, #0]
 8001238:	4b63      	ldr	r3, [pc, #396]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6a1b      	ldr	r3, [r3, #32]
 8001244:	4960      	ldr	r1, [pc, #384]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 8001246:	4313      	orrs	r3, r2
 8001248:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800124a:	4b5f      	ldr	r3, [pc, #380]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	69db      	ldr	r3, [r3, #28]
 8001256:	021b      	lsls	r3, r3, #8
 8001258:	495b      	ldr	r1, [pc, #364]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 800125a:	4313      	orrs	r3, r2
 800125c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d109      	bne.n	8001278 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6a1b      	ldr	r3, [r3, #32]
 8001268:	4618      	mov	r0, r3
 800126a:	f000 fd15 	bl	8001c98 <RCC_SetFlashLatencyFromMSIRange>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001274:	2301      	movs	r3, #1
 8001276:	e343      	b.n	8001900 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001278:	f000 fc4a 	bl	8001b10 <HAL_RCC_GetSysClockFreq>
 800127c:	4602      	mov	r2, r0
 800127e:	4b52      	ldr	r3, [pc, #328]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	091b      	lsrs	r3, r3, #4
 8001284:	f003 030f 	and.w	r3, r3, #15
 8001288:	4950      	ldr	r1, [pc, #320]	; (80013cc <HAL_RCC_OscConfig+0x274>)
 800128a:	5ccb      	ldrb	r3, [r1, r3]
 800128c:	f003 031f 	and.w	r3, r3, #31
 8001290:	fa22 f303 	lsr.w	r3, r2, r3
 8001294:	4a4e      	ldr	r2, [pc, #312]	; (80013d0 <HAL_RCC_OscConfig+0x278>)
 8001296:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001298:	4b4e      	ldr	r3, [pc, #312]	; (80013d4 <HAL_RCC_OscConfig+0x27c>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff fb0b 	bl	80008b8 <HAL_InitTick>
 80012a2:	4603      	mov	r3, r0
 80012a4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80012a6:	7bfb      	ldrb	r3, [r7, #15]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d052      	beq.n	8001352 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80012ac:	7bfb      	ldrb	r3, [r7, #15]
 80012ae:	e327      	b.n	8001900 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d032      	beq.n	800131e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80012b8:	4b43      	ldr	r3, [pc, #268]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a42      	ldr	r2, [pc, #264]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 80012be:	f043 0301 	orr.w	r3, r3, #1
 80012c2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80012c4:	f7ff fb48 	bl	8000958 <HAL_GetTick>
 80012c8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012ca:	e008      	b.n	80012de <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012cc:	f7ff fb44 	bl	8000958 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d901      	bls.n	80012de <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e310      	b.n	8001900 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012de:	4b3a      	ldr	r3, [pc, #232]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d0f0      	beq.n	80012cc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012ea:	4b37      	ldr	r3, [pc, #220]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a36      	ldr	r2, [pc, #216]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 80012f0:	f043 0308 	orr.w	r3, r3, #8
 80012f4:	6013      	str	r3, [r2, #0]
 80012f6:	4b34      	ldr	r3, [pc, #208]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6a1b      	ldr	r3, [r3, #32]
 8001302:	4931      	ldr	r1, [pc, #196]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 8001304:	4313      	orrs	r3, r2
 8001306:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001308:	4b2f      	ldr	r3, [pc, #188]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	69db      	ldr	r3, [r3, #28]
 8001314:	021b      	lsls	r3, r3, #8
 8001316:	492c      	ldr	r1, [pc, #176]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 8001318:	4313      	orrs	r3, r2
 800131a:	604b      	str	r3, [r1, #4]
 800131c:	e01a      	b.n	8001354 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800131e:	4b2a      	ldr	r3, [pc, #168]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a29      	ldr	r2, [pc, #164]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 8001324:	f023 0301 	bic.w	r3, r3, #1
 8001328:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800132a:	f7ff fb15 	bl	8000958 <HAL_GetTick>
 800132e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001330:	e008      	b.n	8001344 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001332:	f7ff fb11 	bl	8000958 <HAL_GetTick>
 8001336:	4602      	mov	r2, r0
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	2b02      	cmp	r3, #2
 800133e:	d901      	bls.n	8001344 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001340:	2303      	movs	r3, #3
 8001342:	e2dd      	b.n	8001900 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001344:	4b20      	ldr	r3, [pc, #128]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 0302 	and.w	r3, r3, #2
 800134c:	2b00      	cmp	r3, #0
 800134e:	d1f0      	bne.n	8001332 <HAL_RCC_OscConfig+0x1da>
 8001350:	e000      	b.n	8001354 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001352:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 0301 	and.w	r3, r3, #1
 800135c:	2b00      	cmp	r3, #0
 800135e:	d074      	beq.n	800144a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	2b08      	cmp	r3, #8
 8001364:	d005      	beq.n	8001372 <HAL_RCC_OscConfig+0x21a>
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	2b0c      	cmp	r3, #12
 800136a:	d10e      	bne.n	800138a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	2b03      	cmp	r3, #3
 8001370:	d10b      	bne.n	800138a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001372:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d064      	beq.n	8001448 <HAL_RCC_OscConfig+0x2f0>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d160      	bne.n	8001448 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e2ba      	b.n	8001900 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001392:	d106      	bne.n	80013a2 <HAL_RCC_OscConfig+0x24a>
 8001394:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a0b      	ldr	r2, [pc, #44]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 800139a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800139e:	6013      	str	r3, [r2, #0]
 80013a0:	e026      	b.n	80013f0 <HAL_RCC_OscConfig+0x298>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013aa:	d115      	bne.n	80013d8 <HAL_RCC_OscConfig+0x280>
 80013ac:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a05      	ldr	r2, [pc, #20]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 80013b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013b6:	6013      	str	r3, [r2, #0]
 80013b8:	4b03      	ldr	r3, [pc, #12]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a02      	ldr	r2, [pc, #8]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 80013be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013c2:	6013      	str	r3, [r2, #0]
 80013c4:	e014      	b.n	80013f0 <HAL_RCC_OscConfig+0x298>
 80013c6:	bf00      	nop
 80013c8:	40021000 	.word	0x40021000
 80013cc:	08003d0c 	.word	0x08003d0c
 80013d0:	20000000 	.word	0x20000000
 80013d4:	20000004 	.word	0x20000004
 80013d8:	4ba0      	ldr	r3, [pc, #640]	; (800165c <HAL_RCC_OscConfig+0x504>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a9f      	ldr	r2, [pc, #636]	; (800165c <HAL_RCC_OscConfig+0x504>)
 80013de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013e2:	6013      	str	r3, [r2, #0]
 80013e4:	4b9d      	ldr	r3, [pc, #628]	; (800165c <HAL_RCC_OscConfig+0x504>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a9c      	ldr	r2, [pc, #624]	; (800165c <HAL_RCC_OscConfig+0x504>)
 80013ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d013      	beq.n	8001420 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f8:	f7ff faae 	bl	8000958 <HAL_GetTick>
 80013fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013fe:	e008      	b.n	8001412 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001400:	f7ff faaa 	bl	8000958 <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b64      	cmp	r3, #100	; 0x64
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e276      	b.n	8001900 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001412:	4b92      	ldr	r3, [pc, #584]	; (800165c <HAL_RCC_OscConfig+0x504>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d0f0      	beq.n	8001400 <HAL_RCC_OscConfig+0x2a8>
 800141e:	e014      	b.n	800144a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001420:	f7ff fa9a 	bl	8000958 <HAL_GetTick>
 8001424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001426:	e008      	b.n	800143a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001428:	f7ff fa96 	bl	8000958 <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	2b64      	cmp	r3, #100	; 0x64
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e262      	b.n	8001900 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800143a:	4b88      	ldr	r3, [pc, #544]	; (800165c <HAL_RCC_OscConfig+0x504>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d1f0      	bne.n	8001428 <HAL_RCC_OscConfig+0x2d0>
 8001446:	e000      	b.n	800144a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001448:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	2b00      	cmp	r3, #0
 8001454:	d060      	beq.n	8001518 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	2b04      	cmp	r3, #4
 800145a:	d005      	beq.n	8001468 <HAL_RCC_OscConfig+0x310>
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	2b0c      	cmp	r3, #12
 8001460:	d119      	bne.n	8001496 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	2b02      	cmp	r3, #2
 8001466:	d116      	bne.n	8001496 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001468:	4b7c      	ldr	r3, [pc, #496]	; (800165c <HAL_RCC_OscConfig+0x504>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001470:	2b00      	cmp	r3, #0
 8001472:	d005      	beq.n	8001480 <HAL_RCC_OscConfig+0x328>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d101      	bne.n	8001480 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e23f      	b.n	8001900 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001480:	4b76      	ldr	r3, [pc, #472]	; (800165c <HAL_RCC_OscConfig+0x504>)
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	691b      	ldr	r3, [r3, #16]
 800148c:	061b      	lsls	r3, r3, #24
 800148e:	4973      	ldr	r1, [pc, #460]	; (800165c <HAL_RCC_OscConfig+0x504>)
 8001490:	4313      	orrs	r3, r2
 8001492:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001494:	e040      	b.n	8001518 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	68db      	ldr	r3, [r3, #12]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d023      	beq.n	80014e6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800149e:	4b6f      	ldr	r3, [pc, #444]	; (800165c <HAL_RCC_OscConfig+0x504>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a6e      	ldr	r2, [pc, #440]	; (800165c <HAL_RCC_OscConfig+0x504>)
 80014a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014aa:	f7ff fa55 	bl	8000958 <HAL_GetTick>
 80014ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014b0:	e008      	b.n	80014c4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014b2:	f7ff fa51 	bl	8000958 <HAL_GetTick>
 80014b6:	4602      	mov	r2, r0
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d901      	bls.n	80014c4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80014c0:	2303      	movs	r3, #3
 80014c2:	e21d      	b.n	8001900 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014c4:	4b65      	ldr	r3, [pc, #404]	; (800165c <HAL_RCC_OscConfig+0x504>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d0f0      	beq.n	80014b2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d0:	4b62      	ldr	r3, [pc, #392]	; (800165c <HAL_RCC_OscConfig+0x504>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	691b      	ldr	r3, [r3, #16]
 80014dc:	061b      	lsls	r3, r3, #24
 80014de:	495f      	ldr	r1, [pc, #380]	; (800165c <HAL_RCC_OscConfig+0x504>)
 80014e0:	4313      	orrs	r3, r2
 80014e2:	604b      	str	r3, [r1, #4]
 80014e4:	e018      	b.n	8001518 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014e6:	4b5d      	ldr	r3, [pc, #372]	; (800165c <HAL_RCC_OscConfig+0x504>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a5c      	ldr	r2, [pc, #368]	; (800165c <HAL_RCC_OscConfig+0x504>)
 80014ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f2:	f7ff fa31 	bl	8000958 <HAL_GetTick>
 80014f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014f8:	e008      	b.n	800150c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014fa:	f7ff fa2d 	bl	8000958 <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	2b02      	cmp	r3, #2
 8001506:	d901      	bls.n	800150c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	e1f9      	b.n	8001900 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800150c:	4b53      	ldr	r3, [pc, #332]	; (800165c <HAL_RCC_OscConfig+0x504>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001514:	2b00      	cmp	r3, #0
 8001516:	d1f0      	bne.n	80014fa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0308 	and.w	r3, r3, #8
 8001520:	2b00      	cmp	r3, #0
 8001522:	d03c      	beq.n	800159e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	695b      	ldr	r3, [r3, #20]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d01c      	beq.n	8001566 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800152c:	4b4b      	ldr	r3, [pc, #300]	; (800165c <HAL_RCC_OscConfig+0x504>)
 800152e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001532:	4a4a      	ldr	r2, [pc, #296]	; (800165c <HAL_RCC_OscConfig+0x504>)
 8001534:	f043 0301 	orr.w	r3, r3, #1
 8001538:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800153c:	f7ff fa0c 	bl	8000958 <HAL_GetTick>
 8001540:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001544:	f7ff fa08 	bl	8000958 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b02      	cmp	r3, #2
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e1d4      	b.n	8001900 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001556:	4b41      	ldr	r3, [pc, #260]	; (800165c <HAL_RCC_OscConfig+0x504>)
 8001558:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800155c:	f003 0302 	and.w	r3, r3, #2
 8001560:	2b00      	cmp	r3, #0
 8001562:	d0ef      	beq.n	8001544 <HAL_RCC_OscConfig+0x3ec>
 8001564:	e01b      	b.n	800159e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001566:	4b3d      	ldr	r3, [pc, #244]	; (800165c <HAL_RCC_OscConfig+0x504>)
 8001568:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800156c:	4a3b      	ldr	r2, [pc, #236]	; (800165c <HAL_RCC_OscConfig+0x504>)
 800156e:	f023 0301 	bic.w	r3, r3, #1
 8001572:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001576:	f7ff f9ef 	bl	8000958 <HAL_GetTick>
 800157a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800157c:	e008      	b.n	8001590 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800157e:	f7ff f9eb 	bl	8000958 <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	2b02      	cmp	r3, #2
 800158a:	d901      	bls.n	8001590 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e1b7      	b.n	8001900 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001590:	4b32      	ldr	r3, [pc, #200]	; (800165c <HAL_RCC_OscConfig+0x504>)
 8001592:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	2b00      	cmp	r3, #0
 800159c:	d1ef      	bne.n	800157e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0304 	and.w	r3, r3, #4
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	f000 80a6 	beq.w	80016f8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015ac:	2300      	movs	r3, #0
 80015ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80015b0:	4b2a      	ldr	r3, [pc, #168]	; (800165c <HAL_RCC_OscConfig+0x504>)
 80015b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d10d      	bne.n	80015d8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015bc:	4b27      	ldr	r3, [pc, #156]	; (800165c <HAL_RCC_OscConfig+0x504>)
 80015be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c0:	4a26      	ldr	r2, [pc, #152]	; (800165c <HAL_RCC_OscConfig+0x504>)
 80015c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015c6:	6593      	str	r3, [r2, #88]	; 0x58
 80015c8:	4b24      	ldr	r3, [pc, #144]	; (800165c <HAL_RCC_OscConfig+0x504>)
 80015ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d0:	60bb      	str	r3, [r7, #8]
 80015d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015d4:	2301      	movs	r3, #1
 80015d6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015d8:	4b21      	ldr	r3, [pc, #132]	; (8001660 <HAL_RCC_OscConfig+0x508>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d118      	bne.n	8001616 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015e4:	4b1e      	ldr	r3, [pc, #120]	; (8001660 <HAL_RCC_OscConfig+0x508>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a1d      	ldr	r2, [pc, #116]	; (8001660 <HAL_RCC_OscConfig+0x508>)
 80015ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015f0:	f7ff f9b2 	bl	8000958 <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015f8:	f7ff f9ae 	bl	8000958 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e17a      	b.n	8001900 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800160a:	4b15      	ldr	r3, [pc, #84]	; (8001660 <HAL_RCC_OscConfig+0x508>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001612:	2b00      	cmp	r3, #0
 8001614:	d0f0      	beq.n	80015f8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	2b01      	cmp	r3, #1
 800161c:	d108      	bne.n	8001630 <HAL_RCC_OscConfig+0x4d8>
 800161e:	4b0f      	ldr	r3, [pc, #60]	; (800165c <HAL_RCC_OscConfig+0x504>)
 8001620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001624:	4a0d      	ldr	r2, [pc, #52]	; (800165c <HAL_RCC_OscConfig+0x504>)
 8001626:	f043 0301 	orr.w	r3, r3, #1
 800162a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800162e:	e029      	b.n	8001684 <HAL_RCC_OscConfig+0x52c>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	2b05      	cmp	r3, #5
 8001636:	d115      	bne.n	8001664 <HAL_RCC_OscConfig+0x50c>
 8001638:	4b08      	ldr	r3, [pc, #32]	; (800165c <HAL_RCC_OscConfig+0x504>)
 800163a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800163e:	4a07      	ldr	r2, [pc, #28]	; (800165c <HAL_RCC_OscConfig+0x504>)
 8001640:	f043 0304 	orr.w	r3, r3, #4
 8001644:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001648:	4b04      	ldr	r3, [pc, #16]	; (800165c <HAL_RCC_OscConfig+0x504>)
 800164a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800164e:	4a03      	ldr	r2, [pc, #12]	; (800165c <HAL_RCC_OscConfig+0x504>)
 8001650:	f043 0301 	orr.w	r3, r3, #1
 8001654:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001658:	e014      	b.n	8001684 <HAL_RCC_OscConfig+0x52c>
 800165a:	bf00      	nop
 800165c:	40021000 	.word	0x40021000
 8001660:	40007000 	.word	0x40007000
 8001664:	4b9c      	ldr	r3, [pc, #624]	; (80018d8 <HAL_RCC_OscConfig+0x780>)
 8001666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800166a:	4a9b      	ldr	r2, [pc, #620]	; (80018d8 <HAL_RCC_OscConfig+0x780>)
 800166c:	f023 0301 	bic.w	r3, r3, #1
 8001670:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001674:	4b98      	ldr	r3, [pc, #608]	; (80018d8 <HAL_RCC_OscConfig+0x780>)
 8001676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800167a:	4a97      	ldr	r2, [pc, #604]	; (80018d8 <HAL_RCC_OscConfig+0x780>)
 800167c:	f023 0304 	bic.w	r3, r3, #4
 8001680:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d016      	beq.n	80016ba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800168c:	f7ff f964 	bl	8000958 <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001692:	e00a      	b.n	80016aa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001694:	f7ff f960 	bl	8000958 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	f241 3288 	movw	r2, #5000	; 0x1388
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e12a      	b.n	8001900 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016aa:	4b8b      	ldr	r3, [pc, #556]	; (80018d8 <HAL_RCC_OscConfig+0x780>)
 80016ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d0ed      	beq.n	8001694 <HAL_RCC_OscConfig+0x53c>
 80016b8:	e015      	b.n	80016e6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ba:	f7ff f94d 	bl	8000958 <HAL_GetTick>
 80016be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016c0:	e00a      	b.n	80016d8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016c2:	f7ff f949 	bl	8000958 <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d901      	bls.n	80016d8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e113      	b.n	8001900 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016d8:	4b7f      	ldr	r3, [pc, #508]	; (80018d8 <HAL_RCC_OscConfig+0x780>)
 80016da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1ed      	bne.n	80016c2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016e6:	7ffb      	ldrb	r3, [r7, #31]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d105      	bne.n	80016f8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016ec:	4b7a      	ldr	r3, [pc, #488]	; (80018d8 <HAL_RCC_OscConfig+0x780>)
 80016ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f0:	4a79      	ldr	r2, [pc, #484]	; (80018d8 <HAL_RCC_OscConfig+0x780>)
 80016f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016f6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	f000 80fe 	beq.w	80018fe <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001706:	2b02      	cmp	r3, #2
 8001708:	f040 80d0 	bne.w	80018ac <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800170c:	4b72      	ldr	r3, [pc, #456]	; (80018d8 <HAL_RCC_OscConfig+0x780>)
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	f003 0203 	and.w	r2, r3, #3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171c:	429a      	cmp	r2, r3
 800171e:	d130      	bne.n	8001782 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	3b01      	subs	r3, #1
 800172c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800172e:	429a      	cmp	r2, r3
 8001730:	d127      	bne.n	8001782 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800173c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800173e:	429a      	cmp	r2, r3
 8001740:	d11f      	bne.n	8001782 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800174c:	2a07      	cmp	r2, #7
 800174e:	bf14      	ite	ne
 8001750:	2201      	movne	r2, #1
 8001752:	2200      	moveq	r2, #0
 8001754:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001756:	4293      	cmp	r3, r2
 8001758:	d113      	bne.n	8001782 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001764:	085b      	lsrs	r3, r3, #1
 8001766:	3b01      	subs	r3, #1
 8001768:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800176a:	429a      	cmp	r2, r3
 800176c:	d109      	bne.n	8001782 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001778:	085b      	lsrs	r3, r3, #1
 800177a:	3b01      	subs	r3, #1
 800177c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800177e:	429a      	cmp	r2, r3
 8001780:	d06e      	beq.n	8001860 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	2b0c      	cmp	r3, #12
 8001786:	d069      	beq.n	800185c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001788:	4b53      	ldr	r3, [pc, #332]	; (80018d8 <HAL_RCC_OscConfig+0x780>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d105      	bne.n	80017a0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001794:	4b50      	ldr	r3, [pc, #320]	; (80018d8 <HAL_RCC_OscConfig+0x780>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e0ad      	b.n	8001900 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80017a4:	4b4c      	ldr	r3, [pc, #304]	; (80018d8 <HAL_RCC_OscConfig+0x780>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a4b      	ldr	r2, [pc, #300]	; (80018d8 <HAL_RCC_OscConfig+0x780>)
 80017aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017ae:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80017b0:	f7ff f8d2 	bl	8000958 <HAL_GetTick>
 80017b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017b6:	e008      	b.n	80017ca <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017b8:	f7ff f8ce 	bl	8000958 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e09a      	b.n	8001900 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017ca:	4b43      	ldr	r3, [pc, #268]	; (80018d8 <HAL_RCC_OscConfig+0x780>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d1f0      	bne.n	80017b8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017d6:	4b40      	ldr	r3, [pc, #256]	; (80018d8 <HAL_RCC_OscConfig+0x780>)
 80017d8:	68da      	ldr	r2, [r3, #12]
 80017da:	4b40      	ldr	r3, [pc, #256]	; (80018dc <HAL_RCC_OscConfig+0x784>)
 80017dc:	4013      	ands	r3, r2
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80017e6:	3a01      	subs	r2, #1
 80017e8:	0112      	lsls	r2, r2, #4
 80017ea:	4311      	orrs	r1, r2
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80017f0:	0212      	lsls	r2, r2, #8
 80017f2:	4311      	orrs	r1, r2
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80017f8:	0852      	lsrs	r2, r2, #1
 80017fa:	3a01      	subs	r2, #1
 80017fc:	0552      	lsls	r2, r2, #21
 80017fe:	4311      	orrs	r1, r2
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001804:	0852      	lsrs	r2, r2, #1
 8001806:	3a01      	subs	r2, #1
 8001808:	0652      	lsls	r2, r2, #25
 800180a:	4311      	orrs	r1, r2
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001810:	0912      	lsrs	r2, r2, #4
 8001812:	0452      	lsls	r2, r2, #17
 8001814:	430a      	orrs	r2, r1
 8001816:	4930      	ldr	r1, [pc, #192]	; (80018d8 <HAL_RCC_OscConfig+0x780>)
 8001818:	4313      	orrs	r3, r2
 800181a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800181c:	4b2e      	ldr	r3, [pc, #184]	; (80018d8 <HAL_RCC_OscConfig+0x780>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a2d      	ldr	r2, [pc, #180]	; (80018d8 <HAL_RCC_OscConfig+0x780>)
 8001822:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001826:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001828:	4b2b      	ldr	r3, [pc, #172]	; (80018d8 <HAL_RCC_OscConfig+0x780>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	4a2a      	ldr	r2, [pc, #168]	; (80018d8 <HAL_RCC_OscConfig+0x780>)
 800182e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001832:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001834:	f7ff f890 	bl	8000958 <HAL_GetTick>
 8001838:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800183a:	e008      	b.n	800184e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800183c:	f7ff f88c 	bl	8000958 <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b02      	cmp	r3, #2
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e058      	b.n	8001900 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800184e:	4b22      	ldr	r3, [pc, #136]	; (80018d8 <HAL_RCC_OscConfig+0x780>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d0f0      	beq.n	800183c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800185a:	e050      	b.n	80018fe <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e04f      	b.n	8001900 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001860:	4b1d      	ldr	r3, [pc, #116]	; (80018d8 <HAL_RCC_OscConfig+0x780>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d148      	bne.n	80018fe <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800186c:	4b1a      	ldr	r3, [pc, #104]	; (80018d8 <HAL_RCC_OscConfig+0x780>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a19      	ldr	r2, [pc, #100]	; (80018d8 <HAL_RCC_OscConfig+0x780>)
 8001872:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001876:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001878:	4b17      	ldr	r3, [pc, #92]	; (80018d8 <HAL_RCC_OscConfig+0x780>)
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	4a16      	ldr	r2, [pc, #88]	; (80018d8 <HAL_RCC_OscConfig+0x780>)
 800187e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001882:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001884:	f7ff f868 	bl	8000958 <HAL_GetTick>
 8001888:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800188c:	f7ff f864 	bl	8000958 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b02      	cmp	r3, #2
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e030      	b.n	8001900 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800189e:	4b0e      	ldr	r3, [pc, #56]	; (80018d8 <HAL_RCC_OscConfig+0x780>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d0f0      	beq.n	800188c <HAL_RCC_OscConfig+0x734>
 80018aa:	e028      	b.n	80018fe <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	2b0c      	cmp	r3, #12
 80018b0:	d023      	beq.n	80018fa <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018b2:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <HAL_RCC_OscConfig+0x780>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a08      	ldr	r2, [pc, #32]	; (80018d8 <HAL_RCC_OscConfig+0x780>)
 80018b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018be:	f7ff f84b 	bl	8000958 <HAL_GetTick>
 80018c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018c4:	e00c      	b.n	80018e0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018c6:	f7ff f847 	bl	8000958 <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d905      	bls.n	80018e0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e013      	b.n	8001900 <HAL_RCC_OscConfig+0x7a8>
 80018d8:	40021000 	.word	0x40021000
 80018dc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018e0:	4b09      	ldr	r3, [pc, #36]	; (8001908 <HAL_RCC_OscConfig+0x7b0>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d1ec      	bne.n	80018c6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80018ec:	4b06      	ldr	r3, [pc, #24]	; (8001908 <HAL_RCC_OscConfig+0x7b0>)
 80018ee:	68da      	ldr	r2, [r3, #12]
 80018f0:	4905      	ldr	r1, [pc, #20]	; (8001908 <HAL_RCC_OscConfig+0x7b0>)
 80018f2:	4b06      	ldr	r3, [pc, #24]	; (800190c <HAL_RCC_OscConfig+0x7b4>)
 80018f4:	4013      	ands	r3, r2
 80018f6:	60cb      	str	r3, [r1, #12]
 80018f8:	e001      	b.n	80018fe <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e000      	b.n	8001900 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80018fe:	2300      	movs	r3, #0
}
 8001900:	4618      	mov	r0, r3
 8001902:	3720      	adds	r7, #32
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40021000 	.word	0x40021000
 800190c:	feeefffc 	.word	0xfeeefffc

08001910 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d101      	bne.n	8001924 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e0e7      	b.n	8001af4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001924:	4b75      	ldr	r3, [pc, #468]	; (8001afc <HAL_RCC_ClockConfig+0x1ec>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0307 	and.w	r3, r3, #7
 800192c:	683a      	ldr	r2, [r7, #0]
 800192e:	429a      	cmp	r2, r3
 8001930:	d910      	bls.n	8001954 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001932:	4b72      	ldr	r3, [pc, #456]	; (8001afc <HAL_RCC_ClockConfig+0x1ec>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f023 0207 	bic.w	r2, r3, #7
 800193a:	4970      	ldr	r1, [pc, #448]	; (8001afc <HAL_RCC_ClockConfig+0x1ec>)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	4313      	orrs	r3, r2
 8001940:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001942:	4b6e      	ldr	r3, [pc, #440]	; (8001afc <HAL_RCC_ClockConfig+0x1ec>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	683a      	ldr	r2, [r7, #0]
 800194c:	429a      	cmp	r2, r3
 800194e:	d001      	beq.n	8001954 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e0cf      	b.n	8001af4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d010      	beq.n	8001982 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689a      	ldr	r2, [r3, #8]
 8001964:	4b66      	ldr	r3, [pc, #408]	; (8001b00 <HAL_RCC_ClockConfig+0x1f0>)
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800196c:	429a      	cmp	r2, r3
 800196e:	d908      	bls.n	8001982 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001970:	4b63      	ldr	r3, [pc, #396]	; (8001b00 <HAL_RCC_ClockConfig+0x1f0>)
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	4960      	ldr	r1, [pc, #384]	; (8001b00 <HAL_RCC_ClockConfig+0x1f0>)
 800197e:	4313      	orrs	r3, r2
 8001980:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	2b00      	cmp	r3, #0
 800198c:	d04c      	beq.n	8001a28 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	2b03      	cmp	r3, #3
 8001994:	d107      	bne.n	80019a6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001996:	4b5a      	ldr	r3, [pc, #360]	; (8001b00 <HAL_RCC_ClockConfig+0x1f0>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d121      	bne.n	80019e6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e0a6      	b.n	8001af4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d107      	bne.n	80019be <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019ae:	4b54      	ldr	r3, [pc, #336]	; (8001b00 <HAL_RCC_ClockConfig+0x1f0>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d115      	bne.n	80019e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e09a      	b.n	8001af4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d107      	bne.n	80019d6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019c6:	4b4e      	ldr	r3, [pc, #312]	; (8001b00 <HAL_RCC_ClockConfig+0x1f0>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d109      	bne.n	80019e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e08e      	b.n	8001af4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019d6:	4b4a      	ldr	r3, [pc, #296]	; (8001b00 <HAL_RCC_ClockConfig+0x1f0>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d101      	bne.n	80019e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e086      	b.n	8001af4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80019e6:	4b46      	ldr	r3, [pc, #280]	; (8001b00 <HAL_RCC_ClockConfig+0x1f0>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f023 0203 	bic.w	r2, r3, #3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	4943      	ldr	r1, [pc, #268]	; (8001b00 <HAL_RCC_ClockConfig+0x1f0>)
 80019f4:	4313      	orrs	r3, r2
 80019f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019f8:	f7fe ffae 	bl	8000958 <HAL_GetTick>
 80019fc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019fe:	e00a      	b.n	8001a16 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a00:	f7fe ffaa 	bl	8000958 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e06e      	b.n	8001af4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a16:	4b3a      	ldr	r3, [pc, #232]	; (8001b00 <HAL_RCC_ClockConfig+0x1f0>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f003 020c 	and.w	r2, r3, #12
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d1eb      	bne.n	8001a00 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0302 	and.w	r3, r3, #2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d010      	beq.n	8001a56 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	689a      	ldr	r2, [r3, #8]
 8001a38:	4b31      	ldr	r3, [pc, #196]	; (8001b00 <HAL_RCC_ClockConfig+0x1f0>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d208      	bcs.n	8001a56 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a44:	4b2e      	ldr	r3, [pc, #184]	; (8001b00 <HAL_RCC_ClockConfig+0x1f0>)
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	492b      	ldr	r1, [pc, #172]	; (8001b00 <HAL_RCC_ClockConfig+0x1f0>)
 8001a52:	4313      	orrs	r3, r2
 8001a54:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a56:	4b29      	ldr	r3, [pc, #164]	; (8001afc <HAL_RCC_ClockConfig+0x1ec>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0307 	and.w	r3, r3, #7
 8001a5e:	683a      	ldr	r2, [r7, #0]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d210      	bcs.n	8001a86 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a64:	4b25      	ldr	r3, [pc, #148]	; (8001afc <HAL_RCC_ClockConfig+0x1ec>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f023 0207 	bic.w	r2, r3, #7
 8001a6c:	4923      	ldr	r1, [pc, #140]	; (8001afc <HAL_RCC_ClockConfig+0x1ec>)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a74:	4b21      	ldr	r3, [pc, #132]	; (8001afc <HAL_RCC_ClockConfig+0x1ec>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0307 	and.w	r3, r3, #7
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d001      	beq.n	8001a86 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e036      	b.n	8001af4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0304 	and.w	r3, r3, #4
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d008      	beq.n	8001aa4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a92:	4b1b      	ldr	r3, [pc, #108]	; (8001b00 <HAL_RCC_ClockConfig+0x1f0>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	68db      	ldr	r3, [r3, #12]
 8001a9e:	4918      	ldr	r1, [pc, #96]	; (8001b00 <HAL_RCC_ClockConfig+0x1f0>)
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0308 	and.w	r3, r3, #8
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d009      	beq.n	8001ac4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ab0:	4b13      	ldr	r3, [pc, #76]	; (8001b00 <HAL_RCC_ClockConfig+0x1f0>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	691b      	ldr	r3, [r3, #16]
 8001abc:	00db      	lsls	r3, r3, #3
 8001abe:	4910      	ldr	r1, [pc, #64]	; (8001b00 <HAL_RCC_ClockConfig+0x1f0>)
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ac4:	f000 f824 	bl	8001b10 <HAL_RCC_GetSysClockFreq>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	4b0d      	ldr	r3, [pc, #52]	; (8001b00 <HAL_RCC_ClockConfig+0x1f0>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	091b      	lsrs	r3, r3, #4
 8001ad0:	f003 030f 	and.w	r3, r3, #15
 8001ad4:	490b      	ldr	r1, [pc, #44]	; (8001b04 <HAL_RCC_ClockConfig+0x1f4>)
 8001ad6:	5ccb      	ldrb	r3, [r1, r3]
 8001ad8:	f003 031f 	and.w	r3, r3, #31
 8001adc:	fa22 f303 	lsr.w	r3, r2, r3
 8001ae0:	4a09      	ldr	r2, [pc, #36]	; (8001b08 <HAL_RCC_ClockConfig+0x1f8>)
 8001ae2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001ae4:	4b09      	ldr	r3, [pc, #36]	; (8001b0c <HAL_RCC_ClockConfig+0x1fc>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7fe fee5 	bl	80008b8 <HAL_InitTick>
 8001aee:	4603      	mov	r3, r0
 8001af0:	72fb      	strb	r3, [r7, #11]

  return status;
 8001af2:	7afb      	ldrb	r3, [r7, #11]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3710      	adds	r7, #16
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	40022000 	.word	0x40022000
 8001b00:	40021000 	.word	0x40021000
 8001b04:	08003d0c 	.word	0x08003d0c
 8001b08:	20000000 	.word	0x20000000
 8001b0c:	20000004 	.word	0x20000004

08001b10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b089      	sub	sp, #36	; 0x24
 8001b14:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b16:	2300      	movs	r3, #0
 8001b18:	61fb      	str	r3, [r7, #28]
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b1e:	4b3e      	ldr	r3, [pc, #248]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f003 030c 	and.w	r3, r3, #12
 8001b26:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b28:	4b3b      	ldr	r3, [pc, #236]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	f003 0303 	and.w	r3, r3, #3
 8001b30:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d005      	beq.n	8001b44 <HAL_RCC_GetSysClockFreq+0x34>
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	2b0c      	cmp	r3, #12
 8001b3c:	d121      	bne.n	8001b82 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d11e      	bne.n	8001b82 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b44:	4b34      	ldr	r3, [pc, #208]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0308 	and.w	r3, r3, #8
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d107      	bne.n	8001b60 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b50:	4b31      	ldr	r3, [pc, #196]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b56:	0a1b      	lsrs	r3, r3, #8
 8001b58:	f003 030f 	and.w	r3, r3, #15
 8001b5c:	61fb      	str	r3, [r7, #28]
 8001b5e:	e005      	b.n	8001b6c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b60:	4b2d      	ldr	r3, [pc, #180]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	091b      	lsrs	r3, r3, #4
 8001b66:	f003 030f 	and.w	r3, r3, #15
 8001b6a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001b6c:	4a2b      	ldr	r2, [pc, #172]	; (8001c1c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b74:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d10d      	bne.n	8001b98 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b80:	e00a      	b.n	8001b98 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	2b04      	cmp	r3, #4
 8001b86:	d102      	bne.n	8001b8e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001b88:	4b25      	ldr	r3, [pc, #148]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b8a:	61bb      	str	r3, [r7, #24]
 8001b8c:	e004      	b.n	8001b98 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	2b08      	cmp	r3, #8
 8001b92:	d101      	bne.n	8001b98 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b94:	4b23      	ldr	r3, [pc, #140]	; (8001c24 <HAL_RCC_GetSysClockFreq+0x114>)
 8001b96:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	2b0c      	cmp	r3, #12
 8001b9c:	d134      	bne.n	8001c08 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b9e:	4b1e      	ldr	r3, [pc, #120]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	f003 0303 	and.w	r3, r3, #3
 8001ba6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d003      	beq.n	8001bb6 <HAL_RCC_GetSysClockFreq+0xa6>
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	2b03      	cmp	r3, #3
 8001bb2:	d003      	beq.n	8001bbc <HAL_RCC_GetSysClockFreq+0xac>
 8001bb4:	e005      	b.n	8001bc2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001bb6:	4b1a      	ldr	r3, [pc, #104]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x110>)
 8001bb8:	617b      	str	r3, [r7, #20]
      break;
 8001bba:	e005      	b.n	8001bc8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001bbc:	4b19      	ldr	r3, [pc, #100]	; (8001c24 <HAL_RCC_GetSysClockFreq+0x114>)
 8001bbe:	617b      	str	r3, [r7, #20]
      break;
 8001bc0:	e002      	b.n	8001bc8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	617b      	str	r3, [r7, #20]
      break;
 8001bc6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001bc8:	4b13      	ldr	r3, [pc, #76]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	091b      	lsrs	r3, r3, #4
 8001bce:	f003 0307 	and.w	r3, r3, #7
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001bd6:	4b10      	ldr	r3, [pc, #64]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	0a1b      	lsrs	r3, r3, #8
 8001bdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001be0:	697a      	ldr	r2, [r7, #20]
 8001be2:	fb03 f202 	mul.w	r2, r3, r2
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001bee:	4b0a      	ldr	r3, [pc, #40]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	0e5b      	lsrs	r3, r3, #25
 8001bf4:	f003 0303 	and.w	r3, r3, #3
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001bfe:	697a      	ldr	r2, [r7, #20]
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c06:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001c08:	69bb      	ldr	r3, [r7, #24]
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3724      	adds	r7, #36	; 0x24
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	08003d24 	.word	0x08003d24
 8001c20:	00f42400 	.word	0x00f42400
 8001c24:	007a1200 	.word	0x007a1200

08001c28 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c2c:	4b03      	ldr	r3, [pc, #12]	; (8001c3c <HAL_RCC_GetHCLKFreq+0x14>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	20000000 	.word	0x20000000

08001c40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001c44:	f7ff fff0 	bl	8001c28 <HAL_RCC_GetHCLKFreq>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	0a1b      	lsrs	r3, r3, #8
 8001c50:	f003 0307 	and.w	r3, r3, #7
 8001c54:	4904      	ldr	r1, [pc, #16]	; (8001c68 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c56:	5ccb      	ldrb	r3, [r1, r3]
 8001c58:	f003 031f 	and.w	r3, r3, #31
 8001c5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40021000 	.word	0x40021000
 8001c68:	08003d1c 	.word	0x08003d1c

08001c6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001c70:	f7ff ffda 	bl	8001c28 <HAL_RCC_GetHCLKFreq>
 8001c74:	4602      	mov	r2, r0
 8001c76:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	0adb      	lsrs	r3, r3, #11
 8001c7c:	f003 0307 	and.w	r3, r3, #7
 8001c80:	4904      	ldr	r1, [pc, #16]	; (8001c94 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001c82:	5ccb      	ldrb	r3, [r1, r3]
 8001c84:	f003 031f 	and.w	r3, r3, #31
 8001c88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40021000 	.word	0x40021000
 8001c94:	08003d1c 	.word	0x08003d1c

08001c98 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001ca4:	4b2a      	ldr	r3, [pc, #168]	; (8001d50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d003      	beq.n	8001cb8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001cb0:	f7ff f9ee 	bl	8001090 <HAL_PWREx_GetVoltageRange>
 8001cb4:	6178      	str	r0, [r7, #20]
 8001cb6:	e014      	b.n	8001ce2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001cb8:	4b25      	ldr	r3, [pc, #148]	; (8001d50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cbc:	4a24      	ldr	r2, [pc, #144]	; (8001d50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cc2:	6593      	str	r3, [r2, #88]	; 0x58
 8001cc4:	4b22      	ldr	r3, [pc, #136]	; (8001d50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001cd0:	f7ff f9de 	bl	8001090 <HAL_PWREx_GetVoltageRange>
 8001cd4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001cd6:	4b1e      	ldr	r3, [pc, #120]	; (8001d50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cda:	4a1d      	ldr	r2, [pc, #116]	; (8001d50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ce0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ce8:	d10b      	bne.n	8001d02 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2b80      	cmp	r3, #128	; 0x80
 8001cee:	d919      	bls.n	8001d24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2ba0      	cmp	r3, #160	; 0xa0
 8001cf4:	d902      	bls.n	8001cfc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	613b      	str	r3, [r7, #16]
 8001cfa:	e013      	b.n	8001d24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	613b      	str	r3, [r7, #16]
 8001d00:	e010      	b.n	8001d24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2b80      	cmp	r3, #128	; 0x80
 8001d06:	d902      	bls.n	8001d0e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001d08:	2303      	movs	r3, #3
 8001d0a:	613b      	str	r3, [r7, #16]
 8001d0c:	e00a      	b.n	8001d24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2b80      	cmp	r3, #128	; 0x80
 8001d12:	d102      	bne.n	8001d1a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d14:	2302      	movs	r3, #2
 8001d16:	613b      	str	r3, [r7, #16]
 8001d18:	e004      	b.n	8001d24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2b70      	cmp	r3, #112	; 0x70
 8001d1e:	d101      	bne.n	8001d24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d20:	2301      	movs	r3, #1
 8001d22:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001d24:	4b0b      	ldr	r3, [pc, #44]	; (8001d54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f023 0207 	bic.w	r2, r3, #7
 8001d2c:	4909      	ldr	r1, [pc, #36]	; (8001d54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001d34:	4b07      	ldr	r3, [pc, #28]	; (8001d54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0307 	and.w	r3, r3, #7
 8001d3c:	693a      	ldr	r2, [r7, #16]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d001      	beq.n	8001d46 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e000      	b.n	8001d48 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001d46:	2300      	movs	r3, #0
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3718      	adds	r7, #24
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40021000 	.word	0x40021000
 8001d54:	40022000 	.word	0x40022000

08001d58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001d60:	2300      	movs	r3, #0
 8001d62:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d64:	2300      	movs	r3, #0
 8001d66:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d041      	beq.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d78:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001d7c:	d02a      	beq.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001d7e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001d82:	d824      	bhi.n	8001dce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001d84:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001d88:	d008      	beq.n	8001d9c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001d8a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001d8e:	d81e      	bhi.n	8001dce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d00a      	beq.n	8001daa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001d94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d98:	d010      	beq.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001d9a:	e018      	b.n	8001dce <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001d9c:	4b86      	ldr	r3, [pc, #536]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	4a85      	ldr	r2, [pc, #532]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001da2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001da6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001da8:	e015      	b.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	3304      	adds	r3, #4
 8001dae:	2100      	movs	r1, #0
 8001db0:	4618      	mov	r0, r3
 8001db2:	f000 fabb 	bl	800232c <RCCEx_PLLSAI1_Config>
 8001db6:	4603      	mov	r3, r0
 8001db8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001dba:	e00c      	b.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	3320      	adds	r3, #32
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f000 fba6 	bl	8002514 <RCCEx_PLLSAI2_Config>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001dcc:	e003      	b.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	74fb      	strb	r3, [r7, #19]
      break;
 8001dd2:	e000      	b.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001dd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001dd6:	7cfb      	ldrb	r3, [r7, #19]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d10b      	bne.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ddc:	4b76      	ldr	r3, [pc, #472]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001de2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001dea:	4973      	ldr	r1, [pc, #460]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001df2:	e001      	b.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001df4:	7cfb      	ldrb	r3, [r7, #19]
 8001df6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d041      	beq.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e08:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001e0c:	d02a      	beq.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001e0e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001e12:	d824      	bhi.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001e14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e18:	d008      	beq.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001e1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e1e:	d81e      	bhi.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d00a      	beq.n	8001e3a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001e24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e28:	d010      	beq.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001e2a:	e018      	b.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e2c:	4b62      	ldr	r3, [pc, #392]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	4a61      	ldr	r2, [pc, #388]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e36:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e38:	e015      	b.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	3304      	adds	r3, #4
 8001e3e:	2100      	movs	r1, #0
 8001e40:	4618      	mov	r0, r3
 8001e42:	f000 fa73 	bl	800232c <RCCEx_PLLSAI1_Config>
 8001e46:	4603      	mov	r3, r0
 8001e48:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e4a:	e00c      	b.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	3320      	adds	r3, #32
 8001e50:	2100      	movs	r1, #0
 8001e52:	4618      	mov	r0, r3
 8001e54:	f000 fb5e 	bl	8002514 <RCCEx_PLLSAI2_Config>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e5c:	e003      	b.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	74fb      	strb	r3, [r7, #19]
      break;
 8001e62:	e000      	b.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001e64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e66:	7cfb      	ldrb	r3, [r7, #19]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d10b      	bne.n	8001e84 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001e6c:	4b52      	ldr	r3, [pc, #328]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e72:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e7a:	494f      	ldr	r1, [pc, #316]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001e82:	e001      	b.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e84:	7cfb      	ldrb	r3, [r7, #19]
 8001e86:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	f000 80a0 	beq.w	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e96:	2300      	movs	r3, #0
 8001e98:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e9a:	4b47      	ldr	r3, [pc, #284]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e000      	b.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001eaa:	2300      	movs	r3, #0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d00d      	beq.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eb0:	4b41      	ldr	r3, [pc, #260]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb4:	4a40      	ldr	r2, [pc, #256]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eba:	6593      	str	r3, [r2, #88]	; 0x58
 8001ebc:	4b3e      	ldr	r3, [pc, #248]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec4:	60bb      	str	r3, [r7, #8]
 8001ec6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ecc:	4b3b      	ldr	r3, [pc, #236]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a3a      	ldr	r2, [pc, #232]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001ed2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ed6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ed8:	f7fe fd3e 	bl	8000958 <HAL_GetTick>
 8001edc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001ede:	e009      	b.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ee0:	f7fe fd3a 	bl	8000958 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d902      	bls.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	74fb      	strb	r3, [r7, #19]
        break;
 8001ef2:	e005      	b.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001ef4:	4b31      	ldr	r3, [pc, #196]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d0ef      	beq.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001f00:	7cfb      	ldrb	r3, [r7, #19]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d15c      	bne.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f06:	4b2c      	ldr	r3, [pc, #176]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f10:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d01f      	beq.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f1e:	697a      	ldr	r2, [r7, #20]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d019      	beq.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f24:	4b24      	ldr	r3, [pc, #144]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f2e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f30:	4b21      	ldr	r3, [pc, #132]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f36:	4a20      	ldr	r2, [pc, #128]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f40:	4b1d      	ldr	r3, [pc, #116]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f46:	4a1c      	ldr	r2, [pc, #112]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f50:	4a19      	ldr	r2, [pc, #100]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d016      	beq.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f62:	f7fe fcf9 	bl	8000958 <HAL_GetTick>
 8001f66:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f68:	e00b      	b.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f6a:	f7fe fcf5 	bl	8000958 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d902      	bls.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	74fb      	strb	r3, [r7, #19]
            break;
 8001f80:	e006      	b.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f82:	4b0d      	ldr	r3, [pc, #52]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f88:	f003 0302 	and.w	r3, r3, #2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d0ec      	beq.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001f90:	7cfb      	ldrb	r3, [r7, #19]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d10c      	bne.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f96:	4b08      	ldr	r3, [pc, #32]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fa6:	4904      	ldr	r1, [pc, #16]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001fae:	e009      	b.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001fb0:	7cfb      	ldrb	r3, [r7, #19]
 8001fb2:	74bb      	strb	r3, [r7, #18]
 8001fb4:	e006      	b.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8001fb6:	bf00      	nop
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fc0:	7cfb      	ldrb	r3, [r7, #19]
 8001fc2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fc4:	7c7b      	ldrb	r3, [r7, #17]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d105      	bne.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fca:	4b9e      	ldr	r3, [pc, #632]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fce:	4a9d      	ldr	r2, [pc, #628]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fd4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d00a      	beq.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001fe2:	4b98      	ldr	r3, [pc, #608]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fe8:	f023 0203 	bic.w	r2, r3, #3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ff0:	4994      	ldr	r1, [pc, #592]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d00a      	beq.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002004:	4b8f      	ldr	r3, [pc, #572]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800200a:	f023 020c 	bic.w	r2, r3, #12
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002012:	498c      	ldr	r1, [pc, #560]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002014:	4313      	orrs	r3, r2
 8002016:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0304 	and.w	r3, r3, #4
 8002022:	2b00      	cmp	r3, #0
 8002024:	d00a      	beq.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002026:	4b87      	ldr	r3, [pc, #540]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800202c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002034:	4983      	ldr	r1, [pc, #524]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002036:	4313      	orrs	r3, r2
 8002038:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0308 	and.w	r3, r3, #8
 8002044:	2b00      	cmp	r3, #0
 8002046:	d00a      	beq.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002048:	4b7e      	ldr	r3, [pc, #504]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800204a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800204e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002056:	497b      	ldr	r1, [pc, #492]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002058:	4313      	orrs	r3, r2
 800205a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0310 	and.w	r3, r3, #16
 8002066:	2b00      	cmp	r3, #0
 8002068:	d00a      	beq.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800206a:	4b76      	ldr	r3, [pc, #472]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800206c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002070:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002078:	4972      	ldr	r1, [pc, #456]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800207a:	4313      	orrs	r3, r2
 800207c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0320 	and.w	r3, r3, #32
 8002088:	2b00      	cmp	r3, #0
 800208a:	d00a      	beq.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800208c:	4b6d      	ldr	r3, [pc, #436]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800208e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002092:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800209a:	496a      	ldr	r1, [pc, #424]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800209c:	4313      	orrs	r3, r2
 800209e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d00a      	beq.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80020ae:	4b65      	ldr	r3, [pc, #404]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020bc:	4961      	ldr	r1, [pc, #388]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d00a      	beq.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80020d0:	4b5c      	ldr	r3, [pc, #368]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020de:	4959      	ldr	r1, [pc, #356]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020e0:	4313      	orrs	r3, r2
 80020e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d00a      	beq.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020f2:	4b54      	ldr	r3, [pc, #336]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020f8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002100:	4950      	ldr	r1, [pc, #320]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002102:	4313      	orrs	r3, r2
 8002104:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002110:	2b00      	cmp	r3, #0
 8002112:	d00a      	beq.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002114:	4b4b      	ldr	r3, [pc, #300]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800211a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002122:	4948      	ldr	r1, [pc, #288]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002124:	4313      	orrs	r3, r2
 8002126:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002132:	2b00      	cmp	r3, #0
 8002134:	d00a      	beq.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002136:	4b43      	ldr	r3, [pc, #268]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800213c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002144:	493f      	ldr	r1, [pc, #252]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002146:	4313      	orrs	r3, r2
 8002148:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d028      	beq.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002158:	4b3a      	ldr	r3, [pc, #232]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800215a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800215e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002166:	4937      	ldr	r1, [pc, #220]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002168:	4313      	orrs	r3, r2
 800216a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002172:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002176:	d106      	bne.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002178:	4b32      	ldr	r3, [pc, #200]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	4a31      	ldr	r2, [pc, #196]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800217e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002182:	60d3      	str	r3, [r2, #12]
 8002184:	e011      	b.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800218a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800218e:	d10c      	bne.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	3304      	adds	r3, #4
 8002194:	2101      	movs	r1, #1
 8002196:	4618      	mov	r0, r3
 8002198:	f000 f8c8 	bl	800232c <RCCEx_PLLSAI1_Config>
 800219c:	4603      	mov	r3, r0
 800219e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80021a0:	7cfb      	ldrb	r3, [r7, #19]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80021a6:	7cfb      	ldrb	r3, [r7, #19]
 80021a8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d028      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80021b6:	4b23      	ldr	r3, [pc, #140]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021bc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c4:	491f      	ldr	r1, [pc, #124]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021d4:	d106      	bne.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021d6:	4b1b      	ldr	r3, [pc, #108]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	4a1a      	ldr	r2, [pc, #104]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021e0:	60d3      	str	r3, [r2, #12]
 80021e2:	e011      	b.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80021ec:	d10c      	bne.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	3304      	adds	r3, #4
 80021f2:	2101      	movs	r1, #1
 80021f4:	4618      	mov	r0, r3
 80021f6:	f000 f899 	bl	800232c <RCCEx_PLLSAI1_Config>
 80021fa:	4603      	mov	r3, r0
 80021fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021fe:	7cfb      	ldrb	r3, [r7, #19]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002204:	7cfb      	ldrb	r3, [r7, #19]
 8002206:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d02b      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002214:	4b0b      	ldr	r3, [pc, #44]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800221a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002222:	4908      	ldr	r1, [pc, #32]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002224:	4313      	orrs	r3, r2
 8002226:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800222e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002232:	d109      	bne.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002234:	4b03      	ldr	r3, [pc, #12]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	4a02      	ldr	r2, [pc, #8]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800223a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800223e:	60d3      	str	r3, [r2, #12]
 8002240:	e014      	b.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002242:	bf00      	nop
 8002244:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800224c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002250:	d10c      	bne.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	3304      	adds	r3, #4
 8002256:	2101      	movs	r1, #1
 8002258:	4618      	mov	r0, r3
 800225a:	f000 f867 	bl	800232c <RCCEx_PLLSAI1_Config>
 800225e:	4603      	mov	r3, r0
 8002260:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002262:	7cfb      	ldrb	r3, [r7, #19]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002268:	7cfb      	ldrb	r3, [r7, #19]
 800226a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d02f      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002278:	4b2b      	ldr	r3, [pc, #172]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800227a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800227e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002286:	4928      	ldr	r1, [pc, #160]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002288:	4313      	orrs	r3, r2
 800228a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002292:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002296:	d10d      	bne.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3304      	adds	r3, #4
 800229c:	2102      	movs	r1, #2
 800229e:	4618      	mov	r0, r3
 80022a0:	f000 f844 	bl	800232c <RCCEx_PLLSAI1_Config>
 80022a4:	4603      	mov	r3, r0
 80022a6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022a8:	7cfb      	ldrb	r3, [r7, #19]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d014      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80022ae:	7cfb      	ldrb	r3, [r7, #19]
 80022b0:	74bb      	strb	r3, [r7, #18]
 80022b2:	e011      	b.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022bc:	d10c      	bne.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	3320      	adds	r3, #32
 80022c2:	2102      	movs	r1, #2
 80022c4:	4618      	mov	r0, r3
 80022c6:	f000 f925 	bl	8002514 <RCCEx_PLLSAI2_Config>
 80022ca:	4603      	mov	r3, r0
 80022cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022ce:	7cfb      	ldrb	r3, [r7, #19]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80022d4:	7cfb      	ldrb	r3, [r7, #19]
 80022d6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d00a      	beq.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80022e4:	4b10      	ldr	r3, [pc, #64]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ea:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022f2:	490d      	ldr	r1, [pc, #52]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d00b      	beq.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002306:	4b08      	ldr	r3, [pc, #32]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800230c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002316:	4904      	ldr	r1, [pc, #16]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002318:	4313      	orrs	r3, r2
 800231a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800231e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002320:	4618      	mov	r0, r3
 8002322:	3718      	adds	r7, #24
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	40021000 	.word	0x40021000

0800232c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002336:	2300      	movs	r3, #0
 8002338:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800233a:	4b75      	ldr	r3, [pc, #468]	; (8002510 <RCCEx_PLLSAI1_Config+0x1e4>)
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	f003 0303 	and.w	r3, r3, #3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d018      	beq.n	8002378 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002346:	4b72      	ldr	r3, [pc, #456]	; (8002510 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	f003 0203 	and.w	r2, r3, #3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	429a      	cmp	r2, r3
 8002354:	d10d      	bne.n	8002372 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
       ||
 800235a:	2b00      	cmp	r3, #0
 800235c:	d009      	beq.n	8002372 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800235e:	4b6c      	ldr	r3, [pc, #432]	; (8002510 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	091b      	lsrs	r3, r3, #4
 8002364:	f003 0307 	and.w	r3, r3, #7
 8002368:	1c5a      	adds	r2, r3, #1
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
       ||
 800236e:	429a      	cmp	r2, r3
 8002370:	d047      	beq.n	8002402 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	73fb      	strb	r3, [r7, #15]
 8002376:	e044      	b.n	8002402 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2b03      	cmp	r3, #3
 800237e:	d018      	beq.n	80023b2 <RCCEx_PLLSAI1_Config+0x86>
 8002380:	2b03      	cmp	r3, #3
 8002382:	d825      	bhi.n	80023d0 <RCCEx_PLLSAI1_Config+0xa4>
 8002384:	2b01      	cmp	r3, #1
 8002386:	d002      	beq.n	800238e <RCCEx_PLLSAI1_Config+0x62>
 8002388:	2b02      	cmp	r3, #2
 800238a:	d009      	beq.n	80023a0 <RCCEx_PLLSAI1_Config+0x74>
 800238c:	e020      	b.n	80023d0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800238e:	4b60      	ldr	r3, [pc, #384]	; (8002510 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d11d      	bne.n	80023d6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800239e:	e01a      	b.n	80023d6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80023a0:	4b5b      	ldr	r3, [pc, #364]	; (8002510 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d116      	bne.n	80023da <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023b0:	e013      	b.n	80023da <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80023b2:	4b57      	ldr	r3, [pc, #348]	; (8002510 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d10f      	bne.n	80023de <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80023be:	4b54      	ldr	r3, [pc, #336]	; (8002510 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d109      	bne.n	80023de <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80023ce:	e006      	b.n	80023de <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	73fb      	strb	r3, [r7, #15]
      break;
 80023d4:	e004      	b.n	80023e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80023d6:	bf00      	nop
 80023d8:	e002      	b.n	80023e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80023da:	bf00      	nop
 80023dc:	e000      	b.n	80023e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80023de:	bf00      	nop
    }

    if(status == HAL_OK)
 80023e0:	7bfb      	ldrb	r3, [r7, #15]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d10d      	bne.n	8002402 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80023e6:	4b4a      	ldr	r3, [pc, #296]	; (8002510 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6819      	ldr	r1, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	3b01      	subs	r3, #1
 80023f8:	011b      	lsls	r3, r3, #4
 80023fa:	430b      	orrs	r3, r1
 80023fc:	4944      	ldr	r1, [pc, #272]	; (8002510 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002402:	7bfb      	ldrb	r3, [r7, #15]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d17d      	bne.n	8002504 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002408:	4b41      	ldr	r3, [pc, #260]	; (8002510 <RCCEx_PLLSAI1_Config+0x1e4>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a40      	ldr	r2, [pc, #256]	; (8002510 <RCCEx_PLLSAI1_Config+0x1e4>)
 800240e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002412:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002414:	f7fe faa0 	bl	8000958 <HAL_GetTick>
 8002418:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800241a:	e009      	b.n	8002430 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800241c:	f7fe fa9c 	bl	8000958 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d902      	bls.n	8002430 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	73fb      	strb	r3, [r7, #15]
        break;
 800242e:	e005      	b.n	800243c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002430:	4b37      	ldr	r3, [pc, #220]	; (8002510 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d1ef      	bne.n	800241c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800243c:	7bfb      	ldrb	r3, [r7, #15]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d160      	bne.n	8002504 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d111      	bne.n	800246c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002448:	4b31      	ldr	r3, [pc, #196]	; (8002510 <RCCEx_PLLSAI1_Config+0x1e4>)
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002450:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	6892      	ldr	r2, [r2, #8]
 8002458:	0211      	lsls	r1, r2, #8
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	68d2      	ldr	r2, [r2, #12]
 800245e:	0912      	lsrs	r2, r2, #4
 8002460:	0452      	lsls	r2, r2, #17
 8002462:	430a      	orrs	r2, r1
 8002464:	492a      	ldr	r1, [pc, #168]	; (8002510 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002466:	4313      	orrs	r3, r2
 8002468:	610b      	str	r3, [r1, #16]
 800246a:	e027      	b.n	80024bc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d112      	bne.n	8002498 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002472:	4b27      	ldr	r3, [pc, #156]	; (8002510 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800247a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	6892      	ldr	r2, [r2, #8]
 8002482:	0211      	lsls	r1, r2, #8
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	6912      	ldr	r2, [r2, #16]
 8002488:	0852      	lsrs	r2, r2, #1
 800248a:	3a01      	subs	r2, #1
 800248c:	0552      	lsls	r2, r2, #21
 800248e:	430a      	orrs	r2, r1
 8002490:	491f      	ldr	r1, [pc, #124]	; (8002510 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002492:	4313      	orrs	r3, r2
 8002494:	610b      	str	r3, [r1, #16]
 8002496:	e011      	b.n	80024bc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002498:	4b1d      	ldr	r3, [pc, #116]	; (8002510 <RCCEx_PLLSAI1_Config+0x1e4>)
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80024a0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	6892      	ldr	r2, [r2, #8]
 80024a8:	0211      	lsls	r1, r2, #8
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	6952      	ldr	r2, [r2, #20]
 80024ae:	0852      	lsrs	r2, r2, #1
 80024b0:	3a01      	subs	r2, #1
 80024b2:	0652      	lsls	r2, r2, #25
 80024b4:	430a      	orrs	r2, r1
 80024b6:	4916      	ldr	r1, [pc, #88]	; (8002510 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80024bc:	4b14      	ldr	r3, [pc, #80]	; (8002510 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a13      	ldr	r2, [pc, #76]	; (8002510 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80024c6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c8:	f7fe fa46 	bl	8000958 <HAL_GetTick>
 80024cc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80024ce:	e009      	b.n	80024e4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80024d0:	f7fe fa42 	bl	8000958 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d902      	bls.n	80024e4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	73fb      	strb	r3, [r7, #15]
          break;
 80024e2:	e005      	b.n	80024f0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80024e4:	4b0a      	ldr	r3, [pc, #40]	; (8002510 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d0ef      	beq.n	80024d0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80024f0:	7bfb      	ldrb	r3, [r7, #15]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d106      	bne.n	8002504 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80024f6:	4b06      	ldr	r3, [pc, #24]	; (8002510 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024f8:	691a      	ldr	r2, [r3, #16]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	699b      	ldr	r3, [r3, #24]
 80024fe:	4904      	ldr	r1, [pc, #16]	; (8002510 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002500:	4313      	orrs	r3, r2
 8002502:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002504:	7bfb      	ldrb	r3, [r7, #15]
}
 8002506:	4618      	mov	r0, r3
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	40021000 	.word	0x40021000

08002514 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800251e:	2300      	movs	r3, #0
 8002520:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002522:	4b6a      	ldr	r3, [pc, #424]	; (80026cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	f003 0303 	and.w	r3, r3, #3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d018      	beq.n	8002560 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800252e:	4b67      	ldr	r3, [pc, #412]	; (80026cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	f003 0203 	and.w	r2, r3, #3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	429a      	cmp	r2, r3
 800253c:	d10d      	bne.n	800255a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
       ||
 8002542:	2b00      	cmp	r3, #0
 8002544:	d009      	beq.n	800255a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002546:	4b61      	ldr	r3, [pc, #388]	; (80026cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	091b      	lsrs	r3, r3, #4
 800254c:	f003 0307 	and.w	r3, r3, #7
 8002550:	1c5a      	adds	r2, r3, #1
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
       ||
 8002556:	429a      	cmp	r2, r3
 8002558:	d047      	beq.n	80025ea <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	73fb      	strb	r3, [r7, #15]
 800255e:	e044      	b.n	80025ea <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2b03      	cmp	r3, #3
 8002566:	d018      	beq.n	800259a <RCCEx_PLLSAI2_Config+0x86>
 8002568:	2b03      	cmp	r3, #3
 800256a:	d825      	bhi.n	80025b8 <RCCEx_PLLSAI2_Config+0xa4>
 800256c:	2b01      	cmp	r3, #1
 800256e:	d002      	beq.n	8002576 <RCCEx_PLLSAI2_Config+0x62>
 8002570:	2b02      	cmp	r3, #2
 8002572:	d009      	beq.n	8002588 <RCCEx_PLLSAI2_Config+0x74>
 8002574:	e020      	b.n	80025b8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002576:	4b55      	ldr	r3, [pc, #340]	; (80026cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d11d      	bne.n	80025be <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002586:	e01a      	b.n	80025be <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002588:	4b50      	ldr	r3, [pc, #320]	; (80026cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002590:	2b00      	cmp	r3, #0
 8002592:	d116      	bne.n	80025c2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002598:	e013      	b.n	80025c2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800259a:	4b4c      	ldr	r3, [pc, #304]	; (80026cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d10f      	bne.n	80025c6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80025a6:	4b49      	ldr	r3, [pc, #292]	; (80026cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d109      	bne.n	80025c6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80025b6:	e006      	b.n	80025c6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	73fb      	strb	r3, [r7, #15]
      break;
 80025bc:	e004      	b.n	80025c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80025be:	bf00      	nop
 80025c0:	e002      	b.n	80025c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80025c2:	bf00      	nop
 80025c4:	e000      	b.n	80025c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80025c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80025c8:	7bfb      	ldrb	r3, [r7, #15]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d10d      	bne.n	80025ea <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80025ce:	4b3f      	ldr	r3, [pc, #252]	; (80026cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6819      	ldr	r1, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	3b01      	subs	r3, #1
 80025e0:	011b      	lsls	r3, r3, #4
 80025e2:	430b      	orrs	r3, r1
 80025e4:	4939      	ldr	r1, [pc, #228]	; (80026cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80025ea:	7bfb      	ldrb	r3, [r7, #15]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d167      	bne.n	80026c0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80025f0:	4b36      	ldr	r3, [pc, #216]	; (80026cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a35      	ldr	r2, [pc, #212]	; (80026cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80025f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025fc:	f7fe f9ac 	bl	8000958 <HAL_GetTick>
 8002600:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002602:	e009      	b.n	8002618 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002604:	f7fe f9a8 	bl	8000958 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b02      	cmp	r3, #2
 8002610:	d902      	bls.n	8002618 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	73fb      	strb	r3, [r7, #15]
        break;
 8002616:	e005      	b.n	8002624 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002618:	4b2c      	ldr	r3, [pc, #176]	; (80026cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1ef      	bne.n	8002604 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002624:	7bfb      	ldrb	r3, [r7, #15]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d14a      	bne.n	80026c0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d111      	bne.n	8002654 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002630:	4b26      	ldr	r3, [pc, #152]	; (80026cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002632:	695b      	ldr	r3, [r3, #20]
 8002634:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002638:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	6892      	ldr	r2, [r2, #8]
 8002640:	0211      	lsls	r1, r2, #8
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	68d2      	ldr	r2, [r2, #12]
 8002646:	0912      	lsrs	r2, r2, #4
 8002648:	0452      	lsls	r2, r2, #17
 800264a:	430a      	orrs	r2, r1
 800264c:	491f      	ldr	r1, [pc, #124]	; (80026cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800264e:	4313      	orrs	r3, r2
 8002650:	614b      	str	r3, [r1, #20]
 8002652:	e011      	b.n	8002678 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002654:	4b1d      	ldr	r3, [pc, #116]	; (80026cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002656:	695b      	ldr	r3, [r3, #20]
 8002658:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800265c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	6892      	ldr	r2, [r2, #8]
 8002664:	0211      	lsls	r1, r2, #8
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	6912      	ldr	r2, [r2, #16]
 800266a:	0852      	lsrs	r2, r2, #1
 800266c:	3a01      	subs	r2, #1
 800266e:	0652      	lsls	r2, r2, #25
 8002670:	430a      	orrs	r2, r1
 8002672:	4916      	ldr	r1, [pc, #88]	; (80026cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002674:	4313      	orrs	r3, r2
 8002676:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002678:	4b14      	ldr	r3, [pc, #80]	; (80026cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a13      	ldr	r2, [pc, #76]	; (80026cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800267e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002682:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002684:	f7fe f968 	bl	8000958 <HAL_GetTick>
 8002688:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800268a:	e009      	b.n	80026a0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800268c:	f7fe f964 	bl	8000958 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d902      	bls.n	80026a0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	73fb      	strb	r3, [r7, #15]
          break;
 800269e:	e005      	b.n	80026ac <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80026a0:	4b0a      	ldr	r3, [pc, #40]	; (80026cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d0ef      	beq.n	800268c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80026ac:	7bfb      	ldrb	r3, [r7, #15]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d106      	bne.n	80026c0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80026b2:	4b06      	ldr	r3, [pc, #24]	; (80026cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80026b4:	695a      	ldr	r2, [r3, #20]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	695b      	ldr	r3, [r3, #20]
 80026ba:	4904      	ldr	r1, [pc, #16]	; (80026cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80026c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3710      	adds	r7, #16
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	40021000 	.word	0x40021000

080026d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e040      	b.n	8002764 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d106      	bne.n	80026f8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f7fd fff4 	bl	80006e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2224      	movs	r2, #36	; 0x24
 80026fc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f022 0201 	bic.w	r2, r2, #1
 800270c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 fb84 	bl	8002e1c <UART_SetConfig>
 8002714:	4603      	mov	r3, r0
 8002716:	2b01      	cmp	r3, #1
 8002718:	d101      	bne.n	800271e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e022      	b.n	8002764 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002722:	2b00      	cmp	r3, #0
 8002724:	d002      	beq.n	800272c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 fe30 	bl	800338c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	685a      	ldr	r2, [r3, #4]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800273a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	689a      	ldr	r2, [r3, #8]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800274a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f042 0201 	orr.w	r2, r2, #1
 800275a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f000 feb7 	bl	80034d0 <UART_CheckIdleState>
 8002762:	4603      	mov	r3, r0
}
 8002764:	4618      	mov	r0, r3
 8002766:	3708      	adds	r7, #8
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b08a      	sub	sp, #40	; 0x28
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	4613      	mov	r3, r2
 8002778:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800277e:	2b20      	cmp	r3, #32
 8002780:	d142      	bne.n	8002808 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d002      	beq.n	800278e <HAL_UART_Receive_IT+0x22>
 8002788:	88fb      	ldrh	r3, [r7, #6]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d101      	bne.n	8002792 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e03b      	b.n	800280a <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002798:	2b01      	cmp	r3, #1
 800279a:	d101      	bne.n	80027a0 <HAL_UART_Receive_IT+0x34>
 800279c:	2302      	movs	r3, #2
 800279e:	e034      	b.n	800280a <HAL_UART_Receive_IT+0x9e>
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2200      	movs	r2, #0
 80027ac:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a18      	ldr	r2, [pc, #96]	; (8002814 <HAL_UART_Receive_IT+0xa8>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d01f      	beq.n	80027f8 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d018      	beq.n	80027f8 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	e853 3f00 	ldrex	r3, [r3]
 80027d2:	613b      	str	r3, [r7, #16]
   return(result);
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80027da:	627b      	str	r3, [r7, #36]	; 0x24
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	461a      	mov	r2, r3
 80027e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e4:	623b      	str	r3, [r7, #32]
 80027e6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027e8:	69f9      	ldr	r1, [r7, #28]
 80027ea:	6a3a      	ldr	r2, [r7, #32]
 80027ec:	e841 2300 	strex	r3, r2, [r1]
 80027f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d1e6      	bne.n	80027c6 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80027f8:	88fb      	ldrh	r3, [r7, #6]
 80027fa:	461a      	mov	r2, r3
 80027fc:	68b9      	ldr	r1, [r7, #8]
 80027fe:	68f8      	ldr	r0, [r7, #12]
 8002800:	f000 ff74 	bl	80036ec <UART_Start_Receive_IT>
 8002804:	4603      	mov	r3, r0
 8002806:	e000      	b.n	800280a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002808:	2302      	movs	r3, #2
  }
}
 800280a:	4618      	mov	r0, r3
 800280c:	3728      	adds	r7, #40	; 0x28
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	40008000 	.word	0x40008000

08002818 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b0ba      	sub	sp, #232	; 0xe8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	69db      	ldr	r3, [r3, #28]
 8002826:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800283e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002842:	f640 030f 	movw	r3, #2063	; 0x80f
 8002846:	4013      	ands	r3, r2
 8002848:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800284c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002850:	2b00      	cmp	r3, #0
 8002852:	d115      	bne.n	8002880 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002854:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002858:	f003 0320 	and.w	r3, r3, #32
 800285c:	2b00      	cmp	r3, #0
 800285e:	d00f      	beq.n	8002880 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002860:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002864:	f003 0320 	and.w	r3, r3, #32
 8002868:	2b00      	cmp	r3, #0
 800286a:	d009      	beq.n	8002880 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002870:	2b00      	cmp	r3, #0
 8002872:	f000 82a6 	beq.w	8002dc2 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	4798      	blx	r3
      }
      return;
 800287e:	e2a0      	b.n	8002dc2 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002880:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002884:	2b00      	cmp	r3, #0
 8002886:	f000 8117 	beq.w	8002ab8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800288a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b00      	cmp	r3, #0
 8002894:	d106      	bne.n	80028a4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002896:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800289a:	4b85      	ldr	r3, [pc, #532]	; (8002ab0 <HAL_UART_IRQHandler+0x298>)
 800289c:	4013      	ands	r3, r2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	f000 810a 	beq.w	8002ab8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80028a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028a8:	f003 0301 	and.w	r3, r3, #1
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d011      	beq.n	80028d4 <HAL_UART_IRQHandler+0xbc>
 80028b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d00b      	beq.n	80028d4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2201      	movs	r2, #1
 80028c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028ca:	f043 0201 	orr.w	r2, r3, #1
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80028d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d011      	beq.n	8002904 <HAL_UART_IRQHandler+0xec>
 80028e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028e4:	f003 0301 	and.w	r3, r3, #1
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d00b      	beq.n	8002904 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2202      	movs	r2, #2
 80028f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028fa:	f043 0204 	orr.w	r2, r3, #4
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002904:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002908:	f003 0304 	and.w	r3, r3, #4
 800290c:	2b00      	cmp	r3, #0
 800290e:	d011      	beq.n	8002934 <HAL_UART_IRQHandler+0x11c>
 8002910:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	2b00      	cmp	r3, #0
 800291a:	d00b      	beq.n	8002934 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2204      	movs	r2, #4
 8002922:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800292a:	f043 0202 	orr.w	r2, r3, #2
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002938:	f003 0308 	and.w	r3, r3, #8
 800293c:	2b00      	cmp	r3, #0
 800293e:	d017      	beq.n	8002970 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002940:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002944:	f003 0320 	and.w	r3, r3, #32
 8002948:	2b00      	cmp	r3, #0
 800294a:	d105      	bne.n	8002958 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800294c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002950:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002954:	2b00      	cmp	r3, #0
 8002956:	d00b      	beq.n	8002970 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2208      	movs	r2, #8
 800295e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002966:	f043 0208 	orr.w	r2, r3, #8
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002970:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002974:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002978:	2b00      	cmp	r3, #0
 800297a:	d012      	beq.n	80029a2 <HAL_UART_IRQHandler+0x18a>
 800297c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002980:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00c      	beq.n	80029a2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002990:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002998:	f043 0220 	orr.w	r2, r3, #32
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f000 820c 	beq.w	8002dc6 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80029ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029b2:	f003 0320 	and.w	r3, r3, #32
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00d      	beq.n	80029d6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80029ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029be:	f003 0320 	and.w	r3, r3, #32
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d007      	beq.n	80029d6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d003      	beq.n	80029d6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ea:	2b40      	cmp	r3, #64	; 0x40
 80029ec:	d005      	beq.n	80029fa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80029ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80029f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d04f      	beq.n	8002a9a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 ff40 	bl	8003880 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a0a:	2b40      	cmp	r3, #64	; 0x40
 8002a0c:	d141      	bne.n	8002a92 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	3308      	adds	r3, #8
 8002a14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a18:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a1c:	e853 3f00 	ldrex	r3, [r3]
 8002a20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002a24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	3308      	adds	r3, #8
 8002a36:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002a3a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002a3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a42:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002a46:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002a4a:	e841 2300 	strex	r3, r2, [r1]
 8002a4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002a52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1d9      	bne.n	8002a0e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d013      	beq.n	8002a8a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a66:	4a13      	ldr	r2, [pc, #76]	; (8002ab4 <HAL_UART_IRQHandler+0x29c>)
 8002a68:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7fe f8f1 	bl	8000c56 <HAL_DMA_Abort_IT>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d017      	beq.n	8002aaa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8002a84:	4610      	mov	r0, r2
 8002a86:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a88:	e00f      	b.n	8002aaa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 f9b0 	bl	8002df0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a90:	e00b      	b.n	8002aaa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 f9ac 	bl	8002df0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a98:	e007      	b.n	8002aaa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 f9a8 	bl	8002df0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8002aa8:	e18d      	b.n	8002dc6 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002aaa:	bf00      	nop
    return;
 8002aac:	e18b      	b.n	8002dc6 <HAL_UART_IRQHandler+0x5ae>
 8002aae:	bf00      	nop
 8002ab0:	04000120 	.word	0x04000120
 8002ab4:	08003947 	.word	0x08003947

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	f040 8146 	bne.w	8002d4e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ac6:	f003 0310 	and.w	r3, r3, #16
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f000 813f 	beq.w	8002d4e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002ad0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ad4:	f003 0310 	and.w	r3, r3, #16
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f000 8138 	beq.w	8002d4e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2210      	movs	r2, #16
 8002ae4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002af0:	2b40      	cmp	r3, #64	; 0x40
 8002af2:	f040 80b4 	bne.w	8002c5e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002b02:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	f000 815f 	beq.w	8002dca <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002b12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002b16:	429a      	cmp	r2, r3
 8002b18:	f080 8157 	bcs.w	8002dca <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002b22:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0320 	and.w	r3, r3, #32
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f040 8085 	bne.w	8002c42 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b40:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b44:	e853 3f00 	ldrex	r3, [r3]
 8002b48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002b4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002b62:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002b66:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b6a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002b6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002b72:	e841 2300 	strex	r3, r2, [r1]
 8002b76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002b7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1da      	bne.n	8002b38 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	3308      	adds	r3, #8
 8002b88:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b8c:	e853 3f00 	ldrex	r3, [r3]
 8002b90:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002b92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b94:	f023 0301 	bic.w	r3, r3, #1
 8002b98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	3308      	adds	r3, #8
 8002ba2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002ba6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002baa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002bae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002bb2:	e841 2300 	strex	r3, r2, [r1]
 8002bb6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002bb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1e1      	bne.n	8002b82 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	3308      	adds	r3, #8
 8002bc4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bc8:	e853 3f00 	ldrex	r3, [r3]
 8002bcc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002bce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bd4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	3308      	adds	r3, #8
 8002bde:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002be2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002be4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002be6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002be8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002bea:	e841 2300 	strex	r3, r2, [r1]
 8002bee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002bf0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1e3      	bne.n	8002bbe <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2220      	movs	r2, #32
 8002bfa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c0a:	e853 3f00 	ldrex	r3, [r3]
 8002c0e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002c10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c12:	f023 0310 	bic.w	r3, r3, #16
 8002c16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	461a      	mov	r2, r3
 8002c20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c24:	65bb      	str	r3, [r7, #88]	; 0x58
 8002c26:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c28:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002c2a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c2c:	e841 2300 	strex	r3, r2, [r1]
 8002c30:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002c32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d1e4      	bne.n	8002c02 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7fd ffcc 	bl	8000bda <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	4619      	mov	r1, r3
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 f8d4 	bl	8002e04 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c5c:	e0b5      	b.n	8002dca <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	f000 80a7 	beq.w	8002dce <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8002c80:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f000 80a2 	beq.w	8002dce <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c92:	e853 3f00 	ldrex	r3, [r3]
 8002c96:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c9a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002c9e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002cac:	647b      	str	r3, [r7, #68]	; 0x44
 8002cae:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cb0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002cb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002cb4:	e841 2300 	strex	r3, r2, [r1]
 8002cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002cba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d1e4      	bne.n	8002c8a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	3308      	adds	r3, #8
 8002cc6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cca:	e853 3f00 	ldrex	r3, [r3]
 8002cce:	623b      	str	r3, [r7, #32]
   return(result);
 8002cd0:	6a3b      	ldr	r3, [r7, #32]
 8002cd2:	f023 0301 	bic.w	r3, r3, #1
 8002cd6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	3308      	adds	r3, #8
 8002ce0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002ce4:	633a      	str	r2, [r7, #48]	; 0x30
 8002ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ce8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002cea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cec:	e841 2300 	strex	r3, r2, [r1]
 8002cf0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d1e3      	bne.n	8002cc0 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2220      	movs	r2, #32
 8002cfc:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	e853 3f00 	ldrex	r3, [r3]
 8002d16:	60fb      	str	r3, [r7, #12]
   return(result);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f023 0310 	bic.w	r3, r3, #16
 8002d1e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	461a      	mov	r2, r3
 8002d28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d2c:	61fb      	str	r3, [r7, #28]
 8002d2e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d30:	69b9      	ldr	r1, [r7, #24]
 8002d32:	69fa      	ldr	r2, [r7, #28]
 8002d34:	e841 2300 	strex	r3, r2, [r1]
 8002d38:	617b      	str	r3, [r7, #20]
   return(result);
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d1e4      	bne.n	8002d0a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002d40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002d44:	4619      	mov	r1, r3
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 f85c 	bl	8002e04 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002d4c:	e03f      	b.n	8002dce <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00e      	beq.n	8002d78 <HAL_UART_IRQHandler+0x560>
 8002d5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d008      	beq.n	8002d78 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002d6e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f000 ff88 	bl	8003c86 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d76:	e02d      	b.n	8002dd4 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002d78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d00e      	beq.n	8002da2 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002d84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d008      	beq.n	8002da2 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d01c      	beq.n	8002dd2 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	4798      	blx	r3
    }
    return;
 8002da0:	e017      	b.n	8002dd2 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d012      	beq.n	8002dd4 <HAL_UART_IRQHandler+0x5bc>
 8002dae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d00c      	beq.n	8002dd4 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 fdd9 	bl	8003972 <UART_EndTransmit_IT>
    return;
 8002dc0:	e008      	b.n	8002dd4 <HAL_UART_IRQHandler+0x5bc>
      return;
 8002dc2:	bf00      	nop
 8002dc4:	e006      	b.n	8002dd4 <HAL_UART_IRQHandler+0x5bc>
    return;
 8002dc6:	bf00      	nop
 8002dc8:	e004      	b.n	8002dd4 <HAL_UART_IRQHandler+0x5bc>
      return;
 8002dca:	bf00      	nop
 8002dcc:	e002      	b.n	8002dd4 <HAL_UART_IRQHandler+0x5bc>
      return;
 8002dce:	bf00      	nop
 8002dd0:	e000      	b.n	8002dd4 <HAL_UART_IRQHandler+0x5bc>
    return;
 8002dd2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8002dd4:	37e8      	adds	r7, #232	; 0xe8
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop

08002ddc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002de4:	bf00      	nop
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002df8:	bf00      	nop
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e20:	b08a      	sub	sp, #40	; 0x28
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e26:	2300      	movs	r3, #0
 8002e28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	689a      	ldr	r2, [r3, #8]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	431a      	orrs	r2, r3
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	69db      	ldr	r3, [r3, #28]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	4ba4      	ldr	r3, [pc, #656]	; (80030dc <UART_SetConfig+0x2c0>)
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	68fa      	ldr	r2, [r7, #12]
 8002e50:	6812      	ldr	r2, [r2, #0]
 8002e52:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e54:	430b      	orrs	r3, r1
 8002e56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	68da      	ldr	r2, [r3, #12]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a99      	ldr	r2, [pc, #612]	; (80030e0 <UART_SetConfig+0x2c4>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d004      	beq.n	8002e88 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6a1b      	ldr	r3, [r3, #32]
 8002e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e84:	4313      	orrs	r3, r2
 8002e86:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a90      	ldr	r2, [pc, #576]	; (80030e4 <UART_SetConfig+0x2c8>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d126      	bne.n	8002ef4 <UART_SetConfig+0xd8>
 8002ea6:	4b90      	ldr	r3, [pc, #576]	; (80030e8 <UART_SetConfig+0x2cc>)
 8002ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eac:	f003 0303 	and.w	r3, r3, #3
 8002eb0:	2b03      	cmp	r3, #3
 8002eb2:	d81b      	bhi.n	8002eec <UART_SetConfig+0xd0>
 8002eb4:	a201      	add	r2, pc, #4	; (adr r2, 8002ebc <UART_SetConfig+0xa0>)
 8002eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eba:	bf00      	nop
 8002ebc:	08002ecd 	.word	0x08002ecd
 8002ec0:	08002edd 	.word	0x08002edd
 8002ec4:	08002ed5 	.word	0x08002ed5
 8002ec8:	08002ee5 	.word	0x08002ee5
 8002ecc:	2301      	movs	r3, #1
 8002ece:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ed2:	e116      	b.n	8003102 <UART_SetConfig+0x2e6>
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002eda:	e112      	b.n	8003102 <UART_SetConfig+0x2e6>
 8002edc:	2304      	movs	r3, #4
 8002ede:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ee2:	e10e      	b.n	8003102 <UART_SetConfig+0x2e6>
 8002ee4:	2308      	movs	r3, #8
 8002ee6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002eea:	e10a      	b.n	8003102 <UART_SetConfig+0x2e6>
 8002eec:	2310      	movs	r3, #16
 8002eee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ef2:	e106      	b.n	8003102 <UART_SetConfig+0x2e6>
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a7c      	ldr	r2, [pc, #496]	; (80030ec <UART_SetConfig+0x2d0>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d138      	bne.n	8002f70 <UART_SetConfig+0x154>
 8002efe:	4b7a      	ldr	r3, [pc, #488]	; (80030e8 <UART_SetConfig+0x2cc>)
 8002f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f04:	f003 030c 	and.w	r3, r3, #12
 8002f08:	2b0c      	cmp	r3, #12
 8002f0a:	d82d      	bhi.n	8002f68 <UART_SetConfig+0x14c>
 8002f0c:	a201      	add	r2, pc, #4	; (adr r2, 8002f14 <UART_SetConfig+0xf8>)
 8002f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f12:	bf00      	nop
 8002f14:	08002f49 	.word	0x08002f49
 8002f18:	08002f69 	.word	0x08002f69
 8002f1c:	08002f69 	.word	0x08002f69
 8002f20:	08002f69 	.word	0x08002f69
 8002f24:	08002f59 	.word	0x08002f59
 8002f28:	08002f69 	.word	0x08002f69
 8002f2c:	08002f69 	.word	0x08002f69
 8002f30:	08002f69 	.word	0x08002f69
 8002f34:	08002f51 	.word	0x08002f51
 8002f38:	08002f69 	.word	0x08002f69
 8002f3c:	08002f69 	.word	0x08002f69
 8002f40:	08002f69 	.word	0x08002f69
 8002f44:	08002f61 	.word	0x08002f61
 8002f48:	2300      	movs	r3, #0
 8002f4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f4e:	e0d8      	b.n	8003102 <UART_SetConfig+0x2e6>
 8002f50:	2302      	movs	r3, #2
 8002f52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f56:	e0d4      	b.n	8003102 <UART_SetConfig+0x2e6>
 8002f58:	2304      	movs	r3, #4
 8002f5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f5e:	e0d0      	b.n	8003102 <UART_SetConfig+0x2e6>
 8002f60:	2308      	movs	r3, #8
 8002f62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f66:	e0cc      	b.n	8003102 <UART_SetConfig+0x2e6>
 8002f68:	2310      	movs	r3, #16
 8002f6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f6e:	e0c8      	b.n	8003102 <UART_SetConfig+0x2e6>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a5e      	ldr	r2, [pc, #376]	; (80030f0 <UART_SetConfig+0x2d4>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d125      	bne.n	8002fc6 <UART_SetConfig+0x1aa>
 8002f7a:	4b5b      	ldr	r3, [pc, #364]	; (80030e8 <UART_SetConfig+0x2cc>)
 8002f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f80:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002f84:	2b30      	cmp	r3, #48	; 0x30
 8002f86:	d016      	beq.n	8002fb6 <UART_SetConfig+0x19a>
 8002f88:	2b30      	cmp	r3, #48	; 0x30
 8002f8a:	d818      	bhi.n	8002fbe <UART_SetConfig+0x1a2>
 8002f8c:	2b20      	cmp	r3, #32
 8002f8e:	d00a      	beq.n	8002fa6 <UART_SetConfig+0x18a>
 8002f90:	2b20      	cmp	r3, #32
 8002f92:	d814      	bhi.n	8002fbe <UART_SetConfig+0x1a2>
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d002      	beq.n	8002f9e <UART_SetConfig+0x182>
 8002f98:	2b10      	cmp	r3, #16
 8002f9a:	d008      	beq.n	8002fae <UART_SetConfig+0x192>
 8002f9c:	e00f      	b.n	8002fbe <UART_SetConfig+0x1a2>
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fa4:	e0ad      	b.n	8003102 <UART_SetConfig+0x2e6>
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fac:	e0a9      	b.n	8003102 <UART_SetConfig+0x2e6>
 8002fae:	2304      	movs	r3, #4
 8002fb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fb4:	e0a5      	b.n	8003102 <UART_SetConfig+0x2e6>
 8002fb6:	2308      	movs	r3, #8
 8002fb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fbc:	e0a1      	b.n	8003102 <UART_SetConfig+0x2e6>
 8002fbe:	2310      	movs	r3, #16
 8002fc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fc4:	e09d      	b.n	8003102 <UART_SetConfig+0x2e6>
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a4a      	ldr	r2, [pc, #296]	; (80030f4 <UART_SetConfig+0x2d8>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d125      	bne.n	800301c <UART_SetConfig+0x200>
 8002fd0:	4b45      	ldr	r3, [pc, #276]	; (80030e8 <UART_SetConfig+0x2cc>)
 8002fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fd6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002fda:	2bc0      	cmp	r3, #192	; 0xc0
 8002fdc:	d016      	beq.n	800300c <UART_SetConfig+0x1f0>
 8002fde:	2bc0      	cmp	r3, #192	; 0xc0
 8002fe0:	d818      	bhi.n	8003014 <UART_SetConfig+0x1f8>
 8002fe2:	2b80      	cmp	r3, #128	; 0x80
 8002fe4:	d00a      	beq.n	8002ffc <UART_SetConfig+0x1e0>
 8002fe6:	2b80      	cmp	r3, #128	; 0x80
 8002fe8:	d814      	bhi.n	8003014 <UART_SetConfig+0x1f8>
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d002      	beq.n	8002ff4 <UART_SetConfig+0x1d8>
 8002fee:	2b40      	cmp	r3, #64	; 0x40
 8002ff0:	d008      	beq.n	8003004 <UART_SetConfig+0x1e8>
 8002ff2:	e00f      	b.n	8003014 <UART_SetConfig+0x1f8>
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ffa:	e082      	b.n	8003102 <UART_SetConfig+0x2e6>
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003002:	e07e      	b.n	8003102 <UART_SetConfig+0x2e6>
 8003004:	2304      	movs	r3, #4
 8003006:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800300a:	e07a      	b.n	8003102 <UART_SetConfig+0x2e6>
 800300c:	2308      	movs	r3, #8
 800300e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003012:	e076      	b.n	8003102 <UART_SetConfig+0x2e6>
 8003014:	2310      	movs	r3, #16
 8003016:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800301a:	e072      	b.n	8003102 <UART_SetConfig+0x2e6>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a35      	ldr	r2, [pc, #212]	; (80030f8 <UART_SetConfig+0x2dc>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d12a      	bne.n	800307c <UART_SetConfig+0x260>
 8003026:	4b30      	ldr	r3, [pc, #192]	; (80030e8 <UART_SetConfig+0x2cc>)
 8003028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800302c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003030:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003034:	d01a      	beq.n	800306c <UART_SetConfig+0x250>
 8003036:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800303a:	d81b      	bhi.n	8003074 <UART_SetConfig+0x258>
 800303c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003040:	d00c      	beq.n	800305c <UART_SetConfig+0x240>
 8003042:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003046:	d815      	bhi.n	8003074 <UART_SetConfig+0x258>
 8003048:	2b00      	cmp	r3, #0
 800304a:	d003      	beq.n	8003054 <UART_SetConfig+0x238>
 800304c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003050:	d008      	beq.n	8003064 <UART_SetConfig+0x248>
 8003052:	e00f      	b.n	8003074 <UART_SetConfig+0x258>
 8003054:	2300      	movs	r3, #0
 8003056:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800305a:	e052      	b.n	8003102 <UART_SetConfig+0x2e6>
 800305c:	2302      	movs	r3, #2
 800305e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003062:	e04e      	b.n	8003102 <UART_SetConfig+0x2e6>
 8003064:	2304      	movs	r3, #4
 8003066:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800306a:	e04a      	b.n	8003102 <UART_SetConfig+0x2e6>
 800306c:	2308      	movs	r3, #8
 800306e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003072:	e046      	b.n	8003102 <UART_SetConfig+0x2e6>
 8003074:	2310      	movs	r3, #16
 8003076:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800307a:	e042      	b.n	8003102 <UART_SetConfig+0x2e6>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a17      	ldr	r2, [pc, #92]	; (80030e0 <UART_SetConfig+0x2c4>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d13a      	bne.n	80030fc <UART_SetConfig+0x2e0>
 8003086:	4b18      	ldr	r3, [pc, #96]	; (80030e8 <UART_SetConfig+0x2cc>)
 8003088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800308c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003090:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003094:	d01a      	beq.n	80030cc <UART_SetConfig+0x2b0>
 8003096:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800309a:	d81b      	bhi.n	80030d4 <UART_SetConfig+0x2b8>
 800309c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030a0:	d00c      	beq.n	80030bc <UART_SetConfig+0x2a0>
 80030a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030a6:	d815      	bhi.n	80030d4 <UART_SetConfig+0x2b8>
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d003      	beq.n	80030b4 <UART_SetConfig+0x298>
 80030ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030b0:	d008      	beq.n	80030c4 <UART_SetConfig+0x2a8>
 80030b2:	e00f      	b.n	80030d4 <UART_SetConfig+0x2b8>
 80030b4:	2300      	movs	r3, #0
 80030b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030ba:	e022      	b.n	8003102 <UART_SetConfig+0x2e6>
 80030bc:	2302      	movs	r3, #2
 80030be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030c2:	e01e      	b.n	8003102 <UART_SetConfig+0x2e6>
 80030c4:	2304      	movs	r3, #4
 80030c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030ca:	e01a      	b.n	8003102 <UART_SetConfig+0x2e6>
 80030cc:	2308      	movs	r3, #8
 80030ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030d2:	e016      	b.n	8003102 <UART_SetConfig+0x2e6>
 80030d4:	2310      	movs	r3, #16
 80030d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030da:	e012      	b.n	8003102 <UART_SetConfig+0x2e6>
 80030dc:	efff69f3 	.word	0xefff69f3
 80030e0:	40008000 	.word	0x40008000
 80030e4:	40013800 	.word	0x40013800
 80030e8:	40021000 	.word	0x40021000
 80030ec:	40004400 	.word	0x40004400
 80030f0:	40004800 	.word	0x40004800
 80030f4:	40004c00 	.word	0x40004c00
 80030f8:	40005000 	.word	0x40005000
 80030fc:	2310      	movs	r3, #16
 80030fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a9f      	ldr	r2, [pc, #636]	; (8003384 <UART_SetConfig+0x568>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d17a      	bne.n	8003202 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800310c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003110:	2b08      	cmp	r3, #8
 8003112:	d824      	bhi.n	800315e <UART_SetConfig+0x342>
 8003114:	a201      	add	r2, pc, #4	; (adr r2, 800311c <UART_SetConfig+0x300>)
 8003116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800311a:	bf00      	nop
 800311c:	08003141 	.word	0x08003141
 8003120:	0800315f 	.word	0x0800315f
 8003124:	08003149 	.word	0x08003149
 8003128:	0800315f 	.word	0x0800315f
 800312c:	0800314f 	.word	0x0800314f
 8003130:	0800315f 	.word	0x0800315f
 8003134:	0800315f 	.word	0x0800315f
 8003138:	0800315f 	.word	0x0800315f
 800313c:	08003157 	.word	0x08003157
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003140:	f7fe fd7e 	bl	8001c40 <HAL_RCC_GetPCLK1Freq>
 8003144:	61f8      	str	r0, [r7, #28]
        break;
 8003146:	e010      	b.n	800316a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003148:	4b8f      	ldr	r3, [pc, #572]	; (8003388 <UART_SetConfig+0x56c>)
 800314a:	61fb      	str	r3, [r7, #28]
        break;
 800314c:	e00d      	b.n	800316a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800314e:	f7fe fcdf 	bl	8001b10 <HAL_RCC_GetSysClockFreq>
 8003152:	61f8      	str	r0, [r7, #28]
        break;
 8003154:	e009      	b.n	800316a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003156:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800315a:	61fb      	str	r3, [r7, #28]
        break;
 800315c:	e005      	b.n	800316a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800315e:	2300      	movs	r3, #0
 8003160:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003168:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	2b00      	cmp	r3, #0
 800316e:	f000 80fb 	beq.w	8003368 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	685a      	ldr	r2, [r3, #4]
 8003176:	4613      	mov	r3, r2
 8003178:	005b      	lsls	r3, r3, #1
 800317a:	4413      	add	r3, r2
 800317c:	69fa      	ldr	r2, [r7, #28]
 800317e:	429a      	cmp	r2, r3
 8003180:	d305      	bcc.n	800318e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003188:	69fa      	ldr	r2, [r7, #28]
 800318a:	429a      	cmp	r2, r3
 800318c:	d903      	bls.n	8003196 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003194:	e0e8      	b.n	8003368 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	2200      	movs	r2, #0
 800319a:	461c      	mov	r4, r3
 800319c:	4615      	mov	r5, r2
 800319e:	f04f 0200 	mov.w	r2, #0
 80031a2:	f04f 0300 	mov.w	r3, #0
 80031a6:	022b      	lsls	r3, r5, #8
 80031a8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80031ac:	0222      	lsls	r2, r4, #8
 80031ae:	68f9      	ldr	r1, [r7, #12]
 80031b0:	6849      	ldr	r1, [r1, #4]
 80031b2:	0849      	lsrs	r1, r1, #1
 80031b4:	2000      	movs	r0, #0
 80031b6:	4688      	mov	r8, r1
 80031b8:	4681      	mov	r9, r0
 80031ba:	eb12 0a08 	adds.w	sl, r2, r8
 80031be:	eb43 0b09 	adc.w	fp, r3, r9
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	603b      	str	r3, [r7, #0]
 80031ca:	607a      	str	r2, [r7, #4]
 80031cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80031d0:	4650      	mov	r0, sl
 80031d2:	4659      	mov	r1, fp
 80031d4:	f7fc fff8 	bl	80001c8 <__aeabi_uldivmod>
 80031d8:	4602      	mov	r2, r0
 80031da:	460b      	mov	r3, r1
 80031dc:	4613      	mov	r3, r2
 80031de:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031e6:	d308      	bcc.n	80031fa <UART_SetConfig+0x3de>
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031ee:	d204      	bcs.n	80031fa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	60da      	str	r2, [r3, #12]
 80031f8:	e0b6      	b.n	8003368 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003200:	e0b2      	b.n	8003368 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	69db      	ldr	r3, [r3, #28]
 8003206:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800320a:	d15e      	bne.n	80032ca <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800320c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003210:	2b08      	cmp	r3, #8
 8003212:	d828      	bhi.n	8003266 <UART_SetConfig+0x44a>
 8003214:	a201      	add	r2, pc, #4	; (adr r2, 800321c <UART_SetConfig+0x400>)
 8003216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800321a:	bf00      	nop
 800321c:	08003241 	.word	0x08003241
 8003220:	08003249 	.word	0x08003249
 8003224:	08003251 	.word	0x08003251
 8003228:	08003267 	.word	0x08003267
 800322c:	08003257 	.word	0x08003257
 8003230:	08003267 	.word	0x08003267
 8003234:	08003267 	.word	0x08003267
 8003238:	08003267 	.word	0x08003267
 800323c:	0800325f 	.word	0x0800325f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003240:	f7fe fcfe 	bl	8001c40 <HAL_RCC_GetPCLK1Freq>
 8003244:	61f8      	str	r0, [r7, #28]
        break;
 8003246:	e014      	b.n	8003272 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003248:	f7fe fd10 	bl	8001c6c <HAL_RCC_GetPCLK2Freq>
 800324c:	61f8      	str	r0, [r7, #28]
        break;
 800324e:	e010      	b.n	8003272 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003250:	4b4d      	ldr	r3, [pc, #308]	; (8003388 <UART_SetConfig+0x56c>)
 8003252:	61fb      	str	r3, [r7, #28]
        break;
 8003254:	e00d      	b.n	8003272 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003256:	f7fe fc5b 	bl	8001b10 <HAL_RCC_GetSysClockFreq>
 800325a:	61f8      	str	r0, [r7, #28]
        break;
 800325c:	e009      	b.n	8003272 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800325e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003262:	61fb      	str	r3, [r7, #28]
        break;
 8003264:	e005      	b.n	8003272 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003266:	2300      	movs	r3, #0
 8003268:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003270:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d077      	beq.n	8003368 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	005a      	lsls	r2, r3, #1
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	085b      	lsrs	r3, r3, #1
 8003282:	441a      	add	r2, r3
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	fbb2 f3f3 	udiv	r3, r2, r3
 800328c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	2b0f      	cmp	r3, #15
 8003292:	d916      	bls.n	80032c2 <UART_SetConfig+0x4a6>
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800329a:	d212      	bcs.n	80032c2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	b29b      	uxth	r3, r3
 80032a0:	f023 030f 	bic.w	r3, r3, #15
 80032a4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	085b      	lsrs	r3, r3, #1
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	f003 0307 	and.w	r3, r3, #7
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	8afb      	ldrh	r3, [r7, #22]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	8afa      	ldrh	r2, [r7, #22]
 80032be:	60da      	str	r2, [r3, #12]
 80032c0:	e052      	b.n	8003368 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80032c8:	e04e      	b.n	8003368 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80032ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80032ce:	2b08      	cmp	r3, #8
 80032d0:	d827      	bhi.n	8003322 <UART_SetConfig+0x506>
 80032d2:	a201      	add	r2, pc, #4	; (adr r2, 80032d8 <UART_SetConfig+0x4bc>)
 80032d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d8:	080032fd 	.word	0x080032fd
 80032dc:	08003305 	.word	0x08003305
 80032e0:	0800330d 	.word	0x0800330d
 80032e4:	08003323 	.word	0x08003323
 80032e8:	08003313 	.word	0x08003313
 80032ec:	08003323 	.word	0x08003323
 80032f0:	08003323 	.word	0x08003323
 80032f4:	08003323 	.word	0x08003323
 80032f8:	0800331b 	.word	0x0800331b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032fc:	f7fe fca0 	bl	8001c40 <HAL_RCC_GetPCLK1Freq>
 8003300:	61f8      	str	r0, [r7, #28]
        break;
 8003302:	e014      	b.n	800332e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003304:	f7fe fcb2 	bl	8001c6c <HAL_RCC_GetPCLK2Freq>
 8003308:	61f8      	str	r0, [r7, #28]
        break;
 800330a:	e010      	b.n	800332e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800330c:	4b1e      	ldr	r3, [pc, #120]	; (8003388 <UART_SetConfig+0x56c>)
 800330e:	61fb      	str	r3, [r7, #28]
        break;
 8003310:	e00d      	b.n	800332e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003312:	f7fe fbfd 	bl	8001b10 <HAL_RCC_GetSysClockFreq>
 8003316:	61f8      	str	r0, [r7, #28]
        break;
 8003318:	e009      	b.n	800332e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800331a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800331e:	61fb      	str	r3, [r7, #28]
        break;
 8003320:	e005      	b.n	800332e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003322:	2300      	movs	r3, #0
 8003324:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800332c:	bf00      	nop
    }

    if (pclk != 0U)
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d019      	beq.n	8003368 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	085a      	lsrs	r2, r3, #1
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	441a      	add	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	fbb2 f3f3 	udiv	r3, r2, r3
 8003346:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	2b0f      	cmp	r3, #15
 800334c:	d909      	bls.n	8003362 <UART_SetConfig+0x546>
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003354:	d205      	bcs.n	8003362 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	b29a      	uxth	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	60da      	str	r2, [r3, #12]
 8003360:	e002      	b.n	8003368 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2200      	movs	r2, #0
 800336c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003374:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003378:	4618      	mov	r0, r3
 800337a:	3728      	adds	r7, #40	; 0x28
 800337c:	46bd      	mov	sp, r7
 800337e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003382:	bf00      	nop
 8003384:	40008000 	.word	0x40008000
 8003388:	00f42400 	.word	0x00f42400

0800338c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003398:	f003 0301 	and.w	r3, r3, #1
 800339c:	2b00      	cmp	r3, #0
 800339e:	d00a      	beq.n	80033b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00a      	beq.n	80033d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	430a      	orrs	r2, r1
 80033d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033dc:	f003 0304 	and.w	r3, r3, #4
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d00a      	beq.n	80033fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	430a      	orrs	r2, r1
 80033f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fe:	f003 0308 	and.w	r3, r3, #8
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00a      	beq.n	800341c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	430a      	orrs	r2, r1
 800341a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003420:	f003 0310 	and.w	r3, r3, #16
 8003424:	2b00      	cmp	r3, #0
 8003426:	d00a      	beq.n	800343e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	430a      	orrs	r2, r1
 800343c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003442:	f003 0320 	and.w	r3, r3, #32
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00a      	beq.n	8003460 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	430a      	orrs	r2, r1
 800345e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003468:	2b00      	cmp	r3, #0
 800346a:	d01a      	beq.n	80034a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	430a      	orrs	r2, r1
 8003480:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003486:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800348a:	d10a      	bne.n	80034a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	430a      	orrs	r2, r1
 80034a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00a      	beq.n	80034c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	430a      	orrs	r2, r1
 80034c2:	605a      	str	r2, [r3, #4]
  }
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b086      	sub	sp, #24
 80034d4:	af02      	add	r7, sp, #8
 80034d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80034e0:	f7fd fa3a 	bl	8000958 <HAL_GetTick>
 80034e4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0308 	and.w	r3, r3, #8
 80034f0:	2b08      	cmp	r3, #8
 80034f2:	d10e      	bne.n	8003512 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034f8:	9300      	str	r3, [sp, #0]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 f82d 	bl	8003562 <UART_WaitOnFlagUntilTimeout>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d001      	beq.n	8003512 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e023      	b.n	800355a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0304 	and.w	r3, r3, #4
 800351c:	2b04      	cmp	r3, #4
 800351e:	d10e      	bne.n	800353e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003520:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003524:	9300      	str	r3, [sp, #0]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 f817 	bl	8003562 <UART_WaitOnFlagUntilTimeout>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d001      	beq.n	800353e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e00d      	b.n	800355a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2220      	movs	r2, #32
 8003542:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2220      	movs	r2, #32
 8003548:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003558:	2300      	movs	r3, #0
}
 800355a:	4618      	mov	r0, r3
 800355c:	3710      	adds	r7, #16
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b09c      	sub	sp, #112	; 0x70
 8003566:	af00      	add	r7, sp, #0
 8003568:	60f8      	str	r0, [r7, #12]
 800356a:	60b9      	str	r1, [r7, #8]
 800356c:	603b      	str	r3, [r7, #0]
 800356e:	4613      	mov	r3, r2
 8003570:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003572:	e0a5      	b.n	80036c0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003574:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800357a:	f000 80a1 	beq.w	80036c0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800357e:	f7fd f9eb 	bl	8000958 <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800358a:	429a      	cmp	r2, r3
 800358c:	d302      	bcc.n	8003594 <UART_WaitOnFlagUntilTimeout+0x32>
 800358e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003590:	2b00      	cmp	r3, #0
 8003592:	d13e      	bne.n	8003612 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800359a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800359c:	e853 3f00 	ldrex	r3, [r3]
 80035a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80035a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80035a8:	667b      	str	r3, [r7, #100]	; 0x64
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	461a      	mov	r2, r3
 80035b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80035b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035b4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80035b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80035ba:	e841 2300 	strex	r3, r2, [r1]
 80035be:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80035c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1e6      	bne.n	8003594 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	3308      	adds	r3, #8
 80035cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035d0:	e853 3f00 	ldrex	r3, [r3]
 80035d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80035d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035d8:	f023 0301 	bic.w	r3, r3, #1
 80035dc:	663b      	str	r3, [r7, #96]	; 0x60
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	3308      	adds	r3, #8
 80035e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80035e6:	64ba      	str	r2, [r7, #72]	; 0x48
 80035e8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80035ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035ee:	e841 2300 	strex	r3, r2, [r1]
 80035f2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80035f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1e5      	bne.n	80035c6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2220      	movs	r2, #32
 80035fe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2220      	movs	r2, #32
 8003604:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e067      	b.n	80036e2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0304 	and.w	r3, r3, #4
 800361c:	2b00      	cmp	r3, #0
 800361e:	d04f      	beq.n	80036c0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	69db      	ldr	r3, [r3, #28]
 8003626:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800362a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800362e:	d147      	bne.n	80036c0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003638:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003642:	e853 3f00 	ldrex	r3, [r3]
 8003646:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800364e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	461a      	mov	r2, r3
 8003656:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003658:	637b      	str	r3, [r7, #52]	; 0x34
 800365a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800365c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800365e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003660:	e841 2300 	strex	r3, r2, [r1]
 8003664:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003668:	2b00      	cmp	r3, #0
 800366a:	d1e6      	bne.n	800363a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	3308      	adds	r3, #8
 8003672:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	e853 3f00 	ldrex	r3, [r3]
 800367a:	613b      	str	r3, [r7, #16]
   return(result);
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	f023 0301 	bic.w	r3, r3, #1
 8003682:	66bb      	str	r3, [r7, #104]	; 0x68
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	3308      	adds	r3, #8
 800368a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800368c:	623a      	str	r2, [r7, #32]
 800368e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003690:	69f9      	ldr	r1, [r7, #28]
 8003692:	6a3a      	ldr	r2, [r7, #32]
 8003694:	e841 2300 	strex	r3, r2, [r1]
 8003698:	61bb      	str	r3, [r7, #24]
   return(result);
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d1e5      	bne.n	800366c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2220      	movs	r2, #32
 80036a4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2220      	movs	r2, #32
 80036aa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2220      	movs	r2, #32
 80036b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e010      	b.n	80036e2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	69da      	ldr	r2, [r3, #28]
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	4013      	ands	r3, r2
 80036ca:	68ba      	ldr	r2, [r7, #8]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	bf0c      	ite	eq
 80036d0:	2301      	moveq	r3, #1
 80036d2:	2300      	movne	r3, #0
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	461a      	mov	r2, r3
 80036d8:	79fb      	ldrb	r3, [r7, #7]
 80036da:	429a      	cmp	r2, r3
 80036dc:	f43f af4a 	beq.w	8003574 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3770      	adds	r7, #112	; 0x70
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
	...

080036ec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b097      	sub	sp, #92	; 0x5c
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	4613      	mov	r3, r2
 80036f8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	68ba      	ldr	r2, [r7, #8]
 80036fe:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	88fa      	ldrh	r2, [r7, #6]
 8003704:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	88fa      	ldrh	r2, [r7, #6]
 800370c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2200      	movs	r2, #0
 8003714:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800371e:	d10e      	bne.n	800373e <UART_Start_Receive_IT+0x52>
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	691b      	ldr	r3, [r3, #16]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d105      	bne.n	8003734 <UART_Start_Receive_IT+0x48>
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800372e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003732:	e02d      	b.n	8003790 <UART_Start_Receive_IT+0xa4>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	22ff      	movs	r2, #255	; 0xff
 8003738:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800373c:	e028      	b.n	8003790 <UART_Start_Receive_IT+0xa4>
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d10d      	bne.n	8003762 <UART_Start_Receive_IT+0x76>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d104      	bne.n	8003758 <UART_Start_Receive_IT+0x6c>
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	22ff      	movs	r2, #255	; 0xff
 8003752:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003756:	e01b      	b.n	8003790 <UART_Start_Receive_IT+0xa4>
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	227f      	movs	r2, #127	; 0x7f
 800375c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003760:	e016      	b.n	8003790 <UART_Start_Receive_IT+0xa4>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800376a:	d10d      	bne.n	8003788 <UART_Start_Receive_IT+0x9c>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	691b      	ldr	r3, [r3, #16]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d104      	bne.n	800377e <UART_Start_Receive_IT+0x92>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	227f      	movs	r2, #127	; 0x7f
 8003778:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800377c:	e008      	b.n	8003790 <UART_Start_Receive_IT+0xa4>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	223f      	movs	r2, #63	; 0x3f
 8003782:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003786:	e003      	b.n	8003790 <UART_Start_Receive_IT+0xa4>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2222      	movs	r2, #34	; 0x22
 800379c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	3308      	adds	r3, #8
 80037a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037a8:	e853 3f00 	ldrex	r3, [r3]
 80037ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80037ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037b0:	f043 0301 	orr.w	r3, r3, #1
 80037b4:	657b      	str	r3, [r7, #84]	; 0x54
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	3308      	adds	r3, #8
 80037bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80037be:	64ba      	str	r2, [r7, #72]	; 0x48
 80037c0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80037c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037c6:	e841 2300 	strex	r3, r2, [r1]
 80037ca:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80037cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1e5      	bne.n	800379e <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037da:	d107      	bne.n	80037ec <UART_Start_Receive_IT+0x100>
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d103      	bne.n	80037ec <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	4a24      	ldr	r2, [pc, #144]	; (8003878 <UART_Start_Receive_IT+0x18c>)
 80037e8:	665a      	str	r2, [r3, #100]	; 0x64
 80037ea:	e002      	b.n	80037f2 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	4a23      	ldr	r2, [pc, #140]	; (800387c <UART_Start_Receive_IT+0x190>)
 80037f0:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d019      	beq.n	8003836 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800380a:	e853 3f00 	ldrex	r3, [r3]
 800380e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003812:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003816:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	461a      	mov	r2, r3
 800381e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003820:	637b      	str	r3, [r7, #52]	; 0x34
 8003822:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003824:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003826:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003828:	e841 2300 	strex	r3, r2, [r1]
 800382c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800382e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003830:	2b00      	cmp	r3, #0
 8003832:	d1e6      	bne.n	8003802 <UART_Start_Receive_IT+0x116>
 8003834:	e018      	b.n	8003868 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	e853 3f00 	ldrex	r3, [r3]
 8003842:	613b      	str	r3, [r7, #16]
   return(result);
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	f043 0320 	orr.w	r3, r3, #32
 800384a:	653b      	str	r3, [r7, #80]	; 0x50
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	461a      	mov	r2, r3
 8003852:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003854:	623b      	str	r3, [r7, #32]
 8003856:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003858:	69f9      	ldr	r1, [r7, #28]
 800385a:	6a3a      	ldr	r2, [r7, #32]
 800385c:	e841 2300 	strex	r3, r2, [r1]
 8003860:	61bb      	str	r3, [r7, #24]
   return(result);
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d1e6      	bne.n	8003836 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	375c      	adds	r7, #92	; 0x5c
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	08003b27 	.word	0x08003b27
 800387c:	080039c7 	.word	0x080039c7

08003880 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003880:	b480      	push	{r7}
 8003882:	b095      	sub	sp, #84	; 0x54
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800388e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003890:	e853 3f00 	ldrex	r3, [r3]
 8003894:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003898:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800389c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	461a      	mov	r2, r3
 80038a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038a6:	643b      	str	r3, [r7, #64]	; 0x40
 80038a8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80038ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80038ae:	e841 2300 	strex	r3, r2, [r1]
 80038b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80038b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1e6      	bne.n	8003888 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	3308      	adds	r3, #8
 80038c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038c2:	6a3b      	ldr	r3, [r7, #32]
 80038c4:	e853 3f00 	ldrex	r3, [r3]
 80038c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	f023 0301 	bic.w	r3, r3, #1
 80038d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	3308      	adds	r3, #8
 80038d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038dc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038e2:	e841 2300 	strex	r3, r2, [r1]
 80038e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1e5      	bne.n	80038ba <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d118      	bne.n	8003928 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	e853 3f00 	ldrex	r3, [r3]
 8003902:	60bb      	str	r3, [r7, #8]
   return(result);
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	f023 0310 	bic.w	r3, r3, #16
 800390a:	647b      	str	r3, [r7, #68]	; 0x44
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	461a      	mov	r2, r3
 8003912:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003914:	61bb      	str	r3, [r7, #24]
 8003916:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003918:	6979      	ldr	r1, [r7, #20]
 800391a:	69ba      	ldr	r2, [r7, #24]
 800391c:	e841 2300 	strex	r3, r2, [r1]
 8003920:	613b      	str	r3, [r7, #16]
   return(result);
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d1e6      	bne.n	80038f6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2220      	movs	r2, #32
 800392c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	665a      	str	r2, [r3, #100]	; 0x64
}
 800393a:	bf00      	nop
 800393c:	3754      	adds	r7, #84	; 0x54
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr

08003946 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003946:	b580      	push	{r7, lr}
 8003948:	b084      	sub	sp, #16
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003952:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2200      	movs	r2, #0
 8003958:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2200      	movs	r2, #0
 8003960:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003964:	68f8      	ldr	r0, [r7, #12]
 8003966:	f7ff fa43 	bl	8002df0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800396a:	bf00      	nop
 800396c:	3710      	adds	r7, #16
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}

08003972 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003972:	b580      	push	{r7, lr}
 8003974:	b088      	sub	sp, #32
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	e853 3f00 	ldrex	r3, [r3]
 8003986:	60bb      	str	r3, [r7, #8]
   return(result);
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800398e:	61fb      	str	r3, [r7, #28]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	461a      	mov	r2, r3
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	61bb      	str	r3, [r7, #24]
 800399a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800399c:	6979      	ldr	r1, [r7, #20]
 800399e:	69ba      	ldr	r2, [r7, #24]
 80039a0:	e841 2300 	strex	r3, r2, [r1]
 80039a4:	613b      	str	r3, [r7, #16]
   return(result);
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d1e6      	bne.n	800397a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2220      	movs	r2, #32
 80039b0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f7ff fa0f 	bl	8002ddc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039be:	bf00      	nop
 80039c0:	3720      	adds	r7, #32
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}

080039c6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80039c6:	b580      	push	{r7, lr}
 80039c8:	b096      	sub	sp, #88	; 0x58
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80039d4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039dc:	2b22      	cmp	r3, #34	; 0x22
 80039de:	f040 8094 	bne.w	8003b0a <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80039e8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80039ec:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80039f0:	b2d9      	uxtb	r1, r3
 80039f2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80039f6:	b2da      	uxtb	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039fc:	400a      	ands	r2, r1
 80039fe:	b2d2      	uxtb	r2, r2
 8003a00:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a06:	1c5a      	adds	r2, r3, #1
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	3b01      	subs	r3, #1
 8003a16:	b29a      	uxth	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d179      	bne.n	8003b1e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a32:	e853 3f00 	ldrex	r3, [r3]
 8003a36:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a3e:	653b      	str	r3, [r7, #80]	; 0x50
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	461a      	mov	r2, r3
 8003a46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a48:	647b      	str	r3, [r7, #68]	; 0x44
 8003a4a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a4c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a50:	e841 2300 	strex	r3, r2, [r1]
 8003a54:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1e6      	bne.n	8003a2a <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	3308      	adds	r3, #8
 8003a62:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a66:	e853 3f00 	ldrex	r3, [r3]
 8003a6a:	623b      	str	r3, [r7, #32]
   return(result);
 8003a6c:	6a3b      	ldr	r3, [r7, #32]
 8003a6e:	f023 0301 	bic.w	r3, r3, #1
 8003a72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	3308      	adds	r3, #8
 8003a7a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a7c:	633a      	str	r2, [r7, #48]	; 0x30
 8003a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a80:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a84:	e841 2300 	strex	r3, r2, [r1]
 8003a88:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1e5      	bne.n	8003a5c <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2220      	movs	r2, #32
 8003a94:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d12e      	bne.n	8003b02 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	e853 3f00 	ldrex	r3, [r3]
 8003ab6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f023 0310 	bic.w	r3, r3, #16
 8003abe:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ac8:	61fb      	str	r3, [r7, #28]
 8003aca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003acc:	69b9      	ldr	r1, [r7, #24]
 8003ace:	69fa      	ldr	r2, [r7, #28]
 8003ad0:	e841 2300 	strex	r3, r2, [r1]
 8003ad4:	617b      	str	r3, [r7, #20]
   return(result);
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d1e6      	bne.n	8003aaa <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	69db      	ldr	r3, [r3, #28]
 8003ae2:	f003 0310 	and.w	r3, r3, #16
 8003ae6:	2b10      	cmp	r3, #16
 8003ae8:	d103      	bne.n	8003af2 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2210      	movs	r2, #16
 8003af0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003af8:	4619      	mov	r1, r3
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f7ff f982 	bl	8002e04 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003b00:	e00d      	b.n	8003b1e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f7fc fdb0 	bl	8000668 <HAL_UART_RxCpltCallback>
}
 8003b08:	e009      	b.n	8003b1e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	8b1b      	ldrh	r3, [r3, #24]
 8003b10:	b29a      	uxth	r2, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f042 0208 	orr.w	r2, r2, #8
 8003b1a:	b292      	uxth	r2, r2
 8003b1c:	831a      	strh	r2, [r3, #24]
}
 8003b1e:	bf00      	nop
 8003b20:	3758      	adds	r7, #88	; 0x58
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003b26:	b580      	push	{r7, lr}
 8003b28:	b096      	sub	sp, #88	; 0x58
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003b34:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b3c:	2b22      	cmp	r3, #34	; 0x22
 8003b3e:	f040 8094 	bne.w	8003c6a <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003b48:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b50:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8003b52:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8003b56:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	b29a      	uxth	r2, r3
 8003b5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b60:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b66:	1c9a      	adds	r2, r3, #2
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	3b01      	subs	r3, #1
 8003b76:	b29a      	uxth	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d179      	bne.n	8003c7e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b92:	e853 3f00 	ldrex	r3, [r3]
 8003b96:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ba8:	643b      	str	r3, [r7, #64]	; 0x40
 8003baa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003bae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003bb0:	e841 2300 	strex	r3, r2, [r1]
 8003bb4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d1e6      	bne.n	8003b8a <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	3308      	adds	r3, #8
 8003bc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc4:	6a3b      	ldr	r3, [r7, #32]
 8003bc6:	e853 3f00 	ldrex	r3, [r3]
 8003bca:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	f023 0301 	bic.w	r3, r3, #1
 8003bd2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	3308      	adds	r3, #8
 8003bda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003bdc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003bde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003be2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003be4:	e841 2300 	strex	r3, r2, [r1]
 8003be8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d1e5      	bne.n	8003bbc <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2220      	movs	r2, #32
 8003bf4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d12e      	bne.n	8003c62 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	e853 3f00 	ldrex	r3, [r3]
 8003c16:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	f023 0310 	bic.w	r3, r3, #16
 8003c1e:	647b      	str	r3, [r7, #68]	; 0x44
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	461a      	mov	r2, r3
 8003c26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c28:	61bb      	str	r3, [r7, #24]
 8003c2a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c2c:	6979      	ldr	r1, [r7, #20]
 8003c2e:	69ba      	ldr	r2, [r7, #24]
 8003c30:	e841 2300 	strex	r3, r2, [r1]
 8003c34:	613b      	str	r3, [r7, #16]
   return(result);
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d1e6      	bne.n	8003c0a <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	69db      	ldr	r3, [r3, #28]
 8003c42:	f003 0310 	and.w	r3, r3, #16
 8003c46:	2b10      	cmp	r3, #16
 8003c48:	d103      	bne.n	8003c52 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2210      	movs	r2, #16
 8003c50:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003c58:	4619      	mov	r1, r3
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f7ff f8d2 	bl	8002e04 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003c60:	e00d      	b.n	8003c7e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f7fc fd00 	bl	8000668 <HAL_UART_RxCpltCallback>
}
 8003c68:	e009      	b.n	8003c7e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	8b1b      	ldrh	r3, [r3, #24]
 8003c70:	b29a      	uxth	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f042 0208 	orr.w	r2, r2, #8
 8003c7a:	b292      	uxth	r2, r2
 8003c7c:	831a      	strh	r2, [r3, #24]
}
 8003c7e:	bf00      	nop
 8003c80:	3758      	adds	r7, #88	; 0x58
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003c86:	b480      	push	{r7}
 8003c88:	b083      	sub	sp, #12
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003c8e:	bf00      	nop
 8003c90:	370c      	adds	r7, #12
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr

08003c9a <memset>:
 8003c9a:	4402      	add	r2, r0
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d100      	bne.n	8003ca4 <memset+0xa>
 8003ca2:	4770      	bx	lr
 8003ca4:	f803 1b01 	strb.w	r1, [r3], #1
 8003ca8:	e7f9      	b.n	8003c9e <memset+0x4>
	...

08003cac <__libc_init_array>:
 8003cac:	b570      	push	{r4, r5, r6, lr}
 8003cae:	4d0d      	ldr	r5, [pc, #52]	; (8003ce4 <__libc_init_array+0x38>)
 8003cb0:	4c0d      	ldr	r4, [pc, #52]	; (8003ce8 <__libc_init_array+0x3c>)
 8003cb2:	1b64      	subs	r4, r4, r5
 8003cb4:	10a4      	asrs	r4, r4, #2
 8003cb6:	2600      	movs	r6, #0
 8003cb8:	42a6      	cmp	r6, r4
 8003cba:	d109      	bne.n	8003cd0 <__libc_init_array+0x24>
 8003cbc:	4d0b      	ldr	r5, [pc, #44]	; (8003cec <__libc_init_array+0x40>)
 8003cbe:	4c0c      	ldr	r4, [pc, #48]	; (8003cf0 <__libc_init_array+0x44>)
 8003cc0:	f000 f818 	bl	8003cf4 <_init>
 8003cc4:	1b64      	subs	r4, r4, r5
 8003cc6:	10a4      	asrs	r4, r4, #2
 8003cc8:	2600      	movs	r6, #0
 8003cca:	42a6      	cmp	r6, r4
 8003ccc:	d105      	bne.n	8003cda <__libc_init_array+0x2e>
 8003cce:	bd70      	pop	{r4, r5, r6, pc}
 8003cd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cd4:	4798      	blx	r3
 8003cd6:	3601      	adds	r6, #1
 8003cd8:	e7ee      	b.n	8003cb8 <__libc_init_array+0xc>
 8003cda:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cde:	4798      	blx	r3
 8003ce0:	3601      	adds	r6, #1
 8003ce2:	e7f2      	b.n	8003cca <__libc_init_array+0x1e>
 8003ce4:	08003d5c 	.word	0x08003d5c
 8003ce8:	08003d5c 	.word	0x08003d5c
 8003cec:	08003d5c 	.word	0x08003d5c
 8003cf0:	08003d60 	.word	0x08003d60

08003cf4 <_init>:
 8003cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cf6:	bf00      	nop
 8003cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cfa:	bc08      	pop	{r3}
 8003cfc:	469e      	mov	lr, r3
 8003cfe:	4770      	bx	lr

08003d00 <_fini>:
 8003d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d02:	bf00      	nop
 8003d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d06:	bc08      	pop	{r3}
 8003d08:	469e      	mov	lr, r3
 8003d0a:	4770      	bx	lr
