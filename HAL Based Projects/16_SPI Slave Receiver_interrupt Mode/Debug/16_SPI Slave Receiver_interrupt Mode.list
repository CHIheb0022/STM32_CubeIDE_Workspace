
16_SPI Slave Receiver_interrupt Mode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003900  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080039bc  080039bc  000139bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a44  08003a44  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003a44  08003a44  00013a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a4c  08003a4c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a4c  08003a4c  00013a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a50  08003a50  00013a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003a54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  2000000c  08003a60  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  08003a60  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d21a  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002000  00000000  00000000  0002d291  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ab0  00000000  00000000  0002f298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000084d  00000000  00000000  0002fd48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000153fc  00000000  00000000  00030595  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dae0  00000000  00000000  00045991  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00086e72  00000000  00000000  00053471  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000025a8  00000000  00000000  000da2e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000099  00000000  00000000  000dc88c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080039a4 	.word	0x080039a4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	080039a4 	.word	0x080039a4

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	; (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000620:	f000 fa88 	bl	8000b34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000624:	f000 f812 	bl	800064c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000628:	f000 f8f8 	bl	800081c <MX_GPIO_Init>
  MX_SPI1_Init();
 800062c:	f000 f86c 	bl	8000708 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000630:	f000 f8a6 	bl	8000780 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //First reception
  HAL_SPI_Receive_IT(&hspi1, RX_buffer,sizeof(RX_buffer));
 8000634:	4903      	ldr	r1, [pc, #12]	; (8000644 <main+0x28>)
 8000636:	4b04      	ldr	r3, [pc, #16]	; (8000648 <main+0x2c>)
 8000638:	2202      	movs	r2, #2
 800063a:	0018      	movs	r0, r3
 800063c:	f001 fcee 	bl	800201c <HAL_SPI_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000640:	e7fe      	b.n	8000640 <main+0x24>
 8000642:	46c0      	nop			; (mov r8, r8)
 8000644:	20000120 	.word	0x20000120
 8000648:	20000028 	.word	0x20000028

0800064c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800064c:	b590      	push	{r4, r7, lr}
 800064e:	b093      	sub	sp, #76	; 0x4c
 8000650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000652:	2410      	movs	r4, #16
 8000654:	193b      	adds	r3, r7, r4
 8000656:	0018      	movs	r0, r3
 8000658:	2338      	movs	r3, #56	; 0x38
 800065a:	001a      	movs	r2, r3
 800065c:	2100      	movs	r1, #0
 800065e:	f003 f975 	bl	800394c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000662:	003b      	movs	r3, r7
 8000664:	0018      	movs	r0, r3
 8000666:	2310      	movs	r3, #16
 8000668:	001a      	movs	r2, r3
 800066a:	2100      	movs	r1, #0
 800066c:	f003 f96e 	bl	800394c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000670:	2380      	movs	r3, #128	; 0x80
 8000672:	009b      	lsls	r3, r3, #2
 8000674:	0018      	movs	r0, r3
 8000676:	f000 fd8f 	bl	8001198 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800067a:	193b      	adds	r3, r7, r4
 800067c:	2202      	movs	r2, #2
 800067e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000680:	193b      	adds	r3, r7, r4
 8000682:	2280      	movs	r2, #128	; 0x80
 8000684:	0052      	lsls	r2, r2, #1
 8000686:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000688:	0021      	movs	r1, r4
 800068a:	187b      	adds	r3, r7, r1
 800068c:	2200      	movs	r2, #0
 800068e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000690:	187b      	adds	r3, r7, r1
 8000692:	2240      	movs	r2, #64	; 0x40
 8000694:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000696:	187b      	adds	r3, r7, r1
 8000698:	2202      	movs	r2, #2
 800069a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800069c:	187b      	adds	r3, r7, r1
 800069e:	2202      	movs	r2, #2
 80006a0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80006a2:	187b      	adds	r3, r7, r1
 80006a4:	2200      	movs	r2, #0
 80006a6:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006a8:	187b      	adds	r3, r7, r1
 80006aa:	220a      	movs	r2, #10
 80006ac:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ae:	187b      	adds	r3, r7, r1
 80006b0:	2280      	movs	r2, #128	; 0x80
 80006b2:	0292      	lsls	r2, r2, #10
 80006b4:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006b6:	187b      	adds	r3, r7, r1
 80006b8:	2280      	movs	r2, #128	; 0x80
 80006ba:	0492      	lsls	r2, r2, #18
 80006bc:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80006be:	187b      	adds	r3, r7, r1
 80006c0:	22c0      	movs	r2, #192	; 0xc0
 80006c2:	05d2      	lsls	r2, r2, #23
 80006c4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c6:	187b      	adds	r3, r7, r1
 80006c8:	0018      	movs	r0, r3
 80006ca:	f000 fdb1 	bl	8001230 <HAL_RCC_OscConfig>
 80006ce:	1e03      	subs	r3, r0, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80006d2:	f000 f8fb 	bl	80008cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d6:	003b      	movs	r3, r7
 80006d8:	2207      	movs	r2, #7
 80006da:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006dc:	003b      	movs	r3, r7
 80006de:	2202      	movs	r2, #2
 80006e0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e2:	003b      	movs	r3, r7
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e8:	003b      	movs	r3, r7
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006ee:	003b      	movs	r3, r7
 80006f0:	2101      	movs	r1, #1
 80006f2:	0018      	movs	r0, r3
 80006f4:	f001 f8b6 	bl	8001864 <HAL_RCC_ClockConfig>
 80006f8:	1e03      	subs	r3, r0, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80006fc:	f000 f8e6 	bl	80008cc <Error_Handler>
  }
}
 8000700:	46c0      	nop			; (mov r8, r8)
 8000702:	46bd      	mov	sp, r7
 8000704:	b013      	add	sp, #76	; 0x4c
 8000706:	bd90      	pop	{r4, r7, pc}

08000708 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800070c:	4b1a      	ldr	r3, [pc, #104]	; (8000778 <MX_SPI1_Init+0x70>)
 800070e:	4a1b      	ldr	r2, [pc, #108]	; (800077c <MX_SPI1_Init+0x74>)
 8000710:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000712:	4b19      	ldr	r3, [pc, #100]	; (8000778 <MX_SPI1_Init+0x70>)
 8000714:	2200      	movs	r2, #0
 8000716:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000718:	4b17      	ldr	r3, [pc, #92]	; (8000778 <MX_SPI1_Init+0x70>)
 800071a:	2280      	movs	r2, #128	; 0x80
 800071c:	00d2      	lsls	r2, r2, #3
 800071e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000720:	4b15      	ldr	r3, [pc, #84]	; (8000778 <MX_SPI1_Init+0x70>)
 8000722:	22e0      	movs	r2, #224	; 0xe0
 8000724:	00d2      	lsls	r2, r2, #3
 8000726:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000728:	4b13      	ldr	r3, [pc, #76]	; (8000778 <MX_SPI1_Init+0x70>)
 800072a:	2200      	movs	r2, #0
 800072c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800072e:	4b12      	ldr	r3, [pc, #72]	; (8000778 <MX_SPI1_Init+0x70>)
 8000730:	2200      	movs	r2, #0
 8000732:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000734:	4b10      	ldr	r3, [pc, #64]	; (8000778 <MX_SPI1_Init+0x70>)
 8000736:	2280      	movs	r2, #128	; 0x80
 8000738:	0092      	lsls	r2, r2, #2
 800073a:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800073c:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <MX_SPI1_Init+0x70>)
 800073e:	2200      	movs	r2, #0
 8000740:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000742:	4b0d      	ldr	r3, [pc, #52]	; (8000778 <MX_SPI1_Init+0x70>)
 8000744:	2200      	movs	r2, #0
 8000746:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000748:	4b0b      	ldr	r3, [pc, #44]	; (8000778 <MX_SPI1_Init+0x70>)
 800074a:	2200      	movs	r2, #0
 800074c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800074e:	4b0a      	ldr	r3, [pc, #40]	; (8000778 <MX_SPI1_Init+0x70>)
 8000750:	2207      	movs	r2, #7
 8000752:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000754:	4b08      	ldr	r3, [pc, #32]	; (8000778 <MX_SPI1_Init+0x70>)
 8000756:	2200      	movs	r2, #0
 8000758:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800075a:	4b07      	ldr	r3, [pc, #28]	; (8000778 <MX_SPI1_Init+0x70>)
 800075c:	2200      	movs	r2, #0
 800075e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000760:	4b05      	ldr	r3, [pc, #20]	; (8000778 <MX_SPI1_Init+0x70>)
 8000762:	0018      	movs	r0, r3
 8000764:	f001 fba2 	bl	8001eac <HAL_SPI_Init>
 8000768:	1e03      	subs	r3, r0, #0
 800076a:	d001      	beq.n	8000770 <MX_SPI1_Init+0x68>
  {
    Error_Handler();
 800076c:	f000 f8ae 	bl	80008cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000770:	46c0      	nop			; (mov r8, r8)
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	46c0      	nop			; (mov r8, r8)
 8000778:	20000028 	.word	0x20000028
 800077c:	40013000 	.word	0x40013000

08000780 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000784:	4b23      	ldr	r3, [pc, #140]	; (8000814 <MX_USART1_UART_Init+0x94>)
 8000786:	4a24      	ldr	r2, [pc, #144]	; (8000818 <MX_USART1_UART_Init+0x98>)
 8000788:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800078a:	4b22      	ldr	r3, [pc, #136]	; (8000814 <MX_USART1_UART_Init+0x94>)
 800078c:	22e1      	movs	r2, #225	; 0xe1
 800078e:	0252      	lsls	r2, r2, #9
 8000790:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000792:	4b20      	ldr	r3, [pc, #128]	; (8000814 <MX_USART1_UART_Init+0x94>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000798:	4b1e      	ldr	r3, [pc, #120]	; (8000814 <MX_USART1_UART_Init+0x94>)
 800079a:	2200      	movs	r2, #0
 800079c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800079e:	4b1d      	ldr	r3, [pc, #116]	; (8000814 <MX_USART1_UART_Init+0x94>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007a4:	4b1b      	ldr	r3, [pc, #108]	; (8000814 <MX_USART1_UART_Init+0x94>)
 80007a6:	220c      	movs	r2, #12
 80007a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007aa:	4b1a      	ldr	r3, [pc, #104]	; (8000814 <MX_USART1_UART_Init+0x94>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b0:	4b18      	ldr	r3, [pc, #96]	; (8000814 <MX_USART1_UART_Init+0x94>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007b6:	4b17      	ldr	r3, [pc, #92]	; (8000814 <MX_USART1_UART_Init+0x94>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007bc:	4b15      	ldr	r3, [pc, #84]	; (8000814 <MX_USART1_UART_Init+0x94>)
 80007be:	2200      	movs	r2, #0
 80007c0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007c2:	4b14      	ldr	r3, [pc, #80]	; (8000814 <MX_USART1_UART_Init+0x94>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007c8:	4b12      	ldr	r3, [pc, #72]	; (8000814 <MX_USART1_UART_Init+0x94>)
 80007ca:	0018      	movs	r0, r3
 80007cc:	f002 fa70 	bl	8002cb0 <HAL_UART_Init>
 80007d0:	1e03      	subs	r3, r0, #0
 80007d2:	d001      	beq.n	80007d8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80007d4:	f000 f87a 	bl	80008cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007d8:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <MX_USART1_UART_Init+0x94>)
 80007da:	2100      	movs	r1, #0
 80007dc:	0018      	movs	r0, r3
 80007de:	f002 ffd5 	bl	800378c <HAL_UARTEx_SetTxFifoThreshold>
 80007e2:	1e03      	subs	r3, r0, #0
 80007e4:	d001      	beq.n	80007ea <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80007e6:	f000 f871 	bl	80008cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007ea:	4b0a      	ldr	r3, [pc, #40]	; (8000814 <MX_USART1_UART_Init+0x94>)
 80007ec:	2100      	movs	r1, #0
 80007ee:	0018      	movs	r0, r3
 80007f0:	f003 f80c 	bl	800380c <HAL_UARTEx_SetRxFifoThreshold>
 80007f4:	1e03      	subs	r3, r0, #0
 80007f6:	d001      	beq.n	80007fc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80007f8:	f000 f868 	bl	80008cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80007fc:	4b05      	ldr	r3, [pc, #20]	; (8000814 <MX_USART1_UART_Init+0x94>)
 80007fe:	0018      	movs	r0, r3
 8000800:	f002 ff8a 	bl	8003718 <HAL_UARTEx_DisableFifoMode>
 8000804:	1e03      	subs	r3, r0, #0
 8000806:	d001      	beq.n	800080c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000808:	f000 f860 	bl	80008cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800080c:	46c0      	nop			; (mov r8, r8)
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	2000008c 	.word	0x2000008c
 8000818:	40013800 	.word	0x40013800

0800081c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000822:	4b0e      	ldr	r3, [pc, #56]	; (800085c <MX_GPIO_Init+0x40>)
 8000824:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000826:	4b0d      	ldr	r3, [pc, #52]	; (800085c <MX_GPIO_Init+0x40>)
 8000828:	2102      	movs	r1, #2
 800082a:	430a      	orrs	r2, r1
 800082c:	635a      	str	r2, [r3, #52]	; 0x34
 800082e:	4b0b      	ldr	r3, [pc, #44]	; (800085c <MX_GPIO_Init+0x40>)
 8000830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000832:	2202      	movs	r2, #2
 8000834:	4013      	ands	r3, r2
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	4b08      	ldr	r3, [pc, #32]	; (800085c <MX_GPIO_Init+0x40>)
 800083c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800083e:	4b07      	ldr	r3, [pc, #28]	; (800085c <MX_GPIO_Init+0x40>)
 8000840:	2101      	movs	r1, #1
 8000842:	430a      	orrs	r2, r1
 8000844:	635a      	str	r2, [r3, #52]	; 0x34
 8000846:	4b05      	ldr	r3, [pc, #20]	; (800085c <MX_GPIO_Init+0x40>)
 8000848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800084a:	2201      	movs	r2, #1
 800084c:	4013      	ands	r3, r2
 800084e:	603b      	str	r3, [r7, #0]
 8000850:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	46bd      	mov	sp, r7
 8000856:	b002      	add	sp, #8
 8000858:	bd80      	pop	{r7, pc}
 800085a:	46c0      	nop			; (mov r8, r8)
 800085c:	40021000 	.word	0x40021000

08000860 <HAL_SPI_RxCpltCallback>:

/* USER CODE BEGIN 4 */

//The routine in the Callback function will be repeated at each 2 bytes frame.
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi){
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
	//Move the received data to a buffer with the same size as the transmitted data "Hello world !"(13)
	RX_data[pos]=RX_buffer[0];
 8000868:	4b13      	ldr	r3, [pc, #76]	; (80008b8 <HAL_SPI_RxCpltCallback+0x58>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a13      	ldr	r2, [pc, #76]	; (80008bc <HAL_SPI_RxCpltCallback+0x5c>)
 800086e:	7811      	ldrb	r1, [r2, #0]
 8000870:	4a13      	ldr	r2, [pc, #76]	; (80008c0 <HAL_SPI_RxCpltCallback+0x60>)
 8000872:	54d1      	strb	r1, [r2, r3]
	RX_data[pos+1]=RX_buffer[1];
 8000874:	4b10      	ldr	r3, [pc, #64]	; (80008b8 <HAL_SPI_RxCpltCallback+0x58>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	3301      	adds	r3, #1
 800087a:	4a10      	ldr	r2, [pc, #64]	; (80008bc <HAL_SPI_RxCpltCallback+0x5c>)
 800087c:	7851      	ldrb	r1, [r2, #1]
 800087e:	4a10      	ldr	r2, [pc, #64]	; (80008c0 <HAL_SPI_RxCpltCallback+0x60>)
 8000880:	54d1      	strb	r1, [r2, r3]
	pos+=2;
 8000882:	4b0d      	ldr	r3, [pc, #52]	; (80008b8 <HAL_SPI_RxCpltCallback+0x58>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	1c9a      	adds	r2, r3, #2
 8000888:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <HAL_SPI_RxCpltCallback+0x58>)
 800088a:	601a      	str	r2, [r3, #0]
	//Send the data to the UART port of the PC in order to monitor the message in the Realterm console
	HAL_UART_Transmit(&huart1, RX_buffer, sizeof(RX_buffer), 1);
 800088c:	490b      	ldr	r1, [pc, #44]	; (80008bc <HAL_SPI_RxCpltCallback+0x5c>)
 800088e:	480d      	ldr	r0, [pc, #52]	; (80008c4 <HAL_SPI_RxCpltCallback+0x64>)
 8000890:	2301      	movs	r3, #1
 8000892:	2202      	movs	r2, #2
 8000894:	f002 fa62 	bl	8002d5c <HAL_UART_Transmit>
	//Clear RX_buffer to receive the next frame.
	RX_buffer[0]=0;
 8000898:	4b08      	ldr	r3, [pc, #32]	; (80008bc <HAL_SPI_RxCpltCallback+0x5c>)
 800089a:	2200      	movs	r2, #0
 800089c:	701a      	strb	r2, [r3, #0]
	RX_buffer[1]=0;
 800089e:	4b07      	ldr	r3, [pc, #28]	; (80008bc <HAL_SPI_RxCpltCallback+0x5c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	705a      	strb	r2, [r3, #1]
	//One the first reception is done we move to the second one and repeat the process above and so one for the rest of the data.
	HAL_SPI_Receive_IT(&hspi1, RX_buffer, sizeof(RX_buffer));//This line will move the program to the clpt function again.
 80008a4:	4905      	ldr	r1, [pc, #20]	; (80008bc <HAL_SPI_RxCpltCallback+0x5c>)
 80008a6:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <HAL_SPI_RxCpltCallback+0x68>)
 80008a8:	2202      	movs	r2, #2
 80008aa:	0018      	movs	r0, r3
 80008ac:	f001 fbb6 	bl	800201c <HAL_SPI_Receive_IT>
}
 80008b0:	46c0      	nop			; (mov r8, r8)
 80008b2:	46bd      	mov	sp, r7
 80008b4:	b002      	add	sp, #8
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20000134 	.word	0x20000134
 80008bc:	20000120 	.word	0x20000120
 80008c0:	20000124 	.word	0x20000124
 80008c4:	2000008c 	.word	0x2000008c
 80008c8:	20000028 	.word	0x20000028

080008cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d0:	b672      	cpsid	i
}
 80008d2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <Error_Handler+0x8>
	...

080008d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008de:	4b0f      	ldr	r3, [pc, #60]	; (800091c <HAL_MspInit+0x44>)
 80008e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008e2:	4b0e      	ldr	r3, [pc, #56]	; (800091c <HAL_MspInit+0x44>)
 80008e4:	2101      	movs	r1, #1
 80008e6:	430a      	orrs	r2, r1
 80008e8:	641a      	str	r2, [r3, #64]	; 0x40
 80008ea:	4b0c      	ldr	r3, [pc, #48]	; (800091c <HAL_MspInit+0x44>)
 80008ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ee:	2201      	movs	r2, #1
 80008f0:	4013      	ands	r3, r2
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f6:	4b09      	ldr	r3, [pc, #36]	; (800091c <HAL_MspInit+0x44>)
 80008f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008fa:	4b08      	ldr	r3, [pc, #32]	; (800091c <HAL_MspInit+0x44>)
 80008fc:	2180      	movs	r1, #128	; 0x80
 80008fe:	0549      	lsls	r1, r1, #21
 8000900:	430a      	orrs	r2, r1
 8000902:	63da      	str	r2, [r3, #60]	; 0x3c
 8000904:	4b05      	ldr	r3, [pc, #20]	; (800091c <HAL_MspInit+0x44>)
 8000906:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000908:	2380      	movs	r3, #128	; 0x80
 800090a:	055b      	lsls	r3, r3, #21
 800090c:	4013      	ands	r3, r2
 800090e:	603b      	str	r3, [r7, #0]
 8000910:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000912:	46c0      	nop			; (mov r8, r8)
 8000914:	46bd      	mov	sp, r7
 8000916:	b002      	add	sp, #8
 8000918:	bd80      	pop	{r7, pc}
 800091a:	46c0      	nop			; (mov r8, r8)
 800091c:	40021000 	.word	0x40021000

08000920 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000920:	b590      	push	{r4, r7, lr}
 8000922:	b08b      	sub	sp, #44	; 0x2c
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000928:	2414      	movs	r4, #20
 800092a:	193b      	adds	r3, r7, r4
 800092c:	0018      	movs	r0, r3
 800092e:	2314      	movs	r3, #20
 8000930:	001a      	movs	r2, r3
 8000932:	2100      	movs	r1, #0
 8000934:	f003 f80a 	bl	800394c <memset>
  if(hspi->Instance==SPI1)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a1f      	ldr	r2, [pc, #124]	; (80009bc <HAL_SPI_MspInit+0x9c>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d138      	bne.n	80009b4 <HAL_SPI_MspInit+0x94>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000942:	4b1f      	ldr	r3, [pc, #124]	; (80009c0 <HAL_SPI_MspInit+0xa0>)
 8000944:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000946:	4b1e      	ldr	r3, [pc, #120]	; (80009c0 <HAL_SPI_MspInit+0xa0>)
 8000948:	2180      	movs	r1, #128	; 0x80
 800094a:	0149      	lsls	r1, r1, #5
 800094c:	430a      	orrs	r2, r1
 800094e:	641a      	str	r2, [r3, #64]	; 0x40
 8000950:	4b1b      	ldr	r3, [pc, #108]	; (80009c0 <HAL_SPI_MspInit+0xa0>)
 8000952:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000954:	2380      	movs	r3, #128	; 0x80
 8000956:	015b      	lsls	r3, r3, #5
 8000958:	4013      	ands	r3, r2
 800095a:	613b      	str	r3, [r7, #16]
 800095c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800095e:	4b18      	ldr	r3, [pc, #96]	; (80009c0 <HAL_SPI_MspInit+0xa0>)
 8000960:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000962:	4b17      	ldr	r3, [pc, #92]	; (80009c0 <HAL_SPI_MspInit+0xa0>)
 8000964:	2101      	movs	r1, #1
 8000966:	430a      	orrs	r2, r1
 8000968:	635a      	str	r2, [r3, #52]	; 0x34
 800096a:	4b15      	ldr	r3, [pc, #84]	; (80009c0 <HAL_SPI_MspInit+0xa0>)
 800096c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800096e:	2201      	movs	r2, #1
 8000970:	4013      	ands	r3, r2
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA12 [PA10]     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_12;
 8000976:	0021      	movs	r1, r4
 8000978:	187b      	adds	r3, r7, r1
 800097a:	4a12      	ldr	r2, [pc, #72]	; (80009c4 <HAL_SPI_MspInit+0xa4>)
 800097c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097e:	187b      	adds	r3, r7, r1
 8000980:	2202      	movs	r2, #2
 8000982:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	187b      	adds	r3, r7, r1
 8000986:	2200      	movs	r2, #0
 8000988:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098a:	187b      	adds	r3, r7, r1
 800098c:	2200      	movs	r2, #0
 800098e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000990:	187b      	adds	r3, r7, r1
 8000992:	2200      	movs	r2, #0
 8000994:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000996:	187a      	adds	r2, r7, r1
 8000998:	23a0      	movs	r3, #160	; 0xa0
 800099a:	05db      	lsls	r3, r3, #23
 800099c:	0011      	movs	r1, r2
 800099e:	0018      	movs	r0, r3
 80009a0:	f000 fa96 	bl	8000ed0 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80009a4:	2200      	movs	r2, #0
 80009a6:	2100      	movs	r1, #0
 80009a8:	2019      	movs	r0, #25
 80009aa:	f000 f9f5 	bl	8000d98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80009ae:	2019      	movs	r0, #25
 80009b0:	f000 fa07 	bl	8000dc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80009b4:	46c0      	nop			; (mov r8, r8)
 80009b6:	46bd      	mov	sp, r7
 80009b8:	b00b      	add	sp, #44	; 0x2c
 80009ba:	bd90      	pop	{r4, r7, pc}
 80009bc:	40013000 	.word	0x40013000
 80009c0:	40021000 	.word	0x40021000
 80009c4:	00001002 	.word	0x00001002

080009c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009c8:	b590      	push	{r4, r7, lr}
 80009ca:	b095      	sub	sp, #84	; 0x54
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d0:	233c      	movs	r3, #60	; 0x3c
 80009d2:	18fb      	adds	r3, r7, r3
 80009d4:	0018      	movs	r0, r3
 80009d6:	2314      	movs	r3, #20
 80009d8:	001a      	movs	r2, r3
 80009da:	2100      	movs	r1, #0
 80009dc:	f002 ffb6 	bl	800394c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009e0:	2414      	movs	r4, #20
 80009e2:	193b      	adds	r3, r7, r4
 80009e4:	0018      	movs	r0, r3
 80009e6:	2328      	movs	r3, #40	; 0x28
 80009e8:	001a      	movs	r2, r3
 80009ea:	2100      	movs	r1, #0
 80009ec:	f002 ffae 	bl	800394c <memset>
  if(huart->Instance==USART1)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a22      	ldr	r2, [pc, #136]	; (8000a80 <HAL_UART_MspInit+0xb8>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d13d      	bne.n	8000a76 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80009fa:	193b      	adds	r3, r7, r4
 80009fc:	2201      	movs	r2, #1
 80009fe:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000a00:	193b      	adds	r3, r7, r4
 8000a02:	2200      	movs	r2, #0
 8000a04:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a06:	193b      	adds	r3, r7, r4
 8000a08:	0018      	movs	r0, r3
 8000a0a:	f001 f8d5 	bl	8001bb8 <HAL_RCCEx_PeriphCLKConfig>
 8000a0e:	1e03      	subs	r3, r0, #0
 8000a10:	d001      	beq.n	8000a16 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000a12:	f7ff ff5b 	bl	80008cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a16:	4b1b      	ldr	r3, [pc, #108]	; (8000a84 <HAL_UART_MspInit+0xbc>)
 8000a18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a1a:	4b1a      	ldr	r3, [pc, #104]	; (8000a84 <HAL_UART_MspInit+0xbc>)
 8000a1c:	2180      	movs	r1, #128	; 0x80
 8000a1e:	01c9      	lsls	r1, r1, #7
 8000a20:	430a      	orrs	r2, r1
 8000a22:	641a      	str	r2, [r3, #64]	; 0x40
 8000a24:	4b17      	ldr	r3, [pc, #92]	; (8000a84 <HAL_UART_MspInit+0xbc>)
 8000a26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a28:	2380      	movs	r3, #128	; 0x80
 8000a2a:	01db      	lsls	r3, r3, #7
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	613b      	str	r3, [r7, #16]
 8000a30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a32:	4b14      	ldr	r3, [pc, #80]	; (8000a84 <HAL_UART_MspInit+0xbc>)
 8000a34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a36:	4b13      	ldr	r3, [pc, #76]	; (8000a84 <HAL_UART_MspInit+0xbc>)
 8000a38:	2102      	movs	r1, #2
 8000a3a:	430a      	orrs	r2, r1
 8000a3c:	635a      	str	r2, [r3, #52]	; 0x34
 8000a3e:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <HAL_UART_MspInit+0xbc>)
 8000a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a42:	2202      	movs	r2, #2
 8000a44:	4013      	ands	r3, r2
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000a4a:	213c      	movs	r1, #60	; 0x3c
 8000a4c:	187b      	adds	r3, r7, r1
 8000a4e:	22c0      	movs	r2, #192	; 0xc0
 8000a50:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a52:	187b      	adds	r3, r7, r1
 8000a54:	2202      	movs	r2, #2
 8000a56:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	187b      	adds	r3, r7, r1
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5e:	187b      	adds	r3, r7, r1
 8000a60:	2200      	movs	r2, #0
 8000a62:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000a64:	187b      	adds	r3, r7, r1
 8000a66:	2200      	movs	r2, #0
 8000a68:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a6a:	187b      	adds	r3, r7, r1
 8000a6c:	4a06      	ldr	r2, [pc, #24]	; (8000a88 <HAL_UART_MspInit+0xc0>)
 8000a6e:	0019      	movs	r1, r3
 8000a70:	0010      	movs	r0, r2
 8000a72:	f000 fa2d 	bl	8000ed0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	b015      	add	sp, #84	; 0x54
 8000a7c:	bd90      	pop	{r4, r7, pc}
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	40013800 	.word	0x40013800
 8000a84:	40021000 	.word	0x40021000
 8000a88:	50000400 	.word	0x50000400

08000a8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <NMI_Handler+0x4>

08000a92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a92:	b580      	push	{r7, lr}
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a96:	e7fe      	b.n	8000a96 <HardFault_Handler+0x4>

08000a98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a9c:	46c0      	nop			; (mov r8, r8)
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ab0:	f000 f8aa 	bl	8000c08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ab4:	46c0      	nop			; (mov r8, r8)
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
	...

08000abc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000ac0:	4b03      	ldr	r3, [pc, #12]	; (8000ad0 <SPI1_IRQHandler+0x14>)
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	f001 fc38 	bl	8002338 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000ac8:	46c0      	nop			; (mov r8, r8)
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	46c0      	nop			; (mov r8, r8)
 8000ad0:	20000028 	.word	0x20000028

08000ad4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ad8:	46c0      	nop			; (mov r8, r8)
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
	...

08000ae0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ae0:	480d      	ldr	r0, [pc, #52]	; (8000b18 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ae2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ae4:	f7ff fff6 	bl	8000ad4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ae8:	480c      	ldr	r0, [pc, #48]	; (8000b1c <LoopForever+0x6>)
  ldr r1, =_edata
 8000aea:	490d      	ldr	r1, [pc, #52]	; (8000b20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000aec:	4a0d      	ldr	r2, [pc, #52]	; (8000b24 <LoopForever+0xe>)
  movs r3, #0
 8000aee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000af0:	e002      	b.n	8000af8 <LoopCopyDataInit>

08000af2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000af2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000af4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000af6:	3304      	adds	r3, #4

08000af8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000af8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000afa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000afc:	d3f9      	bcc.n	8000af2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000afe:	4a0a      	ldr	r2, [pc, #40]	; (8000b28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b00:	4c0a      	ldr	r4, [pc, #40]	; (8000b2c <LoopForever+0x16>)
  movs r3, #0
 8000b02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b04:	e001      	b.n	8000b0a <LoopFillZerobss>

08000b06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b08:	3204      	adds	r2, #4

08000b0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b0c:	d3fb      	bcc.n	8000b06 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b0e:	f002 ff25 	bl	800395c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000b12:	f7ff fd83 	bl	800061c <main>

08000b16 <LoopForever>:

LoopForever:
  b LoopForever
 8000b16:	e7fe      	b.n	8000b16 <LoopForever>
  ldr   r0, =_estack
 8000b18:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000b1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b20:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b24:	08003a54 	.word	0x08003a54
  ldr r2, =_sbss
 8000b28:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b2c:	2000013c 	.word	0x2000013c

08000b30 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b30:	e7fe      	b.n	8000b30 <ADC1_IRQHandler>
	...

08000b34 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b3a:	1dfb      	adds	r3, r7, #7
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b40:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <HAL_Init+0x3c>)
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	4b0a      	ldr	r3, [pc, #40]	; (8000b70 <HAL_Init+0x3c>)
 8000b46:	2180      	movs	r1, #128	; 0x80
 8000b48:	0049      	lsls	r1, r1, #1
 8000b4a:	430a      	orrs	r2, r1
 8000b4c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b4e:	2003      	movs	r0, #3
 8000b50:	f000 f810 	bl	8000b74 <HAL_InitTick>
 8000b54:	1e03      	subs	r3, r0, #0
 8000b56:	d003      	beq.n	8000b60 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000b58:	1dfb      	adds	r3, r7, #7
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	701a      	strb	r2, [r3, #0]
 8000b5e:	e001      	b.n	8000b64 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000b60:	f7ff feba 	bl	80008d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b64:	1dfb      	adds	r3, r7, #7
 8000b66:	781b      	ldrb	r3, [r3, #0]
}
 8000b68:	0018      	movs	r0, r3
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	b002      	add	sp, #8
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40022000 	.word	0x40022000

08000b74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b74:	b590      	push	{r4, r7, lr}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b7c:	230f      	movs	r3, #15
 8000b7e:	18fb      	adds	r3, r7, r3
 8000b80:	2200      	movs	r2, #0
 8000b82:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000b84:	4b1d      	ldr	r3, [pc, #116]	; (8000bfc <HAL_InitTick+0x88>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d02b      	beq.n	8000be4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000b8c:	4b1c      	ldr	r3, [pc, #112]	; (8000c00 <HAL_InitTick+0x8c>)
 8000b8e:	681c      	ldr	r4, [r3, #0]
 8000b90:	4b1a      	ldr	r3, [pc, #104]	; (8000bfc <HAL_InitTick+0x88>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	0019      	movs	r1, r3
 8000b96:	23fa      	movs	r3, #250	; 0xfa
 8000b98:	0098      	lsls	r0, r3, #2
 8000b9a:	f7ff fab3 	bl	8000104 <__udivsi3>
 8000b9e:	0003      	movs	r3, r0
 8000ba0:	0019      	movs	r1, r3
 8000ba2:	0020      	movs	r0, r4
 8000ba4:	f7ff faae 	bl	8000104 <__udivsi3>
 8000ba8:	0003      	movs	r3, r0
 8000baa:	0018      	movs	r0, r3
 8000bac:	f000 f919 	bl	8000de2 <HAL_SYSTICK_Config>
 8000bb0:	1e03      	subs	r3, r0, #0
 8000bb2:	d112      	bne.n	8000bda <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2b03      	cmp	r3, #3
 8000bb8:	d80a      	bhi.n	8000bd0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bba:	6879      	ldr	r1, [r7, #4]
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	425b      	negs	r3, r3
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	0018      	movs	r0, r3
 8000bc4:	f000 f8e8 	bl	8000d98 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bc8:	4b0e      	ldr	r3, [pc, #56]	; (8000c04 <HAL_InitTick+0x90>)
 8000bca:	687a      	ldr	r2, [r7, #4]
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	e00d      	b.n	8000bec <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000bd0:	230f      	movs	r3, #15
 8000bd2:	18fb      	adds	r3, r7, r3
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	701a      	strb	r2, [r3, #0]
 8000bd8:	e008      	b.n	8000bec <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bda:	230f      	movs	r3, #15
 8000bdc:	18fb      	adds	r3, r7, r3
 8000bde:	2201      	movs	r2, #1
 8000be0:	701a      	strb	r2, [r3, #0]
 8000be2:	e003      	b.n	8000bec <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000be4:	230f      	movs	r3, #15
 8000be6:	18fb      	adds	r3, r7, r3
 8000be8:	2201      	movs	r2, #1
 8000bea:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000bec:	230f      	movs	r3, #15
 8000bee:	18fb      	adds	r3, r7, r3
 8000bf0:	781b      	ldrb	r3, [r3, #0]
}
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	b005      	add	sp, #20
 8000bf8:	bd90      	pop	{r4, r7, pc}
 8000bfa:	46c0      	nop			; (mov r8, r8)
 8000bfc:	20000008 	.word	0x20000008
 8000c00:	20000000 	.word	0x20000000
 8000c04:	20000004 	.word	0x20000004

08000c08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c0c:	4b05      	ldr	r3, [pc, #20]	; (8000c24 <HAL_IncTick+0x1c>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	001a      	movs	r2, r3
 8000c12:	4b05      	ldr	r3, [pc, #20]	; (8000c28 <HAL_IncTick+0x20>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	18d2      	adds	r2, r2, r3
 8000c18:	4b03      	ldr	r3, [pc, #12]	; (8000c28 <HAL_IncTick+0x20>)
 8000c1a:	601a      	str	r2, [r3, #0]
}
 8000c1c:	46c0      	nop			; (mov r8, r8)
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	46c0      	nop			; (mov r8, r8)
 8000c24:	20000008 	.word	0x20000008
 8000c28:	20000138 	.word	0x20000138

08000c2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c30:	4b02      	ldr	r3, [pc, #8]	; (8000c3c <HAL_GetTick+0x10>)
 8000c32:	681b      	ldr	r3, [r3, #0]
}
 8000c34:	0018      	movs	r0, r3
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	46c0      	nop			; (mov r8, r8)
 8000c3c:	20000138 	.word	0x20000138

08000c40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	0002      	movs	r2, r0
 8000c48:	1dfb      	adds	r3, r7, #7
 8000c4a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c4c:	1dfb      	adds	r3, r7, #7
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	2b7f      	cmp	r3, #127	; 0x7f
 8000c52:	d809      	bhi.n	8000c68 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c54:	1dfb      	adds	r3, r7, #7
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	001a      	movs	r2, r3
 8000c5a:	231f      	movs	r3, #31
 8000c5c:	401a      	ands	r2, r3
 8000c5e:	4b04      	ldr	r3, [pc, #16]	; (8000c70 <__NVIC_EnableIRQ+0x30>)
 8000c60:	2101      	movs	r1, #1
 8000c62:	4091      	lsls	r1, r2
 8000c64:	000a      	movs	r2, r1
 8000c66:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000c68:	46c0      	nop			; (mov r8, r8)
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	b002      	add	sp, #8
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	e000e100 	.word	0xe000e100

08000c74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c74:	b590      	push	{r4, r7, lr}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	0002      	movs	r2, r0
 8000c7c:	6039      	str	r1, [r7, #0]
 8000c7e:	1dfb      	adds	r3, r7, #7
 8000c80:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c82:	1dfb      	adds	r3, r7, #7
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	2b7f      	cmp	r3, #127	; 0x7f
 8000c88:	d828      	bhi.n	8000cdc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c8a:	4a2f      	ldr	r2, [pc, #188]	; (8000d48 <__NVIC_SetPriority+0xd4>)
 8000c8c:	1dfb      	adds	r3, r7, #7
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	b25b      	sxtb	r3, r3
 8000c92:	089b      	lsrs	r3, r3, #2
 8000c94:	33c0      	adds	r3, #192	; 0xc0
 8000c96:	009b      	lsls	r3, r3, #2
 8000c98:	589b      	ldr	r3, [r3, r2]
 8000c9a:	1dfa      	adds	r2, r7, #7
 8000c9c:	7812      	ldrb	r2, [r2, #0]
 8000c9e:	0011      	movs	r1, r2
 8000ca0:	2203      	movs	r2, #3
 8000ca2:	400a      	ands	r2, r1
 8000ca4:	00d2      	lsls	r2, r2, #3
 8000ca6:	21ff      	movs	r1, #255	; 0xff
 8000ca8:	4091      	lsls	r1, r2
 8000caa:	000a      	movs	r2, r1
 8000cac:	43d2      	mvns	r2, r2
 8000cae:	401a      	ands	r2, r3
 8000cb0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	019b      	lsls	r3, r3, #6
 8000cb6:	22ff      	movs	r2, #255	; 0xff
 8000cb8:	401a      	ands	r2, r3
 8000cba:	1dfb      	adds	r3, r7, #7
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	4003      	ands	r3, r0
 8000cc4:	00db      	lsls	r3, r3, #3
 8000cc6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cc8:	481f      	ldr	r0, [pc, #124]	; (8000d48 <__NVIC_SetPriority+0xd4>)
 8000cca:	1dfb      	adds	r3, r7, #7
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	b25b      	sxtb	r3, r3
 8000cd0:	089b      	lsrs	r3, r3, #2
 8000cd2:	430a      	orrs	r2, r1
 8000cd4:	33c0      	adds	r3, #192	; 0xc0
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000cda:	e031      	b.n	8000d40 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cdc:	4a1b      	ldr	r2, [pc, #108]	; (8000d4c <__NVIC_SetPriority+0xd8>)
 8000cde:	1dfb      	adds	r3, r7, #7
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	0019      	movs	r1, r3
 8000ce4:	230f      	movs	r3, #15
 8000ce6:	400b      	ands	r3, r1
 8000ce8:	3b08      	subs	r3, #8
 8000cea:	089b      	lsrs	r3, r3, #2
 8000cec:	3306      	adds	r3, #6
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	18d3      	adds	r3, r2, r3
 8000cf2:	3304      	adds	r3, #4
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	1dfa      	adds	r2, r7, #7
 8000cf8:	7812      	ldrb	r2, [r2, #0]
 8000cfa:	0011      	movs	r1, r2
 8000cfc:	2203      	movs	r2, #3
 8000cfe:	400a      	ands	r2, r1
 8000d00:	00d2      	lsls	r2, r2, #3
 8000d02:	21ff      	movs	r1, #255	; 0xff
 8000d04:	4091      	lsls	r1, r2
 8000d06:	000a      	movs	r2, r1
 8000d08:	43d2      	mvns	r2, r2
 8000d0a:	401a      	ands	r2, r3
 8000d0c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	019b      	lsls	r3, r3, #6
 8000d12:	22ff      	movs	r2, #255	; 0xff
 8000d14:	401a      	ands	r2, r3
 8000d16:	1dfb      	adds	r3, r7, #7
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	2303      	movs	r3, #3
 8000d1e:	4003      	ands	r3, r0
 8000d20:	00db      	lsls	r3, r3, #3
 8000d22:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d24:	4809      	ldr	r0, [pc, #36]	; (8000d4c <__NVIC_SetPriority+0xd8>)
 8000d26:	1dfb      	adds	r3, r7, #7
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	001c      	movs	r4, r3
 8000d2c:	230f      	movs	r3, #15
 8000d2e:	4023      	ands	r3, r4
 8000d30:	3b08      	subs	r3, #8
 8000d32:	089b      	lsrs	r3, r3, #2
 8000d34:	430a      	orrs	r2, r1
 8000d36:	3306      	adds	r3, #6
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	18c3      	adds	r3, r0, r3
 8000d3c:	3304      	adds	r3, #4
 8000d3e:	601a      	str	r2, [r3, #0]
}
 8000d40:	46c0      	nop			; (mov r8, r8)
 8000d42:	46bd      	mov	sp, r7
 8000d44:	b003      	add	sp, #12
 8000d46:	bd90      	pop	{r4, r7, pc}
 8000d48:	e000e100 	.word	0xe000e100
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	1e5a      	subs	r2, r3, #1
 8000d5c:	2380      	movs	r3, #128	; 0x80
 8000d5e:	045b      	lsls	r3, r3, #17
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d301      	bcc.n	8000d68 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d64:	2301      	movs	r3, #1
 8000d66:	e010      	b.n	8000d8a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d68:	4b0a      	ldr	r3, [pc, #40]	; (8000d94 <SysTick_Config+0x44>)
 8000d6a:	687a      	ldr	r2, [r7, #4]
 8000d6c:	3a01      	subs	r2, #1
 8000d6e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d70:	2301      	movs	r3, #1
 8000d72:	425b      	negs	r3, r3
 8000d74:	2103      	movs	r1, #3
 8000d76:	0018      	movs	r0, r3
 8000d78:	f7ff ff7c 	bl	8000c74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d7c:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <SysTick_Config+0x44>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d82:	4b04      	ldr	r3, [pc, #16]	; (8000d94 <SysTick_Config+0x44>)
 8000d84:	2207      	movs	r2, #7
 8000d86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d88:	2300      	movs	r3, #0
}
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	b002      	add	sp, #8
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	46c0      	nop			; (mov r8, r8)
 8000d94:	e000e010 	.word	0xe000e010

08000d98 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60b9      	str	r1, [r7, #8]
 8000da0:	607a      	str	r2, [r7, #4]
 8000da2:	210f      	movs	r1, #15
 8000da4:	187b      	adds	r3, r7, r1
 8000da6:	1c02      	adds	r2, r0, #0
 8000da8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000daa:	68ba      	ldr	r2, [r7, #8]
 8000dac:	187b      	adds	r3, r7, r1
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	b25b      	sxtb	r3, r3
 8000db2:	0011      	movs	r1, r2
 8000db4:	0018      	movs	r0, r3
 8000db6:	f7ff ff5d 	bl	8000c74 <__NVIC_SetPriority>
}
 8000dba:	46c0      	nop			; (mov r8, r8)
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	b004      	add	sp, #16
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b082      	sub	sp, #8
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	0002      	movs	r2, r0
 8000dca:	1dfb      	adds	r3, r7, #7
 8000dcc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dce:	1dfb      	adds	r3, r7, #7
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	b25b      	sxtb	r3, r3
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	f7ff ff33 	bl	8000c40 <__NVIC_EnableIRQ>
}
 8000dda:	46c0      	nop			; (mov r8, r8)
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	b002      	add	sp, #8
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b082      	sub	sp, #8
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	0018      	movs	r0, r3
 8000dee:	f7ff ffaf 	bl	8000d50 <SysTick_Config>
 8000df2:	0003      	movs	r3, r0
}
 8000df4:	0018      	movs	r0, r3
 8000df6:	46bd      	mov	sp, r7
 8000df8:	b002      	add	sp, #8
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e04:	210f      	movs	r1, #15
 8000e06:	187b      	adds	r3, r7, r1
 8000e08:	2200      	movs	r2, #0
 8000e0a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2225      	movs	r2, #37	; 0x25
 8000e10:	5c9b      	ldrb	r3, [r3, r2]
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	2b02      	cmp	r3, #2
 8000e16:	d006      	beq.n	8000e26 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2204      	movs	r2, #4
 8000e1c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000e1e:	187b      	adds	r3, r7, r1
 8000e20:	2201      	movs	r2, #1
 8000e22:	701a      	strb	r2, [r3, #0]
 8000e24:	e049      	b.n	8000eba <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	210e      	movs	r1, #14
 8000e32:	438a      	bics	r2, r1
 8000e34:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2101      	movs	r1, #1
 8000e42:	438a      	bics	r2, r1
 8000e44:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e50:	491d      	ldr	r1, [pc, #116]	; (8000ec8 <HAL_DMA_Abort_IT+0xcc>)
 8000e52:	400a      	ands	r2, r1
 8000e54:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8000e56:	4b1d      	ldr	r3, [pc, #116]	; (8000ecc <HAL_DMA_Abort_IT+0xd0>)
 8000e58:	6859      	ldr	r1, [r3, #4]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5e:	221c      	movs	r2, #28
 8000e60:	4013      	ands	r3, r2
 8000e62:	2201      	movs	r2, #1
 8000e64:	409a      	lsls	r2, r3
 8000e66:	4b19      	ldr	r3, [pc, #100]	; (8000ecc <HAL_DMA_Abort_IT+0xd0>)
 8000e68:	430a      	orrs	r2, r1
 8000e6a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e70:	687a      	ldr	r2, [r7, #4]
 8000e72:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000e74:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d00c      	beq.n	8000e98 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e88:	490f      	ldr	r1, [pc, #60]	; (8000ec8 <HAL_DMA_Abort_IT+0xcc>)
 8000e8a:	400a      	ands	r2, r1
 8000e8c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8000e96:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2225      	movs	r2, #37	; 0x25
 8000e9c:	2101      	movs	r1, #1
 8000e9e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2224      	movs	r2, #36	; 0x24
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d004      	beq.n	8000eba <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000eb4:	687a      	ldr	r2, [r7, #4]
 8000eb6:	0010      	movs	r0, r2
 8000eb8:	4798      	blx	r3
    }
  }
  return status;
 8000eba:	230f      	movs	r3, #15
 8000ebc:	18fb      	adds	r3, r7, r3
 8000ebe:	781b      	ldrb	r3, [r3, #0]
}
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	b004      	add	sp, #16
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	fffffeff 	.word	0xfffffeff
 8000ecc:	40020000 	.word	0x40020000

08000ed0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eda:	2300      	movs	r3, #0
 8000edc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ede:	e147      	b.n	8001170 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	697a      	ldr	r2, [r7, #20]
 8000ee8:	4091      	lsls	r1, r2
 8000eea:	000a      	movs	r2, r1
 8000eec:	4013      	ands	r3, r2
 8000eee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d100      	bne.n	8000ef8 <HAL_GPIO_Init+0x28>
 8000ef6:	e138      	b.n	800116a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	2203      	movs	r2, #3
 8000efe:	4013      	ands	r3, r2
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d005      	beq.n	8000f10 <HAL_GPIO_Init+0x40>
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	2203      	movs	r2, #3
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	2b02      	cmp	r3, #2
 8000f0e:	d130      	bne.n	8000f72 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	2203      	movs	r2, #3
 8000f1c:	409a      	lsls	r2, r3
 8000f1e:	0013      	movs	r3, r2
 8000f20:	43da      	mvns	r2, r3
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	4013      	ands	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	68da      	ldr	r2, [r3, #12]
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	409a      	lsls	r2, r3
 8000f32:	0013      	movs	r3, r2
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f46:	2201      	movs	r2, #1
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	409a      	lsls	r2, r3
 8000f4c:	0013      	movs	r3, r2
 8000f4e:	43da      	mvns	r2, r3
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	4013      	ands	r3, r2
 8000f54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	091b      	lsrs	r3, r3, #4
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	401a      	ands	r2, r3
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	409a      	lsls	r2, r3
 8000f64:	0013      	movs	r3, r2
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	2203      	movs	r2, #3
 8000f78:	4013      	ands	r3, r2
 8000f7a:	2b03      	cmp	r3, #3
 8000f7c:	d017      	beq.n	8000fae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	68db      	ldr	r3, [r3, #12]
 8000f82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	2203      	movs	r2, #3
 8000f8a:	409a      	lsls	r2, r3
 8000f8c:	0013      	movs	r3, r2
 8000f8e:	43da      	mvns	r2, r3
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	4013      	ands	r3, r2
 8000f94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	689a      	ldr	r2, [r3, #8]
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	409a      	lsls	r2, r3
 8000fa0:	0013      	movs	r3, r2
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	2203      	movs	r2, #3
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	d123      	bne.n	8001002 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	08da      	lsrs	r2, r3, #3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	3208      	adds	r2, #8
 8000fc2:	0092      	lsls	r2, r2, #2
 8000fc4:	58d3      	ldr	r3, [r2, r3]
 8000fc6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	2207      	movs	r2, #7
 8000fcc:	4013      	ands	r3, r2
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	220f      	movs	r2, #15
 8000fd2:	409a      	lsls	r2, r3
 8000fd4:	0013      	movs	r3, r2
 8000fd6:	43da      	mvns	r2, r3
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	691a      	ldr	r2, [r3, #16]
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	2107      	movs	r1, #7
 8000fe6:	400b      	ands	r3, r1
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	409a      	lsls	r2, r3
 8000fec:	0013      	movs	r3, r2
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	08da      	lsrs	r2, r3, #3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3208      	adds	r2, #8
 8000ffc:	0092      	lsls	r2, r2, #2
 8000ffe:	6939      	ldr	r1, [r7, #16]
 8001000:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	2203      	movs	r2, #3
 800100e:	409a      	lsls	r2, r3
 8001010:	0013      	movs	r3, r2
 8001012:	43da      	mvns	r2, r3
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	4013      	ands	r3, r2
 8001018:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	2203      	movs	r2, #3
 8001020:	401a      	ands	r2, r3
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	409a      	lsls	r2, r3
 8001028:	0013      	movs	r3, r2
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	4313      	orrs	r3, r2
 800102e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685a      	ldr	r2, [r3, #4]
 800103a:	23c0      	movs	r3, #192	; 0xc0
 800103c:	029b      	lsls	r3, r3, #10
 800103e:	4013      	ands	r3, r2
 8001040:	d100      	bne.n	8001044 <HAL_GPIO_Init+0x174>
 8001042:	e092      	b.n	800116a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001044:	4a50      	ldr	r2, [pc, #320]	; (8001188 <HAL_GPIO_Init+0x2b8>)
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	089b      	lsrs	r3, r3, #2
 800104a:	3318      	adds	r3, #24
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	589b      	ldr	r3, [r3, r2]
 8001050:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	2203      	movs	r2, #3
 8001056:	4013      	ands	r3, r2
 8001058:	00db      	lsls	r3, r3, #3
 800105a:	220f      	movs	r2, #15
 800105c:	409a      	lsls	r2, r3
 800105e:	0013      	movs	r3, r2
 8001060:	43da      	mvns	r2, r3
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	4013      	ands	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001068:	687a      	ldr	r2, [r7, #4]
 800106a:	23a0      	movs	r3, #160	; 0xa0
 800106c:	05db      	lsls	r3, r3, #23
 800106e:	429a      	cmp	r2, r3
 8001070:	d013      	beq.n	800109a <HAL_GPIO_Init+0x1ca>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a45      	ldr	r2, [pc, #276]	; (800118c <HAL_GPIO_Init+0x2bc>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d00d      	beq.n	8001096 <HAL_GPIO_Init+0x1c6>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a44      	ldr	r2, [pc, #272]	; (8001190 <HAL_GPIO_Init+0x2c0>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d007      	beq.n	8001092 <HAL_GPIO_Init+0x1c2>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a43      	ldr	r2, [pc, #268]	; (8001194 <HAL_GPIO_Init+0x2c4>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d101      	bne.n	800108e <HAL_GPIO_Init+0x1be>
 800108a:	2303      	movs	r3, #3
 800108c:	e006      	b.n	800109c <HAL_GPIO_Init+0x1cc>
 800108e:	2305      	movs	r3, #5
 8001090:	e004      	b.n	800109c <HAL_GPIO_Init+0x1cc>
 8001092:	2302      	movs	r3, #2
 8001094:	e002      	b.n	800109c <HAL_GPIO_Init+0x1cc>
 8001096:	2301      	movs	r3, #1
 8001098:	e000      	b.n	800109c <HAL_GPIO_Init+0x1cc>
 800109a:	2300      	movs	r3, #0
 800109c:	697a      	ldr	r2, [r7, #20]
 800109e:	2103      	movs	r1, #3
 80010a0:	400a      	ands	r2, r1
 80010a2:	00d2      	lsls	r2, r2, #3
 80010a4:	4093      	lsls	r3, r2
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80010ac:	4936      	ldr	r1, [pc, #216]	; (8001188 <HAL_GPIO_Init+0x2b8>)
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	089b      	lsrs	r3, r3, #2
 80010b2:	3318      	adds	r3, #24
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010ba:	4b33      	ldr	r3, [pc, #204]	; (8001188 <HAL_GPIO_Init+0x2b8>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	43da      	mvns	r2, r3
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	4013      	ands	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685a      	ldr	r2, [r3, #4]
 80010ce:	2380      	movs	r3, #128	; 0x80
 80010d0:	035b      	lsls	r3, r3, #13
 80010d2:	4013      	ands	r3, r2
 80010d4:	d003      	beq.n	80010de <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	4313      	orrs	r3, r2
 80010dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010de:	4b2a      	ldr	r3, [pc, #168]	; (8001188 <HAL_GPIO_Init+0x2b8>)
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80010e4:	4b28      	ldr	r3, [pc, #160]	; (8001188 <HAL_GPIO_Init+0x2b8>)
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	43da      	mvns	r2, r3
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	4013      	ands	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685a      	ldr	r2, [r3, #4]
 80010f8:	2380      	movs	r3, #128	; 0x80
 80010fa:	039b      	lsls	r3, r3, #14
 80010fc:	4013      	ands	r3, r2
 80010fe:	d003      	beq.n	8001108 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	4313      	orrs	r3, r2
 8001106:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001108:	4b1f      	ldr	r3, [pc, #124]	; (8001188 <HAL_GPIO_Init+0x2b8>)
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800110e:	4a1e      	ldr	r2, [pc, #120]	; (8001188 <HAL_GPIO_Init+0x2b8>)
 8001110:	2384      	movs	r3, #132	; 0x84
 8001112:	58d3      	ldr	r3, [r2, r3]
 8001114:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	43da      	mvns	r2, r3
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	4013      	ands	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685a      	ldr	r2, [r3, #4]
 8001124:	2380      	movs	r3, #128	; 0x80
 8001126:	029b      	lsls	r3, r3, #10
 8001128:	4013      	ands	r3, r2
 800112a:	d003      	beq.n	8001134 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	4313      	orrs	r3, r2
 8001132:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001134:	4914      	ldr	r1, [pc, #80]	; (8001188 <HAL_GPIO_Init+0x2b8>)
 8001136:	2284      	movs	r2, #132	; 0x84
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800113c:	4a12      	ldr	r2, [pc, #72]	; (8001188 <HAL_GPIO_Init+0x2b8>)
 800113e:	2380      	movs	r3, #128	; 0x80
 8001140:	58d3      	ldr	r3, [r2, r3]
 8001142:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	43da      	mvns	r2, r3
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	4013      	ands	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685a      	ldr	r2, [r3, #4]
 8001152:	2380      	movs	r3, #128	; 0x80
 8001154:	025b      	lsls	r3, r3, #9
 8001156:	4013      	ands	r3, r2
 8001158:	d003      	beq.n	8001162 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	4313      	orrs	r3, r2
 8001160:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001162:	4909      	ldr	r1, [pc, #36]	; (8001188 <HAL_GPIO_Init+0x2b8>)
 8001164:	2280      	movs	r2, #128	; 0x80
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	3301      	adds	r3, #1
 800116e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	40da      	lsrs	r2, r3
 8001178:	1e13      	subs	r3, r2, #0
 800117a:	d000      	beq.n	800117e <HAL_GPIO_Init+0x2ae>
 800117c:	e6b0      	b.n	8000ee0 <HAL_GPIO_Init+0x10>
  }
}
 800117e:	46c0      	nop			; (mov r8, r8)
 8001180:	46c0      	nop			; (mov r8, r8)
 8001182:	46bd      	mov	sp, r7
 8001184:	b006      	add	sp, #24
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40021800 	.word	0x40021800
 800118c:	50000400 	.word	0x50000400
 8001190:	50000800 	.word	0x50000800
 8001194:	50000c00 	.word	0x50000c00

08001198 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80011a0:	4b19      	ldr	r3, [pc, #100]	; (8001208 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a19      	ldr	r2, [pc, #100]	; (800120c <HAL_PWREx_ControlVoltageScaling+0x74>)
 80011a6:	4013      	ands	r3, r2
 80011a8:	0019      	movs	r1, r3
 80011aa:	4b17      	ldr	r3, [pc, #92]	; (8001208 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	430a      	orrs	r2, r1
 80011b0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	2380      	movs	r3, #128	; 0x80
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d11f      	bne.n	80011fc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80011bc:	4b14      	ldr	r3, [pc, #80]	; (8001210 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	0013      	movs	r3, r2
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	189b      	adds	r3, r3, r2
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	4912      	ldr	r1, [pc, #72]	; (8001214 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80011ca:	0018      	movs	r0, r3
 80011cc:	f7fe ff9a 	bl	8000104 <__udivsi3>
 80011d0:	0003      	movs	r3, r0
 80011d2:	3301      	adds	r3, #1
 80011d4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011d6:	e008      	b.n	80011ea <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d003      	beq.n	80011e6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	3b01      	subs	r3, #1
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	e001      	b.n	80011ea <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80011e6:	2303      	movs	r3, #3
 80011e8:	e009      	b.n	80011fe <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011ea:	4b07      	ldr	r3, [pc, #28]	; (8001208 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80011ec:	695a      	ldr	r2, [r3, #20]
 80011ee:	2380      	movs	r3, #128	; 0x80
 80011f0:	00db      	lsls	r3, r3, #3
 80011f2:	401a      	ands	r2, r3
 80011f4:	2380      	movs	r3, #128	; 0x80
 80011f6:	00db      	lsls	r3, r3, #3
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d0ed      	beq.n	80011d8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	0018      	movs	r0, r3
 8001200:	46bd      	mov	sp, r7
 8001202:	b004      	add	sp, #16
 8001204:	bd80      	pop	{r7, pc}
 8001206:	46c0      	nop			; (mov r8, r8)
 8001208:	40007000 	.word	0x40007000
 800120c:	fffff9ff 	.word	0xfffff9ff
 8001210:	20000000 	.word	0x20000000
 8001214:	000f4240 	.word	0x000f4240

08001218 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800121c:	4b03      	ldr	r3, [pc, #12]	; (800122c <LL_RCC_GetAPB1Prescaler+0x14>)
 800121e:	689a      	ldr	r2, [r3, #8]
 8001220:	23e0      	movs	r3, #224	; 0xe0
 8001222:	01db      	lsls	r3, r3, #7
 8001224:	4013      	ands	r3, r2
}
 8001226:	0018      	movs	r0, r3
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	40021000 	.word	0x40021000

08001230 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b088      	sub	sp, #32
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d101      	bne.n	8001242 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e2fe      	b.n	8001840 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2201      	movs	r2, #1
 8001248:	4013      	ands	r3, r2
 800124a:	d100      	bne.n	800124e <HAL_RCC_OscConfig+0x1e>
 800124c:	e07c      	b.n	8001348 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800124e:	4bc3      	ldr	r3, [pc, #780]	; (800155c <HAL_RCC_OscConfig+0x32c>)
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	2238      	movs	r2, #56	; 0x38
 8001254:	4013      	ands	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001258:	4bc0      	ldr	r3, [pc, #768]	; (800155c <HAL_RCC_OscConfig+0x32c>)
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	2203      	movs	r2, #3
 800125e:	4013      	ands	r3, r2
 8001260:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	2b10      	cmp	r3, #16
 8001266:	d102      	bne.n	800126e <HAL_RCC_OscConfig+0x3e>
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	2b03      	cmp	r3, #3
 800126c:	d002      	beq.n	8001274 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	2b08      	cmp	r3, #8
 8001272:	d10b      	bne.n	800128c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001274:	4bb9      	ldr	r3, [pc, #740]	; (800155c <HAL_RCC_OscConfig+0x32c>)
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	2380      	movs	r3, #128	; 0x80
 800127a:	029b      	lsls	r3, r3, #10
 800127c:	4013      	ands	r3, r2
 800127e:	d062      	beq.n	8001346 <HAL_RCC_OscConfig+0x116>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d15e      	bne.n	8001346 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001288:	2301      	movs	r3, #1
 800128a:	e2d9      	b.n	8001840 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685a      	ldr	r2, [r3, #4]
 8001290:	2380      	movs	r3, #128	; 0x80
 8001292:	025b      	lsls	r3, r3, #9
 8001294:	429a      	cmp	r2, r3
 8001296:	d107      	bne.n	80012a8 <HAL_RCC_OscConfig+0x78>
 8001298:	4bb0      	ldr	r3, [pc, #704]	; (800155c <HAL_RCC_OscConfig+0x32c>)
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	4baf      	ldr	r3, [pc, #700]	; (800155c <HAL_RCC_OscConfig+0x32c>)
 800129e:	2180      	movs	r1, #128	; 0x80
 80012a0:	0249      	lsls	r1, r1, #9
 80012a2:	430a      	orrs	r2, r1
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	e020      	b.n	80012ea <HAL_RCC_OscConfig+0xba>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685a      	ldr	r2, [r3, #4]
 80012ac:	23a0      	movs	r3, #160	; 0xa0
 80012ae:	02db      	lsls	r3, r3, #11
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d10e      	bne.n	80012d2 <HAL_RCC_OscConfig+0xa2>
 80012b4:	4ba9      	ldr	r3, [pc, #676]	; (800155c <HAL_RCC_OscConfig+0x32c>)
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	4ba8      	ldr	r3, [pc, #672]	; (800155c <HAL_RCC_OscConfig+0x32c>)
 80012ba:	2180      	movs	r1, #128	; 0x80
 80012bc:	02c9      	lsls	r1, r1, #11
 80012be:	430a      	orrs	r2, r1
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	4ba6      	ldr	r3, [pc, #664]	; (800155c <HAL_RCC_OscConfig+0x32c>)
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	4ba5      	ldr	r3, [pc, #660]	; (800155c <HAL_RCC_OscConfig+0x32c>)
 80012c8:	2180      	movs	r1, #128	; 0x80
 80012ca:	0249      	lsls	r1, r1, #9
 80012cc:	430a      	orrs	r2, r1
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	e00b      	b.n	80012ea <HAL_RCC_OscConfig+0xba>
 80012d2:	4ba2      	ldr	r3, [pc, #648]	; (800155c <HAL_RCC_OscConfig+0x32c>)
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	4ba1      	ldr	r3, [pc, #644]	; (800155c <HAL_RCC_OscConfig+0x32c>)
 80012d8:	49a1      	ldr	r1, [pc, #644]	; (8001560 <HAL_RCC_OscConfig+0x330>)
 80012da:	400a      	ands	r2, r1
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	4b9f      	ldr	r3, [pc, #636]	; (800155c <HAL_RCC_OscConfig+0x32c>)
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	4b9e      	ldr	r3, [pc, #632]	; (800155c <HAL_RCC_OscConfig+0x32c>)
 80012e4:	499f      	ldr	r1, [pc, #636]	; (8001564 <HAL_RCC_OscConfig+0x334>)
 80012e6:	400a      	ands	r2, r1
 80012e8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d014      	beq.n	800131c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012f2:	f7ff fc9b 	bl	8000c2c <HAL_GetTick>
 80012f6:	0003      	movs	r3, r0
 80012f8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012fa:	e008      	b.n	800130e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012fc:	f7ff fc96 	bl	8000c2c <HAL_GetTick>
 8001300:	0002      	movs	r2, r0
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	2b64      	cmp	r3, #100	; 0x64
 8001308:	d901      	bls.n	800130e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e298      	b.n	8001840 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800130e:	4b93      	ldr	r3, [pc, #588]	; (800155c <HAL_RCC_OscConfig+0x32c>)
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	2380      	movs	r3, #128	; 0x80
 8001314:	029b      	lsls	r3, r3, #10
 8001316:	4013      	ands	r3, r2
 8001318:	d0f0      	beq.n	80012fc <HAL_RCC_OscConfig+0xcc>
 800131a:	e015      	b.n	8001348 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800131c:	f7ff fc86 	bl	8000c2c <HAL_GetTick>
 8001320:	0003      	movs	r3, r0
 8001322:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001324:	e008      	b.n	8001338 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001326:	f7ff fc81 	bl	8000c2c <HAL_GetTick>
 800132a:	0002      	movs	r2, r0
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	2b64      	cmp	r3, #100	; 0x64
 8001332:	d901      	bls.n	8001338 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001334:	2303      	movs	r3, #3
 8001336:	e283      	b.n	8001840 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001338:	4b88      	ldr	r3, [pc, #544]	; (800155c <HAL_RCC_OscConfig+0x32c>)
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	2380      	movs	r3, #128	; 0x80
 800133e:	029b      	lsls	r3, r3, #10
 8001340:	4013      	ands	r3, r2
 8001342:	d1f0      	bne.n	8001326 <HAL_RCC_OscConfig+0xf6>
 8001344:	e000      	b.n	8001348 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001346:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2202      	movs	r2, #2
 800134e:	4013      	ands	r3, r2
 8001350:	d100      	bne.n	8001354 <HAL_RCC_OscConfig+0x124>
 8001352:	e099      	b.n	8001488 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001354:	4b81      	ldr	r3, [pc, #516]	; (800155c <HAL_RCC_OscConfig+0x32c>)
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	2238      	movs	r2, #56	; 0x38
 800135a:	4013      	ands	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800135e:	4b7f      	ldr	r3, [pc, #508]	; (800155c <HAL_RCC_OscConfig+0x32c>)
 8001360:	68db      	ldr	r3, [r3, #12]
 8001362:	2203      	movs	r2, #3
 8001364:	4013      	ands	r3, r2
 8001366:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	2b10      	cmp	r3, #16
 800136c:	d102      	bne.n	8001374 <HAL_RCC_OscConfig+0x144>
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	2b02      	cmp	r3, #2
 8001372:	d002      	beq.n	800137a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d135      	bne.n	80013e6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800137a:	4b78      	ldr	r3, [pc, #480]	; (800155c <HAL_RCC_OscConfig+0x32c>)
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	2380      	movs	r3, #128	; 0x80
 8001380:	00db      	lsls	r3, r3, #3
 8001382:	4013      	ands	r3, r2
 8001384:	d005      	beq.n	8001392 <HAL_RCC_OscConfig+0x162>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	68db      	ldr	r3, [r3, #12]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d101      	bne.n	8001392 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e256      	b.n	8001840 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001392:	4b72      	ldr	r3, [pc, #456]	; (800155c <HAL_RCC_OscConfig+0x32c>)
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	4a74      	ldr	r2, [pc, #464]	; (8001568 <HAL_RCC_OscConfig+0x338>)
 8001398:	4013      	ands	r3, r2
 800139a:	0019      	movs	r1, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	695b      	ldr	r3, [r3, #20]
 80013a0:	021a      	lsls	r2, r3, #8
 80013a2:	4b6e      	ldr	r3, [pc, #440]	; (800155c <HAL_RCC_OscConfig+0x32c>)
 80013a4:	430a      	orrs	r2, r1
 80013a6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d112      	bne.n	80013d4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80013ae:	4b6b      	ldr	r3, [pc, #428]	; (800155c <HAL_RCC_OscConfig+0x32c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a6e      	ldr	r2, [pc, #440]	; (800156c <HAL_RCC_OscConfig+0x33c>)
 80013b4:	4013      	ands	r3, r2
 80013b6:	0019      	movs	r1, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	691a      	ldr	r2, [r3, #16]
 80013bc:	4b67      	ldr	r3, [pc, #412]	; (800155c <HAL_RCC_OscConfig+0x32c>)
 80013be:	430a      	orrs	r2, r1
 80013c0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80013c2:	4b66      	ldr	r3, [pc, #408]	; (800155c <HAL_RCC_OscConfig+0x32c>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	0adb      	lsrs	r3, r3, #11
 80013c8:	2207      	movs	r2, #7
 80013ca:	4013      	ands	r3, r2
 80013cc:	4a68      	ldr	r2, [pc, #416]	; (8001570 <HAL_RCC_OscConfig+0x340>)
 80013ce:	40da      	lsrs	r2, r3
 80013d0:	4b68      	ldr	r3, [pc, #416]	; (8001574 <HAL_RCC_OscConfig+0x344>)
 80013d2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80013d4:	4b68      	ldr	r3, [pc, #416]	; (8001578 <HAL_RCC_OscConfig+0x348>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	0018      	movs	r0, r3
 80013da:	f7ff fbcb 	bl	8000b74 <HAL_InitTick>
 80013de:	1e03      	subs	r3, r0, #0
 80013e0:	d051      	beq.n	8001486 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e22c      	b.n	8001840 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	68db      	ldr	r3, [r3, #12]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d030      	beq.n	8001450 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80013ee:	4b5b      	ldr	r3, [pc, #364]	; (800155c <HAL_RCC_OscConfig+0x32c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a5e      	ldr	r2, [pc, #376]	; (800156c <HAL_RCC_OscConfig+0x33c>)
 80013f4:	4013      	ands	r3, r2
 80013f6:	0019      	movs	r1, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	691a      	ldr	r2, [r3, #16]
 80013fc:	4b57      	ldr	r3, [pc, #348]	; (800155c <HAL_RCC_OscConfig+0x32c>)
 80013fe:	430a      	orrs	r2, r1
 8001400:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001402:	4b56      	ldr	r3, [pc, #344]	; (800155c <HAL_RCC_OscConfig+0x32c>)
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	4b55      	ldr	r3, [pc, #340]	; (800155c <HAL_RCC_OscConfig+0x32c>)
 8001408:	2180      	movs	r1, #128	; 0x80
 800140a:	0049      	lsls	r1, r1, #1
 800140c:	430a      	orrs	r2, r1
 800140e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001410:	f7ff fc0c 	bl	8000c2c <HAL_GetTick>
 8001414:	0003      	movs	r3, r0
 8001416:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001418:	e008      	b.n	800142c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800141a:	f7ff fc07 	bl	8000c2c <HAL_GetTick>
 800141e:	0002      	movs	r2, r0
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	2b02      	cmp	r3, #2
 8001426:	d901      	bls.n	800142c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001428:	2303      	movs	r3, #3
 800142a:	e209      	b.n	8001840 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800142c:	4b4b      	ldr	r3, [pc, #300]	; (800155c <HAL_RCC_OscConfig+0x32c>)
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	2380      	movs	r3, #128	; 0x80
 8001432:	00db      	lsls	r3, r3, #3
 8001434:	4013      	ands	r3, r2
 8001436:	d0f0      	beq.n	800141a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001438:	4b48      	ldr	r3, [pc, #288]	; (800155c <HAL_RCC_OscConfig+0x32c>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	4a4a      	ldr	r2, [pc, #296]	; (8001568 <HAL_RCC_OscConfig+0x338>)
 800143e:	4013      	ands	r3, r2
 8001440:	0019      	movs	r1, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	021a      	lsls	r2, r3, #8
 8001448:	4b44      	ldr	r3, [pc, #272]	; (800155c <HAL_RCC_OscConfig+0x32c>)
 800144a:	430a      	orrs	r2, r1
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	e01b      	b.n	8001488 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001450:	4b42      	ldr	r3, [pc, #264]	; (800155c <HAL_RCC_OscConfig+0x32c>)
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	4b41      	ldr	r3, [pc, #260]	; (800155c <HAL_RCC_OscConfig+0x32c>)
 8001456:	4949      	ldr	r1, [pc, #292]	; (800157c <HAL_RCC_OscConfig+0x34c>)
 8001458:	400a      	ands	r2, r1
 800145a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800145c:	f7ff fbe6 	bl	8000c2c <HAL_GetTick>
 8001460:	0003      	movs	r3, r0
 8001462:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001464:	e008      	b.n	8001478 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001466:	f7ff fbe1 	bl	8000c2c <HAL_GetTick>
 800146a:	0002      	movs	r2, r0
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	2b02      	cmp	r3, #2
 8001472:	d901      	bls.n	8001478 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001474:	2303      	movs	r3, #3
 8001476:	e1e3      	b.n	8001840 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001478:	4b38      	ldr	r3, [pc, #224]	; (800155c <HAL_RCC_OscConfig+0x32c>)
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	2380      	movs	r3, #128	; 0x80
 800147e:	00db      	lsls	r3, r3, #3
 8001480:	4013      	ands	r3, r2
 8001482:	d1f0      	bne.n	8001466 <HAL_RCC_OscConfig+0x236>
 8001484:	e000      	b.n	8001488 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001486:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2208      	movs	r2, #8
 800148e:	4013      	ands	r3, r2
 8001490:	d047      	beq.n	8001522 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001492:	4b32      	ldr	r3, [pc, #200]	; (800155c <HAL_RCC_OscConfig+0x32c>)
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	2238      	movs	r2, #56	; 0x38
 8001498:	4013      	ands	r3, r2
 800149a:	2b18      	cmp	r3, #24
 800149c:	d10a      	bne.n	80014b4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800149e:	4b2f      	ldr	r3, [pc, #188]	; (800155c <HAL_RCC_OscConfig+0x32c>)
 80014a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014a2:	2202      	movs	r2, #2
 80014a4:	4013      	ands	r3, r2
 80014a6:	d03c      	beq.n	8001522 <HAL_RCC_OscConfig+0x2f2>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	699b      	ldr	r3, [r3, #24]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d138      	bne.n	8001522 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e1c5      	b.n	8001840 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	699b      	ldr	r3, [r3, #24]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d019      	beq.n	80014f0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80014bc:	4b27      	ldr	r3, [pc, #156]	; (800155c <HAL_RCC_OscConfig+0x32c>)
 80014be:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80014c0:	4b26      	ldr	r3, [pc, #152]	; (800155c <HAL_RCC_OscConfig+0x32c>)
 80014c2:	2101      	movs	r1, #1
 80014c4:	430a      	orrs	r2, r1
 80014c6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c8:	f7ff fbb0 	bl	8000c2c <HAL_GetTick>
 80014cc:	0003      	movs	r3, r0
 80014ce:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014d0:	e008      	b.n	80014e4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014d2:	f7ff fbab 	bl	8000c2c <HAL_GetTick>
 80014d6:	0002      	movs	r2, r0
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d901      	bls.n	80014e4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80014e0:	2303      	movs	r3, #3
 80014e2:	e1ad      	b.n	8001840 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014e4:	4b1d      	ldr	r3, [pc, #116]	; (800155c <HAL_RCC_OscConfig+0x32c>)
 80014e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014e8:	2202      	movs	r2, #2
 80014ea:	4013      	ands	r3, r2
 80014ec:	d0f1      	beq.n	80014d2 <HAL_RCC_OscConfig+0x2a2>
 80014ee:	e018      	b.n	8001522 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80014f0:	4b1a      	ldr	r3, [pc, #104]	; (800155c <HAL_RCC_OscConfig+0x32c>)
 80014f2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80014f4:	4b19      	ldr	r3, [pc, #100]	; (800155c <HAL_RCC_OscConfig+0x32c>)
 80014f6:	2101      	movs	r1, #1
 80014f8:	438a      	bics	r2, r1
 80014fa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014fc:	f7ff fb96 	bl	8000c2c <HAL_GetTick>
 8001500:	0003      	movs	r3, r0
 8001502:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001504:	e008      	b.n	8001518 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001506:	f7ff fb91 	bl	8000c2c <HAL_GetTick>
 800150a:	0002      	movs	r2, r0
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e193      	b.n	8001840 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001518:	4b10      	ldr	r3, [pc, #64]	; (800155c <HAL_RCC_OscConfig+0x32c>)
 800151a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800151c:	2202      	movs	r2, #2
 800151e:	4013      	ands	r3, r2
 8001520:	d1f1      	bne.n	8001506 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2204      	movs	r2, #4
 8001528:	4013      	ands	r3, r2
 800152a:	d100      	bne.n	800152e <HAL_RCC_OscConfig+0x2fe>
 800152c:	e0c6      	b.n	80016bc <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800152e:	231f      	movs	r3, #31
 8001530:	18fb      	adds	r3, r7, r3
 8001532:	2200      	movs	r2, #0
 8001534:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001536:	4b09      	ldr	r3, [pc, #36]	; (800155c <HAL_RCC_OscConfig+0x32c>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	2238      	movs	r2, #56	; 0x38
 800153c:	4013      	ands	r3, r2
 800153e:	2b20      	cmp	r3, #32
 8001540:	d11e      	bne.n	8001580 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001542:	4b06      	ldr	r3, [pc, #24]	; (800155c <HAL_RCC_OscConfig+0x32c>)
 8001544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001546:	2202      	movs	r2, #2
 8001548:	4013      	ands	r3, r2
 800154a:	d100      	bne.n	800154e <HAL_RCC_OscConfig+0x31e>
 800154c:	e0b6      	b.n	80016bc <HAL_RCC_OscConfig+0x48c>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d000      	beq.n	8001558 <HAL_RCC_OscConfig+0x328>
 8001556:	e0b1      	b.n	80016bc <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e171      	b.n	8001840 <HAL_RCC_OscConfig+0x610>
 800155c:	40021000 	.word	0x40021000
 8001560:	fffeffff 	.word	0xfffeffff
 8001564:	fffbffff 	.word	0xfffbffff
 8001568:	ffff80ff 	.word	0xffff80ff
 800156c:	ffffc7ff 	.word	0xffffc7ff
 8001570:	00f42400 	.word	0x00f42400
 8001574:	20000000 	.word	0x20000000
 8001578:	20000004 	.word	0x20000004
 800157c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001580:	4bb1      	ldr	r3, [pc, #708]	; (8001848 <HAL_RCC_OscConfig+0x618>)
 8001582:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001584:	2380      	movs	r3, #128	; 0x80
 8001586:	055b      	lsls	r3, r3, #21
 8001588:	4013      	ands	r3, r2
 800158a:	d101      	bne.n	8001590 <HAL_RCC_OscConfig+0x360>
 800158c:	2301      	movs	r3, #1
 800158e:	e000      	b.n	8001592 <HAL_RCC_OscConfig+0x362>
 8001590:	2300      	movs	r3, #0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d011      	beq.n	80015ba <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001596:	4bac      	ldr	r3, [pc, #688]	; (8001848 <HAL_RCC_OscConfig+0x618>)
 8001598:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800159a:	4bab      	ldr	r3, [pc, #684]	; (8001848 <HAL_RCC_OscConfig+0x618>)
 800159c:	2180      	movs	r1, #128	; 0x80
 800159e:	0549      	lsls	r1, r1, #21
 80015a0:	430a      	orrs	r2, r1
 80015a2:	63da      	str	r2, [r3, #60]	; 0x3c
 80015a4:	4ba8      	ldr	r3, [pc, #672]	; (8001848 <HAL_RCC_OscConfig+0x618>)
 80015a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015a8:	2380      	movs	r3, #128	; 0x80
 80015aa:	055b      	lsls	r3, r3, #21
 80015ac:	4013      	ands	r3, r2
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80015b2:	231f      	movs	r3, #31
 80015b4:	18fb      	adds	r3, r7, r3
 80015b6:	2201      	movs	r2, #1
 80015b8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015ba:	4ba4      	ldr	r3, [pc, #656]	; (800184c <HAL_RCC_OscConfig+0x61c>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	2380      	movs	r3, #128	; 0x80
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	4013      	ands	r3, r2
 80015c4:	d11a      	bne.n	80015fc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015c6:	4ba1      	ldr	r3, [pc, #644]	; (800184c <HAL_RCC_OscConfig+0x61c>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	4ba0      	ldr	r3, [pc, #640]	; (800184c <HAL_RCC_OscConfig+0x61c>)
 80015cc:	2180      	movs	r1, #128	; 0x80
 80015ce:	0049      	lsls	r1, r1, #1
 80015d0:	430a      	orrs	r2, r1
 80015d2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80015d4:	f7ff fb2a 	bl	8000c2c <HAL_GetTick>
 80015d8:	0003      	movs	r3, r0
 80015da:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015dc:	e008      	b.n	80015f0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015de:	f7ff fb25 	bl	8000c2c <HAL_GetTick>
 80015e2:	0002      	movs	r2, r0
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d901      	bls.n	80015f0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e127      	b.n	8001840 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015f0:	4b96      	ldr	r3, [pc, #600]	; (800184c <HAL_RCC_OscConfig+0x61c>)
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	2380      	movs	r3, #128	; 0x80
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	4013      	ands	r3, r2
 80015fa:	d0f0      	beq.n	80015de <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	2b01      	cmp	r3, #1
 8001602:	d106      	bne.n	8001612 <HAL_RCC_OscConfig+0x3e2>
 8001604:	4b90      	ldr	r3, [pc, #576]	; (8001848 <HAL_RCC_OscConfig+0x618>)
 8001606:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001608:	4b8f      	ldr	r3, [pc, #572]	; (8001848 <HAL_RCC_OscConfig+0x618>)
 800160a:	2101      	movs	r1, #1
 800160c:	430a      	orrs	r2, r1
 800160e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001610:	e01c      	b.n	800164c <HAL_RCC_OscConfig+0x41c>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	2b05      	cmp	r3, #5
 8001618:	d10c      	bne.n	8001634 <HAL_RCC_OscConfig+0x404>
 800161a:	4b8b      	ldr	r3, [pc, #556]	; (8001848 <HAL_RCC_OscConfig+0x618>)
 800161c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800161e:	4b8a      	ldr	r3, [pc, #552]	; (8001848 <HAL_RCC_OscConfig+0x618>)
 8001620:	2104      	movs	r1, #4
 8001622:	430a      	orrs	r2, r1
 8001624:	65da      	str	r2, [r3, #92]	; 0x5c
 8001626:	4b88      	ldr	r3, [pc, #544]	; (8001848 <HAL_RCC_OscConfig+0x618>)
 8001628:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800162a:	4b87      	ldr	r3, [pc, #540]	; (8001848 <HAL_RCC_OscConfig+0x618>)
 800162c:	2101      	movs	r1, #1
 800162e:	430a      	orrs	r2, r1
 8001630:	65da      	str	r2, [r3, #92]	; 0x5c
 8001632:	e00b      	b.n	800164c <HAL_RCC_OscConfig+0x41c>
 8001634:	4b84      	ldr	r3, [pc, #528]	; (8001848 <HAL_RCC_OscConfig+0x618>)
 8001636:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001638:	4b83      	ldr	r3, [pc, #524]	; (8001848 <HAL_RCC_OscConfig+0x618>)
 800163a:	2101      	movs	r1, #1
 800163c:	438a      	bics	r2, r1
 800163e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001640:	4b81      	ldr	r3, [pc, #516]	; (8001848 <HAL_RCC_OscConfig+0x618>)
 8001642:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001644:	4b80      	ldr	r3, [pc, #512]	; (8001848 <HAL_RCC_OscConfig+0x618>)
 8001646:	2104      	movs	r1, #4
 8001648:	438a      	bics	r2, r1
 800164a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d014      	beq.n	800167e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001654:	f7ff faea 	bl	8000c2c <HAL_GetTick>
 8001658:	0003      	movs	r3, r0
 800165a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800165c:	e009      	b.n	8001672 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800165e:	f7ff fae5 	bl	8000c2c <HAL_GetTick>
 8001662:	0002      	movs	r2, r0
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	4a79      	ldr	r2, [pc, #484]	; (8001850 <HAL_RCC_OscConfig+0x620>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e0e6      	b.n	8001840 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001672:	4b75      	ldr	r3, [pc, #468]	; (8001848 <HAL_RCC_OscConfig+0x618>)
 8001674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001676:	2202      	movs	r2, #2
 8001678:	4013      	ands	r3, r2
 800167a:	d0f0      	beq.n	800165e <HAL_RCC_OscConfig+0x42e>
 800167c:	e013      	b.n	80016a6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800167e:	f7ff fad5 	bl	8000c2c <HAL_GetTick>
 8001682:	0003      	movs	r3, r0
 8001684:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001686:	e009      	b.n	800169c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001688:	f7ff fad0 	bl	8000c2c <HAL_GetTick>
 800168c:	0002      	movs	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	4a6f      	ldr	r2, [pc, #444]	; (8001850 <HAL_RCC_OscConfig+0x620>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d901      	bls.n	800169c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e0d1      	b.n	8001840 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800169c:	4b6a      	ldr	r3, [pc, #424]	; (8001848 <HAL_RCC_OscConfig+0x618>)
 800169e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016a0:	2202      	movs	r2, #2
 80016a2:	4013      	ands	r3, r2
 80016a4:	d1f0      	bne.n	8001688 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80016a6:	231f      	movs	r3, #31
 80016a8:	18fb      	adds	r3, r7, r3
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d105      	bne.n	80016bc <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80016b0:	4b65      	ldr	r3, [pc, #404]	; (8001848 <HAL_RCC_OscConfig+0x618>)
 80016b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016b4:	4b64      	ldr	r3, [pc, #400]	; (8001848 <HAL_RCC_OscConfig+0x618>)
 80016b6:	4967      	ldr	r1, [pc, #412]	; (8001854 <HAL_RCC_OscConfig+0x624>)
 80016b8:	400a      	ands	r2, r1
 80016ba:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	69db      	ldr	r3, [r3, #28]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d100      	bne.n	80016c6 <HAL_RCC_OscConfig+0x496>
 80016c4:	e0bb      	b.n	800183e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016c6:	4b60      	ldr	r3, [pc, #384]	; (8001848 <HAL_RCC_OscConfig+0x618>)
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	2238      	movs	r2, #56	; 0x38
 80016cc:	4013      	ands	r3, r2
 80016ce:	2b10      	cmp	r3, #16
 80016d0:	d100      	bne.n	80016d4 <HAL_RCC_OscConfig+0x4a4>
 80016d2:	e07b      	b.n	80017cc <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	69db      	ldr	r3, [r3, #28]
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d156      	bne.n	800178a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016dc:	4b5a      	ldr	r3, [pc, #360]	; (8001848 <HAL_RCC_OscConfig+0x618>)
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	4b59      	ldr	r3, [pc, #356]	; (8001848 <HAL_RCC_OscConfig+0x618>)
 80016e2:	495d      	ldr	r1, [pc, #372]	; (8001858 <HAL_RCC_OscConfig+0x628>)
 80016e4:	400a      	ands	r2, r1
 80016e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e8:	f7ff faa0 	bl	8000c2c <HAL_GetTick>
 80016ec:	0003      	movs	r3, r0
 80016ee:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016f0:	e008      	b.n	8001704 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016f2:	f7ff fa9b 	bl	8000c2c <HAL_GetTick>
 80016f6:	0002      	movs	r2, r0
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d901      	bls.n	8001704 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e09d      	b.n	8001840 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001704:	4b50      	ldr	r3, [pc, #320]	; (8001848 <HAL_RCC_OscConfig+0x618>)
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	2380      	movs	r3, #128	; 0x80
 800170a:	049b      	lsls	r3, r3, #18
 800170c:	4013      	ands	r3, r2
 800170e:	d1f0      	bne.n	80016f2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001710:	4b4d      	ldr	r3, [pc, #308]	; (8001848 <HAL_RCC_OscConfig+0x618>)
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	4a51      	ldr	r2, [pc, #324]	; (800185c <HAL_RCC_OscConfig+0x62c>)
 8001716:	4013      	ands	r3, r2
 8001718:	0019      	movs	r1, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a1a      	ldr	r2, [r3, #32]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001722:	431a      	orrs	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001728:	021b      	lsls	r3, r3, #8
 800172a:	431a      	orrs	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001730:	431a      	orrs	r2, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	431a      	orrs	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800173c:	431a      	orrs	r2, r3
 800173e:	4b42      	ldr	r3, [pc, #264]	; (8001848 <HAL_RCC_OscConfig+0x618>)
 8001740:	430a      	orrs	r2, r1
 8001742:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001744:	4b40      	ldr	r3, [pc, #256]	; (8001848 <HAL_RCC_OscConfig+0x618>)
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	4b3f      	ldr	r3, [pc, #252]	; (8001848 <HAL_RCC_OscConfig+0x618>)
 800174a:	2180      	movs	r1, #128	; 0x80
 800174c:	0449      	lsls	r1, r1, #17
 800174e:	430a      	orrs	r2, r1
 8001750:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001752:	4b3d      	ldr	r3, [pc, #244]	; (8001848 <HAL_RCC_OscConfig+0x618>)
 8001754:	68da      	ldr	r2, [r3, #12]
 8001756:	4b3c      	ldr	r3, [pc, #240]	; (8001848 <HAL_RCC_OscConfig+0x618>)
 8001758:	2180      	movs	r1, #128	; 0x80
 800175a:	0549      	lsls	r1, r1, #21
 800175c:	430a      	orrs	r2, r1
 800175e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001760:	f7ff fa64 	bl	8000c2c <HAL_GetTick>
 8001764:	0003      	movs	r3, r0
 8001766:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001768:	e008      	b.n	800177c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800176a:	f7ff fa5f 	bl	8000c2c <HAL_GetTick>
 800176e:	0002      	movs	r2, r0
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d901      	bls.n	800177c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e061      	b.n	8001840 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800177c:	4b32      	ldr	r3, [pc, #200]	; (8001848 <HAL_RCC_OscConfig+0x618>)
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	2380      	movs	r3, #128	; 0x80
 8001782:	049b      	lsls	r3, r3, #18
 8001784:	4013      	ands	r3, r2
 8001786:	d0f0      	beq.n	800176a <HAL_RCC_OscConfig+0x53a>
 8001788:	e059      	b.n	800183e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800178a:	4b2f      	ldr	r3, [pc, #188]	; (8001848 <HAL_RCC_OscConfig+0x618>)
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	4b2e      	ldr	r3, [pc, #184]	; (8001848 <HAL_RCC_OscConfig+0x618>)
 8001790:	4931      	ldr	r1, [pc, #196]	; (8001858 <HAL_RCC_OscConfig+0x628>)
 8001792:	400a      	ands	r2, r1
 8001794:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001796:	f7ff fa49 	bl	8000c2c <HAL_GetTick>
 800179a:	0003      	movs	r3, r0
 800179c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017a0:	f7ff fa44 	bl	8000c2c <HAL_GetTick>
 80017a4:	0002      	movs	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e046      	b.n	8001840 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017b2:	4b25      	ldr	r3, [pc, #148]	; (8001848 <HAL_RCC_OscConfig+0x618>)
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	2380      	movs	r3, #128	; 0x80
 80017b8:	049b      	lsls	r3, r3, #18
 80017ba:	4013      	ands	r3, r2
 80017bc:	d1f0      	bne.n	80017a0 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80017be:	4b22      	ldr	r3, [pc, #136]	; (8001848 <HAL_RCC_OscConfig+0x618>)
 80017c0:	68da      	ldr	r2, [r3, #12]
 80017c2:	4b21      	ldr	r3, [pc, #132]	; (8001848 <HAL_RCC_OscConfig+0x618>)
 80017c4:	4926      	ldr	r1, [pc, #152]	; (8001860 <HAL_RCC_OscConfig+0x630>)
 80017c6:	400a      	ands	r2, r1
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	e038      	b.n	800183e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	69db      	ldr	r3, [r3, #28]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d101      	bne.n	80017d8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e033      	b.n	8001840 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80017d8:	4b1b      	ldr	r3, [pc, #108]	; (8001848 <HAL_RCC_OscConfig+0x618>)
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	2203      	movs	r2, #3
 80017e2:	401a      	ands	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6a1b      	ldr	r3, [r3, #32]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d126      	bne.n	800183a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	2270      	movs	r2, #112	; 0x70
 80017f0:	401a      	ands	r2, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d11f      	bne.n	800183a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017fa:	697a      	ldr	r2, [r7, #20]
 80017fc:	23fe      	movs	r3, #254	; 0xfe
 80017fe:	01db      	lsls	r3, r3, #7
 8001800:	401a      	ands	r2, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001806:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001808:	429a      	cmp	r2, r3
 800180a:	d116      	bne.n	800183a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800180c:	697a      	ldr	r2, [r7, #20]
 800180e:	23f8      	movs	r3, #248	; 0xf8
 8001810:	039b      	lsls	r3, r3, #14
 8001812:	401a      	ands	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001818:	429a      	cmp	r2, r3
 800181a:	d10e      	bne.n	800183a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800181c:	697a      	ldr	r2, [r7, #20]
 800181e:	23e0      	movs	r3, #224	; 0xe0
 8001820:	051b      	lsls	r3, r3, #20
 8001822:	401a      	ands	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001828:	429a      	cmp	r2, r3
 800182a:	d106      	bne.n	800183a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	0f5b      	lsrs	r3, r3, #29
 8001830:	075a      	lsls	r2, r3, #29
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001836:	429a      	cmp	r2, r3
 8001838:	d001      	beq.n	800183e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e000      	b.n	8001840 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800183e:	2300      	movs	r3, #0
}
 8001840:	0018      	movs	r0, r3
 8001842:	46bd      	mov	sp, r7
 8001844:	b008      	add	sp, #32
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40021000 	.word	0x40021000
 800184c:	40007000 	.word	0x40007000
 8001850:	00001388 	.word	0x00001388
 8001854:	efffffff 	.word	0xefffffff
 8001858:	feffffff 	.word	0xfeffffff
 800185c:	11c1808c 	.word	0x11c1808c
 8001860:	eefefffc 	.word	0xeefefffc

08001864 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d101      	bne.n	8001878 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e0e9      	b.n	8001a4c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001878:	4b76      	ldr	r3, [pc, #472]	; (8001a54 <HAL_RCC_ClockConfig+0x1f0>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2207      	movs	r2, #7
 800187e:	4013      	ands	r3, r2
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	429a      	cmp	r2, r3
 8001884:	d91e      	bls.n	80018c4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001886:	4b73      	ldr	r3, [pc, #460]	; (8001a54 <HAL_RCC_ClockConfig+0x1f0>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2207      	movs	r2, #7
 800188c:	4393      	bics	r3, r2
 800188e:	0019      	movs	r1, r3
 8001890:	4b70      	ldr	r3, [pc, #448]	; (8001a54 <HAL_RCC_ClockConfig+0x1f0>)
 8001892:	683a      	ldr	r2, [r7, #0]
 8001894:	430a      	orrs	r2, r1
 8001896:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001898:	f7ff f9c8 	bl	8000c2c <HAL_GetTick>
 800189c:	0003      	movs	r3, r0
 800189e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80018a0:	e009      	b.n	80018b6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018a2:	f7ff f9c3 	bl	8000c2c <HAL_GetTick>
 80018a6:	0002      	movs	r2, r0
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	4a6a      	ldr	r2, [pc, #424]	; (8001a58 <HAL_RCC_ClockConfig+0x1f4>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e0ca      	b.n	8001a4c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80018b6:	4b67      	ldr	r3, [pc, #412]	; (8001a54 <HAL_RCC_ClockConfig+0x1f0>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2207      	movs	r2, #7
 80018bc:	4013      	ands	r3, r2
 80018be:	683a      	ldr	r2, [r7, #0]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d1ee      	bne.n	80018a2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2202      	movs	r2, #2
 80018ca:	4013      	ands	r3, r2
 80018cc:	d015      	beq.n	80018fa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2204      	movs	r2, #4
 80018d4:	4013      	ands	r3, r2
 80018d6:	d006      	beq.n	80018e6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80018d8:	4b60      	ldr	r3, [pc, #384]	; (8001a5c <HAL_RCC_ClockConfig+0x1f8>)
 80018da:	689a      	ldr	r2, [r3, #8]
 80018dc:	4b5f      	ldr	r3, [pc, #380]	; (8001a5c <HAL_RCC_ClockConfig+0x1f8>)
 80018de:	21e0      	movs	r1, #224	; 0xe0
 80018e0:	01c9      	lsls	r1, r1, #7
 80018e2:	430a      	orrs	r2, r1
 80018e4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018e6:	4b5d      	ldr	r3, [pc, #372]	; (8001a5c <HAL_RCC_ClockConfig+0x1f8>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	4a5d      	ldr	r2, [pc, #372]	; (8001a60 <HAL_RCC_ClockConfig+0x1fc>)
 80018ec:	4013      	ands	r3, r2
 80018ee:	0019      	movs	r1, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689a      	ldr	r2, [r3, #8]
 80018f4:	4b59      	ldr	r3, [pc, #356]	; (8001a5c <HAL_RCC_ClockConfig+0x1f8>)
 80018f6:	430a      	orrs	r2, r1
 80018f8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2201      	movs	r2, #1
 8001900:	4013      	ands	r3, r2
 8001902:	d057      	beq.n	80019b4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d107      	bne.n	800191c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800190c:	4b53      	ldr	r3, [pc, #332]	; (8001a5c <HAL_RCC_ClockConfig+0x1f8>)
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	2380      	movs	r3, #128	; 0x80
 8001912:	029b      	lsls	r3, r3, #10
 8001914:	4013      	ands	r3, r2
 8001916:	d12b      	bne.n	8001970 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e097      	b.n	8001a4c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	2b02      	cmp	r3, #2
 8001922:	d107      	bne.n	8001934 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001924:	4b4d      	ldr	r3, [pc, #308]	; (8001a5c <HAL_RCC_ClockConfig+0x1f8>)
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	2380      	movs	r3, #128	; 0x80
 800192a:	049b      	lsls	r3, r3, #18
 800192c:	4013      	ands	r3, r2
 800192e:	d11f      	bne.n	8001970 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e08b      	b.n	8001a4c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d107      	bne.n	800194c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800193c:	4b47      	ldr	r3, [pc, #284]	; (8001a5c <HAL_RCC_ClockConfig+0x1f8>)
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	2380      	movs	r3, #128	; 0x80
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	4013      	ands	r3, r2
 8001946:	d113      	bne.n	8001970 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e07f      	b.n	8001a4c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	2b03      	cmp	r3, #3
 8001952:	d106      	bne.n	8001962 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001954:	4b41      	ldr	r3, [pc, #260]	; (8001a5c <HAL_RCC_ClockConfig+0x1f8>)
 8001956:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001958:	2202      	movs	r2, #2
 800195a:	4013      	ands	r3, r2
 800195c:	d108      	bne.n	8001970 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e074      	b.n	8001a4c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001962:	4b3e      	ldr	r3, [pc, #248]	; (8001a5c <HAL_RCC_ClockConfig+0x1f8>)
 8001964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001966:	2202      	movs	r2, #2
 8001968:	4013      	ands	r3, r2
 800196a:	d101      	bne.n	8001970 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e06d      	b.n	8001a4c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001970:	4b3a      	ldr	r3, [pc, #232]	; (8001a5c <HAL_RCC_ClockConfig+0x1f8>)
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	2207      	movs	r2, #7
 8001976:	4393      	bics	r3, r2
 8001978:	0019      	movs	r1, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685a      	ldr	r2, [r3, #4]
 800197e:	4b37      	ldr	r3, [pc, #220]	; (8001a5c <HAL_RCC_ClockConfig+0x1f8>)
 8001980:	430a      	orrs	r2, r1
 8001982:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001984:	f7ff f952 	bl	8000c2c <HAL_GetTick>
 8001988:	0003      	movs	r3, r0
 800198a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800198c:	e009      	b.n	80019a2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800198e:	f7ff f94d 	bl	8000c2c <HAL_GetTick>
 8001992:	0002      	movs	r2, r0
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	4a2f      	ldr	r2, [pc, #188]	; (8001a58 <HAL_RCC_ClockConfig+0x1f4>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e054      	b.n	8001a4c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019a2:	4b2e      	ldr	r3, [pc, #184]	; (8001a5c <HAL_RCC_ClockConfig+0x1f8>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	2238      	movs	r2, #56	; 0x38
 80019a8:	401a      	ands	r2, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d1ec      	bne.n	800198e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019b4:	4b27      	ldr	r3, [pc, #156]	; (8001a54 <HAL_RCC_ClockConfig+0x1f0>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2207      	movs	r2, #7
 80019ba:	4013      	ands	r3, r2
 80019bc:	683a      	ldr	r2, [r7, #0]
 80019be:	429a      	cmp	r2, r3
 80019c0:	d21e      	bcs.n	8001a00 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019c2:	4b24      	ldr	r3, [pc, #144]	; (8001a54 <HAL_RCC_ClockConfig+0x1f0>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2207      	movs	r2, #7
 80019c8:	4393      	bics	r3, r2
 80019ca:	0019      	movs	r1, r3
 80019cc:	4b21      	ldr	r3, [pc, #132]	; (8001a54 <HAL_RCC_ClockConfig+0x1f0>)
 80019ce:	683a      	ldr	r2, [r7, #0]
 80019d0:	430a      	orrs	r2, r1
 80019d2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80019d4:	f7ff f92a 	bl	8000c2c <HAL_GetTick>
 80019d8:	0003      	movs	r3, r0
 80019da:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019dc:	e009      	b.n	80019f2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019de:	f7ff f925 	bl	8000c2c <HAL_GetTick>
 80019e2:	0002      	movs	r2, r0
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	4a1b      	ldr	r2, [pc, #108]	; (8001a58 <HAL_RCC_ClockConfig+0x1f4>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e02c      	b.n	8001a4c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019f2:	4b18      	ldr	r3, [pc, #96]	; (8001a54 <HAL_RCC_ClockConfig+0x1f0>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2207      	movs	r2, #7
 80019f8:	4013      	ands	r3, r2
 80019fa:	683a      	ldr	r2, [r7, #0]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d1ee      	bne.n	80019de <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2204      	movs	r2, #4
 8001a06:	4013      	ands	r3, r2
 8001a08:	d009      	beq.n	8001a1e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001a0a:	4b14      	ldr	r3, [pc, #80]	; (8001a5c <HAL_RCC_ClockConfig+0x1f8>)
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	4a15      	ldr	r2, [pc, #84]	; (8001a64 <HAL_RCC_ClockConfig+0x200>)
 8001a10:	4013      	ands	r3, r2
 8001a12:	0019      	movs	r1, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	68da      	ldr	r2, [r3, #12]
 8001a18:	4b10      	ldr	r3, [pc, #64]	; (8001a5c <HAL_RCC_ClockConfig+0x1f8>)
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001a1e:	f000 f829 	bl	8001a74 <HAL_RCC_GetSysClockFreq>
 8001a22:	0001      	movs	r1, r0
 8001a24:	4b0d      	ldr	r3, [pc, #52]	; (8001a5c <HAL_RCC_ClockConfig+0x1f8>)
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	0a1b      	lsrs	r3, r3, #8
 8001a2a:	220f      	movs	r2, #15
 8001a2c:	401a      	ands	r2, r3
 8001a2e:	4b0e      	ldr	r3, [pc, #56]	; (8001a68 <HAL_RCC_ClockConfig+0x204>)
 8001a30:	0092      	lsls	r2, r2, #2
 8001a32:	58d3      	ldr	r3, [r2, r3]
 8001a34:	221f      	movs	r2, #31
 8001a36:	4013      	ands	r3, r2
 8001a38:	000a      	movs	r2, r1
 8001a3a:	40da      	lsrs	r2, r3
 8001a3c:	4b0b      	ldr	r3, [pc, #44]	; (8001a6c <HAL_RCC_ClockConfig+0x208>)
 8001a3e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001a40:	4b0b      	ldr	r3, [pc, #44]	; (8001a70 <HAL_RCC_ClockConfig+0x20c>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	0018      	movs	r0, r3
 8001a46:	f7ff f895 	bl	8000b74 <HAL_InitTick>
 8001a4a:	0003      	movs	r3, r0
}
 8001a4c:	0018      	movs	r0, r3
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	b004      	add	sp, #16
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40022000 	.word	0x40022000
 8001a58:	00001388 	.word	0x00001388
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	fffff0ff 	.word	0xfffff0ff
 8001a64:	ffff8fff 	.word	0xffff8fff
 8001a68:	080039bc 	.word	0x080039bc
 8001a6c:	20000000 	.word	0x20000000
 8001a70:	20000004 	.word	0x20000004

08001a74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a7a:	4b3c      	ldr	r3, [pc, #240]	; (8001b6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	2238      	movs	r2, #56	; 0x38
 8001a80:	4013      	ands	r3, r2
 8001a82:	d10f      	bne.n	8001aa4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001a84:	4b39      	ldr	r3, [pc, #228]	; (8001b6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	0adb      	lsrs	r3, r3, #11
 8001a8a:	2207      	movs	r2, #7
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	2201      	movs	r2, #1
 8001a90:	409a      	lsls	r2, r3
 8001a92:	0013      	movs	r3, r2
 8001a94:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001a96:	6839      	ldr	r1, [r7, #0]
 8001a98:	4835      	ldr	r0, [pc, #212]	; (8001b70 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001a9a:	f7fe fb33 	bl	8000104 <__udivsi3>
 8001a9e:	0003      	movs	r3, r0
 8001aa0:	613b      	str	r3, [r7, #16]
 8001aa2:	e05d      	b.n	8001b60 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001aa4:	4b31      	ldr	r3, [pc, #196]	; (8001b6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	2238      	movs	r2, #56	; 0x38
 8001aaa:	4013      	ands	r3, r2
 8001aac:	2b08      	cmp	r3, #8
 8001aae:	d102      	bne.n	8001ab6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ab0:	4b30      	ldr	r3, [pc, #192]	; (8001b74 <HAL_RCC_GetSysClockFreq+0x100>)
 8001ab2:	613b      	str	r3, [r7, #16]
 8001ab4:	e054      	b.n	8001b60 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ab6:	4b2d      	ldr	r3, [pc, #180]	; (8001b6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	2238      	movs	r2, #56	; 0x38
 8001abc:	4013      	ands	r3, r2
 8001abe:	2b10      	cmp	r3, #16
 8001ac0:	d138      	bne.n	8001b34 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001ac2:	4b2a      	ldr	r3, [pc, #168]	; (8001b6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	2203      	movs	r2, #3
 8001ac8:	4013      	ands	r3, r2
 8001aca:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001acc:	4b27      	ldr	r3, [pc, #156]	; (8001b6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	091b      	lsrs	r3, r3, #4
 8001ad2:	2207      	movs	r2, #7
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2b03      	cmp	r3, #3
 8001ade:	d10d      	bne.n	8001afc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ae0:	68b9      	ldr	r1, [r7, #8]
 8001ae2:	4824      	ldr	r0, [pc, #144]	; (8001b74 <HAL_RCC_GetSysClockFreq+0x100>)
 8001ae4:	f7fe fb0e 	bl	8000104 <__udivsi3>
 8001ae8:	0003      	movs	r3, r0
 8001aea:	0019      	movs	r1, r3
 8001aec:	4b1f      	ldr	r3, [pc, #124]	; (8001b6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	0a1b      	lsrs	r3, r3, #8
 8001af2:	227f      	movs	r2, #127	; 0x7f
 8001af4:	4013      	ands	r3, r2
 8001af6:	434b      	muls	r3, r1
 8001af8:	617b      	str	r3, [r7, #20]
        break;
 8001afa:	e00d      	b.n	8001b18 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001afc:	68b9      	ldr	r1, [r7, #8]
 8001afe:	481c      	ldr	r0, [pc, #112]	; (8001b70 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001b00:	f7fe fb00 	bl	8000104 <__udivsi3>
 8001b04:	0003      	movs	r3, r0
 8001b06:	0019      	movs	r1, r3
 8001b08:	4b18      	ldr	r3, [pc, #96]	; (8001b6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	0a1b      	lsrs	r3, r3, #8
 8001b0e:	227f      	movs	r2, #127	; 0x7f
 8001b10:	4013      	ands	r3, r2
 8001b12:	434b      	muls	r3, r1
 8001b14:	617b      	str	r3, [r7, #20]
        break;
 8001b16:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001b18:	4b14      	ldr	r3, [pc, #80]	; (8001b6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	0f5b      	lsrs	r3, r3, #29
 8001b1e:	2207      	movs	r2, #7
 8001b20:	4013      	ands	r3, r2
 8001b22:	3301      	adds	r3, #1
 8001b24:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001b26:	6879      	ldr	r1, [r7, #4]
 8001b28:	6978      	ldr	r0, [r7, #20]
 8001b2a:	f7fe faeb 	bl	8000104 <__udivsi3>
 8001b2e:	0003      	movs	r3, r0
 8001b30:	613b      	str	r3, [r7, #16]
 8001b32:	e015      	b.n	8001b60 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001b34:	4b0d      	ldr	r3, [pc, #52]	; (8001b6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	2238      	movs	r2, #56	; 0x38
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	2b20      	cmp	r3, #32
 8001b3e:	d103      	bne.n	8001b48 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001b40:	2380      	movs	r3, #128	; 0x80
 8001b42:	021b      	lsls	r3, r3, #8
 8001b44:	613b      	str	r3, [r7, #16]
 8001b46:	e00b      	b.n	8001b60 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001b48:	4b08      	ldr	r3, [pc, #32]	; (8001b6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	2238      	movs	r2, #56	; 0x38
 8001b4e:	4013      	ands	r3, r2
 8001b50:	2b18      	cmp	r3, #24
 8001b52:	d103      	bne.n	8001b5c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001b54:	23fa      	movs	r3, #250	; 0xfa
 8001b56:	01db      	lsls	r3, r3, #7
 8001b58:	613b      	str	r3, [r7, #16]
 8001b5a:	e001      	b.n	8001b60 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001b60:	693b      	ldr	r3, [r7, #16]
}
 8001b62:	0018      	movs	r0, r3
 8001b64:	46bd      	mov	sp, r7
 8001b66:	b006      	add	sp, #24
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	46c0      	nop			; (mov r8, r8)
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	00f42400 	.word	0x00f42400
 8001b74:	007a1200 	.word	0x007a1200

08001b78 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b7c:	4b02      	ldr	r3, [pc, #8]	; (8001b88 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
}
 8001b80:	0018      	movs	r0, r3
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	46c0      	nop			; (mov r8, r8)
 8001b88:	20000000 	.word	0x20000000

08001b8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b8c:	b5b0      	push	{r4, r5, r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001b90:	f7ff fff2 	bl	8001b78 <HAL_RCC_GetHCLKFreq>
 8001b94:	0004      	movs	r4, r0
 8001b96:	f7ff fb3f 	bl	8001218 <LL_RCC_GetAPB1Prescaler>
 8001b9a:	0003      	movs	r3, r0
 8001b9c:	0b1a      	lsrs	r2, r3, #12
 8001b9e:	4b05      	ldr	r3, [pc, #20]	; (8001bb4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ba0:	0092      	lsls	r2, r2, #2
 8001ba2:	58d3      	ldr	r3, [r2, r3]
 8001ba4:	221f      	movs	r2, #31
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	40dc      	lsrs	r4, r3
 8001baa:	0023      	movs	r3, r4
}
 8001bac:	0018      	movs	r0, r3
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bdb0      	pop	{r4, r5, r7, pc}
 8001bb2:	46c0      	nop			; (mov r8, r8)
 8001bb4:	080039fc 	.word	0x080039fc

08001bb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001bc0:	2313      	movs	r3, #19
 8001bc2:	18fb      	adds	r3, r7, r3
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001bc8:	2312      	movs	r3, #18
 8001bca:	18fb      	adds	r3, r7, r3
 8001bcc:	2200      	movs	r2, #0
 8001bce:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	2380      	movs	r3, #128	; 0x80
 8001bd6:	029b      	lsls	r3, r3, #10
 8001bd8:	4013      	ands	r3, r2
 8001bda:	d100      	bne.n	8001bde <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001bdc:	e0a3      	b.n	8001d26 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bde:	2011      	movs	r0, #17
 8001be0:	183b      	adds	r3, r7, r0
 8001be2:	2200      	movs	r2, #0
 8001be4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001be6:	4ba5      	ldr	r3, [pc, #660]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001be8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001bea:	2380      	movs	r3, #128	; 0x80
 8001bec:	055b      	lsls	r3, r3, #21
 8001bee:	4013      	ands	r3, r2
 8001bf0:	d110      	bne.n	8001c14 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bf2:	4ba2      	ldr	r3, [pc, #648]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001bf4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001bf6:	4ba1      	ldr	r3, [pc, #644]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001bf8:	2180      	movs	r1, #128	; 0x80
 8001bfa:	0549      	lsls	r1, r1, #21
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c00:	4b9e      	ldr	r3, [pc, #632]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001c02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c04:	2380      	movs	r3, #128	; 0x80
 8001c06:	055b      	lsls	r3, r3, #21
 8001c08:	4013      	ands	r3, r2
 8001c0a:	60bb      	str	r3, [r7, #8]
 8001c0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c0e:	183b      	adds	r3, r7, r0
 8001c10:	2201      	movs	r2, #1
 8001c12:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c14:	4b9a      	ldr	r3, [pc, #616]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	4b99      	ldr	r3, [pc, #612]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8001c1a:	2180      	movs	r1, #128	; 0x80
 8001c1c:	0049      	lsls	r1, r1, #1
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001c22:	f7ff f803 	bl	8000c2c <HAL_GetTick>
 8001c26:	0003      	movs	r3, r0
 8001c28:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c2a:	e00b      	b.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c2c:	f7fe fffe 	bl	8000c2c <HAL_GetTick>
 8001c30:	0002      	movs	r2, r0
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d904      	bls.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001c3a:	2313      	movs	r3, #19
 8001c3c:	18fb      	adds	r3, r7, r3
 8001c3e:	2203      	movs	r2, #3
 8001c40:	701a      	strb	r2, [r3, #0]
        break;
 8001c42:	e005      	b.n	8001c50 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c44:	4b8e      	ldr	r3, [pc, #568]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	2380      	movs	r3, #128	; 0x80
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	d0ed      	beq.n	8001c2c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001c50:	2313      	movs	r3, #19
 8001c52:	18fb      	adds	r3, r7, r3
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d154      	bne.n	8001d04 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001c5a:	4b88      	ldr	r3, [pc, #544]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001c5c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c5e:	23c0      	movs	r3, #192	; 0xc0
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	4013      	ands	r3, r2
 8001c64:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d019      	beq.n	8001ca0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c70:	697a      	ldr	r2, [r7, #20]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d014      	beq.n	8001ca0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001c76:	4b81      	ldr	r3, [pc, #516]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001c78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c7a:	4a82      	ldr	r2, [pc, #520]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001c80:	4b7e      	ldr	r3, [pc, #504]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001c82:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c84:	4b7d      	ldr	r3, [pc, #500]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001c86:	2180      	movs	r1, #128	; 0x80
 8001c88:	0249      	lsls	r1, r1, #9
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001c8e:	4b7b      	ldr	r3, [pc, #492]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001c90:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c92:	4b7a      	ldr	r3, [pc, #488]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001c94:	497c      	ldr	r1, [pc, #496]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8001c96:	400a      	ands	r2, r1
 8001c98:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001c9a:	4b78      	ldr	r3, [pc, #480]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001c9c:	697a      	ldr	r2, [r7, #20]
 8001c9e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	d016      	beq.n	8001cd6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca8:	f7fe ffc0 	bl	8000c2c <HAL_GetTick>
 8001cac:	0003      	movs	r3, r0
 8001cae:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cb0:	e00c      	b.n	8001ccc <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cb2:	f7fe ffbb 	bl	8000c2c <HAL_GetTick>
 8001cb6:	0002      	movs	r2, r0
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	4a73      	ldr	r2, [pc, #460]	; (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d904      	bls.n	8001ccc <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001cc2:	2313      	movs	r3, #19
 8001cc4:	18fb      	adds	r3, r7, r3
 8001cc6:	2203      	movs	r2, #3
 8001cc8:	701a      	strb	r2, [r3, #0]
            break;
 8001cca:	e004      	b.n	8001cd6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ccc:	4b6b      	ldr	r3, [pc, #428]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cd0:	2202      	movs	r2, #2
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	d0ed      	beq.n	8001cb2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001cd6:	2313      	movs	r3, #19
 8001cd8:	18fb      	adds	r3, r7, r3
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d10a      	bne.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ce0:	4b66      	ldr	r3, [pc, #408]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce4:	4a67      	ldr	r2, [pc, #412]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	0019      	movs	r1, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cee:	4b63      	ldr	r3, [pc, #396]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	65da      	str	r2, [r3, #92]	; 0x5c
 8001cf4:	e00c      	b.n	8001d10 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001cf6:	2312      	movs	r3, #18
 8001cf8:	18fb      	adds	r3, r7, r3
 8001cfa:	2213      	movs	r2, #19
 8001cfc:	18ba      	adds	r2, r7, r2
 8001cfe:	7812      	ldrb	r2, [r2, #0]
 8001d00:	701a      	strb	r2, [r3, #0]
 8001d02:	e005      	b.n	8001d10 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d04:	2312      	movs	r3, #18
 8001d06:	18fb      	adds	r3, r7, r3
 8001d08:	2213      	movs	r2, #19
 8001d0a:	18ba      	adds	r2, r7, r2
 8001d0c:	7812      	ldrb	r2, [r2, #0]
 8001d0e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d10:	2311      	movs	r3, #17
 8001d12:	18fb      	adds	r3, r7, r3
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d105      	bne.n	8001d26 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d1a:	4b58      	ldr	r3, [pc, #352]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001d1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d1e:	4b57      	ldr	r3, [pc, #348]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001d20:	495b      	ldr	r1, [pc, #364]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8001d22:	400a      	ands	r2, r1
 8001d24:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	d009      	beq.n	8001d44 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d30:	4b52      	ldr	r3, [pc, #328]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d34:	2203      	movs	r2, #3
 8001d36:	4393      	bics	r3, r2
 8001d38:	0019      	movs	r1, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685a      	ldr	r2, [r3, #4]
 8001d3e:	4b4f      	ldr	r3, [pc, #316]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001d40:	430a      	orrs	r2, r1
 8001d42:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2210      	movs	r2, #16
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	d009      	beq.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001d4e:	4b4b      	ldr	r3, [pc, #300]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d52:	4a50      	ldr	r2, [pc, #320]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001d54:	4013      	ands	r3, r2
 8001d56:	0019      	movs	r1, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	689a      	ldr	r2, [r3, #8]
 8001d5c:	4b47      	ldr	r3, [pc, #284]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	2380      	movs	r3, #128	; 0x80
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	d009      	beq.n	8001d82 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001d6e:	4b43      	ldr	r3, [pc, #268]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d72:	4a49      	ldr	r2, [pc, #292]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001d74:	4013      	ands	r3, r2
 8001d76:	0019      	movs	r1, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	695a      	ldr	r2, [r3, #20]
 8001d7c:	4b3f      	ldr	r3, [pc, #252]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	2380      	movs	r3, #128	; 0x80
 8001d88:	00db      	lsls	r3, r3, #3
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	d009      	beq.n	8001da2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001d8e:	4b3b      	ldr	r3, [pc, #236]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d92:	4a42      	ldr	r2, [pc, #264]	; (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001d94:	4013      	ands	r3, r2
 8001d96:	0019      	movs	r1, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	699a      	ldr	r2, [r3, #24]
 8001d9c:	4b37      	ldr	r3, [pc, #220]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2220      	movs	r2, #32
 8001da8:	4013      	ands	r3, r2
 8001daa:	d009      	beq.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001dac:	4b33      	ldr	r3, [pc, #204]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001db0:	4a3b      	ldr	r2, [pc, #236]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001db2:	4013      	ands	r3, r2
 8001db4:	0019      	movs	r1, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	68da      	ldr	r2, [r3, #12]
 8001dba:	4b30      	ldr	r3, [pc, #192]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	2380      	movs	r3, #128	; 0x80
 8001dc6:	01db      	lsls	r3, r3, #7
 8001dc8:	4013      	ands	r3, r2
 8001dca:	d015      	beq.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001dcc:	4b2b      	ldr	r3, [pc, #172]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	0899      	lsrs	r1, r3, #2
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	69da      	ldr	r2, [r3, #28]
 8001dd8:	4b28      	ldr	r3, [pc, #160]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	69da      	ldr	r2, [r3, #28]
 8001de2:	2380      	movs	r3, #128	; 0x80
 8001de4:	05db      	lsls	r3, r3, #23
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d106      	bne.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001dea:	4b24      	ldr	r3, [pc, #144]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001dec:	68da      	ldr	r2, [r3, #12]
 8001dee:	4b23      	ldr	r3, [pc, #140]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001df0:	2180      	movs	r1, #128	; 0x80
 8001df2:	0249      	lsls	r1, r1, #9
 8001df4:	430a      	orrs	r2, r1
 8001df6:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	2380      	movs	r3, #128	; 0x80
 8001dfe:	039b      	lsls	r3, r3, #14
 8001e00:	4013      	ands	r3, r2
 8001e02:	d016      	beq.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001e04:	4b1d      	ldr	r3, [pc, #116]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e08:	4a26      	ldr	r2, [pc, #152]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	0019      	movs	r1, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6a1a      	ldr	r2, [r3, #32]
 8001e12:	4b1a      	ldr	r3, [pc, #104]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001e14:	430a      	orrs	r2, r1
 8001e16:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a1a      	ldr	r2, [r3, #32]
 8001e1c:	2380      	movs	r3, #128	; 0x80
 8001e1e:	03db      	lsls	r3, r3, #15
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d106      	bne.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001e24:	4b15      	ldr	r3, [pc, #84]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001e26:	68da      	ldr	r2, [r3, #12]
 8001e28:	4b14      	ldr	r3, [pc, #80]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001e2a:	2180      	movs	r1, #128	; 0x80
 8001e2c:	0449      	lsls	r1, r1, #17
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	2380      	movs	r3, #128	; 0x80
 8001e38:	011b      	lsls	r3, r3, #4
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	d016      	beq.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001e3e:	4b0f      	ldr	r3, [pc, #60]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e42:	4a19      	ldr	r2, [pc, #100]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e44:	4013      	ands	r3, r2
 8001e46:	0019      	movs	r1, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	691a      	ldr	r2, [r3, #16]
 8001e4c:	4b0b      	ldr	r3, [pc, #44]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	691a      	ldr	r2, [r3, #16]
 8001e56:	2380      	movs	r3, #128	; 0x80
 8001e58:	01db      	lsls	r3, r3, #7
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d106      	bne.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001e5e:	4b07      	ldr	r3, [pc, #28]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001e60:	68da      	ldr	r2, [r3, #12]
 8001e62:	4b06      	ldr	r3, [pc, #24]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001e64:	2180      	movs	r1, #128	; 0x80
 8001e66:	0249      	lsls	r1, r1, #9
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8001e6c:	2312      	movs	r3, #18
 8001e6e:	18fb      	adds	r3, r7, r3
 8001e70:	781b      	ldrb	r3, [r3, #0]
}
 8001e72:	0018      	movs	r0, r3
 8001e74:	46bd      	mov	sp, r7
 8001e76:	b006      	add	sp, #24
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	46c0      	nop			; (mov r8, r8)
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	40007000 	.word	0x40007000
 8001e84:	fffffcff 	.word	0xfffffcff
 8001e88:	fffeffff 	.word	0xfffeffff
 8001e8c:	00001388 	.word	0x00001388
 8001e90:	efffffff 	.word	0xefffffff
 8001e94:	fffff3ff 	.word	0xfffff3ff
 8001e98:	fff3ffff 	.word	0xfff3ffff
 8001e9c:	ffcfffff 	.word	0xffcfffff
 8001ea0:	ffffcfff 	.word	0xffffcfff
 8001ea4:	ffbfffff 	.word	0xffbfffff
 8001ea8:	ffff3fff 	.word	0xffff3fff

08001eac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d101      	bne.n	8001ebe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e0a8      	b.n	8002010 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d109      	bne.n	8001eda <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685a      	ldr	r2, [r3, #4]
 8001eca:	2382      	movs	r3, #130	; 0x82
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d009      	beq.n	8001ee6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	61da      	str	r2, [r3, #28]
 8001ed8:	e005      	b.n	8001ee6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	225d      	movs	r2, #93	; 0x5d
 8001ef0:	5c9b      	ldrb	r3, [r3, r2]
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d107      	bne.n	8001f08 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	225c      	movs	r2, #92	; 0x5c
 8001efc:	2100      	movs	r1, #0
 8001efe:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	0018      	movs	r0, r3
 8001f04:	f7fe fd0c 	bl	8000920 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	225d      	movs	r2, #93	; 0x5d
 8001f0c:	2102      	movs	r1, #2
 8001f0e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2140      	movs	r1, #64	; 0x40
 8001f1c:	438a      	bics	r2, r1
 8001f1e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	68da      	ldr	r2, [r3, #12]
 8001f24:	23e0      	movs	r3, #224	; 0xe0
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d902      	bls.n	8001f32 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	60fb      	str	r3, [r7, #12]
 8001f30:	e002      	b.n	8001f38 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001f32:	2380      	movs	r3, #128	; 0x80
 8001f34:	015b      	lsls	r3, r3, #5
 8001f36:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	68da      	ldr	r2, [r3, #12]
 8001f3c:	23f0      	movs	r3, #240	; 0xf0
 8001f3e:	011b      	lsls	r3, r3, #4
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d008      	beq.n	8001f56 <HAL_SPI_Init+0xaa>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	68da      	ldr	r2, [r3, #12]
 8001f48:	23e0      	movs	r3, #224	; 0xe0
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d002      	beq.n	8001f56 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685a      	ldr	r2, [r3, #4]
 8001f5a:	2382      	movs	r3, #130	; 0x82
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	401a      	ands	r2, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6899      	ldr	r1, [r3, #8]
 8001f64:	2384      	movs	r3, #132	; 0x84
 8001f66:	021b      	lsls	r3, r3, #8
 8001f68:	400b      	ands	r3, r1
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	691b      	ldr	r3, [r3, #16]
 8001f70:	2102      	movs	r1, #2
 8001f72:	400b      	ands	r3, r1
 8001f74:	431a      	orrs	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	2101      	movs	r1, #1
 8001f7c:	400b      	ands	r3, r1
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6999      	ldr	r1, [r3, #24]
 8001f84:	2380      	movs	r3, #128	; 0x80
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	400b      	ands	r3, r1
 8001f8a:	431a      	orrs	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	69db      	ldr	r3, [r3, #28]
 8001f90:	2138      	movs	r1, #56	; 0x38
 8001f92:	400b      	ands	r3, r1
 8001f94:	431a      	orrs	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a1b      	ldr	r3, [r3, #32]
 8001f9a:	2180      	movs	r1, #128	; 0x80
 8001f9c:	400b      	ands	r3, r1
 8001f9e:	431a      	orrs	r2, r3
 8001fa0:	0011      	movs	r1, r2
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fa6:	2380      	movs	r3, #128	; 0x80
 8001fa8:	019b      	lsls	r3, r3, #6
 8001faa:	401a      	ands	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	0c1b      	lsrs	r3, r3, #16
 8001fba:	2204      	movs	r2, #4
 8001fbc:	401a      	ands	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc2:	2110      	movs	r1, #16
 8001fc4:	400b      	ands	r3, r1
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fcc:	2108      	movs	r1, #8
 8001fce:	400b      	ands	r3, r1
 8001fd0:	431a      	orrs	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	68d9      	ldr	r1, [r3, #12]
 8001fd6:	23f0      	movs	r3, #240	; 0xf0
 8001fd8:	011b      	lsls	r3, r3, #4
 8001fda:	400b      	ands	r3, r1
 8001fdc:	431a      	orrs	r2, r3
 8001fde:	0011      	movs	r1, r2
 8001fe0:	68fa      	ldr	r2, [r7, #12]
 8001fe2:	2380      	movs	r3, #128	; 0x80
 8001fe4:	015b      	lsls	r3, r3, #5
 8001fe6:	401a      	ands	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	430a      	orrs	r2, r1
 8001fee:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	69da      	ldr	r2, [r3, #28]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4907      	ldr	r1, [pc, #28]	; (8002018 <HAL_SPI_Init+0x16c>)
 8001ffc:	400a      	ands	r2, r1
 8001ffe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	225d      	movs	r2, #93	; 0x5d
 800200a:	2101      	movs	r1, #1
 800200c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800200e:	2300      	movs	r3, #0
}
 8002010:	0018      	movs	r0, r3
 8002012:	46bd      	mov	sp, r7
 8002014:	b004      	add	sp, #16
 8002016:	bd80      	pop	{r7, pc}
 8002018:	fffff7ff 	.word	0xfffff7ff

0800201c <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	1dbb      	adds	r3, r7, #6
 8002028:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800202a:	2317      	movs	r3, #23
 800202c:	18fb      	adds	r3, r7, r3
 800202e:	2200      	movs	r2, #0
 8002030:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d112      	bne.n	8002060 <HAL_SPI_Receive_IT+0x44>
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	685a      	ldr	r2, [r3, #4]
 800203e:	2382      	movs	r3, #130	; 0x82
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	429a      	cmp	r2, r3
 8002044:	d10c      	bne.n	8002060 <HAL_SPI_Receive_IT+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	225d      	movs	r2, #93	; 0x5d
 800204a:	2104      	movs	r1, #4
 800204c:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 800204e:	1dbb      	adds	r3, r7, #6
 8002050:	881b      	ldrh	r3, [r3, #0]
 8002052:	68ba      	ldr	r2, [r7, #8]
 8002054:	68b9      	ldr	r1, [r7, #8]
 8002056:	68f8      	ldr	r0, [r7, #12]
 8002058:	f000 f8a4 	bl	80021a4 <HAL_SPI_TransmitReceive_IT>
 800205c:	0003      	movs	r3, r0
 800205e:	e095      	b.n	800218c <HAL_SPI_Receive_IT+0x170>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	225c      	movs	r2, #92	; 0x5c
 8002064:	5c9b      	ldrb	r3, [r3, r2]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d101      	bne.n	800206e <HAL_SPI_Receive_IT+0x52>
 800206a:	2302      	movs	r3, #2
 800206c:	e08e      	b.n	800218c <HAL_SPI_Receive_IT+0x170>
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	225c      	movs	r2, #92	; 0x5c
 8002072:	2101      	movs	r1, #1
 8002074:	5499      	strb	r1, [r3, r2]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	225d      	movs	r2, #93	; 0x5d
 800207a:	5c9b      	ldrb	r3, [r3, r2]
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b01      	cmp	r3, #1
 8002080:	d004      	beq.n	800208c <HAL_SPI_Receive_IT+0x70>
  {
    errorcode = HAL_BUSY;
 8002082:	2317      	movs	r3, #23
 8002084:	18fb      	adds	r3, r7, r3
 8002086:	2202      	movs	r2, #2
 8002088:	701a      	strb	r2, [r3, #0]
    goto error;
 800208a:	e078      	b.n	800217e <HAL_SPI_Receive_IT+0x162>
  }

  if ((pData == NULL) || (Size == 0U))
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d003      	beq.n	800209a <HAL_SPI_Receive_IT+0x7e>
 8002092:	1dbb      	adds	r3, r7, #6
 8002094:	881b      	ldrh	r3, [r3, #0]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d104      	bne.n	80020a4 <HAL_SPI_Receive_IT+0x88>
  {
    errorcode = HAL_ERROR;
 800209a:	2317      	movs	r3, #23
 800209c:	18fb      	adds	r3, r7, r3
 800209e:	2201      	movs	r2, #1
 80020a0:	701a      	strb	r2, [r3, #0]
    goto error;
 80020a2:	e06c      	b.n	800217e <HAL_SPI_Receive_IT+0x162>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	225d      	movs	r2, #93	; 0x5d
 80020a8:	2104      	movs	r1, #4
 80020aa:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2200      	movs	r2, #0
 80020b0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	68ba      	ldr	r2, [r7, #8]
 80020b6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	1dba      	adds	r2, r7, #6
 80020bc:	2144      	movs	r1, #68	; 0x44
 80020be:	8812      	ldrh	r2, [r2, #0]
 80020c0:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	1dba      	adds	r2, r7, #6
 80020c6:	2146      	movs	r1, #70	; 0x46
 80020c8:	8812      	ldrh	r2, [r2, #0]
 80020ca:	525a      	strh	r2, [r3, r1]

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2200      	movs	r2, #0
 80020d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2200      	movs	r2, #0
 80020d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2200      	movs	r2, #0
 80020dc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2200      	movs	r2, #0
 80020e2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	68da      	ldr	r2, [r3, #12]
 80020e8:	23e0      	movs	r3, #224	; 0xe0
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d90b      	bls.n	8002108 <HAL_SPI_Receive_IT+0xec>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	685a      	ldr	r2, [r3, #4]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4926      	ldr	r1, [pc, #152]	; (8002194 <HAL_SPI_Receive_IT+0x178>)
 80020fc:	400a      	ands	r2, r1
 80020fe:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	4a25      	ldr	r2, [pc, #148]	; (8002198 <HAL_SPI_Receive_IT+0x17c>)
 8002104:	64da      	str	r2, [r3, #76]	; 0x4c
 8002106:	e00b      	b.n	8002120 <HAL_SPI_Receive_IT+0x104>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	685a      	ldr	r2, [r3, #4]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2180      	movs	r1, #128	; 0x80
 8002114:	0149      	lsls	r1, r1, #5
 8002116:	430a      	orrs	r2, r1
 8002118:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	4a1f      	ldr	r2, [pc, #124]	; (800219c <HAL_SPI_Receive_IT+0x180>)
 800211e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	689a      	ldr	r2, [r3, #8]
 8002124:	2380      	movs	r3, #128	; 0x80
 8002126:	021b      	lsls	r3, r3, #8
 8002128:	429a      	cmp	r2, r3
 800212a:	d10f      	bne.n	800214c <HAL_SPI_Receive_IT+0x130>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2140      	movs	r1, #64	; 0x40
 8002138:	438a      	bics	r2, r1
 800213a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4916      	ldr	r1, [pc, #88]	; (80021a0 <HAL_SPI_Receive_IT+0x184>)
 8002148:	400a      	ands	r2, r1
 800214a:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	685a      	ldr	r2, [r3, #4]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2160      	movs	r1, #96	; 0x60
 8002158:	430a      	orrs	r2, r1
 800215a:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2240      	movs	r2, #64	; 0x40
 8002164:	4013      	ands	r3, r2
 8002166:	2b40      	cmp	r3, #64	; 0x40
 8002168:	d008      	beq.n	800217c <HAL_SPI_Receive_IT+0x160>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2140      	movs	r1, #64	; 0x40
 8002176:	430a      	orrs	r2, r1
 8002178:	601a      	str	r2, [r3, #0]
 800217a:	e000      	b.n	800217e <HAL_SPI_Receive_IT+0x162>
  }

error :
 800217c:	46c0      	nop			; (mov r8, r8)
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	225c      	movs	r2, #92	; 0x5c
 8002182:	2100      	movs	r1, #0
 8002184:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002186:	2317      	movs	r3, #23
 8002188:	18fb      	adds	r3, r7, r3
 800218a:	781b      	ldrb	r3, [r3, #0]
}
 800218c:	0018      	movs	r0, r3
 800218e:	46bd      	mov	sp, r7
 8002190:	b006      	add	sp, #24
 8002192:	bd80      	pop	{r7, pc}
 8002194:	ffffefff 	.word	0xffffefff
 8002198:	080027cb 	.word	0x080027cb
 800219c:	08002779 	.word	0x08002779
 80021a0:	ffffbfff 	.word	0xffffbfff

080021a4 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	607a      	str	r2, [r7, #4]
 80021b0:	001a      	movs	r2, r3
 80021b2:	1cbb      	adds	r3, r7, #2
 80021b4:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80021b6:	2317      	movs	r3, #23
 80021b8:	18fb      	adds	r3, r7, r3
 80021ba:	2200      	movs	r2, #0
 80021bc:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	225c      	movs	r2, #92	; 0x5c
 80021c2:	5c9b      	ldrb	r3, [r3, r2]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d101      	bne.n	80021cc <HAL_SPI_TransmitReceive_IT+0x28>
 80021c8:	2302      	movs	r3, #2
 80021ca:	e0a6      	b.n	800231a <HAL_SPI_TransmitReceive_IT+0x176>
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	225c      	movs	r2, #92	; 0x5c
 80021d0:	2101      	movs	r1, #1
 80021d2:	5499      	strb	r1, [r3, r2]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80021d4:	2016      	movs	r0, #22
 80021d6:	183b      	adds	r3, r7, r0
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	215d      	movs	r1, #93	; 0x5d
 80021dc:	5c52      	ldrb	r2, [r2, r1]
 80021de:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80021e6:	0001      	movs	r1, r0
 80021e8:	187b      	adds	r3, r7, r1
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d011      	beq.n	8002214 <HAL_SPI_TransmitReceive_IT+0x70>
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	2382      	movs	r3, #130	; 0x82
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d107      	bne.n	800220a <HAL_SPI_TransmitReceive_IT+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d103      	bne.n	800220a <HAL_SPI_TransmitReceive_IT+0x66>
 8002202:	187b      	adds	r3, r7, r1
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	2b04      	cmp	r3, #4
 8002208:	d004      	beq.n	8002214 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_BUSY;
 800220a:	2317      	movs	r3, #23
 800220c:	18fb      	adds	r3, r7, r3
 800220e:	2202      	movs	r2, #2
 8002210:	701a      	strb	r2, [r3, #0]
    goto error;
 8002212:	e07b      	b.n	800230c <HAL_SPI_TransmitReceive_IT+0x168>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d006      	beq.n	8002228 <HAL_SPI_TransmitReceive_IT+0x84>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d003      	beq.n	8002228 <HAL_SPI_TransmitReceive_IT+0x84>
 8002220:	1cbb      	adds	r3, r7, #2
 8002222:	881b      	ldrh	r3, [r3, #0]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d104      	bne.n	8002232 <HAL_SPI_TransmitReceive_IT+0x8e>
  {
    errorcode = HAL_ERROR;
 8002228:	2317      	movs	r3, #23
 800222a:	18fb      	adds	r3, r7, r3
 800222c:	2201      	movs	r2, #1
 800222e:	701a      	strb	r2, [r3, #0]
    goto error;
 8002230:	e06c      	b.n	800230c <HAL_SPI_TransmitReceive_IT+0x168>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	225d      	movs	r2, #93	; 0x5d
 8002236:	5c9b      	ldrb	r3, [r3, r2]
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b04      	cmp	r3, #4
 800223c:	d003      	beq.n	8002246 <HAL_SPI_TransmitReceive_IT+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	225d      	movs	r2, #93	; 0x5d
 8002242:	2105      	movs	r1, #5
 8002244:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2200      	movs	r2, #0
 800224a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	68ba      	ldr	r2, [r7, #8]
 8002250:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	1cba      	adds	r2, r7, #2
 8002256:	8812      	ldrh	r2, [r2, #0]
 8002258:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	1cba      	adds	r2, r7, #2
 800225e:	8812      	ldrh	r2, [r2, #0]
 8002260:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	1cba      	adds	r2, r7, #2
 800226c:	2144      	movs	r1, #68	; 0x44
 800226e:	8812      	ldrh	r2, [r2, #0]
 8002270:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	1cba      	adds	r2, r7, #2
 8002276:	2146      	movs	r1, #70	; 0x46
 8002278:	8812      	ldrh	r2, [r2, #0]
 800227a:	525a      	strh	r2, [r3, r1]

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	68da      	ldr	r2, [r3, #12]
 8002280:	23e0      	movs	r3, #224	; 0xe0
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	429a      	cmp	r2, r3
 8002286:	d906      	bls.n	8002296 <HAL_SPI_TransmitReceive_IT+0xf2>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	4a26      	ldr	r2, [pc, #152]	; (8002324 <HAL_SPI_TransmitReceive_IT+0x180>)
 800228c:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	4a25      	ldr	r2, [pc, #148]	; (8002328 <HAL_SPI_TransmitReceive_IT+0x184>)
 8002292:	651a      	str	r2, [r3, #80]	; 0x50
 8002294:	e005      	b.n	80022a2 <HAL_SPI_TransmitReceive_IT+0xfe>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	4a24      	ldr	r2, [pc, #144]	; (800232c <HAL_SPI_TransmitReceive_IT+0x188>)
 800229a:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	4a24      	ldr	r2, [pc, #144]	; (8002330 <HAL_SPI_TransmitReceive_IT+0x18c>)
 80022a0:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	68da      	ldr	r2, [r3, #12]
 80022a6:	23e0      	movs	r3, #224	; 0xe0
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d803      	bhi.n	80022b6 <HAL_SPI_TransmitReceive_IT+0x112>
 80022ae:	1cbb      	adds	r3, r7, #2
 80022b0:	881b      	ldrh	r3, [r3, #0]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d908      	bls.n	80022c8 <HAL_SPI_TransmitReceive_IT+0x124>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	685a      	ldr	r2, [r3, #4]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	491c      	ldr	r1, [pc, #112]	; (8002334 <HAL_SPI_TransmitReceive_IT+0x190>)
 80022c2:	400a      	ands	r2, r1
 80022c4:	605a      	str	r2, [r3, #4]
 80022c6:	e008      	b.n	80022da <HAL_SPI_TransmitReceive_IT+0x136>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	685a      	ldr	r2, [r3, #4]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2180      	movs	r1, #128	; 0x80
 80022d4:	0149      	lsls	r1, r1, #5
 80022d6:	430a      	orrs	r2, r1
 80022d8:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	685a      	ldr	r2, [r3, #4]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	21e0      	movs	r1, #224	; 0xe0
 80022e6:	430a      	orrs	r2, r1
 80022e8:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2240      	movs	r2, #64	; 0x40
 80022f2:	4013      	ands	r3, r2
 80022f4:	2b40      	cmp	r3, #64	; 0x40
 80022f6:	d008      	beq.n	800230a <HAL_SPI_TransmitReceive_IT+0x166>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2140      	movs	r1, #64	; 0x40
 8002304:	430a      	orrs	r2, r1
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	e000      	b.n	800230c <HAL_SPI_TransmitReceive_IT+0x168>
  }

error :
 800230a:	46c0      	nop			; (mov r8, r8)
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	225c      	movs	r2, #92	; 0x5c
 8002310:	2100      	movs	r1, #0
 8002312:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002314:	2317      	movs	r3, #23
 8002316:	18fb      	adds	r3, r7, r3
 8002318:	781b      	ldrb	r3, [r3, #0]
}
 800231a:	0018      	movs	r0, r3
 800231c:	46bd      	mov	sp, r7
 800231e:	b006      	add	sp, #24
 8002320:	bd80      	pop	{r7, pc}
 8002322:	46c0      	nop			; (mov r8, r8)
 8002324:	080026af 	.word	0x080026af
 8002328:	08002717 	.word	0x08002717
 800232c:	08002559 	.word	0x08002559
 8002330:	0800261b 	.word	0x0800261b
 8002334:	ffffefff 	.word	0xffffefff

08002338 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b088      	sub	sp, #32
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	2240      	movs	r2, #64	; 0x40
 8002354:	4013      	ands	r3, r2
 8002356:	d10d      	bne.n	8002374 <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	2201      	movs	r2, #1
 800235c:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800235e:	d009      	beq.n	8002374 <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	2240      	movs	r2, #64	; 0x40
 8002364:	4013      	ands	r3, r2
 8002366:	d005      	beq.n	8002374 <HAL_SPI_IRQHandler+0x3c>
  {
    hspi->RxISR(hspi);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	0010      	movs	r0, r2
 8002370:	4798      	blx	r3
    return;
 8002372:	e0c5      	b.n	8002500 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	2202      	movs	r2, #2
 8002378:	4013      	ands	r3, r2
 800237a:	d009      	beq.n	8002390 <HAL_SPI_IRQHandler+0x58>
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	2280      	movs	r2, #128	; 0x80
 8002380:	4013      	ands	r3, r2
 8002382:	d005      	beq.n	8002390 <HAL_SPI_IRQHandler+0x58>
  {
    hspi->TxISR(hspi);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	0010      	movs	r0, r2
 800238c:	4798      	blx	r3
    return;
 800238e:	e0b7      	b.n	8002500 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	2220      	movs	r2, #32
 8002394:	4013      	ands	r3, r2
 8002396:	d109      	bne.n	80023ac <HAL_SPI_IRQHandler+0x74>
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	2240      	movs	r2, #64	; 0x40
 800239c:	4013      	ands	r3, r2
 800239e:	d105      	bne.n	80023ac <HAL_SPI_IRQHandler+0x74>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	2380      	movs	r3, #128	; 0x80
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	4013      	ands	r3, r2
 80023a8:	d100      	bne.n	80023ac <HAL_SPI_IRQHandler+0x74>
 80023aa:	e0a9      	b.n	8002500 <HAL_SPI_IRQHandler+0x1c8>
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	2220      	movs	r2, #32
 80023b0:	4013      	ands	r3, r2
 80023b2:	d100      	bne.n	80023b6 <HAL_SPI_IRQHandler+0x7e>
 80023b4:	e0a4      	b.n	8002500 <HAL_SPI_IRQHandler+0x1c8>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	2240      	movs	r2, #64	; 0x40
 80023ba:	4013      	ands	r3, r2
 80023bc:	d023      	beq.n	8002406 <HAL_SPI_IRQHandler+0xce>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	225d      	movs	r2, #93	; 0x5d
 80023c2:	5c9b      	ldrb	r3, [r3, r2]
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b03      	cmp	r3, #3
 80023c8:	d011      	beq.n	80023ee <HAL_SPI_IRQHandler+0xb6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023ce:	2204      	movs	r2, #4
 80023d0:	431a      	orrs	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80023d6:	2300      	movs	r3, #0
 80023d8:	617b      	str	r3, [r7, #20]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	617b      	str	r3, [r7, #20]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	617b      	str	r3, [r7, #20]
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	e00b      	b.n	8002406 <HAL_SPI_IRQHandler+0xce>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80023ee:	2300      	movs	r3, #0
 80023f0:	613b      	str	r3, [r7, #16]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	613b      	str	r3, [r7, #16]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	613b      	str	r3, [r7, #16]
 8002402:	693b      	ldr	r3, [r7, #16]
        return;
 8002404:	e07c      	b.n	8002500 <HAL_SPI_IRQHandler+0x1c8>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	2220      	movs	r2, #32
 800240a:	4013      	ands	r3, r2
 800240c:	d014      	beq.n	8002438 <HAL_SPI_IRQHandler+0x100>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002412:	2201      	movs	r2, #1
 8002414:	431a      	orrs	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800241a:	2300      	movs	r3, #0
 800241c:	60fb      	str	r3, [r7, #12]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	60fb      	str	r3, [r7, #12]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2140      	movs	r1, #64	; 0x40
 8002432:	438a      	bics	r2, r1
 8002434:	601a      	str	r2, [r3, #0]
 8002436:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	2380      	movs	r3, #128	; 0x80
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	4013      	ands	r3, r2
 8002440:	d00c      	beq.n	800245c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002446:	2208      	movs	r2, #8
 8002448:	431a      	orrs	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800244e:	2300      	movs	r3, #0
 8002450:	60bb      	str	r3, [r7, #8]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	60bb      	str	r3, [r7, #8]
 800245a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002460:	2b00      	cmp	r3, #0
 8002462:	d04c      	beq.n	80024fe <HAL_SPI_IRQHandler+0x1c6>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	685a      	ldr	r2, [r3, #4]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	21e0      	movs	r1, #224	; 0xe0
 8002470:	438a      	bics	r2, r1
 8002472:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	225d      	movs	r2, #93	; 0x5d
 8002478:	2101      	movs	r1, #1
 800247a:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	2202      	movs	r2, #2
 8002480:	4013      	ands	r3, r2
 8002482:	d103      	bne.n	800248c <HAL_SPI_IRQHandler+0x154>
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	2201      	movs	r2, #1
 8002488:	4013      	ands	r3, r2
 800248a:	d032      	beq.n	80024f2 <HAL_SPI_IRQHandler+0x1ba>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	685a      	ldr	r2, [r3, #4]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2103      	movs	r1, #3
 8002498:	438a      	bics	r2, r1
 800249a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d010      	beq.n	80024c6 <HAL_SPI_IRQHandler+0x18e>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a8:	4a17      	ldr	r2, [pc, #92]	; (8002508 <HAL_SPI_IRQHandler+0x1d0>)
 80024aa:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b0:	0018      	movs	r0, r3
 80024b2:	f7fe fca3 	bl	8000dfc <HAL_DMA_Abort_IT>
 80024b6:	1e03      	subs	r3, r0, #0
 80024b8:	d005      	beq.n	80024c6 <HAL_SPI_IRQHandler+0x18e>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024be:	2240      	movs	r2, #64	; 0x40
 80024c0:	431a      	orrs	r2, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d016      	beq.n	80024fc <HAL_SPI_IRQHandler+0x1c4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d2:	4a0d      	ldr	r2, [pc, #52]	; (8002508 <HAL_SPI_IRQHandler+0x1d0>)
 80024d4:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024da:	0018      	movs	r0, r3
 80024dc:	f7fe fc8e 	bl	8000dfc <HAL_DMA_Abort_IT>
 80024e0:	1e03      	subs	r3, r0, #0
 80024e2:	d00b      	beq.n	80024fc <HAL_SPI_IRQHandler+0x1c4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024e8:	2240      	movs	r2, #64	; 0x40
 80024ea:	431a      	orrs	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80024f0:	e004      	b.n	80024fc <HAL_SPI_IRQHandler+0x1c4>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	0018      	movs	r0, r3
 80024f6:	f000 f811 	bl	800251c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80024fa:	e000      	b.n	80024fe <HAL_SPI_IRQHandler+0x1c6>
        if (hspi->hdmatx != NULL)
 80024fc:	46c0      	nop			; (mov r8, r8)
    return;
 80024fe:	46c0      	nop			; (mov r8, r8)
  }
}
 8002500:	46bd      	mov	sp, r7
 8002502:	b008      	add	sp, #32
 8002504:	bd80      	pop	{r7, pc}
 8002506:	46c0      	nop			; (mov r8, r8)
 8002508:	0800252d 	.word	0x0800252d

0800250c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8002514:	46c0      	nop			; (mov r8, r8)
 8002516:	46bd      	mov	sp, r7
 8002518:	b002      	add	sp, #8
 800251a:	bd80      	pop	{r7, pc}

0800251c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002524:	46c0      	nop			; (mov r8, r8)
 8002526:	46bd      	mov	sp, r7
 8002528:	b002      	add	sp, #8
 800252a:	bd80      	pop	{r7, pc}

0800252c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002538:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2246      	movs	r2, #70	; 0x46
 800253e:	2100      	movs	r1, #0
 8002540:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	0018      	movs	r0, r3
 800254c:	f7ff ffe6 	bl	800251c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002550:	46c0      	nop			; (mov r8, r8)
 8002552:	46bd      	mov	sp, r7
 8002554:	b004      	add	sp, #16
 8002556:	bd80      	pop	{r7, pc}

08002558 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2246      	movs	r2, #70	; 0x46
 8002564:	5a9b      	ldrh	r3, [r3, r2]
 8002566:	b29b      	uxth	r3, r3
 8002568:	2b01      	cmp	r3, #1
 800256a:	d924      	bls.n	80025b6 <SPI_2linesRxISR_8BIT+0x5e>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68da      	ldr	r2, [r3, #12]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	b292      	uxth	r2, r2
 8002578:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	1c9a      	adds	r2, r3, #2
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2246      	movs	r2, #70	; 0x46
 8002588:	5a9b      	ldrh	r3, [r3, r2]
 800258a:	b29b      	uxth	r3, r3
 800258c:	3b02      	subs	r3, #2
 800258e:	b299      	uxth	r1, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2246      	movs	r2, #70	; 0x46
 8002594:	5299      	strh	r1, [r3, r2]
    if (hspi->RxXferCount == 1U)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2246      	movs	r2, #70	; 0x46
 800259a:	5a9b      	ldrh	r3, [r3, r2]
 800259c:	b29b      	uxth	r3, r3
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d120      	bne.n	80025e4 <SPI_2linesRxISR_8BIT+0x8c>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	685a      	ldr	r2, [r3, #4]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2180      	movs	r1, #128	; 0x80
 80025ae:	0149      	lsls	r1, r1, #5
 80025b0:	430a      	orrs	r2, r1
 80025b2:	605a      	str	r2, [r3, #4]
 80025b4:	e016      	b.n	80025e4 <SPI_2linesRxISR_8BIT+0x8c>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	330c      	adds	r3, #12
 80025bc:	001a      	movs	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c2:	7812      	ldrb	r2, [r2, #0]
 80025c4:	b2d2      	uxtb	r2, r2
 80025c6:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025cc:	1c5a      	adds	r2, r3, #1
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2246      	movs	r2, #70	; 0x46
 80025d6:	5a9b      	ldrh	r3, [r3, r2]
 80025d8:	b29b      	uxth	r3, r3
 80025da:	3b01      	subs	r3, #1
 80025dc:	b299      	uxth	r1, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2246      	movs	r2, #70	; 0x46
 80025e2:	5299      	strh	r1, [r3, r2]
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2246      	movs	r2, #70	; 0x46
 80025e8:	5a9b      	ldrh	r3, [r3, r2]
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d110      	bne.n	8002612 <SPI_2linesRxISR_8BIT+0xba>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	685a      	ldr	r2, [r3, #4]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2160      	movs	r1, #96	; 0x60
 80025fc:	438a      	bics	r2, r1
 80025fe:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002604:	b29b      	uxth	r3, r3
 8002606:	2b00      	cmp	r3, #0
 8002608:	d103      	bne.n	8002612 <SPI_2linesRxISR_8BIT+0xba>
    {
      SPI_CloseRxTx_ISR(hspi);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	0018      	movs	r0, r3
 800260e:	f000 fad7 	bl	8002bc0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002612:	46c0      	nop			; (mov r8, r8)
 8002614:	46bd      	mov	sp, r7
 8002616:	b002      	add	sp, #8
 8002618:	bd80      	pop	{r7, pc}

0800261a <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	b082      	sub	sp, #8
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002626:	b29b      	uxth	r3, r3
 8002628:	2b01      	cmp	r3, #1
 800262a:	d912      	bls.n	8002652 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002630:	881a      	ldrh	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800263c:	1c9a      	adds	r2, r3, #2
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002646:	b29b      	uxth	r3, r3
 8002648:	3b02      	subs	r3, #2
 800264a:	b29a      	uxth	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002650:	e012      	b.n	8002678 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	330c      	adds	r3, #12
 800265c:	7812      	ldrb	r2, [r2, #0]
 800265e:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002664:	1c5a      	adds	r2, r3, #1
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800266e:	b29b      	uxth	r3, r3
 8002670:	3b01      	subs	r3, #1
 8002672:	b29a      	uxth	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800267c:	b29b      	uxth	r3, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d111      	bne.n	80026a6 <SPI_2linesTxISR_8BIT+0x8c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	685a      	ldr	r2, [r3, #4]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2180      	movs	r1, #128	; 0x80
 800268e:	438a      	bics	r2, r1
 8002690:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2246      	movs	r2, #70	; 0x46
 8002696:	5a9b      	ldrh	r3, [r3, r2]
 8002698:	b29b      	uxth	r3, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d103      	bne.n	80026a6 <SPI_2linesTxISR_8BIT+0x8c>
    {
      SPI_CloseRxTx_ISR(hspi);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	0018      	movs	r0, r3
 80026a2:	f000 fa8d 	bl	8002bc0 <SPI_CloseRxTx_ISR>
    }
  }
}
 80026a6:	46c0      	nop			; (mov r8, r8)
 80026a8:	46bd      	mov	sp, r7
 80026aa:	b002      	add	sp, #8
 80026ac:	bd80      	pop	{r7, pc}

080026ae <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b082      	sub	sp, #8
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	68da      	ldr	r2, [r3, #12]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c0:	b292      	uxth	r2, r2
 80026c2:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c8:	1c9a      	adds	r2, r3, #2
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2246      	movs	r2, #70	; 0x46
 80026d2:	5a9b      	ldrh	r3, [r3, r2]
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	3b01      	subs	r3, #1
 80026d8:	b299      	uxth	r1, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2246      	movs	r2, #70	; 0x46
 80026de:	5299      	strh	r1, [r3, r2]

  if (hspi->RxXferCount == 0U)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2246      	movs	r2, #70	; 0x46
 80026e4:	5a9b      	ldrh	r3, [r3, r2]
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d110      	bne.n	800270e <SPI_2linesRxISR_16BIT+0x60>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	685a      	ldr	r2, [r3, #4]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2140      	movs	r1, #64	; 0x40
 80026f8:	438a      	bics	r2, r1
 80026fa:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002700:	b29b      	uxth	r3, r3
 8002702:	2b00      	cmp	r3, #0
 8002704:	d103      	bne.n	800270e <SPI_2linesRxISR_16BIT+0x60>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	0018      	movs	r0, r3
 800270a:	f000 fa59 	bl	8002bc0 <SPI_CloseRxTx_ISR>
    }
  }
}
 800270e:	46c0      	nop			; (mov r8, r8)
 8002710:	46bd      	mov	sp, r7
 8002712:	b002      	add	sp, #8
 8002714:	bd80      	pop	{r7, pc}

08002716 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002716:	b580      	push	{r7, lr}
 8002718:	b082      	sub	sp, #8
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002722:	881a      	ldrh	r2, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800272e:	1c9a      	adds	r2, r3, #2
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002738:	b29b      	uxth	r3, r3
 800273a:	3b01      	subs	r3, #1
 800273c:	b29a      	uxth	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002746:	b29b      	uxth	r3, r3
 8002748:	2b00      	cmp	r3, #0
 800274a:	d111      	bne.n	8002770 <SPI_2linesTxISR_16BIT+0x5a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	685a      	ldr	r2, [r3, #4]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2180      	movs	r1, #128	; 0x80
 8002758:	438a      	bics	r2, r1
 800275a:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2246      	movs	r2, #70	; 0x46
 8002760:	5a9b      	ldrh	r3, [r3, r2]
 8002762:	b29b      	uxth	r3, r3
 8002764:	2b00      	cmp	r3, #0
 8002766:	d103      	bne.n	8002770 <SPI_2linesTxISR_16BIT+0x5a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	0018      	movs	r0, r3
 800276c:	f000 fa28 	bl	8002bc0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002770:	46c0      	nop			; (mov r8, r8)
 8002772:	46bd      	mov	sp, r7
 8002774:	b002      	add	sp, #8
 8002776:	bd80      	pop	{r7, pc}

08002778 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	330c      	adds	r3, #12
 8002786:	001a      	movs	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278c:	7812      	ldrb	r2, [r2, #0]
 800278e:	b2d2      	uxtb	r2, r2
 8002790:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002796:	1c5a      	adds	r2, r3, #1
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2246      	movs	r2, #70	; 0x46
 80027a0:	5a9b      	ldrh	r3, [r3, r2]
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	3b01      	subs	r3, #1
 80027a6:	b299      	uxth	r1, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2246      	movs	r2, #70	; 0x46
 80027ac:	5299      	strh	r1, [r3, r2]
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2246      	movs	r2, #70	; 0x46
 80027b2:	5a9b      	ldrh	r3, [r3, r2]
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d103      	bne.n	80027c2 <SPI_RxISR_8BIT+0x4a>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	0018      	movs	r0, r3
 80027be:	f000 fa45 	bl	8002c4c <SPI_CloseRx_ISR>
  }
}
 80027c2:	46c0      	nop			; (mov r8, r8)
 80027c4:	46bd      	mov	sp, r7
 80027c6:	b002      	add	sp, #8
 80027c8:	bd80      	pop	{r7, pc}

080027ca <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b082      	sub	sp, #8
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68da      	ldr	r2, [r3, #12]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027dc:	b292      	uxth	r2, r2
 80027de:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e4:	1c9a      	adds	r2, r3, #2
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2246      	movs	r2, #70	; 0x46
 80027ee:	5a9b      	ldrh	r3, [r3, r2]
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	3b01      	subs	r3, #1
 80027f4:	b299      	uxth	r1, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2246      	movs	r2, #70	; 0x46
 80027fa:	5299      	strh	r1, [r3, r2]
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2246      	movs	r2, #70	; 0x46
 8002800:	5a9b      	ldrh	r3, [r3, r2]
 8002802:	b29b      	uxth	r3, r3
 8002804:	2b00      	cmp	r3, #0
 8002806:	d103      	bne.n	8002810 <SPI_RxISR_16BIT+0x46>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	0018      	movs	r0, r3
 800280c:	f000 fa1e 	bl	8002c4c <SPI_CloseRx_ISR>
  }
}
 8002810:	46c0      	nop			; (mov r8, r8)
 8002812:	46bd      	mov	sp, r7
 8002814:	b002      	add	sp, #8
 8002816:	bd80      	pop	{r7, pc}

08002818 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b088      	sub	sp, #32
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	603b      	str	r3, [r7, #0]
 8002824:	1dfb      	adds	r3, r7, #7
 8002826:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002828:	f7fe fa00 	bl	8000c2c <HAL_GetTick>
 800282c:	0002      	movs	r2, r0
 800282e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002830:	1a9b      	subs	r3, r3, r2
 8002832:	683a      	ldr	r2, [r7, #0]
 8002834:	18d3      	adds	r3, r2, r3
 8002836:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002838:	f7fe f9f8 	bl	8000c2c <HAL_GetTick>
 800283c:	0003      	movs	r3, r0
 800283e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002840:	4b3a      	ldr	r3, [pc, #232]	; (800292c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	015b      	lsls	r3, r3, #5
 8002846:	0d1b      	lsrs	r3, r3, #20
 8002848:	69fa      	ldr	r2, [r7, #28]
 800284a:	4353      	muls	r3, r2
 800284c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800284e:	e058      	b.n	8002902 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	3301      	adds	r3, #1
 8002854:	d055      	beq.n	8002902 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002856:	f7fe f9e9 	bl	8000c2c <HAL_GetTick>
 800285a:	0002      	movs	r2, r0
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	69fa      	ldr	r2, [r7, #28]
 8002862:	429a      	cmp	r2, r3
 8002864:	d902      	bls.n	800286c <SPI_WaitFlagStateUntilTimeout+0x54>
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d142      	bne.n	80028f2 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	685a      	ldr	r2, [r3, #4]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	21e0      	movs	r1, #224	; 0xe0
 8002878:	438a      	bics	r2, r1
 800287a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	685a      	ldr	r2, [r3, #4]
 8002880:	2382      	movs	r3, #130	; 0x82
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	429a      	cmp	r2, r3
 8002886:	d113      	bne.n	80028b0 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	689a      	ldr	r2, [r3, #8]
 800288c:	2380      	movs	r3, #128	; 0x80
 800288e:	021b      	lsls	r3, r3, #8
 8002890:	429a      	cmp	r2, r3
 8002892:	d005      	beq.n	80028a0 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	689a      	ldr	r2, [r3, #8]
 8002898:	2380      	movs	r3, #128	; 0x80
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	429a      	cmp	r2, r3
 800289e:	d107      	bne.n	80028b0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2140      	movs	r1, #64	; 0x40
 80028ac:	438a      	bics	r2, r1
 80028ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028b4:	2380      	movs	r3, #128	; 0x80
 80028b6:	019b      	lsls	r3, r3, #6
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d110      	bne.n	80028de <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	491a      	ldr	r1, [pc, #104]	; (8002930 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80028c8:	400a      	ands	r2, r1
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2180      	movs	r1, #128	; 0x80
 80028d8:	0189      	lsls	r1, r1, #6
 80028da:	430a      	orrs	r2, r1
 80028dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	225d      	movs	r2, #93	; 0x5d
 80028e2:	2101      	movs	r1, #1
 80028e4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	225c      	movs	r2, #92	; 0x5c
 80028ea:	2100      	movs	r1, #0
 80028ec:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e017      	b.n	8002922 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d101      	bne.n	80028fc <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80028f8:	2300      	movs	r3, #0
 80028fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	3b01      	subs	r3, #1
 8002900:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	68ba      	ldr	r2, [r7, #8]
 800290a:	4013      	ands	r3, r2
 800290c:	68ba      	ldr	r2, [r7, #8]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	425a      	negs	r2, r3
 8002912:	4153      	adcs	r3, r2
 8002914:	b2db      	uxtb	r3, r3
 8002916:	001a      	movs	r2, r3
 8002918:	1dfb      	adds	r3, r7, #7
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	429a      	cmp	r2, r3
 800291e:	d197      	bne.n	8002850 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002920:	2300      	movs	r3, #0
}
 8002922:	0018      	movs	r0, r3
 8002924:	46bd      	mov	sp, r7
 8002926:	b008      	add	sp, #32
 8002928:	bd80      	pop	{r7, pc}
 800292a:	46c0      	nop			; (mov r8, r8)
 800292c:	20000000 	.word	0x20000000
 8002930:	ffffdfff 	.word	0xffffdfff

08002934 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b08a      	sub	sp, #40	; 0x28
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	607a      	str	r2, [r7, #4]
 8002940:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002942:	2317      	movs	r3, #23
 8002944:	18fb      	adds	r3, r7, r3
 8002946:	2200      	movs	r2, #0
 8002948:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800294a:	f7fe f96f 	bl	8000c2c <HAL_GetTick>
 800294e:	0002      	movs	r2, r0
 8002950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002952:	1a9b      	subs	r3, r3, r2
 8002954:	683a      	ldr	r2, [r7, #0]
 8002956:	18d3      	adds	r3, r2, r3
 8002958:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800295a:	f7fe f967 	bl	8000c2c <HAL_GetTick>
 800295e:	0003      	movs	r3, r0
 8002960:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	330c      	adds	r3, #12
 8002968:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800296a:	4b41      	ldr	r3, [pc, #260]	; (8002a70 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	0013      	movs	r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	189b      	adds	r3, r3, r2
 8002974:	00da      	lsls	r2, r3, #3
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	0d1b      	lsrs	r3, r3, #20
 800297a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800297c:	4353      	muls	r3, r2
 800297e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002980:	e068      	b.n	8002a54 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002982:	68ba      	ldr	r2, [r7, #8]
 8002984:	23c0      	movs	r3, #192	; 0xc0
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	429a      	cmp	r2, r3
 800298a:	d10a      	bne.n	80029a2 <SPI_WaitFifoStateUntilTimeout+0x6e>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d107      	bne.n	80029a2 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	b2da      	uxtb	r2, r3
 8002998:	2117      	movs	r1, #23
 800299a:	187b      	adds	r3, r7, r1
 800299c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800299e:	187b      	adds	r3, r7, r1
 80029a0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	3301      	adds	r3, #1
 80029a6:	d055      	beq.n	8002a54 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80029a8:	f7fe f940 	bl	8000c2c <HAL_GetTick>
 80029ac:	0002      	movs	r2, r0
 80029ae:	6a3b      	ldr	r3, [r7, #32]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d902      	bls.n	80029be <SPI_WaitFifoStateUntilTimeout+0x8a>
 80029b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d142      	bne.n	8002a44 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	685a      	ldr	r2, [r3, #4]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	21e0      	movs	r1, #224	; 0xe0
 80029ca:	438a      	bics	r2, r1
 80029cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	685a      	ldr	r2, [r3, #4]
 80029d2:	2382      	movs	r3, #130	; 0x82
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d113      	bne.n	8002a02 <SPI_WaitFifoStateUntilTimeout+0xce>
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	689a      	ldr	r2, [r3, #8]
 80029de:	2380      	movs	r3, #128	; 0x80
 80029e0:	021b      	lsls	r3, r3, #8
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d005      	beq.n	80029f2 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	689a      	ldr	r2, [r3, #8]
 80029ea:	2380      	movs	r3, #128	; 0x80
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d107      	bne.n	8002a02 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2140      	movs	r1, #64	; 0x40
 80029fe:	438a      	bics	r2, r1
 8002a00:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a06:	2380      	movs	r3, #128	; 0x80
 8002a08:	019b      	lsls	r3, r3, #6
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d110      	bne.n	8002a30 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4916      	ldr	r1, [pc, #88]	; (8002a74 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8002a1a:	400a      	ands	r2, r1
 8002a1c:	601a      	str	r2, [r3, #0]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2180      	movs	r1, #128	; 0x80
 8002a2a:	0189      	lsls	r1, r1, #6
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	225d      	movs	r2, #93	; 0x5d
 8002a34:	2101      	movs	r1, #1
 8002a36:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	225c      	movs	r2, #92	; 0x5c
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e010      	b.n	8002a66 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d101      	bne.n	8002a4e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	3b01      	subs	r3, #1
 8002a52:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	68ba      	ldr	r2, [r7, #8]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d18e      	bne.n	8002982 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	0018      	movs	r0, r3
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	b00a      	add	sp, #40	; 0x28
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	46c0      	nop			; (mov r8, r8)
 8002a70:	20000000 	.word	0x20000000
 8002a74:	ffffdfff 	.word	0xffffdfff

08002a78 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af02      	add	r7, sp, #8
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	685a      	ldr	r2, [r3, #4]
 8002a88:	2382      	movs	r3, #130	; 0x82
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d113      	bne.n	8002ab8 <SPI_EndRxTransaction+0x40>
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	689a      	ldr	r2, [r3, #8]
 8002a94:	2380      	movs	r3, #128	; 0x80
 8002a96:	021b      	lsls	r3, r3, #8
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d005      	beq.n	8002aa8 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	689a      	ldr	r2, [r3, #8]
 8002aa0:	2380      	movs	r3, #128	; 0x80
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d107      	bne.n	8002ab8 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2140      	movs	r1, #64	; 0x40
 8002ab4:	438a      	bics	r2, r1
 8002ab6:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ab8:	68ba      	ldr	r2, [r7, #8]
 8002aba:	68f8      	ldr	r0, [r7, #12]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	9300      	str	r3, [sp, #0]
 8002ac0:	0013      	movs	r3, r2
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	2180      	movs	r1, #128	; 0x80
 8002ac6:	f7ff fea7 	bl	8002818 <SPI_WaitFlagStateUntilTimeout>
 8002aca:	1e03      	subs	r3, r0, #0
 8002acc:	d007      	beq.n	8002ade <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ad2:	2220      	movs	r2, #32
 8002ad4:	431a      	orrs	r2, r3
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e026      	b.n	8002b2c <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	685a      	ldr	r2, [r3, #4]
 8002ae2:	2382      	movs	r3, #130	; 0x82
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d11f      	bne.n	8002b2a <SPI_EndRxTransaction+0xb2>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	689a      	ldr	r2, [r3, #8]
 8002aee:	2380      	movs	r3, #128	; 0x80
 8002af0:	021b      	lsls	r3, r3, #8
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d005      	beq.n	8002b02 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	689a      	ldr	r2, [r3, #8]
 8002afa:	2380      	movs	r3, #128	; 0x80
 8002afc:	00db      	lsls	r3, r3, #3
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d113      	bne.n	8002b2a <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002b02:	68ba      	ldr	r2, [r7, #8]
 8002b04:	23c0      	movs	r3, #192	; 0xc0
 8002b06:	00d9      	lsls	r1, r3, #3
 8002b08:	68f8      	ldr	r0, [r7, #12]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	9300      	str	r3, [sp, #0]
 8002b0e:	0013      	movs	r3, r2
 8002b10:	2200      	movs	r2, #0
 8002b12:	f7ff ff0f 	bl	8002934 <SPI_WaitFifoStateUntilTimeout>
 8002b16:	1e03      	subs	r3, r0, #0
 8002b18:	d007      	beq.n	8002b2a <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b1e:	2220      	movs	r2, #32
 8002b20:	431a      	orrs	r2, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e000      	b.n	8002b2c <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	b004      	add	sp, #16
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af02      	add	r7, sp, #8
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002b40:	68ba      	ldr	r2, [r7, #8]
 8002b42:	23c0      	movs	r3, #192	; 0xc0
 8002b44:	0159      	lsls	r1, r3, #5
 8002b46:	68f8      	ldr	r0, [r7, #12]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	9300      	str	r3, [sp, #0]
 8002b4c:	0013      	movs	r3, r2
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f7ff fef0 	bl	8002934 <SPI_WaitFifoStateUntilTimeout>
 8002b54:	1e03      	subs	r3, r0, #0
 8002b56:	d007      	beq.n	8002b68 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b5c:	2220      	movs	r2, #32
 8002b5e:	431a      	orrs	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e027      	b.n	8002bb8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b68:	68ba      	ldr	r2, [r7, #8]
 8002b6a:	68f8      	ldr	r0, [r7, #12]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	9300      	str	r3, [sp, #0]
 8002b70:	0013      	movs	r3, r2
 8002b72:	2200      	movs	r2, #0
 8002b74:	2180      	movs	r1, #128	; 0x80
 8002b76:	f7ff fe4f 	bl	8002818 <SPI_WaitFlagStateUntilTimeout>
 8002b7a:	1e03      	subs	r3, r0, #0
 8002b7c:	d007      	beq.n	8002b8e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b82:	2220      	movs	r2, #32
 8002b84:	431a      	orrs	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e014      	b.n	8002bb8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002b8e:	68ba      	ldr	r2, [r7, #8]
 8002b90:	23c0      	movs	r3, #192	; 0xc0
 8002b92:	00d9      	lsls	r1, r3, #3
 8002b94:	68f8      	ldr	r0, [r7, #12]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	9300      	str	r3, [sp, #0]
 8002b9a:	0013      	movs	r3, r2
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f7ff fec9 	bl	8002934 <SPI_WaitFifoStateUntilTimeout>
 8002ba2:	1e03      	subs	r3, r0, #0
 8002ba4:	d007      	beq.n	8002bb6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002baa:	2220      	movs	r2, #32
 8002bac:	431a      	orrs	r2, r3
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e000      	b.n	8002bb8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	0018      	movs	r0, r3
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	b004      	add	sp, #16
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002bc8:	f7fe f830 	bl	8000c2c <HAL_GetTick>
 8002bcc:	0003      	movs	r3, r0
 8002bce:	60fb      	str	r3, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	685a      	ldr	r2, [r3, #4]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2120      	movs	r1, #32
 8002bdc:	438a      	bics	r2, r1
 8002bde:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2164      	movs	r1, #100	; 0x64
 8002be6:	0018      	movs	r0, r3
 8002be8:	f7ff ffa4 	bl	8002b34 <SPI_EndRxTxTransaction>
 8002bec:	1e03      	subs	r3, r0, #0
 8002bee:	d005      	beq.n	8002bfc <SPI_CloseRxTx_ISR+0x3c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bf4:	2220      	movs	r2, #32
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d117      	bne.n	8002c34 <SPI_CloseRxTx_ISR+0x74>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	225d      	movs	r2, #93	; 0x5d
 8002c08:	5c9b      	ldrb	r3, [r3, r2]
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	2b04      	cmp	r3, #4
 8002c0e:	d108      	bne.n	8002c22 <SPI_CloseRxTx_ISR+0x62>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	225d      	movs	r2, #93	; 0x5d
 8002c14:	2101      	movs	r1, #1
 8002c16:	5499      	strb	r1, [r3, r2]
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	0018      	movs	r0, r3
 8002c1c:	f7fd fe20 	bl	8000860 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8002c20:	e010      	b.n	8002c44 <SPI_CloseRxTx_ISR+0x84>
        hspi->State = HAL_SPI_STATE_READY;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	225d      	movs	r2, #93	; 0x5d
 8002c26:	2101      	movs	r1, #1
 8002c28:	5499      	strb	r1, [r3, r2]
        HAL_SPI_TxRxCpltCallback(hspi);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	0018      	movs	r0, r3
 8002c2e:	f7ff fc6d 	bl	800250c <HAL_SPI_TxRxCpltCallback>
}
 8002c32:	e007      	b.n	8002c44 <SPI_CloseRxTx_ISR+0x84>
      hspi->State = HAL_SPI_STATE_READY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	225d      	movs	r2, #93	; 0x5d
 8002c38:	2101      	movs	r1, #1
 8002c3a:	5499      	strb	r1, [r3, r2]
      HAL_SPI_ErrorCallback(hspi);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	0018      	movs	r0, r3
 8002c40:	f7ff fc6c 	bl	800251c <HAL_SPI_ErrorCallback>
}
 8002c44:	46c0      	nop			; (mov r8, r8)
 8002c46:	46bd      	mov	sp, r7
 8002c48:	b004      	add	sp, #16
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	685a      	ldr	r2, [r3, #4]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2160      	movs	r1, #96	; 0x60
 8002c60:	438a      	bics	r2, r1
 8002c62:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8002c64:	f7fd ffe2 	bl	8000c2c <HAL_GetTick>
 8002c68:	0002      	movs	r2, r0
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2164      	movs	r1, #100	; 0x64
 8002c6e:	0018      	movs	r0, r3
 8002c70:	f7ff ff02 	bl	8002a78 <SPI_EndRxTransaction>
 8002c74:	1e03      	subs	r3, r0, #0
 8002c76:	d005      	beq.n	8002c84 <SPI_CloseRx_ISR+0x38>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c7c:	2220      	movs	r2, #32
 8002c7e:	431a      	orrs	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	225d      	movs	r2, #93	; 0x5d
 8002c88:	2101      	movs	r1, #1
 8002c8a:	5499      	strb	r1, [r3, r2]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d104      	bne.n	8002c9e <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	0018      	movs	r0, r3
 8002c98:	f7fd fde2 	bl	8000860 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8002c9c:	e003      	b.n	8002ca6 <SPI_CloseRx_ISR+0x5a>
      HAL_SPI_ErrorCallback(hspi);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	0018      	movs	r0, r3
 8002ca2:	f7ff fc3b 	bl	800251c <HAL_SPI_ErrorCallback>
}
 8002ca6:	46c0      	nop			; (mov r8, r8)
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	b002      	add	sp, #8
 8002cac:	bd80      	pop	{r7, pc}
	...

08002cb0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e046      	b.n	8002d50 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2288      	movs	r2, #136	; 0x88
 8002cc6:	589b      	ldr	r3, [r3, r2]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d107      	bne.n	8002cdc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2284      	movs	r2, #132	; 0x84
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	0018      	movs	r0, r3
 8002cd8:	f7fd fe76 	bl	80009c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2288      	movs	r2, #136	; 0x88
 8002ce0:	2124      	movs	r1, #36	; 0x24
 8002ce2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2101      	movs	r1, #1
 8002cf0:	438a      	bics	r2, r1
 8002cf2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	0018      	movs	r0, r3
 8002cf8:	f000 f8cc 	bl	8002e94 <UART_SetConfig>
 8002cfc:	0003      	movs	r3, r0
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d101      	bne.n	8002d06 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e024      	b.n	8002d50 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d003      	beq.n	8002d16 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	0018      	movs	r0, r3
 8002d12:	f000 fb37 	bl	8003384 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	685a      	ldr	r2, [r3, #4]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	490d      	ldr	r1, [pc, #52]	; (8002d58 <HAL_UART_Init+0xa8>)
 8002d22:	400a      	ands	r2, r1
 8002d24:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	689a      	ldr	r2, [r3, #8]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	212a      	movs	r1, #42	; 0x2a
 8002d32:	438a      	bics	r2, r1
 8002d34:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2101      	movs	r1, #1
 8002d42:	430a      	orrs	r2, r1
 8002d44:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	0018      	movs	r0, r3
 8002d4a:	f000 fbcf 	bl	80034ec <UART_CheckIdleState>
 8002d4e:	0003      	movs	r3, r0
}
 8002d50:	0018      	movs	r0, r3
 8002d52:	46bd      	mov	sp, r7
 8002d54:	b002      	add	sp, #8
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	ffffb7ff 	.word	0xffffb7ff

08002d5c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b08a      	sub	sp, #40	; 0x28
 8002d60:	af02      	add	r7, sp, #8
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	603b      	str	r3, [r7, #0]
 8002d68:	1dbb      	adds	r3, r7, #6
 8002d6a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2288      	movs	r2, #136	; 0x88
 8002d70:	589b      	ldr	r3, [r3, r2]
 8002d72:	2b20      	cmp	r3, #32
 8002d74:	d000      	beq.n	8002d78 <HAL_UART_Transmit+0x1c>
 8002d76:	e088      	b.n	8002e8a <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d003      	beq.n	8002d86 <HAL_UART_Transmit+0x2a>
 8002d7e:	1dbb      	adds	r3, r7, #6
 8002d80:	881b      	ldrh	r3, [r3, #0]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d101      	bne.n	8002d8a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e080      	b.n	8002e8c <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	689a      	ldr	r2, [r3, #8]
 8002d8e:	2380      	movs	r3, #128	; 0x80
 8002d90:	015b      	lsls	r3, r3, #5
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d109      	bne.n	8002daa <HAL_UART_Transmit+0x4e>
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d105      	bne.n	8002daa <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	2201      	movs	r2, #1
 8002da2:	4013      	ands	r3, r2
 8002da4:	d001      	beq.n	8002daa <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e070      	b.n	8002e8c <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2290      	movs	r2, #144	; 0x90
 8002dae:	2100      	movs	r1, #0
 8002db0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2288      	movs	r2, #136	; 0x88
 8002db6:	2121      	movs	r1, #33	; 0x21
 8002db8:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002dba:	f7fd ff37 	bl	8000c2c <HAL_GetTick>
 8002dbe:	0003      	movs	r3, r0
 8002dc0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	1dba      	adds	r2, r7, #6
 8002dc6:	2154      	movs	r1, #84	; 0x54
 8002dc8:	8812      	ldrh	r2, [r2, #0]
 8002dca:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	1dba      	adds	r2, r7, #6
 8002dd0:	2156      	movs	r1, #86	; 0x56
 8002dd2:	8812      	ldrh	r2, [r2, #0]
 8002dd4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	689a      	ldr	r2, [r3, #8]
 8002dda:	2380      	movs	r3, #128	; 0x80
 8002ddc:	015b      	lsls	r3, r3, #5
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d108      	bne.n	8002df4 <HAL_UART_Transmit+0x98>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d104      	bne.n	8002df4 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8002dea:	2300      	movs	r3, #0
 8002dec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	61bb      	str	r3, [r7, #24]
 8002df2:	e003      	b.n	8002dfc <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002dfc:	e02c      	b.n	8002e58 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002dfe:	697a      	ldr	r2, [r7, #20]
 8002e00:	68f8      	ldr	r0, [r7, #12]
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	0013      	movs	r3, r2
 8002e08:	2200      	movs	r2, #0
 8002e0a:	2180      	movs	r1, #128	; 0x80
 8002e0c:	f000 fbbc 	bl	8003588 <UART_WaitOnFlagUntilTimeout>
 8002e10:	1e03      	subs	r3, r0, #0
 8002e12:	d001      	beq.n	8002e18 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e039      	b.n	8002e8c <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d10b      	bne.n	8002e36 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	881b      	ldrh	r3, [r3, #0]
 8002e22:	001a      	movs	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	05d2      	lsls	r2, r2, #23
 8002e2a:	0dd2      	lsrs	r2, r2, #23
 8002e2c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	3302      	adds	r3, #2
 8002e32:	61bb      	str	r3, [r7, #24]
 8002e34:	e007      	b.n	8002e46 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	781a      	ldrb	r2, [r3, #0]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	3301      	adds	r3, #1
 8002e44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2256      	movs	r2, #86	; 0x56
 8002e4a:	5a9b      	ldrh	r3, [r3, r2]
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	b299      	uxth	r1, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2256      	movs	r2, #86	; 0x56
 8002e56:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2256      	movs	r2, #86	; 0x56
 8002e5c:	5a9b      	ldrh	r3, [r3, r2]
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d1cc      	bne.n	8002dfe <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e64:	697a      	ldr	r2, [r7, #20]
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	9300      	str	r3, [sp, #0]
 8002e6c:	0013      	movs	r3, r2
 8002e6e:	2200      	movs	r2, #0
 8002e70:	2140      	movs	r1, #64	; 0x40
 8002e72:	f000 fb89 	bl	8003588 <UART_WaitOnFlagUntilTimeout>
 8002e76:	1e03      	subs	r3, r0, #0
 8002e78:	d001      	beq.n	8002e7e <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e006      	b.n	8002e8c <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2288      	movs	r2, #136	; 0x88
 8002e82:	2120      	movs	r1, #32
 8002e84:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002e86:	2300      	movs	r3, #0
 8002e88:	e000      	b.n	8002e8c <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8002e8a:	2302      	movs	r3, #2
  }
}
 8002e8c:	0018      	movs	r0, r3
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	b008      	add	sp, #32
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e94:	b5b0      	push	{r4, r5, r7, lr}
 8002e96:	b090      	sub	sp, #64	; 0x40
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e9c:	231a      	movs	r3, #26
 8002e9e:	2220      	movs	r2, #32
 8002ea0:	189b      	adds	r3, r3, r2
 8002ea2:	19db      	adds	r3, r3, r7
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eae:	691b      	ldr	r3, [r3, #16]
 8002eb0:	431a      	orrs	r2, r3
 8002eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb4:	695b      	ldr	r3, [r3, #20]
 8002eb6:	431a      	orrs	r2, r3
 8002eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eba:	69db      	ldr	r3, [r3, #28]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4ac4      	ldr	r2, [pc, #784]	; (80031d8 <UART_SetConfig+0x344>)
 8002ec8:	4013      	ands	r3, r2
 8002eca:	0019      	movs	r1, r3
 8002ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ed2:	430b      	orrs	r3, r1
 8002ed4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	4abf      	ldr	r2, [pc, #764]	; (80031dc <UART_SetConfig+0x348>)
 8002ede:	4013      	ands	r3, r2
 8002ee0:	0018      	movs	r0, r3
 8002ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee4:	68d9      	ldr	r1, [r3, #12]
 8002ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	0003      	movs	r3, r0
 8002eec:	430b      	orrs	r3, r1
 8002eee:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4ab9      	ldr	r2, [pc, #740]	; (80031e0 <UART_SetConfig+0x34c>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d004      	beq.n	8002f0a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f02:	6a1b      	ldr	r3, [r3, #32]
 8002f04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f06:	4313      	orrs	r3, r2
 8002f08:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	4ab4      	ldr	r2, [pc, #720]	; (80031e4 <UART_SetConfig+0x350>)
 8002f12:	4013      	ands	r3, r2
 8002f14:	0019      	movs	r1, r3
 8002f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f1c:	430b      	orrs	r3, r1
 8002f1e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f26:	220f      	movs	r2, #15
 8002f28:	4393      	bics	r3, r2
 8002f2a:	0018      	movs	r0, r3
 8002f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	0003      	movs	r3, r0
 8002f36:	430b      	orrs	r3, r1
 8002f38:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4aaa      	ldr	r2, [pc, #680]	; (80031e8 <UART_SetConfig+0x354>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d131      	bne.n	8002fa8 <UART_SetConfig+0x114>
 8002f44:	4ba9      	ldr	r3, [pc, #676]	; (80031ec <UART_SetConfig+0x358>)
 8002f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f48:	2203      	movs	r2, #3
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	2b03      	cmp	r3, #3
 8002f4e:	d01d      	beq.n	8002f8c <UART_SetConfig+0xf8>
 8002f50:	d823      	bhi.n	8002f9a <UART_SetConfig+0x106>
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d00c      	beq.n	8002f70 <UART_SetConfig+0xdc>
 8002f56:	d820      	bhi.n	8002f9a <UART_SetConfig+0x106>
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d002      	beq.n	8002f62 <UART_SetConfig+0xce>
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d00e      	beq.n	8002f7e <UART_SetConfig+0xea>
 8002f60:	e01b      	b.n	8002f9a <UART_SetConfig+0x106>
 8002f62:	231b      	movs	r3, #27
 8002f64:	2220      	movs	r2, #32
 8002f66:	189b      	adds	r3, r3, r2
 8002f68:	19db      	adds	r3, r3, r7
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	701a      	strb	r2, [r3, #0]
 8002f6e:	e071      	b.n	8003054 <UART_SetConfig+0x1c0>
 8002f70:	231b      	movs	r3, #27
 8002f72:	2220      	movs	r2, #32
 8002f74:	189b      	adds	r3, r3, r2
 8002f76:	19db      	adds	r3, r3, r7
 8002f78:	2202      	movs	r2, #2
 8002f7a:	701a      	strb	r2, [r3, #0]
 8002f7c:	e06a      	b.n	8003054 <UART_SetConfig+0x1c0>
 8002f7e:	231b      	movs	r3, #27
 8002f80:	2220      	movs	r2, #32
 8002f82:	189b      	adds	r3, r3, r2
 8002f84:	19db      	adds	r3, r3, r7
 8002f86:	2204      	movs	r2, #4
 8002f88:	701a      	strb	r2, [r3, #0]
 8002f8a:	e063      	b.n	8003054 <UART_SetConfig+0x1c0>
 8002f8c:	231b      	movs	r3, #27
 8002f8e:	2220      	movs	r2, #32
 8002f90:	189b      	adds	r3, r3, r2
 8002f92:	19db      	adds	r3, r3, r7
 8002f94:	2208      	movs	r2, #8
 8002f96:	701a      	strb	r2, [r3, #0]
 8002f98:	e05c      	b.n	8003054 <UART_SetConfig+0x1c0>
 8002f9a:	231b      	movs	r3, #27
 8002f9c:	2220      	movs	r2, #32
 8002f9e:	189b      	adds	r3, r3, r2
 8002fa0:	19db      	adds	r3, r3, r7
 8002fa2:	2210      	movs	r2, #16
 8002fa4:	701a      	strb	r2, [r3, #0]
 8002fa6:	e055      	b.n	8003054 <UART_SetConfig+0x1c0>
 8002fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a90      	ldr	r2, [pc, #576]	; (80031f0 <UART_SetConfig+0x35c>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d106      	bne.n	8002fc0 <UART_SetConfig+0x12c>
 8002fb2:	231b      	movs	r3, #27
 8002fb4:	2220      	movs	r2, #32
 8002fb6:	189b      	adds	r3, r3, r2
 8002fb8:	19db      	adds	r3, r3, r7
 8002fba:	2200      	movs	r2, #0
 8002fbc:	701a      	strb	r2, [r3, #0]
 8002fbe:	e049      	b.n	8003054 <UART_SetConfig+0x1c0>
 8002fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a86      	ldr	r2, [pc, #536]	; (80031e0 <UART_SetConfig+0x34c>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d13e      	bne.n	8003048 <UART_SetConfig+0x1b4>
 8002fca:	4b88      	ldr	r3, [pc, #544]	; (80031ec <UART_SetConfig+0x358>)
 8002fcc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002fce:	23c0      	movs	r3, #192	; 0xc0
 8002fd0:	011b      	lsls	r3, r3, #4
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	22c0      	movs	r2, #192	; 0xc0
 8002fd6:	0112      	lsls	r2, r2, #4
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d027      	beq.n	800302c <UART_SetConfig+0x198>
 8002fdc:	22c0      	movs	r2, #192	; 0xc0
 8002fde:	0112      	lsls	r2, r2, #4
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d82a      	bhi.n	800303a <UART_SetConfig+0x1a6>
 8002fe4:	2280      	movs	r2, #128	; 0x80
 8002fe6:	0112      	lsls	r2, r2, #4
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d011      	beq.n	8003010 <UART_SetConfig+0x17c>
 8002fec:	2280      	movs	r2, #128	; 0x80
 8002fee:	0112      	lsls	r2, r2, #4
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d822      	bhi.n	800303a <UART_SetConfig+0x1a6>
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d004      	beq.n	8003002 <UART_SetConfig+0x16e>
 8002ff8:	2280      	movs	r2, #128	; 0x80
 8002ffa:	00d2      	lsls	r2, r2, #3
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d00e      	beq.n	800301e <UART_SetConfig+0x18a>
 8003000:	e01b      	b.n	800303a <UART_SetConfig+0x1a6>
 8003002:	231b      	movs	r3, #27
 8003004:	2220      	movs	r2, #32
 8003006:	189b      	adds	r3, r3, r2
 8003008:	19db      	adds	r3, r3, r7
 800300a:	2200      	movs	r2, #0
 800300c:	701a      	strb	r2, [r3, #0]
 800300e:	e021      	b.n	8003054 <UART_SetConfig+0x1c0>
 8003010:	231b      	movs	r3, #27
 8003012:	2220      	movs	r2, #32
 8003014:	189b      	adds	r3, r3, r2
 8003016:	19db      	adds	r3, r3, r7
 8003018:	2202      	movs	r2, #2
 800301a:	701a      	strb	r2, [r3, #0]
 800301c:	e01a      	b.n	8003054 <UART_SetConfig+0x1c0>
 800301e:	231b      	movs	r3, #27
 8003020:	2220      	movs	r2, #32
 8003022:	189b      	adds	r3, r3, r2
 8003024:	19db      	adds	r3, r3, r7
 8003026:	2204      	movs	r2, #4
 8003028:	701a      	strb	r2, [r3, #0]
 800302a:	e013      	b.n	8003054 <UART_SetConfig+0x1c0>
 800302c:	231b      	movs	r3, #27
 800302e:	2220      	movs	r2, #32
 8003030:	189b      	adds	r3, r3, r2
 8003032:	19db      	adds	r3, r3, r7
 8003034:	2208      	movs	r2, #8
 8003036:	701a      	strb	r2, [r3, #0]
 8003038:	e00c      	b.n	8003054 <UART_SetConfig+0x1c0>
 800303a:	231b      	movs	r3, #27
 800303c:	2220      	movs	r2, #32
 800303e:	189b      	adds	r3, r3, r2
 8003040:	19db      	adds	r3, r3, r7
 8003042:	2210      	movs	r2, #16
 8003044:	701a      	strb	r2, [r3, #0]
 8003046:	e005      	b.n	8003054 <UART_SetConfig+0x1c0>
 8003048:	231b      	movs	r3, #27
 800304a:	2220      	movs	r2, #32
 800304c:	189b      	adds	r3, r3, r2
 800304e:	19db      	adds	r3, r3, r7
 8003050:	2210      	movs	r2, #16
 8003052:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a61      	ldr	r2, [pc, #388]	; (80031e0 <UART_SetConfig+0x34c>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d000      	beq.n	8003060 <UART_SetConfig+0x1cc>
 800305e:	e092      	b.n	8003186 <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003060:	231b      	movs	r3, #27
 8003062:	2220      	movs	r2, #32
 8003064:	189b      	adds	r3, r3, r2
 8003066:	19db      	adds	r3, r3, r7
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	2b08      	cmp	r3, #8
 800306c:	d015      	beq.n	800309a <UART_SetConfig+0x206>
 800306e:	dc18      	bgt.n	80030a2 <UART_SetConfig+0x20e>
 8003070:	2b04      	cmp	r3, #4
 8003072:	d00d      	beq.n	8003090 <UART_SetConfig+0x1fc>
 8003074:	dc15      	bgt.n	80030a2 <UART_SetConfig+0x20e>
 8003076:	2b00      	cmp	r3, #0
 8003078:	d002      	beq.n	8003080 <UART_SetConfig+0x1ec>
 800307a:	2b02      	cmp	r3, #2
 800307c:	d005      	beq.n	800308a <UART_SetConfig+0x1f6>
 800307e:	e010      	b.n	80030a2 <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003080:	f7fe fd84 	bl	8001b8c <HAL_RCC_GetPCLK1Freq>
 8003084:	0003      	movs	r3, r0
 8003086:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003088:	e014      	b.n	80030b4 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800308a:	4b5a      	ldr	r3, [pc, #360]	; (80031f4 <UART_SetConfig+0x360>)
 800308c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800308e:	e011      	b.n	80030b4 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003090:	f7fe fcf0 	bl	8001a74 <HAL_RCC_GetSysClockFreq>
 8003094:	0003      	movs	r3, r0
 8003096:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003098:	e00c      	b.n	80030b4 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800309a:	2380      	movs	r3, #128	; 0x80
 800309c:	021b      	lsls	r3, r3, #8
 800309e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80030a0:	e008      	b.n	80030b4 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 80030a2:	2300      	movs	r3, #0
 80030a4:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80030a6:	231a      	movs	r3, #26
 80030a8:	2220      	movs	r2, #32
 80030aa:	189b      	adds	r3, r3, r2
 80030ac:	19db      	adds	r3, r3, r7
 80030ae:	2201      	movs	r2, #1
 80030b0:	701a      	strb	r2, [r3, #0]
        break;
 80030b2:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80030b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d100      	bne.n	80030bc <UART_SetConfig+0x228>
 80030ba:	e147      	b.n	800334c <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80030bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030c0:	4b4d      	ldr	r3, [pc, #308]	; (80031f8 <UART_SetConfig+0x364>)
 80030c2:	0052      	lsls	r2, r2, #1
 80030c4:	5ad3      	ldrh	r3, [r2, r3]
 80030c6:	0019      	movs	r1, r3
 80030c8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80030ca:	f7fd f81b 	bl	8000104 <__udivsi3>
 80030ce:	0003      	movs	r3, r0
 80030d0:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80030d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d4:	685a      	ldr	r2, [r3, #4]
 80030d6:	0013      	movs	r3, r2
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	189b      	adds	r3, r3, r2
 80030dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030de:	429a      	cmp	r2, r3
 80030e0:	d305      	bcc.n	80030ee <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80030e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80030e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d906      	bls.n	80030fc <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 80030ee:	231a      	movs	r3, #26
 80030f0:	2220      	movs	r2, #32
 80030f2:	189b      	adds	r3, r3, r2
 80030f4:	19db      	adds	r3, r3, r7
 80030f6:	2201      	movs	r2, #1
 80030f8:	701a      	strb	r2, [r3, #0]
 80030fa:	e127      	b.n	800334c <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030fe:	61bb      	str	r3, [r7, #24]
 8003100:	2300      	movs	r3, #0
 8003102:	61fb      	str	r3, [r7, #28]
 8003104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003106:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003108:	4b3b      	ldr	r3, [pc, #236]	; (80031f8 <UART_SetConfig+0x364>)
 800310a:	0052      	lsls	r2, r2, #1
 800310c:	5ad3      	ldrh	r3, [r2, r3]
 800310e:	613b      	str	r3, [r7, #16]
 8003110:	2300      	movs	r3, #0
 8003112:	617b      	str	r3, [r7, #20]
 8003114:	693a      	ldr	r2, [r7, #16]
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	69b8      	ldr	r0, [r7, #24]
 800311a:	69f9      	ldr	r1, [r7, #28]
 800311c:	f7fd f968 	bl	80003f0 <__aeabi_uldivmod>
 8003120:	0002      	movs	r2, r0
 8003122:	000b      	movs	r3, r1
 8003124:	0e11      	lsrs	r1, r2, #24
 8003126:	021d      	lsls	r5, r3, #8
 8003128:	430d      	orrs	r5, r1
 800312a:	0214      	lsls	r4, r2, #8
 800312c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	085b      	lsrs	r3, r3, #1
 8003132:	60bb      	str	r3, [r7, #8]
 8003134:	2300      	movs	r3, #0
 8003136:	60fb      	str	r3, [r7, #12]
 8003138:	68b8      	ldr	r0, [r7, #8]
 800313a:	68f9      	ldr	r1, [r7, #12]
 800313c:	1900      	adds	r0, r0, r4
 800313e:	4169      	adcs	r1, r5
 8003140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	603b      	str	r3, [r7, #0]
 8003146:	2300      	movs	r3, #0
 8003148:	607b      	str	r3, [r7, #4]
 800314a:	683a      	ldr	r2, [r7, #0]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f7fd f94f 	bl	80003f0 <__aeabi_uldivmod>
 8003152:	0002      	movs	r2, r0
 8003154:	000b      	movs	r3, r1
 8003156:	0013      	movs	r3, r2
 8003158:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800315a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800315c:	23c0      	movs	r3, #192	; 0xc0
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	429a      	cmp	r2, r3
 8003162:	d309      	bcc.n	8003178 <UART_SetConfig+0x2e4>
 8003164:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003166:	2380      	movs	r3, #128	; 0x80
 8003168:	035b      	lsls	r3, r3, #13
 800316a:	429a      	cmp	r2, r3
 800316c:	d204      	bcs.n	8003178 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 800316e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003174:	60da      	str	r2, [r3, #12]
 8003176:	e0e9      	b.n	800334c <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8003178:	231a      	movs	r3, #26
 800317a:	2220      	movs	r2, #32
 800317c:	189b      	adds	r3, r3, r2
 800317e:	19db      	adds	r3, r3, r7
 8003180:	2201      	movs	r2, #1
 8003182:	701a      	strb	r2, [r3, #0]
 8003184:	e0e2      	b.n	800334c <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003188:	69da      	ldr	r2, [r3, #28]
 800318a:	2380      	movs	r3, #128	; 0x80
 800318c:	021b      	lsls	r3, r3, #8
 800318e:	429a      	cmp	r2, r3
 8003190:	d000      	beq.n	8003194 <UART_SetConfig+0x300>
 8003192:	e083      	b.n	800329c <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8003194:	231b      	movs	r3, #27
 8003196:	2220      	movs	r2, #32
 8003198:	189b      	adds	r3, r3, r2
 800319a:	19db      	adds	r3, r3, r7
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	2b08      	cmp	r3, #8
 80031a0:	d015      	beq.n	80031ce <UART_SetConfig+0x33a>
 80031a2:	dc2b      	bgt.n	80031fc <UART_SetConfig+0x368>
 80031a4:	2b04      	cmp	r3, #4
 80031a6:	d00d      	beq.n	80031c4 <UART_SetConfig+0x330>
 80031a8:	dc28      	bgt.n	80031fc <UART_SetConfig+0x368>
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d002      	beq.n	80031b4 <UART_SetConfig+0x320>
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d005      	beq.n	80031be <UART_SetConfig+0x32a>
 80031b2:	e023      	b.n	80031fc <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031b4:	f7fe fcea 	bl	8001b8c <HAL_RCC_GetPCLK1Freq>
 80031b8:	0003      	movs	r3, r0
 80031ba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80031bc:	e027      	b.n	800320e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031be:	4b0d      	ldr	r3, [pc, #52]	; (80031f4 <UART_SetConfig+0x360>)
 80031c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80031c2:	e024      	b.n	800320e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031c4:	f7fe fc56 	bl	8001a74 <HAL_RCC_GetSysClockFreq>
 80031c8:	0003      	movs	r3, r0
 80031ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80031cc:	e01f      	b.n	800320e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031ce:	2380      	movs	r3, #128	; 0x80
 80031d0:	021b      	lsls	r3, r3, #8
 80031d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80031d4:	e01b      	b.n	800320e <UART_SetConfig+0x37a>
 80031d6:	46c0      	nop			; (mov r8, r8)
 80031d8:	cfff69f3 	.word	0xcfff69f3
 80031dc:	ffffcfff 	.word	0xffffcfff
 80031e0:	40008000 	.word	0x40008000
 80031e4:	11fff4ff 	.word	0x11fff4ff
 80031e8:	40013800 	.word	0x40013800
 80031ec:	40021000 	.word	0x40021000
 80031f0:	40004400 	.word	0x40004400
 80031f4:	00f42400 	.word	0x00f42400
 80031f8:	08003a1c 	.word	0x08003a1c
      default:
        pclk = 0U;
 80031fc:	2300      	movs	r3, #0
 80031fe:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003200:	231a      	movs	r3, #26
 8003202:	2220      	movs	r2, #32
 8003204:	189b      	adds	r3, r3, r2
 8003206:	19db      	adds	r3, r3, r7
 8003208:	2201      	movs	r2, #1
 800320a:	701a      	strb	r2, [r3, #0]
        break;
 800320c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800320e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003210:	2b00      	cmp	r3, #0
 8003212:	d100      	bne.n	8003216 <UART_SetConfig+0x382>
 8003214:	e09a      	b.n	800334c <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003218:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800321a:	4b58      	ldr	r3, [pc, #352]	; (800337c <UART_SetConfig+0x4e8>)
 800321c:	0052      	lsls	r2, r2, #1
 800321e:	5ad3      	ldrh	r3, [r2, r3]
 8003220:	0019      	movs	r1, r3
 8003222:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003224:	f7fc ff6e 	bl	8000104 <__udivsi3>
 8003228:	0003      	movs	r3, r0
 800322a:	005a      	lsls	r2, r3, #1
 800322c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	085b      	lsrs	r3, r3, #1
 8003232:	18d2      	adds	r2, r2, r3
 8003234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	0019      	movs	r1, r3
 800323a:	0010      	movs	r0, r2
 800323c:	f7fc ff62 	bl	8000104 <__udivsi3>
 8003240:	0003      	movs	r3, r0
 8003242:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003246:	2b0f      	cmp	r3, #15
 8003248:	d921      	bls.n	800328e <UART_SetConfig+0x3fa>
 800324a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800324c:	2380      	movs	r3, #128	; 0x80
 800324e:	025b      	lsls	r3, r3, #9
 8003250:	429a      	cmp	r2, r3
 8003252:	d21c      	bcs.n	800328e <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003256:	b29a      	uxth	r2, r3
 8003258:	200e      	movs	r0, #14
 800325a:	2420      	movs	r4, #32
 800325c:	1903      	adds	r3, r0, r4
 800325e:	19db      	adds	r3, r3, r7
 8003260:	210f      	movs	r1, #15
 8003262:	438a      	bics	r2, r1
 8003264:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003268:	085b      	lsrs	r3, r3, #1
 800326a:	b29b      	uxth	r3, r3
 800326c:	2207      	movs	r2, #7
 800326e:	4013      	ands	r3, r2
 8003270:	b299      	uxth	r1, r3
 8003272:	1903      	adds	r3, r0, r4
 8003274:	19db      	adds	r3, r3, r7
 8003276:	1902      	adds	r2, r0, r4
 8003278:	19d2      	adds	r2, r2, r7
 800327a:	8812      	ldrh	r2, [r2, #0]
 800327c:	430a      	orrs	r2, r1
 800327e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	1902      	adds	r2, r0, r4
 8003286:	19d2      	adds	r2, r2, r7
 8003288:	8812      	ldrh	r2, [r2, #0]
 800328a:	60da      	str	r2, [r3, #12]
 800328c:	e05e      	b.n	800334c <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 800328e:	231a      	movs	r3, #26
 8003290:	2220      	movs	r2, #32
 8003292:	189b      	adds	r3, r3, r2
 8003294:	19db      	adds	r3, r3, r7
 8003296:	2201      	movs	r2, #1
 8003298:	701a      	strb	r2, [r3, #0]
 800329a:	e057      	b.n	800334c <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800329c:	231b      	movs	r3, #27
 800329e:	2220      	movs	r2, #32
 80032a0:	189b      	adds	r3, r3, r2
 80032a2:	19db      	adds	r3, r3, r7
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	2b08      	cmp	r3, #8
 80032a8:	d015      	beq.n	80032d6 <UART_SetConfig+0x442>
 80032aa:	dc18      	bgt.n	80032de <UART_SetConfig+0x44a>
 80032ac:	2b04      	cmp	r3, #4
 80032ae:	d00d      	beq.n	80032cc <UART_SetConfig+0x438>
 80032b0:	dc15      	bgt.n	80032de <UART_SetConfig+0x44a>
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d002      	beq.n	80032bc <UART_SetConfig+0x428>
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d005      	beq.n	80032c6 <UART_SetConfig+0x432>
 80032ba:	e010      	b.n	80032de <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032bc:	f7fe fc66 	bl	8001b8c <HAL_RCC_GetPCLK1Freq>
 80032c0:	0003      	movs	r3, r0
 80032c2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80032c4:	e014      	b.n	80032f0 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032c6:	4b2e      	ldr	r3, [pc, #184]	; (8003380 <UART_SetConfig+0x4ec>)
 80032c8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80032ca:	e011      	b.n	80032f0 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032cc:	f7fe fbd2 	bl	8001a74 <HAL_RCC_GetSysClockFreq>
 80032d0:	0003      	movs	r3, r0
 80032d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80032d4:	e00c      	b.n	80032f0 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032d6:	2380      	movs	r3, #128	; 0x80
 80032d8:	021b      	lsls	r3, r3, #8
 80032da:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80032dc:	e008      	b.n	80032f0 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 80032de:	2300      	movs	r3, #0
 80032e0:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80032e2:	231a      	movs	r3, #26
 80032e4:	2220      	movs	r2, #32
 80032e6:	189b      	adds	r3, r3, r2
 80032e8:	19db      	adds	r3, r3, r7
 80032ea:	2201      	movs	r2, #1
 80032ec:	701a      	strb	r2, [r3, #0]
        break;
 80032ee:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80032f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d02a      	beq.n	800334c <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032fa:	4b20      	ldr	r3, [pc, #128]	; (800337c <UART_SetConfig+0x4e8>)
 80032fc:	0052      	lsls	r2, r2, #1
 80032fe:	5ad3      	ldrh	r3, [r2, r3]
 8003300:	0019      	movs	r1, r3
 8003302:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003304:	f7fc fefe 	bl	8000104 <__udivsi3>
 8003308:	0003      	movs	r3, r0
 800330a:	001a      	movs	r2, r3
 800330c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	085b      	lsrs	r3, r3, #1
 8003312:	18d2      	adds	r2, r2, r3
 8003314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	0019      	movs	r1, r3
 800331a:	0010      	movs	r0, r2
 800331c:	f7fc fef2 	bl	8000104 <__udivsi3>
 8003320:	0003      	movs	r3, r0
 8003322:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003326:	2b0f      	cmp	r3, #15
 8003328:	d90a      	bls.n	8003340 <UART_SetConfig+0x4ac>
 800332a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800332c:	2380      	movs	r3, #128	; 0x80
 800332e:	025b      	lsls	r3, r3, #9
 8003330:	429a      	cmp	r2, r3
 8003332:	d205      	bcs.n	8003340 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003336:	b29a      	uxth	r2, r3
 8003338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	60da      	str	r2, [r3, #12]
 800333e:	e005      	b.n	800334c <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8003340:	231a      	movs	r3, #26
 8003342:	2220      	movs	r2, #32
 8003344:	189b      	adds	r3, r3, r2
 8003346:	19db      	adds	r3, r3, r7
 8003348:	2201      	movs	r2, #1
 800334a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800334c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334e:	226a      	movs	r2, #106	; 0x6a
 8003350:	2101      	movs	r1, #1
 8003352:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003356:	2268      	movs	r2, #104	; 0x68
 8003358:	2101      	movs	r1, #1
 800335a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800335c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335e:	2200      	movs	r2, #0
 8003360:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003364:	2200      	movs	r2, #0
 8003366:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003368:	231a      	movs	r3, #26
 800336a:	2220      	movs	r2, #32
 800336c:	189b      	adds	r3, r3, r2
 800336e:	19db      	adds	r3, r3, r7
 8003370:	781b      	ldrb	r3, [r3, #0]
}
 8003372:	0018      	movs	r0, r3
 8003374:	46bd      	mov	sp, r7
 8003376:	b010      	add	sp, #64	; 0x40
 8003378:	bdb0      	pop	{r4, r5, r7, pc}
 800337a:	46c0      	nop			; (mov r8, r8)
 800337c:	08003a1c 	.word	0x08003a1c
 8003380:	00f42400 	.word	0x00f42400

08003384 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003390:	2201      	movs	r2, #1
 8003392:	4013      	ands	r3, r2
 8003394:	d00b      	beq.n	80033ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	4a4a      	ldr	r2, [pc, #296]	; (80034c8 <UART_AdvFeatureConfig+0x144>)
 800339e:	4013      	ands	r3, r2
 80033a0:	0019      	movs	r1, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	430a      	orrs	r2, r1
 80033ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b2:	2202      	movs	r2, #2
 80033b4:	4013      	ands	r3, r2
 80033b6:	d00b      	beq.n	80033d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	4a43      	ldr	r2, [pc, #268]	; (80034cc <UART_AdvFeatureConfig+0x148>)
 80033c0:	4013      	ands	r3, r2
 80033c2:	0019      	movs	r1, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	430a      	orrs	r2, r1
 80033ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d4:	2204      	movs	r2, #4
 80033d6:	4013      	ands	r3, r2
 80033d8:	d00b      	beq.n	80033f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	4a3b      	ldr	r2, [pc, #236]	; (80034d0 <UART_AdvFeatureConfig+0x14c>)
 80033e2:	4013      	ands	r3, r2
 80033e4:	0019      	movs	r1, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	430a      	orrs	r2, r1
 80033f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f6:	2208      	movs	r2, #8
 80033f8:	4013      	ands	r3, r2
 80033fa:	d00b      	beq.n	8003414 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	4a34      	ldr	r2, [pc, #208]	; (80034d4 <UART_AdvFeatureConfig+0x150>)
 8003404:	4013      	ands	r3, r2
 8003406:	0019      	movs	r1, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	430a      	orrs	r2, r1
 8003412:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003418:	2210      	movs	r2, #16
 800341a:	4013      	ands	r3, r2
 800341c:	d00b      	beq.n	8003436 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	4a2c      	ldr	r2, [pc, #176]	; (80034d8 <UART_AdvFeatureConfig+0x154>)
 8003426:	4013      	ands	r3, r2
 8003428:	0019      	movs	r1, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	430a      	orrs	r2, r1
 8003434:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800343a:	2220      	movs	r2, #32
 800343c:	4013      	ands	r3, r2
 800343e:	d00b      	beq.n	8003458 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	4a25      	ldr	r2, [pc, #148]	; (80034dc <UART_AdvFeatureConfig+0x158>)
 8003448:	4013      	ands	r3, r2
 800344a:	0019      	movs	r1, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	430a      	orrs	r2, r1
 8003456:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800345c:	2240      	movs	r2, #64	; 0x40
 800345e:	4013      	ands	r3, r2
 8003460:	d01d      	beq.n	800349e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	4a1d      	ldr	r2, [pc, #116]	; (80034e0 <UART_AdvFeatureConfig+0x15c>)
 800346a:	4013      	ands	r3, r2
 800346c:	0019      	movs	r1, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	430a      	orrs	r2, r1
 8003478:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800347e:	2380      	movs	r3, #128	; 0x80
 8003480:	035b      	lsls	r3, r3, #13
 8003482:	429a      	cmp	r2, r3
 8003484:	d10b      	bne.n	800349e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	4a15      	ldr	r2, [pc, #84]	; (80034e4 <UART_AdvFeatureConfig+0x160>)
 800348e:	4013      	ands	r3, r2
 8003490:	0019      	movs	r1, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	430a      	orrs	r2, r1
 800349c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a2:	2280      	movs	r2, #128	; 0x80
 80034a4:	4013      	ands	r3, r2
 80034a6:	d00b      	beq.n	80034c0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	4a0e      	ldr	r2, [pc, #56]	; (80034e8 <UART_AdvFeatureConfig+0x164>)
 80034b0:	4013      	ands	r3, r2
 80034b2:	0019      	movs	r1, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	430a      	orrs	r2, r1
 80034be:	605a      	str	r2, [r3, #4]
  }
}
 80034c0:	46c0      	nop			; (mov r8, r8)
 80034c2:	46bd      	mov	sp, r7
 80034c4:	b002      	add	sp, #8
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	fffdffff 	.word	0xfffdffff
 80034cc:	fffeffff 	.word	0xfffeffff
 80034d0:	fffbffff 	.word	0xfffbffff
 80034d4:	ffff7fff 	.word	0xffff7fff
 80034d8:	ffffefff 	.word	0xffffefff
 80034dc:	ffffdfff 	.word	0xffffdfff
 80034e0:	ffefffff 	.word	0xffefffff
 80034e4:	ff9fffff 	.word	0xff9fffff
 80034e8:	fff7ffff 	.word	0xfff7ffff

080034ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af02      	add	r7, sp, #8
 80034f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2290      	movs	r2, #144	; 0x90
 80034f8:	2100      	movs	r1, #0
 80034fa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80034fc:	f7fd fb96 	bl	8000c2c <HAL_GetTick>
 8003500:	0003      	movs	r3, r0
 8003502:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2208      	movs	r2, #8
 800350c:	4013      	ands	r3, r2
 800350e:	2b08      	cmp	r3, #8
 8003510:	d10c      	bne.n	800352c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2280      	movs	r2, #128	; 0x80
 8003516:	0391      	lsls	r1, r2, #14
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	4a1a      	ldr	r2, [pc, #104]	; (8003584 <UART_CheckIdleState+0x98>)
 800351c:	9200      	str	r2, [sp, #0]
 800351e:	2200      	movs	r2, #0
 8003520:	f000 f832 	bl	8003588 <UART_WaitOnFlagUntilTimeout>
 8003524:	1e03      	subs	r3, r0, #0
 8003526:	d001      	beq.n	800352c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e026      	b.n	800357a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2204      	movs	r2, #4
 8003534:	4013      	ands	r3, r2
 8003536:	2b04      	cmp	r3, #4
 8003538:	d10c      	bne.n	8003554 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2280      	movs	r2, #128	; 0x80
 800353e:	03d1      	lsls	r1, r2, #15
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	4a10      	ldr	r2, [pc, #64]	; (8003584 <UART_CheckIdleState+0x98>)
 8003544:	9200      	str	r2, [sp, #0]
 8003546:	2200      	movs	r2, #0
 8003548:	f000 f81e 	bl	8003588 <UART_WaitOnFlagUntilTimeout>
 800354c:	1e03      	subs	r3, r0, #0
 800354e:	d001      	beq.n	8003554 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e012      	b.n	800357a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2288      	movs	r2, #136	; 0x88
 8003558:	2120      	movs	r1, #32
 800355a:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	228c      	movs	r2, #140	; 0x8c
 8003560:	2120      	movs	r1, #32
 8003562:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2284      	movs	r2, #132	; 0x84
 8003574:	2100      	movs	r1, #0
 8003576:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	0018      	movs	r0, r3
 800357c:	46bd      	mov	sp, r7
 800357e:	b004      	add	sp, #16
 8003580:	bd80      	pop	{r7, pc}
 8003582:	46c0      	nop			; (mov r8, r8)
 8003584:	01ffffff 	.word	0x01ffffff

08003588 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b094      	sub	sp, #80	; 0x50
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	603b      	str	r3, [r7, #0]
 8003594:	1dfb      	adds	r3, r7, #7
 8003596:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003598:	e0a7      	b.n	80036ea <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800359a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800359c:	3301      	adds	r3, #1
 800359e:	d100      	bne.n	80035a2 <UART_WaitOnFlagUntilTimeout+0x1a>
 80035a0:	e0a3      	b.n	80036ea <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035a2:	f7fd fb43 	bl	8000c2c <HAL_GetTick>
 80035a6:	0002      	movs	r2, r0
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d302      	bcc.n	80035b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80035b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d13f      	bne.n	8003638 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035b8:	f3ef 8310 	mrs	r3, PRIMASK
 80035bc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80035be:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80035c0:	647b      	str	r3, [r7, #68]	; 0x44
 80035c2:	2301      	movs	r3, #1
 80035c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c8:	f383 8810 	msr	PRIMASK, r3
}
 80035cc:	46c0      	nop			; (mov r8, r8)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	494e      	ldr	r1, [pc, #312]	; (8003714 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80035da:	400a      	ands	r2, r1
 80035dc:	601a      	str	r2, [r3, #0]
 80035de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035e0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e4:	f383 8810 	msr	PRIMASK, r3
}
 80035e8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035ea:	f3ef 8310 	mrs	r3, PRIMASK
 80035ee:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80035f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035f2:	643b      	str	r3, [r7, #64]	; 0x40
 80035f4:	2301      	movs	r3, #1
 80035f6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035fa:	f383 8810 	msr	PRIMASK, r3
}
 80035fe:	46c0      	nop			; (mov r8, r8)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	689a      	ldr	r2, [r3, #8]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2101      	movs	r1, #1
 800360c:	438a      	bics	r2, r1
 800360e:	609a      	str	r2, [r3, #8]
 8003610:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003612:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003616:	f383 8810 	msr	PRIMASK, r3
}
 800361a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2288      	movs	r2, #136	; 0x88
 8003620:	2120      	movs	r1, #32
 8003622:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	228c      	movs	r2, #140	; 0x8c
 8003628:	2120      	movs	r1, #32
 800362a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2284      	movs	r2, #132	; 0x84
 8003630:	2100      	movs	r1, #0
 8003632:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e069      	b.n	800370c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2204      	movs	r2, #4
 8003640:	4013      	ands	r3, r2
 8003642:	d052      	beq.n	80036ea <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	69da      	ldr	r2, [r3, #28]
 800364a:	2380      	movs	r3, #128	; 0x80
 800364c:	011b      	lsls	r3, r3, #4
 800364e:	401a      	ands	r2, r3
 8003650:	2380      	movs	r3, #128	; 0x80
 8003652:	011b      	lsls	r3, r3, #4
 8003654:	429a      	cmp	r2, r3
 8003656:	d148      	bne.n	80036ea <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2280      	movs	r2, #128	; 0x80
 800365e:	0112      	lsls	r2, r2, #4
 8003660:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003662:	f3ef 8310 	mrs	r3, PRIMASK
 8003666:	613b      	str	r3, [r7, #16]
  return(result);
 8003668:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800366a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800366c:	2301      	movs	r3, #1
 800366e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	f383 8810 	msr	PRIMASK, r3
}
 8003676:	46c0      	nop			; (mov r8, r8)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4924      	ldr	r1, [pc, #144]	; (8003714 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003684:	400a      	ands	r2, r1
 8003686:	601a      	str	r2, [r3, #0]
 8003688:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800368a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	f383 8810 	msr	PRIMASK, r3
}
 8003692:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003694:	f3ef 8310 	mrs	r3, PRIMASK
 8003698:	61fb      	str	r3, [r7, #28]
  return(result);
 800369a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800369c:	64bb      	str	r3, [r7, #72]	; 0x48
 800369e:	2301      	movs	r3, #1
 80036a0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036a2:	6a3b      	ldr	r3, [r7, #32]
 80036a4:	f383 8810 	msr	PRIMASK, r3
}
 80036a8:	46c0      	nop			; (mov r8, r8)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	689a      	ldr	r2, [r3, #8]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2101      	movs	r1, #1
 80036b6:	438a      	bics	r2, r1
 80036b8:	609a      	str	r2, [r3, #8]
 80036ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036bc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c0:	f383 8810 	msr	PRIMASK, r3
}
 80036c4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2288      	movs	r2, #136	; 0x88
 80036ca:	2120      	movs	r1, #32
 80036cc:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	228c      	movs	r2, #140	; 0x8c
 80036d2:	2120      	movs	r1, #32
 80036d4:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2290      	movs	r2, #144	; 0x90
 80036da:	2120      	movs	r1, #32
 80036dc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2284      	movs	r2, #132	; 0x84
 80036e2:	2100      	movs	r1, #0
 80036e4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e010      	b.n	800370c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	69db      	ldr	r3, [r3, #28]
 80036f0:	68ba      	ldr	r2, [r7, #8]
 80036f2:	4013      	ands	r3, r2
 80036f4:	68ba      	ldr	r2, [r7, #8]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	425a      	negs	r2, r3
 80036fa:	4153      	adcs	r3, r2
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	001a      	movs	r2, r3
 8003700:	1dfb      	adds	r3, r7, #7
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	429a      	cmp	r2, r3
 8003706:	d100      	bne.n	800370a <UART_WaitOnFlagUntilTimeout+0x182>
 8003708:	e747      	b.n	800359a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800370a:	2300      	movs	r3, #0
}
 800370c:	0018      	movs	r0, r3
 800370e:	46bd      	mov	sp, r7
 8003710:	b014      	add	sp, #80	; 0x50
 8003712:	bd80      	pop	{r7, pc}
 8003714:	fffffe5f 	.word	0xfffffe5f

08003718 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2284      	movs	r2, #132	; 0x84
 8003724:	5c9b      	ldrb	r3, [r3, r2]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d101      	bne.n	800372e <HAL_UARTEx_DisableFifoMode+0x16>
 800372a:	2302      	movs	r3, #2
 800372c:	e027      	b.n	800377e <HAL_UARTEx_DisableFifoMode+0x66>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2284      	movs	r2, #132	; 0x84
 8003732:	2101      	movs	r1, #1
 8003734:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2288      	movs	r2, #136	; 0x88
 800373a:	2124      	movs	r1, #36	; 0x24
 800373c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2101      	movs	r1, #1
 8003752:	438a      	bics	r2, r1
 8003754:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	4a0b      	ldr	r2, [pc, #44]	; (8003788 <HAL_UARTEx_DisableFifoMode+0x70>)
 800375a:	4013      	ands	r3, r2
 800375c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68fa      	ldr	r2, [r7, #12]
 800376a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2288      	movs	r2, #136	; 0x88
 8003770:	2120      	movs	r1, #32
 8003772:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2284      	movs	r2, #132	; 0x84
 8003778:	2100      	movs	r1, #0
 800377a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	0018      	movs	r0, r3
 8003780:	46bd      	mov	sp, r7
 8003782:	b004      	add	sp, #16
 8003784:	bd80      	pop	{r7, pc}
 8003786:	46c0      	nop			; (mov r8, r8)
 8003788:	dfffffff 	.word	0xdfffffff

0800378c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2284      	movs	r2, #132	; 0x84
 800379a:	5c9b      	ldrb	r3, [r3, r2]
 800379c:	2b01      	cmp	r3, #1
 800379e:	d101      	bne.n	80037a4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80037a0:	2302      	movs	r3, #2
 80037a2:	e02e      	b.n	8003802 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2284      	movs	r2, #132	; 0x84
 80037a8:	2101      	movs	r1, #1
 80037aa:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2288      	movs	r2, #136	; 0x88
 80037b0:	2124      	movs	r1, #36	; 0x24
 80037b2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2101      	movs	r1, #1
 80037c8:	438a      	bics	r2, r1
 80037ca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	00db      	lsls	r3, r3, #3
 80037d4:	08d9      	lsrs	r1, r3, #3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	683a      	ldr	r2, [r7, #0]
 80037dc:	430a      	orrs	r2, r1
 80037de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	0018      	movs	r0, r3
 80037e4:	f000 f854 	bl	8003890 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68fa      	ldr	r2, [r7, #12]
 80037ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2288      	movs	r2, #136	; 0x88
 80037f4:	2120      	movs	r1, #32
 80037f6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2284      	movs	r2, #132	; 0x84
 80037fc:	2100      	movs	r1, #0
 80037fe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	0018      	movs	r0, r3
 8003804:	46bd      	mov	sp, r7
 8003806:	b004      	add	sp, #16
 8003808:	bd80      	pop	{r7, pc}
	...

0800380c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2284      	movs	r2, #132	; 0x84
 800381a:	5c9b      	ldrb	r3, [r3, r2]
 800381c:	2b01      	cmp	r3, #1
 800381e:	d101      	bne.n	8003824 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003820:	2302      	movs	r3, #2
 8003822:	e02f      	b.n	8003884 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2284      	movs	r2, #132	; 0x84
 8003828:	2101      	movs	r1, #1
 800382a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2288      	movs	r2, #136	; 0x88
 8003830:	2124      	movs	r1, #36	; 0x24
 8003832:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	2101      	movs	r1, #1
 8003848:	438a      	bics	r2, r1
 800384a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	4a0e      	ldr	r2, [pc, #56]	; (800388c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003854:	4013      	ands	r3, r2
 8003856:	0019      	movs	r1, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	683a      	ldr	r2, [r7, #0]
 800385e:	430a      	orrs	r2, r1
 8003860:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	0018      	movs	r0, r3
 8003866:	f000 f813 	bl	8003890 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2288      	movs	r2, #136	; 0x88
 8003876:	2120      	movs	r1, #32
 8003878:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2284      	movs	r2, #132	; 0x84
 800387e:	2100      	movs	r1, #0
 8003880:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003882:	2300      	movs	r3, #0
}
 8003884:	0018      	movs	r0, r3
 8003886:	46bd      	mov	sp, r7
 8003888:	b004      	add	sp, #16
 800388a:	bd80      	pop	{r7, pc}
 800388c:	f1ffffff 	.word	0xf1ffffff

08003890 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003892:	b085      	sub	sp, #20
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800389c:	2b00      	cmp	r3, #0
 800389e:	d108      	bne.n	80038b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	226a      	movs	r2, #106	; 0x6a
 80038a4:	2101      	movs	r1, #1
 80038a6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2268      	movs	r2, #104	; 0x68
 80038ac:	2101      	movs	r1, #1
 80038ae:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80038b0:	e043      	b.n	800393a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80038b2:	260f      	movs	r6, #15
 80038b4:	19bb      	adds	r3, r7, r6
 80038b6:	2208      	movs	r2, #8
 80038b8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80038ba:	200e      	movs	r0, #14
 80038bc:	183b      	adds	r3, r7, r0
 80038be:	2208      	movs	r2, #8
 80038c0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	0e5b      	lsrs	r3, r3, #25
 80038ca:	b2da      	uxtb	r2, r3
 80038cc:	240d      	movs	r4, #13
 80038ce:	193b      	adds	r3, r7, r4
 80038d0:	2107      	movs	r1, #7
 80038d2:	400a      	ands	r2, r1
 80038d4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	0f5b      	lsrs	r3, r3, #29
 80038de:	b2da      	uxtb	r2, r3
 80038e0:	250c      	movs	r5, #12
 80038e2:	197b      	adds	r3, r7, r5
 80038e4:	2107      	movs	r1, #7
 80038e6:	400a      	ands	r2, r1
 80038e8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038ea:	183b      	adds	r3, r7, r0
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	197a      	adds	r2, r7, r5
 80038f0:	7812      	ldrb	r2, [r2, #0]
 80038f2:	4914      	ldr	r1, [pc, #80]	; (8003944 <UARTEx_SetNbDataToProcess+0xb4>)
 80038f4:	5c8a      	ldrb	r2, [r1, r2]
 80038f6:	435a      	muls	r2, r3
 80038f8:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80038fa:	197b      	adds	r3, r7, r5
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	4a12      	ldr	r2, [pc, #72]	; (8003948 <UARTEx_SetNbDataToProcess+0xb8>)
 8003900:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003902:	0019      	movs	r1, r3
 8003904:	f7fc fc88 	bl	8000218 <__divsi3>
 8003908:	0003      	movs	r3, r0
 800390a:	b299      	uxth	r1, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	226a      	movs	r2, #106	; 0x6a
 8003910:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003912:	19bb      	adds	r3, r7, r6
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	193a      	adds	r2, r7, r4
 8003918:	7812      	ldrb	r2, [r2, #0]
 800391a:	490a      	ldr	r1, [pc, #40]	; (8003944 <UARTEx_SetNbDataToProcess+0xb4>)
 800391c:	5c8a      	ldrb	r2, [r1, r2]
 800391e:	435a      	muls	r2, r3
 8003920:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003922:	193b      	adds	r3, r7, r4
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	4a08      	ldr	r2, [pc, #32]	; (8003948 <UARTEx_SetNbDataToProcess+0xb8>)
 8003928:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800392a:	0019      	movs	r1, r3
 800392c:	f7fc fc74 	bl	8000218 <__divsi3>
 8003930:	0003      	movs	r3, r0
 8003932:	b299      	uxth	r1, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2268      	movs	r2, #104	; 0x68
 8003938:	5299      	strh	r1, [r3, r2]
}
 800393a:	46c0      	nop			; (mov r8, r8)
 800393c:	46bd      	mov	sp, r7
 800393e:	b005      	add	sp, #20
 8003940:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003942:	46c0      	nop			; (mov r8, r8)
 8003944:	08003a34 	.word	0x08003a34
 8003948:	08003a3c 	.word	0x08003a3c

0800394c <memset>:
 800394c:	0003      	movs	r3, r0
 800394e:	1882      	adds	r2, r0, r2
 8003950:	4293      	cmp	r3, r2
 8003952:	d100      	bne.n	8003956 <memset+0xa>
 8003954:	4770      	bx	lr
 8003956:	7019      	strb	r1, [r3, #0]
 8003958:	3301      	adds	r3, #1
 800395a:	e7f9      	b.n	8003950 <memset+0x4>

0800395c <__libc_init_array>:
 800395c:	b570      	push	{r4, r5, r6, lr}
 800395e:	2600      	movs	r6, #0
 8003960:	4c0c      	ldr	r4, [pc, #48]	; (8003994 <__libc_init_array+0x38>)
 8003962:	4d0d      	ldr	r5, [pc, #52]	; (8003998 <__libc_init_array+0x3c>)
 8003964:	1b64      	subs	r4, r4, r5
 8003966:	10a4      	asrs	r4, r4, #2
 8003968:	42a6      	cmp	r6, r4
 800396a:	d109      	bne.n	8003980 <__libc_init_array+0x24>
 800396c:	2600      	movs	r6, #0
 800396e:	f000 f819 	bl	80039a4 <_init>
 8003972:	4c0a      	ldr	r4, [pc, #40]	; (800399c <__libc_init_array+0x40>)
 8003974:	4d0a      	ldr	r5, [pc, #40]	; (80039a0 <__libc_init_array+0x44>)
 8003976:	1b64      	subs	r4, r4, r5
 8003978:	10a4      	asrs	r4, r4, #2
 800397a:	42a6      	cmp	r6, r4
 800397c:	d105      	bne.n	800398a <__libc_init_array+0x2e>
 800397e:	bd70      	pop	{r4, r5, r6, pc}
 8003980:	00b3      	lsls	r3, r6, #2
 8003982:	58eb      	ldr	r3, [r5, r3]
 8003984:	4798      	blx	r3
 8003986:	3601      	adds	r6, #1
 8003988:	e7ee      	b.n	8003968 <__libc_init_array+0xc>
 800398a:	00b3      	lsls	r3, r6, #2
 800398c:	58eb      	ldr	r3, [r5, r3]
 800398e:	4798      	blx	r3
 8003990:	3601      	adds	r6, #1
 8003992:	e7f2      	b.n	800397a <__libc_init_array+0x1e>
 8003994:	08003a4c 	.word	0x08003a4c
 8003998:	08003a4c 	.word	0x08003a4c
 800399c:	08003a50 	.word	0x08003a50
 80039a0:	08003a4c 	.word	0x08003a4c

080039a4 <_init>:
 80039a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039a6:	46c0      	nop			; (mov r8, r8)
 80039a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039aa:	bc08      	pop	{r3}
 80039ac:	469e      	mov	lr, r3
 80039ae:	4770      	bx	lr

080039b0 <_fini>:
 80039b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039b2:	46c0      	nop			; (mov r8, r8)
 80039b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039b6:	bc08      	pop	{r3}
 80039b8:	469e      	mov	lr, r3
 80039ba:	4770      	bx	lr
