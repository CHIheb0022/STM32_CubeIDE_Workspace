
5_Timer_Counter Mode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004368  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  080044f8  080044f8  000144f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004588  08004588  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08004588  08004588  00014588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004590  08004590  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004590  08004590  00014590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004594  08004594  00014594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08004598  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  20000084  0800461c  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c0  0800461c  000202c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f1fb  00000000  00000000  000200f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e90  00000000  00000000  0002f2f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e40  00000000  00000000  00031188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b27  00000000  00000000  00031fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025fb0  00000000  00000000  00032aef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000109e4  00000000  00000000  00058a9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f051e  00000000  00000000  00069483  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000412c  00000000  00000000  001599a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  0015dad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080044e0 	.word	0x080044e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	080044e0 	.word	0x080044e0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint8_t message[20] = {'\0'};
 8000572:	2300      	movs	r3, #0
 8000574:	603b      	str	r3, [r7, #0]
 8000576:	1d3b      	adds	r3, r7, #4
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
  uint16_t tick_count = 0;
 8000582:	2300      	movs	r3, #0
 8000584:	82fb      	strh	r3, [r7, #22]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000586:	f000 fa96 	bl	8000ab6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058a:	f000 f823 	bl	80005d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058e:	f000 f8f5 	bl	800077c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000592:	f000 f871 	bl	8000678 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000596:	f000 f8c1 	bl	800071c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800059a:	480b      	ldr	r0, [pc, #44]	; (80005c8 <main+0x5c>)
 800059c:	f002 f958 	bl	8002850 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    tick_count = TIM2->CNT;
 80005a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005a6:	82fb      	strh	r3, [r7, #22]
    sprintf(message, "Tick Count = %d\n\r", tick_count);
 80005a8:	8afa      	ldrh	r2, [r7, #22]
 80005aa:	463b      	mov	r3, r7
 80005ac:	4907      	ldr	r1, [pc, #28]	; (80005cc <main+0x60>)
 80005ae:	4618      	mov	r0, r3
 80005b0:	f003 faf2 	bl	8003b98 <siprintf>
    HAL_UART_Transmit(&huart2, message, sizeof(message), 100);
 80005b4:	4639      	mov	r1, r7
 80005b6:	2364      	movs	r3, #100	; 0x64
 80005b8:	2214      	movs	r2, #20
 80005ba:	4805      	ldr	r0, [pc, #20]	; (80005d0 <main+0x64>)
 80005bc:	f002 fdf0 	bl	80031a0 <HAL_UART_Transmit>
    HAL_Delay(100);
 80005c0:	2064      	movs	r0, #100	; 0x64
 80005c2:	f000 faed 	bl	8000ba0 <HAL_Delay>
  {
 80005c6:	e7eb      	b.n	80005a0 <main+0x34>
 80005c8:	200000a0 	.word	0x200000a0
 80005cc:	080044f8 	.word	0x080044f8
 80005d0:	200000ec 	.word	0x200000ec

080005d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b096      	sub	sp, #88	; 0x58
 80005d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005da:	f107 0314 	add.w	r3, r7, #20
 80005de:	2244      	movs	r2, #68	; 0x44
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f003 faf8 	bl	8003bd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e8:	463b      	mov	r3, r7
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
 80005f2:	60da      	str	r2, [r3, #12]
 80005f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005f6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005fa:	f000 fdbf 	bl	800117c <HAL_PWREx_ControlVoltageScaling>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000604:	f000 f8e4 	bl	80007d0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000608:	2310      	movs	r3, #16
 800060a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800060c:	2301      	movs	r3, #1
 800060e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000610:	2300      	movs	r3, #0
 8000612:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000614:	2360      	movs	r3, #96	; 0x60
 8000616:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000618:	2302      	movs	r3, #2
 800061a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800061c:	2301      	movs	r3, #1
 800061e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000620:	2301      	movs	r3, #1
 8000622:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000624:	231e      	movs	r3, #30
 8000626:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000628:	2307      	movs	r3, #7
 800062a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800062c:	2302      	movs	r3, #2
 800062e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000630:	2302      	movs	r3, #2
 8000632:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000634:	f107 0314 	add.w	r3, r7, #20
 8000638:	4618      	mov	r0, r3
 800063a:	f000 fdf5 	bl	8001228 <HAL_RCC_OscConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000644:	f000 f8c4 	bl	80007d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000648:	230f      	movs	r3, #15
 800064a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064c:	2303      	movs	r3, #3
 800064e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800065c:	463b      	mov	r3, r7
 800065e:	2103      	movs	r1, #3
 8000660:	4618      	mov	r0, r3
 8000662:	f001 f9bd 	bl	80019e0 <HAL_RCC_ClockConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800066c:	f000 f8b0 	bl	80007d0 <Error_Handler>
  }
}
 8000670:	bf00      	nop
 8000672:	3758      	adds	r7, #88	; 0x58
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}

08000678 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b088      	sub	sp, #32
 800067c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800067e:	f107 0310 	add.w	r3, r7, #16
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800068c:	1d3b      	adds	r3, r7, #4
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	605a      	str	r2, [r3, #4]
 8000694:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000696:	4b20      	ldr	r3, [pc, #128]	; (8000718 <MX_TIM2_Init+0xa0>)
 8000698:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800069c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 60-1;
 800069e:	4b1e      	ldr	r3, [pc, #120]	; (8000718 <MX_TIM2_Init+0xa0>)
 80006a0:	223b      	movs	r2, #59	; 0x3b
 80006a2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006a4:	4b1c      	ldr	r3, [pc, #112]	; (8000718 <MX_TIM2_Init+0xa0>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 80006aa:	4b1b      	ldr	r3, [pc, #108]	; (8000718 <MX_TIM2_Init+0xa0>)
 80006ac:	2264      	movs	r2, #100	; 0x64
 80006ae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006b0:	4b19      	ldr	r3, [pc, #100]	; (8000718 <MX_TIM2_Init+0xa0>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006b6:	4b18      	ldr	r3, [pc, #96]	; (8000718 <MX_TIM2_Init+0xa0>)
 80006b8:	2280      	movs	r2, #128	; 0x80
 80006ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006bc:	4816      	ldr	r0, [pc, #88]	; (8000718 <MX_TIM2_Init+0xa0>)
 80006be:	f002 f86f 	bl	80027a0 <HAL_TIM_Base_Init>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80006c8:	f000 f882 	bl	80007d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 80006cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006d0:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 80006d2:	2300      	movs	r3, #0
 80006d4:	617b      	str	r3, [r7, #20]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61bb      	str	r3, [r7, #24]
  sClockSourceConfig.ClockFilter = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006de:	f107 0310 	add.w	r3, r7, #16
 80006e2:	4619      	mov	r1, r3
 80006e4:	480c      	ldr	r0, [pc, #48]	; (8000718 <MX_TIM2_Init+0xa0>)
 80006e6:	f002 fa42 	bl	8002b6e <HAL_TIM_ConfigClockSource>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80006f0:	f000 f86e 	bl	80007d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006f4:	2300      	movs	r3, #0
 80006f6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006f8:	2300      	movs	r3, #0
 80006fa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006fc:	1d3b      	adds	r3, r7, #4
 80006fe:	4619      	mov	r1, r3
 8000700:	4805      	ldr	r0, [pc, #20]	; (8000718 <MX_TIM2_Init+0xa0>)
 8000702:	f002 fc59 	bl	8002fb8 <HAL_TIMEx_MasterConfigSynchronization>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800070c:	f000 f860 	bl	80007d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000710:	bf00      	nop
 8000712:	3720      	adds	r7, #32
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	200000a0 	.word	0x200000a0

0800071c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000720:	4b14      	ldr	r3, [pc, #80]	; (8000774 <MX_USART2_UART_Init+0x58>)
 8000722:	4a15      	ldr	r2, [pc, #84]	; (8000778 <MX_USART2_UART_Init+0x5c>)
 8000724:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000726:	4b13      	ldr	r3, [pc, #76]	; (8000774 <MX_USART2_UART_Init+0x58>)
 8000728:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800072c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800072e:	4b11      	ldr	r3, [pc, #68]	; (8000774 <MX_USART2_UART_Init+0x58>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000734:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <MX_USART2_UART_Init+0x58>)
 8000736:	2200      	movs	r2, #0
 8000738:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800073a:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <MX_USART2_UART_Init+0x58>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000740:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <MX_USART2_UART_Init+0x58>)
 8000742:	220c      	movs	r2, #12
 8000744:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000746:	4b0b      	ldr	r3, [pc, #44]	; (8000774 <MX_USART2_UART_Init+0x58>)
 8000748:	2200      	movs	r2, #0
 800074a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800074c:	4b09      	ldr	r3, [pc, #36]	; (8000774 <MX_USART2_UART_Init+0x58>)
 800074e:	2200      	movs	r2, #0
 8000750:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000752:	4b08      	ldr	r3, [pc, #32]	; (8000774 <MX_USART2_UART_Init+0x58>)
 8000754:	2200      	movs	r2, #0
 8000756:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000758:	4b06      	ldr	r3, [pc, #24]	; (8000774 <MX_USART2_UART_Init+0x58>)
 800075a:	2200      	movs	r2, #0
 800075c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800075e:	4805      	ldr	r0, [pc, #20]	; (8000774 <MX_USART2_UART_Init+0x58>)
 8000760:	f002 fcd0 	bl	8003104 <HAL_UART_Init>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800076a:	f000 f831 	bl	80007d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	200000ec 	.word	0x200000ec
 8000778:	40004400 	.word	0x40004400

0800077c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000782:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_GPIO_Init+0x2c>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000786:	4a08      	ldr	r2, [pc, #32]	; (80007a8 <MX_GPIO_Init+0x2c>)
 8000788:	f043 0301 	orr.w	r3, r3, #1
 800078c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800078e:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_GPIO_Init+0x2c>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000792:	f003 0301 	and.w	r3, r3, #1
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800079a:	bf00      	nop
 800079c:	370c      	adds	r7, #12
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	40021000 	.word	0x40021000

080007ac <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, end_message, sizeof(end_message), 100);
 80007b4:	2364      	movs	r3, #100	; 0x64
 80007b6:	2228      	movs	r2, #40	; 0x28
 80007b8:	4903      	ldr	r1, [pc, #12]	; (80007c8 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80007ba:	4804      	ldr	r0, [pc, #16]	; (80007cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007bc:	f002 fcf0 	bl	80031a0 <HAL_UART_Transmit>
}
 80007c0:	bf00      	nop
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20000000 	.word	0x20000000
 80007cc:	200000ec 	.word	0x200000ec

080007d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d4:	b672      	cpsid	i
}
 80007d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <Error_Handler+0x8>
	...

080007dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007e2:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <HAL_MspInit+0x44>)
 80007e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007e6:	4a0e      	ldr	r2, [pc, #56]	; (8000820 <HAL_MspInit+0x44>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	6613      	str	r3, [r2, #96]	; 0x60
 80007ee:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <HAL_MspInit+0x44>)
 80007f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007fa:	4b09      	ldr	r3, [pc, #36]	; (8000820 <HAL_MspInit+0x44>)
 80007fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007fe:	4a08      	ldr	r2, [pc, #32]	; (8000820 <HAL_MspInit+0x44>)
 8000800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000804:	6593      	str	r3, [r2, #88]	; 0x58
 8000806:	4b06      	ldr	r3, [pc, #24]	; (8000820 <HAL_MspInit+0x44>)
 8000808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800080a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800080e:	603b      	str	r3, [r7, #0]
 8000810:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000812:	bf00      	nop
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	40021000 	.word	0x40021000

08000824 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08a      	sub	sp, #40	; 0x28
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082c:	f107 0314 	add.w	r3, r7, #20
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000844:	d130      	bne.n	80008a8 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000846:	4b1a      	ldr	r3, [pc, #104]	; (80008b0 <HAL_TIM_Base_MspInit+0x8c>)
 8000848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800084a:	4a19      	ldr	r2, [pc, #100]	; (80008b0 <HAL_TIM_Base_MspInit+0x8c>)
 800084c:	f043 0301 	orr.w	r3, r3, #1
 8000850:	6593      	str	r3, [r2, #88]	; 0x58
 8000852:	4b17      	ldr	r3, [pc, #92]	; (80008b0 <HAL_TIM_Base_MspInit+0x8c>)
 8000854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000856:	f003 0301 	and.w	r3, r3, #1
 800085a:	613b      	str	r3, [r7, #16]
 800085c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	4b14      	ldr	r3, [pc, #80]	; (80008b0 <HAL_TIM_Base_MspInit+0x8c>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000862:	4a13      	ldr	r2, [pc, #76]	; (80008b0 <HAL_TIM_Base_MspInit+0x8c>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	64d3      	str	r3, [r2, #76]	; 0x4c
 800086a:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <HAL_TIM_Base_MspInit+0x8c>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000876:	2301      	movs	r3, #1
 8000878:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087a:	2302      	movs	r3, #2
 800087c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000882:	2300      	movs	r3, #0
 8000884:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM2;
 8000886:	230e      	movs	r3, #14
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088a:	f107 0314 	add.w	r3, r7, #20
 800088e:	4619      	mov	r1, r3
 8000890:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000894:	f000 faba 	bl	8000e0c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000898:	2200      	movs	r2, #0
 800089a:	2100      	movs	r1, #0
 800089c:	201c      	movs	r0, #28
 800089e:	f000 fa7e 	bl	8000d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80008a2:	201c      	movs	r0, #28
 80008a4:	f000 fa97 	bl	8000dd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80008a8:	bf00      	nop
 80008aa:	3728      	adds	r7, #40	; 0x28
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40021000 	.word	0x40021000

080008b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b0ac      	sub	sp, #176	; 0xb0
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008bc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
 80008ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008cc:	f107 0314 	add.w	r3, r7, #20
 80008d0:	2288      	movs	r2, #136	; 0x88
 80008d2:	2100      	movs	r1, #0
 80008d4:	4618      	mov	r0, r3
 80008d6:	f003 f97f 	bl	8003bd8 <memset>
  if(huart->Instance==USART2)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4a21      	ldr	r2, [pc, #132]	; (8000964 <HAL_UART_MspInit+0xb0>)
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d13b      	bne.n	800095c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008e4:	2302      	movs	r3, #2
 80008e6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008e8:	2300      	movs	r3, #0
 80008ea:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008ec:	f107 0314 	add.w	r3, r7, #20
 80008f0:	4618      	mov	r0, r3
 80008f2:	f001 fa99 	bl	8001e28 <HAL_RCCEx_PeriphCLKConfig>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80008fc:	f7ff ff68 	bl	80007d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000900:	4b19      	ldr	r3, [pc, #100]	; (8000968 <HAL_UART_MspInit+0xb4>)
 8000902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000904:	4a18      	ldr	r2, [pc, #96]	; (8000968 <HAL_UART_MspInit+0xb4>)
 8000906:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800090a:	6593      	str	r3, [r2, #88]	; 0x58
 800090c:	4b16      	ldr	r3, [pc, #88]	; (8000968 <HAL_UART_MspInit+0xb4>)
 800090e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000914:	613b      	str	r3, [r7, #16]
 8000916:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000918:	4b13      	ldr	r3, [pc, #76]	; (8000968 <HAL_UART_MspInit+0xb4>)
 800091a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091c:	4a12      	ldr	r2, [pc, #72]	; (8000968 <HAL_UART_MspInit+0xb4>)
 800091e:	f043 0301 	orr.w	r3, r3, #1
 8000922:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000924:	4b10      	ldr	r3, [pc, #64]	; (8000968 <HAL_UART_MspInit+0xb4>)
 8000926:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000928:	f003 0301 	and.w	r3, r3, #1
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000930:	230c      	movs	r3, #12
 8000932:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000936:	2302      	movs	r3, #2
 8000938:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000942:	2303      	movs	r3, #3
 8000944:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000948:	2307      	movs	r3, #7
 800094a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000952:	4619      	mov	r1, r3
 8000954:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000958:	f000 fa58 	bl	8000e0c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800095c:	bf00      	nop
 800095e:	37b0      	adds	r7, #176	; 0xb0
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	40004400 	.word	0x40004400
 8000968:	40021000 	.word	0x40021000

0800096c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000970:	e7fe      	b.n	8000970 <NMI_Handler+0x4>

08000972 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000976:	e7fe      	b.n	8000976 <HardFault_Handler+0x4>

08000978 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800097c:	e7fe      	b.n	800097c <MemManage_Handler+0x4>

0800097e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000982:	e7fe      	b.n	8000982 <BusFault_Handler+0x4>

08000984 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000988:	e7fe      	b.n	8000988 <UsageFault_Handler+0x4>

0800098a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr

080009a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr

080009b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b8:	f000 f8d2 	bl	8000b60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}

080009c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80009c4:	4802      	ldr	r0, [pc, #8]	; (80009d0 <TIM2_IRQHandler+0x10>)
 80009c6:	f001 ffb3 	bl	8002930 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	200000a0 	.word	0x200000a0

080009d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b086      	sub	sp, #24
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009dc:	4a14      	ldr	r2, [pc, #80]	; (8000a30 <_sbrk+0x5c>)
 80009de:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <_sbrk+0x60>)
 80009e0:	1ad3      	subs	r3, r2, r3
 80009e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009e8:	4b13      	ldr	r3, [pc, #76]	; (8000a38 <_sbrk+0x64>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d102      	bne.n	80009f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009f0:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <_sbrk+0x64>)
 80009f2:	4a12      	ldr	r2, [pc, #72]	; (8000a3c <_sbrk+0x68>)
 80009f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009f6:	4b10      	ldr	r3, [pc, #64]	; (8000a38 <_sbrk+0x64>)
 80009f8:	681a      	ldr	r2, [r3, #0]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4413      	add	r3, r2
 80009fe:	693a      	ldr	r2, [r7, #16]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	d207      	bcs.n	8000a14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a04:	f003 f8f0 	bl	8003be8 <__errno>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	220c      	movs	r2, #12
 8000a0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a12:	e009      	b.n	8000a28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a14:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <_sbrk+0x64>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a1a:	4b07      	ldr	r3, [pc, #28]	; (8000a38 <_sbrk+0x64>)
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4413      	add	r3, r2
 8000a22:	4a05      	ldr	r2, [pc, #20]	; (8000a38 <_sbrk+0x64>)
 8000a24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a26:	68fb      	ldr	r3, [r7, #12]
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	3718      	adds	r7, #24
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	20018000 	.word	0x20018000
 8000a34:	00000400 	.word	0x00000400
 8000a38:	20000170 	.word	0x20000170
 8000a3c:	200002c0 	.word	0x200002c0

08000a40 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a44:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <SystemInit+0x20>)
 8000a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a4a:	4a05      	ldr	r2, [pc, #20]	; (8000a60 <SystemInit+0x20>)
 8000a4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	e000ed00 	.word	0xe000ed00

08000a64 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a9c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a68:	f7ff ffea 	bl	8000a40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a6c:	480c      	ldr	r0, [pc, #48]	; (8000aa0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a6e:	490d      	ldr	r1, [pc, #52]	; (8000aa4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a70:	4a0d      	ldr	r2, [pc, #52]	; (8000aa8 <LoopForever+0xe>)
  movs r3, #0
 8000a72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a74:	e002      	b.n	8000a7c <LoopCopyDataInit>

08000a76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a7a:	3304      	adds	r3, #4

08000a7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a80:	d3f9      	bcc.n	8000a76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a82:	4a0a      	ldr	r2, [pc, #40]	; (8000aac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a84:	4c0a      	ldr	r4, [pc, #40]	; (8000ab0 <LoopForever+0x16>)
  movs r3, #0
 8000a86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a88:	e001      	b.n	8000a8e <LoopFillZerobss>

08000a8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a8c:	3204      	adds	r2, #4

08000a8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a90:	d3fb      	bcc.n	8000a8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a92:	f003 f8af 	bl	8003bf4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a96:	f7ff fd69 	bl	800056c <main>

08000a9a <LoopForever>:

LoopForever:
    b LoopForever
 8000a9a:	e7fe      	b.n	8000a9a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a9c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000aa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aa4:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000aa8:	08004598 	.word	0x08004598
  ldr r2, =_sbss
 8000aac:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000ab0:	200002c0 	.word	0x200002c0

08000ab4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ab4:	e7fe      	b.n	8000ab4 <ADC1_2_IRQHandler>

08000ab6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	b082      	sub	sp, #8
 8000aba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000abc:	2300      	movs	r3, #0
 8000abe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac0:	2003      	movs	r0, #3
 8000ac2:	f000 f961 	bl	8000d88 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ac6:	200f      	movs	r0, #15
 8000ac8:	f000 f80e 	bl	8000ae8 <HAL_InitTick>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d002      	beq.n	8000ad8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	71fb      	strb	r3, [r7, #7]
 8000ad6:	e001      	b.n	8000adc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ad8:	f7ff fe80 	bl	80007dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000adc:	79fb      	ldrb	r3, [r7, #7]
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
	...

08000ae8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000af0:	2300      	movs	r3, #0
 8000af2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000af4:	4b17      	ldr	r3, [pc, #92]	; (8000b54 <HAL_InitTick+0x6c>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d023      	beq.n	8000b44 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000afc:	4b16      	ldr	r3, [pc, #88]	; (8000b58 <HAL_InitTick+0x70>)
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	4b14      	ldr	r3, [pc, #80]	; (8000b54 <HAL_InitTick+0x6c>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	4619      	mov	r1, r3
 8000b06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b12:	4618      	mov	r0, r3
 8000b14:	f000 f96d 	bl	8000df2 <HAL_SYSTICK_Config>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d10f      	bne.n	8000b3e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2b0f      	cmp	r3, #15
 8000b22:	d809      	bhi.n	8000b38 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b24:	2200      	movs	r2, #0
 8000b26:	6879      	ldr	r1, [r7, #4]
 8000b28:	f04f 30ff 	mov.w	r0, #4294967295
 8000b2c:	f000 f937 	bl	8000d9e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b30:	4a0a      	ldr	r2, [pc, #40]	; (8000b5c <HAL_InitTick+0x74>)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	6013      	str	r3, [r2, #0]
 8000b36:	e007      	b.n	8000b48 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	73fb      	strb	r3, [r7, #15]
 8000b3c:	e004      	b.n	8000b48 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	73fb      	strb	r3, [r7, #15]
 8000b42:	e001      	b.n	8000b48 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b44:	2301      	movs	r3, #1
 8000b46:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3710      	adds	r7, #16
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20000030 	.word	0x20000030
 8000b58:	20000028 	.word	0x20000028
 8000b5c:	2000002c 	.word	0x2000002c

08000b60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b64:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <HAL_IncTick+0x20>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	461a      	mov	r2, r3
 8000b6a:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <HAL_IncTick+0x24>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4413      	add	r3, r2
 8000b70:	4a04      	ldr	r2, [pc, #16]	; (8000b84 <HAL_IncTick+0x24>)
 8000b72:	6013      	str	r3, [r2, #0]
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	20000030 	.word	0x20000030
 8000b84:	20000174 	.word	0x20000174

08000b88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b8c:	4b03      	ldr	r3, [pc, #12]	; (8000b9c <HAL_GetTick+0x14>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	20000174 	.word	0x20000174

08000ba0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ba8:	f7ff ffee 	bl	8000b88 <HAL_GetTick>
 8000bac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bb8:	d005      	beq.n	8000bc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000bba:	4b0a      	ldr	r3, [pc, #40]	; (8000be4 <HAL_Delay+0x44>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bc6:	bf00      	nop
 8000bc8:	f7ff ffde 	bl	8000b88 <HAL_GetTick>
 8000bcc:	4602      	mov	r2, r0
 8000bce:	68bb      	ldr	r3, [r7, #8]
 8000bd0:	1ad3      	subs	r3, r2, r3
 8000bd2:	68fa      	ldr	r2, [r7, #12]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	d8f7      	bhi.n	8000bc8 <HAL_Delay+0x28>
  {
  }
}
 8000bd8:	bf00      	nop
 8000bda:	bf00      	nop
 8000bdc:	3710      	adds	r7, #16
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20000030 	.word	0x20000030

08000be8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b085      	sub	sp, #20
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	f003 0307 	and.w	r3, r3, #7
 8000bf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bf8:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <__NVIC_SetPriorityGrouping+0x44>)
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bfe:	68ba      	ldr	r2, [r7, #8]
 8000c00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c04:	4013      	ands	r3, r2
 8000c06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c1a:	4a04      	ldr	r2, [pc, #16]	; (8000c2c <__NVIC_SetPriorityGrouping+0x44>)
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	60d3      	str	r3, [r2, #12]
}
 8000c20:	bf00      	nop
 8000c22:	3714      	adds	r7, #20
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c34:	4b04      	ldr	r3, [pc, #16]	; (8000c48 <__NVIC_GetPriorityGrouping+0x18>)
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	0a1b      	lsrs	r3, r3, #8
 8000c3a:	f003 0307 	and.w	r3, r3, #7
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	db0b      	blt.n	8000c76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	f003 021f 	and.w	r2, r3, #31
 8000c64:	4907      	ldr	r1, [pc, #28]	; (8000c84 <__NVIC_EnableIRQ+0x38>)
 8000c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6a:	095b      	lsrs	r3, r3, #5
 8000c6c:	2001      	movs	r0, #1
 8000c6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c76:	bf00      	nop
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	e000e100 	.word	0xe000e100

08000c88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	6039      	str	r1, [r7, #0]
 8000c92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	db0a      	blt.n	8000cb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	b2da      	uxtb	r2, r3
 8000ca0:	490c      	ldr	r1, [pc, #48]	; (8000cd4 <__NVIC_SetPriority+0x4c>)
 8000ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca6:	0112      	lsls	r2, r2, #4
 8000ca8:	b2d2      	uxtb	r2, r2
 8000caa:	440b      	add	r3, r1
 8000cac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cb0:	e00a      	b.n	8000cc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	b2da      	uxtb	r2, r3
 8000cb6:	4908      	ldr	r1, [pc, #32]	; (8000cd8 <__NVIC_SetPriority+0x50>)
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	f003 030f 	and.w	r3, r3, #15
 8000cbe:	3b04      	subs	r3, #4
 8000cc0:	0112      	lsls	r2, r2, #4
 8000cc2:	b2d2      	uxtb	r2, r2
 8000cc4:	440b      	add	r3, r1
 8000cc6:	761a      	strb	r2, [r3, #24]
}
 8000cc8:	bf00      	nop
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	e000e100 	.word	0xe000e100
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b089      	sub	sp, #36	; 0x24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	60b9      	str	r1, [r7, #8]
 8000ce6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	f003 0307 	and.w	r3, r3, #7
 8000cee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cf0:	69fb      	ldr	r3, [r7, #28]
 8000cf2:	f1c3 0307 	rsb	r3, r3, #7
 8000cf6:	2b04      	cmp	r3, #4
 8000cf8:	bf28      	it	cs
 8000cfa:	2304      	movcs	r3, #4
 8000cfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	3304      	adds	r3, #4
 8000d02:	2b06      	cmp	r3, #6
 8000d04:	d902      	bls.n	8000d0c <NVIC_EncodePriority+0x30>
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	3b03      	subs	r3, #3
 8000d0a:	e000      	b.n	8000d0e <NVIC_EncodePriority+0x32>
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d10:	f04f 32ff 	mov.w	r2, #4294967295
 8000d14:	69bb      	ldr	r3, [r7, #24]
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	43da      	mvns	r2, r3
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	401a      	ands	r2, r3
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d24:	f04f 31ff 	mov.w	r1, #4294967295
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2e:	43d9      	mvns	r1, r3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d34:	4313      	orrs	r3, r2
         );
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3724      	adds	r7, #36	; 0x24
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
	...

08000d44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	3b01      	subs	r3, #1
 8000d50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d54:	d301      	bcc.n	8000d5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d56:	2301      	movs	r3, #1
 8000d58:	e00f      	b.n	8000d7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d5a:	4a0a      	ldr	r2, [pc, #40]	; (8000d84 <SysTick_Config+0x40>)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	3b01      	subs	r3, #1
 8000d60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d62:	210f      	movs	r1, #15
 8000d64:	f04f 30ff 	mov.w	r0, #4294967295
 8000d68:	f7ff ff8e 	bl	8000c88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d6c:	4b05      	ldr	r3, [pc, #20]	; (8000d84 <SysTick_Config+0x40>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d72:	4b04      	ldr	r3, [pc, #16]	; (8000d84 <SysTick_Config+0x40>)
 8000d74:	2207      	movs	r2, #7
 8000d76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d78:	2300      	movs	r3, #0
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	e000e010 	.word	0xe000e010

08000d88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d90:	6878      	ldr	r0, [r7, #4]
 8000d92:	f7ff ff29 	bl	8000be8 <__NVIC_SetPriorityGrouping>
}
 8000d96:	bf00      	nop
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b086      	sub	sp, #24
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	4603      	mov	r3, r0
 8000da6:	60b9      	str	r1, [r7, #8]
 8000da8:	607a      	str	r2, [r7, #4]
 8000daa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000dac:	2300      	movs	r3, #0
 8000dae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000db0:	f7ff ff3e 	bl	8000c30 <__NVIC_GetPriorityGrouping>
 8000db4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000db6:	687a      	ldr	r2, [r7, #4]
 8000db8:	68b9      	ldr	r1, [r7, #8]
 8000dba:	6978      	ldr	r0, [r7, #20]
 8000dbc:	f7ff ff8e 	bl	8000cdc <NVIC_EncodePriority>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dc6:	4611      	mov	r1, r2
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff ff5d 	bl	8000c88 <__NVIC_SetPriority>
}
 8000dce:	bf00      	nop
 8000dd0:	3718      	adds	r7, #24
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b082      	sub	sp, #8
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	4603      	mov	r3, r0
 8000dde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff ff31 	bl	8000c4c <__NVIC_EnableIRQ>
}
 8000dea:	bf00      	nop
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b082      	sub	sp, #8
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f7ff ffa2 	bl	8000d44 <SysTick_Config>
 8000e00:	4603      	mov	r3, r0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
	...

08000e0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b087      	sub	sp, #28
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e16:	2300      	movs	r3, #0
 8000e18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e1a:	e17f      	b.n	800111c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	2101      	movs	r1, #1
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	fa01 f303 	lsl.w	r3, r1, r3
 8000e28:	4013      	ands	r3, r2
 8000e2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f000 8171 	beq.w	8001116 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f003 0303 	and.w	r3, r3, #3
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d005      	beq.n	8000e4c <HAL_GPIO_Init+0x40>
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f003 0303 	and.w	r3, r3, #3
 8000e48:	2b02      	cmp	r3, #2
 8000e4a:	d130      	bne.n	8000eae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	689b      	ldr	r3, [r3, #8]
 8000e50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	2203      	movs	r2, #3
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	4013      	ands	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	68da      	ldr	r2, [r3, #12]
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	693a      	ldr	r2, [r7, #16]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e82:	2201      	movs	r2, #1
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	43db      	mvns	r3, r3
 8000e8c:	693a      	ldr	r2, [r7, #16]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	091b      	lsrs	r3, r3, #4
 8000e98:	f003 0201 	and.w	r2, r3, #1
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f003 0303 	and.w	r3, r3, #3
 8000eb6:	2b03      	cmp	r3, #3
 8000eb8:	d118      	bne.n	8000eec <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ebe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	08db      	lsrs	r3, r3, #3
 8000ed6:	f003 0201 	and.w	r2, r3, #1
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	693a      	ldr	r2, [r7, #16]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f003 0303 	and.w	r3, r3, #3
 8000ef4:	2b03      	cmp	r3, #3
 8000ef6:	d017      	beq.n	8000f28 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	2203      	movs	r2, #3
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	689a      	ldr	r2, [r3, #8]
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	693a      	ldr	r2, [r7, #16]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f003 0303 	and.w	r3, r3, #3
 8000f30:	2b02      	cmp	r3, #2
 8000f32:	d123      	bne.n	8000f7c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	08da      	lsrs	r2, r3, #3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3208      	adds	r2, #8
 8000f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f40:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	f003 0307 	and.w	r3, r3, #7
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	220f      	movs	r2, #15
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	43db      	mvns	r3, r3
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	4013      	ands	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	691a      	ldr	r2, [r3, #16]
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	f003 0307 	and.w	r3, r3, #7
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	08da      	lsrs	r2, r3, #3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	3208      	adds	r2, #8
 8000f76:	6939      	ldr	r1, [r7, #16]
 8000f78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	2203      	movs	r2, #3
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	4013      	ands	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f003 0203 	and.w	r2, r3, #3
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	f000 80ac 	beq.w	8001116 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fbe:	4b5f      	ldr	r3, [pc, #380]	; (800113c <HAL_GPIO_Init+0x330>)
 8000fc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fc2:	4a5e      	ldr	r2, [pc, #376]	; (800113c <HAL_GPIO_Init+0x330>)
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	6613      	str	r3, [r2, #96]	; 0x60
 8000fca:	4b5c      	ldr	r3, [pc, #368]	; (800113c <HAL_GPIO_Init+0x330>)
 8000fcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	60bb      	str	r3, [r7, #8]
 8000fd4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fd6:	4a5a      	ldr	r2, [pc, #360]	; (8001140 <HAL_GPIO_Init+0x334>)
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	089b      	lsrs	r3, r3, #2
 8000fdc:	3302      	adds	r3, #2
 8000fde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	f003 0303 	and.w	r3, r3, #3
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	220f      	movs	r2, #15
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001000:	d025      	beq.n	800104e <HAL_GPIO_Init+0x242>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a4f      	ldr	r2, [pc, #316]	; (8001144 <HAL_GPIO_Init+0x338>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d01f      	beq.n	800104a <HAL_GPIO_Init+0x23e>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a4e      	ldr	r2, [pc, #312]	; (8001148 <HAL_GPIO_Init+0x33c>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d019      	beq.n	8001046 <HAL_GPIO_Init+0x23a>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a4d      	ldr	r2, [pc, #308]	; (800114c <HAL_GPIO_Init+0x340>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d013      	beq.n	8001042 <HAL_GPIO_Init+0x236>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a4c      	ldr	r2, [pc, #304]	; (8001150 <HAL_GPIO_Init+0x344>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d00d      	beq.n	800103e <HAL_GPIO_Init+0x232>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a4b      	ldr	r2, [pc, #300]	; (8001154 <HAL_GPIO_Init+0x348>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d007      	beq.n	800103a <HAL_GPIO_Init+0x22e>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a4a      	ldr	r2, [pc, #296]	; (8001158 <HAL_GPIO_Init+0x34c>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d101      	bne.n	8001036 <HAL_GPIO_Init+0x22a>
 8001032:	2306      	movs	r3, #6
 8001034:	e00c      	b.n	8001050 <HAL_GPIO_Init+0x244>
 8001036:	2307      	movs	r3, #7
 8001038:	e00a      	b.n	8001050 <HAL_GPIO_Init+0x244>
 800103a:	2305      	movs	r3, #5
 800103c:	e008      	b.n	8001050 <HAL_GPIO_Init+0x244>
 800103e:	2304      	movs	r3, #4
 8001040:	e006      	b.n	8001050 <HAL_GPIO_Init+0x244>
 8001042:	2303      	movs	r3, #3
 8001044:	e004      	b.n	8001050 <HAL_GPIO_Init+0x244>
 8001046:	2302      	movs	r3, #2
 8001048:	e002      	b.n	8001050 <HAL_GPIO_Init+0x244>
 800104a:	2301      	movs	r3, #1
 800104c:	e000      	b.n	8001050 <HAL_GPIO_Init+0x244>
 800104e:	2300      	movs	r3, #0
 8001050:	697a      	ldr	r2, [r7, #20]
 8001052:	f002 0203 	and.w	r2, r2, #3
 8001056:	0092      	lsls	r2, r2, #2
 8001058:	4093      	lsls	r3, r2
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	4313      	orrs	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001060:	4937      	ldr	r1, [pc, #220]	; (8001140 <HAL_GPIO_Init+0x334>)
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	089b      	lsrs	r3, r3, #2
 8001066:	3302      	adds	r3, #2
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800106e:	4b3b      	ldr	r3, [pc, #236]	; (800115c <HAL_GPIO_Init+0x350>)
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	43db      	mvns	r3, r3
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	4013      	ands	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001086:	2b00      	cmp	r3, #0
 8001088:	d003      	beq.n	8001092 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	4313      	orrs	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001092:	4a32      	ldr	r2, [pc, #200]	; (800115c <HAL_GPIO_Init+0x350>)
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001098:	4b30      	ldr	r3, [pc, #192]	; (800115c <HAL_GPIO_Init+0x350>)
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	43db      	mvns	r3, r3
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	4013      	ands	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d003      	beq.n	80010bc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010bc:	4a27      	ldr	r2, [pc, #156]	; (800115c <HAL_GPIO_Init+0x350>)
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80010c2:	4b26      	ldr	r3, [pc, #152]	; (800115c <HAL_GPIO_Init+0x350>)
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	43db      	mvns	r3, r3
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	4013      	ands	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d003      	beq.n	80010e6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010e6:	4a1d      	ldr	r2, [pc, #116]	; (800115c <HAL_GPIO_Init+0x350>)
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80010ec:	4b1b      	ldr	r3, [pc, #108]	; (800115c <HAL_GPIO_Init+0x350>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	43db      	mvns	r3, r3
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	4013      	ands	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001104:	2b00      	cmp	r3, #0
 8001106:	d003      	beq.n	8001110 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	4313      	orrs	r3, r2
 800110e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001110:	4a12      	ldr	r2, [pc, #72]	; (800115c <HAL_GPIO_Init+0x350>)
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	3301      	adds	r3, #1
 800111a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	fa22 f303 	lsr.w	r3, r2, r3
 8001126:	2b00      	cmp	r3, #0
 8001128:	f47f ae78 	bne.w	8000e1c <HAL_GPIO_Init+0x10>
  }
}
 800112c:	bf00      	nop
 800112e:	bf00      	nop
 8001130:	371c      	adds	r7, #28
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	40021000 	.word	0x40021000
 8001140:	40010000 	.word	0x40010000
 8001144:	48000400 	.word	0x48000400
 8001148:	48000800 	.word	0x48000800
 800114c:	48000c00 	.word	0x48000c00
 8001150:	48001000 	.word	0x48001000
 8001154:	48001400 	.word	0x48001400
 8001158:	48001800 	.word	0x48001800
 800115c:	40010400 	.word	0x40010400

08001160 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001164:	4b04      	ldr	r3, [pc, #16]	; (8001178 <HAL_PWREx_GetVoltageRange+0x18>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800116c:	4618      	mov	r0, r3
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	40007000 	.word	0x40007000

0800117c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800117c:	b480      	push	{r7}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800118a:	d130      	bne.n	80011ee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800118c:	4b23      	ldr	r3, [pc, #140]	; (800121c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001194:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001198:	d038      	beq.n	800120c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800119a:	4b20      	ldr	r3, [pc, #128]	; (800121c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011a2:	4a1e      	ldr	r2, [pc, #120]	; (800121c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011a8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80011aa:	4b1d      	ldr	r3, [pc, #116]	; (8001220 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2232      	movs	r2, #50	; 0x32
 80011b0:	fb02 f303 	mul.w	r3, r2, r3
 80011b4:	4a1b      	ldr	r2, [pc, #108]	; (8001224 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80011b6:	fba2 2303 	umull	r2, r3, r2, r3
 80011ba:	0c9b      	lsrs	r3, r3, #18
 80011bc:	3301      	adds	r3, #1
 80011be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011c0:	e002      	b.n	80011c8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	3b01      	subs	r3, #1
 80011c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011c8:	4b14      	ldr	r3, [pc, #80]	; (800121c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011ca:	695b      	ldr	r3, [r3, #20]
 80011cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011d4:	d102      	bne.n	80011dc <HAL_PWREx_ControlVoltageScaling+0x60>
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d1f2      	bne.n	80011c2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011dc:	4b0f      	ldr	r3, [pc, #60]	; (800121c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011de:	695b      	ldr	r3, [r3, #20]
 80011e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011e8:	d110      	bne.n	800120c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80011ea:	2303      	movs	r3, #3
 80011ec:	e00f      	b.n	800120e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80011ee:	4b0b      	ldr	r3, [pc, #44]	; (800121c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011fa:	d007      	beq.n	800120c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80011fc:	4b07      	ldr	r3, [pc, #28]	; (800121c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001204:	4a05      	ldr	r2, [pc, #20]	; (800121c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001206:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800120a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3714      	adds	r7, #20
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	40007000 	.word	0x40007000
 8001220:	20000028 	.word	0x20000028
 8001224:	431bde83 	.word	0x431bde83

08001228 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b088      	sub	sp, #32
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d101      	bne.n	800123a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e3ca      	b.n	80019d0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800123a:	4b97      	ldr	r3, [pc, #604]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	f003 030c 	and.w	r3, r3, #12
 8001242:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001244:	4b94      	ldr	r3, [pc, #592]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	f003 0303 	and.w	r3, r3, #3
 800124c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0310 	and.w	r3, r3, #16
 8001256:	2b00      	cmp	r3, #0
 8001258:	f000 80e4 	beq.w	8001424 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d007      	beq.n	8001272 <HAL_RCC_OscConfig+0x4a>
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	2b0c      	cmp	r3, #12
 8001266:	f040 808b 	bne.w	8001380 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	2b01      	cmp	r3, #1
 800126e:	f040 8087 	bne.w	8001380 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001272:	4b89      	ldr	r3, [pc, #548]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	2b00      	cmp	r3, #0
 800127c:	d005      	beq.n	800128a <HAL_RCC_OscConfig+0x62>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	699b      	ldr	r3, [r3, #24]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d101      	bne.n	800128a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e3a2      	b.n	80019d0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6a1a      	ldr	r2, [r3, #32]
 800128e:	4b82      	ldr	r3, [pc, #520]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 0308 	and.w	r3, r3, #8
 8001296:	2b00      	cmp	r3, #0
 8001298:	d004      	beq.n	80012a4 <HAL_RCC_OscConfig+0x7c>
 800129a:	4b7f      	ldr	r3, [pc, #508]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012a2:	e005      	b.n	80012b0 <HAL_RCC_OscConfig+0x88>
 80012a4:	4b7c      	ldr	r3, [pc, #496]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 80012a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012aa:	091b      	lsrs	r3, r3, #4
 80012ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d223      	bcs.n	80012fc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6a1b      	ldr	r3, [r3, #32]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f000 fd55 	bl	8001d68 <RCC_SetFlashLatencyFromMSIRange>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e383      	b.n	80019d0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012c8:	4b73      	ldr	r3, [pc, #460]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a72      	ldr	r2, [pc, #456]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 80012ce:	f043 0308 	orr.w	r3, r3, #8
 80012d2:	6013      	str	r3, [r2, #0]
 80012d4:	4b70      	ldr	r3, [pc, #448]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6a1b      	ldr	r3, [r3, #32]
 80012e0:	496d      	ldr	r1, [pc, #436]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 80012e2:	4313      	orrs	r3, r2
 80012e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012e6:	4b6c      	ldr	r3, [pc, #432]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	69db      	ldr	r3, [r3, #28]
 80012f2:	021b      	lsls	r3, r3, #8
 80012f4:	4968      	ldr	r1, [pc, #416]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 80012f6:	4313      	orrs	r3, r2
 80012f8:	604b      	str	r3, [r1, #4]
 80012fa:	e025      	b.n	8001348 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012fc:	4b66      	ldr	r3, [pc, #408]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a65      	ldr	r2, [pc, #404]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 8001302:	f043 0308 	orr.w	r3, r3, #8
 8001306:	6013      	str	r3, [r2, #0]
 8001308:	4b63      	ldr	r3, [pc, #396]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6a1b      	ldr	r3, [r3, #32]
 8001314:	4960      	ldr	r1, [pc, #384]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 8001316:	4313      	orrs	r3, r2
 8001318:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800131a:	4b5f      	ldr	r3, [pc, #380]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	69db      	ldr	r3, [r3, #28]
 8001326:	021b      	lsls	r3, r3, #8
 8001328:	495b      	ldr	r1, [pc, #364]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 800132a:	4313      	orrs	r3, r2
 800132c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d109      	bne.n	8001348 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6a1b      	ldr	r3, [r3, #32]
 8001338:	4618      	mov	r0, r3
 800133a:	f000 fd15 	bl	8001d68 <RCC_SetFlashLatencyFromMSIRange>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	e343      	b.n	80019d0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001348:	f000 fc4a 	bl	8001be0 <HAL_RCC_GetSysClockFreq>
 800134c:	4602      	mov	r2, r0
 800134e:	4b52      	ldr	r3, [pc, #328]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	091b      	lsrs	r3, r3, #4
 8001354:	f003 030f 	and.w	r3, r3, #15
 8001358:	4950      	ldr	r1, [pc, #320]	; (800149c <HAL_RCC_OscConfig+0x274>)
 800135a:	5ccb      	ldrb	r3, [r1, r3]
 800135c:	f003 031f 	and.w	r3, r3, #31
 8001360:	fa22 f303 	lsr.w	r3, r2, r3
 8001364:	4a4e      	ldr	r2, [pc, #312]	; (80014a0 <HAL_RCC_OscConfig+0x278>)
 8001366:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001368:	4b4e      	ldr	r3, [pc, #312]	; (80014a4 <HAL_RCC_OscConfig+0x27c>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff fbbb 	bl	8000ae8 <HAL_InitTick>
 8001372:	4603      	mov	r3, r0
 8001374:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001376:	7bfb      	ldrb	r3, [r7, #15]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d052      	beq.n	8001422 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800137c:	7bfb      	ldrb	r3, [r7, #15]
 800137e:	e327      	b.n	80019d0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	699b      	ldr	r3, [r3, #24]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d032      	beq.n	80013ee <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001388:	4b43      	ldr	r3, [pc, #268]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a42      	ldr	r2, [pc, #264]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 800138e:	f043 0301 	orr.w	r3, r3, #1
 8001392:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001394:	f7ff fbf8 	bl	8000b88 <HAL_GetTick>
 8001398:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800139a:	e008      	b.n	80013ae <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800139c:	f7ff fbf4 	bl	8000b88 <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d901      	bls.n	80013ae <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e310      	b.n	80019d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013ae:	4b3a      	ldr	r3, [pc, #232]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d0f0      	beq.n	800139c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013ba:	4b37      	ldr	r3, [pc, #220]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a36      	ldr	r2, [pc, #216]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 80013c0:	f043 0308 	orr.w	r3, r3, #8
 80013c4:	6013      	str	r3, [r2, #0]
 80013c6:	4b34      	ldr	r3, [pc, #208]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6a1b      	ldr	r3, [r3, #32]
 80013d2:	4931      	ldr	r1, [pc, #196]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 80013d4:	4313      	orrs	r3, r2
 80013d6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013d8:	4b2f      	ldr	r3, [pc, #188]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	69db      	ldr	r3, [r3, #28]
 80013e4:	021b      	lsls	r3, r3, #8
 80013e6:	492c      	ldr	r1, [pc, #176]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 80013e8:	4313      	orrs	r3, r2
 80013ea:	604b      	str	r3, [r1, #4]
 80013ec:	e01a      	b.n	8001424 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80013ee:	4b2a      	ldr	r3, [pc, #168]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a29      	ldr	r2, [pc, #164]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 80013f4:	f023 0301 	bic.w	r3, r3, #1
 80013f8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013fa:	f7ff fbc5 	bl	8000b88 <HAL_GetTick>
 80013fe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001400:	e008      	b.n	8001414 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001402:	f7ff fbc1 	bl	8000b88 <HAL_GetTick>
 8001406:	4602      	mov	r2, r0
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	2b02      	cmp	r3, #2
 800140e:	d901      	bls.n	8001414 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001410:	2303      	movs	r3, #3
 8001412:	e2dd      	b.n	80019d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001414:	4b20      	ldr	r3, [pc, #128]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 0302 	and.w	r3, r3, #2
 800141c:	2b00      	cmp	r3, #0
 800141e:	d1f0      	bne.n	8001402 <HAL_RCC_OscConfig+0x1da>
 8001420:	e000      	b.n	8001424 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001422:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 0301 	and.w	r3, r3, #1
 800142c:	2b00      	cmp	r3, #0
 800142e:	d074      	beq.n	800151a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	2b08      	cmp	r3, #8
 8001434:	d005      	beq.n	8001442 <HAL_RCC_OscConfig+0x21a>
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	2b0c      	cmp	r3, #12
 800143a:	d10e      	bne.n	800145a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	2b03      	cmp	r3, #3
 8001440:	d10b      	bne.n	800145a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001442:	4b15      	ldr	r3, [pc, #84]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d064      	beq.n	8001518 <HAL_RCC_OscConfig+0x2f0>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d160      	bne.n	8001518 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e2ba      	b.n	80019d0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001462:	d106      	bne.n	8001472 <HAL_RCC_OscConfig+0x24a>
 8001464:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a0b      	ldr	r2, [pc, #44]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 800146a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800146e:	6013      	str	r3, [r2, #0]
 8001470:	e026      	b.n	80014c0 <HAL_RCC_OscConfig+0x298>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800147a:	d115      	bne.n	80014a8 <HAL_RCC_OscConfig+0x280>
 800147c:	4b06      	ldr	r3, [pc, #24]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a05      	ldr	r2, [pc, #20]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 8001482:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001486:	6013      	str	r3, [r2, #0]
 8001488:	4b03      	ldr	r3, [pc, #12]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a02      	ldr	r2, [pc, #8]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 800148e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001492:	6013      	str	r3, [r2, #0]
 8001494:	e014      	b.n	80014c0 <HAL_RCC_OscConfig+0x298>
 8001496:	bf00      	nop
 8001498:	40021000 	.word	0x40021000
 800149c:	0800450c 	.word	0x0800450c
 80014a0:	20000028 	.word	0x20000028
 80014a4:	2000002c 	.word	0x2000002c
 80014a8:	4ba0      	ldr	r3, [pc, #640]	; (800172c <HAL_RCC_OscConfig+0x504>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a9f      	ldr	r2, [pc, #636]	; (800172c <HAL_RCC_OscConfig+0x504>)
 80014ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014b2:	6013      	str	r3, [r2, #0]
 80014b4:	4b9d      	ldr	r3, [pc, #628]	; (800172c <HAL_RCC_OscConfig+0x504>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a9c      	ldr	r2, [pc, #624]	; (800172c <HAL_RCC_OscConfig+0x504>)
 80014ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d013      	beq.n	80014f0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c8:	f7ff fb5e 	bl	8000b88 <HAL_GetTick>
 80014cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014ce:	e008      	b.n	80014e2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014d0:	f7ff fb5a 	bl	8000b88 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b64      	cmp	r3, #100	; 0x64
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e276      	b.n	80019d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014e2:	4b92      	ldr	r3, [pc, #584]	; (800172c <HAL_RCC_OscConfig+0x504>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d0f0      	beq.n	80014d0 <HAL_RCC_OscConfig+0x2a8>
 80014ee:	e014      	b.n	800151a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f0:	f7ff fb4a 	bl	8000b88 <HAL_GetTick>
 80014f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014f6:	e008      	b.n	800150a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014f8:	f7ff fb46 	bl	8000b88 <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b64      	cmp	r3, #100	; 0x64
 8001504:	d901      	bls.n	800150a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e262      	b.n	80019d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800150a:	4b88      	ldr	r3, [pc, #544]	; (800172c <HAL_RCC_OscConfig+0x504>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d1f0      	bne.n	80014f8 <HAL_RCC_OscConfig+0x2d0>
 8001516:	e000      	b.n	800151a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001518:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	2b00      	cmp	r3, #0
 8001524:	d060      	beq.n	80015e8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	2b04      	cmp	r3, #4
 800152a:	d005      	beq.n	8001538 <HAL_RCC_OscConfig+0x310>
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	2b0c      	cmp	r3, #12
 8001530:	d119      	bne.n	8001566 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	2b02      	cmp	r3, #2
 8001536:	d116      	bne.n	8001566 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001538:	4b7c      	ldr	r3, [pc, #496]	; (800172c <HAL_RCC_OscConfig+0x504>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001540:	2b00      	cmp	r3, #0
 8001542:	d005      	beq.n	8001550 <HAL_RCC_OscConfig+0x328>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d101      	bne.n	8001550 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e23f      	b.n	80019d0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001550:	4b76      	ldr	r3, [pc, #472]	; (800172c <HAL_RCC_OscConfig+0x504>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	691b      	ldr	r3, [r3, #16]
 800155c:	061b      	lsls	r3, r3, #24
 800155e:	4973      	ldr	r1, [pc, #460]	; (800172c <HAL_RCC_OscConfig+0x504>)
 8001560:	4313      	orrs	r3, r2
 8001562:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001564:	e040      	b.n	80015e8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	68db      	ldr	r3, [r3, #12]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d023      	beq.n	80015b6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800156e:	4b6f      	ldr	r3, [pc, #444]	; (800172c <HAL_RCC_OscConfig+0x504>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a6e      	ldr	r2, [pc, #440]	; (800172c <HAL_RCC_OscConfig+0x504>)
 8001574:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001578:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800157a:	f7ff fb05 	bl	8000b88 <HAL_GetTick>
 800157e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001580:	e008      	b.n	8001594 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001582:	f7ff fb01 	bl	8000b88 <HAL_GetTick>
 8001586:	4602      	mov	r2, r0
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	2b02      	cmp	r3, #2
 800158e:	d901      	bls.n	8001594 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e21d      	b.n	80019d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001594:	4b65      	ldr	r3, [pc, #404]	; (800172c <HAL_RCC_OscConfig+0x504>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800159c:	2b00      	cmp	r3, #0
 800159e:	d0f0      	beq.n	8001582 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a0:	4b62      	ldr	r3, [pc, #392]	; (800172c <HAL_RCC_OscConfig+0x504>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	691b      	ldr	r3, [r3, #16]
 80015ac:	061b      	lsls	r3, r3, #24
 80015ae:	495f      	ldr	r1, [pc, #380]	; (800172c <HAL_RCC_OscConfig+0x504>)
 80015b0:	4313      	orrs	r3, r2
 80015b2:	604b      	str	r3, [r1, #4]
 80015b4:	e018      	b.n	80015e8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015b6:	4b5d      	ldr	r3, [pc, #372]	; (800172c <HAL_RCC_OscConfig+0x504>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a5c      	ldr	r2, [pc, #368]	; (800172c <HAL_RCC_OscConfig+0x504>)
 80015bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c2:	f7ff fae1 	bl	8000b88 <HAL_GetTick>
 80015c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015c8:	e008      	b.n	80015dc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015ca:	f7ff fadd 	bl	8000b88 <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d901      	bls.n	80015dc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e1f9      	b.n	80019d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015dc:	4b53      	ldr	r3, [pc, #332]	; (800172c <HAL_RCC_OscConfig+0x504>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d1f0      	bne.n	80015ca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0308 	and.w	r3, r3, #8
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d03c      	beq.n	800166e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	695b      	ldr	r3, [r3, #20]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d01c      	beq.n	8001636 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015fc:	4b4b      	ldr	r3, [pc, #300]	; (800172c <HAL_RCC_OscConfig+0x504>)
 80015fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001602:	4a4a      	ldr	r2, [pc, #296]	; (800172c <HAL_RCC_OscConfig+0x504>)
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800160c:	f7ff fabc 	bl	8000b88 <HAL_GetTick>
 8001610:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001612:	e008      	b.n	8001626 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001614:	f7ff fab8 	bl	8000b88 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b02      	cmp	r3, #2
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e1d4      	b.n	80019d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001626:	4b41      	ldr	r3, [pc, #260]	; (800172c <HAL_RCC_OscConfig+0x504>)
 8001628:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800162c:	f003 0302 	and.w	r3, r3, #2
 8001630:	2b00      	cmp	r3, #0
 8001632:	d0ef      	beq.n	8001614 <HAL_RCC_OscConfig+0x3ec>
 8001634:	e01b      	b.n	800166e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001636:	4b3d      	ldr	r3, [pc, #244]	; (800172c <HAL_RCC_OscConfig+0x504>)
 8001638:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800163c:	4a3b      	ldr	r2, [pc, #236]	; (800172c <HAL_RCC_OscConfig+0x504>)
 800163e:	f023 0301 	bic.w	r3, r3, #1
 8001642:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001646:	f7ff fa9f 	bl	8000b88 <HAL_GetTick>
 800164a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800164c:	e008      	b.n	8001660 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800164e:	f7ff fa9b 	bl	8000b88 <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e1b7      	b.n	80019d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001660:	4b32      	ldr	r3, [pc, #200]	; (800172c <HAL_RCC_OscConfig+0x504>)
 8001662:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1ef      	bne.n	800164e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0304 	and.w	r3, r3, #4
 8001676:	2b00      	cmp	r3, #0
 8001678:	f000 80a6 	beq.w	80017c8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800167c:	2300      	movs	r3, #0
 800167e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001680:	4b2a      	ldr	r3, [pc, #168]	; (800172c <HAL_RCC_OscConfig+0x504>)
 8001682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d10d      	bne.n	80016a8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800168c:	4b27      	ldr	r3, [pc, #156]	; (800172c <HAL_RCC_OscConfig+0x504>)
 800168e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001690:	4a26      	ldr	r2, [pc, #152]	; (800172c <HAL_RCC_OscConfig+0x504>)
 8001692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001696:	6593      	str	r3, [r2, #88]	; 0x58
 8001698:	4b24      	ldr	r3, [pc, #144]	; (800172c <HAL_RCC_OscConfig+0x504>)
 800169a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800169c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a0:	60bb      	str	r3, [r7, #8]
 80016a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016a4:	2301      	movs	r3, #1
 80016a6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016a8:	4b21      	ldr	r3, [pc, #132]	; (8001730 <HAL_RCC_OscConfig+0x508>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d118      	bne.n	80016e6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016b4:	4b1e      	ldr	r3, [pc, #120]	; (8001730 <HAL_RCC_OscConfig+0x508>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a1d      	ldr	r2, [pc, #116]	; (8001730 <HAL_RCC_OscConfig+0x508>)
 80016ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016c0:	f7ff fa62 	bl	8000b88 <HAL_GetTick>
 80016c4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016c6:	e008      	b.n	80016da <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016c8:	f7ff fa5e 	bl	8000b88 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e17a      	b.n	80019d0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016da:	4b15      	ldr	r3, [pc, #84]	; (8001730 <HAL_RCC_OscConfig+0x508>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d0f0      	beq.n	80016c8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d108      	bne.n	8001700 <HAL_RCC_OscConfig+0x4d8>
 80016ee:	4b0f      	ldr	r3, [pc, #60]	; (800172c <HAL_RCC_OscConfig+0x504>)
 80016f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016f4:	4a0d      	ldr	r2, [pc, #52]	; (800172c <HAL_RCC_OscConfig+0x504>)
 80016f6:	f043 0301 	orr.w	r3, r3, #1
 80016fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016fe:	e029      	b.n	8001754 <HAL_RCC_OscConfig+0x52c>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	2b05      	cmp	r3, #5
 8001706:	d115      	bne.n	8001734 <HAL_RCC_OscConfig+0x50c>
 8001708:	4b08      	ldr	r3, [pc, #32]	; (800172c <HAL_RCC_OscConfig+0x504>)
 800170a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800170e:	4a07      	ldr	r2, [pc, #28]	; (800172c <HAL_RCC_OscConfig+0x504>)
 8001710:	f043 0304 	orr.w	r3, r3, #4
 8001714:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001718:	4b04      	ldr	r3, [pc, #16]	; (800172c <HAL_RCC_OscConfig+0x504>)
 800171a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800171e:	4a03      	ldr	r2, [pc, #12]	; (800172c <HAL_RCC_OscConfig+0x504>)
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001728:	e014      	b.n	8001754 <HAL_RCC_OscConfig+0x52c>
 800172a:	bf00      	nop
 800172c:	40021000 	.word	0x40021000
 8001730:	40007000 	.word	0x40007000
 8001734:	4b9c      	ldr	r3, [pc, #624]	; (80019a8 <HAL_RCC_OscConfig+0x780>)
 8001736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800173a:	4a9b      	ldr	r2, [pc, #620]	; (80019a8 <HAL_RCC_OscConfig+0x780>)
 800173c:	f023 0301 	bic.w	r3, r3, #1
 8001740:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001744:	4b98      	ldr	r3, [pc, #608]	; (80019a8 <HAL_RCC_OscConfig+0x780>)
 8001746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800174a:	4a97      	ldr	r2, [pc, #604]	; (80019a8 <HAL_RCC_OscConfig+0x780>)
 800174c:	f023 0304 	bic.w	r3, r3, #4
 8001750:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d016      	beq.n	800178a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800175c:	f7ff fa14 	bl	8000b88 <HAL_GetTick>
 8001760:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001762:	e00a      	b.n	800177a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001764:	f7ff fa10 	bl	8000b88 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001772:	4293      	cmp	r3, r2
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e12a      	b.n	80019d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800177a:	4b8b      	ldr	r3, [pc, #556]	; (80019a8 <HAL_RCC_OscConfig+0x780>)
 800177c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001780:	f003 0302 	and.w	r3, r3, #2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d0ed      	beq.n	8001764 <HAL_RCC_OscConfig+0x53c>
 8001788:	e015      	b.n	80017b6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800178a:	f7ff f9fd 	bl	8000b88 <HAL_GetTick>
 800178e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001790:	e00a      	b.n	80017a8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001792:	f7ff f9f9 	bl	8000b88 <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	f241 3288 	movw	r2, #5000	; 0x1388
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d901      	bls.n	80017a8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e113      	b.n	80019d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017a8:	4b7f      	ldr	r3, [pc, #508]	; (80019a8 <HAL_RCC_OscConfig+0x780>)
 80017aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d1ed      	bne.n	8001792 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017b6:	7ffb      	ldrb	r3, [r7, #31]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d105      	bne.n	80017c8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017bc:	4b7a      	ldr	r3, [pc, #488]	; (80019a8 <HAL_RCC_OscConfig+0x780>)
 80017be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c0:	4a79      	ldr	r2, [pc, #484]	; (80019a8 <HAL_RCC_OscConfig+0x780>)
 80017c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017c6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	f000 80fe 	beq.w	80019ce <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	f040 80d0 	bne.w	800197c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80017dc:	4b72      	ldr	r3, [pc, #456]	; (80019a8 <HAL_RCC_OscConfig+0x780>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	f003 0203 	and.w	r2, r3, #3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d130      	bne.n	8001852 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	3b01      	subs	r3, #1
 80017fc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017fe:	429a      	cmp	r2, r3
 8001800:	d127      	bne.n	8001852 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800180c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800180e:	429a      	cmp	r2, r3
 8001810:	d11f      	bne.n	8001852 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800181c:	2a07      	cmp	r2, #7
 800181e:	bf14      	ite	ne
 8001820:	2201      	movne	r2, #1
 8001822:	2200      	moveq	r2, #0
 8001824:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001826:	4293      	cmp	r3, r2
 8001828:	d113      	bne.n	8001852 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001834:	085b      	lsrs	r3, r3, #1
 8001836:	3b01      	subs	r3, #1
 8001838:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800183a:	429a      	cmp	r2, r3
 800183c:	d109      	bne.n	8001852 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001848:	085b      	lsrs	r3, r3, #1
 800184a:	3b01      	subs	r3, #1
 800184c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800184e:	429a      	cmp	r2, r3
 8001850:	d06e      	beq.n	8001930 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	2b0c      	cmp	r3, #12
 8001856:	d069      	beq.n	800192c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001858:	4b53      	ldr	r3, [pc, #332]	; (80019a8 <HAL_RCC_OscConfig+0x780>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d105      	bne.n	8001870 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001864:	4b50      	ldr	r3, [pc, #320]	; (80019a8 <HAL_RCC_OscConfig+0x780>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e0ad      	b.n	80019d0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001874:	4b4c      	ldr	r3, [pc, #304]	; (80019a8 <HAL_RCC_OscConfig+0x780>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a4b      	ldr	r2, [pc, #300]	; (80019a8 <HAL_RCC_OscConfig+0x780>)
 800187a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800187e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001880:	f7ff f982 	bl	8000b88 <HAL_GetTick>
 8001884:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001888:	f7ff f97e 	bl	8000b88 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b02      	cmp	r3, #2
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e09a      	b.n	80019d0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800189a:	4b43      	ldr	r3, [pc, #268]	; (80019a8 <HAL_RCC_OscConfig+0x780>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d1f0      	bne.n	8001888 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018a6:	4b40      	ldr	r3, [pc, #256]	; (80019a8 <HAL_RCC_OscConfig+0x780>)
 80018a8:	68da      	ldr	r2, [r3, #12]
 80018aa:	4b40      	ldr	r3, [pc, #256]	; (80019ac <HAL_RCC_OscConfig+0x784>)
 80018ac:	4013      	ands	r3, r2
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80018b6:	3a01      	subs	r2, #1
 80018b8:	0112      	lsls	r2, r2, #4
 80018ba:	4311      	orrs	r1, r2
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80018c0:	0212      	lsls	r2, r2, #8
 80018c2:	4311      	orrs	r1, r2
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80018c8:	0852      	lsrs	r2, r2, #1
 80018ca:	3a01      	subs	r2, #1
 80018cc:	0552      	lsls	r2, r2, #21
 80018ce:	4311      	orrs	r1, r2
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80018d4:	0852      	lsrs	r2, r2, #1
 80018d6:	3a01      	subs	r2, #1
 80018d8:	0652      	lsls	r2, r2, #25
 80018da:	4311      	orrs	r1, r2
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80018e0:	0912      	lsrs	r2, r2, #4
 80018e2:	0452      	lsls	r2, r2, #17
 80018e4:	430a      	orrs	r2, r1
 80018e6:	4930      	ldr	r1, [pc, #192]	; (80019a8 <HAL_RCC_OscConfig+0x780>)
 80018e8:	4313      	orrs	r3, r2
 80018ea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80018ec:	4b2e      	ldr	r3, [pc, #184]	; (80019a8 <HAL_RCC_OscConfig+0x780>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a2d      	ldr	r2, [pc, #180]	; (80019a8 <HAL_RCC_OscConfig+0x780>)
 80018f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018f6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018f8:	4b2b      	ldr	r3, [pc, #172]	; (80019a8 <HAL_RCC_OscConfig+0x780>)
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	4a2a      	ldr	r2, [pc, #168]	; (80019a8 <HAL_RCC_OscConfig+0x780>)
 80018fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001902:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001904:	f7ff f940 	bl	8000b88 <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800190c:	f7ff f93c 	bl	8000b88 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b02      	cmp	r3, #2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e058      	b.n	80019d0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800191e:	4b22      	ldr	r3, [pc, #136]	; (80019a8 <HAL_RCC_OscConfig+0x780>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d0f0      	beq.n	800190c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800192a:	e050      	b.n	80019ce <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e04f      	b.n	80019d0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001930:	4b1d      	ldr	r3, [pc, #116]	; (80019a8 <HAL_RCC_OscConfig+0x780>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d148      	bne.n	80019ce <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800193c:	4b1a      	ldr	r3, [pc, #104]	; (80019a8 <HAL_RCC_OscConfig+0x780>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a19      	ldr	r2, [pc, #100]	; (80019a8 <HAL_RCC_OscConfig+0x780>)
 8001942:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001946:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001948:	4b17      	ldr	r3, [pc, #92]	; (80019a8 <HAL_RCC_OscConfig+0x780>)
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	4a16      	ldr	r2, [pc, #88]	; (80019a8 <HAL_RCC_OscConfig+0x780>)
 800194e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001952:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001954:	f7ff f918 	bl	8000b88 <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800195a:	e008      	b.n	800196e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800195c:	f7ff f914 	bl	8000b88 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b02      	cmp	r3, #2
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e030      	b.n	80019d0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800196e:	4b0e      	ldr	r3, [pc, #56]	; (80019a8 <HAL_RCC_OscConfig+0x780>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d0f0      	beq.n	800195c <HAL_RCC_OscConfig+0x734>
 800197a:	e028      	b.n	80019ce <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	2b0c      	cmp	r3, #12
 8001980:	d023      	beq.n	80019ca <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001982:	4b09      	ldr	r3, [pc, #36]	; (80019a8 <HAL_RCC_OscConfig+0x780>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a08      	ldr	r2, [pc, #32]	; (80019a8 <HAL_RCC_OscConfig+0x780>)
 8001988:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800198c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800198e:	f7ff f8fb 	bl	8000b88 <HAL_GetTick>
 8001992:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001994:	e00c      	b.n	80019b0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001996:	f7ff f8f7 	bl	8000b88 <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d905      	bls.n	80019b0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e013      	b.n	80019d0 <HAL_RCC_OscConfig+0x7a8>
 80019a8:	40021000 	.word	0x40021000
 80019ac:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019b0:	4b09      	ldr	r3, [pc, #36]	; (80019d8 <HAL_RCC_OscConfig+0x7b0>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d1ec      	bne.n	8001996 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80019bc:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <HAL_RCC_OscConfig+0x7b0>)
 80019be:	68da      	ldr	r2, [r3, #12]
 80019c0:	4905      	ldr	r1, [pc, #20]	; (80019d8 <HAL_RCC_OscConfig+0x7b0>)
 80019c2:	4b06      	ldr	r3, [pc, #24]	; (80019dc <HAL_RCC_OscConfig+0x7b4>)
 80019c4:	4013      	ands	r3, r2
 80019c6:	60cb      	str	r3, [r1, #12]
 80019c8:	e001      	b.n	80019ce <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e000      	b.n	80019d0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80019ce:	2300      	movs	r3, #0
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3720      	adds	r7, #32
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40021000 	.word	0x40021000
 80019dc:	feeefffc 	.word	0xfeeefffc

080019e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d101      	bne.n	80019f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e0e7      	b.n	8001bc4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019f4:	4b75      	ldr	r3, [pc, #468]	; (8001bcc <HAL_RCC_ClockConfig+0x1ec>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0307 	and.w	r3, r3, #7
 80019fc:	683a      	ldr	r2, [r7, #0]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d910      	bls.n	8001a24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a02:	4b72      	ldr	r3, [pc, #456]	; (8001bcc <HAL_RCC_ClockConfig+0x1ec>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f023 0207 	bic.w	r2, r3, #7
 8001a0a:	4970      	ldr	r1, [pc, #448]	; (8001bcc <HAL_RCC_ClockConfig+0x1ec>)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a12:	4b6e      	ldr	r3, [pc, #440]	; (8001bcc <HAL_RCC_ClockConfig+0x1ec>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0307 	and.w	r3, r3, #7
 8001a1a:	683a      	ldr	r2, [r7, #0]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d001      	beq.n	8001a24 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e0cf      	b.n	8001bc4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0302 	and.w	r3, r3, #2
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d010      	beq.n	8001a52 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689a      	ldr	r2, [r3, #8]
 8001a34:	4b66      	ldr	r3, [pc, #408]	; (8001bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d908      	bls.n	8001a52 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a40:	4b63      	ldr	r3, [pc, #396]	; (8001bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	4960      	ldr	r1, [pc, #384]	; (8001bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d04c      	beq.n	8001af8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	2b03      	cmp	r3, #3
 8001a64:	d107      	bne.n	8001a76 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a66:	4b5a      	ldr	r3, [pc, #360]	; (8001bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d121      	bne.n	8001ab6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e0a6      	b.n	8001bc4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d107      	bne.n	8001a8e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a7e:	4b54      	ldr	r3, [pc, #336]	; (8001bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d115      	bne.n	8001ab6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e09a      	b.n	8001bc4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d107      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a96:	4b4e      	ldr	r3, [pc, #312]	; (8001bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d109      	bne.n	8001ab6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e08e      	b.n	8001bc4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001aa6:	4b4a      	ldr	r3, [pc, #296]	; (8001bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d101      	bne.n	8001ab6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e086      	b.n	8001bc4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ab6:	4b46      	ldr	r3, [pc, #280]	; (8001bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f023 0203 	bic.w	r2, r3, #3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	4943      	ldr	r1, [pc, #268]	; (8001bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ac8:	f7ff f85e 	bl	8000b88 <HAL_GetTick>
 8001acc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ace:	e00a      	b.n	8001ae6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ad0:	f7ff f85a 	bl	8000b88 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e06e      	b.n	8001bc4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ae6:	4b3a      	ldr	r3, [pc, #232]	; (8001bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f003 020c 	and.w	r2, r3, #12
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d1eb      	bne.n	8001ad0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d010      	beq.n	8001b26 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689a      	ldr	r2, [r3, #8]
 8001b08:	4b31      	ldr	r3, [pc, #196]	; (8001bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d208      	bcs.n	8001b26 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b14:	4b2e      	ldr	r3, [pc, #184]	; (8001bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	492b      	ldr	r1, [pc, #172]	; (8001bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b22:	4313      	orrs	r3, r2
 8001b24:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b26:	4b29      	ldr	r3, [pc, #164]	; (8001bcc <HAL_RCC_ClockConfig+0x1ec>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0307 	and.w	r3, r3, #7
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d210      	bcs.n	8001b56 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b34:	4b25      	ldr	r3, [pc, #148]	; (8001bcc <HAL_RCC_ClockConfig+0x1ec>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f023 0207 	bic.w	r2, r3, #7
 8001b3c:	4923      	ldr	r1, [pc, #140]	; (8001bcc <HAL_RCC_ClockConfig+0x1ec>)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b44:	4b21      	ldr	r3, [pc, #132]	; (8001bcc <HAL_RCC_ClockConfig+0x1ec>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0307 	and.w	r3, r3, #7
 8001b4c:	683a      	ldr	r2, [r7, #0]
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d001      	beq.n	8001b56 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e036      	b.n	8001bc4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0304 	and.w	r3, r3, #4
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d008      	beq.n	8001b74 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b62:	4b1b      	ldr	r3, [pc, #108]	; (8001bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	4918      	ldr	r1, [pc, #96]	; (8001bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b70:	4313      	orrs	r3, r2
 8001b72:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0308 	and.w	r3, r3, #8
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d009      	beq.n	8001b94 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b80:	4b13      	ldr	r3, [pc, #76]	; (8001bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	691b      	ldr	r3, [r3, #16]
 8001b8c:	00db      	lsls	r3, r3, #3
 8001b8e:	4910      	ldr	r1, [pc, #64]	; (8001bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b90:	4313      	orrs	r3, r2
 8001b92:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b94:	f000 f824 	bl	8001be0 <HAL_RCC_GetSysClockFreq>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	4b0d      	ldr	r3, [pc, #52]	; (8001bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	091b      	lsrs	r3, r3, #4
 8001ba0:	f003 030f 	and.w	r3, r3, #15
 8001ba4:	490b      	ldr	r1, [pc, #44]	; (8001bd4 <HAL_RCC_ClockConfig+0x1f4>)
 8001ba6:	5ccb      	ldrb	r3, [r1, r3]
 8001ba8:	f003 031f 	and.w	r3, r3, #31
 8001bac:	fa22 f303 	lsr.w	r3, r2, r3
 8001bb0:	4a09      	ldr	r2, [pc, #36]	; (8001bd8 <HAL_RCC_ClockConfig+0x1f8>)
 8001bb2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001bb4:	4b09      	ldr	r3, [pc, #36]	; (8001bdc <HAL_RCC_ClockConfig+0x1fc>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7fe ff95 	bl	8000ae8 <HAL_InitTick>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	72fb      	strb	r3, [r7, #11]

  return status;
 8001bc2:	7afb      	ldrb	r3, [r7, #11]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3710      	adds	r7, #16
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	40022000 	.word	0x40022000
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	0800450c 	.word	0x0800450c
 8001bd8:	20000028 	.word	0x20000028
 8001bdc:	2000002c 	.word	0x2000002c

08001be0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b089      	sub	sp, #36	; 0x24
 8001be4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001be6:	2300      	movs	r3, #0
 8001be8:	61fb      	str	r3, [r7, #28]
 8001bea:	2300      	movs	r3, #0
 8001bec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bee:	4b3e      	ldr	r3, [pc, #248]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f003 030c 	and.w	r3, r3, #12
 8001bf6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bf8:	4b3b      	ldr	r3, [pc, #236]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	f003 0303 	and.w	r3, r3, #3
 8001c00:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d005      	beq.n	8001c14 <HAL_RCC_GetSysClockFreq+0x34>
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	2b0c      	cmp	r3, #12
 8001c0c:	d121      	bne.n	8001c52 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d11e      	bne.n	8001c52 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c14:	4b34      	ldr	r3, [pc, #208]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0308 	and.w	r3, r3, #8
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d107      	bne.n	8001c30 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c20:	4b31      	ldr	r3, [pc, #196]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c26:	0a1b      	lsrs	r3, r3, #8
 8001c28:	f003 030f 	and.w	r3, r3, #15
 8001c2c:	61fb      	str	r3, [r7, #28]
 8001c2e:	e005      	b.n	8001c3c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c30:	4b2d      	ldr	r3, [pc, #180]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	091b      	lsrs	r3, r3, #4
 8001c36:	f003 030f 	and.w	r3, r3, #15
 8001c3a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c3c:	4a2b      	ldr	r2, [pc, #172]	; (8001cec <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c44:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d10d      	bne.n	8001c68 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c50:	e00a      	b.n	8001c68 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	2b04      	cmp	r3, #4
 8001c56:	d102      	bne.n	8001c5e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c58:	4b25      	ldr	r3, [pc, #148]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c5a:	61bb      	str	r3, [r7, #24]
 8001c5c:	e004      	b.n	8001c68 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	2b08      	cmp	r3, #8
 8001c62:	d101      	bne.n	8001c68 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c64:	4b23      	ldr	r3, [pc, #140]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c66:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	2b0c      	cmp	r3, #12
 8001c6c:	d134      	bne.n	8001cd8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c6e:	4b1e      	ldr	r3, [pc, #120]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	f003 0303 	and.w	r3, r3, #3
 8001c76:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d003      	beq.n	8001c86 <HAL_RCC_GetSysClockFreq+0xa6>
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	2b03      	cmp	r3, #3
 8001c82:	d003      	beq.n	8001c8c <HAL_RCC_GetSysClockFreq+0xac>
 8001c84:	e005      	b.n	8001c92 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001c86:	4b1a      	ldr	r3, [pc, #104]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c88:	617b      	str	r3, [r7, #20]
      break;
 8001c8a:	e005      	b.n	8001c98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001c8c:	4b19      	ldr	r3, [pc, #100]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c8e:	617b      	str	r3, [r7, #20]
      break;
 8001c90:	e002      	b.n	8001c98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	617b      	str	r3, [r7, #20]
      break;
 8001c96:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c98:	4b13      	ldr	r3, [pc, #76]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	091b      	lsrs	r3, r3, #4
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001ca6:	4b10      	ldr	r3, [pc, #64]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	0a1b      	lsrs	r3, r3, #8
 8001cac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001cb0:	697a      	ldr	r2, [r7, #20]
 8001cb2:	fb03 f202 	mul.w	r2, r3, r2
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cbc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001cbe:	4b0a      	ldr	r3, [pc, #40]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	0e5b      	lsrs	r3, r3, #25
 8001cc4:	f003 0303 	and.w	r3, r3, #3
 8001cc8:	3301      	adds	r3, #1
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001cce:	697a      	ldr	r2, [r7, #20]
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001cd8:	69bb      	ldr	r3, [r7, #24]
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3724      	adds	r7, #36	; 0x24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	08004524 	.word	0x08004524
 8001cf0:	00f42400 	.word	0x00f42400
 8001cf4:	007a1200 	.word	0x007a1200

08001cf8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cfc:	4b03      	ldr	r3, [pc, #12]	; (8001d0c <HAL_RCC_GetHCLKFreq+0x14>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	20000028 	.word	0x20000028

08001d10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d14:	f7ff fff0 	bl	8001cf8 <HAL_RCC_GetHCLKFreq>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	0a1b      	lsrs	r3, r3, #8
 8001d20:	f003 0307 	and.w	r3, r3, #7
 8001d24:	4904      	ldr	r1, [pc, #16]	; (8001d38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d26:	5ccb      	ldrb	r3, [r1, r3]
 8001d28:	f003 031f 	and.w	r3, r3, #31
 8001d2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40021000 	.word	0x40021000
 8001d38:	0800451c 	.word	0x0800451c

08001d3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d40:	f7ff ffda 	bl	8001cf8 <HAL_RCC_GetHCLKFreq>
 8001d44:	4602      	mov	r2, r0
 8001d46:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	0adb      	lsrs	r3, r3, #11
 8001d4c:	f003 0307 	and.w	r3, r3, #7
 8001d50:	4904      	ldr	r1, [pc, #16]	; (8001d64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d52:	5ccb      	ldrb	r3, [r1, r3]
 8001d54:	f003 031f 	and.w	r3, r3, #31
 8001d58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40021000 	.word	0x40021000
 8001d64:	0800451c 	.word	0x0800451c

08001d68 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d70:	2300      	movs	r3, #0
 8001d72:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d74:	4b2a      	ldr	r3, [pc, #168]	; (8001e20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d003      	beq.n	8001d88 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001d80:	f7ff f9ee 	bl	8001160 <HAL_PWREx_GetVoltageRange>
 8001d84:	6178      	str	r0, [r7, #20]
 8001d86:	e014      	b.n	8001db2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d88:	4b25      	ldr	r3, [pc, #148]	; (8001e20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d8c:	4a24      	ldr	r2, [pc, #144]	; (8001e20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d92:	6593      	str	r3, [r2, #88]	; 0x58
 8001d94:	4b22      	ldr	r3, [pc, #136]	; (8001e20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001da0:	f7ff f9de 	bl	8001160 <HAL_PWREx_GetVoltageRange>
 8001da4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001da6:	4b1e      	ldr	r3, [pc, #120]	; (8001e20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001daa:	4a1d      	ldr	r2, [pc, #116]	; (8001e20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001db0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001db8:	d10b      	bne.n	8001dd2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2b80      	cmp	r3, #128	; 0x80
 8001dbe:	d919      	bls.n	8001df4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2ba0      	cmp	r3, #160	; 0xa0
 8001dc4:	d902      	bls.n	8001dcc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	613b      	str	r3, [r7, #16]
 8001dca:	e013      	b.n	8001df4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001dcc:	2301      	movs	r3, #1
 8001dce:	613b      	str	r3, [r7, #16]
 8001dd0:	e010      	b.n	8001df4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2b80      	cmp	r3, #128	; 0x80
 8001dd6:	d902      	bls.n	8001dde <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001dd8:	2303      	movs	r3, #3
 8001dda:	613b      	str	r3, [r7, #16]
 8001ddc:	e00a      	b.n	8001df4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2b80      	cmp	r3, #128	; 0x80
 8001de2:	d102      	bne.n	8001dea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001de4:	2302      	movs	r3, #2
 8001de6:	613b      	str	r3, [r7, #16]
 8001de8:	e004      	b.n	8001df4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2b70      	cmp	r3, #112	; 0x70
 8001dee:	d101      	bne.n	8001df4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001df0:	2301      	movs	r3, #1
 8001df2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001df4:	4b0b      	ldr	r3, [pc, #44]	; (8001e24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f023 0207 	bic.w	r2, r3, #7
 8001dfc:	4909      	ldr	r1, [pc, #36]	; (8001e24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e04:	4b07      	ldr	r3, [pc, #28]	; (8001e24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0307 	and.w	r3, r3, #7
 8001e0c:	693a      	ldr	r2, [r7, #16]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d001      	beq.n	8001e16 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e000      	b.n	8001e18 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3718      	adds	r7, #24
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40021000 	.word	0x40021000
 8001e24:	40022000 	.word	0x40022000

08001e28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e30:	2300      	movs	r3, #0
 8001e32:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e34:	2300      	movs	r3, #0
 8001e36:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d041      	beq.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e48:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001e4c:	d02a      	beq.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001e4e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001e52:	d824      	bhi.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001e54:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001e58:	d008      	beq.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001e5a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001e5e:	d81e      	bhi.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d00a      	beq.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001e64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e68:	d010      	beq.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001e6a:	e018      	b.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e6c:	4b86      	ldr	r3, [pc, #536]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	4a85      	ldr	r2, [pc, #532]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e76:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e78:	e015      	b.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	3304      	adds	r3, #4
 8001e7e:	2100      	movs	r1, #0
 8001e80:	4618      	mov	r0, r3
 8001e82:	f000 fabb 	bl	80023fc <RCCEx_PLLSAI1_Config>
 8001e86:	4603      	mov	r3, r0
 8001e88:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e8a:	e00c      	b.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	3320      	adds	r3, #32
 8001e90:	2100      	movs	r1, #0
 8001e92:	4618      	mov	r0, r3
 8001e94:	f000 fba6 	bl	80025e4 <RCCEx_PLLSAI2_Config>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e9c:	e003      	b.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	74fb      	strb	r3, [r7, #19]
      break;
 8001ea2:	e000      	b.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001ea4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001ea6:	7cfb      	ldrb	r3, [r7, #19]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d10b      	bne.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001eac:	4b76      	ldr	r3, [pc, #472]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eb2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001eba:	4973      	ldr	r1, [pc, #460]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001ec2:	e001      	b.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ec4:	7cfb      	ldrb	r3, [r7, #19]
 8001ec6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d041      	beq.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ed8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001edc:	d02a      	beq.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001ede:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001ee2:	d824      	bhi.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001ee4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ee8:	d008      	beq.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001eea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001eee:	d81e      	bhi.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d00a      	beq.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001ef4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ef8:	d010      	beq.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001efa:	e018      	b.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001efc:	4b62      	ldr	r3, [pc, #392]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	4a61      	ldr	r2, [pc, #388]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f06:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f08:	e015      	b.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	3304      	adds	r3, #4
 8001f0e:	2100      	movs	r1, #0
 8001f10:	4618      	mov	r0, r3
 8001f12:	f000 fa73 	bl	80023fc <RCCEx_PLLSAI1_Config>
 8001f16:	4603      	mov	r3, r0
 8001f18:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f1a:	e00c      	b.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	3320      	adds	r3, #32
 8001f20:	2100      	movs	r1, #0
 8001f22:	4618      	mov	r0, r3
 8001f24:	f000 fb5e 	bl	80025e4 <RCCEx_PLLSAI2_Config>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f2c:	e003      	b.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	74fb      	strb	r3, [r7, #19]
      break;
 8001f32:	e000      	b.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001f34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f36:	7cfb      	ldrb	r3, [r7, #19]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d10b      	bne.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001f3c:	4b52      	ldr	r3, [pc, #328]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f42:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f4a:	494f      	ldr	r1, [pc, #316]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001f52:	e001      	b.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f54:	7cfb      	ldrb	r3, [r7, #19]
 8001f56:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f000 80a0 	beq.w	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f66:	2300      	movs	r3, #0
 8001f68:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f6a:	4b47      	ldr	r3, [pc, #284]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d101      	bne.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001f76:	2301      	movs	r3, #1
 8001f78:	e000      	b.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d00d      	beq.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f80:	4b41      	ldr	r3, [pc, #260]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f84:	4a40      	ldr	r2, [pc, #256]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f8a:	6593      	str	r3, [r2, #88]	; 0x58
 8001f8c:	4b3e      	ldr	r3, [pc, #248]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f94:	60bb      	str	r3, [r7, #8]
 8001f96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f9c:	4b3b      	ldr	r3, [pc, #236]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a3a      	ldr	r2, [pc, #232]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001fa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001fa8:	f7fe fdee 	bl	8000b88 <HAL_GetTick>
 8001fac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001fae:	e009      	b.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fb0:	f7fe fdea 	bl	8000b88 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d902      	bls.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	74fb      	strb	r3, [r7, #19]
        break;
 8001fc2:	e005      	b.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001fc4:	4b31      	ldr	r3, [pc, #196]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d0ef      	beq.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001fd0:	7cfb      	ldrb	r3, [r7, #19]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d15c      	bne.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001fd6:	4b2c      	ldr	r3, [pc, #176]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fe0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d01f      	beq.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fee:	697a      	ldr	r2, [r7, #20]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d019      	beq.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001ff4:	4b24      	ldr	r3, [pc, #144]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ffa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ffe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002000:	4b21      	ldr	r3, [pc, #132]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002006:	4a20      	ldr	r2, [pc, #128]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800200c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002010:	4b1d      	ldr	r3, [pc, #116]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002016:	4a1c      	ldr	r2, [pc, #112]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002018:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800201c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002020:	4a19      	ldr	r2, [pc, #100]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	2b00      	cmp	r3, #0
 8002030:	d016      	beq.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002032:	f7fe fda9 	bl	8000b88 <HAL_GetTick>
 8002036:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002038:	e00b      	b.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800203a:	f7fe fda5 	bl	8000b88 <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	f241 3288 	movw	r2, #5000	; 0x1388
 8002048:	4293      	cmp	r3, r2
 800204a:	d902      	bls.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	74fb      	strb	r3, [r7, #19]
            break;
 8002050:	e006      	b.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002052:	4b0d      	ldr	r3, [pc, #52]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d0ec      	beq.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002060:	7cfb      	ldrb	r3, [r7, #19]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d10c      	bne.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002066:	4b08      	ldr	r3, [pc, #32]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800206c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002076:	4904      	ldr	r1, [pc, #16]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002078:	4313      	orrs	r3, r2
 800207a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800207e:	e009      	b.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002080:	7cfb      	ldrb	r3, [r7, #19]
 8002082:	74bb      	strb	r3, [r7, #18]
 8002084:	e006      	b.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002086:	bf00      	nop
 8002088:	40021000 	.word	0x40021000
 800208c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002090:	7cfb      	ldrb	r3, [r7, #19]
 8002092:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002094:	7c7b      	ldrb	r3, [r7, #17]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d105      	bne.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800209a:	4b9e      	ldr	r3, [pc, #632]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800209c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209e:	4a9d      	ldr	r2, [pc, #628]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020a4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d00a      	beq.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020b2:	4b98      	ldr	r3, [pc, #608]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020b8:	f023 0203 	bic.w	r2, r3, #3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c0:	4994      	ldr	r1, [pc, #592]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d00a      	beq.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020d4:	4b8f      	ldr	r3, [pc, #572]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020da:	f023 020c 	bic.w	r2, r3, #12
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020e2:	498c      	ldr	r1, [pc, #560]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020e4:	4313      	orrs	r3, r2
 80020e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0304 	and.w	r3, r3, #4
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d00a      	beq.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80020f6:	4b87      	ldr	r3, [pc, #540]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020fc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002104:	4983      	ldr	r1, [pc, #524]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002106:	4313      	orrs	r3, r2
 8002108:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0308 	and.w	r3, r3, #8
 8002114:	2b00      	cmp	r3, #0
 8002116:	d00a      	beq.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002118:	4b7e      	ldr	r3, [pc, #504]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800211a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800211e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002126:	497b      	ldr	r1, [pc, #492]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002128:	4313      	orrs	r3, r2
 800212a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0310 	and.w	r3, r3, #16
 8002136:	2b00      	cmp	r3, #0
 8002138:	d00a      	beq.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800213a:	4b76      	ldr	r3, [pc, #472]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800213c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002140:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002148:	4972      	ldr	r1, [pc, #456]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800214a:	4313      	orrs	r3, r2
 800214c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0320 	and.w	r3, r3, #32
 8002158:	2b00      	cmp	r3, #0
 800215a:	d00a      	beq.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800215c:	4b6d      	ldr	r3, [pc, #436]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800215e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002162:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800216a:	496a      	ldr	r1, [pc, #424]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800216c:	4313      	orrs	r3, r2
 800216e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800217a:	2b00      	cmp	r3, #0
 800217c:	d00a      	beq.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800217e:	4b65      	ldr	r3, [pc, #404]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002180:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002184:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800218c:	4961      	ldr	r1, [pc, #388]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800218e:	4313      	orrs	r3, r2
 8002190:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800219c:	2b00      	cmp	r3, #0
 800219e:	d00a      	beq.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80021a0:	4b5c      	ldr	r3, [pc, #368]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021ae:	4959      	ldr	r1, [pc, #356]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d00a      	beq.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021c2:	4b54      	ldr	r3, [pc, #336]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021d0:	4950      	ldr	r1, [pc, #320]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d00a      	beq.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80021e4:	4b4b      	ldr	r3, [pc, #300]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f2:	4948      	ldr	r1, [pc, #288]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002202:	2b00      	cmp	r3, #0
 8002204:	d00a      	beq.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002206:	4b43      	ldr	r3, [pc, #268]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800220c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002214:	493f      	ldr	r1, [pc, #252]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002216:	4313      	orrs	r3, r2
 8002218:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d028      	beq.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002228:	4b3a      	ldr	r3, [pc, #232]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800222a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800222e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002236:	4937      	ldr	r1, [pc, #220]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002238:	4313      	orrs	r3, r2
 800223a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002242:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002246:	d106      	bne.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002248:	4b32      	ldr	r3, [pc, #200]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	4a31      	ldr	r2, [pc, #196]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800224e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002252:	60d3      	str	r3, [r2, #12]
 8002254:	e011      	b.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800225a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800225e:	d10c      	bne.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	3304      	adds	r3, #4
 8002264:	2101      	movs	r1, #1
 8002266:	4618      	mov	r0, r3
 8002268:	f000 f8c8 	bl	80023fc <RCCEx_PLLSAI1_Config>
 800226c:	4603      	mov	r3, r0
 800226e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002270:	7cfb      	ldrb	r3, [r7, #19]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002276:	7cfb      	ldrb	r3, [r7, #19]
 8002278:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d028      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002286:	4b23      	ldr	r3, [pc, #140]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800228c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002294:	491f      	ldr	r1, [pc, #124]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002296:	4313      	orrs	r3, r2
 8002298:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022a4:	d106      	bne.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022a6:	4b1b      	ldr	r3, [pc, #108]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	4a1a      	ldr	r2, [pc, #104]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022b0:	60d3      	str	r3, [r2, #12]
 80022b2:	e011      	b.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022bc:	d10c      	bne.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	3304      	adds	r3, #4
 80022c2:	2101      	movs	r1, #1
 80022c4:	4618      	mov	r0, r3
 80022c6:	f000 f899 	bl	80023fc <RCCEx_PLLSAI1_Config>
 80022ca:	4603      	mov	r3, r0
 80022cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022ce:	7cfb      	ldrb	r3, [r7, #19]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80022d4:	7cfb      	ldrb	r3, [r7, #19]
 80022d6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d02b      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80022e4:	4b0b      	ldr	r3, [pc, #44]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022f2:	4908      	ldr	r1, [pc, #32]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002302:	d109      	bne.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002304:	4b03      	ldr	r3, [pc, #12]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	4a02      	ldr	r2, [pc, #8]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800230a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800230e:	60d3      	str	r3, [r2, #12]
 8002310:	e014      	b.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002312:	bf00      	nop
 8002314:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800231c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002320:	d10c      	bne.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	3304      	adds	r3, #4
 8002326:	2101      	movs	r1, #1
 8002328:	4618      	mov	r0, r3
 800232a:	f000 f867 	bl	80023fc <RCCEx_PLLSAI1_Config>
 800232e:	4603      	mov	r3, r0
 8002330:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002332:	7cfb      	ldrb	r3, [r7, #19]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002338:	7cfb      	ldrb	r3, [r7, #19]
 800233a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d02f      	beq.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002348:	4b2b      	ldr	r3, [pc, #172]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800234a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800234e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002356:	4928      	ldr	r1, [pc, #160]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002358:	4313      	orrs	r3, r2
 800235a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002362:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002366:	d10d      	bne.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	3304      	adds	r3, #4
 800236c:	2102      	movs	r1, #2
 800236e:	4618      	mov	r0, r3
 8002370:	f000 f844 	bl	80023fc <RCCEx_PLLSAI1_Config>
 8002374:	4603      	mov	r3, r0
 8002376:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002378:	7cfb      	ldrb	r3, [r7, #19]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d014      	beq.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800237e:	7cfb      	ldrb	r3, [r7, #19]
 8002380:	74bb      	strb	r3, [r7, #18]
 8002382:	e011      	b.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002388:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800238c:	d10c      	bne.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	3320      	adds	r3, #32
 8002392:	2102      	movs	r1, #2
 8002394:	4618      	mov	r0, r3
 8002396:	f000 f925 	bl	80025e4 <RCCEx_PLLSAI2_Config>
 800239a:	4603      	mov	r3, r0
 800239c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800239e:	7cfb      	ldrb	r3, [r7, #19]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80023a4:	7cfb      	ldrb	r3, [r7, #19]
 80023a6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d00a      	beq.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80023b4:	4b10      	ldr	r3, [pc, #64]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ba:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023c2:	490d      	ldr	r1, [pc, #52]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d00b      	beq.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80023d6:	4b08      	ldr	r3, [pc, #32]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023e6:	4904      	ldr	r1, [pc, #16]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80023ee:	7cbb      	ldrb	r3, [r7, #18]
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3718      	adds	r7, #24
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40021000 	.word	0x40021000

080023fc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002406:	2300      	movs	r3, #0
 8002408:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800240a:	4b75      	ldr	r3, [pc, #468]	; (80025e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	f003 0303 	and.w	r3, r3, #3
 8002412:	2b00      	cmp	r3, #0
 8002414:	d018      	beq.n	8002448 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002416:	4b72      	ldr	r3, [pc, #456]	; (80025e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	f003 0203 	and.w	r2, r3, #3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	429a      	cmp	r2, r3
 8002424:	d10d      	bne.n	8002442 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
       ||
 800242a:	2b00      	cmp	r3, #0
 800242c:	d009      	beq.n	8002442 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800242e:	4b6c      	ldr	r3, [pc, #432]	; (80025e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	091b      	lsrs	r3, r3, #4
 8002434:	f003 0307 	and.w	r3, r3, #7
 8002438:	1c5a      	adds	r2, r3, #1
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
       ||
 800243e:	429a      	cmp	r2, r3
 8002440:	d047      	beq.n	80024d2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	73fb      	strb	r3, [r7, #15]
 8002446:	e044      	b.n	80024d2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2b03      	cmp	r3, #3
 800244e:	d018      	beq.n	8002482 <RCCEx_PLLSAI1_Config+0x86>
 8002450:	2b03      	cmp	r3, #3
 8002452:	d825      	bhi.n	80024a0 <RCCEx_PLLSAI1_Config+0xa4>
 8002454:	2b01      	cmp	r3, #1
 8002456:	d002      	beq.n	800245e <RCCEx_PLLSAI1_Config+0x62>
 8002458:	2b02      	cmp	r3, #2
 800245a:	d009      	beq.n	8002470 <RCCEx_PLLSAI1_Config+0x74>
 800245c:	e020      	b.n	80024a0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800245e:	4b60      	ldr	r3, [pc, #384]	; (80025e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d11d      	bne.n	80024a6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800246e:	e01a      	b.n	80024a6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002470:	4b5b      	ldr	r3, [pc, #364]	; (80025e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002478:	2b00      	cmp	r3, #0
 800247a:	d116      	bne.n	80024aa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002480:	e013      	b.n	80024aa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002482:	4b57      	ldr	r3, [pc, #348]	; (80025e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d10f      	bne.n	80024ae <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800248e:	4b54      	ldr	r3, [pc, #336]	; (80025e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d109      	bne.n	80024ae <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800249e:	e006      	b.n	80024ae <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	73fb      	strb	r3, [r7, #15]
      break;
 80024a4:	e004      	b.n	80024b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024a6:	bf00      	nop
 80024a8:	e002      	b.n	80024b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024aa:	bf00      	nop
 80024ac:	e000      	b.n	80024b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80024b0:	7bfb      	ldrb	r3, [r7, #15]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d10d      	bne.n	80024d2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80024b6:	4b4a      	ldr	r3, [pc, #296]	; (80025e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6819      	ldr	r1, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	3b01      	subs	r3, #1
 80024c8:	011b      	lsls	r3, r3, #4
 80024ca:	430b      	orrs	r3, r1
 80024cc:	4944      	ldr	r1, [pc, #272]	; (80025e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80024d2:	7bfb      	ldrb	r3, [r7, #15]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d17d      	bne.n	80025d4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80024d8:	4b41      	ldr	r3, [pc, #260]	; (80025e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a40      	ldr	r2, [pc, #256]	; (80025e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80024e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024e4:	f7fe fb50 	bl	8000b88 <HAL_GetTick>
 80024e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024ea:	e009      	b.n	8002500 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80024ec:	f7fe fb4c 	bl	8000b88 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d902      	bls.n	8002500 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	73fb      	strb	r3, [r7, #15]
        break;
 80024fe:	e005      	b.n	800250c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002500:	4b37      	ldr	r3, [pc, #220]	; (80025e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d1ef      	bne.n	80024ec <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800250c:	7bfb      	ldrb	r3, [r7, #15]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d160      	bne.n	80025d4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d111      	bne.n	800253c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002518:	4b31      	ldr	r3, [pc, #196]	; (80025e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002520:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	6892      	ldr	r2, [r2, #8]
 8002528:	0211      	lsls	r1, r2, #8
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	68d2      	ldr	r2, [r2, #12]
 800252e:	0912      	lsrs	r2, r2, #4
 8002530:	0452      	lsls	r2, r2, #17
 8002532:	430a      	orrs	r2, r1
 8002534:	492a      	ldr	r1, [pc, #168]	; (80025e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002536:	4313      	orrs	r3, r2
 8002538:	610b      	str	r3, [r1, #16]
 800253a:	e027      	b.n	800258c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d112      	bne.n	8002568 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002542:	4b27      	ldr	r3, [pc, #156]	; (80025e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800254a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	6892      	ldr	r2, [r2, #8]
 8002552:	0211      	lsls	r1, r2, #8
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	6912      	ldr	r2, [r2, #16]
 8002558:	0852      	lsrs	r2, r2, #1
 800255a:	3a01      	subs	r2, #1
 800255c:	0552      	lsls	r2, r2, #21
 800255e:	430a      	orrs	r2, r1
 8002560:	491f      	ldr	r1, [pc, #124]	; (80025e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002562:	4313      	orrs	r3, r2
 8002564:	610b      	str	r3, [r1, #16]
 8002566:	e011      	b.n	800258c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002568:	4b1d      	ldr	r3, [pc, #116]	; (80025e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800256a:	691b      	ldr	r3, [r3, #16]
 800256c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002570:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	6892      	ldr	r2, [r2, #8]
 8002578:	0211      	lsls	r1, r2, #8
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	6952      	ldr	r2, [r2, #20]
 800257e:	0852      	lsrs	r2, r2, #1
 8002580:	3a01      	subs	r2, #1
 8002582:	0652      	lsls	r2, r2, #25
 8002584:	430a      	orrs	r2, r1
 8002586:	4916      	ldr	r1, [pc, #88]	; (80025e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002588:	4313      	orrs	r3, r2
 800258a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800258c:	4b14      	ldr	r3, [pc, #80]	; (80025e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a13      	ldr	r2, [pc, #76]	; (80025e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002592:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002596:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002598:	f7fe faf6 	bl	8000b88 <HAL_GetTick>
 800259c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800259e:	e009      	b.n	80025b4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025a0:	f7fe faf2 	bl	8000b88 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d902      	bls.n	80025b4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	73fb      	strb	r3, [r7, #15]
          break;
 80025b2:	e005      	b.n	80025c0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80025b4:	4b0a      	ldr	r3, [pc, #40]	; (80025e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d0ef      	beq.n	80025a0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80025c0:	7bfb      	ldrb	r3, [r7, #15]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d106      	bne.n	80025d4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80025c6:	4b06      	ldr	r3, [pc, #24]	; (80025e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025c8:	691a      	ldr	r2, [r3, #16]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	4904      	ldr	r1, [pc, #16]	; (80025e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80025d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3710      	adds	r7, #16
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	40021000 	.word	0x40021000

080025e4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80025ee:	2300      	movs	r3, #0
 80025f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80025f2:	4b6a      	ldr	r3, [pc, #424]	; (800279c <RCCEx_PLLSAI2_Config+0x1b8>)
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	f003 0303 	and.w	r3, r3, #3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d018      	beq.n	8002630 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80025fe:	4b67      	ldr	r3, [pc, #412]	; (800279c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	f003 0203 	and.w	r2, r3, #3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	429a      	cmp	r2, r3
 800260c:	d10d      	bne.n	800262a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
       ||
 8002612:	2b00      	cmp	r3, #0
 8002614:	d009      	beq.n	800262a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002616:	4b61      	ldr	r3, [pc, #388]	; (800279c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	091b      	lsrs	r3, r3, #4
 800261c:	f003 0307 	and.w	r3, r3, #7
 8002620:	1c5a      	adds	r2, r3, #1
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
       ||
 8002626:	429a      	cmp	r2, r3
 8002628:	d047      	beq.n	80026ba <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	73fb      	strb	r3, [r7, #15]
 800262e:	e044      	b.n	80026ba <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2b03      	cmp	r3, #3
 8002636:	d018      	beq.n	800266a <RCCEx_PLLSAI2_Config+0x86>
 8002638:	2b03      	cmp	r3, #3
 800263a:	d825      	bhi.n	8002688 <RCCEx_PLLSAI2_Config+0xa4>
 800263c:	2b01      	cmp	r3, #1
 800263e:	d002      	beq.n	8002646 <RCCEx_PLLSAI2_Config+0x62>
 8002640:	2b02      	cmp	r3, #2
 8002642:	d009      	beq.n	8002658 <RCCEx_PLLSAI2_Config+0x74>
 8002644:	e020      	b.n	8002688 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002646:	4b55      	ldr	r3, [pc, #340]	; (800279c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d11d      	bne.n	800268e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002656:	e01a      	b.n	800268e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002658:	4b50      	ldr	r3, [pc, #320]	; (800279c <RCCEx_PLLSAI2_Config+0x1b8>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002660:	2b00      	cmp	r3, #0
 8002662:	d116      	bne.n	8002692 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002668:	e013      	b.n	8002692 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800266a:	4b4c      	ldr	r3, [pc, #304]	; (800279c <RCCEx_PLLSAI2_Config+0x1b8>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d10f      	bne.n	8002696 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002676:	4b49      	ldr	r3, [pc, #292]	; (800279c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d109      	bne.n	8002696 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002686:	e006      	b.n	8002696 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	73fb      	strb	r3, [r7, #15]
      break;
 800268c:	e004      	b.n	8002698 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800268e:	bf00      	nop
 8002690:	e002      	b.n	8002698 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002692:	bf00      	nop
 8002694:	e000      	b.n	8002698 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002696:	bf00      	nop
    }

    if(status == HAL_OK)
 8002698:	7bfb      	ldrb	r3, [r7, #15]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d10d      	bne.n	80026ba <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800269e:	4b3f      	ldr	r3, [pc, #252]	; (800279c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6819      	ldr	r1, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	3b01      	subs	r3, #1
 80026b0:	011b      	lsls	r3, r3, #4
 80026b2:	430b      	orrs	r3, r1
 80026b4:	4939      	ldr	r1, [pc, #228]	; (800279c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80026ba:	7bfb      	ldrb	r3, [r7, #15]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d167      	bne.n	8002790 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80026c0:	4b36      	ldr	r3, [pc, #216]	; (800279c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a35      	ldr	r2, [pc, #212]	; (800279c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026cc:	f7fe fa5c 	bl	8000b88 <HAL_GetTick>
 80026d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80026d2:	e009      	b.n	80026e8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80026d4:	f7fe fa58 	bl	8000b88 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d902      	bls.n	80026e8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	73fb      	strb	r3, [r7, #15]
        break;
 80026e6:	e005      	b.n	80026f4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80026e8:	4b2c      	ldr	r3, [pc, #176]	; (800279c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d1ef      	bne.n	80026d4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80026f4:	7bfb      	ldrb	r3, [r7, #15]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d14a      	bne.n	8002790 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d111      	bne.n	8002724 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002700:	4b26      	ldr	r3, [pc, #152]	; (800279c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002702:	695b      	ldr	r3, [r3, #20]
 8002704:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002708:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	6892      	ldr	r2, [r2, #8]
 8002710:	0211      	lsls	r1, r2, #8
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	68d2      	ldr	r2, [r2, #12]
 8002716:	0912      	lsrs	r2, r2, #4
 8002718:	0452      	lsls	r2, r2, #17
 800271a:	430a      	orrs	r2, r1
 800271c:	491f      	ldr	r1, [pc, #124]	; (800279c <RCCEx_PLLSAI2_Config+0x1b8>)
 800271e:	4313      	orrs	r3, r2
 8002720:	614b      	str	r3, [r1, #20]
 8002722:	e011      	b.n	8002748 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002724:	4b1d      	ldr	r3, [pc, #116]	; (800279c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002726:	695b      	ldr	r3, [r3, #20]
 8002728:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800272c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	6892      	ldr	r2, [r2, #8]
 8002734:	0211      	lsls	r1, r2, #8
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	6912      	ldr	r2, [r2, #16]
 800273a:	0852      	lsrs	r2, r2, #1
 800273c:	3a01      	subs	r2, #1
 800273e:	0652      	lsls	r2, r2, #25
 8002740:	430a      	orrs	r2, r1
 8002742:	4916      	ldr	r1, [pc, #88]	; (800279c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002744:	4313      	orrs	r3, r2
 8002746:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002748:	4b14      	ldr	r3, [pc, #80]	; (800279c <RCCEx_PLLSAI2_Config+0x1b8>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a13      	ldr	r2, [pc, #76]	; (800279c <RCCEx_PLLSAI2_Config+0x1b8>)
 800274e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002752:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002754:	f7fe fa18 	bl	8000b88 <HAL_GetTick>
 8002758:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800275a:	e009      	b.n	8002770 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800275c:	f7fe fa14 	bl	8000b88 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d902      	bls.n	8002770 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	73fb      	strb	r3, [r7, #15]
          break;
 800276e:	e005      	b.n	800277c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002770:	4b0a      	ldr	r3, [pc, #40]	; (800279c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d0ef      	beq.n	800275c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800277c:	7bfb      	ldrb	r3, [r7, #15]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d106      	bne.n	8002790 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002782:	4b06      	ldr	r3, [pc, #24]	; (800279c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002784:	695a      	ldr	r2, [r3, #20]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	4904      	ldr	r1, [pc, #16]	; (800279c <RCCEx_PLLSAI2_Config+0x1b8>)
 800278c:	4313      	orrs	r3, r2
 800278e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002790:	7bfb      	ldrb	r3, [r7, #15]
}
 8002792:	4618      	mov	r0, r3
 8002794:	3710      	adds	r7, #16
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	40021000 	.word	0x40021000

080027a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e049      	b.n	8002846 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d106      	bne.n	80027cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f7fe f82c 	bl	8000824 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2202      	movs	r2, #2
 80027d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	3304      	adds	r3, #4
 80027dc:	4619      	mov	r1, r3
 80027de:	4610      	mov	r0, r2
 80027e0:	f000 fab6 	bl	8002d50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
	...

08002850 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002850:	b480      	push	{r7}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800285e:	b2db      	uxtb	r3, r3
 8002860:	2b01      	cmp	r3, #1
 8002862:	d001      	beq.n	8002868 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e04f      	b.n	8002908 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2202      	movs	r2, #2
 800286c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68da      	ldr	r2, [r3, #12]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f042 0201 	orr.w	r2, r2, #1
 800287e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a23      	ldr	r2, [pc, #140]	; (8002914 <HAL_TIM_Base_Start_IT+0xc4>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d01d      	beq.n	80028c6 <HAL_TIM_Base_Start_IT+0x76>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002892:	d018      	beq.n	80028c6 <HAL_TIM_Base_Start_IT+0x76>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a1f      	ldr	r2, [pc, #124]	; (8002918 <HAL_TIM_Base_Start_IT+0xc8>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d013      	beq.n	80028c6 <HAL_TIM_Base_Start_IT+0x76>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a1e      	ldr	r2, [pc, #120]	; (800291c <HAL_TIM_Base_Start_IT+0xcc>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d00e      	beq.n	80028c6 <HAL_TIM_Base_Start_IT+0x76>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a1c      	ldr	r2, [pc, #112]	; (8002920 <HAL_TIM_Base_Start_IT+0xd0>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d009      	beq.n	80028c6 <HAL_TIM_Base_Start_IT+0x76>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a1b      	ldr	r2, [pc, #108]	; (8002924 <HAL_TIM_Base_Start_IT+0xd4>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d004      	beq.n	80028c6 <HAL_TIM_Base_Start_IT+0x76>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a19      	ldr	r2, [pc, #100]	; (8002928 <HAL_TIM_Base_Start_IT+0xd8>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d115      	bne.n	80028f2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	689a      	ldr	r2, [r3, #8]
 80028cc:	4b17      	ldr	r3, [pc, #92]	; (800292c <HAL_TIM_Base_Start_IT+0xdc>)
 80028ce:	4013      	ands	r3, r2
 80028d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2b06      	cmp	r3, #6
 80028d6:	d015      	beq.n	8002904 <HAL_TIM_Base_Start_IT+0xb4>
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028de:	d011      	beq.n	8002904 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f042 0201 	orr.w	r2, r2, #1
 80028ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028f0:	e008      	b.n	8002904 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f042 0201 	orr.w	r2, r2, #1
 8002900:	601a      	str	r2, [r3, #0]
 8002902:	e000      	b.n	8002906 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002904:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	3714      	adds	r7, #20
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr
 8002914:	40012c00 	.word	0x40012c00
 8002918:	40000400 	.word	0x40000400
 800291c:	40000800 	.word	0x40000800
 8002920:	40000c00 	.word	0x40000c00
 8002924:	40013400 	.word	0x40013400
 8002928:	40014000 	.word	0x40014000
 800292c:	00010007 	.word	0x00010007

08002930 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b02      	cmp	r3, #2
 8002944:	d122      	bne.n	800298c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	f003 0302 	and.w	r3, r3, #2
 8002950:	2b02      	cmp	r3, #2
 8002952:	d11b      	bne.n	800298c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f06f 0202 	mvn.w	r2, #2
 800295c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2201      	movs	r2, #1
 8002962:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	f003 0303 	and.w	r3, r3, #3
 800296e:	2b00      	cmp	r3, #0
 8002970:	d003      	beq.n	800297a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 f9ce 	bl	8002d14 <HAL_TIM_IC_CaptureCallback>
 8002978:	e005      	b.n	8002986 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 f9c0 	bl	8002d00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f000 f9d1 	bl	8002d28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	f003 0304 	and.w	r3, r3, #4
 8002996:	2b04      	cmp	r3, #4
 8002998:	d122      	bne.n	80029e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	f003 0304 	and.w	r3, r3, #4
 80029a4:	2b04      	cmp	r3, #4
 80029a6:	d11b      	bne.n	80029e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f06f 0204 	mvn.w	r2, #4
 80029b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2202      	movs	r2, #2
 80029b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d003      	beq.n	80029ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 f9a4 	bl	8002d14 <HAL_TIM_IC_CaptureCallback>
 80029cc:	e005      	b.n	80029da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 f996 	bl	8002d00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f000 f9a7 	bl	8002d28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	f003 0308 	and.w	r3, r3, #8
 80029ea:	2b08      	cmp	r3, #8
 80029ec:	d122      	bne.n	8002a34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	f003 0308 	and.w	r3, r3, #8
 80029f8:	2b08      	cmp	r3, #8
 80029fa:	d11b      	bne.n	8002a34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f06f 0208 	mvn.w	r2, #8
 8002a04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2204      	movs	r2, #4
 8002a0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	69db      	ldr	r3, [r3, #28]
 8002a12:	f003 0303 	and.w	r3, r3, #3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d003      	beq.n	8002a22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 f97a 	bl	8002d14 <HAL_TIM_IC_CaptureCallback>
 8002a20:	e005      	b.n	8002a2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 f96c 	bl	8002d00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f000 f97d 	bl	8002d28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	f003 0310 	and.w	r3, r3, #16
 8002a3e:	2b10      	cmp	r3, #16
 8002a40:	d122      	bne.n	8002a88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	f003 0310 	and.w	r3, r3, #16
 8002a4c:	2b10      	cmp	r3, #16
 8002a4e:	d11b      	bne.n	8002a88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f06f 0210 	mvn.w	r2, #16
 8002a58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2208      	movs	r2, #8
 8002a5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	69db      	ldr	r3, [r3, #28]
 8002a66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d003      	beq.n	8002a76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 f950 	bl	8002d14 <HAL_TIM_IC_CaptureCallback>
 8002a74:	e005      	b.n	8002a82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 f942 	bl	8002d00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f000 f953 	bl	8002d28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d10e      	bne.n	8002ab4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	f003 0301 	and.w	r3, r3, #1
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d107      	bne.n	8002ab4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f06f 0201 	mvn.w	r2, #1
 8002aac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f7fd fe7c 	bl	80007ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002abe:	2b80      	cmp	r3, #128	; 0x80
 8002ac0:	d10e      	bne.n	8002ae0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002acc:	2b80      	cmp	r3, #128	; 0x80
 8002ace:	d107      	bne.n	8002ae0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ad8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 fafe 	bl	80030dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002aee:	d10e      	bne.n	8002b0e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002afa:	2b80      	cmp	r3, #128	; 0x80
 8002afc:	d107      	bne.n	8002b0e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002b06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f000 faf1 	bl	80030f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	691b      	ldr	r3, [r3, #16]
 8002b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b18:	2b40      	cmp	r3, #64	; 0x40
 8002b1a:	d10e      	bne.n	8002b3a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b26:	2b40      	cmp	r3, #64	; 0x40
 8002b28:	d107      	bne.n	8002b3a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f000 f901 	bl	8002d3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	f003 0320 	and.w	r3, r3, #32
 8002b44:	2b20      	cmp	r3, #32
 8002b46:	d10e      	bne.n	8002b66 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	f003 0320 	and.w	r3, r3, #32
 8002b52:	2b20      	cmp	r3, #32
 8002b54:	d107      	bne.n	8002b66 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f06f 0220 	mvn.w	r2, #32
 8002b5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f000 fab1 	bl	80030c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b66:	bf00      	nop
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b084      	sub	sp, #16
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
 8002b76:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d101      	bne.n	8002b8a <HAL_TIM_ConfigClockSource+0x1c>
 8002b86:	2302      	movs	r3, #2
 8002b88:	e0b6      	b.n	8002cf8 <HAL_TIM_ConfigClockSource+0x18a>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2202      	movs	r2, #2
 8002b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ba8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002bac:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bb4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68ba      	ldr	r2, [r7, #8]
 8002bbc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bc6:	d03e      	beq.n	8002c46 <HAL_TIM_ConfigClockSource+0xd8>
 8002bc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bcc:	f200 8087 	bhi.w	8002cde <HAL_TIM_ConfigClockSource+0x170>
 8002bd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bd4:	f000 8086 	beq.w	8002ce4 <HAL_TIM_ConfigClockSource+0x176>
 8002bd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bdc:	d87f      	bhi.n	8002cde <HAL_TIM_ConfigClockSource+0x170>
 8002bde:	2b70      	cmp	r3, #112	; 0x70
 8002be0:	d01a      	beq.n	8002c18 <HAL_TIM_ConfigClockSource+0xaa>
 8002be2:	2b70      	cmp	r3, #112	; 0x70
 8002be4:	d87b      	bhi.n	8002cde <HAL_TIM_ConfigClockSource+0x170>
 8002be6:	2b60      	cmp	r3, #96	; 0x60
 8002be8:	d050      	beq.n	8002c8c <HAL_TIM_ConfigClockSource+0x11e>
 8002bea:	2b60      	cmp	r3, #96	; 0x60
 8002bec:	d877      	bhi.n	8002cde <HAL_TIM_ConfigClockSource+0x170>
 8002bee:	2b50      	cmp	r3, #80	; 0x50
 8002bf0:	d03c      	beq.n	8002c6c <HAL_TIM_ConfigClockSource+0xfe>
 8002bf2:	2b50      	cmp	r3, #80	; 0x50
 8002bf4:	d873      	bhi.n	8002cde <HAL_TIM_ConfigClockSource+0x170>
 8002bf6:	2b40      	cmp	r3, #64	; 0x40
 8002bf8:	d058      	beq.n	8002cac <HAL_TIM_ConfigClockSource+0x13e>
 8002bfa:	2b40      	cmp	r3, #64	; 0x40
 8002bfc:	d86f      	bhi.n	8002cde <HAL_TIM_ConfigClockSource+0x170>
 8002bfe:	2b30      	cmp	r3, #48	; 0x30
 8002c00:	d064      	beq.n	8002ccc <HAL_TIM_ConfigClockSource+0x15e>
 8002c02:	2b30      	cmp	r3, #48	; 0x30
 8002c04:	d86b      	bhi.n	8002cde <HAL_TIM_ConfigClockSource+0x170>
 8002c06:	2b20      	cmp	r3, #32
 8002c08:	d060      	beq.n	8002ccc <HAL_TIM_ConfigClockSource+0x15e>
 8002c0a:	2b20      	cmp	r3, #32
 8002c0c:	d867      	bhi.n	8002cde <HAL_TIM_ConfigClockSource+0x170>
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d05c      	beq.n	8002ccc <HAL_TIM_ConfigClockSource+0x15e>
 8002c12:	2b10      	cmp	r3, #16
 8002c14:	d05a      	beq.n	8002ccc <HAL_TIM_ConfigClockSource+0x15e>
 8002c16:	e062      	b.n	8002cde <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c28:	f000 f9a6 	bl	8002f78 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c3a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68ba      	ldr	r2, [r7, #8]
 8002c42:	609a      	str	r2, [r3, #8]
      break;
 8002c44:	e04f      	b.n	8002ce6 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c56:	f000 f98f 	bl	8002f78 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	689a      	ldr	r2, [r3, #8]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c68:	609a      	str	r2, [r3, #8]
      break;
 8002c6a:	e03c      	b.n	8002ce6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c78:	461a      	mov	r2, r3
 8002c7a:	f000 f903 	bl	8002e84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2150      	movs	r1, #80	; 0x50
 8002c84:	4618      	mov	r0, r3
 8002c86:	f000 f95c 	bl	8002f42 <TIM_ITRx_SetConfig>
      break;
 8002c8a:	e02c      	b.n	8002ce6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c98:	461a      	mov	r2, r3
 8002c9a:	f000 f922 	bl	8002ee2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2160      	movs	r1, #96	; 0x60
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f000 f94c 	bl	8002f42 <TIM_ITRx_SetConfig>
      break;
 8002caa:	e01c      	b.n	8002ce6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cb8:	461a      	mov	r2, r3
 8002cba:	f000 f8e3 	bl	8002e84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2140      	movs	r1, #64	; 0x40
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f000 f93c 	bl	8002f42 <TIM_ITRx_SetConfig>
      break;
 8002cca:	e00c      	b.n	8002ce6 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	4610      	mov	r0, r2
 8002cd8:	f000 f933 	bl	8002f42 <TIM_ITRx_SetConfig>
      break;
 8002cdc:	e003      	b.n	8002ce6 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	73fb      	strb	r3, [r7, #15]
      break;
 8002ce2:	e000      	b.n	8002ce6 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002ce4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3710      	adds	r7, #16
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d1c:	bf00      	nop
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d30:	bf00      	nop
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a40      	ldr	r2, [pc, #256]	; (8002e64 <TIM_Base_SetConfig+0x114>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d013      	beq.n	8002d90 <TIM_Base_SetConfig+0x40>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d6e:	d00f      	beq.n	8002d90 <TIM_Base_SetConfig+0x40>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4a3d      	ldr	r2, [pc, #244]	; (8002e68 <TIM_Base_SetConfig+0x118>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d00b      	beq.n	8002d90 <TIM_Base_SetConfig+0x40>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a3c      	ldr	r2, [pc, #240]	; (8002e6c <TIM_Base_SetConfig+0x11c>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d007      	beq.n	8002d90 <TIM_Base_SetConfig+0x40>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4a3b      	ldr	r2, [pc, #236]	; (8002e70 <TIM_Base_SetConfig+0x120>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d003      	beq.n	8002d90 <TIM_Base_SetConfig+0x40>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4a3a      	ldr	r2, [pc, #232]	; (8002e74 <TIM_Base_SetConfig+0x124>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d108      	bne.n	8002da2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	68fa      	ldr	r2, [r7, #12]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a2f      	ldr	r2, [pc, #188]	; (8002e64 <TIM_Base_SetConfig+0x114>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d01f      	beq.n	8002dea <TIM_Base_SetConfig+0x9a>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002db0:	d01b      	beq.n	8002dea <TIM_Base_SetConfig+0x9a>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a2c      	ldr	r2, [pc, #176]	; (8002e68 <TIM_Base_SetConfig+0x118>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d017      	beq.n	8002dea <TIM_Base_SetConfig+0x9a>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a2b      	ldr	r2, [pc, #172]	; (8002e6c <TIM_Base_SetConfig+0x11c>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d013      	beq.n	8002dea <TIM_Base_SetConfig+0x9a>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a2a      	ldr	r2, [pc, #168]	; (8002e70 <TIM_Base_SetConfig+0x120>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d00f      	beq.n	8002dea <TIM_Base_SetConfig+0x9a>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a29      	ldr	r2, [pc, #164]	; (8002e74 <TIM_Base_SetConfig+0x124>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d00b      	beq.n	8002dea <TIM_Base_SetConfig+0x9a>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a28      	ldr	r2, [pc, #160]	; (8002e78 <TIM_Base_SetConfig+0x128>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d007      	beq.n	8002dea <TIM_Base_SetConfig+0x9a>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a27      	ldr	r2, [pc, #156]	; (8002e7c <TIM_Base_SetConfig+0x12c>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d003      	beq.n	8002dea <TIM_Base_SetConfig+0x9a>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a26      	ldr	r2, [pc, #152]	; (8002e80 <TIM_Base_SetConfig+0x130>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d108      	bne.n	8002dfc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002df0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	68fa      	ldr	r2, [r7, #12]
 8002e0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	689a      	ldr	r2, [r3, #8]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a10      	ldr	r2, [pc, #64]	; (8002e64 <TIM_Base_SetConfig+0x114>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d00f      	beq.n	8002e48 <TIM_Base_SetConfig+0xf8>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a12      	ldr	r2, [pc, #72]	; (8002e74 <TIM_Base_SetConfig+0x124>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d00b      	beq.n	8002e48 <TIM_Base_SetConfig+0xf8>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a11      	ldr	r2, [pc, #68]	; (8002e78 <TIM_Base_SetConfig+0x128>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d007      	beq.n	8002e48 <TIM_Base_SetConfig+0xf8>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4a10      	ldr	r2, [pc, #64]	; (8002e7c <TIM_Base_SetConfig+0x12c>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d003      	beq.n	8002e48 <TIM_Base_SetConfig+0xf8>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4a0f      	ldr	r2, [pc, #60]	; (8002e80 <TIM_Base_SetConfig+0x130>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d103      	bne.n	8002e50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	691a      	ldr	r2, [r3, #16]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	615a      	str	r2, [r3, #20]
}
 8002e56:	bf00      	nop
 8002e58:	3714      	adds	r7, #20
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	40012c00 	.word	0x40012c00
 8002e68:	40000400 	.word	0x40000400
 8002e6c:	40000800 	.word	0x40000800
 8002e70:	40000c00 	.word	0x40000c00
 8002e74:	40013400 	.word	0x40013400
 8002e78:	40014000 	.word	0x40014000
 8002e7c:	40014400 	.word	0x40014400
 8002e80:	40014800 	.word	0x40014800

08002e84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b087      	sub	sp, #28
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6a1b      	ldr	r3, [r3, #32]
 8002e94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6a1b      	ldr	r3, [r3, #32]
 8002e9a:	f023 0201 	bic.w	r2, r3, #1
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002eae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	011b      	lsls	r3, r3, #4
 8002eb4:	693a      	ldr	r2, [r7, #16]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	f023 030a 	bic.w	r3, r3, #10
 8002ec0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ec2:	697a      	ldr	r2, [r7, #20]
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	693a      	ldr	r2, [r7, #16]
 8002ece:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	697a      	ldr	r2, [r7, #20]
 8002ed4:	621a      	str	r2, [r3, #32]
}
 8002ed6:	bf00      	nop
 8002ed8:	371c      	adds	r7, #28
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr

08002ee2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	b087      	sub	sp, #28
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	60f8      	str	r0, [r7, #12]
 8002eea:	60b9      	str	r1, [r7, #8]
 8002eec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	f023 0210 	bic.w	r2, r3, #16
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6a1b      	ldr	r3, [r3, #32]
 8002f04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	031b      	lsls	r3, r3, #12
 8002f12:	697a      	ldr	r2, [r7, #20]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f1e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	011b      	lsls	r3, r3, #4
 8002f24:	693a      	ldr	r2, [r7, #16]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	697a      	ldr	r2, [r7, #20]
 8002f2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	621a      	str	r2, [r3, #32]
}
 8002f36:	bf00      	nop
 8002f38:	371c      	adds	r7, #28
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr

08002f42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f42:	b480      	push	{r7}
 8002f44:	b085      	sub	sp, #20
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
 8002f4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f5a:	683a      	ldr	r2, [r7, #0]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	f043 0307 	orr.w	r3, r3, #7
 8002f64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	68fa      	ldr	r2, [r7, #12]
 8002f6a:	609a      	str	r2, [r3, #8]
}
 8002f6c:	bf00      	nop
 8002f6e:	3714      	adds	r7, #20
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b087      	sub	sp, #28
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
 8002f84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	021a      	lsls	r2, r3, #8
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	431a      	orrs	r2, r3
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	697a      	ldr	r2, [r7, #20]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	697a      	ldr	r2, [r7, #20]
 8002faa:	609a      	str	r2, [r3, #8]
}
 8002fac:	bf00      	nop
 8002fae:	371c      	adds	r7, #28
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d101      	bne.n	8002fd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002fcc:	2302      	movs	r3, #2
 8002fce:	e068      	b.n	80030a2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2202      	movs	r2, #2
 8002fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a2e      	ldr	r2, [pc, #184]	; (80030b0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d004      	beq.n	8003004 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a2d      	ldr	r2, [pc, #180]	; (80030b4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d108      	bne.n	8003016 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800300a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	68fa      	ldr	r2, [r7, #12]
 8003012:	4313      	orrs	r3, r2
 8003014:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800301c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	4313      	orrs	r3, r2
 8003026:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68fa      	ldr	r2, [r7, #12]
 800302e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a1e      	ldr	r2, [pc, #120]	; (80030b0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d01d      	beq.n	8003076 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003042:	d018      	beq.n	8003076 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a1b      	ldr	r2, [pc, #108]	; (80030b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d013      	beq.n	8003076 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a1a      	ldr	r2, [pc, #104]	; (80030bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d00e      	beq.n	8003076 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a18      	ldr	r2, [pc, #96]	; (80030c0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d009      	beq.n	8003076 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a13      	ldr	r2, [pc, #76]	; (80030b4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d004      	beq.n	8003076 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a14      	ldr	r2, [pc, #80]	; (80030c4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d10c      	bne.n	8003090 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800307c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	68ba      	ldr	r2, [r7, #8]
 8003084:	4313      	orrs	r3, r2
 8003086:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68ba      	ldr	r2, [r7, #8]
 800308e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3714      	adds	r7, #20
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	40012c00 	.word	0x40012c00
 80030b4:	40013400 	.word	0x40013400
 80030b8:	40000400 	.word	0x40000400
 80030bc:	40000800 	.word	0x40000800
 80030c0:	40000c00 	.word	0x40000c00
 80030c4:	40014000 	.word	0x40014000

080030c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d101      	bne.n	8003116 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e040      	b.n	8003198 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800311a:	2b00      	cmp	r3, #0
 800311c:	d106      	bne.n	800312c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f7fd fbc4 	bl	80008b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2224      	movs	r2, #36	; 0x24
 8003130:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f022 0201 	bic.w	r2, r2, #1
 8003140:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 f8c0 	bl	80032c8 <UART_SetConfig>
 8003148:	4603      	mov	r3, r0
 800314a:	2b01      	cmp	r3, #1
 800314c:	d101      	bne.n	8003152 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e022      	b.n	8003198 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003156:	2b00      	cmp	r3, #0
 8003158:	d002      	beq.n	8003160 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 fb6c 	bl	8003838 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	685a      	ldr	r2, [r3, #4]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800316e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	689a      	ldr	r2, [r3, #8]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800317e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f042 0201 	orr.w	r2, r2, #1
 800318e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f000 fbf3 	bl	800397c <UART_CheckIdleState>
 8003196:	4603      	mov	r3, r0
}
 8003198:	4618      	mov	r0, r3
 800319a:	3708      	adds	r7, #8
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}

080031a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b08a      	sub	sp, #40	; 0x28
 80031a4:	af02      	add	r7, sp, #8
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	603b      	str	r3, [r7, #0]
 80031ac:	4613      	mov	r3, r2
 80031ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031b4:	2b20      	cmp	r3, #32
 80031b6:	f040 8082 	bne.w	80032be <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d002      	beq.n	80031c6 <HAL_UART_Transmit+0x26>
 80031c0:	88fb      	ldrh	r3, [r7, #6]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e07a      	b.n	80032c0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d101      	bne.n	80031d8 <HAL_UART_Transmit+0x38>
 80031d4:	2302      	movs	r3, #2
 80031d6:	e073      	b.n	80032c0 <HAL_UART_Transmit+0x120>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2221      	movs	r2, #33	; 0x21
 80031ec:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031ee:	f7fd fccb 	bl	8000b88 <HAL_GetTick>
 80031f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	88fa      	ldrh	r2, [r7, #6]
 80031f8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	88fa      	ldrh	r2, [r7, #6]
 8003200:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800320c:	d108      	bne.n	8003220 <HAL_UART_Transmit+0x80>
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d104      	bne.n	8003220 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003216:	2300      	movs	r3, #0
 8003218:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	61bb      	str	r3, [r7, #24]
 800321e:	e003      	b.n	8003228 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003224:	2300      	movs	r3, #0
 8003226:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003230:	e02d      	b.n	800328e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	9300      	str	r3, [sp, #0]
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	2200      	movs	r2, #0
 800323a:	2180      	movs	r1, #128	; 0x80
 800323c:	68f8      	ldr	r0, [r7, #12]
 800323e:	f000 fbe6 	bl	8003a0e <UART_WaitOnFlagUntilTimeout>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d001      	beq.n	800324c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e039      	b.n	80032c0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d10b      	bne.n	800326a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	881a      	ldrh	r2, [r3, #0]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800325e:	b292      	uxth	r2, r2
 8003260:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	3302      	adds	r3, #2
 8003266:	61bb      	str	r3, [r7, #24]
 8003268:	e008      	b.n	800327c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	781a      	ldrb	r2, [r3, #0]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	b292      	uxth	r2, r2
 8003274:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	3301      	adds	r3, #1
 800327a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003282:	b29b      	uxth	r3, r3
 8003284:	3b01      	subs	r3, #1
 8003286:	b29a      	uxth	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003294:	b29b      	uxth	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1cb      	bne.n	8003232 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	9300      	str	r3, [sp, #0]
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	2200      	movs	r2, #0
 80032a2:	2140      	movs	r1, #64	; 0x40
 80032a4:	68f8      	ldr	r0, [r7, #12]
 80032a6:	f000 fbb2 	bl	8003a0e <UART_WaitOnFlagUntilTimeout>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d001      	beq.n	80032b4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e005      	b.n	80032c0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2220      	movs	r2, #32
 80032b8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80032ba:	2300      	movs	r3, #0
 80032bc:	e000      	b.n	80032c0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80032be:	2302      	movs	r3, #2
  }
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3720      	adds	r7, #32
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032cc:	b08a      	sub	sp, #40	; 0x28
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80032d2:	2300      	movs	r3, #0
 80032d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	689a      	ldr	r2, [r3, #8]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	691b      	ldr	r3, [r3, #16]
 80032e0:	431a      	orrs	r2, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	431a      	orrs	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	69db      	ldr	r3, [r3, #28]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	4ba4      	ldr	r3, [pc, #656]	; (8003588 <UART_SetConfig+0x2c0>)
 80032f8:	4013      	ands	r3, r2
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	6812      	ldr	r2, [r2, #0]
 80032fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003300:	430b      	orrs	r3, r1
 8003302:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	68da      	ldr	r2, [r3, #12]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	430a      	orrs	r2, r1
 8003318:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a99      	ldr	r2, [pc, #612]	; (800358c <UART_SetConfig+0x2c4>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d004      	beq.n	8003334 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6a1b      	ldr	r3, [r3, #32]
 800332e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003330:	4313      	orrs	r3, r2
 8003332:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003344:	430a      	orrs	r2, r1
 8003346:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a90      	ldr	r2, [pc, #576]	; (8003590 <UART_SetConfig+0x2c8>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d126      	bne.n	80033a0 <UART_SetConfig+0xd8>
 8003352:	4b90      	ldr	r3, [pc, #576]	; (8003594 <UART_SetConfig+0x2cc>)
 8003354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003358:	f003 0303 	and.w	r3, r3, #3
 800335c:	2b03      	cmp	r3, #3
 800335e:	d81b      	bhi.n	8003398 <UART_SetConfig+0xd0>
 8003360:	a201      	add	r2, pc, #4	; (adr r2, 8003368 <UART_SetConfig+0xa0>)
 8003362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003366:	bf00      	nop
 8003368:	08003379 	.word	0x08003379
 800336c:	08003389 	.word	0x08003389
 8003370:	08003381 	.word	0x08003381
 8003374:	08003391 	.word	0x08003391
 8003378:	2301      	movs	r3, #1
 800337a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800337e:	e116      	b.n	80035ae <UART_SetConfig+0x2e6>
 8003380:	2302      	movs	r3, #2
 8003382:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003386:	e112      	b.n	80035ae <UART_SetConfig+0x2e6>
 8003388:	2304      	movs	r3, #4
 800338a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800338e:	e10e      	b.n	80035ae <UART_SetConfig+0x2e6>
 8003390:	2308      	movs	r3, #8
 8003392:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003396:	e10a      	b.n	80035ae <UART_SetConfig+0x2e6>
 8003398:	2310      	movs	r3, #16
 800339a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800339e:	e106      	b.n	80035ae <UART_SetConfig+0x2e6>
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a7c      	ldr	r2, [pc, #496]	; (8003598 <UART_SetConfig+0x2d0>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d138      	bne.n	800341c <UART_SetConfig+0x154>
 80033aa:	4b7a      	ldr	r3, [pc, #488]	; (8003594 <UART_SetConfig+0x2cc>)
 80033ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033b0:	f003 030c 	and.w	r3, r3, #12
 80033b4:	2b0c      	cmp	r3, #12
 80033b6:	d82d      	bhi.n	8003414 <UART_SetConfig+0x14c>
 80033b8:	a201      	add	r2, pc, #4	; (adr r2, 80033c0 <UART_SetConfig+0xf8>)
 80033ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033be:	bf00      	nop
 80033c0:	080033f5 	.word	0x080033f5
 80033c4:	08003415 	.word	0x08003415
 80033c8:	08003415 	.word	0x08003415
 80033cc:	08003415 	.word	0x08003415
 80033d0:	08003405 	.word	0x08003405
 80033d4:	08003415 	.word	0x08003415
 80033d8:	08003415 	.word	0x08003415
 80033dc:	08003415 	.word	0x08003415
 80033e0:	080033fd 	.word	0x080033fd
 80033e4:	08003415 	.word	0x08003415
 80033e8:	08003415 	.word	0x08003415
 80033ec:	08003415 	.word	0x08003415
 80033f0:	0800340d 	.word	0x0800340d
 80033f4:	2300      	movs	r3, #0
 80033f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033fa:	e0d8      	b.n	80035ae <UART_SetConfig+0x2e6>
 80033fc:	2302      	movs	r3, #2
 80033fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003402:	e0d4      	b.n	80035ae <UART_SetConfig+0x2e6>
 8003404:	2304      	movs	r3, #4
 8003406:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800340a:	e0d0      	b.n	80035ae <UART_SetConfig+0x2e6>
 800340c:	2308      	movs	r3, #8
 800340e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003412:	e0cc      	b.n	80035ae <UART_SetConfig+0x2e6>
 8003414:	2310      	movs	r3, #16
 8003416:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800341a:	e0c8      	b.n	80035ae <UART_SetConfig+0x2e6>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a5e      	ldr	r2, [pc, #376]	; (800359c <UART_SetConfig+0x2d4>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d125      	bne.n	8003472 <UART_SetConfig+0x1aa>
 8003426:	4b5b      	ldr	r3, [pc, #364]	; (8003594 <UART_SetConfig+0x2cc>)
 8003428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800342c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003430:	2b30      	cmp	r3, #48	; 0x30
 8003432:	d016      	beq.n	8003462 <UART_SetConfig+0x19a>
 8003434:	2b30      	cmp	r3, #48	; 0x30
 8003436:	d818      	bhi.n	800346a <UART_SetConfig+0x1a2>
 8003438:	2b20      	cmp	r3, #32
 800343a:	d00a      	beq.n	8003452 <UART_SetConfig+0x18a>
 800343c:	2b20      	cmp	r3, #32
 800343e:	d814      	bhi.n	800346a <UART_SetConfig+0x1a2>
 8003440:	2b00      	cmp	r3, #0
 8003442:	d002      	beq.n	800344a <UART_SetConfig+0x182>
 8003444:	2b10      	cmp	r3, #16
 8003446:	d008      	beq.n	800345a <UART_SetConfig+0x192>
 8003448:	e00f      	b.n	800346a <UART_SetConfig+0x1a2>
 800344a:	2300      	movs	r3, #0
 800344c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003450:	e0ad      	b.n	80035ae <UART_SetConfig+0x2e6>
 8003452:	2302      	movs	r3, #2
 8003454:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003458:	e0a9      	b.n	80035ae <UART_SetConfig+0x2e6>
 800345a:	2304      	movs	r3, #4
 800345c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003460:	e0a5      	b.n	80035ae <UART_SetConfig+0x2e6>
 8003462:	2308      	movs	r3, #8
 8003464:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003468:	e0a1      	b.n	80035ae <UART_SetConfig+0x2e6>
 800346a:	2310      	movs	r3, #16
 800346c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003470:	e09d      	b.n	80035ae <UART_SetConfig+0x2e6>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a4a      	ldr	r2, [pc, #296]	; (80035a0 <UART_SetConfig+0x2d8>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d125      	bne.n	80034c8 <UART_SetConfig+0x200>
 800347c:	4b45      	ldr	r3, [pc, #276]	; (8003594 <UART_SetConfig+0x2cc>)
 800347e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003482:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003486:	2bc0      	cmp	r3, #192	; 0xc0
 8003488:	d016      	beq.n	80034b8 <UART_SetConfig+0x1f0>
 800348a:	2bc0      	cmp	r3, #192	; 0xc0
 800348c:	d818      	bhi.n	80034c0 <UART_SetConfig+0x1f8>
 800348e:	2b80      	cmp	r3, #128	; 0x80
 8003490:	d00a      	beq.n	80034a8 <UART_SetConfig+0x1e0>
 8003492:	2b80      	cmp	r3, #128	; 0x80
 8003494:	d814      	bhi.n	80034c0 <UART_SetConfig+0x1f8>
 8003496:	2b00      	cmp	r3, #0
 8003498:	d002      	beq.n	80034a0 <UART_SetConfig+0x1d8>
 800349a:	2b40      	cmp	r3, #64	; 0x40
 800349c:	d008      	beq.n	80034b0 <UART_SetConfig+0x1e8>
 800349e:	e00f      	b.n	80034c0 <UART_SetConfig+0x1f8>
 80034a0:	2300      	movs	r3, #0
 80034a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034a6:	e082      	b.n	80035ae <UART_SetConfig+0x2e6>
 80034a8:	2302      	movs	r3, #2
 80034aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034ae:	e07e      	b.n	80035ae <UART_SetConfig+0x2e6>
 80034b0:	2304      	movs	r3, #4
 80034b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034b6:	e07a      	b.n	80035ae <UART_SetConfig+0x2e6>
 80034b8:	2308      	movs	r3, #8
 80034ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034be:	e076      	b.n	80035ae <UART_SetConfig+0x2e6>
 80034c0:	2310      	movs	r3, #16
 80034c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034c6:	e072      	b.n	80035ae <UART_SetConfig+0x2e6>
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a35      	ldr	r2, [pc, #212]	; (80035a4 <UART_SetConfig+0x2dc>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d12a      	bne.n	8003528 <UART_SetConfig+0x260>
 80034d2:	4b30      	ldr	r3, [pc, #192]	; (8003594 <UART_SetConfig+0x2cc>)
 80034d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034e0:	d01a      	beq.n	8003518 <UART_SetConfig+0x250>
 80034e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034e6:	d81b      	bhi.n	8003520 <UART_SetConfig+0x258>
 80034e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034ec:	d00c      	beq.n	8003508 <UART_SetConfig+0x240>
 80034ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034f2:	d815      	bhi.n	8003520 <UART_SetConfig+0x258>
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d003      	beq.n	8003500 <UART_SetConfig+0x238>
 80034f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034fc:	d008      	beq.n	8003510 <UART_SetConfig+0x248>
 80034fe:	e00f      	b.n	8003520 <UART_SetConfig+0x258>
 8003500:	2300      	movs	r3, #0
 8003502:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003506:	e052      	b.n	80035ae <UART_SetConfig+0x2e6>
 8003508:	2302      	movs	r3, #2
 800350a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800350e:	e04e      	b.n	80035ae <UART_SetConfig+0x2e6>
 8003510:	2304      	movs	r3, #4
 8003512:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003516:	e04a      	b.n	80035ae <UART_SetConfig+0x2e6>
 8003518:	2308      	movs	r3, #8
 800351a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800351e:	e046      	b.n	80035ae <UART_SetConfig+0x2e6>
 8003520:	2310      	movs	r3, #16
 8003522:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003526:	e042      	b.n	80035ae <UART_SetConfig+0x2e6>
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a17      	ldr	r2, [pc, #92]	; (800358c <UART_SetConfig+0x2c4>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d13a      	bne.n	80035a8 <UART_SetConfig+0x2e0>
 8003532:	4b18      	ldr	r3, [pc, #96]	; (8003594 <UART_SetConfig+0x2cc>)
 8003534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003538:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800353c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003540:	d01a      	beq.n	8003578 <UART_SetConfig+0x2b0>
 8003542:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003546:	d81b      	bhi.n	8003580 <UART_SetConfig+0x2b8>
 8003548:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800354c:	d00c      	beq.n	8003568 <UART_SetConfig+0x2a0>
 800354e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003552:	d815      	bhi.n	8003580 <UART_SetConfig+0x2b8>
 8003554:	2b00      	cmp	r3, #0
 8003556:	d003      	beq.n	8003560 <UART_SetConfig+0x298>
 8003558:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800355c:	d008      	beq.n	8003570 <UART_SetConfig+0x2a8>
 800355e:	e00f      	b.n	8003580 <UART_SetConfig+0x2b8>
 8003560:	2300      	movs	r3, #0
 8003562:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003566:	e022      	b.n	80035ae <UART_SetConfig+0x2e6>
 8003568:	2302      	movs	r3, #2
 800356a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800356e:	e01e      	b.n	80035ae <UART_SetConfig+0x2e6>
 8003570:	2304      	movs	r3, #4
 8003572:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003576:	e01a      	b.n	80035ae <UART_SetConfig+0x2e6>
 8003578:	2308      	movs	r3, #8
 800357a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800357e:	e016      	b.n	80035ae <UART_SetConfig+0x2e6>
 8003580:	2310      	movs	r3, #16
 8003582:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003586:	e012      	b.n	80035ae <UART_SetConfig+0x2e6>
 8003588:	efff69f3 	.word	0xefff69f3
 800358c:	40008000 	.word	0x40008000
 8003590:	40013800 	.word	0x40013800
 8003594:	40021000 	.word	0x40021000
 8003598:	40004400 	.word	0x40004400
 800359c:	40004800 	.word	0x40004800
 80035a0:	40004c00 	.word	0x40004c00
 80035a4:	40005000 	.word	0x40005000
 80035a8:	2310      	movs	r3, #16
 80035aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a9f      	ldr	r2, [pc, #636]	; (8003830 <UART_SetConfig+0x568>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d17a      	bne.n	80036ae <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80035b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80035bc:	2b08      	cmp	r3, #8
 80035be:	d824      	bhi.n	800360a <UART_SetConfig+0x342>
 80035c0:	a201      	add	r2, pc, #4	; (adr r2, 80035c8 <UART_SetConfig+0x300>)
 80035c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c6:	bf00      	nop
 80035c8:	080035ed 	.word	0x080035ed
 80035cc:	0800360b 	.word	0x0800360b
 80035d0:	080035f5 	.word	0x080035f5
 80035d4:	0800360b 	.word	0x0800360b
 80035d8:	080035fb 	.word	0x080035fb
 80035dc:	0800360b 	.word	0x0800360b
 80035e0:	0800360b 	.word	0x0800360b
 80035e4:	0800360b 	.word	0x0800360b
 80035e8:	08003603 	.word	0x08003603
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035ec:	f7fe fb90 	bl	8001d10 <HAL_RCC_GetPCLK1Freq>
 80035f0:	61f8      	str	r0, [r7, #28]
        break;
 80035f2:	e010      	b.n	8003616 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035f4:	4b8f      	ldr	r3, [pc, #572]	; (8003834 <UART_SetConfig+0x56c>)
 80035f6:	61fb      	str	r3, [r7, #28]
        break;
 80035f8:	e00d      	b.n	8003616 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035fa:	f7fe faf1 	bl	8001be0 <HAL_RCC_GetSysClockFreq>
 80035fe:	61f8      	str	r0, [r7, #28]
        break;
 8003600:	e009      	b.n	8003616 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003602:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003606:	61fb      	str	r3, [r7, #28]
        break;
 8003608:	e005      	b.n	8003616 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800360a:	2300      	movs	r3, #0
 800360c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003614:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	2b00      	cmp	r3, #0
 800361a:	f000 80fb 	beq.w	8003814 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	685a      	ldr	r2, [r3, #4]
 8003622:	4613      	mov	r3, r2
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	4413      	add	r3, r2
 8003628:	69fa      	ldr	r2, [r7, #28]
 800362a:	429a      	cmp	r2, r3
 800362c:	d305      	bcc.n	800363a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003634:	69fa      	ldr	r2, [r7, #28]
 8003636:	429a      	cmp	r2, r3
 8003638:	d903      	bls.n	8003642 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003640:	e0e8      	b.n	8003814 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	2200      	movs	r2, #0
 8003646:	461c      	mov	r4, r3
 8003648:	4615      	mov	r5, r2
 800364a:	f04f 0200 	mov.w	r2, #0
 800364e:	f04f 0300 	mov.w	r3, #0
 8003652:	022b      	lsls	r3, r5, #8
 8003654:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003658:	0222      	lsls	r2, r4, #8
 800365a:	68f9      	ldr	r1, [r7, #12]
 800365c:	6849      	ldr	r1, [r1, #4]
 800365e:	0849      	lsrs	r1, r1, #1
 8003660:	2000      	movs	r0, #0
 8003662:	4688      	mov	r8, r1
 8003664:	4681      	mov	r9, r0
 8003666:	eb12 0a08 	adds.w	sl, r2, r8
 800366a:	eb43 0b09 	adc.w	fp, r3, r9
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	603b      	str	r3, [r7, #0]
 8003676:	607a      	str	r2, [r7, #4]
 8003678:	e9d7 2300 	ldrd	r2, r3, [r7]
 800367c:	4650      	mov	r0, sl
 800367e:	4659      	mov	r1, fp
 8003680:	f7fc fdf6 	bl	8000270 <__aeabi_uldivmod>
 8003684:	4602      	mov	r2, r0
 8003686:	460b      	mov	r3, r1
 8003688:	4613      	mov	r3, r2
 800368a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003692:	d308      	bcc.n	80036a6 <UART_SetConfig+0x3de>
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800369a:	d204      	bcs.n	80036a6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	60da      	str	r2, [r3, #12]
 80036a4:	e0b6      	b.n	8003814 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80036ac:	e0b2      	b.n	8003814 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	69db      	ldr	r3, [r3, #28]
 80036b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036b6:	d15e      	bne.n	8003776 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80036b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80036bc:	2b08      	cmp	r3, #8
 80036be:	d828      	bhi.n	8003712 <UART_SetConfig+0x44a>
 80036c0:	a201      	add	r2, pc, #4	; (adr r2, 80036c8 <UART_SetConfig+0x400>)
 80036c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c6:	bf00      	nop
 80036c8:	080036ed 	.word	0x080036ed
 80036cc:	080036f5 	.word	0x080036f5
 80036d0:	080036fd 	.word	0x080036fd
 80036d4:	08003713 	.word	0x08003713
 80036d8:	08003703 	.word	0x08003703
 80036dc:	08003713 	.word	0x08003713
 80036e0:	08003713 	.word	0x08003713
 80036e4:	08003713 	.word	0x08003713
 80036e8:	0800370b 	.word	0x0800370b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036ec:	f7fe fb10 	bl	8001d10 <HAL_RCC_GetPCLK1Freq>
 80036f0:	61f8      	str	r0, [r7, #28]
        break;
 80036f2:	e014      	b.n	800371e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036f4:	f7fe fb22 	bl	8001d3c <HAL_RCC_GetPCLK2Freq>
 80036f8:	61f8      	str	r0, [r7, #28]
        break;
 80036fa:	e010      	b.n	800371e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036fc:	4b4d      	ldr	r3, [pc, #308]	; (8003834 <UART_SetConfig+0x56c>)
 80036fe:	61fb      	str	r3, [r7, #28]
        break;
 8003700:	e00d      	b.n	800371e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003702:	f7fe fa6d 	bl	8001be0 <HAL_RCC_GetSysClockFreq>
 8003706:	61f8      	str	r0, [r7, #28]
        break;
 8003708:	e009      	b.n	800371e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800370a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800370e:	61fb      	str	r3, [r7, #28]
        break;
 8003710:	e005      	b.n	800371e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003712:	2300      	movs	r3, #0
 8003714:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800371c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d077      	beq.n	8003814 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	005a      	lsls	r2, r3, #1
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	085b      	lsrs	r3, r3, #1
 800372e:	441a      	add	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	fbb2 f3f3 	udiv	r3, r2, r3
 8003738:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	2b0f      	cmp	r3, #15
 800373e:	d916      	bls.n	800376e <UART_SetConfig+0x4a6>
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003746:	d212      	bcs.n	800376e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	b29b      	uxth	r3, r3
 800374c:	f023 030f 	bic.w	r3, r3, #15
 8003750:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	085b      	lsrs	r3, r3, #1
 8003756:	b29b      	uxth	r3, r3
 8003758:	f003 0307 	and.w	r3, r3, #7
 800375c:	b29a      	uxth	r2, r3
 800375e:	8afb      	ldrh	r3, [r7, #22]
 8003760:	4313      	orrs	r3, r2
 8003762:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	8afa      	ldrh	r2, [r7, #22]
 800376a:	60da      	str	r2, [r3, #12]
 800376c:	e052      	b.n	8003814 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003774:	e04e      	b.n	8003814 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003776:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800377a:	2b08      	cmp	r3, #8
 800377c:	d827      	bhi.n	80037ce <UART_SetConfig+0x506>
 800377e:	a201      	add	r2, pc, #4	; (adr r2, 8003784 <UART_SetConfig+0x4bc>)
 8003780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003784:	080037a9 	.word	0x080037a9
 8003788:	080037b1 	.word	0x080037b1
 800378c:	080037b9 	.word	0x080037b9
 8003790:	080037cf 	.word	0x080037cf
 8003794:	080037bf 	.word	0x080037bf
 8003798:	080037cf 	.word	0x080037cf
 800379c:	080037cf 	.word	0x080037cf
 80037a0:	080037cf 	.word	0x080037cf
 80037a4:	080037c7 	.word	0x080037c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037a8:	f7fe fab2 	bl	8001d10 <HAL_RCC_GetPCLK1Freq>
 80037ac:	61f8      	str	r0, [r7, #28]
        break;
 80037ae:	e014      	b.n	80037da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037b0:	f7fe fac4 	bl	8001d3c <HAL_RCC_GetPCLK2Freq>
 80037b4:	61f8      	str	r0, [r7, #28]
        break;
 80037b6:	e010      	b.n	80037da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037b8:	4b1e      	ldr	r3, [pc, #120]	; (8003834 <UART_SetConfig+0x56c>)
 80037ba:	61fb      	str	r3, [r7, #28]
        break;
 80037bc:	e00d      	b.n	80037da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037be:	f7fe fa0f 	bl	8001be0 <HAL_RCC_GetSysClockFreq>
 80037c2:	61f8      	str	r0, [r7, #28]
        break;
 80037c4:	e009      	b.n	80037da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037ca:	61fb      	str	r3, [r7, #28]
        break;
 80037cc:	e005      	b.n	80037da <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80037ce:	2300      	movs	r3, #0
 80037d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80037d8:	bf00      	nop
    }

    if (pclk != 0U)
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d019      	beq.n	8003814 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	085a      	lsrs	r2, r3, #1
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	441a      	add	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80037f2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	2b0f      	cmp	r3, #15
 80037f8:	d909      	bls.n	800380e <UART_SetConfig+0x546>
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003800:	d205      	bcs.n	800380e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	b29a      	uxth	r2, r3
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	60da      	str	r2, [r3, #12]
 800380c:	e002      	b.n	8003814 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003820:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003824:	4618      	mov	r0, r3
 8003826:	3728      	adds	r7, #40	; 0x28
 8003828:	46bd      	mov	sp, r7
 800382a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800382e:	bf00      	nop
 8003830:	40008000 	.word	0x40008000
 8003834:	00f42400 	.word	0x00f42400

08003838 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003844:	f003 0301 	and.w	r3, r3, #1
 8003848:	2b00      	cmp	r3, #0
 800384a:	d00a      	beq.n	8003862 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	430a      	orrs	r2, r1
 8003860:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00a      	beq.n	8003884 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	430a      	orrs	r2, r1
 8003882:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003888:	f003 0304 	and.w	r3, r3, #4
 800388c:	2b00      	cmp	r3, #0
 800388e:	d00a      	beq.n	80038a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	430a      	orrs	r2, r1
 80038a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038aa:	f003 0308 	and.w	r3, r3, #8
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00a      	beq.n	80038c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	430a      	orrs	r2, r1
 80038c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038cc:	f003 0310 	and.w	r3, r3, #16
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00a      	beq.n	80038ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	430a      	orrs	r2, r1
 80038e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ee:	f003 0320 	and.w	r3, r3, #32
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00a      	beq.n	800390c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	430a      	orrs	r2, r1
 800390a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003914:	2b00      	cmp	r3, #0
 8003916:	d01a      	beq.n	800394e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	430a      	orrs	r2, r1
 800392c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003932:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003936:	d10a      	bne.n	800394e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	430a      	orrs	r2, r1
 800394c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00a      	beq.n	8003970 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	430a      	orrs	r2, r1
 800396e:	605a      	str	r2, [r3, #4]
  }
}
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b086      	sub	sp, #24
 8003980:	af02      	add	r7, sp, #8
 8003982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800398c:	f7fd f8fc 	bl	8000b88 <HAL_GetTick>
 8003990:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0308 	and.w	r3, r3, #8
 800399c:	2b08      	cmp	r3, #8
 800399e:	d10e      	bne.n	80039be <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039a4:	9300      	str	r3, [sp, #0]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 f82d 	bl	8003a0e <UART_WaitOnFlagUntilTimeout>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d001      	beq.n	80039be <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e023      	b.n	8003a06 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0304 	and.w	r3, r3, #4
 80039c8:	2b04      	cmp	r3, #4
 80039ca:	d10e      	bne.n	80039ea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039d0:	9300      	str	r3, [sp, #0]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 f817 	bl	8003a0e <UART_WaitOnFlagUntilTimeout>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d001      	beq.n	80039ea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e00d      	b.n	8003a06 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2220      	movs	r2, #32
 80039ee:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2220      	movs	r2, #32
 80039f4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3710      	adds	r7, #16
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a0e:	b580      	push	{r7, lr}
 8003a10:	b09c      	sub	sp, #112	; 0x70
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	60f8      	str	r0, [r7, #12]
 8003a16:	60b9      	str	r1, [r7, #8]
 8003a18:	603b      	str	r3, [r7, #0]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a1e:	e0a5      	b.n	8003b6c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a26:	f000 80a1 	beq.w	8003b6c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a2a:	f7fd f8ad 	bl	8000b88 <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d302      	bcc.n	8003a40 <UART_WaitOnFlagUntilTimeout+0x32>
 8003a3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d13e      	bne.n	8003abe <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a48:	e853 3f00 	ldrex	r3, [r3]
 8003a4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003a4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a50:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a54:	667b      	str	r3, [r7, #100]	; 0x64
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a60:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a62:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003a64:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003a66:	e841 2300 	strex	r3, r2, [r1]
 8003a6a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003a6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1e6      	bne.n	8003a40 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	3308      	adds	r3, #8
 8003a78:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a7c:	e853 3f00 	ldrex	r3, [r3]
 8003a80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a84:	f023 0301 	bic.w	r3, r3, #1
 8003a88:	663b      	str	r3, [r7, #96]	; 0x60
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	3308      	adds	r3, #8
 8003a90:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003a92:	64ba      	str	r2, [r7, #72]	; 0x48
 8003a94:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003a98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a9a:	e841 2300 	strex	r3, r2, [r1]
 8003a9e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003aa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1e5      	bne.n	8003a72 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2220      	movs	r2, #32
 8003aaa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2220      	movs	r2, #32
 8003ab0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e067      	b.n	8003b8e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0304 	and.w	r3, r3, #4
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d04f      	beq.n	8003b6c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	69db      	ldr	r3, [r3, #28]
 8003ad2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ad6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ada:	d147      	bne.n	8003b6c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ae4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aee:	e853 3f00 	ldrex	r3, [r3]
 8003af2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003afa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	461a      	mov	r2, r3
 8003b02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b04:	637b      	str	r3, [r7, #52]	; 0x34
 8003b06:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b08:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b0c:	e841 2300 	strex	r3, r2, [r1]
 8003b10:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d1e6      	bne.n	8003ae6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	3308      	adds	r3, #8
 8003b1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	e853 3f00 	ldrex	r3, [r3]
 8003b26:	613b      	str	r3, [r7, #16]
   return(result);
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	f023 0301 	bic.w	r3, r3, #1
 8003b2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	3308      	adds	r3, #8
 8003b36:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003b38:	623a      	str	r2, [r7, #32]
 8003b3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b3c:	69f9      	ldr	r1, [r7, #28]
 8003b3e:	6a3a      	ldr	r2, [r7, #32]
 8003b40:	e841 2300 	strex	r3, r2, [r1]
 8003b44:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1e5      	bne.n	8003b18 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2220      	movs	r2, #32
 8003b50:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2220      	movs	r2, #32
 8003b56:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2220      	movs	r2, #32
 8003b5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e010      	b.n	8003b8e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	69da      	ldr	r2, [r3, #28]
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	4013      	ands	r3, r2
 8003b76:	68ba      	ldr	r2, [r7, #8]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	bf0c      	ite	eq
 8003b7c:	2301      	moveq	r3, #1
 8003b7e:	2300      	movne	r3, #0
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	461a      	mov	r2, r3
 8003b84:	79fb      	ldrb	r3, [r7, #7]
 8003b86:	429a      	cmp	r2, r3
 8003b88:	f43f af4a 	beq.w	8003a20 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3770      	adds	r7, #112	; 0x70
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
	...

08003b98 <siprintf>:
 8003b98:	b40e      	push	{r1, r2, r3}
 8003b9a:	b500      	push	{lr}
 8003b9c:	b09c      	sub	sp, #112	; 0x70
 8003b9e:	ab1d      	add	r3, sp, #116	; 0x74
 8003ba0:	9002      	str	r0, [sp, #8]
 8003ba2:	9006      	str	r0, [sp, #24]
 8003ba4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003ba8:	4809      	ldr	r0, [pc, #36]	; (8003bd0 <siprintf+0x38>)
 8003baa:	9107      	str	r1, [sp, #28]
 8003bac:	9104      	str	r1, [sp, #16]
 8003bae:	4909      	ldr	r1, [pc, #36]	; (8003bd4 <siprintf+0x3c>)
 8003bb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8003bb4:	9105      	str	r1, [sp, #20]
 8003bb6:	6800      	ldr	r0, [r0, #0]
 8003bb8:	9301      	str	r3, [sp, #4]
 8003bba:	a902      	add	r1, sp, #8
 8003bbc:	f000 f992 	bl	8003ee4 <_svfiprintf_r>
 8003bc0:	9b02      	ldr	r3, [sp, #8]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	701a      	strb	r2, [r3, #0]
 8003bc6:	b01c      	add	sp, #112	; 0x70
 8003bc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003bcc:	b003      	add	sp, #12
 8003bce:	4770      	bx	lr
 8003bd0:	20000080 	.word	0x20000080
 8003bd4:	ffff0208 	.word	0xffff0208

08003bd8 <memset>:
 8003bd8:	4402      	add	r2, r0
 8003bda:	4603      	mov	r3, r0
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d100      	bne.n	8003be2 <memset+0xa>
 8003be0:	4770      	bx	lr
 8003be2:	f803 1b01 	strb.w	r1, [r3], #1
 8003be6:	e7f9      	b.n	8003bdc <memset+0x4>

08003be8 <__errno>:
 8003be8:	4b01      	ldr	r3, [pc, #4]	; (8003bf0 <__errno+0x8>)
 8003bea:	6818      	ldr	r0, [r3, #0]
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	20000080 	.word	0x20000080

08003bf4 <__libc_init_array>:
 8003bf4:	b570      	push	{r4, r5, r6, lr}
 8003bf6:	4d0d      	ldr	r5, [pc, #52]	; (8003c2c <__libc_init_array+0x38>)
 8003bf8:	4c0d      	ldr	r4, [pc, #52]	; (8003c30 <__libc_init_array+0x3c>)
 8003bfa:	1b64      	subs	r4, r4, r5
 8003bfc:	10a4      	asrs	r4, r4, #2
 8003bfe:	2600      	movs	r6, #0
 8003c00:	42a6      	cmp	r6, r4
 8003c02:	d109      	bne.n	8003c18 <__libc_init_array+0x24>
 8003c04:	4d0b      	ldr	r5, [pc, #44]	; (8003c34 <__libc_init_array+0x40>)
 8003c06:	4c0c      	ldr	r4, [pc, #48]	; (8003c38 <__libc_init_array+0x44>)
 8003c08:	f000 fc6a 	bl	80044e0 <_init>
 8003c0c:	1b64      	subs	r4, r4, r5
 8003c0e:	10a4      	asrs	r4, r4, #2
 8003c10:	2600      	movs	r6, #0
 8003c12:	42a6      	cmp	r6, r4
 8003c14:	d105      	bne.n	8003c22 <__libc_init_array+0x2e>
 8003c16:	bd70      	pop	{r4, r5, r6, pc}
 8003c18:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c1c:	4798      	blx	r3
 8003c1e:	3601      	adds	r6, #1
 8003c20:	e7ee      	b.n	8003c00 <__libc_init_array+0xc>
 8003c22:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c26:	4798      	blx	r3
 8003c28:	3601      	adds	r6, #1
 8003c2a:	e7f2      	b.n	8003c12 <__libc_init_array+0x1e>
 8003c2c:	08004590 	.word	0x08004590
 8003c30:	08004590 	.word	0x08004590
 8003c34:	08004590 	.word	0x08004590
 8003c38:	08004594 	.word	0x08004594

08003c3c <__retarget_lock_acquire_recursive>:
 8003c3c:	4770      	bx	lr

08003c3e <__retarget_lock_release_recursive>:
 8003c3e:	4770      	bx	lr

08003c40 <_free_r>:
 8003c40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003c42:	2900      	cmp	r1, #0
 8003c44:	d044      	beq.n	8003cd0 <_free_r+0x90>
 8003c46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c4a:	9001      	str	r0, [sp, #4]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	f1a1 0404 	sub.w	r4, r1, #4
 8003c52:	bfb8      	it	lt
 8003c54:	18e4      	addlt	r4, r4, r3
 8003c56:	f000 f8df 	bl	8003e18 <__malloc_lock>
 8003c5a:	4a1e      	ldr	r2, [pc, #120]	; (8003cd4 <_free_r+0x94>)
 8003c5c:	9801      	ldr	r0, [sp, #4]
 8003c5e:	6813      	ldr	r3, [r2, #0]
 8003c60:	b933      	cbnz	r3, 8003c70 <_free_r+0x30>
 8003c62:	6063      	str	r3, [r4, #4]
 8003c64:	6014      	str	r4, [r2, #0]
 8003c66:	b003      	add	sp, #12
 8003c68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003c6c:	f000 b8da 	b.w	8003e24 <__malloc_unlock>
 8003c70:	42a3      	cmp	r3, r4
 8003c72:	d908      	bls.n	8003c86 <_free_r+0x46>
 8003c74:	6825      	ldr	r5, [r4, #0]
 8003c76:	1961      	adds	r1, r4, r5
 8003c78:	428b      	cmp	r3, r1
 8003c7a:	bf01      	itttt	eq
 8003c7c:	6819      	ldreq	r1, [r3, #0]
 8003c7e:	685b      	ldreq	r3, [r3, #4]
 8003c80:	1949      	addeq	r1, r1, r5
 8003c82:	6021      	streq	r1, [r4, #0]
 8003c84:	e7ed      	b.n	8003c62 <_free_r+0x22>
 8003c86:	461a      	mov	r2, r3
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	b10b      	cbz	r3, 8003c90 <_free_r+0x50>
 8003c8c:	42a3      	cmp	r3, r4
 8003c8e:	d9fa      	bls.n	8003c86 <_free_r+0x46>
 8003c90:	6811      	ldr	r1, [r2, #0]
 8003c92:	1855      	adds	r5, r2, r1
 8003c94:	42a5      	cmp	r5, r4
 8003c96:	d10b      	bne.n	8003cb0 <_free_r+0x70>
 8003c98:	6824      	ldr	r4, [r4, #0]
 8003c9a:	4421      	add	r1, r4
 8003c9c:	1854      	adds	r4, r2, r1
 8003c9e:	42a3      	cmp	r3, r4
 8003ca0:	6011      	str	r1, [r2, #0]
 8003ca2:	d1e0      	bne.n	8003c66 <_free_r+0x26>
 8003ca4:	681c      	ldr	r4, [r3, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	6053      	str	r3, [r2, #4]
 8003caa:	440c      	add	r4, r1
 8003cac:	6014      	str	r4, [r2, #0]
 8003cae:	e7da      	b.n	8003c66 <_free_r+0x26>
 8003cb0:	d902      	bls.n	8003cb8 <_free_r+0x78>
 8003cb2:	230c      	movs	r3, #12
 8003cb4:	6003      	str	r3, [r0, #0]
 8003cb6:	e7d6      	b.n	8003c66 <_free_r+0x26>
 8003cb8:	6825      	ldr	r5, [r4, #0]
 8003cba:	1961      	adds	r1, r4, r5
 8003cbc:	428b      	cmp	r3, r1
 8003cbe:	bf04      	itt	eq
 8003cc0:	6819      	ldreq	r1, [r3, #0]
 8003cc2:	685b      	ldreq	r3, [r3, #4]
 8003cc4:	6063      	str	r3, [r4, #4]
 8003cc6:	bf04      	itt	eq
 8003cc8:	1949      	addeq	r1, r1, r5
 8003cca:	6021      	streq	r1, [r4, #0]
 8003ccc:	6054      	str	r4, [r2, #4]
 8003cce:	e7ca      	b.n	8003c66 <_free_r+0x26>
 8003cd0:	b003      	add	sp, #12
 8003cd2:	bd30      	pop	{r4, r5, pc}
 8003cd4:	200002b8 	.word	0x200002b8

08003cd8 <sbrk_aligned>:
 8003cd8:	b570      	push	{r4, r5, r6, lr}
 8003cda:	4e0e      	ldr	r6, [pc, #56]	; (8003d14 <sbrk_aligned+0x3c>)
 8003cdc:	460c      	mov	r4, r1
 8003cde:	6831      	ldr	r1, [r6, #0]
 8003ce0:	4605      	mov	r5, r0
 8003ce2:	b911      	cbnz	r1, 8003cea <sbrk_aligned+0x12>
 8003ce4:	f000 fba6 	bl	8004434 <_sbrk_r>
 8003ce8:	6030      	str	r0, [r6, #0]
 8003cea:	4621      	mov	r1, r4
 8003cec:	4628      	mov	r0, r5
 8003cee:	f000 fba1 	bl	8004434 <_sbrk_r>
 8003cf2:	1c43      	adds	r3, r0, #1
 8003cf4:	d00a      	beq.n	8003d0c <sbrk_aligned+0x34>
 8003cf6:	1cc4      	adds	r4, r0, #3
 8003cf8:	f024 0403 	bic.w	r4, r4, #3
 8003cfc:	42a0      	cmp	r0, r4
 8003cfe:	d007      	beq.n	8003d10 <sbrk_aligned+0x38>
 8003d00:	1a21      	subs	r1, r4, r0
 8003d02:	4628      	mov	r0, r5
 8003d04:	f000 fb96 	bl	8004434 <_sbrk_r>
 8003d08:	3001      	adds	r0, #1
 8003d0a:	d101      	bne.n	8003d10 <sbrk_aligned+0x38>
 8003d0c:	f04f 34ff 	mov.w	r4, #4294967295
 8003d10:	4620      	mov	r0, r4
 8003d12:	bd70      	pop	{r4, r5, r6, pc}
 8003d14:	200002bc 	.word	0x200002bc

08003d18 <_malloc_r>:
 8003d18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d1c:	1ccd      	adds	r5, r1, #3
 8003d1e:	f025 0503 	bic.w	r5, r5, #3
 8003d22:	3508      	adds	r5, #8
 8003d24:	2d0c      	cmp	r5, #12
 8003d26:	bf38      	it	cc
 8003d28:	250c      	movcc	r5, #12
 8003d2a:	2d00      	cmp	r5, #0
 8003d2c:	4607      	mov	r7, r0
 8003d2e:	db01      	blt.n	8003d34 <_malloc_r+0x1c>
 8003d30:	42a9      	cmp	r1, r5
 8003d32:	d905      	bls.n	8003d40 <_malloc_r+0x28>
 8003d34:	230c      	movs	r3, #12
 8003d36:	603b      	str	r3, [r7, #0]
 8003d38:	2600      	movs	r6, #0
 8003d3a:	4630      	mov	r0, r6
 8003d3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d40:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003e14 <_malloc_r+0xfc>
 8003d44:	f000 f868 	bl	8003e18 <__malloc_lock>
 8003d48:	f8d8 3000 	ldr.w	r3, [r8]
 8003d4c:	461c      	mov	r4, r3
 8003d4e:	bb5c      	cbnz	r4, 8003da8 <_malloc_r+0x90>
 8003d50:	4629      	mov	r1, r5
 8003d52:	4638      	mov	r0, r7
 8003d54:	f7ff ffc0 	bl	8003cd8 <sbrk_aligned>
 8003d58:	1c43      	adds	r3, r0, #1
 8003d5a:	4604      	mov	r4, r0
 8003d5c:	d155      	bne.n	8003e0a <_malloc_r+0xf2>
 8003d5e:	f8d8 4000 	ldr.w	r4, [r8]
 8003d62:	4626      	mov	r6, r4
 8003d64:	2e00      	cmp	r6, #0
 8003d66:	d145      	bne.n	8003df4 <_malloc_r+0xdc>
 8003d68:	2c00      	cmp	r4, #0
 8003d6a:	d048      	beq.n	8003dfe <_malloc_r+0xe6>
 8003d6c:	6823      	ldr	r3, [r4, #0]
 8003d6e:	4631      	mov	r1, r6
 8003d70:	4638      	mov	r0, r7
 8003d72:	eb04 0903 	add.w	r9, r4, r3
 8003d76:	f000 fb5d 	bl	8004434 <_sbrk_r>
 8003d7a:	4581      	cmp	r9, r0
 8003d7c:	d13f      	bne.n	8003dfe <_malloc_r+0xe6>
 8003d7e:	6821      	ldr	r1, [r4, #0]
 8003d80:	1a6d      	subs	r5, r5, r1
 8003d82:	4629      	mov	r1, r5
 8003d84:	4638      	mov	r0, r7
 8003d86:	f7ff ffa7 	bl	8003cd8 <sbrk_aligned>
 8003d8a:	3001      	adds	r0, #1
 8003d8c:	d037      	beq.n	8003dfe <_malloc_r+0xe6>
 8003d8e:	6823      	ldr	r3, [r4, #0]
 8003d90:	442b      	add	r3, r5
 8003d92:	6023      	str	r3, [r4, #0]
 8003d94:	f8d8 3000 	ldr.w	r3, [r8]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d038      	beq.n	8003e0e <_malloc_r+0xf6>
 8003d9c:	685a      	ldr	r2, [r3, #4]
 8003d9e:	42a2      	cmp	r2, r4
 8003da0:	d12b      	bne.n	8003dfa <_malloc_r+0xe2>
 8003da2:	2200      	movs	r2, #0
 8003da4:	605a      	str	r2, [r3, #4]
 8003da6:	e00f      	b.n	8003dc8 <_malloc_r+0xb0>
 8003da8:	6822      	ldr	r2, [r4, #0]
 8003daa:	1b52      	subs	r2, r2, r5
 8003dac:	d41f      	bmi.n	8003dee <_malloc_r+0xd6>
 8003dae:	2a0b      	cmp	r2, #11
 8003db0:	d917      	bls.n	8003de2 <_malloc_r+0xca>
 8003db2:	1961      	adds	r1, r4, r5
 8003db4:	42a3      	cmp	r3, r4
 8003db6:	6025      	str	r5, [r4, #0]
 8003db8:	bf18      	it	ne
 8003dba:	6059      	strne	r1, [r3, #4]
 8003dbc:	6863      	ldr	r3, [r4, #4]
 8003dbe:	bf08      	it	eq
 8003dc0:	f8c8 1000 	streq.w	r1, [r8]
 8003dc4:	5162      	str	r2, [r4, r5]
 8003dc6:	604b      	str	r3, [r1, #4]
 8003dc8:	4638      	mov	r0, r7
 8003dca:	f104 060b 	add.w	r6, r4, #11
 8003dce:	f000 f829 	bl	8003e24 <__malloc_unlock>
 8003dd2:	f026 0607 	bic.w	r6, r6, #7
 8003dd6:	1d23      	adds	r3, r4, #4
 8003dd8:	1af2      	subs	r2, r6, r3
 8003dda:	d0ae      	beq.n	8003d3a <_malloc_r+0x22>
 8003ddc:	1b9b      	subs	r3, r3, r6
 8003dde:	50a3      	str	r3, [r4, r2]
 8003de0:	e7ab      	b.n	8003d3a <_malloc_r+0x22>
 8003de2:	42a3      	cmp	r3, r4
 8003de4:	6862      	ldr	r2, [r4, #4]
 8003de6:	d1dd      	bne.n	8003da4 <_malloc_r+0x8c>
 8003de8:	f8c8 2000 	str.w	r2, [r8]
 8003dec:	e7ec      	b.n	8003dc8 <_malloc_r+0xb0>
 8003dee:	4623      	mov	r3, r4
 8003df0:	6864      	ldr	r4, [r4, #4]
 8003df2:	e7ac      	b.n	8003d4e <_malloc_r+0x36>
 8003df4:	4634      	mov	r4, r6
 8003df6:	6876      	ldr	r6, [r6, #4]
 8003df8:	e7b4      	b.n	8003d64 <_malloc_r+0x4c>
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	e7cc      	b.n	8003d98 <_malloc_r+0x80>
 8003dfe:	230c      	movs	r3, #12
 8003e00:	603b      	str	r3, [r7, #0]
 8003e02:	4638      	mov	r0, r7
 8003e04:	f000 f80e 	bl	8003e24 <__malloc_unlock>
 8003e08:	e797      	b.n	8003d3a <_malloc_r+0x22>
 8003e0a:	6025      	str	r5, [r4, #0]
 8003e0c:	e7dc      	b.n	8003dc8 <_malloc_r+0xb0>
 8003e0e:	605b      	str	r3, [r3, #4]
 8003e10:	deff      	udf	#255	; 0xff
 8003e12:	bf00      	nop
 8003e14:	200002b8 	.word	0x200002b8

08003e18 <__malloc_lock>:
 8003e18:	4801      	ldr	r0, [pc, #4]	; (8003e20 <__malloc_lock+0x8>)
 8003e1a:	f7ff bf0f 	b.w	8003c3c <__retarget_lock_acquire_recursive>
 8003e1e:	bf00      	nop
 8003e20:	200002b4 	.word	0x200002b4

08003e24 <__malloc_unlock>:
 8003e24:	4801      	ldr	r0, [pc, #4]	; (8003e2c <__malloc_unlock+0x8>)
 8003e26:	f7ff bf0a 	b.w	8003c3e <__retarget_lock_release_recursive>
 8003e2a:	bf00      	nop
 8003e2c:	200002b4 	.word	0x200002b4

08003e30 <__ssputs_r>:
 8003e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e34:	688e      	ldr	r6, [r1, #8]
 8003e36:	461f      	mov	r7, r3
 8003e38:	42be      	cmp	r6, r7
 8003e3a:	680b      	ldr	r3, [r1, #0]
 8003e3c:	4682      	mov	sl, r0
 8003e3e:	460c      	mov	r4, r1
 8003e40:	4690      	mov	r8, r2
 8003e42:	d82c      	bhi.n	8003e9e <__ssputs_r+0x6e>
 8003e44:	898a      	ldrh	r2, [r1, #12]
 8003e46:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003e4a:	d026      	beq.n	8003e9a <__ssputs_r+0x6a>
 8003e4c:	6965      	ldr	r5, [r4, #20]
 8003e4e:	6909      	ldr	r1, [r1, #16]
 8003e50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003e54:	eba3 0901 	sub.w	r9, r3, r1
 8003e58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003e5c:	1c7b      	adds	r3, r7, #1
 8003e5e:	444b      	add	r3, r9
 8003e60:	106d      	asrs	r5, r5, #1
 8003e62:	429d      	cmp	r5, r3
 8003e64:	bf38      	it	cc
 8003e66:	461d      	movcc	r5, r3
 8003e68:	0553      	lsls	r3, r2, #21
 8003e6a:	d527      	bpl.n	8003ebc <__ssputs_r+0x8c>
 8003e6c:	4629      	mov	r1, r5
 8003e6e:	f7ff ff53 	bl	8003d18 <_malloc_r>
 8003e72:	4606      	mov	r6, r0
 8003e74:	b360      	cbz	r0, 8003ed0 <__ssputs_r+0xa0>
 8003e76:	6921      	ldr	r1, [r4, #16]
 8003e78:	464a      	mov	r2, r9
 8003e7a:	f000 faeb 	bl	8004454 <memcpy>
 8003e7e:	89a3      	ldrh	r3, [r4, #12]
 8003e80:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003e84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e88:	81a3      	strh	r3, [r4, #12]
 8003e8a:	6126      	str	r6, [r4, #16]
 8003e8c:	6165      	str	r5, [r4, #20]
 8003e8e:	444e      	add	r6, r9
 8003e90:	eba5 0509 	sub.w	r5, r5, r9
 8003e94:	6026      	str	r6, [r4, #0]
 8003e96:	60a5      	str	r5, [r4, #8]
 8003e98:	463e      	mov	r6, r7
 8003e9a:	42be      	cmp	r6, r7
 8003e9c:	d900      	bls.n	8003ea0 <__ssputs_r+0x70>
 8003e9e:	463e      	mov	r6, r7
 8003ea0:	6820      	ldr	r0, [r4, #0]
 8003ea2:	4632      	mov	r2, r6
 8003ea4:	4641      	mov	r1, r8
 8003ea6:	f000 faab 	bl	8004400 <memmove>
 8003eaa:	68a3      	ldr	r3, [r4, #8]
 8003eac:	1b9b      	subs	r3, r3, r6
 8003eae:	60a3      	str	r3, [r4, #8]
 8003eb0:	6823      	ldr	r3, [r4, #0]
 8003eb2:	4433      	add	r3, r6
 8003eb4:	6023      	str	r3, [r4, #0]
 8003eb6:	2000      	movs	r0, #0
 8003eb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ebc:	462a      	mov	r2, r5
 8003ebe:	f000 fad7 	bl	8004470 <_realloc_r>
 8003ec2:	4606      	mov	r6, r0
 8003ec4:	2800      	cmp	r0, #0
 8003ec6:	d1e0      	bne.n	8003e8a <__ssputs_r+0x5a>
 8003ec8:	6921      	ldr	r1, [r4, #16]
 8003eca:	4650      	mov	r0, sl
 8003ecc:	f7ff feb8 	bl	8003c40 <_free_r>
 8003ed0:	230c      	movs	r3, #12
 8003ed2:	f8ca 3000 	str.w	r3, [sl]
 8003ed6:	89a3      	ldrh	r3, [r4, #12]
 8003ed8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003edc:	81a3      	strh	r3, [r4, #12]
 8003ede:	f04f 30ff 	mov.w	r0, #4294967295
 8003ee2:	e7e9      	b.n	8003eb8 <__ssputs_r+0x88>

08003ee4 <_svfiprintf_r>:
 8003ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ee8:	4698      	mov	r8, r3
 8003eea:	898b      	ldrh	r3, [r1, #12]
 8003eec:	061b      	lsls	r3, r3, #24
 8003eee:	b09d      	sub	sp, #116	; 0x74
 8003ef0:	4607      	mov	r7, r0
 8003ef2:	460d      	mov	r5, r1
 8003ef4:	4614      	mov	r4, r2
 8003ef6:	d50e      	bpl.n	8003f16 <_svfiprintf_r+0x32>
 8003ef8:	690b      	ldr	r3, [r1, #16]
 8003efa:	b963      	cbnz	r3, 8003f16 <_svfiprintf_r+0x32>
 8003efc:	2140      	movs	r1, #64	; 0x40
 8003efe:	f7ff ff0b 	bl	8003d18 <_malloc_r>
 8003f02:	6028      	str	r0, [r5, #0]
 8003f04:	6128      	str	r0, [r5, #16]
 8003f06:	b920      	cbnz	r0, 8003f12 <_svfiprintf_r+0x2e>
 8003f08:	230c      	movs	r3, #12
 8003f0a:	603b      	str	r3, [r7, #0]
 8003f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f10:	e0d0      	b.n	80040b4 <_svfiprintf_r+0x1d0>
 8003f12:	2340      	movs	r3, #64	; 0x40
 8003f14:	616b      	str	r3, [r5, #20]
 8003f16:	2300      	movs	r3, #0
 8003f18:	9309      	str	r3, [sp, #36]	; 0x24
 8003f1a:	2320      	movs	r3, #32
 8003f1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f20:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f24:	2330      	movs	r3, #48	; 0x30
 8003f26:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80040cc <_svfiprintf_r+0x1e8>
 8003f2a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f2e:	f04f 0901 	mov.w	r9, #1
 8003f32:	4623      	mov	r3, r4
 8003f34:	469a      	mov	sl, r3
 8003f36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f3a:	b10a      	cbz	r2, 8003f40 <_svfiprintf_r+0x5c>
 8003f3c:	2a25      	cmp	r2, #37	; 0x25
 8003f3e:	d1f9      	bne.n	8003f34 <_svfiprintf_r+0x50>
 8003f40:	ebba 0b04 	subs.w	fp, sl, r4
 8003f44:	d00b      	beq.n	8003f5e <_svfiprintf_r+0x7a>
 8003f46:	465b      	mov	r3, fp
 8003f48:	4622      	mov	r2, r4
 8003f4a:	4629      	mov	r1, r5
 8003f4c:	4638      	mov	r0, r7
 8003f4e:	f7ff ff6f 	bl	8003e30 <__ssputs_r>
 8003f52:	3001      	adds	r0, #1
 8003f54:	f000 80a9 	beq.w	80040aa <_svfiprintf_r+0x1c6>
 8003f58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f5a:	445a      	add	r2, fp
 8003f5c:	9209      	str	r2, [sp, #36]	; 0x24
 8003f5e:	f89a 3000 	ldrb.w	r3, [sl]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	f000 80a1 	beq.w	80040aa <_svfiprintf_r+0x1c6>
 8003f68:	2300      	movs	r3, #0
 8003f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f72:	f10a 0a01 	add.w	sl, sl, #1
 8003f76:	9304      	str	r3, [sp, #16]
 8003f78:	9307      	str	r3, [sp, #28]
 8003f7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f7e:	931a      	str	r3, [sp, #104]	; 0x68
 8003f80:	4654      	mov	r4, sl
 8003f82:	2205      	movs	r2, #5
 8003f84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f88:	4850      	ldr	r0, [pc, #320]	; (80040cc <_svfiprintf_r+0x1e8>)
 8003f8a:	f7fc f921 	bl	80001d0 <memchr>
 8003f8e:	9a04      	ldr	r2, [sp, #16]
 8003f90:	b9d8      	cbnz	r0, 8003fca <_svfiprintf_r+0xe6>
 8003f92:	06d0      	lsls	r0, r2, #27
 8003f94:	bf44      	itt	mi
 8003f96:	2320      	movmi	r3, #32
 8003f98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f9c:	0711      	lsls	r1, r2, #28
 8003f9e:	bf44      	itt	mi
 8003fa0:	232b      	movmi	r3, #43	; 0x2b
 8003fa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003fa6:	f89a 3000 	ldrb.w	r3, [sl]
 8003faa:	2b2a      	cmp	r3, #42	; 0x2a
 8003fac:	d015      	beq.n	8003fda <_svfiprintf_r+0xf6>
 8003fae:	9a07      	ldr	r2, [sp, #28]
 8003fb0:	4654      	mov	r4, sl
 8003fb2:	2000      	movs	r0, #0
 8003fb4:	f04f 0c0a 	mov.w	ip, #10
 8003fb8:	4621      	mov	r1, r4
 8003fba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003fbe:	3b30      	subs	r3, #48	; 0x30
 8003fc0:	2b09      	cmp	r3, #9
 8003fc2:	d94d      	bls.n	8004060 <_svfiprintf_r+0x17c>
 8003fc4:	b1b0      	cbz	r0, 8003ff4 <_svfiprintf_r+0x110>
 8003fc6:	9207      	str	r2, [sp, #28]
 8003fc8:	e014      	b.n	8003ff4 <_svfiprintf_r+0x110>
 8003fca:	eba0 0308 	sub.w	r3, r0, r8
 8003fce:	fa09 f303 	lsl.w	r3, r9, r3
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	9304      	str	r3, [sp, #16]
 8003fd6:	46a2      	mov	sl, r4
 8003fd8:	e7d2      	b.n	8003f80 <_svfiprintf_r+0x9c>
 8003fda:	9b03      	ldr	r3, [sp, #12]
 8003fdc:	1d19      	adds	r1, r3, #4
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	9103      	str	r1, [sp, #12]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	bfbb      	ittet	lt
 8003fe6:	425b      	neglt	r3, r3
 8003fe8:	f042 0202 	orrlt.w	r2, r2, #2
 8003fec:	9307      	strge	r3, [sp, #28]
 8003fee:	9307      	strlt	r3, [sp, #28]
 8003ff0:	bfb8      	it	lt
 8003ff2:	9204      	strlt	r2, [sp, #16]
 8003ff4:	7823      	ldrb	r3, [r4, #0]
 8003ff6:	2b2e      	cmp	r3, #46	; 0x2e
 8003ff8:	d10c      	bne.n	8004014 <_svfiprintf_r+0x130>
 8003ffa:	7863      	ldrb	r3, [r4, #1]
 8003ffc:	2b2a      	cmp	r3, #42	; 0x2a
 8003ffe:	d134      	bne.n	800406a <_svfiprintf_r+0x186>
 8004000:	9b03      	ldr	r3, [sp, #12]
 8004002:	1d1a      	adds	r2, r3, #4
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	9203      	str	r2, [sp, #12]
 8004008:	2b00      	cmp	r3, #0
 800400a:	bfb8      	it	lt
 800400c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004010:	3402      	adds	r4, #2
 8004012:	9305      	str	r3, [sp, #20]
 8004014:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80040dc <_svfiprintf_r+0x1f8>
 8004018:	7821      	ldrb	r1, [r4, #0]
 800401a:	2203      	movs	r2, #3
 800401c:	4650      	mov	r0, sl
 800401e:	f7fc f8d7 	bl	80001d0 <memchr>
 8004022:	b138      	cbz	r0, 8004034 <_svfiprintf_r+0x150>
 8004024:	9b04      	ldr	r3, [sp, #16]
 8004026:	eba0 000a 	sub.w	r0, r0, sl
 800402a:	2240      	movs	r2, #64	; 0x40
 800402c:	4082      	lsls	r2, r0
 800402e:	4313      	orrs	r3, r2
 8004030:	3401      	adds	r4, #1
 8004032:	9304      	str	r3, [sp, #16]
 8004034:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004038:	4825      	ldr	r0, [pc, #148]	; (80040d0 <_svfiprintf_r+0x1ec>)
 800403a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800403e:	2206      	movs	r2, #6
 8004040:	f7fc f8c6 	bl	80001d0 <memchr>
 8004044:	2800      	cmp	r0, #0
 8004046:	d038      	beq.n	80040ba <_svfiprintf_r+0x1d6>
 8004048:	4b22      	ldr	r3, [pc, #136]	; (80040d4 <_svfiprintf_r+0x1f0>)
 800404a:	bb1b      	cbnz	r3, 8004094 <_svfiprintf_r+0x1b0>
 800404c:	9b03      	ldr	r3, [sp, #12]
 800404e:	3307      	adds	r3, #7
 8004050:	f023 0307 	bic.w	r3, r3, #7
 8004054:	3308      	adds	r3, #8
 8004056:	9303      	str	r3, [sp, #12]
 8004058:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800405a:	4433      	add	r3, r6
 800405c:	9309      	str	r3, [sp, #36]	; 0x24
 800405e:	e768      	b.n	8003f32 <_svfiprintf_r+0x4e>
 8004060:	fb0c 3202 	mla	r2, ip, r2, r3
 8004064:	460c      	mov	r4, r1
 8004066:	2001      	movs	r0, #1
 8004068:	e7a6      	b.n	8003fb8 <_svfiprintf_r+0xd4>
 800406a:	2300      	movs	r3, #0
 800406c:	3401      	adds	r4, #1
 800406e:	9305      	str	r3, [sp, #20]
 8004070:	4619      	mov	r1, r3
 8004072:	f04f 0c0a 	mov.w	ip, #10
 8004076:	4620      	mov	r0, r4
 8004078:	f810 2b01 	ldrb.w	r2, [r0], #1
 800407c:	3a30      	subs	r2, #48	; 0x30
 800407e:	2a09      	cmp	r2, #9
 8004080:	d903      	bls.n	800408a <_svfiprintf_r+0x1a6>
 8004082:	2b00      	cmp	r3, #0
 8004084:	d0c6      	beq.n	8004014 <_svfiprintf_r+0x130>
 8004086:	9105      	str	r1, [sp, #20]
 8004088:	e7c4      	b.n	8004014 <_svfiprintf_r+0x130>
 800408a:	fb0c 2101 	mla	r1, ip, r1, r2
 800408e:	4604      	mov	r4, r0
 8004090:	2301      	movs	r3, #1
 8004092:	e7f0      	b.n	8004076 <_svfiprintf_r+0x192>
 8004094:	ab03      	add	r3, sp, #12
 8004096:	9300      	str	r3, [sp, #0]
 8004098:	462a      	mov	r2, r5
 800409a:	4b0f      	ldr	r3, [pc, #60]	; (80040d8 <_svfiprintf_r+0x1f4>)
 800409c:	a904      	add	r1, sp, #16
 800409e:	4638      	mov	r0, r7
 80040a0:	f3af 8000 	nop.w
 80040a4:	1c42      	adds	r2, r0, #1
 80040a6:	4606      	mov	r6, r0
 80040a8:	d1d6      	bne.n	8004058 <_svfiprintf_r+0x174>
 80040aa:	89ab      	ldrh	r3, [r5, #12]
 80040ac:	065b      	lsls	r3, r3, #25
 80040ae:	f53f af2d 	bmi.w	8003f0c <_svfiprintf_r+0x28>
 80040b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80040b4:	b01d      	add	sp, #116	; 0x74
 80040b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040ba:	ab03      	add	r3, sp, #12
 80040bc:	9300      	str	r3, [sp, #0]
 80040be:	462a      	mov	r2, r5
 80040c0:	4b05      	ldr	r3, [pc, #20]	; (80040d8 <_svfiprintf_r+0x1f4>)
 80040c2:	a904      	add	r1, sp, #16
 80040c4:	4638      	mov	r0, r7
 80040c6:	f000 f879 	bl	80041bc <_printf_i>
 80040ca:	e7eb      	b.n	80040a4 <_svfiprintf_r+0x1c0>
 80040cc:	08004554 	.word	0x08004554
 80040d0:	0800455e 	.word	0x0800455e
 80040d4:	00000000 	.word	0x00000000
 80040d8:	08003e31 	.word	0x08003e31
 80040dc:	0800455a 	.word	0x0800455a

080040e0 <_printf_common>:
 80040e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040e4:	4616      	mov	r6, r2
 80040e6:	4699      	mov	r9, r3
 80040e8:	688a      	ldr	r2, [r1, #8]
 80040ea:	690b      	ldr	r3, [r1, #16]
 80040ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80040f0:	4293      	cmp	r3, r2
 80040f2:	bfb8      	it	lt
 80040f4:	4613      	movlt	r3, r2
 80040f6:	6033      	str	r3, [r6, #0]
 80040f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80040fc:	4607      	mov	r7, r0
 80040fe:	460c      	mov	r4, r1
 8004100:	b10a      	cbz	r2, 8004106 <_printf_common+0x26>
 8004102:	3301      	adds	r3, #1
 8004104:	6033      	str	r3, [r6, #0]
 8004106:	6823      	ldr	r3, [r4, #0]
 8004108:	0699      	lsls	r1, r3, #26
 800410a:	bf42      	ittt	mi
 800410c:	6833      	ldrmi	r3, [r6, #0]
 800410e:	3302      	addmi	r3, #2
 8004110:	6033      	strmi	r3, [r6, #0]
 8004112:	6825      	ldr	r5, [r4, #0]
 8004114:	f015 0506 	ands.w	r5, r5, #6
 8004118:	d106      	bne.n	8004128 <_printf_common+0x48>
 800411a:	f104 0a19 	add.w	sl, r4, #25
 800411e:	68e3      	ldr	r3, [r4, #12]
 8004120:	6832      	ldr	r2, [r6, #0]
 8004122:	1a9b      	subs	r3, r3, r2
 8004124:	42ab      	cmp	r3, r5
 8004126:	dc26      	bgt.n	8004176 <_printf_common+0x96>
 8004128:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800412c:	1e13      	subs	r3, r2, #0
 800412e:	6822      	ldr	r2, [r4, #0]
 8004130:	bf18      	it	ne
 8004132:	2301      	movne	r3, #1
 8004134:	0692      	lsls	r2, r2, #26
 8004136:	d42b      	bmi.n	8004190 <_printf_common+0xb0>
 8004138:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800413c:	4649      	mov	r1, r9
 800413e:	4638      	mov	r0, r7
 8004140:	47c0      	blx	r8
 8004142:	3001      	adds	r0, #1
 8004144:	d01e      	beq.n	8004184 <_printf_common+0xa4>
 8004146:	6823      	ldr	r3, [r4, #0]
 8004148:	6922      	ldr	r2, [r4, #16]
 800414a:	f003 0306 	and.w	r3, r3, #6
 800414e:	2b04      	cmp	r3, #4
 8004150:	bf02      	ittt	eq
 8004152:	68e5      	ldreq	r5, [r4, #12]
 8004154:	6833      	ldreq	r3, [r6, #0]
 8004156:	1aed      	subeq	r5, r5, r3
 8004158:	68a3      	ldr	r3, [r4, #8]
 800415a:	bf0c      	ite	eq
 800415c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004160:	2500      	movne	r5, #0
 8004162:	4293      	cmp	r3, r2
 8004164:	bfc4      	itt	gt
 8004166:	1a9b      	subgt	r3, r3, r2
 8004168:	18ed      	addgt	r5, r5, r3
 800416a:	2600      	movs	r6, #0
 800416c:	341a      	adds	r4, #26
 800416e:	42b5      	cmp	r5, r6
 8004170:	d11a      	bne.n	80041a8 <_printf_common+0xc8>
 8004172:	2000      	movs	r0, #0
 8004174:	e008      	b.n	8004188 <_printf_common+0xa8>
 8004176:	2301      	movs	r3, #1
 8004178:	4652      	mov	r2, sl
 800417a:	4649      	mov	r1, r9
 800417c:	4638      	mov	r0, r7
 800417e:	47c0      	blx	r8
 8004180:	3001      	adds	r0, #1
 8004182:	d103      	bne.n	800418c <_printf_common+0xac>
 8004184:	f04f 30ff 	mov.w	r0, #4294967295
 8004188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800418c:	3501      	adds	r5, #1
 800418e:	e7c6      	b.n	800411e <_printf_common+0x3e>
 8004190:	18e1      	adds	r1, r4, r3
 8004192:	1c5a      	adds	r2, r3, #1
 8004194:	2030      	movs	r0, #48	; 0x30
 8004196:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800419a:	4422      	add	r2, r4
 800419c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80041a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80041a4:	3302      	adds	r3, #2
 80041a6:	e7c7      	b.n	8004138 <_printf_common+0x58>
 80041a8:	2301      	movs	r3, #1
 80041aa:	4622      	mov	r2, r4
 80041ac:	4649      	mov	r1, r9
 80041ae:	4638      	mov	r0, r7
 80041b0:	47c0      	blx	r8
 80041b2:	3001      	adds	r0, #1
 80041b4:	d0e6      	beq.n	8004184 <_printf_common+0xa4>
 80041b6:	3601      	adds	r6, #1
 80041b8:	e7d9      	b.n	800416e <_printf_common+0x8e>
	...

080041bc <_printf_i>:
 80041bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041c0:	7e0f      	ldrb	r7, [r1, #24]
 80041c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80041c4:	2f78      	cmp	r7, #120	; 0x78
 80041c6:	4691      	mov	r9, r2
 80041c8:	4680      	mov	r8, r0
 80041ca:	460c      	mov	r4, r1
 80041cc:	469a      	mov	sl, r3
 80041ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80041d2:	d807      	bhi.n	80041e4 <_printf_i+0x28>
 80041d4:	2f62      	cmp	r7, #98	; 0x62
 80041d6:	d80a      	bhi.n	80041ee <_printf_i+0x32>
 80041d8:	2f00      	cmp	r7, #0
 80041da:	f000 80d4 	beq.w	8004386 <_printf_i+0x1ca>
 80041de:	2f58      	cmp	r7, #88	; 0x58
 80041e0:	f000 80c0 	beq.w	8004364 <_printf_i+0x1a8>
 80041e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80041ec:	e03a      	b.n	8004264 <_printf_i+0xa8>
 80041ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80041f2:	2b15      	cmp	r3, #21
 80041f4:	d8f6      	bhi.n	80041e4 <_printf_i+0x28>
 80041f6:	a101      	add	r1, pc, #4	; (adr r1, 80041fc <_printf_i+0x40>)
 80041f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80041fc:	08004255 	.word	0x08004255
 8004200:	08004269 	.word	0x08004269
 8004204:	080041e5 	.word	0x080041e5
 8004208:	080041e5 	.word	0x080041e5
 800420c:	080041e5 	.word	0x080041e5
 8004210:	080041e5 	.word	0x080041e5
 8004214:	08004269 	.word	0x08004269
 8004218:	080041e5 	.word	0x080041e5
 800421c:	080041e5 	.word	0x080041e5
 8004220:	080041e5 	.word	0x080041e5
 8004224:	080041e5 	.word	0x080041e5
 8004228:	0800436d 	.word	0x0800436d
 800422c:	08004295 	.word	0x08004295
 8004230:	08004327 	.word	0x08004327
 8004234:	080041e5 	.word	0x080041e5
 8004238:	080041e5 	.word	0x080041e5
 800423c:	0800438f 	.word	0x0800438f
 8004240:	080041e5 	.word	0x080041e5
 8004244:	08004295 	.word	0x08004295
 8004248:	080041e5 	.word	0x080041e5
 800424c:	080041e5 	.word	0x080041e5
 8004250:	0800432f 	.word	0x0800432f
 8004254:	682b      	ldr	r3, [r5, #0]
 8004256:	1d1a      	adds	r2, r3, #4
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	602a      	str	r2, [r5, #0]
 800425c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004260:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004264:	2301      	movs	r3, #1
 8004266:	e09f      	b.n	80043a8 <_printf_i+0x1ec>
 8004268:	6820      	ldr	r0, [r4, #0]
 800426a:	682b      	ldr	r3, [r5, #0]
 800426c:	0607      	lsls	r7, r0, #24
 800426e:	f103 0104 	add.w	r1, r3, #4
 8004272:	6029      	str	r1, [r5, #0]
 8004274:	d501      	bpl.n	800427a <_printf_i+0xbe>
 8004276:	681e      	ldr	r6, [r3, #0]
 8004278:	e003      	b.n	8004282 <_printf_i+0xc6>
 800427a:	0646      	lsls	r6, r0, #25
 800427c:	d5fb      	bpl.n	8004276 <_printf_i+0xba>
 800427e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004282:	2e00      	cmp	r6, #0
 8004284:	da03      	bge.n	800428e <_printf_i+0xd2>
 8004286:	232d      	movs	r3, #45	; 0x2d
 8004288:	4276      	negs	r6, r6
 800428a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800428e:	485a      	ldr	r0, [pc, #360]	; (80043f8 <_printf_i+0x23c>)
 8004290:	230a      	movs	r3, #10
 8004292:	e012      	b.n	80042ba <_printf_i+0xfe>
 8004294:	682b      	ldr	r3, [r5, #0]
 8004296:	6820      	ldr	r0, [r4, #0]
 8004298:	1d19      	adds	r1, r3, #4
 800429a:	6029      	str	r1, [r5, #0]
 800429c:	0605      	lsls	r5, r0, #24
 800429e:	d501      	bpl.n	80042a4 <_printf_i+0xe8>
 80042a0:	681e      	ldr	r6, [r3, #0]
 80042a2:	e002      	b.n	80042aa <_printf_i+0xee>
 80042a4:	0641      	lsls	r1, r0, #25
 80042a6:	d5fb      	bpl.n	80042a0 <_printf_i+0xe4>
 80042a8:	881e      	ldrh	r6, [r3, #0]
 80042aa:	4853      	ldr	r0, [pc, #332]	; (80043f8 <_printf_i+0x23c>)
 80042ac:	2f6f      	cmp	r7, #111	; 0x6f
 80042ae:	bf0c      	ite	eq
 80042b0:	2308      	moveq	r3, #8
 80042b2:	230a      	movne	r3, #10
 80042b4:	2100      	movs	r1, #0
 80042b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80042ba:	6865      	ldr	r5, [r4, #4]
 80042bc:	60a5      	str	r5, [r4, #8]
 80042be:	2d00      	cmp	r5, #0
 80042c0:	bfa2      	ittt	ge
 80042c2:	6821      	ldrge	r1, [r4, #0]
 80042c4:	f021 0104 	bicge.w	r1, r1, #4
 80042c8:	6021      	strge	r1, [r4, #0]
 80042ca:	b90e      	cbnz	r6, 80042d0 <_printf_i+0x114>
 80042cc:	2d00      	cmp	r5, #0
 80042ce:	d04b      	beq.n	8004368 <_printf_i+0x1ac>
 80042d0:	4615      	mov	r5, r2
 80042d2:	fbb6 f1f3 	udiv	r1, r6, r3
 80042d6:	fb03 6711 	mls	r7, r3, r1, r6
 80042da:	5dc7      	ldrb	r7, [r0, r7]
 80042dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80042e0:	4637      	mov	r7, r6
 80042e2:	42bb      	cmp	r3, r7
 80042e4:	460e      	mov	r6, r1
 80042e6:	d9f4      	bls.n	80042d2 <_printf_i+0x116>
 80042e8:	2b08      	cmp	r3, #8
 80042ea:	d10b      	bne.n	8004304 <_printf_i+0x148>
 80042ec:	6823      	ldr	r3, [r4, #0]
 80042ee:	07de      	lsls	r6, r3, #31
 80042f0:	d508      	bpl.n	8004304 <_printf_i+0x148>
 80042f2:	6923      	ldr	r3, [r4, #16]
 80042f4:	6861      	ldr	r1, [r4, #4]
 80042f6:	4299      	cmp	r1, r3
 80042f8:	bfde      	ittt	le
 80042fa:	2330      	movle	r3, #48	; 0x30
 80042fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004300:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004304:	1b52      	subs	r2, r2, r5
 8004306:	6122      	str	r2, [r4, #16]
 8004308:	f8cd a000 	str.w	sl, [sp]
 800430c:	464b      	mov	r3, r9
 800430e:	aa03      	add	r2, sp, #12
 8004310:	4621      	mov	r1, r4
 8004312:	4640      	mov	r0, r8
 8004314:	f7ff fee4 	bl	80040e0 <_printf_common>
 8004318:	3001      	adds	r0, #1
 800431a:	d14a      	bne.n	80043b2 <_printf_i+0x1f6>
 800431c:	f04f 30ff 	mov.w	r0, #4294967295
 8004320:	b004      	add	sp, #16
 8004322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004326:	6823      	ldr	r3, [r4, #0]
 8004328:	f043 0320 	orr.w	r3, r3, #32
 800432c:	6023      	str	r3, [r4, #0]
 800432e:	4833      	ldr	r0, [pc, #204]	; (80043fc <_printf_i+0x240>)
 8004330:	2778      	movs	r7, #120	; 0x78
 8004332:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004336:	6823      	ldr	r3, [r4, #0]
 8004338:	6829      	ldr	r1, [r5, #0]
 800433a:	061f      	lsls	r7, r3, #24
 800433c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004340:	d402      	bmi.n	8004348 <_printf_i+0x18c>
 8004342:	065f      	lsls	r7, r3, #25
 8004344:	bf48      	it	mi
 8004346:	b2b6      	uxthmi	r6, r6
 8004348:	07df      	lsls	r7, r3, #31
 800434a:	bf48      	it	mi
 800434c:	f043 0320 	orrmi.w	r3, r3, #32
 8004350:	6029      	str	r1, [r5, #0]
 8004352:	bf48      	it	mi
 8004354:	6023      	strmi	r3, [r4, #0]
 8004356:	b91e      	cbnz	r6, 8004360 <_printf_i+0x1a4>
 8004358:	6823      	ldr	r3, [r4, #0]
 800435a:	f023 0320 	bic.w	r3, r3, #32
 800435e:	6023      	str	r3, [r4, #0]
 8004360:	2310      	movs	r3, #16
 8004362:	e7a7      	b.n	80042b4 <_printf_i+0xf8>
 8004364:	4824      	ldr	r0, [pc, #144]	; (80043f8 <_printf_i+0x23c>)
 8004366:	e7e4      	b.n	8004332 <_printf_i+0x176>
 8004368:	4615      	mov	r5, r2
 800436a:	e7bd      	b.n	80042e8 <_printf_i+0x12c>
 800436c:	682b      	ldr	r3, [r5, #0]
 800436e:	6826      	ldr	r6, [r4, #0]
 8004370:	6961      	ldr	r1, [r4, #20]
 8004372:	1d18      	adds	r0, r3, #4
 8004374:	6028      	str	r0, [r5, #0]
 8004376:	0635      	lsls	r5, r6, #24
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	d501      	bpl.n	8004380 <_printf_i+0x1c4>
 800437c:	6019      	str	r1, [r3, #0]
 800437e:	e002      	b.n	8004386 <_printf_i+0x1ca>
 8004380:	0670      	lsls	r0, r6, #25
 8004382:	d5fb      	bpl.n	800437c <_printf_i+0x1c0>
 8004384:	8019      	strh	r1, [r3, #0]
 8004386:	2300      	movs	r3, #0
 8004388:	6123      	str	r3, [r4, #16]
 800438a:	4615      	mov	r5, r2
 800438c:	e7bc      	b.n	8004308 <_printf_i+0x14c>
 800438e:	682b      	ldr	r3, [r5, #0]
 8004390:	1d1a      	adds	r2, r3, #4
 8004392:	602a      	str	r2, [r5, #0]
 8004394:	681d      	ldr	r5, [r3, #0]
 8004396:	6862      	ldr	r2, [r4, #4]
 8004398:	2100      	movs	r1, #0
 800439a:	4628      	mov	r0, r5
 800439c:	f7fb ff18 	bl	80001d0 <memchr>
 80043a0:	b108      	cbz	r0, 80043a6 <_printf_i+0x1ea>
 80043a2:	1b40      	subs	r0, r0, r5
 80043a4:	6060      	str	r0, [r4, #4]
 80043a6:	6863      	ldr	r3, [r4, #4]
 80043a8:	6123      	str	r3, [r4, #16]
 80043aa:	2300      	movs	r3, #0
 80043ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043b0:	e7aa      	b.n	8004308 <_printf_i+0x14c>
 80043b2:	6923      	ldr	r3, [r4, #16]
 80043b4:	462a      	mov	r2, r5
 80043b6:	4649      	mov	r1, r9
 80043b8:	4640      	mov	r0, r8
 80043ba:	47d0      	blx	sl
 80043bc:	3001      	adds	r0, #1
 80043be:	d0ad      	beq.n	800431c <_printf_i+0x160>
 80043c0:	6823      	ldr	r3, [r4, #0]
 80043c2:	079b      	lsls	r3, r3, #30
 80043c4:	d413      	bmi.n	80043ee <_printf_i+0x232>
 80043c6:	68e0      	ldr	r0, [r4, #12]
 80043c8:	9b03      	ldr	r3, [sp, #12]
 80043ca:	4298      	cmp	r0, r3
 80043cc:	bfb8      	it	lt
 80043ce:	4618      	movlt	r0, r3
 80043d0:	e7a6      	b.n	8004320 <_printf_i+0x164>
 80043d2:	2301      	movs	r3, #1
 80043d4:	4632      	mov	r2, r6
 80043d6:	4649      	mov	r1, r9
 80043d8:	4640      	mov	r0, r8
 80043da:	47d0      	blx	sl
 80043dc:	3001      	adds	r0, #1
 80043de:	d09d      	beq.n	800431c <_printf_i+0x160>
 80043e0:	3501      	adds	r5, #1
 80043e2:	68e3      	ldr	r3, [r4, #12]
 80043e4:	9903      	ldr	r1, [sp, #12]
 80043e6:	1a5b      	subs	r3, r3, r1
 80043e8:	42ab      	cmp	r3, r5
 80043ea:	dcf2      	bgt.n	80043d2 <_printf_i+0x216>
 80043ec:	e7eb      	b.n	80043c6 <_printf_i+0x20a>
 80043ee:	2500      	movs	r5, #0
 80043f0:	f104 0619 	add.w	r6, r4, #25
 80043f4:	e7f5      	b.n	80043e2 <_printf_i+0x226>
 80043f6:	bf00      	nop
 80043f8:	08004565 	.word	0x08004565
 80043fc:	08004576 	.word	0x08004576

08004400 <memmove>:
 8004400:	4288      	cmp	r0, r1
 8004402:	b510      	push	{r4, lr}
 8004404:	eb01 0402 	add.w	r4, r1, r2
 8004408:	d902      	bls.n	8004410 <memmove+0x10>
 800440a:	4284      	cmp	r4, r0
 800440c:	4623      	mov	r3, r4
 800440e:	d807      	bhi.n	8004420 <memmove+0x20>
 8004410:	1e43      	subs	r3, r0, #1
 8004412:	42a1      	cmp	r1, r4
 8004414:	d008      	beq.n	8004428 <memmove+0x28>
 8004416:	f811 2b01 	ldrb.w	r2, [r1], #1
 800441a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800441e:	e7f8      	b.n	8004412 <memmove+0x12>
 8004420:	4402      	add	r2, r0
 8004422:	4601      	mov	r1, r0
 8004424:	428a      	cmp	r2, r1
 8004426:	d100      	bne.n	800442a <memmove+0x2a>
 8004428:	bd10      	pop	{r4, pc}
 800442a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800442e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004432:	e7f7      	b.n	8004424 <memmove+0x24>

08004434 <_sbrk_r>:
 8004434:	b538      	push	{r3, r4, r5, lr}
 8004436:	4d06      	ldr	r5, [pc, #24]	; (8004450 <_sbrk_r+0x1c>)
 8004438:	2300      	movs	r3, #0
 800443a:	4604      	mov	r4, r0
 800443c:	4608      	mov	r0, r1
 800443e:	602b      	str	r3, [r5, #0]
 8004440:	f7fc fac8 	bl	80009d4 <_sbrk>
 8004444:	1c43      	adds	r3, r0, #1
 8004446:	d102      	bne.n	800444e <_sbrk_r+0x1a>
 8004448:	682b      	ldr	r3, [r5, #0]
 800444a:	b103      	cbz	r3, 800444e <_sbrk_r+0x1a>
 800444c:	6023      	str	r3, [r4, #0]
 800444e:	bd38      	pop	{r3, r4, r5, pc}
 8004450:	200002b0 	.word	0x200002b0

08004454 <memcpy>:
 8004454:	440a      	add	r2, r1
 8004456:	4291      	cmp	r1, r2
 8004458:	f100 33ff 	add.w	r3, r0, #4294967295
 800445c:	d100      	bne.n	8004460 <memcpy+0xc>
 800445e:	4770      	bx	lr
 8004460:	b510      	push	{r4, lr}
 8004462:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004466:	f803 4f01 	strb.w	r4, [r3, #1]!
 800446a:	4291      	cmp	r1, r2
 800446c:	d1f9      	bne.n	8004462 <memcpy+0xe>
 800446e:	bd10      	pop	{r4, pc}

08004470 <_realloc_r>:
 8004470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004474:	4680      	mov	r8, r0
 8004476:	4614      	mov	r4, r2
 8004478:	460e      	mov	r6, r1
 800447a:	b921      	cbnz	r1, 8004486 <_realloc_r+0x16>
 800447c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004480:	4611      	mov	r1, r2
 8004482:	f7ff bc49 	b.w	8003d18 <_malloc_r>
 8004486:	b92a      	cbnz	r2, 8004494 <_realloc_r+0x24>
 8004488:	f7ff fbda 	bl	8003c40 <_free_r>
 800448c:	4625      	mov	r5, r4
 800448e:	4628      	mov	r0, r5
 8004490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004494:	f000 f81b 	bl	80044ce <_malloc_usable_size_r>
 8004498:	4284      	cmp	r4, r0
 800449a:	4607      	mov	r7, r0
 800449c:	d802      	bhi.n	80044a4 <_realloc_r+0x34>
 800449e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80044a2:	d812      	bhi.n	80044ca <_realloc_r+0x5a>
 80044a4:	4621      	mov	r1, r4
 80044a6:	4640      	mov	r0, r8
 80044a8:	f7ff fc36 	bl	8003d18 <_malloc_r>
 80044ac:	4605      	mov	r5, r0
 80044ae:	2800      	cmp	r0, #0
 80044b0:	d0ed      	beq.n	800448e <_realloc_r+0x1e>
 80044b2:	42bc      	cmp	r4, r7
 80044b4:	4622      	mov	r2, r4
 80044b6:	4631      	mov	r1, r6
 80044b8:	bf28      	it	cs
 80044ba:	463a      	movcs	r2, r7
 80044bc:	f7ff ffca 	bl	8004454 <memcpy>
 80044c0:	4631      	mov	r1, r6
 80044c2:	4640      	mov	r0, r8
 80044c4:	f7ff fbbc 	bl	8003c40 <_free_r>
 80044c8:	e7e1      	b.n	800448e <_realloc_r+0x1e>
 80044ca:	4635      	mov	r5, r6
 80044cc:	e7df      	b.n	800448e <_realloc_r+0x1e>

080044ce <_malloc_usable_size_r>:
 80044ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044d2:	1f18      	subs	r0, r3, #4
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	bfbc      	itt	lt
 80044d8:	580b      	ldrlt	r3, [r1, r0]
 80044da:	18c0      	addlt	r0, r0, r3
 80044dc:	4770      	bx	lr
	...

080044e0 <_init>:
 80044e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044e2:	bf00      	nop
 80044e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044e6:	bc08      	pop	{r3}
 80044e8:	469e      	mov	lr, r3
 80044ea:	4770      	bx	lr

080044ec <_fini>:
 80044ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ee:	bf00      	nop
 80044f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044f2:	bc08      	pop	{r3}
 80044f4:	469e      	mov	lr, r3
 80044f6:	4770      	bx	lr
