
14_ADC_Tem_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f94  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  0800411c  0800411c  0001411c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004168  08004168  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004168  08004168  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004168  08004168  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004168  08004168  00014168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800416c  0800416c  0001416c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004170  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  2000000c  0800417c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  0800417c  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ada8  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001cd4  00000000  00000000  0002ae27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a78  00000000  00000000  0002cb00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007bf  00000000  00000000  0002d578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026490  00000000  00000000  0002dd37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bb07  00000000  00000000  000541c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f1bfd  00000000  00000000  0005fcce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002af8  00000000  00000000  001518cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000086  00000000  00000000  001543c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004104 	.word	0x08004104

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004104 	.word	0x08004104

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2f>:
 8000794:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000798:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800079c:	bf24      	itt	cs
 800079e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007a2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007a6:	d90d      	bls.n	80007c4 <__aeabi_d2f+0x30>
 80007a8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007ac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007b0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007b4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007b8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007bc:	bf08      	it	eq
 80007be:	f020 0001 	biceq.w	r0, r0, #1
 80007c2:	4770      	bx	lr
 80007c4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007c8:	d121      	bne.n	800080e <__aeabi_d2f+0x7a>
 80007ca:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007ce:	bfbc      	itt	lt
 80007d0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007d4:	4770      	bxlt	lr
 80007d6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007da:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007de:	f1c2 0218 	rsb	r2, r2, #24
 80007e2:	f1c2 0c20 	rsb	ip, r2, #32
 80007e6:	fa10 f30c 	lsls.w	r3, r0, ip
 80007ea:	fa20 f002 	lsr.w	r0, r0, r2
 80007ee:	bf18      	it	ne
 80007f0:	f040 0001 	orrne.w	r0, r0, #1
 80007f4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007f8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007fc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000800:	ea40 000c 	orr.w	r0, r0, ip
 8000804:	fa23 f302 	lsr.w	r3, r3, r2
 8000808:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800080c:	e7cc      	b.n	80007a8 <__aeabi_d2f+0x14>
 800080e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000812:	d107      	bne.n	8000824 <__aeabi_d2f+0x90>
 8000814:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000818:	bf1e      	ittt	ne
 800081a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800081e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000822:	4770      	bxne	lr
 8000824:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000828:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800082c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop

08000834 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000838:	f000 f9ef 	bl	8000c1a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800083c:	f000 f816 	bl	800086c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000840:	f000 f8dc 	bl	80009fc <MX_GPIO_Init>
  MX_ADC1_Init();
 8000844:	f000 f864 	bl	8000910 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  LM35_Init(0);
 8000848:	2000      	movs	r0, #0
 800084a:	f003 fb2f 	bl	8003eac <LM35_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	Temp = LM35_Read(0);
 800084e:	2000      	movs	r0, #0
 8000850:	f003 fbe6 	bl	8004020 <LM35_Read>
 8000854:	eef0 7a40 	vmov.f32	s15, s0
 8000858:	4b03      	ldr	r3, [pc, #12]	; (8000868 <main+0x34>)
 800085a:	edc3 7a00 	vstr	s15, [r3]
	HAL_Delay(100);
 800085e:	2064      	movs	r0, #100	; 0x64
 8000860:	f000 fa50 	bl	8000d04 <HAL_Delay>
	Temp = LM35_Read(0);
 8000864:	e7f3      	b.n	800084e <main+0x1a>
 8000866:	bf00      	nop
 8000868:	20000028 	.word	0x20000028

0800086c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b096      	sub	sp, #88	; 0x58
 8000870:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000872:	f107 0314 	add.w	r3, r7, #20
 8000876:	2244      	movs	r2, #68	; 0x44
 8000878:	2100      	movs	r1, #0
 800087a:	4618      	mov	r0, r3
 800087c:	f003 fc16 	bl	80040ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000880:	463b      	mov	r3, r7
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	60da      	str	r2, [r3, #12]
 800088c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800088e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000892:	f002 f831 	bl	80028f8 <HAL_PWREx_ControlVoltageScaling>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800089c:	f000 f8c6 	bl	8000a2c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80008a0:	2310      	movs	r3, #16
 80008a2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80008a4:	2301      	movs	r3, #1
 80008a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80008a8:	2300      	movs	r3, #0
 80008aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80008ac:	2360      	movs	r3, #96	; 0x60
 80008ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008b0:	2302      	movs	r3, #2
 80008b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80008b4:	2301      	movs	r3, #1
 80008b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008b8:	2301      	movs	r3, #1
 80008ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 80008bc:	231e      	movs	r3, #30
 80008be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008c0:	2307      	movs	r3, #7
 80008c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008c4:	2302      	movs	r3, #2
 80008c6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008c8:	2302      	movs	r3, #2
 80008ca:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008cc:	f107 0314 	add.w	r3, r7, #20
 80008d0:	4618      	mov	r0, r3
 80008d2:	f002 f867 	bl	80029a4 <HAL_RCC_OscConfig>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80008dc:	f000 f8a6 	bl	8000a2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008e0:	230f      	movs	r3, #15
 80008e2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008e4:	2303      	movs	r3, #3
 80008e6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e8:	2300      	movs	r3, #0
 80008ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008ec:	2300      	movs	r3, #0
 80008ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008f0:	2300      	movs	r3, #0
 80008f2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008f4:	463b      	mov	r3, r7
 80008f6:	2103      	movs	r1, #3
 80008f8:	4618      	mov	r0, r3
 80008fa:	f002 fc2f 	bl	800315c <HAL_RCC_ClockConfig>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000904:	f000 f892 	bl	8000a2c <Error_Handler>
  }
}
 8000908:	bf00      	nop
 800090a:	3758      	adds	r7, #88	; 0x58
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}

08000910 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08a      	sub	sp, #40	; 0x28
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	605a      	str	r2, [r3, #4]
 8000920:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000922:	1d3b      	adds	r3, r7, #4
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
 800092a:	609a      	str	r2, [r3, #8]
 800092c:	60da      	str	r2, [r3, #12]
 800092e:	611a      	str	r2, [r3, #16]
 8000930:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000932:	4b2f      	ldr	r3, [pc, #188]	; (80009f0 <MX_ADC1_Init+0xe0>)
 8000934:	4a2f      	ldr	r2, [pc, #188]	; (80009f4 <MX_ADC1_Init+0xe4>)
 8000936:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000938:	4b2d      	ldr	r3, [pc, #180]	; (80009f0 <MX_ADC1_Init+0xe0>)
 800093a:	2200      	movs	r2, #0
 800093c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800093e:	4b2c      	ldr	r3, [pc, #176]	; (80009f0 <MX_ADC1_Init+0xe0>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000944:	4b2a      	ldr	r3, [pc, #168]	; (80009f0 <MX_ADC1_Init+0xe0>)
 8000946:	2200      	movs	r2, #0
 8000948:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800094a:	4b29      	ldr	r3, [pc, #164]	; (80009f0 <MX_ADC1_Init+0xe0>)
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000950:	4b27      	ldr	r3, [pc, #156]	; (80009f0 <MX_ADC1_Init+0xe0>)
 8000952:	2204      	movs	r2, #4
 8000954:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000956:	4b26      	ldr	r3, [pc, #152]	; (80009f0 <MX_ADC1_Init+0xe0>)
 8000958:	2200      	movs	r2, #0
 800095a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800095c:	4b24      	ldr	r3, [pc, #144]	; (80009f0 <MX_ADC1_Init+0xe0>)
 800095e:	2200      	movs	r2, #0
 8000960:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000962:	4b23      	ldr	r3, [pc, #140]	; (80009f0 <MX_ADC1_Init+0xe0>)
 8000964:	2201      	movs	r2, #1
 8000966:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000968:	4b21      	ldr	r3, [pc, #132]	; (80009f0 <MX_ADC1_Init+0xe0>)
 800096a:	2200      	movs	r2, #0
 800096c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000970:	4b1f      	ldr	r3, [pc, #124]	; (80009f0 <MX_ADC1_Init+0xe0>)
 8000972:	2200      	movs	r2, #0
 8000974:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000976:	4b1e      	ldr	r3, [pc, #120]	; (80009f0 <MX_ADC1_Init+0xe0>)
 8000978:	2200      	movs	r2, #0
 800097a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800097c:	4b1c      	ldr	r3, [pc, #112]	; (80009f0 <MX_ADC1_Init+0xe0>)
 800097e:	2200      	movs	r2, #0
 8000980:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000984:	4b1a      	ldr	r3, [pc, #104]	; (80009f0 <MX_ADC1_Init+0xe0>)
 8000986:	2200      	movs	r2, #0
 8000988:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800098a:	4b19      	ldr	r3, [pc, #100]	; (80009f0 <MX_ADC1_Init+0xe0>)
 800098c:	2200      	movs	r2, #0
 800098e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000992:	4817      	ldr	r0, [pc, #92]	; (80009f0 <MX_ADC1_Init+0xe0>)
 8000994:	f000 fbe4 	bl	8001160 <HAL_ADC_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800099e:	f000 f845 	bl	8000a2c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80009a2:	2300      	movs	r3, #0
 80009a4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	4619      	mov	r1, r3
 80009ac:	4810      	ldr	r0, [pc, #64]	; (80009f0 <MX_ADC1_Init+0xe0>)
 80009ae:	f001 fc55 	bl	800225c <HAL_ADCEx_MultiModeConfigChannel>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80009b8:	f000 f838 	bl	8000a2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80009bc:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <MX_ADC1_Init+0xe8>)
 80009be:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009c0:	2306      	movs	r3, #6
 80009c2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80009c4:	2300      	movs	r3, #0
 80009c6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009c8:	237f      	movs	r3, #127	; 0x7f
 80009ca:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009cc:	2304      	movs	r3, #4
 80009ce:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009d4:	1d3b      	adds	r3, r7, #4
 80009d6:	4619      	mov	r1, r3
 80009d8:	4805      	ldr	r0, [pc, #20]	; (80009f0 <MX_ADC1_Init+0xe0>)
 80009da:	f000 feb7 	bl	800174c <HAL_ADC_ConfigChannel>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80009e4:	f000 f822 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009e8:	bf00      	nop
 80009ea:	3728      	adds	r7, #40	; 0x28
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	2000002c 	.word	0x2000002c
 80009f4:	50040000 	.word	0x50040000
 80009f8:	1d500080 	.word	0x1d500080

080009fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a02:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <MX_GPIO_Init+0x2c>)
 8000a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a06:	4a08      	ldr	r2, [pc, #32]	; (8000a28 <MX_GPIO_Init+0x2c>)
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a0e:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <MX_GPIO_Init+0x2c>)
 8000a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a1a:	bf00      	nop
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	40021000 	.word	0x40021000

08000a2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a30:	b672      	cpsid	i
}
 8000a32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a34:	e7fe      	b.n	8000a34 <Error_Handler+0x8>
	...

08000a38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3e:	4b0f      	ldr	r3, [pc, #60]	; (8000a7c <HAL_MspInit+0x44>)
 8000a40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a42:	4a0e      	ldr	r2, [pc, #56]	; (8000a7c <HAL_MspInit+0x44>)
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	6613      	str	r3, [r2, #96]	; 0x60
 8000a4a:	4b0c      	ldr	r3, [pc, #48]	; (8000a7c <HAL_MspInit+0x44>)
 8000a4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a56:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <HAL_MspInit+0x44>)
 8000a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a5a:	4a08      	ldr	r2, [pc, #32]	; (8000a7c <HAL_MspInit+0x44>)
 8000a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a60:	6593      	str	r3, [r2, #88]	; 0x58
 8000a62:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <HAL_MspInit+0x44>)
 8000a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a6a:	603b      	str	r3, [r7, #0]
 8000a6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	370c      	adds	r7, #12
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	40021000 	.word	0x40021000

08000a80 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b0ac      	sub	sp, #176	; 0xb0
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a88:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]
 8000a96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	2288      	movs	r2, #136	; 0x88
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f003 fb03 	bl	80040ac <memset>
  if(hadc->Instance==ADC1)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4a27      	ldr	r2, [pc, #156]	; (8000b48 <HAL_ADC_MspInit+0xc8>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d147      	bne.n	8000b40 <HAL_ADC_MspInit+0xc0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000ab0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ab4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000ab6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000aba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000ac6:	2310      	movs	r3, #16
 8000ac8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000aca:	2307      	movs	r3, #7
 8000acc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000ad6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ada:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000adc:	f107 0314 	add.w	r3, r7, #20
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f002 fd27 	bl	8003534 <HAL_RCCEx_PeriphCLKConfig>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000aec:	f7ff ff9e 	bl	8000a2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000af0:	4b16      	ldr	r3, [pc, #88]	; (8000b4c <HAL_ADC_MspInit+0xcc>)
 8000af2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af4:	4a15      	ldr	r2, [pc, #84]	; (8000b4c <HAL_ADC_MspInit+0xcc>)
 8000af6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000afa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000afc:	4b13      	ldr	r3, [pc, #76]	; (8000b4c <HAL_ADC_MspInit+0xcc>)
 8000afe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b04:	613b      	str	r3, [r7, #16]
 8000b06:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b08:	4b10      	ldr	r3, [pc, #64]	; (8000b4c <HAL_ADC_MspInit+0xcc>)
 8000b0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0c:	4a0f      	ldr	r2, [pc, #60]	; (8000b4c <HAL_ADC_MspInit+0xcc>)
 8000b0e:	f043 0301 	orr.w	r3, r3, #1
 8000b12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b14:	4b0d      	ldr	r3, [pc, #52]	; (8000b4c <HAL_ADC_MspInit+0xcc>)
 8000b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b18:	f003 0301 	and.w	r3, r3, #1
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b20:	2304      	movs	r3, #4
 8000b22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b26:	230b      	movs	r3, #11
 8000b28:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b32:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b36:	4619      	mov	r1, r3
 8000b38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b3c:	f001 fd24 	bl	8002588 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b40:	bf00      	nop
 8000b42:	37b0      	adds	r7, #176	; 0xb0
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	50040000 	.word	0x50040000
 8000b4c:	40021000 	.word	0x40021000

08000b50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <NMI_Handler+0x4>

08000b56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b5a:	e7fe      	b.n	8000b5a <HardFault_Handler+0x4>

08000b5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <MemManage_Handler+0x4>

08000b62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b66:	e7fe      	b.n	8000b66 <BusFault_Handler+0x4>

08000b68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <UsageFault_Handler+0x4>

08000b6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr

08000b8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b9c:	f000 f892 	bl	8000cc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <SystemInit+0x20>)
 8000baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bae:	4a05      	ldr	r2, [pc, #20]	; (8000bc4 <SystemInit+0x20>)
 8000bb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c00 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bcc:	f7ff ffea 	bl	8000ba4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bd0:	480c      	ldr	r0, [pc, #48]	; (8000c04 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bd2:	490d      	ldr	r1, [pc, #52]	; (8000c08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bd4:	4a0d      	ldr	r2, [pc, #52]	; (8000c0c <LoopForever+0xe>)
  movs r3, #0
 8000bd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd8:	e002      	b.n	8000be0 <LoopCopyDataInit>

08000bda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bde:	3304      	adds	r3, #4

08000be0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000be2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be4:	d3f9      	bcc.n	8000bda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000be6:	4a0a      	ldr	r2, [pc, #40]	; (8000c10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000be8:	4c0a      	ldr	r4, [pc, #40]	; (8000c14 <LoopForever+0x16>)
  movs r3, #0
 8000bea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bec:	e001      	b.n	8000bf2 <LoopFillZerobss>

08000bee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf0:	3204      	adds	r2, #4

08000bf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf4:	d3fb      	bcc.n	8000bee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bf6:	f003 fa61 	bl	80040bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bfa:	f7ff fe1b 	bl	8000834 <main>

08000bfe <LoopForever>:

LoopForever:
    b LoopForever
 8000bfe:	e7fe      	b.n	8000bfe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c00:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c08:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c0c:	08004170 	.word	0x08004170
  ldr r2, =_sbss
 8000c10:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c14:	20000114 	.word	0x20000114

08000c18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c18:	e7fe      	b.n	8000c18 <ADC1_2_IRQHandler>

08000c1a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b082      	sub	sp, #8
 8000c1e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c20:	2300      	movs	r3, #0
 8000c22:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c24:	2003      	movs	r0, #3
 8000c26:	f001 fc7b 	bl	8002520 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c2a:	200f      	movs	r0, #15
 8000c2c:	f000 f80e 	bl	8000c4c <HAL_InitTick>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d002      	beq.n	8000c3c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
 8000c38:	71fb      	strb	r3, [r7, #7]
 8000c3a:	e001      	b.n	8000c40 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c3c:	f7ff fefc 	bl	8000a38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c40:	79fb      	ldrb	r3, [r7, #7]
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
	...

08000c4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c54:	2300      	movs	r3, #0
 8000c56:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c58:	4b17      	ldr	r3, [pc, #92]	; (8000cb8 <HAL_InitTick+0x6c>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d023      	beq.n	8000ca8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c60:	4b16      	ldr	r3, [pc, #88]	; (8000cbc <HAL_InitTick+0x70>)
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	4b14      	ldr	r3, [pc, #80]	; (8000cb8 <HAL_InitTick+0x6c>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	4619      	mov	r1, r3
 8000c6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c76:	4618      	mov	r0, r3
 8000c78:	f001 fc79 	bl	800256e <HAL_SYSTICK_Config>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d10f      	bne.n	8000ca2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2b0f      	cmp	r3, #15
 8000c86:	d809      	bhi.n	8000c9c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	6879      	ldr	r1, [r7, #4]
 8000c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c90:	f001 fc51 	bl	8002536 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c94:	4a0a      	ldr	r2, [pc, #40]	; (8000cc0 <HAL_InitTick+0x74>)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6013      	str	r3, [r2, #0]
 8000c9a:	e007      	b.n	8000cac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	73fb      	strb	r3, [r7, #15]
 8000ca0:	e004      	b.n	8000cac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	73fb      	strb	r3, [r7, #15]
 8000ca6:	e001      	b.n	8000cac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3710      	adds	r7, #16
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	20000008 	.word	0x20000008
 8000cbc:	20000000 	.word	0x20000000
 8000cc0:	20000004 	.word	0x20000004

08000cc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cc8:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <HAL_IncTick+0x20>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	461a      	mov	r2, r3
 8000cce:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <HAL_IncTick+0x24>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	4a04      	ldr	r2, [pc, #16]	; (8000ce8 <HAL_IncTick+0x24>)
 8000cd6:	6013      	str	r3, [r2, #0]
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	20000008 	.word	0x20000008
 8000ce8:	20000090 	.word	0x20000090

08000cec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf0:	4b03      	ldr	r3, [pc, #12]	; (8000d00 <HAL_GetTick+0x14>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	20000090 	.word	0x20000090

08000d04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d0c:	f7ff ffee 	bl	8000cec <HAL_GetTick>
 8000d10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d1c:	d005      	beq.n	8000d2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000d1e:	4b0a      	ldr	r3, [pc, #40]	; (8000d48 <HAL_Delay+0x44>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	461a      	mov	r2, r3
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	4413      	add	r3, r2
 8000d28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d2a:	bf00      	nop
 8000d2c:	f7ff ffde 	bl	8000cec <HAL_GetTick>
 8000d30:	4602      	mov	r2, r0
 8000d32:	68bb      	ldr	r3, [r7, #8]
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	68fa      	ldr	r2, [r7, #12]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	d8f7      	bhi.n	8000d2c <HAL_Delay+0x28>
  {
  }
}
 8000d3c:	bf00      	nop
 8000d3e:	bf00      	nop
 8000d40:	3710      	adds	r7, #16
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	20000008 	.word	0x20000008

08000d4c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	431a      	orrs	r2, r3
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	609a      	str	r2, [r3, #8]
}
 8000d66:	bf00      	nop
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr

08000d72 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000d72:	b480      	push	{r7}
 8000d74:	b083      	sub	sp, #12
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
 8000d7a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	689b      	ldr	r3, [r3, #8]
 8000d80:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	431a      	orrs	r2, r3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
}
 8000d8c:	bf00      	nop
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b087      	sub	sp, #28
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	607a      	str	r2, [r7, #4]
 8000dc0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	3360      	adds	r3, #96	; 0x60
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	4413      	add	r3, r2
 8000dce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <LL_ADC_SetOffset+0x44>)
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	687a      	ldr	r2, [r7, #4]
 8000dda:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000dde:	683a      	ldr	r2, [r7, #0]
 8000de0:	430a      	orrs	r2, r1
 8000de2:	4313      	orrs	r3, r2
 8000de4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000dec:	bf00      	nop
 8000dee:	371c      	adds	r7, #28
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	03fff000 	.word	0x03fff000

08000dfc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b085      	sub	sp, #20
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	3360      	adds	r3, #96	; 0x60
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	4413      	add	r3, r2
 8000e12:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3714      	adds	r7, #20
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr

08000e28 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b087      	sub	sp, #28
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	3360      	adds	r3, #96	; 0x60
 8000e38:	461a      	mov	r2, r3
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	4413      	add	r3, r2
 8000e40:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	431a      	orrs	r2, r3
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000e52:	bf00      	nop
 8000e54:	371c      	adds	r7, #28
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr

08000e5e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	b083      	sub	sp, #12
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	68db      	ldr	r3, [r3, #12]
 8000e6a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d101      	bne.n	8000e76 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000e72:	2301      	movs	r3, #1
 8000e74:	e000      	b.n	8000e78 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000e76:	2300      	movs	r3, #0
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b087      	sub	sp, #28
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	60b9      	str	r1, [r7, #8]
 8000e8e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	3330      	adds	r3, #48	; 0x30
 8000e94:	461a      	mov	r2, r3
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	0a1b      	lsrs	r3, r3, #8
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	f003 030c 	and.w	r3, r3, #12
 8000ea0:	4413      	add	r3, r2
 8000ea2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	f003 031f 	and.w	r3, r3, #31
 8000eae:	211f      	movs	r1, #31
 8000eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	401a      	ands	r2, r3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	0e9b      	lsrs	r3, r3, #26
 8000ebc:	f003 011f 	and.w	r1, r3, #31
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	f003 031f 	and.w	r3, r3, #31
 8000ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eca:	431a      	orrs	r2, r3
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000ed0:	bf00      	nop
 8000ed2:	371c      	adds	r7, #28
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b087      	sub	sp, #28
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	3314      	adds	r3, #20
 8000eec:	461a      	mov	r2, r3
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	0e5b      	lsrs	r3, r3, #25
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	f003 0304 	and.w	r3, r3, #4
 8000ef8:	4413      	add	r3, r2
 8000efa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	0d1b      	lsrs	r3, r3, #20
 8000f04:	f003 031f 	and.w	r3, r3, #31
 8000f08:	2107      	movs	r1, #7
 8000f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0e:	43db      	mvns	r3, r3
 8000f10:	401a      	ands	r2, r3
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	0d1b      	lsrs	r3, r3, #20
 8000f16:	f003 031f 	and.w	r3, r3, #31
 8000f1a:	6879      	ldr	r1, [r7, #4]
 8000f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f20:	431a      	orrs	r2, r3
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000f26:	bf00      	nop
 8000f28:	371c      	adds	r7, #28
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
	...

08000f34 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	401a      	ands	r2, r3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f003 0318 	and.w	r3, r3, #24
 8000f56:	4908      	ldr	r1, [pc, #32]	; (8000f78 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000f58:	40d9      	lsrs	r1, r3
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	400b      	ands	r3, r1
 8000f5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f62:	431a      	orrs	r2, r3
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000f6a:	bf00      	nop
 8000f6c:	3714      	adds	r7, #20
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	0007ffff 	.word	0x0007ffff

08000f7c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	f003 031f 	and.w	r3, r3, #31
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000fc4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000fc8:	687a      	ldr	r2, [r7, #4]
 8000fca:	6093      	str	r3, [r2, #8]
}
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000fe8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000fec:	d101      	bne.n	8000ff2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e000      	b.n	8000ff4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000ff2:	2300      	movs	r3, #0
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001010:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001014:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001038:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800103c:	d101      	bne.n	8001042 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800103e:	2301      	movs	r3, #1
 8001040:	e000      	b.n	8001044 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001042:	2300      	movs	r3, #0
}
 8001044:	4618      	mov	r0, r3
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001060:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001064:	f043 0201 	orr.w	r2, r3, #1
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001088:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800108c:	f043 0202 	orr.w	r2, r3, #2
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	f003 0301 	and.w	r3, r3, #1
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d101      	bne.n	80010b8 <LL_ADC_IsEnabled+0x18>
 80010b4:	2301      	movs	r3, #1
 80010b6:	e000      	b.n	80010ba <LL_ADC_IsEnabled+0x1a>
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr

080010c6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80010c6:	b480      	push	{r7}
 80010c8:	b083      	sub	sp, #12
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	f003 0302 	and.w	r3, r3, #2
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	d101      	bne.n	80010de <LL_ADC_IsDisableOngoing+0x18>
 80010da:	2301      	movs	r3, #1
 80010dc:	e000      	b.n	80010e0 <LL_ADC_IsDisableOngoing+0x1a>
 80010de:	2300      	movs	r3, #0
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80010fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001100:	f043 0204 	orr.w	r2, r3, #4
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001108:	bf00      	nop
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	f003 0304 	and.w	r3, r3, #4
 8001124:	2b04      	cmp	r3, #4
 8001126:	d101      	bne.n	800112c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001128:	2301      	movs	r3, #1
 800112a:	e000      	b.n	800112e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800112c:	2300      	movs	r3, #0
}
 800112e:	4618      	mov	r0, r3
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr

0800113a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800113a:	b480      	push	{r7}
 800113c:	b083      	sub	sp, #12
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	f003 0308 	and.w	r3, r3, #8
 800114a:	2b08      	cmp	r3, #8
 800114c:	d101      	bne.n	8001152 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800114e:	2301      	movs	r3, #1
 8001150:	e000      	b.n	8001154 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001152:	2300      	movs	r3, #0
}
 8001154:	4618      	mov	r0, r3
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001160:	b590      	push	{r4, r7, lr}
 8001162:	b089      	sub	sp, #36	; 0x24
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001168:	2300      	movs	r3, #0
 800116a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800116c:	2300      	movs	r3, #0
 800116e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d101      	bne.n	800117a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e136      	b.n	80013e8 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	691b      	ldr	r3, [r3, #16]
 800117e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001184:	2b00      	cmp	r3, #0
 8001186:	d109      	bne.n	800119c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f7ff fc79 	bl	8000a80 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2200      	movs	r2, #0
 8001192:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2200      	movs	r2, #0
 8001198:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff ff19 	bl	8000fd8 <LL_ADC_IsDeepPowerDownEnabled>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d004      	beq.n	80011b6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff feff 	bl	8000fb4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff ff34 	bl	8001028 <LL_ADC_IsInternalRegulatorEnabled>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d115      	bne.n	80011f2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff ff18 	bl	8001000 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80011d0:	4b87      	ldr	r3, [pc, #540]	; (80013f0 <HAL_ADC_Init+0x290>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	099b      	lsrs	r3, r3, #6
 80011d6:	4a87      	ldr	r2, [pc, #540]	; (80013f4 <HAL_ADC_Init+0x294>)
 80011d8:	fba2 2303 	umull	r2, r3, r2, r3
 80011dc:	099b      	lsrs	r3, r3, #6
 80011de:	3301      	adds	r3, #1
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80011e4:	e002      	b.n	80011ec <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	3b01      	subs	r3, #1
 80011ea:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d1f9      	bne.n	80011e6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff ff16 	bl	8001028 <LL_ADC_IsInternalRegulatorEnabled>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d10d      	bne.n	800121e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001206:	f043 0210 	orr.w	r2, r3, #16
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001212:	f043 0201 	orr.w	r2, r3, #1
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff ff76 	bl	8001114 <LL_ADC_REG_IsConversionOngoing>
 8001228:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800122e:	f003 0310 	and.w	r3, r3, #16
 8001232:	2b00      	cmp	r3, #0
 8001234:	f040 80cf 	bne.w	80013d6 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	2b00      	cmp	r3, #0
 800123c:	f040 80cb 	bne.w	80013d6 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001244:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001248:	f043 0202 	orr.w	r2, r3, #2
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff ff23 	bl	80010a0 <LL_ADC_IsEnabled>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d115      	bne.n	800128c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001260:	4865      	ldr	r0, [pc, #404]	; (80013f8 <HAL_ADC_Init+0x298>)
 8001262:	f7ff ff1d 	bl	80010a0 <LL_ADC_IsEnabled>
 8001266:	4604      	mov	r4, r0
 8001268:	4864      	ldr	r0, [pc, #400]	; (80013fc <HAL_ADC_Init+0x29c>)
 800126a:	f7ff ff19 	bl	80010a0 <LL_ADC_IsEnabled>
 800126e:	4603      	mov	r3, r0
 8001270:	431c      	orrs	r4, r3
 8001272:	4863      	ldr	r0, [pc, #396]	; (8001400 <HAL_ADC_Init+0x2a0>)
 8001274:	f7ff ff14 	bl	80010a0 <LL_ADC_IsEnabled>
 8001278:	4603      	mov	r3, r0
 800127a:	4323      	orrs	r3, r4
 800127c:	2b00      	cmp	r3, #0
 800127e:	d105      	bne.n	800128c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	4619      	mov	r1, r3
 8001286:	485f      	ldr	r0, [pc, #380]	; (8001404 <HAL_ADC_Init+0x2a4>)
 8001288:	f7ff fd60 	bl	8000d4c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	7e5b      	ldrb	r3, [r3, #25]
 8001290:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001296:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800129c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80012a2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012aa:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80012ac:	4313      	orrs	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d106      	bne.n	80012c8 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012be:	3b01      	subs	r3, #1
 80012c0:	045b      	lsls	r3, r3, #17
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d009      	beq.n	80012e4 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012dc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	68da      	ldr	r2, [r3, #12]
 80012ea:	4b47      	ldr	r3, [pc, #284]	; (8001408 <HAL_ADC_Init+0x2a8>)
 80012ec:	4013      	ands	r3, r2
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	6812      	ldr	r2, [r2, #0]
 80012f2:	69b9      	ldr	r1, [r7, #24]
 80012f4:	430b      	orrs	r3, r1
 80012f6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff ff09 	bl	8001114 <LL_ADC_REG_IsConversionOngoing>
 8001302:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff ff16 	bl	800113a <LL_ADC_INJ_IsConversionOngoing>
 800130e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d13d      	bne.n	8001392 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d13a      	bne.n	8001392 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001320:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001328:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800132a:	4313      	orrs	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001338:	f023 0302 	bic.w	r3, r3, #2
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	6812      	ldr	r2, [r2, #0]
 8001340:	69b9      	ldr	r1, [r7, #24]
 8001342:	430b      	orrs	r3, r1
 8001344:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800134c:	2b01      	cmp	r3, #1
 800134e:	d118      	bne.n	8001382 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	691b      	ldr	r3, [r3, #16]
 8001356:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800135a:	f023 0304 	bic.w	r3, r3, #4
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001366:	4311      	orrs	r1, r2
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800136c:	4311      	orrs	r1, r2
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001372:	430a      	orrs	r2, r1
 8001374:	431a      	orrs	r2, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f042 0201 	orr.w	r2, r2, #1
 800137e:	611a      	str	r2, [r3, #16]
 8001380:	e007      	b.n	8001392 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	691a      	ldr	r2, [r3, #16]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f022 0201 	bic.w	r2, r2, #1
 8001390:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	691b      	ldr	r3, [r3, #16]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d10c      	bne.n	80013b4 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a0:	f023 010f 	bic.w	r1, r3, #15
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	69db      	ldr	r3, [r3, #28]
 80013a8:	1e5a      	subs	r2, r3, #1
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	430a      	orrs	r2, r1
 80013b0:	631a      	str	r2, [r3, #48]	; 0x30
 80013b2:	e007      	b.n	80013c4 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f022 020f 	bic.w	r2, r2, #15
 80013c2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013c8:	f023 0303 	bic.w	r3, r3, #3
 80013cc:	f043 0201 	orr.w	r2, r3, #1
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	655a      	str	r2, [r3, #84]	; 0x54
 80013d4:	e007      	b.n	80013e6 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013da:	f043 0210 	orr.w	r2, r3, #16
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80013e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3724      	adds	r7, #36	; 0x24
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd90      	pop	{r4, r7, pc}
 80013f0:	20000000 	.word	0x20000000
 80013f4:	053e2d63 	.word	0x053e2d63
 80013f8:	50040000 	.word	0x50040000
 80013fc:	50040100 	.word	0x50040100
 8001400:	50040200 	.word	0x50040200
 8001404:	50040300 	.word	0x50040300
 8001408:	fff0c007 	.word	0xfff0c007

0800140c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b086      	sub	sp, #24
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001414:	4857      	ldr	r0, [pc, #348]	; (8001574 <HAL_ADC_Start+0x168>)
 8001416:	f7ff fdb1 	bl	8000f7c <LL_ADC_GetMultimode>
 800141a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff fe77 	bl	8001114 <LL_ADC_REG_IsConversionOngoing>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	f040 809c 	bne.w	8001566 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001434:	2b01      	cmp	r3, #1
 8001436:	d101      	bne.n	800143c <HAL_ADC_Start+0x30>
 8001438:	2302      	movs	r3, #2
 800143a:	e097      	b.n	800156c <HAL_ADC_Start+0x160>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2201      	movs	r2, #1
 8001440:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f000 fd71 	bl	8001f2c <ADC_Enable>
 800144a:	4603      	mov	r3, r0
 800144c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800144e:	7dfb      	ldrb	r3, [r7, #23]
 8001450:	2b00      	cmp	r3, #0
 8001452:	f040 8083 	bne.w	800155c <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800145a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800145e:	f023 0301 	bic.w	r3, r3, #1
 8001462:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a42      	ldr	r2, [pc, #264]	; (8001578 <HAL_ADC_Start+0x16c>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d002      	beq.n	800147a <HAL_ADC_Start+0x6e>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	e000      	b.n	800147c <HAL_ADC_Start+0x70>
 800147a:	4b40      	ldr	r3, [pc, #256]	; (800157c <HAL_ADC_Start+0x170>)
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	6812      	ldr	r2, [r2, #0]
 8001480:	4293      	cmp	r3, r2
 8001482:	d002      	beq.n	800148a <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d105      	bne.n	8001496 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800148e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800149a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800149e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014a2:	d106      	bne.n	80014b2 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a8:	f023 0206 	bic.w	r2, r3, #6
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	659a      	str	r2, [r3, #88]	; 0x58
 80014b0:	e002      	b.n	80014b8 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	221c      	movs	r2, #28
 80014be:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2200      	movs	r2, #0
 80014c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a2a      	ldr	r2, [pc, #168]	; (8001578 <HAL_ADC_Start+0x16c>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d002      	beq.n	80014d8 <HAL_ADC_Start+0xcc>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	e000      	b.n	80014da <HAL_ADC_Start+0xce>
 80014d8:	4b28      	ldr	r3, [pc, #160]	; (800157c <HAL_ADC_Start+0x170>)
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	6812      	ldr	r2, [r2, #0]
 80014de:	4293      	cmp	r3, r2
 80014e0:	d008      	beq.n	80014f4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d005      	beq.n	80014f4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	2b05      	cmp	r3, #5
 80014ec:	d002      	beq.n	80014f4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	2b09      	cmp	r3, #9
 80014f2:	d114      	bne.n	800151e <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	68db      	ldr	r3, [r3, #12]
 80014fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d007      	beq.n	8001512 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001506:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800150a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff fde8 	bl	80010ec <LL_ADC_REG_StartConversion>
 800151c:	e025      	b.n	800156a <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001522:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a12      	ldr	r2, [pc, #72]	; (8001578 <HAL_ADC_Start+0x16c>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d002      	beq.n	800153a <HAL_ADC_Start+0x12e>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	e000      	b.n	800153c <HAL_ADC_Start+0x130>
 800153a:	4b10      	ldr	r3, [pc, #64]	; (800157c <HAL_ADC_Start+0x170>)
 800153c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	68db      	ldr	r3, [r3, #12]
 8001542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d00f      	beq.n	800156a <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800154e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001552:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	655a      	str	r2, [r3, #84]	; 0x54
 800155a:	e006      	b.n	800156a <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2200      	movs	r2, #0
 8001560:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001564:	e001      	b.n	800156a <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001566:	2302      	movs	r3, #2
 8001568:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800156a:	7dfb      	ldrb	r3, [r7, #23]
}
 800156c:	4618      	mov	r0, r3
 800156e:	3718      	adds	r7, #24
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	50040300 	.word	0x50040300
 8001578:	50040100 	.word	0x50040100
 800157c:	50040000 	.word	0x50040000

08001580 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b088      	sub	sp, #32
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800158a:	4866      	ldr	r0, [pc, #408]	; (8001724 <HAL_ADC_PollForConversion+0x1a4>)
 800158c:	f7ff fcf6 	bl	8000f7c <LL_ADC_GetMultimode>
 8001590:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	695b      	ldr	r3, [r3, #20]
 8001596:	2b08      	cmp	r3, #8
 8001598:	d102      	bne.n	80015a0 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800159a:	2308      	movs	r3, #8
 800159c:	61fb      	str	r3, [r7, #28]
 800159e:	e02a      	b.n	80015f6 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d005      	beq.n	80015b2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	2b05      	cmp	r3, #5
 80015aa:	d002      	beq.n	80015b2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	2b09      	cmp	r3, #9
 80015b0:	d111      	bne.n	80015d6 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d007      	beq.n	80015d0 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015c4:	f043 0220 	orr.w	r2, r3, #32
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e0a4      	b.n	800171a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80015d0:	2304      	movs	r3, #4
 80015d2:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80015d4:	e00f      	b.n	80015f6 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80015d6:	4853      	ldr	r0, [pc, #332]	; (8001724 <HAL_ADC_PollForConversion+0x1a4>)
 80015d8:	f7ff fcde 	bl	8000f98 <LL_ADC_GetMultiDMATransfer>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d007      	beq.n	80015f2 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015e6:	f043 0220 	orr.w	r2, r3, #32
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e093      	b.n	800171a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80015f2:	2304      	movs	r3, #4
 80015f4:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80015f6:	f7ff fb79 	bl	8000cec <HAL_GetTick>
 80015fa:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80015fc:	e021      	b.n	8001642 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001604:	d01d      	beq.n	8001642 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001606:	f7ff fb71 	bl	8000cec <HAL_GetTick>
 800160a:	4602      	mov	r2, r0
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	683a      	ldr	r2, [r7, #0]
 8001612:	429a      	cmp	r2, r3
 8001614:	d302      	bcc.n	800161c <HAL_ADC_PollForConversion+0x9c>
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d112      	bne.n	8001642 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	4013      	ands	r3, r2
 8001626:	2b00      	cmp	r3, #0
 8001628:	d10b      	bne.n	8001642 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800162e:	f043 0204 	orr.w	r2, r3, #4
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e06b      	b.n	800171a <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	4013      	ands	r3, r2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d0d6      	beq.n	80015fe <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001654:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff fbfc 	bl	8000e5e <LL_ADC_REG_IsTriggerSourceSWStart>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d01c      	beq.n	80016a6 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	7e5b      	ldrb	r3, [r3, #25]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d118      	bne.n	80016a6 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0308 	and.w	r3, r3, #8
 800167e:	2b08      	cmp	r3, #8
 8001680:	d111      	bne.n	80016a6 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001686:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001692:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d105      	bne.n	80016a6 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800169e:	f043 0201 	orr.w	r2, r3, #1
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a1f      	ldr	r2, [pc, #124]	; (8001728 <HAL_ADC_PollForConversion+0x1a8>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d002      	beq.n	80016b6 <HAL_ADC_PollForConversion+0x136>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	e000      	b.n	80016b8 <HAL_ADC_PollForConversion+0x138>
 80016b6:	4b1d      	ldr	r3, [pc, #116]	; (800172c <HAL_ADC_PollForConversion+0x1ac>)
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	6812      	ldr	r2, [r2, #0]
 80016bc:	4293      	cmp	r3, r2
 80016be:	d008      	beq.n	80016d2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d005      	beq.n	80016d2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	2b05      	cmp	r3, #5
 80016ca:	d002      	beq.n	80016d2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	2b09      	cmp	r3, #9
 80016d0:	d104      	bne.n	80016dc <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	61bb      	str	r3, [r7, #24]
 80016da:	e00c      	b.n	80016f6 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a11      	ldr	r2, [pc, #68]	; (8001728 <HAL_ADC_PollForConversion+0x1a8>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d002      	beq.n	80016ec <HAL_ADC_PollForConversion+0x16c>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	e000      	b.n	80016ee <HAL_ADC_PollForConversion+0x16e>
 80016ec:	4b0f      	ldr	r3, [pc, #60]	; (800172c <HAL_ADC_PollForConversion+0x1ac>)
 80016ee:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	2b08      	cmp	r3, #8
 80016fa:	d104      	bne.n	8001706 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2208      	movs	r2, #8
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	e008      	b.n	8001718 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d103      	bne.n	8001718 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	220c      	movs	r2, #12
 8001716:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3720      	adds	r7, #32
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	50040300 	.word	0x50040300
 8001728:	50040100 	.word	0x50040100
 800172c:	50040000 	.word	0x50040000

08001730 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800173e:	4618      	mov	r0, r3
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
	...

0800174c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b0b6      	sub	sp, #216	; 0xd8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001756:	2300      	movs	r3, #0
 8001758:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800175c:	2300      	movs	r3, #0
 800175e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001766:	2b01      	cmp	r3, #1
 8001768:	d101      	bne.n	800176e <HAL_ADC_ConfigChannel+0x22>
 800176a:	2302      	movs	r3, #2
 800176c:	e3c7      	b.n	8001efe <HAL_ADC_ConfigChannel+0x7b2>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2201      	movs	r2, #1
 8001772:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff fcca 	bl	8001114 <LL_ADC_REG_IsConversionOngoing>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	f040 83a8 	bne.w	8001ed8 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	2b05      	cmp	r3, #5
 800178e:	d824      	bhi.n	80017da <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	3b02      	subs	r3, #2
 8001796:	2b03      	cmp	r3, #3
 8001798:	d81b      	bhi.n	80017d2 <HAL_ADC_ConfigChannel+0x86>
 800179a:	a201      	add	r2, pc, #4	; (adr r2, 80017a0 <HAL_ADC_ConfigChannel+0x54>)
 800179c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017a0:	080017b1 	.word	0x080017b1
 80017a4:	080017b9 	.word	0x080017b9
 80017a8:	080017c1 	.word	0x080017c1
 80017ac:	080017c9 	.word	0x080017c9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	220c      	movs	r2, #12
 80017b4:	605a      	str	r2, [r3, #4]
          break;
 80017b6:	e010      	b.n	80017da <HAL_ADC_ConfigChannel+0x8e>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	2212      	movs	r2, #18
 80017bc:	605a      	str	r2, [r3, #4]
          break;
 80017be:	e00c      	b.n	80017da <HAL_ADC_ConfigChannel+0x8e>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	2218      	movs	r2, #24
 80017c4:	605a      	str	r2, [r3, #4]
          break;
 80017c6:	e008      	b.n	80017da <HAL_ADC_ConfigChannel+0x8e>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017ce:	605a      	str	r2, [r3, #4]
          break;
 80017d0:	e003      	b.n	80017da <HAL_ADC_ConfigChannel+0x8e>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	2206      	movs	r2, #6
 80017d6:	605a      	str	r2, [r3, #4]
          break;
 80017d8:	bf00      	nop
      }
    }
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6818      	ldr	r0, [r3, #0]
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	6859      	ldr	r1, [r3, #4]
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	461a      	mov	r2, r3
 80017e8:	f7ff fb4c 	bl	8000e84 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff fc8f 	bl	8001114 <LL_ADC_REG_IsConversionOngoing>
 80017f6:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff fc9b 	bl	800113a <LL_ADC_INJ_IsConversionOngoing>
 8001804:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001808:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800180c:	2b00      	cmp	r3, #0
 800180e:	f040 81a6 	bne.w	8001b5e <HAL_ADC_ConfigChannel+0x412>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001812:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001816:	2b00      	cmp	r3, #0
 8001818:	f040 81a1 	bne.w	8001b5e <HAL_ADC_ConfigChannel+0x412>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6818      	ldr	r0, [r3, #0]
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	6819      	ldr	r1, [r3, #0]
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	461a      	mov	r2, r3
 800182a:	f7ff fb57 	bl	8000edc <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	695a      	ldr	r2, [r3, #20]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	08db      	lsrs	r3, r3, #3
 800183a:	f003 0303 	and.w	r3, r3, #3
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	691b      	ldr	r3, [r3, #16]
 800184c:	2b04      	cmp	r3, #4
 800184e:	d00a      	beq.n	8001866 <HAL_ADC_ConfigChannel+0x11a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6818      	ldr	r0, [r3, #0]
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	6919      	ldr	r1, [r3, #16]
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001860:	f7ff faa8 	bl	8000db4 <LL_ADC_SetOffset>
 8001864:	e17b      	b.n	8001b5e <HAL_ADC_ConfigChannel+0x412>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2100      	movs	r1, #0
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff fac5 	bl	8000dfc <LL_ADC_GetOffsetChannel>
 8001872:	4603      	mov	r3, r0
 8001874:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001878:	2b00      	cmp	r3, #0
 800187a:	d10a      	bne.n	8001892 <HAL_ADC_ConfigChannel+0x146>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2100      	movs	r1, #0
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff faba 	bl	8000dfc <LL_ADC_GetOffsetChannel>
 8001888:	4603      	mov	r3, r0
 800188a:	0e9b      	lsrs	r3, r3, #26
 800188c:	f003 021f 	and.w	r2, r3, #31
 8001890:	e01e      	b.n	80018d0 <HAL_ADC_ConfigChannel+0x184>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2100      	movs	r1, #0
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff faaf 	bl	8000dfc <LL_ADC_GetOffsetChannel>
 800189e:	4603      	mov	r3, r0
 80018a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80018a8:	fa93 f3a3 	rbit	r3, r3
 80018ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80018b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80018b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80018b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d101      	bne.n	80018c4 <HAL_ADC_ConfigChannel+0x178>
  {
    return 32U;
 80018c0:	2320      	movs	r3, #32
 80018c2:	e004      	b.n	80018ce <HAL_ADC_ConfigChannel+0x182>
  }
  return __builtin_clz(value);
 80018c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80018c8:	fab3 f383 	clz	r3, r3
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d105      	bne.n	80018e8 <HAL_ADC_ConfigChannel+0x19c>
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	0e9b      	lsrs	r3, r3, #26
 80018e2:	f003 031f 	and.w	r3, r3, #31
 80018e6:	e018      	b.n	800191a <HAL_ADC_ConfigChannel+0x1ce>
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80018f4:	fa93 f3a3 	rbit	r3, r3
 80018f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80018fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001900:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001904:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001908:	2b00      	cmp	r3, #0
 800190a:	d101      	bne.n	8001910 <HAL_ADC_ConfigChannel+0x1c4>
    return 32U;
 800190c:	2320      	movs	r3, #32
 800190e:	e004      	b.n	800191a <HAL_ADC_ConfigChannel+0x1ce>
  return __builtin_clz(value);
 8001910:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001914:	fab3 f383 	clz	r3, r3
 8001918:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800191a:	429a      	cmp	r2, r3
 800191c:	d106      	bne.n	800192c <HAL_ADC_ConfigChannel+0x1e0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2200      	movs	r2, #0
 8001924:	2100      	movs	r1, #0
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff fa7e 	bl	8000e28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2101      	movs	r1, #1
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff fa62 	bl	8000dfc <LL_ADC_GetOffsetChannel>
 8001938:	4603      	mov	r3, r0
 800193a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800193e:	2b00      	cmp	r3, #0
 8001940:	d10a      	bne.n	8001958 <HAL_ADC_ConfigChannel+0x20c>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2101      	movs	r1, #1
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff fa57 	bl	8000dfc <LL_ADC_GetOffsetChannel>
 800194e:	4603      	mov	r3, r0
 8001950:	0e9b      	lsrs	r3, r3, #26
 8001952:	f003 021f 	and.w	r2, r3, #31
 8001956:	e01e      	b.n	8001996 <HAL_ADC_ConfigChannel+0x24a>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2101      	movs	r1, #1
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff fa4c 	bl	8000dfc <LL_ADC_GetOffsetChannel>
 8001964:	4603      	mov	r3, r0
 8001966:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800196a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800196e:	fa93 f3a3 	rbit	r3, r3
 8001972:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001976:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800197a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800197e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001982:	2b00      	cmp	r3, #0
 8001984:	d101      	bne.n	800198a <HAL_ADC_ConfigChannel+0x23e>
    return 32U;
 8001986:	2320      	movs	r3, #32
 8001988:	e004      	b.n	8001994 <HAL_ADC_ConfigChannel+0x248>
  return __builtin_clz(value);
 800198a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800198e:	fab3 f383 	clz	r3, r3
 8001992:	b2db      	uxtb	r3, r3
 8001994:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d105      	bne.n	80019ae <HAL_ADC_ConfigChannel+0x262>
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	0e9b      	lsrs	r3, r3, #26
 80019a8:	f003 031f 	and.w	r3, r3, #31
 80019ac:	e018      	b.n	80019e0 <HAL_ADC_ConfigChannel+0x294>
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80019ba:	fa93 f3a3 	rbit	r3, r3
 80019be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80019c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80019c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80019ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d101      	bne.n	80019d6 <HAL_ADC_ConfigChannel+0x28a>
    return 32U;
 80019d2:	2320      	movs	r3, #32
 80019d4:	e004      	b.n	80019e0 <HAL_ADC_ConfigChannel+0x294>
  return __builtin_clz(value);
 80019d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80019da:	fab3 f383 	clz	r3, r3
 80019de:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d106      	bne.n	80019f2 <HAL_ADC_ConfigChannel+0x2a6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2200      	movs	r2, #0
 80019ea:	2101      	movs	r1, #1
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff fa1b 	bl	8000e28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2102      	movs	r1, #2
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff f9ff 	bl	8000dfc <LL_ADC_GetOffsetChannel>
 80019fe:	4603      	mov	r3, r0
 8001a00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d10a      	bne.n	8001a1e <HAL_ADC_ConfigChannel+0x2d2>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2102      	movs	r1, #2
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff f9f4 	bl	8000dfc <LL_ADC_GetOffsetChannel>
 8001a14:	4603      	mov	r3, r0
 8001a16:	0e9b      	lsrs	r3, r3, #26
 8001a18:	f003 021f 	and.w	r2, r3, #31
 8001a1c:	e01e      	b.n	8001a5c <HAL_ADC_ConfigChannel+0x310>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2102      	movs	r1, #2
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff f9e9 	bl	8000dfc <LL_ADC_GetOffsetChannel>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a34:	fa93 f3a3 	rbit	r3, r3
 8001a38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001a3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a40:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001a44:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d101      	bne.n	8001a50 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8001a4c:	2320      	movs	r3, #32
 8001a4e:	e004      	b.n	8001a5a <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8001a50:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a54:	fab3 f383 	clz	r3, r3
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d105      	bne.n	8001a74 <HAL_ADC_ConfigChannel+0x328>
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	0e9b      	lsrs	r3, r3, #26
 8001a6e:	f003 031f 	and.w	r3, r3, #31
 8001a72:	e016      	b.n	8001aa2 <HAL_ADC_ConfigChannel+0x356>
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a80:	fa93 f3a3 	rbit	r3, r3
 8001a84:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001a86:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001a88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001a8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d101      	bne.n	8001a98 <HAL_ADC_ConfigChannel+0x34c>
    return 32U;
 8001a94:	2320      	movs	r3, #32
 8001a96:	e004      	b.n	8001aa2 <HAL_ADC_ConfigChannel+0x356>
  return __builtin_clz(value);
 8001a98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a9c:	fab3 f383 	clz	r3, r3
 8001aa0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d106      	bne.n	8001ab4 <HAL_ADC_ConfigChannel+0x368>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	2102      	movs	r1, #2
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff f9ba 	bl	8000e28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2103      	movs	r1, #3
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff f99e 	bl	8000dfc <LL_ADC_GetOffsetChannel>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d10a      	bne.n	8001ae0 <HAL_ADC_ConfigChannel+0x394>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2103      	movs	r1, #3
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff f993 	bl	8000dfc <LL_ADC_GetOffsetChannel>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	0e9b      	lsrs	r3, r3, #26
 8001ada:	f003 021f 	and.w	r2, r3, #31
 8001ade:	e017      	b.n	8001b10 <HAL_ADC_ConfigChannel+0x3c4>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2103      	movs	r1, #3
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff f988 	bl	8000dfc <LL_ADC_GetOffsetChannel>
 8001aec:	4603      	mov	r3, r0
 8001aee:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001af2:	fa93 f3a3 	rbit	r3, r3
 8001af6:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001af8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001afa:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001afc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d101      	bne.n	8001b06 <HAL_ADC_ConfigChannel+0x3ba>
    return 32U;
 8001b02:	2320      	movs	r3, #32
 8001b04:	e003      	b.n	8001b0e <HAL_ADC_ConfigChannel+0x3c2>
  return __builtin_clz(value);
 8001b06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b08:	fab3 f383 	clz	r3, r3
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d105      	bne.n	8001b28 <HAL_ADC_ConfigChannel+0x3dc>
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	0e9b      	lsrs	r3, r3, #26
 8001b22:	f003 031f 	and.w	r3, r3, #31
 8001b26:	e011      	b.n	8001b4c <HAL_ADC_ConfigChannel+0x400>
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b30:	fa93 f3a3 	rbit	r3, r3
 8001b34:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001b36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b38:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001b3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d101      	bne.n	8001b44 <HAL_ADC_ConfigChannel+0x3f8>
    return 32U;
 8001b40:	2320      	movs	r3, #32
 8001b42:	e003      	b.n	8001b4c <HAL_ADC_ConfigChannel+0x400>
  return __builtin_clz(value);
 8001b44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b46:	fab3 f383 	clz	r3, r3
 8001b4a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d106      	bne.n	8001b5e <HAL_ADC_ConfigChannel+0x412>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2200      	movs	r2, #0
 8001b56:	2103      	movs	r1, #3
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff f965 	bl	8000e28 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff fa9c 	bl	80010a0 <LL_ADC_IsEnabled>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	f040 8140 	bne.w	8001df0 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6818      	ldr	r0, [r3, #0]
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	6819      	ldr	r1, [r3, #0]
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	f7ff f9d9 	bl	8000f34 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	4a8f      	ldr	r2, [pc, #572]	; (8001dc4 <HAL_ADC_ConfigChannel+0x678>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	f040 8131 	bne.w	8001df0 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d10b      	bne.n	8001bb6 <HAL_ADC_ConfigChannel+0x46a>
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	0e9b      	lsrs	r3, r3, #26
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	f003 031f 	and.w	r3, r3, #31
 8001baa:	2b09      	cmp	r3, #9
 8001bac:	bf94      	ite	ls
 8001bae:	2301      	movls	r3, #1
 8001bb0:	2300      	movhi	r3, #0
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	e019      	b.n	8001bea <HAL_ADC_ConfigChannel+0x49e>
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bbe:	fa93 f3a3 	rbit	r3, r3
 8001bc2:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001bc4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001bc6:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001bc8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d101      	bne.n	8001bd2 <HAL_ADC_ConfigChannel+0x486>
    return 32U;
 8001bce:	2320      	movs	r3, #32
 8001bd0:	e003      	b.n	8001bda <HAL_ADC_ConfigChannel+0x48e>
  return __builtin_clz(value);
 8001bd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001bd4:	fab3 f383 	clz	r3, r3
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	3301      	adds	r3, #1
 8001bdc:	f003 031f 	and.w	r3, r3, #31
 8001be0:	2b09      	cmp	r3, #9
 8001be2:	bf94      	ite	ls
 8001be4:	2301      	movls	r3, #1
 8001be6:	2300      	movhi	r3, #0
 8001be8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d079      	beq.n	8001ce2 <HAL_ADC_ConfigChannel+0x596>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d107      	bne.n	8001c0a <HAL_ADC_ConfigChannel+0x4be>
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	0e9b      	lsrs	r3, r3, #26
 8001c00:	3301      	adds	r3, #1
 8001c02:	069b      	lsls	r3, r3, #26
 8001c04:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c08:	e015      	b.n	8001c36 <HAL_ADC_ConfigChannel+0x4ea>
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c12:	fa93 f3a3 	rbit	r3, r3
 8001c16:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001c18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c1a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001c1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d101      	bne.n	8001c26 <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 8001c22:	2320      	movs	r3, #32
 8001c24:	e003      	b.n	8001c2e <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 8001c26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c28:	fab3 f383 	clz	r3, r3
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	3301      	adds	r3, #1
 8001c30:	069b      	lsls	r3, r3, #26
 8001c32:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d109      	bne.n	8001c56 <HAL_ADC_ConfigChannel+0x50a>
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	0e9b      	lsrs	r3, r3, #26
 8001c48:	3301      	adds	r3, #1
 8001c4a:	f003 031f 	and.w	r3, r3, #31
 8001c4e:	2101      	movs	r1, #1
 8001c50:	fa01 f303 	lsl.w	r3, r1, r3
 8001c54:	e017      	b.n	8001c86 <HAL_ADC_ConfigChannel+0x53a>
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c5e:	fa93 f3a3 	rbit	r3, r3
 8001c62:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001c64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c66:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001c68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d101      	bne.n	8001c72 <HAL_ADC_ConfigChannel+0x526>
    return 32U;
 8001c6e:	2320      	movs	r3, #32
 8001c70:	e003      	b.n	8001c7a <HAL_ADC_ConfigChannel+0x52e>
  return __builtin_clz(value);
 8001c72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c74:	fab3 f383 	clz	r3, r3
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	f003 031f 	and.w	r3, r3, #31
 8001c80:	2101      	movs	r1, #1
 8001c82:	fa01 f303 	lsl.w	r3, r1, r3
 8001c86:	ea42 0103 	orr.w	r1, r2, r3
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d10a      	bne.n	8001cac <HAL_ADC_ConfigChannel+0x560>
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	0e9b      	lsrs	r3, r3, #26
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	f003 021f 	and.w	r2, r3, #31
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	4413      	add	r3, r2
 8001ca8:	051b      	lsls	r3, r3, #20
 8001caa:	e018      	b.n	8001cde <HAL_ADC_ConfigChannel+0x592>
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cb4:	fa93 f3a3 	rbit	r3, r3
 8001cb8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001cbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d101      	bne.n	8001cc8 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8001cc4:	2320      	movs	r3, #32
 8001cc6:	e003      	b.n	8001cd0 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8001cc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cca:	fab3 f383 	clz	r3, r3
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	f003 021f 	and.w	r2, r3, #31
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	4413      	add	r3, r2
 8001cdc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cde:	430b      	orrs	r3, r1
 8001ce0:	e081      	b.n	8001de6 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d107      	bne.n	8001cfe <HAL_ADC_ConfigChannel+0x5b2>
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	0e9b      	lsrs	r3, r3, #26
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	069b      	lsls	r3, r3, #26
 8001cf8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cfc:	e015      	b.n	8001d2a <HAL_ADC_ConfigChannel+0x5de>
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d06:	fa93 f3a3 	rbit	r3, r3
 8001d0a:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d0e:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d101      	bne.n	8001d1a <HAL_ADC_ConfigChannel+0x5ce>
    return 32U;
 8001d16:	2320      	movs	r3, #32
 8001d18:	e003      	b.n	8001d22 <HAL_ADC_ConfigChannel+0x5d6>
  return __builtin_clz(value);
 8001d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d1c:	fab3 f383 	clz	r3, r3
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	3301      	adds	r3, #1
 8001d24:	069b      	lsls	r3, r3, #26
 8001d26:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d109      	bne.n	8001d4a <HAL_ADC_ConfigChannel+0x5fe>
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	0e9b      	lsrs	r3, r3, #26
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	f003 031f 	and.w	r3, r3, #31
 8001d42:	2101      	movs	r1, #1
 8001d44:	fa01 f303 	lsl.w	r3, r1, r3
 8001d48:	e017      	b.n	8001d7a <HAL_ADC_ConfigChannel+0x62e>
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d50:	6a3b      	ldr	r3, [r7, #32]
 8001d52:	fa93 f3a3 	rbit	r3, r3
 8001d56:	61fb      	str	r3, [r7, #28]
  return result;
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d101      	bne.n	8001d66 <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 8001d62:	2320      	movs	r3, #32
 8001d64:	e003      	b.n	8001d6e <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 8001d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d68:	fab3 f383 	clz	r3, r3
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	3301      	adds	r3, #1
 8001d70:	f003 031f 	and.w	r3, r3, #31
 8001d74:	2101      	movs	r1, #1
 8001d76:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7a:	ea42 0103 	orr.w	r1, r2, r3
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d10d      	bne.n	8001da6 <HAL_ADC_ConfigChannel+0x65a>
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	0e9b      	lsrs	r3, r3, #26
 8001d90:	3301      	adds	r3, #1
 8001d92:	f003 021f 	and.w	r2, r3, #31
 8001d96:	4613      	mov	r3, r2
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	4413      	add	r3, r2
 8001d9c:	3b1e      	subs	r3, #30
 8001d9e:	051b      	lsls	r3, r3, #20
 8001da0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001da4:	e01e      	b.n	8001de4 <HAL_ADC_ConfigChannel+0x698>
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	fa93 f3a3 	rbit	r3, r3
 8001db2:	613b      	str	r3, [r7, #16]
  return result;
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d104      	bne.n	8001dc8 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001dbe:	2320      	movs	r3, #32
 8001dc0:	e006      	b.n	8001dd0 <HAL_ADC_ConfigChannel+0x684>
 8001dc2:	bf00      	nop
 8001dc4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	fab3 f383 	clz	r3, r3
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	f003 021f 	and.w	r2, r3, #31
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	4413      	add	r3, r2
 8001ddc:	3b1e      	subs	r3, #30
 8001dde:	051b      	lsls	r3, r3, #20
 8001de0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001de4:	430b      	orrs	r3, r1
 8001de6:	683a      	ldr	r2, [r7, #0]
 8001de8:	6892      	ldr	r2, [r2, #8]
 8001dea:	4619      	mov	r1, r3
 8001dec:	f7ff f876 	bl	8000edc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	4b44      	ldr	r3, [pc, #272]	; (8001f08 <HAL_ADC_ConfigChannel+0x7bc>)
 8001df6:	4013      	ands	r3, r2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d07a      	beq.n	8001ef2 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001dfc:	4843      	ldr	r0, [pc, #268]	; (8001f0c <HAL_ADC_ConfigChannel+0x7c0>)
 8001dfe:	f7fe ffcb 	bl	8000d98 <LL_ADC_GetCommonPathInternalCh>
 8001e02:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a41      	ldr	r2, [pc, #260]	; (8001f10 <HAL_ADC_ConfigChannel+0x7c4>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d12c      	bne.n	8001e6a <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001e10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d126      	bne.n	8001e6a <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a3c      	ldr	r2, [pc, #240]	; (8001f14 <HAL_ADC_ConfigChannel+0x7c8>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d004      	beq.n	8001e30 <HAL_ADC_ConfigChannel+0x6e4>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a3b      	ldr	r2, [pc, #236]	; (8001f18 <HAL_ADC_ConfigChannel+0x7cc>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d15d      	bne.n	8001eec <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e34:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4834      	ldr	r0, [pc, #208]	; (8001f0c <HAL_ADC_ConfigChannel+0x7c0>)
 8001e3c:	f7fe ff99 	bl	8000d72 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e40:	4b36      	ldr	r3, [pc, #216]	; (8001f1c <HAL_ADC_ConfigChannel+0x7d0>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	099b      	lsrs	r3, r3, #6
 8001e46:	4a36      	ldr	r2, [pc, #216]	; (8001f20 <HAL_ADC_ConfigChannel+0x7d4>)
 8001e48:	fba2 2303 	umull	r2, r3, r2, r3
 8001e4c:	099b      	lsrs	r3, r3, #6
 8001e4e:	1c5a      	adds	r2, r3, #1
 8001e50:	4613      	mov	r3, r2
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	4413      	add	r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001e5a:	e002      	b.n	8001e62 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d1f9      	bne.n	8001e5c <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e68:	e040      	b.n	8001eec <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a2d      	ldr	r2, [pc, #180]	; (8001f24 <HAL_ADC_ConfigChannel+0x7d8>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d118      	bne.n	8001ea6 <HAL_ADC_ConfigChannel+0x75a>
 8001e74:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d112      	bne.n	8001ea6 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a23      	ldr	r2, [pc, #140]	; (8001f14 <HAL_ADC_ConfigChannel+0x7c8>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d004      	beq.n	8001e94 <HAL_ADC_ConfigChannel+0x748>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a22      	ldr	r2, [pc, #136]	; (8001f18 <HAL_ADC_ConfigChannel+0x7cc>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d12d      	bne.n	8001ef0 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e98:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	481b      	ldr	r0, [pc, #108]	; (8001f0c <HAL_ADC_ConfigChannel+0x7c0>)
 8001ea0:	f7fe ff67 	bl	8000d72 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001ea4:	e024      	b.n	8001ef0 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a1f      	ldr	r2, [pc, #124]	; (8001f28 <HAL_ADC_ConfigChannel+0x7dc>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d120      	bne.n	8001ef2 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001eb0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001eb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d11a      	bne.n	8001ef2 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a14      	ldr	r2, [pc, #80]	; (8001f14 <HAL_ADC_ConfigChannel+0x7c8>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d115      	bne.n	8001ef2 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ec6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001eca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ece:	4619      	mov	r1, r3
 8001ed0:	480e      	ldr	r0, [pc, #56]	; (8001f0c <HAL_ADC_ConfigChannel+0x7c0>)
 8001ed2:	f7fe ff4e 	bl	8000d72 <LL_ADC_SetCommonPathInternalCh>
 8001ed6:	e00c      	b.n	8001ef2 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001edc:	f043 0220 	orr.w	r2, r3, #32
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001eea:	e002      	b.n	8001ef2 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001eec:	bf00      	nop
 8001eee:	e000      	b.n	8001ef2 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001ef0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001efa:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	37d8      	adds	r7, #216	; 0xd8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	80080000 	.word	0x80080000
 8001f0c:	50040300 	.word	0x50040300
 8001f10:	c7520000 	.word	0xc7520000
 8001f14:	50040000 	.word	0x50040000
 8001f18:	50040200 	.word	0x50040200
 8001f1c:	20000000 	.word	0x20000000
 8001f20:	053e2d63 	.word	0x053e2d63
 8001f24:	cb840000 	.word	0xcb840000
 8001f28:	80000001 	.word	0x80000001

08001f2c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001f34:	2300      	movs	r3, #0
 8001f36:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff f8af 	bl	80010a0 <LL_ADC_IsEnabled>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d169      	bne.n	800201c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	689a      	ldr	r2, [r3, #8]
 8001f4e:	4b36      	ldr	r3, [pc, #216]	; (8002028 <ADC_Enable+0xfc>)
 8001f50:	4013      	ands	r3, r2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d00d      	beq.n	8001f72 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f5a:	f043 0210 	orr.w	r2, r3, #16
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f66:	f043 0201 	orr.w	r2, r3, #1
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e055      	b.n	800201e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff f86a 	bl	8001050 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001f7c:	482b      	ldr	r0, [pc, #172]	; (800202c <ADC_Enable+0x100>)
 8001f7e:	f7fe ff0b 	bl	8000d98 <LL_ADC_GetCommonPathInternalCh>
 8001f82:	4603      	mov	r3, r0
 8001f84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d013      	beq.n	8001fb4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f8c:	4b28      	ldr	r3, [pc, #160]	; (8002030 <ADC_Enable+0x104>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	099b      	lsrs	r3, r3, #6
 8001f92:	4a28      	ldr	r2, [pc, #160]	; (8002034 <ADC_Enable+0x108>)
 8001f94:	fba2 2303 	umull	r2, r3, r2, r3
 8001f98:	099b      	lsrs	r3, r3, #6
 8001f9a:	1c5a      	adds	r2, r3, #1
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	4413      	add	r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8001fa6:	e002      	b.n	8001fae <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	3b01      	subs	r3, #1
 8001fac:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d1f9      	bne.n	8001fa8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001fb4:	f7fe fe9a 	bl	8000cec <HAL_GetTick>
 8001fb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001fba:	e028      	b.n	800200e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff f86d 	bl	80010a0 <LL_ADC_IsEnabled>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d104      	bne.n	8001fd6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff f83d 	bl	8001050 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001fd6:	f7fe fe89 	bl	8000cec <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d914      	bls.n	800200e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d00d      	beq.n	800200e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff6:	f043 0210 	orr.w	r2, r3, #16
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002002:	f043 0201 	orr.w	r2, r3, #1
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e007      	b.n	800201e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	2b01      	cmp	r3, #1
 800201a:	d1cf      	bne.n	8001fbc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	8000003f 	.word	0x8000003f
 800202c:	50040300 	.word	0x50040300
 8002030:	20000000 	.word	0x20000000
 8002034:	053e2d63 	.word	0x053e2d63

08002038 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff f83e 	bl	80010c6 <LL_ADC_IsDisableOngoing>
 800204a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff f825 	bl	80010a0 <LL_ADC_IsEnabled>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d047      	beq.n	80020ec <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d144      	bne.n	80020ec <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f003 030d 	and.w	r3, r3, #13
 800206c:	2b01      	cmp	r3, #1
 800206e:	d10c      	bne.n	800208a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4618      	mov	r0, r3
 8002076:	f7fe ffff 	bl	8001078 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2203      	movs	r2, #3
 8002080:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002082:	f7fe fe33 	bl	8000cec <HAL_GetTick>
 8002086:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002088:	e029      	b.n	80020de <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800208e:	f043 0210 	orr.w	r2, r3, #16
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209a:	f043 0201 	orr.w	r2, r3, #1
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e023      	b.n	80020ee <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80020a6:	f7fe fe21 	bl	8000cec <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d914      	bls.n	80020de <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d00d      	beq.n	80020de <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020c6:	f043 0210 	orr.w	r2, r3, #16
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d2:	f043 0201 	orr.w	r2, r3, #1
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e007      	b.n	80020ee <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f003 0301 	and.w	r3, r3, #1
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d1dc      	bne.n	80020a6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3710      	adds	r7, #16
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <LL_ADC_IsEnabled>:
{
 80020f6:	b480      	push	{r7}
 80020f8:	b083      	sub	sp, #12
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	2b01      	cmp	r3, #1
 8002108:	d101      	bne.n	800210e <LL_ADC_IsEnabled+0x18>
 800210a:	2301      	movs	r3, #1
 800210c:	e000      	b.n	8002110 <LL_ADC_IsEnabled+0x1a>
 800210e:	2300      	movs	r3, #0
}
 8002110:	4618      	mov	r0, r3
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <LL_ADC_StartCalibration>:
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800212e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002132:	683a      	ldr	r2, [r7, #0]
 8002134:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002138:	4313      	orrs	r3, r2
 800213a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	609a      	str	r2, [r3, #8]
}
 8002142:	bf00      	nop
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr

0800214e <LL_ADC_IsCalibrationOnGoing>:
{
 800214e:	b480      	push	{r7}
 8002150:	b083      	sub	sp, #12
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800215e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002162:	d101      	bne.n	8002168 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002164:	2301      	movs	r3, #1
 8002166:	e000      	b.n	800216a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr

08002176 <LL_ADC_REG_IsConversionOngoing>:
{
 8002176:	b480      	push	{r7}
 8002178:	b083      	sub	sp, #12
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f003 0304 	and.w	r3, r3, #4
 8002186:	2b04      	cmp	r3, #4
 8002188:	d101      	bne.n	800218e <LL_ADC_REG_IsConversionOngoing+0x18>
 800218a:	2301      	movs	r3, #1
 800218c:	e000      	b.n	8002190 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800218e:	2300      	movs	r3, #0
}
 8002190:	4618      	mov	r0, r3
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80021a6:	2300      	movs	r3, #0
 80021a8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d101      	bne.n	80021b8 <HAL_ADCEx_Calibration_Start+0x1c>
 80021b4:	2302      	movs	r3, #2
 80021b6:	e04d      	b.n	8002254 <HAL_ADCEx_Calibration_Start+0xb8>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f7ff ff39 	bl	8002038 <ADC_Disable>
 80021c6:	4603      	mov	r3, r0
 80021c8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80021ca:	7bfb      	ldrb	r3, [r7, #15]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d136      	bne.n	800223e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021d4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80021d8:	f023 0302 	bic.w	r3, r3, #2
 80021dc:	f043 0202 	orr.w	r2, r3, #2
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	6839      	ldr	r1, [r7, #0]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff ff96 	bl	800211c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80021f0:	e014      	b.n	800221c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	3301      	adds	r3, #1
 80021f6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 80021fe:	d30d      	bcc.n	800221c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002204:	f023 0312 	bic.w	r3, r3, #18
 8002208:	f043 0210 	orr.w	r2, r3, #16
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e01b      	b.n	8002254 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4618      	mov	r0, r3
 8002222:	f7ff ff94 	bl	800214e <LL_ADC_IsCalibrationOnGoing>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d1e2      	bne.n	80021f2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002230:	f023 0303 	bic.w	r3, r3, #3
 8002234:	f043 0201 	orr.w	r2, r3, #1
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	655a      	str	r2, [r3, #84]	; 0x54
 800223c:	e005      	b.n	800224a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002242:	f043 0210 	orr.w	r2, r3, #16
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002252:	7bfb      	ldrb	r3, [r7, #15]
}
 8002254:	4618      	mov	r0, r3
 8002256:	3710      	adds	r7, #16
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800225c:	b590      	push	{r4, r7, lr}
 800225e:	b09f      	sub	sp, #124	; 0x7c
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002266:	2300      	movs	r3, #0
 8002268:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002272:	2b01      	cmp	r3, #1
 8002274:	d101      	bne.n	800227a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002276:	2302      	movs	r3, #2
 8002278:	e093      	b.n	80023a2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2201      	movs	r2, #1
 800227e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002282:	2300      	movs	r3, #0
 8002284:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002286:	2300      	movs	r3, #0
 8002288:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a47      	ldr	r2, [pc, #284]	; (80023ac <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d102      	bne.n	800229a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002294:	4b46      	ldr	r3, [pc, #280]	; (80023b0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002296:	60bb      	str	r3, [r7, #8]
 8002298:	e001      	b.n	800229e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800229a:	2300      	movs	r3, #0
 800229c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d10b      	bne.n	80022bc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022a8:	f043 0220 	orr.w	r2, r3, #32
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e072      	b.n	80023a2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	4618      	mov	r0, r3
 80022c0:	f7ff ff59 	bl	8002176 <LL_ADC_REG_IsConversionOngoing>
 80022c4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7ff ff53 	bl	8002176 <LL_ADC_REG_IsConversionOngoing>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d154      	bne.n	8002380 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80022d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d151      	bne.n	8002380 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80022dc:	4b35      	ldr	r3, [pc, #212]	; (80023b4 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80022de:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d02c      	beq.n	8002342 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80022e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	6859      	ldr	r1, [r3, #4]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80022fa:	035b      	lsls	r3, r3, #13
 80022fc:	430b      	orrs	r3, r1
 80022fe:	431a      	orrs	r2, r3
 8002300:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002302:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002304:	4829      	ldr	r0, [pc, #164]	; (80023ac <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002306:	f7ff fef6 	bl	80020f6 <LL_ADC_IsEnabled>
 800230a:	4604      	mov	r4, r0
 800230c:	4828      	ldr	r0, [pc, #160]	; (80023b0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800230e:	f7ff fef2 	bl	80020f6 <LL_ADC_IsEnabled>
 8002312:	4603      	mov	r3, r0
 8002314:	431c      	orrs	r4, r3
 8002316:	4828      	ldr	r0, [pc, #160]	; (80023b8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002318:	f7ff feed 	bl	80020f6 <LL_ADC_IsEnabled>
 800231c:	4603      	mov	r3, r0
 800231e:	4323      	orrs	r3, r4
 8002320:	2b00      	cmp	r3, #0
 8002322:	d137      	bne.n	8002394 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002324:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800232c:	f023 030f 	bic.w	r3, r3, #15
 8002330:	683a      	ldr	r2, [r7, #0]
 8002332:	6811      	ldr	r1, [r2, #0]
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	6892      	ldr	r2, [r2, #8]
 8002338:	430a      	orrs	r2, r1
 800233a:	431a      	orrs	r2, r3
 800233c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800233e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002340:	e028      	b.n	8002394 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002342:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800234a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800234c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800234e:	4817      	ldr	r0, [pc, #92]	; (80023ac <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002350:	f7ff fed1 	bl	80020f6 <LL_ADC_IsEnabled>
 8002354:	4604      	mov	r4, r0
 8002356:	4816      	ldr	r0, [pc, #88]	; (80023b0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002358:	f7ff fecd 	bl	80020f6 <LL_ADC_IsEnabled>
 800235c:	4603      	mov	r3, r0
 800235e:	431c      	orrs	r4, r3
 8002360:	4815      	ldr	r0, [pc, #84]	; (80023b8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002362:	f7ff fec8 	bl	80020f6 <LL_ADC_IsEnabled>
 8002366:	4603      	mov	r3, r0
 8002368:	4323      	orrs	r3, r4
 800236a:	2b00      	cmp	r3, #0
 800236c:	d112      	bne.n	8002394 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800236e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002376:	f023 030f 	bic.w	r3, r3, #15
 800237a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800237c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800237e:	e009      	b.n	8002394 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002384:	f043 0220 	orr.w	r2, r3, #32
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002392:	e000      	b.n	8002396 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002394:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800239e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	377c      	adds	r7, #124	; 0x7c
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd90      	pop	{r4, r7, pc}
 80023aa:	bf00      	nop
 80023ac:	50040000 	.word	0x50040000
 80023b0:	50040100 	.word	0x50040100
 80023b4:	50040300 	.word	0x50040300
 80023b8:	50040200 	.word	0x50040200

080023bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023bc:	b480      	push	{r7}
 80023be:	b085      	sub	sp, #20
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f003 0307 	and.w	r3, r3, #7
 80023ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023cc:	4b0c      	ldr	r3, [pc, #48]	; (8002400 <__NVIC_SetPriorityGrouping+0x44>)
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023d2:	68ba      	ldr	r2, [r7, #8]
 80023d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023d8:	4013      	ands	r3, r2
 80023da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ee:	4a04      	ldr	r2, [pc, #16]	; (8002400 <__NVIC_SetPriorityGrouping+0x44>)
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	60d3      	str	r3, [r2, #12]
}
 80023f4:	bf00      	nop
 80023f6:	3714      	adds	r7, #20
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr
 8002400:	e000ed00 	.word	0xe000ed00

08002404 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002408:	4b04      	ldr	r3, [pc, #16]	; (800241c <__NVIC_GetPriorityGrouping+0x18>)
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	0a1b      	lsrs	r3, r3, #8
 800240e:	f003 0307 	and.w	r3, r3, #7
}
 8002412:	4618      	mov	r0, r3
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr
 800241c:	e000ed00 	.word	0xe000ed00

08002420 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	4603      	mov	r3, r0
 8002428:	6039      	str	r1, [r7, #0]
 800242a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800242c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002430:	2b00      	cmp	r3, #0
 8002432:	db0a      	blt.n	800244a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	b2da      	uxtb	r2, r3
 8002438:	490c      	ldr	r1, [pc, #48]	; (800246c <__NVIC_SetPriority+0x4c>)
 800243a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243e:	0112      	lsls	r2, r2, #4
 8002440:	b2d2      	uxtb	r2, r2
 8002442:	440b      	add	r3, r1
 8002444:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002448:	e00a      	b.n	8002460 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	b2da      	uxtb	r2, r3
 800244e:	4908      	ldr	r1, [pc, #32]	; (8002470 <__NVIC_SetPriority+0x50>)
 8002450:	79fb      	ldrb	r3, [r7, #7]
 8002452:	f003 030f 	and.w	r3, r3, #15
 8002456:	3b04      	subs	r3, #4
 8002458:	0112      	lsls	r2, r2, #4
 800245a:	b2d2      	uxtb	r2, r2
 800245c:	440b      	add	r3, r1
 800245e:	761a      	strb	r2, [r3, #24]
}
 8002460:	bf00      	nop
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr
 800246c:	e000e100 	.word	0xe000e100
 8002470:	e000ed00 	.word	0xe000ed00

08002474 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002474:	b480      	push	{r7}
 8002476:	b089      	sub	sp, #36	; 0x24
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f003 0307 	and.w	r3, r3, #7
 8002486:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	f1c3 0307 	rsb	r3, r3, #7
 800248e:	2b04      	cmp	r3, #4
 8002490:	bf28      	it	cs
 8002492:	2304      	movcs	r3, #4
 8002494:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	3304      	adds	r3, #4
 800249a:	2b06      	cmp	r3, #6
 800249c:	d902      	bls.n	80024a4 <NVIC_EncodePriority+0x30>
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	3b03      	subs	r3, #3
 80024a2:	e000      	b.n	80024a6 <NVIC_EncodePriority+0x32>
 80024a4:	2300      	movs	r3, #0
 80024a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024a8:	f04f 32ff 	mov.w	r2, #4294967295
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	fa02 f303 	lsl.w	r3, r2, r3
 80024b2:	43da      	mvns	r2, r3
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	401a      	ands	r2, r3
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024bc:	f04f 31ff 	mov.w	r1, #4294967295
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	fa01 f303 	lsl.w	r3, r1, r3
 80024c6:	43d9      	mvns	r1, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024cc:	4313      	orrs	r3, r2
         );
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3724      	adds	r7, #36	; 0x24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
	...

080024dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	3b01      	subs	r3, #1
 80024e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024ec:	d301      	bcc.n	80024f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024ee:	2301      	movs	r3, #1
 80024f0:	e00f      	b.n	8002512 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024f2:	4a0a      	ldr	r2, [pc, #40]	; (800251c <SysTick_Config+0x40>)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	3b01      	subs	r3, #1
 80024f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024fa:	210f      	movs	r1, #15
 80024fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002500:	f7ff ff8e 	bl	8002420 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002504:	4b05      	ldr	r3, [pc, #20]	; (800251c <SysTick_Config+0x40>)
 8002506:	2200      	movs	r2, #0
 8002508:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800250a:	4b04      	ldr	r3, [pc, #16]	; (800251c <SysTick_Config+0x40>)
 800250c:	2207      	movs	r2, #7
 800250e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	e000e010 	.word	0xe000e010

08002520 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f7ff ff47 	bl	80023bc <__NVIC_SetPriorityGrouping>
}
 800252e:	bf00      	nop
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b086      	sub	sp, #24
 800253a:	af00      	add	r7, sp, #0
 800253c:	4603      	mov	r3, r0
 800253e:	60b9      	str	r1, [r7, #8]
 8002540:	607a      	str	r2, [r7, #4]
 8002542:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002544:	2300      	movs	r3, #0
 8002546:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002548:	f7ff ff5c 	bl	8002404 <__NVIC_GetPriorityGrouping>
 800254c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	68b9      	ldr	r1, [r7, #8]
 8002552:	6978      	ldr	r0, [r7, #20]
 8002554:	f7ff ff8e 	bl	8002474 <NVIC_EncodePriority>
 8002558:	4602      	mov	r2, r0
 800255a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800255e:	4611      	mov	r1, r2
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff ff5d 	bl	8002420 <__NVIC_SetPriority>
}
 8002566:	bf00      	nop
 8002568:	3718      	adds	r7, #24
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b082      	sub	sp, #8
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f7ff ffb0 	bl	80024dc <SysTick_Config>
 800257c:	4603      	mov	r3, r0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
	...

08002588 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002588:	b480      	push	{r7}
 800258a:	b087      	sub	sp, #28
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002592:	2300      	movs	r3, #0
 8002594:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002596:	e17f      	b.n	8002898 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	2101      	movs	r1, #1
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	fa01 f303 	lsl.w	r3, r1, r3
 80025a4:	4013      	ands	r3, r2
 80025a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	f000 8171 	beq.w	8002892 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f003 0303 	and.w	r3, r3, #3
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d005      	beq.n	80025c8 <HAL_GPIO_Init+0x40>
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f003 0303 	and.w	r3, r3, #3
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d130      	bne.n	800262a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	2203      	movs	r2, #3
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	43db      	mvns	r3, r3
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	4013      	ands	r3, r2
 80025de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	68da      	ldr	r2, [r3, #12]
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	693a      	ldr	r2, [r7, #16]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	693a      	ldr	r2, [r7, #16]
 80025f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025fe:	2201      	movs	r2, #1
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	fa02 f303 	lsl.w	r3, r2, r3
 8002606:	43db      	mvns	r3, r3
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	4013      	ands	r3, r2
 800260c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	091b      	lsrs	r3, r3, #4
 8002614:	f003 0201 	and.w	r2, r3, #1
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	fa02 f303 	lsl.w	r3, r2, r3
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	4313      	orrs	r3, r2
 8002622:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f003 0303 	and.w	r3, r3, #3
 8002632:	2b03      	cmp	r3, #3
 8002634:	d118      	bne.n	8002668 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800263a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800263c:	2201      	movs	r2, #1
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	43db      	mvns	r3, r3
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	4013      	ands	r3, r2
 800264a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	08db      	lsrs	r3, r3, #3
 8002652:	f003 0201 	and.w	r2, r3, #1
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	4313      	orrs	r3, r2
 8002660:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	693a      	ldr	r2, [r7, #16]
 8002666:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f003 0303 	and.w	r3, r3, #3
 8002670:	2b03      	cmp	r3, #3
 8002672:	d017      	beq.n	80026a4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	2203      	movs	r2, #3
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	43db      	mvns	r3, r3
 8002686:	693a      	ldr	r2, [r7, #16]
 8002688:	4013      	ands	r3, r2
 800268a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	689a      	ldr	r2, [r3, #8]
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	693a      	ldr	r2, [r7, #16]
 800269a:	4313      	orrs	r3, r2
 800269c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	693a      	ldr	r2, [r7, #16]
 80026a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f003 0303 	and.w	r3, r3, #3
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d123      	bne.n	80026f8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	08da      	lsrs	r2, r3, #3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	3208      	adds	r2, #8
 80026b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	f003 0307 	and.w	r3, r3, #7
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	220f      	movs	r2, #15
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	43db      	mvns	r3, r3
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	4013      	ands	r3, r2
 80026d2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	691a      	ldr	r2, [r3, #16]
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	f003 0307 	and.w	r3, r3, #7
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	08da      	lsrs	r2, r3, #3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	3208      	adds	r2, #8
 80026f2:	6939      	ldr	r1, [r7, #16]
 80026f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	2203      	movs	r2, #3
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	43db      	mvns	r3, r3
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	4013      	ands	r3, r2
 800270e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f003 0203 	and.w	r2, r3, #3
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	4313      	orrs	r3, r2
 8002724:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	693a      	ldr	r2, [r7, #16]
 800272a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002734:	2b00      	cmp	r3, #0
 8002736:	f000 80ac 	beq.w	8002892 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800273a:	4b5f      	ldr	r3, [pc, #380]	; (80028b8 <HAL_GPIO_Init+0x330>)
 800273c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800273e:	4a5e      	ldr	r2, [pc, #376]	; (80028b8 <HAL_GPIO_Init+0x330>)
 8002740:	f043 0301 	orr.w	r3, r3, #1
 8002744:	6613      	str	r3, [r2, #96]	; 0x60
 8002746:	4b5c      	ldr	r3, [pc, #368]	; (80028b8 <HAL_GPIO_Init+0x330>)
 8002748:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	60bb      	str	r3, [r7, #8]
 8002750:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002752:	4a5a      	ldr	r2, [pc, #360]	; (80028bc <HAL_GPIO_Init+0x334>)
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	089b      	lsrs	r3, r3, #2
 8002758:	3302      	adds	r3, #2
 800275a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800275e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	f003 0303 	and.w	r3, r3, #3
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	220f      	movs	r2, #15
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	43db      	mvns	r3, r3
 8002770:	693a      	ldr	r2, [r7, #16]
 8002772:	4013      	ands	r3, r2
 8002774:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800277c:	d025      	beq.n	80027ca <HAL_GPIO_Init+0x242>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a4f      	ldr	r2, [pc, #316]	; (80028c0 <HAL_GPIO_Init+0x338>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d01f      	beq.n	80027c6 <HAL_GPIO_Init+0x23e>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a4e      	ldr	r2, [pc, #312]	; (80028c4 <HAL_GPIO_Init+0x33c>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d019      	beq.n	80027c2 <HAL_GPIO_Init+0x23a>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a4d      	ldr	r2, [pc, #308]	; (80028c8 <HAL_GPIO_Init+0x340>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d013      	beq.n	80027be <HAL_GPIO_Init+0x236>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a4c      	ldr	r2, [pc, #304]	; (80028cc <HAL_GPIO_Init+0x344>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d00d      	beq.n	80027ba <HAL_GPIO_Init+0x232>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a4b      	ldr	r2, [pc, #300]	; (80028d0 <HAL_GPIO_Init+0x348>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d007      	beq.n	80027b6 <HAL_GPIO_Init+0x22e>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a4a      	ldr	r2, [pc, #296]	; (80028d4 <HAL_GPIO_Init+0x34c>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d101      	bne.n	80027b2 <HAL_GPIO_Init+0x22a>
 80027ae:	2306      	movs	r3, #6
 80027b0:	e00c      	b.n	80027cc <HAL_GPIO_Init+0x244>
 80027b2:	2307      	movs	r3, #7
 80027b4:	e00a      	b.n	80027cc <HAL_GPIO_Init+0x244>
 80027b6:	2305      	movs	r3, #5
 80027b8:	e008      	b.n	80027cc <HAL_GPIO_Init+0x244>
 80027ba:	2304      	movs	r3, #4
 80027bc:	e006      	b.n	80027cc <HAL_GPIO_Init+0x244>
 80027be:	2303      	movs	r3, #3
 80027c0:	e004      	b.n	80027cc <HAL_GPIO_Init+0x244>
 80027c2:	2302      	movs	r3, #2
 80027c4:	e002      	b.n	80027cc <HAL_GPIO_Init+0x244>
 80027c6:	2301      	movs	r3, #1
 80027c8:	e000      	b.n	80027cc <HAL_GPIO_Init+0x244>
 80027ca:	2300      	movs	r3, #0
 80027cc:	697a      	ldr	r2, [r7, #20]
 80027ce:	f002 0203 	and.w	r2, r2, #3
 80027d2:	0092      	lsls	r2, r2, #2
 80027d4:	4093      	lsls	r3, r2
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	4313      	orrs	r3, r2
 80027da:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80027dc:	4937      	ldr	r1, [pc, #220]	; (80028bc <HAL_GPIO_Init+0x334>)
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	089b      	lsrs	r3, r3, #2
 80027e2:	3302      	adds	r3, #2
 80027e4:	693a      	ldr	r2, [r7, #16]
 80027e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027ea:	4b3b      	ldr	r3, [pc, #236]	; (80028d8 <HAL_GPIO_Init+0x350>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	43db      	mvns	r3, r3
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	4013      	ands	r3, r2
 80027f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d003      	beq.n	800280e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	4313      	orrs	r3, r2
 800280c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800280e:	4a32      	ldr	r2, [pc, #200]	; (80028d8 <HAL_GPIO_Init+0x350>)
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002814:	4b30      	ldr	r3, [pc, #192]	; (80028d8 <HAL_GPIO_Init+0x350>)
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	43db      	mvns	r3, r3
 800281e:	693a      	ldr	r2, [r7, #16]
 8002820:	4013      	ands	r3, r2
 8002822:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d003      	beq.n	8002838 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002830:	693a      	ldr	r2, [r7, #16]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	4313      	orrs	r3, r2
 8002836:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002838:	4a27      	ldr	r2, [pc, #156]	; (80028d8 <HAL_GPIO_Init+0x350>)
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800283e:	4b26      	ldr	r3, [pc, #152]	; (80028d8 <HAL_GPIO_Init+0x350>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	43db      	mvns	r3, r3
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	4013      	ands	r3, r2
 800284c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d003      	beq.n	8002862 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	4313      	orrs	r3, r2
 8002860:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002862:	4a1d      	ldr	r2, [pc, #116]	; (80028d8 <HAL_GPIO_Init+0x350>)
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002868:	4b1b      	ldr	r3, [pc, #108]	; (80028d8 <HAL_GPIO_Init+0x350>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	43db      	mvns	r3, r3
 8002872:	693a      	ldr	r2, [r7, #16]
 8002874:	4013      	ands	r3, r2
 8002876:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d003      	beq.n	800288c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002884:	693a      	ldr	r2, [r7, #16]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	4313      	orrs	r3, r2
 800288a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800288c:	4a12      	ldr	r2, [pc, #72]	; (80028d8 <HAL_GPIO_Init+0x350>)
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	3301      	adds	r3, #1
 8002896:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	fa22 f303 	lsr.w	r3, r2, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f47f ae78 	bne.w	8002598 <HAL_GPIO_Init+0x10>
  }
}
 80028a8:	bf00      	nop
 80028aa:	bf00      	nop
 80028ac:	371c      	adds	r7, #28
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	40021000 	.word	0x40021000
 80028bc:	40010000 	.word	0x40010000
 80028c0:	48000400 	.word	0x48000400
 80028c4:	48000800 	.word	0x48000800
 80028c8:	48000c00 	.word	0x48000c00
 80028cc:	48001000 	.word	0x48001000
 80028d0:	48001400 	.word	0x48001400
 80028d4:	48001800 	.word	0x48001800
 80028d8:	40010400 	.word	0x40010400

080028dc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80028e0:	4b04      	ldr	r3, [pc, #16]	; (80028f4 <HAL_PWREx_GetVoltageRange+0x18>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	40007000 	.word	0x40007000

080028f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002906:	d130      	bne.n	800296a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002908:	4b23      	ldr	r3, [pc, #140]	; (8002998 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002910:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002914:	d038      	beq.n	8002988 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002916:	4b20      	ldr	r3, [pc, #128]	; (8002998 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800291e:	4a1e      	ldr	r2, [pc, #120]	; (8002998 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002920:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002924:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002926:	4b1d      	ldr	r3, [pc, #116]	; (800299c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2232      	movs	r2, #50	; 0x32
 800292c:	fb02 f303 	mul.w	r3, r2, r3
 8002930:	4a1b      	ldr	r2, [pc, #108]	; (80029a0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002932:	fba2 2303 	umull	r2, r3, r2, r3
 8002936:	0c9b      	lsrs	r3, r3, #18
 8002938:	3301      	adds	r3, #1
 800293a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800293c:	e002      	b.n	8002944 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	3b01      	subs	r3, #1
 8002942:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002944:	4b14      	ldr	r3, [pc, #80]	; (8002998 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002946:	695b      	ldr	r3, [r3, #20]
 8002948:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800294c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002950:	d102      	bne.n	8002958 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d1f2      	bne.n	800293e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002958:	4b0f      	ldr	r3, [pc, #60]	; (8002998 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800295a:	695b      	ldr	r3, [r3, #20]
 800295c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002960:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002964:	d110      	bne.n	8002988 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e00f      	b.n	800298a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800296a:	4b0b      	ldr	r3, [pc, #44]	; (8002998 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002972:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002976:	d007      	beq.n	8002988 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002978:	4b07      	ldr	r3, [pc, #28]	; (8002998 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002980:	4a05      	ldr	r2, [pc, #20]	; (8002998 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002982:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002986:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3714      	adds	r7, #20
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	40007000 	.word	0x40007000
 800299c:	20000000 	.word	0x20000000
 80029a0:	431bde83 	.word	0x431bde83

080029a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b088      	sub	sp, #32
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d101      	bne.n	80029b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e3ca      	b.n	800314c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029b6:	4b97      	ldr	r3, [pc, #604]	; (8002c14 <HAL_RCC_OscConfig+0x270>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f003 030c 	and.w	r3, r3, #12
 80029be:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029c0:	4b94      	ldr	r3, [pc, #592]	; (8002c14 <HAL_RCC_OscConfig+0x270>)
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	f003 0303 	and.w	r3, r3, #3
 80029c8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0310 	and.w	r3, r3, #16
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	f000 80e4 	beq.w	8002ba0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d007      	beq.n	80029ee <HAL_RCC_OscConfig+0x4a>
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	2b0c      	cmp	r3, #12
 80029e2:	f040 808b 	bne.w	8002afc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	f040 8087 	bne.w	8002afc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029ee:	4b89      	ldr	r3, [pc, #548]	; (8002c14 <HAL_RCC_OscConfig+0x270>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d005      	beq.n	8002a06 <HAL_RCC_OscConfig+0x62>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e3a2      	b.n	800314c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a1a      	ldr	r2, [r3, #32]
 8002a0a:	4b82      	ldr	r3, [pc, #520]	; (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0308 	and.w	r3, r3, #8
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d004      	beq.n	8002a20 <HAL_RCC_OscConfig+0x7c>
 8002a16:	4b7f      	ldr	r3, [pc, #508]	; (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a1e:	e005      	b.n	8002a2c <HAL_RCC_OscConfig+0x88>
 8002a20:	4b7c      	ldr	r3, [pc, #496]	; (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002a22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a26:	091b      	lsrs	r3, r3, #4
 8002a28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d223      	bcs.n	8002a78 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a1b      	ldr	r3, [r3, #32]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f000 fd1d 	bl	8003474 <RCC_SetFlashLatencyFromMSIRange>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e383      	b.n	800314c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a44:	4b73      	ldr	r3, [pc, #460]	; (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a72      	ldr	r2, [pc, #456]	; (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002a4a:	f043 0308 	orr.w	r3, r3, #8
 8002a4e:	6013      	str	r3, [r2, #0]
 8002a50:	4b70      	ldr	r3, [pc, #448]	; (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a1b      	ldr	r3, [r3, #32]
 8002a5c:	496d      	ldr	r1, [pc, #436]	; (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a62:	4b6c      	ldr	r3, [pc, #432]	; (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	69db      	ldr	r3, [r3, #28]
 8002a6e:	021b      	lsls	r3, r3, #8
 8002a70:	4968      	ldr	r1, [pc, #416]	; (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	604b      	str	r3, [r1, #4]
 8002a76:	e025      	b.n	8002ac4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a78:	4b66      	ldr	r3, [pc, #408]	; (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a65      	ldr	r2, [pc, #404]	; (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002a7e:	f043 0308 	orr.w	r3, r3, #8
 8002a82:	6013      	str	r3, [r2, #0]
 8002a84:	4b63      	ldr	r3, [pc, #396]	; (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a1b      	ldr	r3, [r3, #32]
 8002a90:	4960      	ldr	r1, [pc, #384]	; (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a96:	4b5f      	ldr	r3, [pc, #380]	; (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	69db      	ldr	r3, [r3, #28]
 8002aa2:	021b      	lsls	r3, r3, #8
 8002aa4:	495b      	ldr	r1, [pc, #364]	; (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d109      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a1b      	ldr	r3, [r3, #32]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f000 fcdd 	bl	8003474 <RCC_SetFlashLatencyFromMSIRange>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d001      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e343      	b.n	800314c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ac4:	f000 fc4a 	bl	800335c <HAL_RCC_GetSysClockFreq>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	4b52      	ldr	r3, [pc, #328]	; (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	091b      	lsrs	r3, r3, #4
 8002ad0:	f003 030f 	and.w	r3, r3, #15
 8002ad4:	4950      	ldr	r1, [pc, #320]	; (8002c18 <HAL_RCC_OscConfig+0x274>)
 8002ad6:	5ccb      	ldrb	r3, [r1, r3]
 8002ad8:	f003 031f 	and.w	r3, r3, #31
 8002adc:	fa22 f303 	lsr.w	r3, r2, r3
 8002ae0:	4a4e      	ldr	r2, [pc, #312]	; (8002c1c <HAL_RCC_OscConfig+0x278>)
 8002ae2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002ae4:	4b4e      	ldr	r3, [pc, #312]	; (8002c20 <HAL_RCC_OscConfig+0x27c>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7fe f8af 	bl	8000c4c <HAL_InitTick>
 8002aee:	4603      	mov	r3, r0
 8002af0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002af2:	7bfb      	ldrb	r3, [r7, #15]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d052      	beq.n	8002b9e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002af8:	7bfb      	ldrb	r3, [r7, #15]
 8002afa:	e327      	b.n	800314c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d032      	beq.n	8002b6a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b04:	4b43      	ldr	r3, [pc, #268]	; (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a42      	ldr	r2, [pc, #264]	; (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002b0a:	f043 0301 	orr.w	r3, r3, #1
 8002b0e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b10:	f7fe f8ec 	bl	8000cec <HAL_GetTick>
 8002b14:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b16:	e008      	b.n	8002b2a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b18:	f7fe f8e8 	bl	8000cec <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e310      	b.n	800314c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b2a:	4b3a      	ldr	r3, [pc, #232]	; (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d0f0      	beq.n	8002b18 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b36:	4b37      	ldr	r3, [pc, #220]	; (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a36      	ldr	r2, [pc, #216]	; (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002b3c:	f043 0308 	orr.w	r3, r3, #8
 8002b40:	6013      	str	r3, [r2, #0]
 8002b42:	4b34      	ldr	r3, [pc, #208]	; (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a1b      	ldr	r3, [r3, #32]
 8002b4e:	4931      	ldr	r1, [pc, #196]	; (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b54:	4b2f      	ldr	r3, [pc, #188]	; (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	69db      	ldr	r3, [r3, #28]
 8002b60:	021b      	lsls	r3, r3, #8
 8002b62:	492c      	ldr	r1, [pc, #176]	; (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	604b      	str	r3, [r1, #4]
 8002b68:	e01a      	b.n	8002ba0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b6a:	4b2a      	ldr	r3, [pc, #168]	; (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a29      	ldr	r2, [pc, #164]	; (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002b70:	f023 0301 	bic.w	r3, r3, #1
 8002b74:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b76:	f7fe f8b9 	bl	8000cec <HAL_GetTick>
 8002b7a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b7c:	e008      	b.n	8002b90 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b7e:	f7fe f8b5 	bl	8000cec <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d901      	bls.n	8002b90 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e2dd      	b.n	800314c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b90:	4b20      	ldr	r3, [pc, #128]	; (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0302 	and.w	r3, r3, #2
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d1f0      	bne.n	8002b7e <HAL_RCC_OscConfig+0x1da>
 8002b9c:	e000      	b.n	8002ba0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b9e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0301 	and.w	r3, r3, #1
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d074      	beq.n	8002c96 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	2b08      	cmp	r3, #8
 8002bb0:	d005      	beq.n	8002bbe <HAL_RCC_OscConfig+0x21a>
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	2b0c      	cmp	r3, #12
 8002bb6:	d10e      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	2b03      	cmp	r3, #3
 8002bbc:	d10b      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bbe:	4b15      	ldr	r3, [pc, #84]	; (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d064      	beq.n	8002c94 <HAL_RCC_OscConfig+0x2f0>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d160      	bne.n	8002c94 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e2ba      	b.n	800314c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bde:	d106      	bne.n	8002bee <HAL_RCC_OscConfig+0x24a>
 8002be0:	4b0c      	ldr	r3, [pc, #48]	; (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a0b      	ldr	r2, [pc, #44]	; (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002be6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bea:	6013      	str	r3, [r2, #0]
 8002bec:	e026      	b.n	8002c3c <HAL_RCC_OscConfig+0x298>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bf6:	d115      	bne.n	8002c24 <HAL_RCC_OscConfig+0x280>
 8002bf8:	4b06      	ldr	r3, [pc, #24]	; (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a05      	ldr	r2, [pc, #20]	; (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002bfe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c02:	6013      	str	r3, [r2, #0]
 8002c04:	4b03      	ldr	r3, [pc, #12]	; (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a02      	ldr	r2, [pc, #8]	; (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002c0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c0e:	6013      	str	r3, [r2, #0]
 8002c10:	e014      	b.n	8002c3c <HAL_RCC_OscConfig+0x298>
 8002c12:	bf00      	nop
 8002c14:	40021000 	.word	0x40021000
 8002c18:	0800411c 	.word	0x0800411c
 8002c1c:	20000000 	.word	0x20000000
 8002c20:	20000004 	.word	0x20000004
 8002c24:	4ba0      	ldr	r3, [pc, #640]	; (8002ea8 <HAL_RCC_OscConfig+0x504>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a9f      	ldr	r2, [pc, #636]	; (8002ea8 <HAL_RCC_OscConfig+0x504>)
 8002c2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c2e:	6013      	str	r3, [r2, #0]
 8002c30:	4b9d      	ldr	r3, [pc, #628]	; (8002ea8 <HAL_RCC_OscConfig+0x504>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a9c      	ldr	r2, [pc, #624]	; (8002ea8 <HAL_RCC_OscConfig+0x504>)
 8002c36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d013      	beq.n	8002c6c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c44:	f7fe f852 	bl	8000cec <HAL_GetTick>
 8002c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c4c:	f7fe f84e 	bl	8000cec <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b64      	cmp	r3, #100	; 0x64
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e276      	b.n	800314c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c5e:	4b92      	ldr	r3, [pc, #584]	; (8002ea8 <HAL_RCC_OscConfig+0x504>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d0f0      	beq.n	8002c4c <HAL_RCC_OscConfig+0x2a8>
 8002c6a:	e014      	b.n	8002c96 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c6c:	f7fe f83e 	bl	8000cec <HAL_GetTick>
 8002c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c72:	e008      	b.n	8002c86 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c74:	f7fe f83a 	bl	8000cec <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	2b64      	cmp	r3, #100	; 0x64
 8002c80:	d901      	bls.n	8002c86 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e262      	b.n	800314c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c86:	4b88      	ldr	r3, [pc, #544]	; (8002ea8 <HAL_RCC_OscConfig+0x504>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d1f0      	bne.n	8002c74 <HAL_RCC_OscConfig+0x2d0>
 8002c92:	e000      	b.n	8002c96 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d060      	beq.n	8002d64 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	2b04      	cmp	r3, #4
 8002ca6:	d005      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x310>
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	2b0c      	cmp	r3, #12
 8002cac:	d119      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d116      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cb4:	4b7c      	ldr	r3, [pc, #496]	; (8002ea8 <HAL_RCC_OscConfig+0x504>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d005      	beq.n	8002ccc <HAL_RCC_OscConfig+0x328>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d101      	bne.n	8002ccc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e23f      	b.n	800314c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ccc:	4b76      	ldr	r3, [pc, #472]	; (8002ea8 <HAL_RCC_OscConfig+0x504>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	691b      	ldr	r3, [r3, #16]
 8002cd8:	061b      	lsls	r3, r3, #24
 8002cda:	4973      	ldr	r1, [pc, #460]	; (8002ea8 <HAL_RCC_OscConfig+0x504>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ce0:	e040      	b.n	8002d64 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d023      	beq.n	8002d32 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cea:	4b6f      	ldr	r3, [pc, #444]	; (8002ea8 <HAL_RCC_OscConfig+0x504>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a6e      	ldr	r2, [pc, #440]	; (8002ea8 <HAL_RCC_OscConfig+0x504>)
 8002cf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cf4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf6:	f7fd fff9 	bl	8000cec <HAL_GetTick>
 8002cfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cfc:	e008      	b.n	8002d10 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cfe:	f7fd fff5 	bl	8000cec <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d901      	bls.n	8002d10 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e21d      	b.n	800314c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d10:	4b65      	ldr	r3, [pc, #404]	; (8002ea8 <HAL_RCC_OscConfig+0x504>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d0f0      	beq.n	8002cfe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d1c:	4b62      	ldr	r3, [pc, #392]	; (8002ea8 <HAL_RCC_OscConfig+0x504>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	061b      	lsls	r3, r3, #24
 8002d2a:	495f      	ldr	r1, [pc, #380]	; (8002ea8 <HAL_RCC_OscConfig+0x504>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	604b      	str	r3, [r1, #4]
 8002d30:	e018      	b.n	8002d64 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d32:	4b5d      	ldr	r3, [pc, #372]	; (8002ea8 <HAL_RCC_OscConfig+0x504>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a5c      	ldr	r2, [pc, #368]	; (8002ea8 <HAL_RCC_OscConfig+0x504>)
 8002d38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d3e:	f7fd ffd5 	bl	8000cec <HAL_GetTick>
 8002d42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d44:	e008      	b.n	8002d58 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d46:	f7fd ffd1 	bl	8000cec <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d901      	bls.n	8002d58 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e1f9      	b.n	800314c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d58:	4b53      	ldr	r3, [pc, #332]	; (8002ea8 <HAL_RCC_OscConfig+0x504>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d1f0      	bne.n	8002d46 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0308 	and.w	r3, r3, #8
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d03c      	beq.n	8002dea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	695b      	ldr	r3, [r3, #20]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d01c      	beq.n	8002db2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d78:	4b4b      	ldr	r3, [pc, #300]	; (8002ea8 <HAL_RCC_OscConfig+0x504>)
 8002d7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d7e:	4a4a      	ldr	r2, [pc, #296]	; (8002ea8 <HAL_RCC_OscConfig+0x504>)
 8002d80:	f043 0301 	orr.w	r3, r3, #1
 8002d84:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d88:	f7fd ffb0 	bl	8000cec <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d90:	f7fd ffac 	bl	8000cec <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e1d4      	b.n	800314c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002da2:	4b41      	ldr	r3, [pc, #260]	; (8002ea8 <HAL_RCC_OscConfig+0x504>)
 8002da4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d0ef      	beq.n	8002d90 <HAL_RCC_OscConfig+0x3ec>
 8002db0:	e01b      	b.n	8002dea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002db2:	4b3d      	ldr	r3, [pc, #244]	; (8002ea8 <HAL_RCC_OscConfig+0x504>)
 8002db4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002db8:	4a3b      	ldr	r2, [pc, #236]	; (8002ea8 <HAL_RCC_OscConfig+0x504>)
 8002dba:	f023 0301 	bic.w	r3, r3, #1
 8002dbe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc2:	f7fd ff93 	bl	8000cec <HAL_GetTick>
 8002dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002dc8:	e008      	b.n	8002ddc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dca:	f7fd ff8f 	bl	8000cec <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d901      	bls.n	8002ddc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e1b7      	b.n	800314c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ddc:	4b32      	ldr	r3, [pc, #200]	; (8002ea8 <HAL_RCC_OscConfig+0x504>)
 8002dde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1ef      	bne.n	8002dca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0304 	and.w	r3, r3, #4
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	f000 80a6 	beq.w	8002f44 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002dfc:	4b2a      	ldr	r3, [pc, #168]	; (8002ea8 <HAL_RCC_OscConfig+0x504>)
 8002dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d10d      	bne.n	8002e24 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e08:	4b27      	ldr	r3, [pc, #156]	; (8002ea8 <HAL_RCC_OscConfig+0x504>)
 8002e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e0c:	4a26      	ldr	r2, [pc, #152]	; (8002ea8 <HAL_RCC_OscConfig+0x504>)
 8002e0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e12:	6593      	str	r3, [r2, #88]	; 0x58
 8002e14:	4b24      	ldr	r3, [pc, #144]	; (8002ea8 <HAL_RCC_OscConfig+0x504>)
 8002e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e1c:	60bb      	str	r3, [r7, #8]
 8002e1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e20:	2301      	movs	r3, #1
 8002e22:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e24:	4b21      	ldr	r3, [pc, #132]	; (8002eac <HAL_RCC_OscConfig+0x508>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d118      	bne.n	8002e62 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e30:	4b1e      	ldr	r3, [pc, #120]	; (8002eac <HAL_RCC_OscConfig+0x508>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a1d      	ldr	r2, [pc, #116]	; (8002eac <HAL_RCC_OscConfig+0x508>)
 8002e36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e3a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e3c:	f7fd ff56 	bl	8000cec <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e44:	f7fd ff52 	bl	8000cec <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e17a      	b.n	800314c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e56:	4b15      	ldr	r3, [pc, #84]	; (8002eac <HAL_RCC_OscConfig+0x508>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d0f0      	beq.n	8002e44 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d108      	bne.n	8002e7c <HAL_RCC_OscConfig+0x4d8>
 8002e6a:	4b0f      	ldr	r3, [pc, #60]	; (8002ea8 <HAL_RCC_OscConfig+0x504>)
 8002e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e70:	4a0d      	ldr	r2, [pc, #52]	; (8002ea8 <HAL_RCC_OscConfig+0x504>)
 8002e72:	f043 0301 	orr.w	r3, r3, #1
 8002e76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e7a:	e029      	b.n	8002ed0 <HAL_RCC_OscConfig+0x52c>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	2b05      	cmp	r3, #5
 8002e82:	d115      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x50c>
 8002e84:	4b08      	ldr	r3, [pc, #32]	; (8002ea8 <HAL_RCC_OscConfig+0x504>)
 8002e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e8a:	4a07      	ldr	r2, [pc, #28]	; (8002ea8 <HAL_RCC_OscConfig+0x504>)
 8002e8c:	f043 0304 	orr.w	r3, r3, #4
 8002e90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e94:	4b04      	ldr	r3, [pc, #16]	; (8002ea8 <HAL_RCC_OscConfig+0x504>)
 8002e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e9a:	4a03      	ldr	r2, [pc, #12]	; (8002ea8 <HAL_RCC_OscConfig+0x504>)
 8002e9c:	f043 0301 	orr.w	r3, r3, #1
 8002ea0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ea4:	e014      	b.n	8002ed0 <HAL_RCC_OscConfig+0x52c>
 8002ea6:	bf00      	nop
 8002ea8:	40021000 	.word	0x40021000
 8002eac:	40007000 	.word	0x40007000
 8002eb0:	4b9c      	ldr	r3, [pc, #624]	; (8003124 <HAL_RCC_OscConfig+0x780>)
 8002eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb6:	4a9b      	ldr	r2, [pc, #620]	; (8003124 <HAL_RCC_OscConfig+0x780>)
 8002eb8:	f023 0301 	bic.w	r3, r3, #1
 8002ebc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ec0:	4b98      	ldr	r3, [pc, #608]	; (8003124 <HAL_RCC_OscConfig+0x780>)
 8002ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec6:	4a97      	ldr	r2, [pc, #604]	; (8003124 <HAL_RCC_OscConfig+0x780>)
 8002ec8:	f023 0304 	bic.w	r3, r3, #4
 8002ecc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d016      	beq.n	8002f06 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed8:	f7fd ff08 	bl	8000cec <HAL_GetTick>
 8002edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ede:	e00a      	b.n	8002ef6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ee0:	f7fd ff04 	bl	8000cec <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e12a      	b.n	800314c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ef6:	4b8b      	ldr	r3, [pc, #556]	; (8003124 <HAL_RCC_OscConfig+0x780>)
 8002ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d0ed      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x53c>
 8002f04:	e015      	b.n	8002f32 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f06:	f7fd fef1 	bl	8000cec <HAL_GetTick>
 8002f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f0c:	e00a      	b.n	8002f24 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f0e:	f7fd feed 	bl	8000cec <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d901      	bls.n	8002f24 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e113      	b.n	800314c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f24:	4b7f      	ldr	r3, [pc, #508]	; (8003124 <HAL_RCC_OscConfig+0x780>)
 8002f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d1ed      	bne.n	8002f0e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f32:	7ffb      	ldrb	r3, [r7, #31]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d105      	bne.n	8002f44 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f38:	4b7a      	ldr	r3, [pc, #488]	; (8003124 <HAL_RCC_OscConfig+0x780>)
 8002f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f3c:	4a79      	ldr	r2, [pc, #484]	; (8003124 <HAL_RCC_OscConfig+0x780>)
 8002f3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f42:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f000 80fe 	beq.w	800314a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	f040 80d0 	bne.w	80030f8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002f58:	4b72      	ldr	r3, [pc, #456]	; (8003124 <HAL_RCC_OscConfig+0x780>)
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	f003 0203 	and.w	r2, r3, #3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d130      	bne.n	8002fce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f76:	3b01      	subs	r3, #1
 8002f78:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d127      	bne.n	8002fce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f88:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d11f      	bne.n	8002fce <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f98:	2a07      	cmp	r2, #7
 8002f9a:	bf14      	ite	ne
 8002f9c:	2201      	movne	r2, #1
 8002f9e:	2200      	moveq	r2, #0
 8002fa0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d113      	bne.n	8002fce <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fb0:	085b      	lsrs	r3, r3, #1
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d109      	bne.n	8002fce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc4:	085b      	lsrs	r3, r3, #1
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d06e      	beq.n	80030ac <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	2b0c      	cmp	r3, #12
 8002fd2:	d069      	beq.n	80030a8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002fd4:	4b53      	ldr	r3, [pc, #332]	; (8003124 <HAL_RCC_OscConfig+0x780>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d105      	bne.n	8002fec <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002fe0:	4b50      	ldr	r3, [pc, #320]	; (8003124 <HAL_RCC_OscConfig+0x780>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d001      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e0ad      	b.n	800314c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002ff0:	4b4c      	ldr	r3, [pc, #304]	; (8003124 <HAL_RCC_OscConfig+0x780>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a4b      	ldr	r2, [pc, #300]	; (8003124 <HAL_RCC_OscConfig+0x780>)
 8002ff6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ffa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ffc:	f7fd fe76 	bl	8000cec <HAL_GetTick>
 8003000:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003002:	e008      	b.n	8003016 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003004:	f7fd fe72 	bl	8000cec <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	2b02      	cmp	r3, #2
 8003010:	d901      	bls.n	8003016 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e09a      	b.n	800314c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003016:	4b43      	ldr	r3, [pc, #268]	; (8003124 <HAL_RCC_OscConfig+0x780>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1f0      	bne.n	8003004 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003022:	4b40      	ldr	r3, [pc, #256]	; (8003124 <HAL_RCC_OscConfig+0x780>)
 8003024:	68da      	ldr	r2, [r3, #12]
 8003026:	4b40      	ldr	r3, [pc, #256]	; (8003128 <HAL_RCC_OscConfig+0x784>)
 8003028:	4013      	ands	r3, r2
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003032:	3a01      	subs	r2, #1
 8003034:	0112      	lsls	r2, r2, #4
 8003036:	4311      	orrs	r1, r2
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800303c:	0212      	lsls	r2, r2, #8
 800303e:	4311      	orrs	r1, r2
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003044:	0852      	lsrs	r2, r2, #1
 8003046:	3a01      	subs	r2, #1
 8003048:	0552      	lsls	r2, r2, #21
 800304a:	4311      	orrs	r1, r2
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003050:	0852      	lsrs	r2, r2, #1
 8003052:	3a01      	subs	r2, #1
 8003054:	0652      	lsls	r2, r2, #25
 8003056:	4311      	orrs	r1, r2
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800305c:	0912      	lsrs	r2, r2, #4
 800305e:	0452      	lsls	r2, r2, #17
 8003060:	430a      	orrs	r2, r1
 8003062:	4930      	ldr	r1, [pc, #192]	; (8003124 <HAL_RCC_OscConfig+0x780>)
 8003064:	4313      	orrs	r3, r2
 8003066:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003068:	4b2e      	ldr	r3, [pc, #184]	; (8003124 <HAL_RCC_OscConfig+0x780>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a2d      	ldr	r2, [pc, #180]	; (8003124 <HAL_RCC_OscConfig+0x780>)
 800306e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003072:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003074:	4b2b      	ldr	r3, [pc, #172]	; (8003124 <HAL_RCC_OscConfig+0x780>)
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	4a2a      	ldr	r2, [pc, #168]	; (8003124 <HAL_RCC_OscConfig+0x780>)
 800307a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800307e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003080:	f7fd fe34 	bl	8000cec <HAL_GetTick>
 8003084:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003086:	e008      	b.n	800309a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003088:	f7fd fe30 	bl	8000cec <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e058      	b.n	800314c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800309a:	4b22      	ldr	r3, [pc, #136]	; (8003124 <HAL_RCC_OscConfig+0x780>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d0f0      	beq.n	8003088 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030a6:	e050      	b.n	800314a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e04f      	b.n	800314c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030ac:	4b1d      	ldr	r3, [pc, #116]	; (8003124 <HAL_RCC_OscConfig+0x780>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d148      	bne.n	800314a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80030b8:	4b1a      	ldr	r3, [pc, #104]	; (8003124 <HAL_RCC_OscConfig+0x780>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a19      	ldr	r2, [pc, #100]	; (8003124 <HAL_RCC_OscConfig+0x780>)
 80030be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030c2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030c4:	4b17      	ldr	r3, [pc, #92]	; (8003124 <HAL_RCC_OscConfig+0x780>)
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	4a16      	ldr	r2, [pc, #88]	; (8003124 <HAL_RCC_OscConfig+0x780>)
 80030ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030ce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80030d0:	f7fd fe0c 	bl	8000cec <HAL_GetTick>
 80030d4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030d6:	e008      	b.n	80030ea <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030d8:	f7fd fe08 	bl	8000cec <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e030      	b.n	800314c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030ea:	4b0e      	ldr	r3, [pc, #56]	; (8003124 <HAL_RCC_OscConfig+0x780>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d0f0      	beq.n	80030d8 <HAL_RCC_OscConfig+0x734>
 80030f6:	e028      	b.n	800314a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	2b0c      	cmp	r3, #12
 80030fc:	d023      	beq.n	8003146 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030fe:	4b09      	ldr	r3, [pc, #36]	; (8003124 <HAL_RCC_OscConfig+0x780>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a08      	ldr	r2, [pc, #32]	; (8003124 <HAL_RCC_OscConfig+0x780>)
 8003104:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003108:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800310a:	f7fd fdef 	bl	8000cec <HAL_GetTick>
 800310e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003110:	e00c      	b.n	800312c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003112:	f7fd fdeb 	bl	8000cec <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	2b02      	cmp	r3, #2
 800311e:	d905      	bls.n	800312c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e013      	b.n	800314c <HAL_RCC_OscConfig+0x7a8>
 8003124:	40021000 	.word	0x40021000
 8003128:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800312c:	4b09      	ldr	r3, [pc, #36]	; (8003154 <HAL_RCC_OscConfig+0x7b0>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d1ec      	bne.n	8003112 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003138:	4b06      	ldr	r3, [pc, #24]	; (8003154 <HAL_RCC_OscConfig+0x7b0>)
 800313a:	68da      	ldr	r2, [r3, #12]
 800313c:	4905      	ldr	r1, [pc, #20]	; (8003154 <HAL_RCC_OscConfig+0x7b0>)
 800313e:	4b06      	ldr	r3, [pc, #24]	; (8003158 <HAL_RCC_OscConfig+0x7b4>)
 8003140:	4013      	ands	r3, r2
 8003142:	60cb      	str	r3, [r1, #12]
 8003144:	e001      	b.n	800314a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e000      	b.n	800314c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800314a:	2300      	movs	r3, #0
}
 800314c:	4618      	mov	r0, r3
 800314e:	3720      	adds	r7, #32
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	40021000 	.word	0x40021000
 8003158:	feeefffc 	.word	0xfeeefffc

0800315c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d101      	bne.n	8003170 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e0e7      	b.n	8003340 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003170:	4b75      	ldr	r3, [pc, #468]	; (8003348 <HAL_RCC_ClockConfig+0x1ec>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0307 	and.w	r3, r3, #7
 8003178:	683a      	ldr	r2, [r7, #0]
 800317a:	429a      	cmp	r2, r3
 800317c:	d910      	bls.n	80031a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800317e:	4b72      	ldr	r3, [pc, #456]	; (8003348 <HAL_RCC_ClockConfig+0x1ec>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f023 0207 	bic.w	r2, r3, #7
 8003186:	4970      	ldr	r1, [pc, #448]	; (8003348 <HAL_RCC_ClockConfig+0x1ec>)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	4313      	orrs	r3, r2
 800318c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800318e:	4b6e      	ldr	r3, [pc, #440]	; (8003348 <HAL_RCC_ClockConfig+0x1ec>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0307 	and.w	r3, r3, #7
 8003196:	683a      	ldr	r2, [r7, #0]
 8003198:	429a      	cmp	r2, r3
 800319a:	d001      	beq.n	80031a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e0cf      	b.n	8003340 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0302 	and.w	r3, r3, #2
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d010      	beq.n	80031ce <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689a      	ldr	r2, [r3, #8]
 80031b0:	4b66      	ldr	r3, [pc, #408]	; (800334c <HAL_RCC_ClockConfig+0x1f0>)
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d908      	bls.n	80031ce <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031bc:	4b63      	ldr	r3, [pc, #396]	; (800334c <HAL_RCC_ClockConfig+0x1f0>)
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	4960      	ldr	r1, [pc, #384]	; (800334c <HAL_RCC_ClockConfig+0x1f0>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d04c      	beq.n	8003274 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	2b03      	cmp	r3, #3
 80031e0:	d107      	bne.n	80031f2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031e2:	4b5a      	ldr	r3, [pc, #360]	; (800334c <HAL_RCC_ClockConfig+0x1f0>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d121      	bne.n	8003232 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e0a6      	b.n	8003340 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d107      	bne.n	800320a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031fa:	4b54      	ldr	r3, [pc, #336]	; (800334c <HAL_RCC_ClockConfig+0x1f0>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d115      	bne.n	8003232 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e09a      	b.n	8003340 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d107      	bne.n	8003222 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003212:	4b4e      	ldr	r3, [pc, #312]	; (800334c <HAL_RCC_ClockConfig+0x1f0>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d109      	bne.n	8003232 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e08e      	b.n	8003340 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003222:	4b4a      	ldr	r3, [pc, #296]	; (800334c <HAL_RCC_ClockConfig+0x1f0>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e086      	b.n	8003340 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003232:	4b46      	ldr	r3, [pc, #280]	; (800334c <HAL_RCC_ClockConfig+0x1f0>)
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f023 0203 	bic.w	r2, r3, #3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	4943      	ldr	r1, [pc, #268]	; (800334c <HAL_RCC_ClockConfig+0x1f0>)
 8003240:	4313      	orrs	r3, r2
 8003242:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003244:	f7fd fd52 	bl	8000cec <HAL_GetTick>
 8003248:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800324a:	e00a      	b.n	8003262 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800324c:	f7fd fd4e 	bl	8000cec <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	f241 3288 	movw	r2, #5000	; 0x1388
 800325a:	4293      	cmp	r3, r2
 800325c:	d901      	bls.n	8003262 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e06e      	b.n	8003340 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003262:	4b3a      	ldr	r3, [pc, #232]	; (800334c <HAL_RCC_ClockConfig+0x1f0>)
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f003 020c 	and.w	r2, r3, #12
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	429a      	cmp	r2, r3
 8003272:	d1eb      	bne.n	800324c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0302 	and.w	r3, r3, #2
 800327c:	2b00      	cmp	r3, #0
 800327e:	d010      	beq.n	80032a2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689a      	ldr	r2, [r3, #8]
 8003284:	4b31      	ldr	r3, [pc, #196]	; (800334c <HAL_RCC_ClockConfig+0x1f0>)
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800328c:	429a      	cmp	r2, r3
 800328e:	d208      	bcs.n	80032a2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003290:	4b2e      	ldr	r3, [pc, #184]	; (800334c <HAL_RCC_ClockConfig+0x1f0>)
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	492b      	ldr	r1, [pc, #172]	; (800334c <HAL_RCC_ClockConfig+0x1f0>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032a2:	4b29      	ldr	r3, [pc, #164]	; (8003348 <HAL_RCC_ClockConfig+0x1ec>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0307 	and.w	r3, r3, #7
 80032aa:	683a      	ldr	r2, [r7, #0]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d210      	bcs.n	80032d2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032b0:	4b25      	ldr	r3, [pc, #148]	; (8003348 <HAL_RCC_ClockConfig+0x1ec>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f023 0207 	bic.w	r2, r3, #7
 80032b8:	4923      	ldr	r1, [pc, #140]	; (8003348 <HAL_RCC_ClockConfig+0x1ec>)
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	4313      	orrs	r3, r2
 80032be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032c0:	4b21      	ldr	r3, [pc, #132]	; (8003348 <HAL_RCC_ClockConfig+0x1ec>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0307 	and.w	r3, r3, #7
 80032c8:	683a      	ldr	r2, [r7, #0]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d001      	beq.n	80032d2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e036      	b.n	8003340 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0304 	and.w	r3, r3, #4
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d008      	beq.n	80032f0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032de:	4b1b      	ldr	r3, [pc, #108]	; (800334c <HAL_RCC_ClockConfig+0x1f0>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	4918      	ldr	r1, [pc, #96]	; (800334c <HAL_RCC_ClockConfig+0x1f0>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0308 	and.w	r3, r3, #8
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d009      	beq.n	8003310 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032fc:	4b13      	ldr	r3, [pc, #76]	; (800334c <HAL_RCC_ClockConfig+0x1f0>)
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	00db      	lsls	r3, r3, #3
 800330a:	4910      	ldr	r1, [pc, #64]	; (800334c <HAL_RCC_ClockConfig+0x1f0>)
 800330c:	4313      	orrs	r3, r2
 800330e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003310:	f000 f824 	bl	800335c <HAL_RCC_GetSysClockFreq>
 8003314:	4602      	mov	r2, r0
 8003316:	4b0d      	ldr	r3, [pc, #52]	; (800334c <HAL_RCC_ClockConfig+0x1f0>)
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	091b      	lsrs	r3, r3, #4
 800331c:	f003 030f 	and.w	r3, r3, #15
 8003320:	490b      	ldr	r1, [pc, #44]	; (8003350 <HAL_RCC_ClockConfig+0x1f4>)
 8003322:	5ccb      	ldrb	r3, [r1, r3]
 8003324:	f003 031f 	and.w	r3, r3, #31
 8003328:	fa22 f303 	lsr.w	r3, r2, r3
 800332c:	4a09      	ldr	r2, [pc, #36]	; (8003354 <HAL_RCC_ClockConfig+0x1f8>)
 800332e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003330:	4b09      	ldr	r3, [pc, #36]	; (8003358 <HAL_RCC_ClockConfig+0x1fc>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4618      	mov	r0, r3
 8003336:	f7fd fc89 	bl	8000c4c <HAL_InitTick>
 800333a:	4603      	mov	r3, r0
 800333c:	72fb      	strb	r3, [r7, #11]

  return status;
 800333e:	7afb      	ldrb	r3, [r7, #11]
}
 8003340:	4618      	mov	r0, r3
 8003342:	3710      	adds	r7, #16
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	40022000 	.word	0x40022000
 800334c:	40021000 	.word	0x40021000
 8003350:	0800411c 	.word	0x0800411c
 8003354:	20000000 	.word	0x20000000
 8003358:	20000004 	.word	0x20000004

0800335c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800335c:	b480      	push	{r7}
 800335e:	b089      	sub	sp, #36	; 0x24
 8003360:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003362:	2300      	movs	r3, #0
 8003364:	61fb      	str	r3, [r7, #28]
 8003366:	2300      	movs	r3, #0
 8003368:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800336a:	4b3e      	ldr	r3, [pc, #248]	; (8003464 <HAL_RCC_GetSysClockFreq+0x108>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f003 030c 	and.w	r3, r3, #12
 8003372:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003374:	4b3b      	ldr	r3, [pc, #236]	; (8003464 <HAL_RCC_GetSysClockFreq+0x108>)
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	f003 0303 	and.w	r3, r3, #3
 800337c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d005      	beq.n	8003390 <HAL_RCC_GetSysClockFreq+0x34>
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	2b0c      	cmp	r3, #12
 8003388:	d121      	bne.n	80033ce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d11e      	bne.n	80033ce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003390:	4b34      	ldr	r3, [pc, #208]	; (8003464 <HAL_RCC_GetSysClockFreq+0x108>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0308 	and.w	r3, r3, #8
 8003398:	2b00      	cmp	r3, #0
 800339a:	d107      	bne.n	80033ac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800339c:	4b31      	ldr	r3, [pc, #196]	; (8003464 <HAL_RCC_GetSysClockFreq+0x108>)
 800339e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033a2:	0a1b      	lsrs	r3, r3, #8
 80033a4:	f003 030f 	and.w	r3, r3, #15
 80033a8:	61fb      	str	r3, [r7, #28]
 80033aa:	e005      	b.n	80033b8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80033ac:	4b2d      	ldr	r3, [pc, #180]	; (8003464 <HAL_RCC_GetSysClockFreq+0x108>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	091b      	lsrs	r3, r3, #4
 80033b2:	f003 030f 	and.w	r3, r3, #15
 80033b6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80033b8:	4a2b      	ldr	r2, [pc, #172]	; (8003468 <HAL_RCC_GetSysClockFreq+0x10c>)
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033c0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d10d      	bne.n	80033e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033cc:	e00a      	b.n	80033e4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	2b04      	cmp	r3, #4
 80033d2:	d102      	bne.n	80033da <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80033d4:	4b25      	ldr	r3, [pc, #148]	; (800346c <HAL_RCC_GetSysClockFreq+0x110>)
 80033d6:	61bb      	str	r3, [r7, #24]
 80033d8:	e004      	b.n	80033e4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	2b08      	cmp	r3, #8
 80033de:	d101      	bne.n	80033e4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80033e0:	4b23      	ldr	r3, [pc, #140]	; (8003470 <HAL_RCC_GetSysClockFreq+0x114>)
 80033e2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	2b0c      	cmp	r3, #12
 80033e8:	d134      	bne.n	8003454 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80033ea:	4b1e      	ldr	r3, [pc, #120]	; (8003464 <HAL_RCC_GetSysClockFreq+0x108>)
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	f003 0303 	and.w	r3, r3, #3
 80033f2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d003      	beq.n	8003402 <HAL_RCC_GetSysClockFreq+0xa6>
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	2b03      	cmp	r3, #3
 80033fe:	d003      	beq.n	8003408 <HAL_RCC_GetSysClockFreq+0xac>
 8003400:	e005      	b.n	800340e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003402:	4b1a      	ldr	r3, [pc, #104]	; (800346c <HAL_RCC_GetSysClockFreq+0x110>)
 8003404:	617b      	str	r3, [r7, #20]
      break;
 8003406:	e005      	b.n	8003414 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003408:	4b19      	ldr	r3, [pc, #100]	; (8003470 <HAL_RCC_GetSysClockFreq+0x114>)
 800340a:	617b      	str	r3, [r7, #20]
      break;
 800340c:	e002      	b.n	8003414 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	617b      	str	r3, [r7, #20]
      break;
 8003412:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003414:	4b13      	ldr	r3, [pc, #76]	; (8003464 <HAL_RCC_GetSysClockFreq+0x108>)
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	091b      	lsrs	r3, r3, #4
 800341a:	f003 0307 	and.w	r3, r3, #7
 800341e:	3301      	adds	r3, #1
 8003420:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003422:	4b10      	ldr	r3, [pc, #64]	; (8003464 <HAL_RCC_GetSysClockFreq+0x108>)
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	0a1b      	lsrs	r3, r3, #8
 8003428:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800342c:	697a      	ldr	r2, [r7, #20]
 800342e:	fb03 f202 	mul.w	r2, r3, r2
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	fbb2 f3f3 	udiv	r3, r2, r3
 8003438:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800343a:	4b0a      	ldr	r3, [pc, #40]	; (8003464 <HAL_RCC_GetSysClockFreq+0x108>)
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	0e5b      	lsrs	r3, r3, #25
 8003440:	f003 0303 	and.w	r3, r3, #3
 8003444:	3301      	adds	r3, #1
 8003446:	005b      	lsls	r3, r3, #1
 8003448:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003452:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003454:	69bb      	ldr	r3, [r7, #24]
}
 8003456:	4618      	mov	r0, r3
 8003458:	3724      	adds	r7, #36	; 0x24
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	40021000 	.word	0x40021000
 8003468:	0800412c 	.word	0x0800412c
 800346c:	00f42400 	.word	0x00f42400
 8003470:	007a1200 	.word	0x007a1200

08003474 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b086      	sub	sp, #24
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800347c:	2300      	movs	r3, #0
 800347e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003480:	4b2a      	ldr	r3, [pc, #168]	; (800352c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d003      	beq.n	8003494 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800348c:	f7ff fa26 	bl	80028dc <HAL_PWREx_GetVoltageRange>
 8003490:	6178      	str	r0, [r7, #20]
 8003492:	e014      	b.n	80034be <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003494:	4b25      	ldr	r3, [pc, #148]	; (800352c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003498:	4a24      	ldr	r2, [pc, #144]	; (800352c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800349a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800349e:	6593      	str	r3, [r2, #88]	; 0x58
 80034a0:	4b22      	ldr	r3, [pc, #136]	; (800352c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a8:	60fb      	str	r3, [r7, #12]
 80034aa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80034ac:	f7ff fa16 	bl	80028dc <HAL_PWREx_GetVoltageRange>
 80034b0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80034b2:	4b1e      	ldr	r3, [pc, #120]	; (800352c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b6:	4a1d      	ldr	r2, [pc, #116]	; (800352c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034bc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034c4:	d10b      	bne.n	80034de <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2b80      	cmp	r3, #128	; 0x80
 80034ca:	d919      	bls.n	8003500 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2ba0      	cmp	r3, #160	; 0xa0
 80034d0:	d902      	bls.n	80034d8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80034d2:	2302      	movs	r3, #2
 80034d4:	613b      	str	r3, [r7, #16]
 80034d6:	e013      	b.n	8003500 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80034d8:	2301      	movs	r3, #1
 80034da:	613b      	str	r3, [r7, #16]
 80034dc:	e010      	b.n	8003500 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2b80      	cmp	r3, #128	; 0x80
 80034e2:	d902      	bls.n	80034ea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80034e4:	2303      	movs	r3, #3
 80034e6:	613b      	str	r3, [r7, #16]
 80034e8:	e00a      	b.n	8003500 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2b80      	cmp	r3, #128	; 0x80
 80034ee:	d102      	bne.n	80034f6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80034f0:	2302      	movs	r3, #2
 80034f2:	613b      	str	r3, [r7, #16]
 80034f4:	e004      	b.n	8003500 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2b70      	cmp	r3, #112	; 0x70
 80034fa:	d101      	bne.n	8003500 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80034fc:	2301      	movs	r3, #1
 80034fe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003500:	4b0b      	ldr	r3, [pc, #44]	; (8003530 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f023 0207 	bic.w	r2, r3, #7
 8003508:	4909      	ldr	r1, [pc, #36]	; (8003530 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	4313      	orrs	r3, r2
 800350e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003510:	4b07      	ldr	r3, [pc, #28]	; (8003530 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0307 	and.w	r3, r3, #7
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	429a      	cmp	r2, r3
 800351c:	d001      	beq.n	8003522 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e000      	b.n	8003524 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	3718      	adds	r7, #24
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	40021000 	.word	0x40021000
 8003530:	40022000 	.word	0x40022000

08003534 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b086      	sub	sp, #24
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800353c:	2300      	movs	r3, #0
 800353e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003540:	2300      	movs	r3, #0
 8003542:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800354c:	2b00      	cmp	r3, #0
 800354e:	d041      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003554:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003558:	d02a      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800355a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800355e:	d824      	bhi.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003560:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003564:	d008      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003566:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800356a:	d81e      	bhi.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00a      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003570:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003574:	d010      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003576:	e018      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003578:	4b86      	ldr	r3, [pc, #536]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	4a85      	ldr	r2, [pc, #532]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800357e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003582:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003584:	e015      	b.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	3304      	adds	r3, #4
 800358a:	2100      	movs	r1, #0
 800358c:	4618      	mov	r0, r3
 800358e:	f000 fabb 	bl	8003b08 <RCCEx_PLLSAI1_Config>
 8003592:	4603      	mov	r3, r0
 8003594:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003596:	e00c      	b.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	3320      	adds	r3, #32
 800359c:	2100      	movs	r1, #0
 800359e:	4618      	mov	r0, r3
 80035a0:	f000 fba6 	bl	8003cf0 <RCCEx_PLLSAI2_Config>
 80035a4:	4603      	mov	r3, r0
 80035a6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035a8:	e003      	b.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	74fb      	strb	r3, [r7, #19]
      break;
 80035ae:	e000      	b.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80035b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035b2:	7cfb      	ldrb	r3, [r7, #19]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d10b      	bne.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035b8:	4b76      	ldr	r3, [pc, #472]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035c6:	4973      	ldr	r1, [pc, #460]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80035ce:	e001      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035d0:	7cfb      	ldrb	r3, [r7, #19]
 80035d2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d041      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035e4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80035e8:	d02a      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80035ea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80035ee:	d824      	bhi.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80035f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035f4:	d008      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80035f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035fa:	d81e      	bhi.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00a      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003600:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003604:	d010      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003606:	e018      	b.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003608:	4b62      	ldr	r3, [pc, #392]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	4a61      	ldr	r2, [pc, #388]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800360e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003612:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003614:	e015      	b.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	3304      	adds	r3, #4
 800361a:	2100      	movs	r1, #0
 800361c:	4618      	mov	r0, r3
 800361e:	f000 fa73 	bl	8003b08 <RCCEx_PLLSAI1_Config>
 8003622:	4603      	mov	r3, r0
 8003624:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003626:	e00c      	b.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	3320      	adds	r3, #32
 800362c:	2100      	movs	r1, #0
 800362e:	4618      	mov	r0, r3
 8003630:	f000 fb5e 	bl	8003cf0 <RCCEx_PLLSAI2_Config>
 8003634:	4603      	mov	r3, r0
 8003636:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003638:	e003      	b.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	74fb      	strb	r3, [r7, #19]
      break;
 800363e:	e000      	b.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003640:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003642:	7cfb      	ldrb	r3, [r7, #19]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d10b      	bne.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003648:	4b52      	ldr	r3, [pc, #328]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800364a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800364e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003656:	494f      	ldr	r1, [pc, #316]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003658:	4313      	orrs	r3, r2
 800365a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800365e:	e001      	b.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003660:	7cfb      	ldrb	r3, [r7, #19]
 8003662:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800366c:	2b00      	cmp	r3, #0
 800366e:	f000 80a0 	beq.w	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003672:	2300      	movs	r3, #0
 8003674:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003676:	4b47      	ldr	r3, [pc, #284]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800367a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d101      	bne.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003682:	2301      	movs	r3, #1
 8003684:	e000      	b.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003686:	2300      	movs	r3, #0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d00d      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800368c:	4b41      	ldr	r3, [pc, #260]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800368e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003690:	4a40      	ldr	r2, [pc, #256]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003696:	6593      	str	r3, [r2, #88]	; 0x58
 8003698:	4b3e      	ldr	r3, [pc, #248]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800369a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800369c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036a0:	60bb      	str	r3, [r7, #8]
 80036a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036a4:	2301      	movs	r3, #1
 80036a6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036a8:	4b3b      	ldr	r3, [pc, #236]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a3a      	ldr	r2, [pc, #232]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80036ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036b4:	f7fd fb1a 	bl	8000cec <HAL_GetTick>
 80036b8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80036ba:	e009      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036bc:	f7fd fb16 	bl	8000cec <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d902      	bls.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	74fb      	strb	r3, [r7, #19]
        break;
 80036ce:	e005      	b.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80036d0:	4b31      	ldr	r3, [pc, #196]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d0ef      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80036dc:	7cfb      	ldrb	r3, [r7, #19]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d15c      	bne.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80036e2:	4b2c      	ldr	r3, [pc, #176]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d01f      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036fa:	697a      	ldr	r2, [r7, #20]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d019      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003700:	4b24      	ldr	r3, [pc, #144]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003706:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800370a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800370c:	4b21      	ldr	r3, [pc, #132]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800370e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003712:	4a20      	ldr	r2, [pc, #128]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003718:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800371c:	4b1d      	ldr	r3, [pc, #116]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800371e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003722:	4a1c      	ldr	r2, [pc, #112]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003724:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003728:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800372c:	4a19      	ldr	r2, [pc, #100]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b00      	cmp	r3, #0
 800373c:	d016      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800373e:	f7fd fad5 	bl	8000cec <HAL_GetTick>
 8003742:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003744:	e00b      	b.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003746:	f7fd fad1 	bl	8000cec <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	f241 3288 	movw	r2, #5000	; 0x1388
 8003754:	4293      	cmp	r3, r2
 8003756:	d902      	bls.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	74fb      	strb	r3, [r7, #19]
            break;
 800375c:	e006      	b.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800375e:	4b0d      	ldr	r3, [pc, #52]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003764:	f003 0302 	and.w	r3, r3, #2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d0ec      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800376c:	7cfb      	ldrb	r3, [r7, #19]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d10c      	bne.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003772:	4b08      	ldr	r3, [pc, #32]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003778:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003782:	4904      	ldr	r1, [pc, #16]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003784:	4313      	orrs	r3, r2
 8003786:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800378a:	e009      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800378c:	7cfb      	ldrb	r3, [r7, #19]
 800378e:	74bb      	strb	r3, [r7, #18]
 8003790:	e006      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003792:	bf00      	nop
 8003794:	40021000 	.word	0x40021000
 8003798:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800379c:	7cfb      	ldrb	r3, [r7, #19]
 800379e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037a0:	7c7b      	ldrb	r3, [r7, #17]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d105      	bne.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037a6:	4b9e      	ldr	r3, [pc, #632]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037aa:	4a9d      	ldr	r2, [pc, #628]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037b0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00a      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037be:	4b98      	ldr	r3, [pc, #608]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c4:	f023 0203 	bic.w	r2, r3, #3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037cc:	4994      	ldr	r1, [pc, #592]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0302 	and.w	r3, r3, #2
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00a      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037e0:	4b8f      	ldr	r3, [pc, #572]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e6:	f023 020c 	bic.w	r2, r3, #12
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ee:	498c      	ldr	r1, [pc, #560]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0304 	and.w	r3, r3, #4
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00a      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003802:	4b87      	ldr	r3, [pc, #540]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003808:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003810:	4983      	ldr	r1, [pc, #524]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003812:	4313      	orrs	r3, r2
 8003814:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0308 	and.w	r3, r3, #8
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00a      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003824:	4b7e      	ldr	r3, [pc, #504]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800382a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003832:	497b      	ldr	r1, [pc, #492]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003834:	4313      	orrs	r3, r2
 8003836:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0310 	and.w	r3, r3, #16
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00a      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003846:	4b76      	ldr	r3, [pc, #472]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800384c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003854:	4972      	ldr	r1, [pc, #456]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003856:	4313      	orrs	r3, r2
 8003858:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0320 	and.w	r3, r3, #32
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00a      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003868:	4b6d      	ldr	r3, [pc, #436]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800386a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800386e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003876:	496a      	ldr	r1, [pc, #424]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003878:	4313      	orrs	r3, r2
 800387a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00a      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800388a:	4b65      	ldr	r3, [pc, #404]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800388c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003890:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003898:	4961      	ldr	r1, [pc, #388]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800389a:	4313      	orrs	r3, r2
 800389c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00a      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80038ac:	4b5c      	ldr	r3, [pc, #368]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038ba:	4959      	ldr	r1, [pc, #356]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00a      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038ce:	4b54      	ldr	r3, [pc, #336]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038dc:	4950      	ldr	r1, [pc, #320]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00a      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80038f0:	4b4b      	ldr	r3, [pc, #300]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038fe:	4948      	ldr	r1, [pc, #288]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003900:	4313      	orrs	r3, r2
 8003902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00a      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003912:	4b43      	ldr	r3, [pc, #268]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003918:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003920:	493f      	ldr	r1, [pc, #252]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003922:	4313      	orrs	r3, r2
 8003924:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d028      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003934:	4b3a      	ldr	r3, [pc, #232]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800393a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003942:	4937      	ldr	r1, [pc, #220]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003944:	4313      	orrs	r3, r2
 8003946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800394e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003952:	d106      	bne.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003954:	4b32      	ldr	r3, [pc, #200]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	4a31      	ldr	r2, [pc, #196]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800395a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800395e:	60d3      	str	r3, [r2, #12]
 8003960:	e011      	b.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003966:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800396a:	d10c      	bne.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	3304      	adds	r3, #4
 8003970:	2101      	movs	r1, #1
 8003972:	4618      	mov	r0, r3
 8003974:	f000 f8c8 	bl	8003b08 <RCCEx_PLLSAI1_Config>
 8003978:	4603      	mov	r3, r0
 800397a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800397c:	7cfb      	ldrb	r3, [r7, #19]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d001      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003982:	7cfb      	ldrb	r3, [r7, #19]
 8003984:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d028      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003992:	4b23      	ldr	r3, [pc, #140]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003998:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a0:	491f      	ldr	r1, [pc, #124]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039b0:	d106      	bne.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039b2:	4b1b      	ldr	r3, [pc, #108]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	4a1a      	ldr	r2, [pc, #104]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039bc:	60d3      	str	r3, [r2, #12]
 80039be:	e011      	b.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039c8:	d10c      	bne.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	3304      	adds	r3, #4
 80039ce:	2101      	movs	r1, #1
 80039d0:	4618      	mov	r0, r3
 80039d2:	f000 f899 	bl	8003b08 <RCCEx_PLLSAI1_Config>
 80039d6:	4603      	mov	r3, r0
 80039d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039da:	7cfb      	ldrb	r3, [r7, #19]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d001      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80039e0:	7cfb      	ldrb	r3, [r7, #19]
 80039e2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d02b      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80039f0:	4b0b      	ldr	r3, [pc, #44]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039fe:	4908      	ldr	r1, [pc, #32]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a0e:	d109      	bne.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a10:	4b03      	ldr	r3, [pc, #12]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	4a02      	ldr	r2, [pc, #8]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a1a:	60d3      	str	r3, [r2, #12]
 8003a1c:	e014      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003a1e:	bf00      	nop
 8003a20:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a2c:	d10c      	bne.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	3304      	adds	r3, #4
 8003a32:	2101      	movs	r1, #1
 8003a34:	4618      	mov	r0, r3
 8003a36:	f000 f867 	bl	8003b08 <RCCEx_PLLSAI1_Config>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a3e:	7cfb      	ldrb	r3, [r7, #19]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d001      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003a44:	7cfb      	ldrb	r3, [r7, #19]
 8003a46:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d02f      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a54:	4b2b      	ldr	r3, [pc, #172]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a5a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a62:	4928      	ldr	r1, [pc, #160]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a64:	4313      	orrs	r3, r2
 8003a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a72:	d10d      	bne.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	3304      	adds	r3, #4
 8003a78:	2102      	movs	r1, #2
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f000 f844 	bl	8003b08 <RCCEx_PLLSAI1_Config>
 8003a80:	4603      	mov	r3, r0
 8003a82:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a84:	7cfb      	ldrb	r3, [r7, #19]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d014      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003a8a:	7cfb      	ldrb	r3, [r7, #19]
 8003a8c:	74bb      	strb	r3, [r7, #18]
 8003a8e:	e011      	b.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a98:	d10c      	bne.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	3320      	adds	r3, #32
 8003a9e:	2102      	movs	r1, #2
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f000 f925 	bl	8003cf0 <RCCEx_PLLSAI2_Config>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003aaa:	7cfb      	ldrb	r3, [r7, #19]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d001      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003ab0:	7cfb      	ldrb	r3, [r7, #19]
 8003ab2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d00a      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003ac0:	4b10      	ldr	r3, [pc, #64]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ace:	490d      	ldr	r1, [pc, #52]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00b      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003ae2:	4b08      	ldr	r3, [pc, #32]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003af2:	4904      	ldr	r1, [pc, #16]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003afa:	7cbb      	ldrb	r3, [r7, #18]
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3718      	adds	r7, #24
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	40021000 	.word	0x40021000

08003b08 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b12:	2300      	movs	r3, #0
 8003b14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b16:	4b75      	ldr	r3, [pc, #468]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	f003 0303 	and.w	r3, r3, #3
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d018      	beq.n	8003b54 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003b22:	4b72      	ldr	r3, [pc, #456]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	f003 0203 	and.w	r2, r3, #3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d10d      	bne.n	8003b4e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
       ||
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d009      	beq.n	8003b4e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003b3a:	4b6c      	ldr	r3, [pc, #432]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	091b      	lsrs	r3, r3, #4
 8003b40:	f003 0307 	and.w	r3, r3, #7
 8003b44:	1c5a      	adds	r2, r3, #1
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
       ||
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d047      	beq.n	8003bde <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	73fb      	strb	r3, [r7, #15]
 8003b52:	e044      	b.n	8003bde <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2b03      	cmp	r3, #3
 8003b5a:	d018      	beq.n	8003b8e <RCCEx_PLLSAI1_Config+0x86>
 8003b5c:	2b03      	cmp	r3, #3
 8003b5e:	d825      	bhi.n	8003bac <RCCEx_PLLSAI1_Config+0xa4>
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d002      	beq.n	8003b6a <RCCEx_PLLSAI1_Config+0x62>
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d009      	beq.n	8003b7c <RCCEx_PLLSAI1_Config+0x74>
 8003b68:	e020      	b.n	8003bac <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b6a:	4b60      	ldr	r3, [pc, #384]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0302 	and.w	r3, r3, #2
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d11d      	bne.n	8003bb2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b7a:	e01a      	b.n	8003bb2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b7c:	4b5b      	ldr	r3, [pc, #364]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d116      	bne.n	8003bb6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b8c:	e013      	b.n	8003bb6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b8e:	4b57      	ldr	r3, [pc, #348]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d10f      	bne.n	8003bba <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b9a:	4b54      	ldr	r3, [pc, #336]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d109      	bne.n	8003bba <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003baa:	e006      	b.n	8003bba <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	73fb      	strb	r3, [r7, #15]
      break;
 8003bb0:	e004      	b.n	8003bbc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003bb2:	bf00      	nop
 8003bb4:	e002      	b.n	8003bbc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003bb6:	bf00      	nop
 8003bb8:	e000      	b.n	8003bbc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003bba:	bf00      	nop
    }

    if(status == HAL_OK)
 8003bbc:	7bfb      	ldrb	r3, [r7, #15]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d10d      	bne.n	8003bde <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003bc2:	4b4a      	ldr	r3, [pc, #296]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6819      	ldr	r1, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	3b01      	subs	r3, #1
 8003bd4:	011b      	lsls	r3, r3, #4
 8003bd6:	430b      	orrs	r3, r1
 8003bd8:	4944      	ldr	r1, [pc, #272]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003bde:	7bfb      	ldrb	r3, [r7, #15]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d17d      	bne.n	8003ce0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003be4:	4b41      	ldr	r3, [pc, #260]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a40      	ldr	r2, [pc, #256]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003bee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bf0:	f7fd f87c 	bl	8000cec <HAL_GetTick>
 8003bf4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003bf6:	e009      	b.n	8003c0c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003bf8:	f7fd f878 	bl	8000cec <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d902      	bls.n	8003c0c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	73fb      	strb	r3, [r7, #15]
        break;
 8003c0a:	e005      	b.n	8003c18 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c0c:	4b37      	ldr	r3, [pc, #220]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d1ef      	bne.n	8003bf8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003c18:	7bfb      	ldrb	r3, [r7, #15]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d160      	bne.n	8003ce0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d111      	bne.n	8003c48 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c24:	4b31      	ldr	r3, [pc, #196]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003c2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	6892      	ldr	r2, [r2, #8]
 8003c34:	0211      	lsls	r1, r2, #8
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	68d2      	ldr	r2, [r2, #12]
 8003c3a:	0912      	lsrs	r2, r2, #4
 8003c3c:	0452      	lsls	r2, r2, #17
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	492a      	ldr	r1, [pc, #168]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	610b      	str	r3, [r1, #16]
 8003c46:	e027      	b.n	8003c98 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d112      	bne.n	8003c74 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c4e:	4b27      	ldr	r3, [pc, #156]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003c56:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	6892      	ldr	r2, [r2, #8]
 8003c5e:	0211      	lsls	r1, r2, #8
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	6912      	ldr	r2, [r2, #16]
 8003c64:	0852      	lsrs	r2, r2, #1
 8003c66:	3a01      	subs	r2, #1
 8003c68:	0552      	lsls	r2, r2, #21
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	491f      	ldr	r1, [pc, #124]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	610b      	str	r3, [r1, #16]
 8003c72:	e011      	b.n	8003c98 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c74:	4b1d      	ldr	r3, [pc, #116]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003c7c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	6892      	ldr	r2, [r2, #8]
 8003c84:	0211      	lsls	r1, r2, #8
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	6952      	ldr	r2, [r2, #20]
 8003c8a:	0852      	lsrs	r2, r2, #1
 8003c8c:	3a01      	subs	r2, #1
 8003c8e:	0652      	lsls	r2, r2, #25
 8003c90:	430a      	orrs	r2, r1
 8003c92:	4916      	ldr	r1, [pc, #88]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003c98:	4b14      	ldr	r3, [pc, #80]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a13      	ldr	r2, [pc, #76]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c9e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ca2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ca4:	f7fd f822 	bl	8000cec <HAL_GetTick>
 8003ca8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003caa:	e009      	b.n	8003cc0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003cac:	f7fd f81e 	bl	8000cec <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d902      	bls.n	8003cc0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	73fb      	strb	r3, [r7, #15]
          break;
 8003cbe:	e005      	b.n	8003ccc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003cc0:	4b0a      	ldr	r3, [pc, #40]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d0ef      	beq.n	8003cac <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003ccc:	7bfb      	ldrb	r3, [r7, #15]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d106      	bne.n	8003ce0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003cd2:	4b06      	ldr	r3, [pc, #24]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cd4:	691a      	ldr	r2, [r3, #16]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	4904      	ldr	r1, [pc, #16]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3710      	adds	r7, #16
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	40021000 	.word	0x40021000

08003cf0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003cfe:	4b6a      	ldr	r3, [pc, #424]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	f003 0303 	and.w	r3, r3, #3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d018      	beq.n	8003d3c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003d0a:	4b67      	ldr	r3, [pc, #412]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	f003 0203 	and.w	r2, r3, #3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d10d      	bne.n	8003d36 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
       ||
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d009      	beq.n	8003d36 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003d22:	4b61      	ldr	r3, [pc, #388]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	091b      	lsrs	r3, r3, #4
 8003d28:	f003 0307 	and.w	r3, r3, #7
 8003d2c:	1c5a      	adds	r2, r3, #1
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
       ||
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d047      	beq.n	8003dc6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	73fb      	strb	r3, [r7, #15]
 8003d3a:	e044      	b.n	8003dc6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2b03      	cmp	r3, #3
 8003d42:	d018      	beq.n	8003d76 <RCCEx_PLLSAI2_Config+0x86>
 8003d44:	2b03      	cmp	r3, #3
 8003d46:	d825      	bhi.n	8003d94 <RCCEx_PLLSAI2_Config+0xa4>
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d002      	beq.n	8003d52 <RCCEx_PLLSAI2_Config+0x62>
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d009      	beq.n	8003d64 <RCCEx_PLLSAI2_Config+0x74>
 8003d50:	e020      	b.n	8003d94 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d52:	4b55      	ldr	r3, [pc, #340]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d11d      	bne.n	8003d9a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d62:	e01a      	b.n	8003d9a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d64:	4b50      	ldr	r3, [pc, #320]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d116      	bne.n	8003d9e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d74:	e013      	b.n	8003d9e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d76:	4b4c      	ldr	r3, [pc, #304]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d10f      	bne.n	8003da2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d82:	4b49      	ldr	r3, [pc, #292]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d109      	bne.n	8003da2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d92:	e006      	b.n	8003da2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	73fb      	strb	r3, [r7, #15]
      break;
 8003d98:	e004      	b.n	8003da4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003d9a:	bf00      	nop
 8003d9c:	e002      	b.n	8003da4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003d9e:	bf00      	nop
 8003da0:	e000      	b.n	8003da4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003da2:	bf00      	nop
    }

    if(status == HAL_OK)
 8003da4:	7bfb      	ldrb	r3, [r7, #15]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d10d      	bne.n	8003dc6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003daa:	4b3f      	ldr	r3, [pc, #252]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6819      	ldr	r1, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	011b      	lsls	r3, r3, #4
 8003dbe:	430b      	orrs	r3, r1
 8003dc0:	4939      	ldr	r1, [pc, #228]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003dc6:	7bfb      	ldrb	r3, [r7, #15]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d167      	bne.n	8003e9c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003dcc:	4b36      	ldr	r3, [pc, #216]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a35      	ldr	r2, [pc, #212]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dd6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dd8:	f7fc ff88 	bl	8000cec <HAL_GetTick>
 8003ddc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003dde:	e009      	b.n	8003df4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003de0:	f7fc ff84 	bl	8000cec <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d902      	bls.n	8003df4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	73fb      	strb	r3, [r7, #15]
        break;
 8003df2:	e005      	b.n	8003e00 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003df4:	4b2c      	ldr	r3, [pc, #176]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d1ef      	bne.n	8003de0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003e00:	7bfb      	ldrb	r3, [r7, #15]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d14a      	bne.n	8003e9c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d111      	bne.n	8003e30 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e0c:	4b26      	ldr	r3, [pc, #152]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e0e:	695b      	ldr	r3, [r3, #20]
 8003e10:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003e14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	6892      	ldr	r2, [r2, #8]
 8003e1c:	0211      	lsls	r1, r2, #8
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	68d2      	ldr	r2, [r2, #12]
 8003e22:	0912      	lsrs	r2, r2, #4
 8003e24:	0452      	lsls	r2, r2, #17
 8003e26:	430a      	orrs	r2, r1
 8003e28:	491f      	ldr	r1, [pc, #124]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	614b      	str	r3, [r1, #20]
 8003e2e:	e011      	b.n	8003e54 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e30:	4b1d      	ldr	r3, [pc, #116]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e32:	695b      	ldr	r3, [r3, #20]
 8003e34:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003e38:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	6892      	ldr	r2, [r2, #8]
 8003e40:	0211      	lsls	r1, r2, #8
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	6912      	ldr	r2, [r2, #16]
 8003e46:	0852      	lsrs	r2, r2, #1
 8003e48:	3a01      	subs	r2, #1
 8003e4a:	0652      	lsls	r2, r2, #25
 8003e4c:	430a      	orrs	r2, r1
 8003e4e:	4916      	ldr	r1, [pc, #88]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003e54:	4b14      	ldr	r3, [pc, #80]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a13      	ldr	r2, [pc, #76]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e5e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e60:	f7fc ff44 	bl	8000cec <HAL_GetTick>
 8003e64:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003e66:	e009      	b.n	8003e7c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e68:	f7fc ff40 	bl	8000cec <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d902      	bls.n	8003e7c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	73fb      	strb	r3, [r7, #15]
          break;
 8003e7a:	e005      	b.n	8003e88 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003e7c:	4b0a      	ldr	r3, [pc, #40]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d0ef      	beq.n	8003e68 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003e88:	7bfb      	ldrb	r3, [r7, #15]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d106      	bne.n	8003e9c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003e8e:	4b06      	ldr	r3, [pc, #24]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e90:	695a      	ldr	r2, [r3, #20]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	4904      	ldr	r1, [pc, #16]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3710      	adds	r7, #16
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	40021000 	.word	0x40021000

08003eac <LM35_Init>:
static ADC_HandleTypeDef hadc = {0};
static ADC_ChannelConfTypeDef sConfig = {0};
static uint8_t calibrated = 0;

void LM35_Init(uint16_t LM35_Instance)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b086      	sub	sp, #24
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	80fb      	strh	r3, [r7, #6]
	if(LM35_CfgParam[LM35_Instance].LM35_GPIO == GPIOA)
 8003eb6:	88fa      	ldrh	r2, [r7, #6]
 8003eb8:	4951      	ldr	r1, [pc, #324]	; (8004000 <LM35_Init+0x154>)
 8003eba:	4613      	mov	r3, r2
 8003ebc:	005b      	lsls	r3, r3, #1
 8003ebe:	4413      	add	r3, r2
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	440b      	add	r3, r1
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003eca:	d10c      	bne.n	8003ee6 <LM35_Init+0x3a>
	{
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8003ecc:	4b4d      	ldr	r3, [pc, #308]	; (8004004 <LM35_Init+0x158>)
 8003ece:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ed0:	4a4c      	ldr	r2, [pc, #304]	; (8004004 <LM35_Init+0x158>)
 8003ed2:	f043 0301 	orr.w	r3, r3, #1
 8003ed6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ed8:	4b4a      	ldr	r3, [pc, #296]	; (8004004 <LM35_Init+0x158>)
 8003eda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003edc:	f003 0301 	and.w	r3, r3, #1
 8003ee0:	617b      	str	r3, [r7, #20]
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	e046      	b.n	8003f74 <LM35_Init+0xc8>
	}
	else if(LM35_CfgParam[LM35_Instance].LM35_GPIO == GPIOB)
 8003ee6:	88fa      	ldrh	r2, [r7, #6]
 8003ee8:	4945      	ldr	r1, [pc, #276]	; (8004000 <LM35_Init+0x154>)
 8003eea:	4613      	mov	r3, r2
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	4413      	add	r3, r2
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	440b      	add	r3, r1
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a44      	ldr	r2, [pc, #272]	; (8004008 <LM35_Init+0x15c>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d10c      	bne.n	8003f16 <LM35_Init+0x6a>
	{
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8003efc:	4b41      	ldr	r3, [pc, #260]	; (8004004 <LM35_Init+0x158>)
 8003efe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f00:	4a40      	ldr	r2, [pc, #256]	; (8004004 <LM35_Init+0x158>)
 8003f02:	f043 0302 	orr.w	r3, r3, #2
 8003f06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f08:	4b3e      	ldr	r3, [pc, #248]	; (8004004 <LM35_Init+0x158>)
 8003f0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f0c:	f003 0302 	and.w	r3, r3, #2
 8003f10:	613b      	str	r3, [r7, #16]
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	e02e      	b.n	8003f74 <LM35_Init+0xc8>
	}
	else if(LM35_CfgParam[LM35_Instance].LM35_GPIO == GPIOC)
 8003f16:	88fa      	ldrh	r2, [r7, #6]
 8003f18:	4939      	ldr	r1, [pc, #228]	; (8004000 <LM35_Init+0x154>)
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	005b      	lsls	r3, r3, #1
 8003f1e:	4413      	add	r3, r2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	440b      	add	r3, r1
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a39      	ldr	r2, [pc, #228]	; (800400c <LM35_Init+0x160>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d10c      	bne.n	8003f46 <LM35_Init+0x9a>
	{
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8003f2c:	4b35      	ldr	r3, [pc, #212]	; (8004004 <LM35_Init+0x158>)
 8003f2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f30:	4a34      	ldr	r2, [pc, #208]	; (8004004 <LM35_Init+0x158>)
 8003f32:	f043 0304 	orr.w	r3, r3, #4
 8003f36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f38:	4b32      	ldr	r3, [pc, #200]	; (8004004 <LM35_Init+0x158>)
 8003f3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f3c:	f003 0304 	and.w	r3, r3, #4
 8003f40:	60fb      	str	r3, [r7, #12]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	e016      	b.n	8003f74 <LM35_Init+0xc8>
	}
	else if (LM35_CfgParam[LM35_Instance].LM35_GPIO == GPIOD)
 8003f46:	88fa      	ldrh	r2, [r7, #6]
 8003f48:	492d      	ldr	r1, [pc, #180]	; (8004000 <LM35_Init+0x154>)
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	005b      	lsls	r3, r3, #1
 8003f4e:	4413      	add	r3, r2
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	440b      	add	r3, r1
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a2e      	ldr	r2, [pc, #184]	; (8004010 <LM35_Init+0x164>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d10b      	bne.n	8003f74 <LM35_Init+0xc8>
	{
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8003f5c:	4b29      	ldr	r3, [pc, #164]	; (8004004 <LM35_Init+0x158>)
 8003f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f60:	4a28      	ldr	r2, [pc, #160]	; (8004004 <LM35_Init+0x158>)
 8003f62:	f043 0308 	orr.w	r3, r3, #8
 8003f66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f68:	4b26      	ldr	r3, [pc, #152]	; (8004004 <LM35_Init+0x158>)
 8003f6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f6c:	f003 0308 	and.w	r3, r3, #8
 8003f70:	60bb      	str	r3, [r7, #8]
 8003f72:	68bb      	ldr	r3, [r7, #8]
	}
	hadc.Instance = LM35_CfgParam[LM35_Instance].ADC_Instance;
 8003f74:	88fa      	ldrh	r2, [r7, #6]
 8003f76:	4922      	ldr	r1, [pc, #136]	; (8004000 <LM35_Init+0x154>)
 8003f78:	4613      	mov	r3, r2
 8003f7a:	005b      	lsls	r3, r3, #1
 8003f7c:	4413      	add	r3, r2
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	440b      	add	r3, r1
 8003f82:	3304      	adds	r3, #4
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a23      	ldr	r2, [pc, #140]	; (8004014 <LM35_Init+0x168>)
 8003f88:	6013      	str	r3, [r2, #0]
	hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003f8a:	4b22      	ldr	r3, [pc, #136]	; (8004014 <LM35_Init+0x168>)
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	611a      	str	r2, [r3, #16]
	hadc.Init.ContinuousConvMode = DISABLE;
 8003f90:	4b20      	ldr	r3, [pc, #128]	; (8004014 <LM35_Init+0x168>)
 8003f92:	2200      	movs	r2, #0
 8003f94:	765a      	strb	r2, [r3, #25]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 8003f96:	4b1f      	ldr	r3, [pc, #124]	; (8004014 <LM35_Init+0x168>)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 2020 	strb.w	r2, [r3, #32]
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003f9e:	4b1d      	ldr	r3, [pc, #116]	; (8004014 <LM35_Init+0x168>)
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	629a      	str	r2, [r3, #40]	; 0x28
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003fa4:	4b1b      	ldr	r3, [pc, #108]	; (8004014 <LM35_Init+0x168>)
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	60da      	str	r2, [r3, #12]
	hadc.Init.NbrOfConversion = 1;
 8003faa:	4b1a      	ldr	r3, [pc, #104]	; (8004014 <LM35_Init+0x168>)
 8003fac:	2201      	movs	r2, #1
 8003fae:	61da      	str	r2, [r3, #28]
	HAL_ADC_Init(&hadc);
 8003fb0:	4818      	ldr	r0, [pc, #96]	; (8004014 <LM35_Init+0x168>)
 8003fb2:	f7fd f8d5 	bl	8001160 <HAL_ADC_Init>
    sConfig.Channel = LM35_CfgParam[LM35_Instance].ADC_CH;
 8003fb6:	88fa      	ldrh	r2, [r7, #6]
 8003fb8:	4911      	ldr	r1, [pc, #68]	; (8004000 <LM35_Init+0x154>)
 8003fba:	4613      	mov	r3, r2
 8003fbc:	005b      	lsls	r3, r3, #1
 8003fbe:	4413      	add	r3, r2
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	440b      	add	r3, r1
 8003fc4:	3308      	adds	r3, #8
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a13      	ldr	r2, [pc, #76]	; (8004018 <LM35_Init+0x16c>)
 8003fca:	6013      	str	r3, [r2, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8003fcc:	4b12      	ldr	r3, [pc, #72]	; (8004018 <LM35_Init+0x16c>)
 8003fce:	2206      	movs	r2, #6
 8003fd0:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8003fd2:	4b11      	ldr	r3, [pc, #68]	; (8004018 <LM35_Init+0x16c>)
 8003fd4:	2203      	movs	r2, #3
 8003fd6:	609a      	str	r2, [r3, #8]
	HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8003fd8:	490f      	ldr	r1, [pc, #60]	; (8004018 <LM35_Init+0x16c>)
 8003fda:	480e      	ldr	r0, [pc, #56]	; (8004014 <LM35_Init+0x168>)
 8003fdc:	f7fd fbb6 	bl	800174c <HAL_ADC_ConfigChannel>

	if(calibrated == 0)
 8003fe0:	4b0e      	ldr	r3, [pc, #56]	; (800401c <LM35_Init+0x170>)
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d106      	bne.n	8003ff6 <LM35_Init+0x14a>
	{
		HAL_ADCEx_Calibration_Start(&hadc,ADC_SINGLE_ENDED);
 8003fe8:	217f      	movs	r1, #127	; 0x7f
 8003fea:	480a      	ldr	r0, [pc, #40]	; (8004014 <LM35_Init+0x168>)
 8003fec:	f7fe f8d6 	bl	800219c <HAL_ADCEx_Calibration_Start>
		calibrated = 1;
 8003ff0:	4b0a      	ldr	r3, [pc, #40]	; (800401c <LM35_Init+0x170>)
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	701a      	strb	r2, [r3, #0]
	}
}
 8003ff6:	bf00      	nop
 8003ff8:	3718      	adds	r7, #24
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	0800415c 	.word	0x0800415c
 8004004:	40021000 	.word	0x40021000
 8004008:	48000400 	.word	0x48000400
 800400c:	48000800 	.word	0x48000800
 8004010:	48000c00 	.word	0x48000c00
 8004014:	20000094 	.word	0x20000094
 8004018:	200000f8 	.word	0x200000f8
 800401c:	20000110 	.word	0x20000110

08004020 <LM35_Read>:


float LM35_Read(uint16_t LM35_Instance)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	4603      	mov	r3, r0
 8004028:	80fb      	strh	r3, [r7, #6]
	uint32_t AD_RES;
	float Temperature = 0;
 800402a:	f04f 0300 	mov.w	r3, #0
 800402e:	60fb      	str	r3, [r7, #12]

	// Select The Sensor Instance ADC Channel
	sConfig.Channel = LM35_CfgParam[LM35_Instance].ADC_CH;
 8004030:	88fa      	ldrh	r2, [r7, #6]
 8004032:	491b      	ldr	r1, [pc, #108]	; (80040a0 <LM35_Read+0x80>)
 8004034:	4613      	mov	r3, r2
 8004036:	005b      	lsls	r3, r3, #1
 8004038:	4413      	add	r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	440b      	add	r3, r1
 800403e:	3308      	adds	r3, #8
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a18      	ldr	r2, [pc, #96]	; (80040a4 <LM35_Read+0x84>)
 8004044:	6013      	str	r3, [r2, #0]
	HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8004046:	4917      	ldr	r1, [pc, #92]	; (80040a4 <LM35_Read+0x84>)
 8004048:	4817      	ldr	r0, [pc, #92]	; (80040a8 <LM35_Read+0x88>)
 800404a:	f7fd fb7f 	bl	800174c <HAL_ADC_ConfigChannel>
	// Start ADC Conversion
	HAL_ADC_Start(&hadc);
 800404e:	4816      	ldr	r0, [pc, #88]	; (80040a8 <LM35_Read+0x88>)
 8004050:	f7fd f9dc 	bl	800140c <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc, 1);
 8004054:	2101      	movs	r1, #1
 8004056:	4814      	ldr	r0, [pc, #80]	; (80040a8 <LM35_Read+0x88>)
 8004058:	f7fd fa92 	bl	8001580 <HAL_ADC_PollForConversion>
    // Get The Result & Convert To Temp In c_degrees
	AD_RES = HAL_ADC_GetValue(&hadc);
 800405c:	4812      	ldr	r0, [pc, #72]	; (80040a8 <LM35_Read+0x88>)
 800405e:	f7fd fb67 	bl	8001730 <HAL_ADC_GetValue>
 8004062:	60b8      	str	r0, [r7, #8]
	Temperature = (AD_RES * 0.0805664);
 8004064:	68b8      	ldr	r0, [r7, #8]
 8004066:	f7fc fb1b 	bl	80006a0 <__aeabi_ui2d>
 800406a:	a30b      	add	r3, pc, #44	; (adr r3, 8004098 <LM35_Read+0x78>)
 800406c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004070:	f7fc f8aa 	bl	80001c8 <__aeabi_dmul>
 8004074:	4602      	mov	r2, r0
 8004076:	460b      	mov	r3, r1
 8004078:	4610      	mov	r0, r2
 800407a:	4619      	mov	r1, r3
 800407c:	f7fc fb8a 	bl	8000794 <__aeabi_d2f>
 8004080:	4603      	mov	r3, r0
 8004082:	60fb      	str	r3, [r7, #12]

	return Temperature;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	ee07 3a90 	vmov	s15, r3
}
 800408a:	eeb0 0a67 	vmov.f32	s0, s15
 800408e:	3710      	adds	r7, #16
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}
 8004094:	f3af 8000 	nop.w
 8004098:	e5280d65 	.word	0xe5280d65
 800409c:	3fb49fff 	.word	0x3fb49fff
 80040a0:	0800415c 	.word	0x0800415c
 80040a4:	200000f8 	.word	0x200000f8
 80040a8:	20000094 	.word	0x20000094

080040ac <memset>:
 80040ac:	4402      	add	r2, r0
 80040ae:	4603      	mov	r3, r0
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d100      	bne.n	80040b6 <memset+0xa>
 80040b4:	4770      	bx	lr
 80040b6:	f803 1b01 	strb.w	r1, [r3], #1
 80040ba:	e7f9      	b.n	80040b0 <memset+0x4>

080040bc <__libc_init_array>:
 80040bc:	b570      	push	{r4, r5, r6, lr}
 80040be:	4d0d      	ldr	r5, [pc, #52]	; (80040f4 <__libc_init_array+0x38>)
 80040c0:	4c0d      	ldr	r4, [pc, #52]	; (80040f8 <__libc_init_array+0x3c>)
 80040c2:	1b64      	subs	r4, r4, r5
 80040c4:	10a4      	asrs	r4, r4, #2
 80040c6:	2600      	movs	r6, #0
 80040c8:	42a6      	cmp	r6, r4
 80040ca:	d109      	bne.n	80040e0 <__libc_init_array+0x24>
 80040cc:	4d0b      	ldr	r5, [pc, #44]	; (80040fc <__libc_init_array+0x40>)
 80040ce:	4c0c      	ldr	r4, [pc, #48]	; (8004100 <__libc_init_array+0x44>)
 80040d0:	f000 f818 	bl	8004104 <_init>
 80040d4:	1b64      	subs	r4, r4, r5
 80040d6:	10a4      	asrs	r4, r4, #2
 80040d8:	2600      	movs	r6, #0
 80040da:	42a6      	cmp	r6, r4
 80040dc:	d105      	bne.n	80040ea <__libc_init_array+0x2e>
 80040de:	bd70      	pop	{r4, r5, r6, pc}
 80040e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80040e4:	4798      	blx	r3
 80040e6:	3601      	adds	r6, #1
 80040e8:	e7ee      	b.n	80040c8 <__libc_init_array+0xc>
 80040ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80040ee:	4798      	blx	r3
 80040f0:	3601      	adds	r6, #1
 80040f2:	e7f2      	b.n	80040da <__libc_init_array+0x1e>
 80040f4:	08004168 	.word	0x08004168
 80040f8:	08004168 	.word	0x08004168
 80040fc:	08004168 	.word	0x08004168
 8004100:	0800416c 	.word	0x0800416c

08004104 <_init>:
 8004104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004106:	bf00      	nop
 8004108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800410a:	bc08      	pop	{r3}
 800410c:	469e      	mov	lr, r3
 800410e:	4770      	bx	lr

08004110 <_fini>:
 8004110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004112:	bf00      	nop
 8004114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004116:	bc08      	pop	{r3}
 8004118:	469e      	mov	lr, r3
 800411a:	4770      	bx	lr
