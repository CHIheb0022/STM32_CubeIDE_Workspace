
6_Timer_ Output campare Mode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025b0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002738  08002738  00012738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002778  08002778  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002778  08002778  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002778  08002778  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002778  08002778  00012778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800277c  0800277c  0001277c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002780  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  0800278c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  0800278c  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009cee  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000017be  00000000  00000000  00029d6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b20  00000000  00000000  0002b530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000891  00000000  00000000  0002c050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000251b4  00000000  00000000  0002c8e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b912  00000000  00000000  00051a95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e8d8d  00000000  00000000  0005d3a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002e04  00000000  00000000  00146134  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000091  00000000  00000000  00148f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002720 	.word	0x08002720

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002720 	.word	0x08002720

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 f9b9 	bl	8000542 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f80c 	bl	80001ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f8ac 	bl	8000330 <MX_GPIO_Init>
  MX_TIM2_Init();
 80001d8:	f000 f84e 	bl	8000278 <MX_TIM2_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // Start the Timer Tim2 and configure the channel
  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_2);
 80001dc:	2104      	movs	r1, #4
 80001de:	4802      	ldr	r0, [pc, #8]	; (80001e8 <main+0x20>)
 80001e0:	f001 fb64 	bl	80018ac <HAL_TIM_OC_Start>

  while (1)
 80001e4:	e7fe      	b.n	80001e4 <main+0x1c>
 80001e6:	bf00      	nop
 80001e8:	20000028 	.word	0x20000028

080001ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b096      	sub	sp, #88	; 0x58
 80001f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001f2:	f107 0314 	add.w	r3, r7, #20
 80001f6:	2244      	movs	r2, #68	; 0x44
 80001f8:	2100      	movs	r1, #0
 80001fa:	4618      	mov	r0, r3
 80001fc:	f002 fa64 	bl	80026c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000200:	463b      	mov	r3, r7
 8000202:	2200      	movs	r2, #0
 8000204:	601a      	str	r2, [r3, #0]
 8000206:	605a      	str	r2, [r3, #4]
 8000208:	609a      	str	r2, [r3, #8]
 800020a:	60da      	str	r2, [r3, #12]
 800020c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800020e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000212:	f000 fcd5 	bl	8000bc0 <HAL_PWREx_ControlVoltageScaling>
 8000216:	4603      	mov	r3, r0
 8000218:	2b00      	cmp	r3, #0
 800021a:	d001      	beq.n	8000220 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800021c:	f000 f8a0 	bl	8000360 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000220:	2310      	movs	r3, #16
 8000222:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000224:	2301      	movs	r3, #1
 8000226:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000228:	2300      	movs	r3, #0
 800022a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_8;
 800022c:	2380      	movs	r3, #128	; 0x80
 800022e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000230:	2300      	movs	r3, #0
 8000232:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000234:	f107 0314 	add.w	r3, r7, #20
 8000238:	4618      	mov	r0, r3
 800023a:	f000 fd17 	bl	8000c6c <HAL_RCC_OscConfig>
 800023e:	4603      	mov	r3, r0
 8000240:	2b00      	cmp	r3, #0
 8000242:	d001      	beq.n	8000248 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000244:	f000 f88c 	bl	8000360 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000248:	230f      	movs	r3, #15
 800024a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800024c:	2300      	movs	r3, #0
 800024e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000250:	2300      	movs	r3, #0
 8000252:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000254:	2300      	movs	r3, #0
 8000256:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000258:	2300      	movs	r3, #0
 800025a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800025c:	463b      	mov	r3, r7
 800025e:	2100      	movs	r1, #0
 8000260:	4618      	mov	r0, r3
 8000262:	f001 f8df 	bl	8001424 <HAL_RCC_ClockConfig>
 8000266:	4603      	mov	r3, r0
 8000268:	2b00      	cmp	r3, #0
 800026a:	d001      	beq.n	8000270 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800026c:	f000 f878 	bl	8000360 <Error_Handler>
  }
}
 8000270:	bf00      	nop
 8000272:	3758      	adds	r7, #88	; 0x58
 8000274:	46bd      	mov	sp, r7
 8000276:	bd80      	pop	{r7, pc}

08000278 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b08a      	sub	sp, #40	; 0x28
 800027c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800027e:	f107 031c 	add.w	r3, r7, #28
 8000282:	2200      	movs	r2, #0
 8000284:	601a      	str	r2, [r3, #0]
 8000286:	605a      	str	r2, [r3, #4]
 8000288:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800028a:	463b      	mov	r3, r7
 800028c:	2200      	movs	r2, #0
 800028e:	601a      	str	r2, [r3, #0]
 8000290:	605a      	str	r2, [r3, #4]
 8000292:	609a      	str	r2, [r3, #8]
 8000294:	60da      	str	r2, [r3, #12]
 8000296:	611a      	str	r2, [r3, #16]
 8000298:	615a      	str	r2, [r3, #20]
 800029a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800029c:	4b23      	ldr	r3, [pc, #140]	; (800032c <MX_TIM2_Init+0xb4>)
 800029e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15999;
 80002a4:	4b21      	ldr	r3, [pc, #132]	; (800032c <MX_TIM2_Init+0xb4>)
 80002a6:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80002aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002ac:	4b1f      	ldr	r3, [pc, #124]	; (800032c <MX_TIM2_Init+0xb4>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80002b2:	4b1e      	ldr	r3, [pc, #120]	; (800032c <MX_TIM2_Init+0xb4>)
 80002b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80002b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002ba:	4b1c      	ldr	r3, [pc, #112]	; (800032c <MX_TIM2_Init+0xb4>)
 80002bc:	2200      	movs	r2, #0
 80002be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002c0:	4b1a      	ldr	r3, [pc, #104]	; (800032c <MX_TIM2_Init+0xb4>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80002c6:	4819      	ldr	r0, [pc, #100]	; (800032c <MX_TIM2_Init+0xb4>)
 80002c8:	f001 fa98 	bl	80017fc <HAL_TIM_OC_Init>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 80002d2:	f000 f845 	bl	8000360 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002d6:	2300      	movs	r3, #0
 80002d8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002da:	2300      	movs	r3, #0
 80002dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80002de:	f107 031c 	add.w	r3, r7, #28
 80002e2:	4619      	mov	r1, r3
 80002e4:	4811      	ldr	r0, [pc, #68]	; (800032c <MX_TIM2_Init+0xb4>)
 80002e6:	f002 f949 	bl	800257c <HAL_TIMEx_MasterConfigSynchronization>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d001      	beq.n	80002f4 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80002f0:	f000 f836 	bl	8000360 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80002f4:	2330      	movs	r3, #48	; 0x30
 80002f6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 80002f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002fc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80002fe:	2300      	movs	r3, #0
 8000300:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000302:	2300      	movs	r3, #0
 8000304:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000306:	463b      	mov	r3, r7
 8000308:	2200      	movs	r2, #0
 800030a:	4619      	mov	r1, r3
 800030c:	4807      	ldr	r0, [pc, #28]	; (800032c <MX_TIM2_Init+0xb4>)
 800030e:	f001 fcf3 	bl	8001cf8 <HAL_TIM_OC_ConfigChannel>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d001      	beq.n	800031c <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8000318:	f000 f822 	bl	8000360 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800031c:	4803      	ldr	r0, [pc, #12]	; (800032c <MX_TIM2_Init+0xb4>)
 800031e:	f000 f86d 	bl	80003fc <HAL_TIM_MspPostInit>

}
 8000322:	bf00      	nop
 8000324:	3728      	adds	r7, #40	; 0x28
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	20000028 	.word	0x20000028

08000330 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000330:	b480      	push	{r7}
 8000332:	b083      	sub	sp, #12
 8000334:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000336:	4b09      	ldr	r3, [pc, #36]	; (800035c <MX_GPIO_Init+0x2c>)
 8000338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800033a:	4a08      	ldr	r2, [pc, #32]	; (800035c <MX_GPIO_Init+0x2c>)
 800033c:	f043 0301 	orr.w	r3, r3, #1
 8000340:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000342:	4b06      	ldr	r3, [pc, #24]	; (800035c <MX_GPIO_Init+0x2c>)
 8000344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000346:	f003 0301 	and.w	r3, r3, #1
 800034a:	607b      	str	r3, [r7, #4]
 800034c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800034e:	bf00      	nop
 8000350:	370c      	adds	r7, #12
 8000352:	46bd      	mov	sp, r7
 8000354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000358:	4770      	bx	lr
 800035a:	bf00      	nop
 800035c:	40021000 	.word	0x40021000

08000360 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000360:	b480      	push	{r7}
 8000362:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000364:	b672      	cpsid	i
}
 8000366:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000368:	e7fe      	b.n	8000368 <Error_Handler+0x8>
	...

0800036c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800036c:	b480      	push	{r7}
 800036e:	b083      	sub	sp, #12
 8000370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000372:	4b0f      	ldr	r3, [pc, #60]	; (80003b0 <HAL_MspInit+0x44>)
 8000374:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000376:	4a0e      	ldr	r2, [pc, #56]	; (80003b0 <HAL_MspInit+0x44>)
 8000378:	f043 0301 	orr.w	r3, r3, #1
 800037c:	6613      	str	r3, [r2, #96]	; 0x60
 800037e:	4b0c      	ldr	r3, [pc, #48]	; (80003b0 <HAL_MspInit+0x44>)
 8000380:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000382:	f003 0301 	and.w	r3, r3, #1
 8000386:	607b      	str	r3, [r7, #4]
 8000388:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800038a:	4b09      	ldr	r3, [pc, #36]	; (80003b0 <HAL_MspInit+0x44>)
 800038c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800038e:	4a08      	ldr	r2, [pc, #32]	; (80003b0 <HAL_MspInit+0x44>)
 8000390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000394:	6593      	str	r3, [r2, #88]	; 0x58
 8000396:	4b06      	ldr	r3, [pc, #24]	; (80003b0 <HAL_MspInit+0x44>)
 8000398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800039a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800039e:	603b      	str	r3, [r7, #0]
 80003a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003a2:	bf00      	nop
 80003a4:	370c      	adds	r7, #12
 80003a6:	46bd      	mov	sp, r7
 80003a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop
 80003b0:	40021000 	.word	0x40021000

080003b4 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b084      	sub	sp, #16
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM2)
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80003c4:	d113      	bne.n	80003ee <HAL_TIM_OC_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80003c6:	4b0c      	ldr	r3, [pc, #48]	; (80003f8 <HAL_TIM_OC_MspInit+0x44>)
 80003c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003ca:	4a0b      	ldr	r2, [pc, #44]	; (80003f8 <HAL_TIM_OC_MspInit+0x44>)
 80003cc:	f043 0301 	orr.w	r3, r3, #1
 80003d0:	6593      	str	r3, [r2, #88]	; 0x58
 80003d2:	4b09      	ldr	r3, [pc, #36]	; (80003f8 <HAL_TIM_OC_MspInit+0x44>)
 80003d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003d6:	f003 0301 	and.w	r3, r3, #1
 80003da:	60fb      	str	r3, [r7, #12]
 80003dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80003de:	2200      	movs	r2, #0
 80003e0:	2100      	movs	r1, #0
 80003e2:	201c      	movs	r0, #28
 80003e4:	f000 f9fd 	bl	80007e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80003e8:	201c      	movs	r0, #28
 80003ea:	f000 fa16 	bl	800081a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80003ee:	bf00      	nop
 80003f0:	3710      	adds	r7, #16
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	40021000 	.word	0x40021000

080003fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b088      	sub	sp, #32
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000404:	f107 030c 	add.w	r3, r7, #12
 8000408:	2200      	movs	r2, #0
 800040a:	601a      	str	r2, [r3, #0]
 800040c:	605a      	str	r2, [r3, #4]
 800040e:	609a      	str	r2, [r3, #8]
 8000410:	60da      	str	r2, [r3, #12]
 8000412:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800041c:	d11c      	bne.n	8000458 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800041e:	4b10      	ldr	r3, [pc, #64]	; (8000460 <HAL_TIM_MspPostInit+0x64>)
 8000420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000422:	4a0f      	ldr	r2, [pc, #60]	; (8000460 <HAL_TIM_MspPostInit+0x64>)
 8000424:	f043 0301 	orr.w	r3, r3, #1
 8000428:	64d3      	str	r3, [r2, #76]	; 0x4c
 800042a:	4b0d      	ldr	r3, [pc, #52]	; (8000460 <HAL_TIM_MspPostInit+0x64>)
 800042c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800042e:	f003 0301 	and.w	r3, r3, #1
 8000432:	60bb      	str	r3, [r7, #8]
 8000434:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000436:	2320      	movs	r3, #32
 8000438:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800043a:	2302      	movs	r3, #2
 800043c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043e:	2300      	movs	r3, #0
 8000440:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000442:	2300      	movs	r3, #0
 8000444:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000446:	2301      	movs	r3, #1
 8000448:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800044a:	f107 030c 	add.w	r3, r7, #12
 800044e:	4619      	mov	r1, r3
 8000450:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000454:	f000 f9fc 	bl	8000850 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000458:	bf00      	nop
 800045a:	3720      	adds	r7, #32
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}
 8000460:	40021000 	.word	0x40021000

08000464 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000468:	e7fe      	b.n	8000468 <NMI_Handler+0x4>

0800046a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800046a:	b480      	push	{r7}
 800046c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800046e:	e7fe      	b.n	800046e <HardFault_Handler+0x4>

08000470 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000474:	e7fe      	b.n	8000474 <MemManage_Handler+0x4>

08000476 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000476:	b480      	push	{r7}
 8000478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800047a:	e7fe      	b.n	800047a <BusFault_Handler+0x4>

0800047c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000480:	e7fe      	b.n	8000480 <UsageFault_Handler+0x4>

08000482 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000482:	b480      	push	{r7}
 8000484:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000486:	bf00      	nop
 8000488:	46bd      	mov	sp, r7
 800048a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048e:	4770      	bx	lr

08000490 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000494:	bf00      	nop
 8000496:	46bd      	mov	sp, r7
 8000498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049c:	4770      	bx	lr

0800049e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800049e:	b480      	push	{r7}
 80004a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004a2:	bf00      	nop
 80004a4:	46bd      	mov	sp, r7
 80004a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004aa:	4770      	bx	lr

080004ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004b0:	f000 f89c 	bl	80005ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004b4:	bf00      	nop
 80004b6:	bd80      	pop	{r7, pc}

080004b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <TIM2_IRQHandler+0x10>)
 80004be:	f001 fafb 	bl	8001ab8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80004c2:	bf00      	nop
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	20000028 	.word	0x20000028

080004cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80004d0:	4b06      	ldr	r3, [pc, #24]	; (80004ec <SystemInit+0x20>)
 80004d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004d6:	4a05      	ldr	r2, [pc, #20]	; (80004ec <SystemInit+0x20>)
 80004d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80004e0:	bf00      	nop
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	e000ed00 	.word	0xe000ed00

080004f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80004f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000528 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80004f4:	f7ff ffea 	bl	80004cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004f8:	480c      	ldr	r0, [pc, #48]	; (800052c <LoopForever+0x6>)
  ldr r1, =_edata
 80004fa:	490d      	ldr	r1, [pc, #52]	; (8000530 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004fc:	4a0d      	ldr	r2, [pc, #52]	; (8000534 <LoopForever+0xe>)
  movs r3, #0
 80004fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000500:	e002      	b.n	8000508 <LoopCopyDataInit>

08000502 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000502:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000504:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000506:	3304      	adds	r3, #4

08000508 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000508:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800050a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800050c:	d3f9      	bcc.n	8000502 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800050e:	4a0a      	ldr	r2, [pc, #40]	; (8000538 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000510:	4c0a      	ldr	r4, [pc, #40]	; (800053c <LoopForever+0x16>)
  movs r3, #0
 8000512:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000514:	e001      	b.n	800051a <LoopFillZerobss>

08000516 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000516:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000518:	3204      	adds	r2, #4

0800051a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800051a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800051c:	d3fb      	bcc.n	8000516 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800051e:	f002 f8db 	bl	80026d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000522:	f7ff fe51 	bl	80001c8 <main>

08000526 <LoopForever>:

LoopForever:
    b LoopForever
 8000526:	e7fe      	b.n	8000526 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000528:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800052c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000530:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000534:	08002780 	.word	0x08002780
  ldr r2, =_sbss
 8000538:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800053c:	20000078 	.word	0x20000078

08000540 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000540:	e7fe      	b.n	8000540 <ADC1_2_IRQHandler>

08000542 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000542:	b580      	push	{r7, lr}
 8000544:	b082      	sub	sp, #8
 8000546:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000548:	2300      	movs	r3, #0
 800054a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800054c:	2003      	movs	r0, #3
 800054e:	f000 f93d 	bl	80007cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000552:	200f      	movs	r0, #15
 8000554:	f000 f80e 	bl	8000574 <HAL_InitTick>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d002      	beq.n	8000564 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800055e:	2301      	movs	r3, #1
 8000560:	71fb      	strb	r3, [r7, #7]
 8000562:	e001      	b.n	8000568 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000564:	f7ff ff02 	bl	800036c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000568:	79fb      	ldrb	r3, [r7, #7]
}
 800056a:	4618      	mov	r0, r3
 800056c:	3708      	adds	r7, #8
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
	...

08000574 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800057c:	2300      	movs	r3, #0
 800057e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000580:	4b17      	ldr	r3, [pc, #92]	; (80005e0 <HAL_InitTick+0x6c>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d023      	beq.n	80005d0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000588:	4b16      	ldr	r3, [pc, #88]	; (80005e4 <HAL_InitTick+0x70>)
 800058a:	681a      	ldr	r2, [r3, #0]
 800058c:	4b14      	ldr	r3, [pc, #80]	; (80005e0 <HAL_InitTick+0x6c>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	4619      	mov	r1, r3
 8000592:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000596:	fbb3 f3f1 	udiv	r3, r3, r1
 800059a:	fbb2 f3f3 	udiv	r3, r2, r3
 800059e:	4618      	mov	r0, r3
 80005a0:	f000 f949 	bl	8000836 <HAL_SYSTICK_Config>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d10f      	bne.n	80005ca <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	2b0f      	cmp	r3, #15
 80005ae:	d809      	bhi.n	80005c4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005b0:	2200      	movs	r2, #0
 80005b2:	6879      	ldr	r1, [r7, #4]
 80005b4:	f04f 30ff 	mov.w	r0, #4294967295
 80005b8:	f000 f913 	bl	80007e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005bc:	4a0a      	ldr	r2, [pc, #40]	; (80005e8 <HAL_InitTick+0x74>)
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	6013      	str	r3, [r2, #0]
 80005c2:	e007      	b.n	80005d4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80005c4:	2301      	movs	r3, #1
 80005c6:	73fb      	strb	r3, [r7, #15]
 80005c8:	e004      	b.n	80005d4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80005ca:	2301      	movs	r3, #1
 80005cc:	73fb      	strb	r3, [r7, #15]
 80005ce:	e001      	b.n	80005d4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80005d0:	2301      	movs	r3, #1
 80005d2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80005d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	3710      	adds	r7, #16
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	20000008 	.word	0x20000008
 80005e4:	20000000 	.word	0x20000000
 80005e8:	20000004 	.word	0x20000004

080005ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80005f0:	4b06      	ldr	r3, [pc, #24]	; (800060c <HAL_IncTick+0x20>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	461a      	mov	r2, r3
 80005f6:	4b06      	ldr	r3, [pc, #24]	; (8000610 <HAL_IncTick+0x24>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	4413      	add	r3, r2
 80005fc:	4a04      	ldr	r2, [pc, #16]	; (8000610 <HAL_IncTick+0x24>)
 80005fe:	6013      	str	r3, [r2, #0]
}
 8000600:	bf00      	nop
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	20000008 	.word	0x20000008
 8000610:	20000074 	.word	0x20000074

08000614 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  return uwTick;
 8000618:	4b03      	ldr	r3, [pc, #12]	; (8000628 <HAL_GetTick+0x14>)
 800061a:	681b      	ldr	r3, [r3, #0]
}
 800061c:	4618      	mov	r0, r3
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	20000074 	.word	0x20000074

0800062c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800062c:	b480      	push	{r7}
 800062e:	b085      	sub	sp, #20
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	f003 0307 	and.w	r3, r3, #7
 800063a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800063c:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <__NVIC_SetPriorityGrouping+0x44>)
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000642:	68ba      	ldr	r2, [r7, #8]
 8000644:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000648:	4013      	ands	r3, r2
 800064a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000654:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800065c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800065e:	4a04      	ldr	r2, [pc, #16]	; (8000670 <__NVIC_SetPriorityGrouping+0x44>)
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	60d3      	str	r3, [r2, #12]
}
 8000664:	bf00      	nop
 8000666:	3714      	adds	r7, #20
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr
 8000670:	e000ed00 	.word	0xe000ed00

08000674 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000678:	4b04      	ldr	r3, [pc, #16]	; (800068c <__NVIC_GetPriorityGrouping+0x18>)
 800067a:	68db      	ldr	r3, [r3, #12]
 800067c:	0a1b      	lsrs	r3, r3, #8
 800067e:	f003 0307 	and.w	r3, r3, #7
}
 8000682:	4618      	mov	r0, r3
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr
 800068c:	e000ed00 	.word	0xe000ed00

08000690 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800069a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	db0b      	blt.n	80006ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	f003 021f 	and.w	r2, r3, #31
 80006a8:	4907      	ldr	r1, [pc, #28]	; (80006c8 <__NVIC_EnableIRQ+0x38>)
 80006aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ae:	095b      	lsrs	r3, r3, #5
 80006b0:	2001      	movs	r0, #1
 80006b2:	fa00 f202 	lsl.w	r2, r0, r2
 80006b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80006ba:	bf00      	nop
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	e000e100 	.word	0xe000e100

080006cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	6039      	str	r1, [r7, #0]
 80006d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	db0a      	blt.n	80006f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	b2da      	uxtb	r2, r3
 80006e4:	490c      	ldr	r1, [pc, #48]	; (8000718 <__NVIC_SetPriority+0x4c>)
 80006e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ea:	0112      	lsls	r2, r2, #4
 80006ec:	b2d2      	uxtb	r2, r2
 80006ee:	440b      	add	r3, r1
 80006f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006f4:	e00a      	b.n	800070c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	b2da      	uxtb	r2, r3
 80006fa:	4908      	ldr	r1, [pc, #32]	; (800071c <__NVIC_SetPriority+0x50>)
 80006fc:	79fb      	ldrb	r3, [r7, #7]
 80006fe:	f003 030f 	and.w	r3, r3, #15
 8000702:	3b04      	subs	r3, #4
 8000704:	0112      	lsls	r2, r2, #4
 8000706:	b2d2      	uxtb	r2, r2
 8000708:	440b      	add	r3, r1
 800070a:	761a      	strb	r2, [r3, #24]
}
 800070c:	bf00      	nop
 800070e:	370c      	adds	r7, #12
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr
 8000718:	e000e100 	.word	0xe000e100
 800071c:	e000ed00 	.word	0xe000ed00

08000720 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000720:	b480      	push	{r7}
 8000722:	b089      	sub	sp, #36	; 0x24
 8000724:	af00      	add	r7, sp, #0
 8000726:	60f8      	str	r0, [r7, #12]
 8000728:	60b9      	str	r1, [r7, #8]
 800072a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	f003 0307 	and.w	r3, r3, #7
 8000732:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000734:	69fb      	ldr	r3, [r7, #28]
 8000736:	f1c3 0307 	rsb	r3, r3, #7
 800073a:	2b04      	cmp	r3, #4
 800073c:	bf28      	it	cs
 800073e:	2304      	movcs	r3, #4
 8000740:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000742:	69fb      	ldr	r3, [r7, #28]
 8000744:	3304      	adds	r3, #4
 8000746:	2b06      	cmp	r3, #6
 8000748:	d902      	bls.n	8000750 <NVIC_EncodePriority+0x30>
 800074a:	69fb      	ldr	r3, [r7, #28]
 800074c:	3b03      	subs	r3, #3
 800074e:	e000      	b.n	8000752 <NVIC_EncodePriority+0x32>
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000754:	f04f 32ff 	mov.w	r2, #4294967295
 8000758:	69bb      	ldr	r3, [r7, #24]
 800075a:	fa02 f303 	lsl.w	r3, r2, r3
 800075e:	43da      	mvns	r2, r3
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	401a      	ands	r2, r3
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000768:	f04f 31ff 	mov.w	r1, #4294967295
 800076c:	697b      	ldr	r3, [r7, #20]
 800076e:	fa01 f303 	lsl.w	r3, r1, r3
 8000772:	43d9      	mvns	r1, r3
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000778:	4313      	orrs	r3, r2
         );
}
 800077a:	4618      	mov	r0, r3
 800077c:	3724      	adds	r7, #36	; 0x24
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
	...

08000788 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	3b01      	subs	r3, #1
 8000794:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000798:	d301      	bcc.n	800079e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800079a:	2301      	movs	r3, #1
 800079c:	e00f      	b.n	80007be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800079e:	4a0a      	ldr	r2, [pc, #40]	; (80007c8 <SysTick_Config+0x40>)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	3b01      	subs	r3, #1
 80007a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007a6:	210f      	movs	r1, #15
 80007a8:	f04f 30ff 	mov.w	r0, #4294967295
 80007ac:	f7ff ff8e 	bl	80006cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007b0:	4b05      	ldr	r3, [pc, #20]	; (80007c8 <SysTick_Config+0x40>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007b6:	4b04      	ldr	r3, [pc, #16]	; (80007c8 <SysTick_Config+0x40>)
 80007b8:	2207      	movs	r2, #7
 80007ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007bc:	2300      	movs	r3, #0
}
 80007be:	4618      	mov	r0, r3
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	e000e010 	.word	0xe000e010

080007cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007d4:	6878      	ldr	r0, [r7, #4]
 80007d6:	f7ff ff29 	bl	800062c <__NVIC_SetPriorityGrouping>
}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007e2:	b580      	push	{r7, lr}
 80007e4:	b086      	sub	sp, #24
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	4603      	mov	r3, r0
 80007ea:	60b9      	str	r1, [r7, #8]
 80007ec:	607a      	str	r2, [r7, #4]
 80007ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80007f0:	2300      	movs	r3, #0
 80007f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80007f4:	f7ff ff3e 	bl	8000674 <__NVIC_GetPriorityGrouping>
 80007f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007fa:	687a      	ldr	r2, [r7, #4]
 80007fc:	68b9      	ldr	r1, [r7, #8]
 80007fe:	6978      	ldr	r0, [r7, #20]
 8000800:	f7ff ff8e 	bl	8000720 <NVIC_EncodePriority>
 8000804:	4602      	mov	r2, r0
 8000806:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800080a:	4611      	mov	r1, r2
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff ff5d 	bl	80006cc <__NVIC_SetPriority>
}
 8000812:	bf00      	nop
 8000814:	3718      	adds	r7, #24
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}

0800081a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800081a:	b580      	push	{r7, lr}
 800081c:	b082      	sub	sp, #8
 800081e:	af00      	add	r7, sp, #0
 8000820:	4603      	mov	r3, r0
 8000822:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000828:	4618      	mov	r0, r3
 800082a:	f7ff ff31 	bl	8000690 <__NVIC_EnableIRQ>
}
 800082e:	bf00      	nop
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}

08000836 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000836:	b580      	push	{r7, lr}
 8000838:	b082      	sub	sp, #8
 800083a:	af00      	add	r7, sp, #0
 800083c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800083e:	6878      	ldr	r0, [r7, #4]
 8000840:	f7ff ffa2 	bl	8000788 <SysTick_Config>
 8000844:	4603      	mov	r3, r0
}
 8000846:	4618      	mov	r0, r3
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
	...

08000850 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000850:	b480      	push	{r7}
 8000852:	b087      	sub	sp, #28
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800085a:	2300      	movs	r3, #0
 800085c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800085e:	e17f      	b.n	8000b60 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	681a      	ldr	r2, [r3, #0]
 8000864:	2101      	movs	r1, #1
 8000866:	697b      	ldr	r3, [r7, #20]
 8000868:	fa01 f303 	lsl.w	r3, r1, r3
 800086c:	4013      	ands	r3, r2
 800086e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	2b00      	cmp	r3, #0
 8000874:	f000 8171 	beq.w	8000b5a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	685b      	ldr	r3, [r3, #4]
 800087c:	f003 0303 	and.w	r3, r3, #3
 8000880:	2b01      	cmp	r3, #1
 8000882:	d005      	beq.n	8000890 <HAL_GPIO_Init+0x40>
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	685b      	ldr	r3, [r3, #4]
 8000888:	f003 0303 	and.w	r3, r3, #3
 800088c:	2b02      	cmp	r3, #2
 800088e:	d130      	bne.n	80008f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	689b      	ldr	r3, [r3, #8]
 8000894:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000896:	697b      	ldr	r3, [r7, #20]
 8000898:	005b      	lsls	r3, r3, #1
 800089a:	2203      	movs	r2, #3
 800089c:	fa02 f303 	lsl.w	r3, r2, r3
 80008a0:	43db      	mvns	r3, r3
 80008a2:	693a      	ldr	r2, [r7, #16]
 80008a4:	4013      	ands	r3, r2
 80008a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	68da      	ldr	r2, [r3, #12]
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	005b      	lsls	r3, r3, #1
 80008b0:	fa02 f303 	lsl.w	r3, r2, r3
 80008b4:	693a      	ldr	r2, [r7, #16]
 80008b6:	4313      	orrs	r3, r2
 80008b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	693a      	ldr	r2, [r7, #16]
 80008be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80008c6:	2201      	movs	r2, #1
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	fa02 f303 	lsl.w	r3, r2, r3
 80008ce:	43db      	mvns	r3, r3
 80008d0:	693a      	ldr	r2, [r7, #16]
 80008d2:	4013      	ands	r3, r2
 80008d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	685b      	ldr	r3, [r3, #4]
 80008da:	091b      	lsrs	r3, r3, #4
 80008dc:	f003 0201 	and.w	r2, r3, #1
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	fa02 f303 	lsl.w	r3, r2, r3
 80008e6:	693a      	ldr	r2, [r7, #16]
 80008e8:	4313      	orrs	r3, r2
 80008ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	693a      	ldr	r2, [r7, #16]
 80008f0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	f003 0303 	and.w	r3, r3, #3
 80008fa:	2b03      	cmp	r3, #3
 80008fc:	d118      	bne.n	8000930 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000902:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000904:	2201      	movs	r2, #1
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	fa02 f303 	lsl.w	r3, r2, r3
 800090c:	43db      	mvns	r3, r3
 800090e:	693a      	ldr	r2, [r7, #16]
 8000910:	4013      	ands	r3, r2
 8000912:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	08db      	lsrs	r3, r3, #3
 800091a:	f003 0201 	and.w	r2, r3, #1
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	fa02 f303 	lsl.w	r3, r2, r3
 8000924:	693a      	ldr	r2, [r7, #16]
 8000926:	4313      	orrs	r3, r2
 8000928:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	693a      	ldr	r2, [r7, #16]
 800092e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	f003 0303 	and.w	r3, r3, #3
 8000938:	2b03      	cmp	r3, #3
 800093a:	d017      	beq.n	800096c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	68db      	ldr	r3, [r3, #12]
 8000940:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000942:	697b      	ldr	r3, [r7, #20]
 8000944:	005b      	lsls	r3, r3, #1
 8000946:	2203      	movs	r2, #3
 8000948:	fa02 f303 	lsl.w	r3, r2, r3
 800094c:	43db      	mvns	r3, r3
 800094e:	693a      	ldr	r2, [r7, #16]
 8000950:	4013      	ands	r3, r2
 8000952:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	689a      	ldr	r2, [r3, #8]
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	005b      	lsls	r3, r3, #1
 800095c:	fa02 f303 	lsl.w	r3, r2, r3
 8000960:	693a      	ldr	r2, [r7, #16]
 8000962:	4313      	orrs	r3, r2
 8000964:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	693a      	ldr	r2, [r7, #16]
 800096a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	685b      	ldr	r3, [r3, #4]
 8000970:	f003 0303 	and.w	r3, r3, #3
 8000974:	2b02      	cmp	r3, #2
 8000976:	d123      	bne.n	80009c0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	08da      	lsrs	r2, r3, #3
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	3208      	adds	r2, #8
 8000980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000984:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	f003 0307 	and.w	r3, r3, #7
 800098c:	009b      	lsls	r3, r3, #2
 800098e:	220f      	movs	r2, #15
 8000990:	fa02 f303 	lsl.w	r3, r2, r3
 8000994:	43db      	mvns	r3, r3
 8000996:	693a      	ldr	r2, [r7, #16]
 8000998:	4013      	ands	r3, r2
 800099a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	691a      	ldr	r2, [r3, #16]
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	f003 0307 	and.w	r3, r3, #7
 80009a6:	009b      	lsls	r3, r3, #2
 80009a8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ac:	693a      	ldr	r2, [r7, #16]
 80009ae:	4313      	orrs	r3, r2
 80009b0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	08da      	lsrs	r2, r3, #3
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	3208      	adds	r2, #8
 80009ba:	6939      	ldr	r1, [r7, #16]
 80009bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	005b      	lsls	r3, r3, #1
 80009ca:	2203      	movs	r2, #3
 80009cc:	fa02 f303 	lsl.w	r3, r2, r3
 80009d0:	43db      	mvns	r3, r3
 80009d2:	693a      	ldr	r2, [r7, #16]
 80009d4:	4013      	ands	r3, r2
 80009d6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	f003 0203 	and.w	r2, r3, #3
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	005b      	lsls	r3, r3, #1
 80009e4:	fa02 f303 	lsl.w	r3, r2, r3
 80009e8:	693a      	ldr	r2, [r7, #16]
 80009ea:	4313      	orrs	r3, r2
 80009ec:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	693a      	ldr	r2, [r7, #16]
 80009f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	f000 80ac 	beq.w	8000b5a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a02:	4b5f      	ldr	r3, [pc, #380]	; (8000b80 <HAL_GPIO_Init+0x330>)
 8000a04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a06:	4a5e      	ldr	r2, [pc, #376]	; (8000b80 <HAL_GPIO_Init+0x330>)
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	6613      	str	r3, [r2, #96]	; 0x60
 8000a0e:	4b5c      	ldr	r3, [pc, #368]	; (8000b80 <HAL_GPIO_Init+0x330>)
 8000a10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	60bb      	str	r3, [r7, #8]
 8000a18:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a1a:	4a5a      	ldr	r2, [pc, #360]	; (8000b84 <HAL_GPIO_Init+0x334>)
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	089b      	lsrs	r3, r3, #2
 8000a20:	3302      	adds	r3, #2
 8000a22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a26:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	f003 0303 	and.w	r3, r3, #3
 8000a2e:	009b      	lsls	r3, r3, #2
 8000a30:	220f      	movs	r2, #15
 8000a32:	fa02 f303 	lsl.w	r3, r2, r3
 8000a36:	43db      	mvns	r3, r3
 8000a38:	693a      	ldr	r2, [r7, #16]
 8000a3a:	4013      	ands	r3, r2
 8000a3c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a44:	d025      	beq.n	8000a92 <HAL_GPIO_Init+0x242>
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4a4f      	ldr	r2, [pc, #316]	; (8000b88 <HAL_GPIO_Init+0x338>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d01f      	beq.n	8000a8e <HAL_GPIO_Init+0x23e>
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	4a4e      	ldr	r2, [pc, #312]	; (8000b8c <HAL_GPIO_Init+0x33c>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d019      	beq.n	8000a8a <HAL_GPIO_Init+0x23a>
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4a4d      	ldr	r2, [pc, #308]	; (8000b90 <HAL_GPIO_Init+0x340>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d013      	beq.n	8000a86 <HAL_GPIO_Init+0x236>
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4a4c      	ldr	r2, [pc, #304]	; (8000b94 <HAL_GPIO_Init+0x344>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d00d      	beq.n	8000a82 <HAL_GPIO_Init+0x232>
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4a4b      	ldr	r2, [pc, #300]	; (8000b98 <HAL_GPIO_Init+0x348>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d007      	beq.n	8000a7e <HAL_GPIO_Init+0x22e>
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4a4a      	ldr	r2, [pc, #296]	; (8000b9c <HAL_GPIO_Init+0x34c>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d101      	bne.n	8000a7a <HAL_GPIO_Init+0x22a>
 8000a76:	2306      	movs	r3, #6
 8000a78:	e00c      	b.n	8000a94 <HAL_GPIO_Init+0x244>
 8000a7a:	2307      	movs	r3, #7
 8000a7c:	e00a      	b.n	8000a94 <HAL_GPIO_Init+0x244>
 8000a7e:	2305      	movs	r3, #5
 8000a80:	e008      	b.n	8000a94 <HAL_GPIO_Init+0x244>
 8000a82:	2304      	movs	r3, #4
 8000a84:	e006      	b.n	8000a94 <HAL_GPIO_Init+0x244>
 8000a86:	2303      	movs	r3, #3
 8000a88:	e004      	b.n	8000a94 <HAL_GPIO_Init+0x244>
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	e002      	b.n	8000a94 <HAL_GPIO_Init+0x244>
 8000a8e:	2301      	movs	r3, #1
 8000a90:	e000      	b.n	8000a94 <HAL_GPIO_Init+0x244>
 8000a92:	2300      	movs	r3, #0
 8000a94:	697a      	ldr	r2, [r7, #20]
 8000a96:	f002 0203 	and.w	r2, r2, #3
 8000a9a:	0092      	lsls	r2, r2, #2
 8000a9c:	4093      	lsls	r3, r2
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000aa4:	4937      	ldr	r1, [pc, #220]	; (8000b84 <HAL_GPIO_Init+0x334>)
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	089b      	lsrs	r3, r3, #2
 8000aaa:	3302      	adds	r3, #2
 8000aac:	693a      	ldr	r2, [r7, #16]
 8000aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ab2:	4b3b      	ldr	r3, [pc, #236]	; (8000ba0 <HAL_GPIO_Init+0x350>)
 8000ab4:	689b      	ldr	r3, [r3, #8]
 8000ab6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	43db      	mvns	r3, r3
 8000abc:	693a      	ldr	r2, [r7, #16]
 8000abe:	4013      	ands	r3, r2
 8000ac0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d003      	beq.n	8000ad6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	4313      	orrs	r3, r2
 8000ad4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ad6:	4a32      	ldr	r2, [pc, #200]	; (8000ba0 <HAL_GPIO_Init+0x350>)
 8000ad8:	693b      	ldr	r3, [r7, #16]
 8000ada:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000adc:	4b30      	ldr	r3, [pc, #192]	; (8000ba0 <HAL_GPIO_Init+0x350>)
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	43db      	mvns	r3, r3
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	4013      	ands	r3, r2
 8000aea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d003      	beq.n	8000b00 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000af8:	693a      	ldr	r2, [r7, #16]
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	4313      	orrs	r3, r2
 8000afe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b00:	4a27      	ldr	r2, [pc, #156]	; (8000ba0 <HAL_GPIO_Init+0x350>)
 8000b02:	693b      	ldr	r3, [r7, #16]
 8000b04:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000b06:	4b26      	ldr	r3, [pc, #152]	; (8000ba0 <HAL_GPIO_Init+0x350>)
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	43db      	mvns	r3, r3
 8000b10:	693a      	ldr	r2, [r7, #16]
 8000b12:	4013      	ands	r3, r2
 8000b14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d003      	beq.n	8000b2a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000b22:	693a      	ldr	r2, [r7, #16]
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	4313      	orrs	r3, r2
 8000b28:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b2a:	4a1d      	ldr	r2, [pc, #116]	; (8000ba0 <HAL_GPIO_Init+0x350>)
 8000b2c:	693b      	ldr	r3, [r7, #16]
 8000b2e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000b30:	4b1b      	ldr	r3, [pc, #108]	; (8000ba0 <HAL_GPIO_Init+0x350>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	43db      	mvns	r3, r3
 8000b3a:	693a      	ldr	r2, [r7, #16]
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d003      	beq.n	8000b54 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000b4c:	693a      	ldr	r2, [r7, #16]
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	4313      	orrs	r3, r2
 8000b52:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b54:	4a12      	ldr	r2, [pc, #72]	; (8000ba0 <HAL_GPIO_Init+0x350>)
 8000b56:	693b      	ldr	r3, [r7, #16]
 8000b58:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	fa22 f303 	lsr.w	r3, r2, r3
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	f47f ae78 	bne.w	8000860 <HAL_GPIO_Init+0x10>
  }
}
 8000b70:	bf00      	nop
 8000b72:	bf00      	nop
 8000b74:	371c      	adds	r7, #28
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	40021000 	.word	0x40021000
 8000b84:	40010000 	.word	0x40010000
 8000b88:	48000400 	.word	0x48000400
 8000b8c:	48000800 	.word	0x48000800
 8000b90:	48000c00 	.word	0x48000c00
 8000b94:	48001000 	.word	0x48001000
 8000b98:	48001400 	.word	0x48001400
 8000b9c:	48001800 	.word	0x48001800
 8000ba0:	40010400 	.word	0x40010400

08000ba4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000ba8:	4b04      	ldr	r3, [pc, #16]	; (8000bbc <HAL_PWREx_GetVoltageRange+0x18>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	40007000 	.word	0x40007000

08000bc0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bce:	d130      	bne.n	8000c32 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000bd0:	4b23      	ldr	r3, [pc, #140]	; (8000c60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000bd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bdc:	d038      	beq.n	8000c50 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bde:	4b20      	ldr	r3, [pc, #128]	; (8000c60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000be6:	4a1e      	ldr	r2, [pc, #120]	; (8000c60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000be8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bec:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000bee:	4b1d      	ldr	r3, [pc, #116]	; (8000c64 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	2232      	movs	r2, #50	; 0x32
 8000bf4:	fb02 f303 	mul.w	r3, r2, r3
 8000bf8:	4a1b      	ldr	r2, [pc, #108]	; (8000c68 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8000bfe:	0c9b      	lsrs	r3, r3, #18
 8000c00:	3301      	adds	r3, #1
 8000c02:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c04:	e002      	b.n	8000c0c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	3b01      	subs	r3, #1
 8000c0a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c0c:	4b14      	ldr	r3, [pc, #80]	; (8000c60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c0e:	695b      	ldr	r3, [r3, #20]
 8000c10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c18:	d102      	bne.n	8000c20 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d1f2      	bne.n	8000c06 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c20:	4b0f      	ldr	r3, [pc, #60]	; (8000c60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c22:	695b      	ldr	r3, [r3, #20]
 8000c24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c2c:	d110      	bne.n	8000c50 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000c2e:	2303      	movs	r3, #3
 8000c30:	e00f      	b.n	8000c52 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000c32:	4b0b      	ldr	r3, [pc, #44]	; (8000c60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c3e:	d007      	beq.n	8000c50 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c40:	4b07      	ldr	r3, [pc, #28]	; (8000c60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c48:	4a05      	ldr	r2, [pc, #20]	; (8000c60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c4e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000c50:	2300      	movs	r3, #0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3714      	adds	r7, #20
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	40007000 	.word	0x40007000
 8000c64:	20000000 	.word	0x20000000
 8000c68:	431bde83 	.word	0x431bde83

08000c6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b088      	sub	sp, #32
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d101      	bne.n	8000c7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e3ca      	b.n	8001414 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c7e:	4b97      	ldr	r3, [pc, #604]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000c80:	689b      	ldr	r3, [r3, #8]
 8000c82:	f003 030c 	and.w	r3, r3, #12
 8000c86:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000c88:	4b94      	ldr	r3, [pc, #592]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000c8a:	68db      	ldr	r3, [r3, #12]
 8000c8c:	f003 0303 	and.w	r3, r3, #3
 8000c90:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f003 0310 	and.w	r3, r3, #16
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	f000 80e4 	beq.w	8000e68 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000ca0:	69bb      	ldr	r3, [r7, #24]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d007      	beq.n	8000cb6 <HAL_RCC_OscConfig+0x4a>
 8000ca6:	69bb      	ldr	r3, [r7, #24]
 8000ca8:	2b0c      	cmp	r3, #12
 8000caa:	f040 808b 	bne.w	8000dc4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	f040 8087 	bne.w	8000dc4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000cb6:	4b89      	ldr	r3, [pc, #548]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f003 0302 	and.w	r3, r3, #2
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d005      	beq.n	8000cce <HAL_RCC_OscConfig+0x62>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	699b      	ldr	r3, [r3, #24]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d101      	bne.n	8000cce <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e3a2      	b.n	8001414 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6a1a      	ldr	r2, [r3, #32]
 8000cd2:	4b82      	ldr	r3, [pc, #520]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f003 0308 	and.w	r3, r3, #8
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d004      	beq.n	8000ce8 <HAL_RCC_OscConfig+0x7c>
 8000cde:	4b7f      	ldr	r3, [pc, #508]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ce6:	e005      	b.n	8000cf4 <HAL_RCC_OscConfig+0x88>
 8000ce8:	4b7c      	ldr	r3, [pc, #496]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000cea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000cee:	091b      	lsrs	r3, r3, #4
 8000cf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d223      	bcs.n	8000d40 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6a1b      	ldr	r3, [r3, #32]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f000 fd1d 	bl	800173c <RCC_SetFlashLatencyFromMSIRange>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	e383      	b.n	8001414 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d0c:	4b73      	ldr	r3, [pc, #460]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a72      	ldr	r2, [pc, #456]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000d12:	f043 0308 	orr.w	r3, r3, #8
 8000d16:	6013      	str	r3, [r2, #0]
 8000d18:	4b70      	ldr	r3, [pc, #448]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6a1b      	ldr	r3, [r3, #32]
 8000d24:	496d      	ldr	r1, [pc, #436]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000d26:	4313      	orrs	r3, r2
 8000d28:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d2a:	4b6c      	ldr	r3, [pc, #432]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	69db      	ldr	r3, [r3, #28]
 8000d36:	021b      	lsls	r3, r3, #8
 8000d38:	4968      	ldr	r1, [pc, #416]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	604b      	str	r3, [r1, #4]
 8000d3e:	e025      	b.n	8000d8c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d40:	4b66      	ldr	r3, [pc, #408]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a65      	ldr	r2, [pc, #404]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000d46:	f043 0308 	orr.w	r3, r3, #8
 8000d4a:	6013      	str	r3, [r2, #0]
 8000d4c:	4b63      	ldr	r3, [pc, #396]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6a1b      	ldr	r3, [r3, #32]
 8000d58:	4960      	ldr	r1, [pc, #384]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d5e:	4b5f      	ldr	r3, [pc, #380]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	69db      	ldr	r3, [r3, #28]
 8000d6a:	021b      	lsls	r3, r3, #8
 8000d6c:	495b      	ldr	r1, [pc, #364]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000d72:	69bb      	ldr	r3, [r7, #24]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d109      	bne.n	8000d8c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6a1b      	ldr	r3, [r3, #32]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f000 fcdd 	bl	800173c <RCC_SetFlashLatencyFromMSIRange>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	e343      	b.n	8001414 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000d8c:	f000 fc4a 	bl	8001624 <HAL_RCC_GetSysClockFreq>
 8000d90:	4602      	mov	r2, r0
 8000d92:	4b52      	ldr	r3, [pc, #328]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000d94:	689b      	ldr	r3, [r3, #8]
 8000d96:	091b      	lsrs	r3, r3, #4
 8000d98:	f003 030f 	and.w	r3, r3, #15
 8000d9c:	4950      	ldr	r1, [pc, #320]	; (8000ee0 <HAL_RCC_OscConfig+0x274>)
 8000d9e:	5ccb      	ldrb	r3, [r1, r3]
 8000da0:	f003 031f 	and.w	r3, r3, #31
 8000da4:	fa22 f303 	lsr.w	r3, r2, r3
 8000da8:	4a4e      	ldr	r2, [pc, #312]	; (8000ee4 <HAL_RCC_OscConfig+0x278>)
 8000daa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000dac:	4b4e      	ldr	r3, [pc, #312]	; (8000ee8 <HAL_RCC_OscConfig+0x27c>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff fbdf 	bl	8000574 <HAL_InitTick>
 8000db6:	4603      	mov	r3, r0
 8000db8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000dba:	7bfb      	ldrb	r3, [r7, #15]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d052      	beq.n	8000e66 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000dc0:	7bfb      	ldrb	r3, [r7, #15]
 8000dc2:	e327      	b.n	8001414 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	699b      	ldr	r3, [r3, #24]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d032      	beq.n	8000e32 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000dcc:	4b43      	ldr	r3, [pc, #268]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a42      	ldr	r2, [pc, #264]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000dd2:	f043 0301 	orr.w	r3, r3, #1
 8000dd6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000dd8:	f7ff fc1c 	bl	8000614 <HAL_GetTick>
 8000ddc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000dde:	e008      	b.n	8000df2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000de0:	f7ff fc18 	bl	8000614 <HAL_GetTick>
 8000de4:	4602      	mov	r2, r0
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	2b02      	cmp	r3, #2
 8000dec:	d901      	bls.n	8000df2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000dee:	2303      	movs	r3, #3
 8000df0:	e310      	b.n	8001414 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000df2:	4b3a      	ldr	r3, [pc, #232]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f003 0302 	and.w	r3, r3, #2
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d0f0      	beq.n	8000de0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000dfe:	4b37      	ldr	r3, [pc, #220]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a36      	ldr	r2, [pc, #216]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000e04:	f043 0308 	orr.w	r3, r3, #8
 8000e08:	6013      	str	r3, [r2, #0]
 8000e0a:	4b34      	ldr	r3, [pc, #208]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6a1b      	ldr	r3, [r3, #32]
 8000e16:	4931      	ldr	r1, [pc, #196]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e1c:	4b2f      	ldr	r3, [pc, #188]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	69db      	ldr	r3, [r3, #28]
 8000e28:	021b      	lsls	r3, r3, #8
 8000e2a:	492c      	ldr	r1, [pc, #176]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	604b      	str	r3, [r1, #4]
 8000e30:	e01a      	b.n	8000e68 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000e32:	4b2a      	ldr	r3, [pc, #168]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a29      	ldr	r2, [pc, #164]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000e38:	f023 0301 	bic.w	r3, r3, #1
 8000e3c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e3e:	f7ff fbe9 	bl	8000614 <HAL_GetTick>
 8000e42:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e44:	e008      	b.n	8000e58 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e46:	f7ff fbe5 	bl	8000614 <HAL_GetTick>
 8000e4a:	4602      	mov	r2, r0
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	1ad3      	subs	r3, r2, r3
 8000e50:	2b02      	cmp	r3, #2
 8000e52:	d901      	bls.n	8000e58 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000e54:	2303      	movs	r3, #3
 8000e56:	e2dd      	b.n	8001414 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e58:	4b20      	ldr	r3, [pc, #128]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f003 0302 	and.w	r3, r3, #2
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d1f0      	bne.n	8000e46 <HAL_RCC_OscConfig+0x1da>
 8000e64:	e000      	b.n	8000e68 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e66:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f003 0301 	and.w	r3, r3, #1
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d074      	beq.n	8000f5e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000e74:	69bb      	ldr	r3, [r7, #24]
 8000e76:	2b08      	cmp	r3, #8
 8000e78:	d005      	beq.n	8000e86 <HAL_RCC_OscConfig+0x21a>
 8000e7a:	69bb      	ldr	r3, [r7, #24]
 8000e7c:	2b0c      	cmp	r3, #12
 8000e7e:	d10e      	bne.n	8000e9e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	2b03      	cmp	r3, #3
 8000e84:	d10b      	bne.n	8000e9e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e86:	4b15      	ldr	r3, [pc, #84]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d064      	beq.n	8000f5c <HAL_RCC_OscConfig+0x2f0>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d160      	bne.n	8000f5c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e2ba      	b.n	8001414 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ea6:	d106      	bne.n	8000eb6 <HAL_RCC_OscConfig+0x24a>
 8000ea8:	4b0c      	ldr	r3, [pc, #48]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a0b      	ldr	r2, [pc, #44]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000eae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eb2:	6013      	str	r3, [r2, #0]
 8000eb4:	e026      	b.n	8000f04 <HAL_RCC_OscConfig+0x298>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ebe:	d115      	bne.n	8000eec <HAL_RCC_OscConfig+0x280>
 8000ec0:	4b06      	ldr	r3, [pc, #24]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a05      	ldr	r2, [pc, #20]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000ec6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000eca:	6013      	str	r3, [r2, #0]
 8000ecc:	4b03      	ldr	r3, [pc, #12]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a02      	ldr	r2, [pc, #8]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000ed2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ed6:	6013      	str	r3, [r2, #0]
 8000ed8:	e014      	b.n	8000f04 <HAL_RCC_OscConfig+0x298>
 8000eda:	bf00      	nop
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	08002738 	.word	0x08002738
 8000ee4:	20000000 	.word	0x20000000
 8000ee8:	20000004 	.word	0x20000004
 8000eec:	4ba0      	ldr	r3, [pc, #640]	; (8001170 <HAL_RCC_OscConfig+0x504>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a9f      	ldr	r2, [pc, #636]	; (8001170 <HAL_RCC_OscConfig+0x504>)
 8000ef2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ef6:	6013      	str	r3, [r2, #0]
 8000ef8:	4b9d      	ldr	r3, [pc, #628]	; (8001170 <HAL_RCC_OscConfig+0x504>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a9c      	ldr	r2, [pc, #624]	; (8001170 <HAL_RCC_OscConfig+0x504>)
 8000efe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d013      	beq.n	8000f34 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f0c:	f7ff fb82 	bl	8000614 <HAL_GetTick>
 8000f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f12:	e008      	b.n	8000f26 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f14:	f7ff fb7e 	bl	8000614 <HAL_GetTick>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	2b64      	cmp	r3, #100	; 0x64
 8000f20:	d901      	bls.n	8000f26 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000f22:	2303      	movs	r3, #3
 8000f24:	e276      	b.n	8001414 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f26:	4b92      	ldr	r3, [pc, #584]	; (8001170 <HAL_RCC_OscConfig+0x504>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d0f0      	beq.n	8000f14 <HAL_RCC_OscConfig+0x2a8>
 8000f32:	e014      	b.n	8000f5e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f34:	f7ff fb6e 	bl	8000614 <HAL_GetTick>
 8000f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f3a:	e008      	b.n	8000f4e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f3c:	f7ff fb6a 	bl	8000614 <HAL_GetTick>
 8000f40:	4602      	mov	r2, r0
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	2b64      	cmp	r3, #100	; 0x64
 8000f48:	d901      	bls.n	8000f4e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	e262      	b.n	8001414 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f4e:	4b88      	ldr	r3, [pc, #544]	; (8001170 <HAL_RCC_OscConfig+0x504>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d1f0      	bne.n	8000f3c <HAL_RCC_OscConfig+0x2d0>
 8000f5a:	e000      	b.n	8000f5e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f003 0302 	and.w	r3, r3, #2
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d060      	beq.n	800102c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000f6a:	69bb      	ldr	r3, [r7, #24]
 8000f6c:	2b04      	cmp	r3, #4
 8000f6e:	d005      	beq.n	8000f7c <HAL_RCC_OscConfig+0x310>
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	2b0c      	cmp	r3, #12
 8000f74:	d119      	bne.n	8000faa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	d116      	bne.n	8000faa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f7c:	4b7c      	ldr	r3, [pc, #496]	; (8001170 <HAL_RCC_OscConfig+0x504>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d005      	beq.n	8000f94 <HAL_RCC_OscConfig+0x328>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d101      	bne.n	8000f94 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
 8000f92:	e23f      	b.n	8001414 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f94:	4b76      	ldr	r3, [pc, #472]	; (8001170 <HAL_RCC_OscConfig+0x504>)
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	691b      	ldr	r3, [r3, #16]
 8000fa0:	061b      	lsls	r3, r3, #24
 8000fa2:	4973      	ldr	r1, [pc, #460]	; (8001170 <HAL_RCC_OscConfig+0x504>)
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000fa8:	e040      	b.n	800102c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	68db      	ldr	r3, [r3, #12]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d023      	beq.n	8000ffa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fb2:	4b6f      	ldr	r3, [pc, #444]	; (8001170 <HAL_RCC_OscConfig+0x504>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a6e      	ldr	r2, [pc, #440]	; (8001170 <HAL_RCC_OscConfig+0x504>)
 8000fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fbe:	f7ff fb29 	bl	8000614 <HAL_GetTick>
 8000fc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000fc4:	e008      	b.n	8000fd8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fc6:	f7ff fb25 	bl	8000614 <HAL_GetTick>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	1ad3      	subs	r3, r2, r3
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	d901      	bls.n	8000fd8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	e21d      	b.n	8001414 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000fd8:	4b65      	ldr	r3, [pc, #404]	; (8001170 <HAL_RCC_OscConfig+0x504>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d0f0      	beq.n	8000fc6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fe4:	4b62      	ldr	r3, [pc, #392]	; (8001170 <HAL_RCC_OscConfig+0x504>)
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	691b      	ldr	r3, [r3, #16]
 8000ff0:	061b      	lsls	r3, r3, #24
 8000ff2:	495f      	ldr	r1, [pc, #380]	; (8001170 <HAL_RCC_OscConfig+0x504>)
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	604b      	str	r3, [r1, #4]
 8000ff8:	e018      	b.n	800102c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ffa:	4b5d      	ldr	r3, [pc, #372]	; (8001170 <HAL_RCC_OscConfig+0x504>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a5c      	ldr	r2, [pc, #368]	; (8001170 <HAL_RCC_OscConfig+0x504>)
 8001000:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001004:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001006:	f7ff fb05 	bl	8000614 <HAL_GetTick>
 800100a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800100c:	e008      	b.n	8001020 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800100e:	f7ff fb01 	bl	8000614 <HAL_GetTick>
 8001012:	4602      	mov	r2, r0
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	1ad3      	subs	r3, r2, r3
 8001018:	2b02      	cmp	r3, #2
 800101a:	d901      	bls.n	8001020 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800101c:	2303      	movs	r3, #3
 800101e:	e1f9      	b.n	8001414 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001020:	4b53      	ldr	r3, [pc, #332]	; (8001170 <HAL_RCC_OscConfig+0x504>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001028:	2b00      	cmp	r3, #0
 800102a:	d1f0      	bne.n	800100e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f003 0308 	and.w	r3, r3, #8
 8001034:	2b00      	cmp	r3, #0
 8001036:	d03c      	beq.n	80010b2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	695b      	ldr	r3, [r3, #20]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d01c      	beq.n	800107a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001040:	4b4b      	ldr	r3, [pc, #300]	; (8001170 <HAL_RCC_OscConfig+0x504>)
 8001042:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001046:	4a4a      	ldr	r2, [pc, #296]	; (8001170 <HAL_RCC_OscConfig+0x504>)
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001050:	f7ff fae0 	bl	8000614 <HAL_GetTick>
 8001054:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001056:	e008      	b.n	800106a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001058:	f7ff fadc 	bl	8000614 <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	2b02      	cmp	r3, #2
 8001064:	d901      	bls.n	800106a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001066:	2303      	movs	r3, #3
 8001068:	e1d4      	b.n	8001414 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800106a:	4b41      	ldr	r3, [pc, #260]	; (8001170 <HAL_RCC_OscConfig+0x504>)
 800106c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001070:	f003 0302 	and.w	r3, r3, #2
 8001074:	2b00      	cmp	r3, #0
 8001076:	d0ef      	beq.n	8001058 <HAL_RCC_OscConfig+0x3ec>
 8001078:	e01b      	b.n	80010b2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800107a:	4b3d      	ldr	r3, [pc, #244]	; (8001170 <HAL_RCC_OscConfig+0x504>)
 800107c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001080:	4a3b      	ldr	r2, [pc, #236]	; (8001170 <HAL_RCC_OscConfig+0x504>)
 8001082:	f023 0301 	bic.w	r3, r3, #1
 8001086:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800108a:	f7ff fac3 	bl	8000614 <HAL_GetTick>
 800108e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001090:	e008      	b.n	80010a4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001092:	f7ff fabf 	bl	8000614 <HAL_GetTick>
 8001096:	4602      	mov	r2, r0
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	1ad3      	subs	r3, r2, r3
 800109c:	2b02      	cmp	r3, #2
 800109e:	d901      	bls.n	80010a4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80010a0:	2303      	movs	r3, #3
 80010a2:	e1b7      	b.n	8001414 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80010a4:	4b32      	ldr	r3, [pc, #200]	; (8001170 <HAL_RCC_OscConfig+0x504>)
 80010a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010aa:	f003 0302 	and.w	r3, r3, #2
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d1ef      	bne.n	8001092 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f003 0304 	and.w	r3, r3, #4
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	f000 80a6 	beq.w	800120c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010c0:	2300      	movs	r3, #0
 80010c2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80010c4:	4b2a      	ldr	r3, [pc, #168]	; (8001170 <HAL_RCC_OscConfig+0x504>)
 80010c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d10d      	bne.n	80010ec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010d0:	4b27      	ldr	r3, [pc, #156]	; (8001170 <HAL_RCC_OscConfig+0x504>)
 80010d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010d4:	4a26      	ldr	r2, [pc, #152]	; (8001170 <HAL_RCC_OscConfig+0x504>)
 80010d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010da:	6593      	str	r3, [r2, #88]	; 0x58
 80010dc:	4b24      	ldr	r3, [pc, #144]	; (8001170 <HAL_RCC_OscConfig+0x504>)
 80010de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e4:	60bb      	str	r3, [r7, #8]
 80010e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010e8:	2301      	movs	r3, #1
 80010ea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010ec:	4b21      	ldr	r3, [pc, #132]	; (8001174 <HAL_RCC_OscConfig+0x508>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d118      	bne.n	800112a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80010f8:	4b1e      	ldr	r3, [pc, #120]	; (8001174 <HAL_RCC_OscConfig+0x508>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a1d      	ldr	r2, [pc, #116]	; (8001174 <HAL_RCC_OscConfig+0x508>)
 80010fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001102:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001104:	f7ff fa86 	bl	8000614 <HAL_GetTick>
 8001108:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800110a:	e008      	b.n	800111e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800110c:	f7ff fa82 	bl	8000614 <HAL_GetTick>
 8001110:	4602      	mov	r2, r0
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	2b02      	cmp	r3, #2
 8001118:	d901      	bls.n	800111e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800111a:	2303      	movs	r3, #3
 800111c:	e17a      	b.n	8001414 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800111e:	4b15      	ldr	r3, [pc, #84]	; (8001174 <HAL_RCC_OscConfig+0x508>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001126:	2b00      	cmp	r3, #0
 8001128:	d0f0      	beq.n	800110c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	2b01      	cmp	r3, #1
 8001130:	d108      	bne.n	8001144 <HAL_RCC_OscConfig+0x4d8>
 8001132:	4b0f      	ldr	r3, [pc, #60]	; (8001170 <HAL_RCC_OscConfig+0x504>)
 8001134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001138:	4a0d      	ldr	r2, [pc, #52]	; (8001170 <HAL_RCC_OscConfig+0x504>)
 800113a:	f043 0301 	orr.w	r3, r3, #1
 800113e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001142:	e029      	b.n	8001198 <HAL_RCC_OscConfig+0x52c>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	2b05      	cmp	r3, #5
 800114a:	d115      	bne.n	8001178 <HAL_RCC_OscConfig+0x50c>
 800114c:	4b08      	ldr	r3, [pc, #32]	; (8001170 <HAL_RCC_OscConfig+0x504>)
 800114e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001152:	4a07      	ldr	r2, [pc, #28]	; (8001170 <HAL_RCC_OscConfig+0x504>)
 8001154:	f043 0304 	orr.w	r3, r3, #4
 8001158:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800115c:	4b04      	ldr	r3, [pc, #16]	; (8001170 <HAL_RCC_OscConfig+0x504>)
 800115e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001162:	4a03      	ldr	r2, [pc, #12]	; (8001170 <HAL_RCC_OscConfig+0x504>)
 8001164:	f043 0301 	orr.w	r3, r3, #1
 8001168:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800116c:	e014      	b.n	8001198 <HAL_RCC_OscConfig+0x52c>
 800116e:	bf00      	nop
 8001170:	40021000 	.word	0x40021000
 8001174:	40007000 	.word	0x40007000
 8001178:	4b9c      	ldr	r3, [pc, #624]	; (80013ec <HAL_RCC_OscConfig+0x780>)
 800117a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800117e:	4a9b      	ldr	r2, [pc, #620]	; (80013ec <HAL_RCC_OscConfig+0x780>)
 8001180:	f023 0301 	bic.w	r3, r3, #1
 8001184:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001188:	4b98      	ldr	r3, [pc, #608]	; (80013ec <HAL_RCC_OscConfig+0x780>)
 800118a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800118e:	4a97      	ldr	r2, [pc, #604]	; (80013ec <HAL_RCC_OscConfig+0x780>)
 8001190:	f023 0304 	bic.w	r3, r3, #4
 8001194:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d016      	beq.n	80011ce <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011a0:	f7ff fa38 	bl	8000614 <HAL_GetTick>
 80011a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011a6:	e00a      	b.n	80011be <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011a8:	f7ff fa34 	bl	8000614 <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d901      	bls.n	80011be <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80011ba:	2303      	movs	r3, #3
 80011bc:	e12a      	b.n	8001414 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011be:	4b8b      	ldr	r3, [pc, #556]	; (80013ec <HAL_RCC_OscConfig+0x780>)
 80011c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011c4:	f003 0302 	and.w	r3, r3, #2
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d0ed      	beq.n	80011a8 <HAL_RCC_OscConfig+0x53c>
 80011cc:	e015      	b.n	80011fa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011ce:	f7ff fa21 	bl	8000614 <HAL_GetTick>
 80011d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011d4:	e00a      	b.n	80011ec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011d6:	f7ff fa1d 	bl	8000614 <HAL_GetTick>
 80011da:	4602      	mov	r2, r0
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d901      	bls.n	80011ec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80011e8:	2303      	movs	r3, #3
 80011ea:	e113      	b.n	8001414 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011ec:	4b7f      	ldr	r3, [pc, #508]	; (80013ec <HAL_RCC_OscConfig+0x780>)
 80011ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011f2:	f003 0302 	and.w	r3, r3, #2
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d1ed      	bne.n	80011d6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80011fa:	7ffb      	ldrb	r3, [r7, #31]
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d105      	bne.n	800120c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001200:	4b7a      	ldr	r3, [pc, #488]	; (80013ec <HAL_RCC_OscConfig+0x780>)
 8001202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001204:	4a79      	ldr	r2, [pc, #484]	; (80013ec <HAL_RCC_OscConfig+0x780>)
 8001206:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800120a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001210:	2b00      	cmp	r3, #0
 8001212:	f000 80fe 	beq.w	8001412 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800121a:	2b02      	cmp	r3, #2
 800121c:	f040 80d0 	bne.w	80013c0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001220:	4b72      	ldr	r3, [pc, #456]	; (80013ec <HAL_RCC_OscConfig+0x780>)
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	f003 0203 	and.w	r2, r3, #3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001230:	429a      	cmp	r2, r3
 8001232:	d130      	bne.n	8001296 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	3b01      	subs	r3, #1
 8001240:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001242:	429a      	cmp	r2, r3
 8001244:	d127      	bne.n	8001296 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001250:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001252:	429a      	cmp	r2, r3
 8001254:	d11f      	bne.n	8001296 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001260:	2a07      	cmp	r2, #7
 8001262:	bf14      	ite	ne
 8001264:	2201      	movne	r2, #1
 8001266:	2200      	moveq	r2, #0
 8001268:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800126a:	4293      	cmp	r3, r2
 800126c:	d113      	bne.n	8001296 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001278:	085b      	lsrs	r3, r3, #1
 800127a:	3b01      	subs	r3, #1
 800127c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800127e:	429a      	cmp	r2, r3
 8001280:	d109      	bne.n	8001296 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128c:	085b      	lsrs	r3, r3, #1
 800128e:	3b01      	subs	r3, #1
 8001290:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001292:	429a      	cmp	r2, r3
 8001294:	d06e      	beq.n	8001374 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	2b0c      	cmp	r3, #12
 800129a:	d069      	beq.n	8001370 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800129c:	4b53      	ldr	r3, [pc, #332]	; (80013ec <HAL_RCC_OscConfig+0x780>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d105      	bne.n	80012b4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80012a8:	4b50      	ldr	r3, [pc, #320]	; (80013ec <HAL_RCC_OscConfig+0x780>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80012b4:	2301      	movs	r3, #1
 80012b6:	e0ad      	b.n	8001414 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80012b8:	4b4c      	ldr	r3, [pc, #304]	; (80013ec <HAL_RCC_OscConfig+0x780>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a4b      	ldr	r2, [pc, #300]	; (80013ec <HAL_RCC_OscConfig+0x780>)
 80012be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80012c2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80012c4:	f7ff f9a6 	bl	8000614 <HAL_GetTick>
 80012c8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012ca:	e008      	b.n	80012de <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012cc:	f7ff f9a2 	bl	8000614 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d901      	bls.n	80012de <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e09a      	b.n	8001414 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012de:	4b43      	ldr	r3, [pc, #268]	; (80013ec <HAL_RCC_OscConfig+0x780>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d1f0      	bne.n	80012cc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012ea:	4b40      	ldr	r3, [pc, #256]	; (80013ec <HAL_RCC_OscConfig+0x780>)
 80012ec:	68da      	ldr	r2, [r3, #12]
 80012ee:	4b40      	ldr	r3, [pc, #256]	; (80013f0 <HAL_RCC_OscConfig+0x784>)
 80012f0:	4013      	ands	r3, r2
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80012fa:	3a01      	subs	r2, #1
 80012fc:	0112      	lsls	r2, r2, #4
 80012fe:	4311      	orrs	r1, r2
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001304:	0212      	lsls	r2, r2, #8
 8001306:	4311      	orrs	r1, r2
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800130c:	0852      	lsrs	r2, r2, #1
 800130e:	3a01      	subs	r2, #1
 8001310:	0552      	lsls	r2, r2, #21
 8001312:	4311      	orrs	r1, r2
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001318:	0852      	lsrs	r2, r2, #1
 800131a:	3a01      	subs	r2, #1
 800131c:	0652      	lsls	r2, r2, #25
 800131e:	4311      	orrs	r1, r2
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001324:	0912      	lsrs	r2, r2, #4
 8001326:	0452      	lsls	r2, r2, #17
 8001328:	430a      	orrs	r2, r1
 800132a:	4930      	ldr	r1, [pc, #192]	; (80013ec <HAL_RCC_OscConfig+0x780>)
 800132c:	4313      	orrs	r3, r2
 800132e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001330:	4b2e      	ldr	r3, [pc, #184]	; (80013ec <HAL_RCC_OscConfig+0x780>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a2d      	ldr	r2, [pc, #180]	; (80013ec <HAL_RCC_OscConfig+0x780>)
 8001336:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800133a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800133c:	4b2b      	ldr	r3, [pc, #172]	; (80013ec <HAL_RCC_OscConfig+0x780>)
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	4a2a      	ldr	r2, [pc, #168]	; (80013ec <HAL_RCC_OscConfig+0x780>)
 8001342:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001346:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001348:	f7ff f964 	bl	8000614 <HAL_GetTick>
 800134c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800134e:	e008      	b.n	8001362 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001350:	f7ff f960 	bl	8000614 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	2b02      	cmp	r3, #2
 800135c:	d901      	bls.n	8001362 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e058      	b.n	8001414 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001362:	4b22      	ldr	r3, [pc, #136]	; (80013ec <HAL_RCC_OscConfig+0x780>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d0f0      	beq.n	8001350 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800136e:	e050      	b.n	8001412 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e04f      	b.n	8001414 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001374:	4b1d      	ldr	r3, [pc, #116]	; (80013ec <HAL_RCC_OscConfig+0x780>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d148      	bne.n	8001412 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001380:	4b1a      	ldr	r3, [pc, #104]	; (80013ec <HAL_RCC_OscConfig+0x780>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a19      	ldr	r2, [pc, #100]	; (80013ec <HAL_RCC_OscConfig+0x780>)
 8001386:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800138a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800138c:	4b17      	ldr	r3, [pc, #92]	; (80013ec <HAL_RCC_OscConfig+0x780>)
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	4a16      	ldr	r2, [pc, #88]	; (80013ec <HAL_RCC_OscConfig+0x780>)
 8001392:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001396:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001398:	f7ff f93c 	bl	8000614 <HAL_GetTick>
 800139c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800139e:	e008      	b.n	80013b2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013a0:	f7ff f938 	bl	8000614 <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e030      	b.n	8001414 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013b2:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <HAL_RCC_OscConfig+0x780>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d0f0      	beq.n	80013a0 <HAL_RCC_OscConfig+0x734>
 80013be:	e028      	b.n	8001412 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	2b0c      	cmp	r3, #12
 80013c4:	d023      	beq.n	800140e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013c6:	4b09      	ldr	r3, [pc, #36]	; (80013ec <HAL_RCC_OscConfig+0x780>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a08      	ldr	r2, [pc, #32]	; (80013ec <HAL_RCC_OscConfig+0x780>)
 80013cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013d2:	f7ff f91f 	bl	8000614 <HAL_GetTick>
 80013d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013d8:	e00c      	b.n	80013f4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013da:	f7ff f91b 	bl	8000614 <HAL_GetTick>
 80013de:	4602      	mov	r2, r0
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d905      	bls.n	80013f4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80013e8:	2303      	movs	r3, #3
 80013ea:	e013      	b.n	8001414 <HAL_RCC_OscConfig+0x7a8>
 80013ec:	40021000 	.word	0x40021000
 80013f0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013f4:	4b09      	ldr	r3, [pc, #36]	; (800141c <HAL_RCC_OscConfig+0x7b0>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d1ec      	bne.n	80013da <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001400:	4b06      	ldr	r3, [pc, #24]	; (800141c <HAL_RCC_OscConfig+0x7b0>)
 8001402:	68da      	ldr	r2, [r3, #12]
 8001404:	4905      	ldr	r1, [pc, #20]	; (800141c <HAL_RCC_OscConfig+0x7b0>)
 8001406:	4b06      	ldr	r3, [pc, #24]	; (8001420 <HAL_RCC_OscConfig+0x7b4>)
 8001408:	4013      	ands	r3, r2
 800140a:	60cb      	str	r3, [r1, #12]
 800140c:	e001      	b.n	8001412 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e000      	b.n	8001414 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001412:	2300      	movs	r3, #0
}
 8001414:	4618      	mov	r0, r3
 8001416:	3720      	adds	r7, #32
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40021000 	.word	0x40021000
 8001420:	feeefffc 	.word	0xfeeefffc

08001424 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d101      	bne.n	8001438 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e0e7      	b.n	8001608 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001438:	4b75      	ldr	r3, [pc, #468]	; (8001610 <HAL_RCC_ClockConfig+0x1ec>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 0307 	and.w	r3, r3, #7
 8001440:	683a      	ldr	r2, [r7, #0]
 8001442:	429a      	cmp	r2, r3
 8001444:	d910      	bls.n	8001468 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001446:	4b72      	ldr	r3, [pc, #456]	; (8001610 <HAL_RCC_ClockConfig+0x1ec>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f023 0207 	bic.w	r2, r3, #7
 800144e:	4970      	ldr	r1, [pc, #448]	; (8001610 <HAL_RCC_ClockConfig+0x1ec>)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	4313      	orrs	r3, r2
 8001454:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001456:	4b6e      	ldr	r3, [pc, #440]	; (8001610 <HAL_RCC_ClockConfig+0x1ec>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0307 	and.w	r3, r3, #7
 800145e:	683a      	ldr	r2, [r7, #0]
 8001460:	429a      	cmp	r2, r3
 8001462:	d001      	beq.n	8001468 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e0cf      	b.n	8001608 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 0302 	and.w	r3, r3, #2
 8001470:	2b00      	cmp	r3, #0
 8001472:	d010      	beq.n	8001496 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	689a      	ldr	r2, [r3, #8]
 8001478:	4b66      	ldr	r3, [pc, #408]	; (8001614 <HAL_RCC_ClockConfig+0x1f0>)
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001480:	429a      	cmp	r2, r3
 8001482:	d908      	bls.n	8001496 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001484:	4b63      	ldr	r3, [pc, #396]	; (8001614 <HAL_RCC_ClockConfig+0x1f0>)
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	4960      	ldr	r1, [pc, #384]	; (8001614 <HAL_RCC_ClockConfig+0x1f0>)
 8001492:	4313      	orrs	r3, r2
 8001494:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d04c      	beq.n	800153c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	2b03      	cmp	r3, #3
 80014a8:	d107      	bne.n	80014ba <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014aa:	4b5a      	ldr	r3, [pc, #360]	; (8001614 <HAL_RCC_ClockConfig+0x1f0>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d121      	bne.n	80014fa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e0a6      	b.n	8001608 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d107      	bne.n	80014d2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014c2:	4b54      	ldr	r3, [pc, #336]	; (8001614 <HAL_RCC_ClockConfig+0x1f0>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d115      	bne.n	80014fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e09a      	b.n	8001608 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d107      	bne.n	80014ea <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014da:	4b4e      	ldr	r3, [pc, #312]	; (8001614 <HAL_RCC_ClockConfig+0x1f0>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d109      	bne.n	80014fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e08e      	b.n	8001608 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014ea:	4b4a      	ldr	r3, [pc, #296]	; (8001614 <HAL_RCC_ClockConfig+0x1f0>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d101      	bne.n	80014fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e086      	b.n	8001608 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80014fa:	4b46      	ldr	r3, [pc, #280]	; (8001614 <HAL_RCC_ClockConfig+0x1f0>)
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	f023 0203 	bic.w	r2, r3, #3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	4943      	ldr	r1, [pc, #268]	; (8001614 <HAL_RCC_ClockConfig+0x1f0>)
 8001508:	4313      	orrs	r3, r2
 800150a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800150c:	f7ff f882 	bl	8000614 <HAL_GetTick>
 8001510:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001512:	e00a      	b.n	800152a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001514:	f7ff f87e 	bl	8000614 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001522:	4293      	cmp	r3, r2
 8001524:	d901      	bls.n	800152a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e06e      	b.n	8001608 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800152a:	4b3a      	ldr	r3, [pc, #232]	; (8001614 <HAL_RCC_ClockConfig+0x1f0>)
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	f003 020c 	and.w	r2, r3, #12
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	429a      	cmp	r2, r3
 800153a:	d1eb      	bne.n	8001514 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0302 	and.w	r3, r3, #2
 8001544:	2b00      	cmp	r3, #0
 8001546:	d010      	beq.n	800156a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689a      	ldr	r2, [r3, #8]
 800154c:	4b31      	ldr	r3, [pc, #196]	; (8001614 <HAL_RCC_ClockConfig+0x1f0>)
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001554:	429a      	cmp	r2, r3
 8001556:	d208      	bcs.n	800156a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001558:	4b2e      	ldr	r3, [pc, #184]	; (8001614 <HAL_RCC_ClockConfig+0x1f0>)
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	492b      	ldr	r1, [pc, #172]	; (8001614 <HAL_RCC_ClockConfig+0x1f0>)
 8001566:	4313      	orrs	r3, r2
 8001568:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800156a:	4b29      	ldr	r3, [pc, #164]	; (8001610 <HAL_RCC_ClockConfig+0x1ec>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0307 	and.w	r3, r3, #7
 8001572:	683a      	ldr	r2, [r7, #0]
 8001574:	429a      	cmp	r2, r3
 8001576:	d210      	bcs.n	800159a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001578:	4b25      	ldr	r3, [pc, #148]	; (8001610 <HAL_RCC_ClockConfig+0x1ec>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f023 0207 	bic.w	r2, r3, #7
 8001580:	4923      	ldr	r1, [pc, #140]	; (8001610 <HAL_RCC_ClockConfig+0x1ec>)
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	4313      	orrs	r3, r2
 8001586:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001588:	4b21      	ldr	r3, [pc, #132]	; (8001610 <HAL_RCC_ClockConfig+0x1ec>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0307 	and.w	r3, r3, #7
 8001590:	683a      	ldr	r2, [r7, #0]
 8001592:	429a      	cmp	r2, r3
 8001594:	d001      	beq.n	800159a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e036      	b.n	8001608 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0304 	and.w	r3, r3, #4
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d008      	beq.n	80015b8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015a6:	4b1b      	ldr	r3, [pc, #108]	; (8001614 <HAL_RCC_ClockConfig+0x1f0>)
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	68db      	ldr	r3, [r3, #12]
 80015b2:	4918      	ldr	r1, [pc, #96]	; (8001614 <HAL_RCC_ClockConfig+0x1f0>)
 80015b4:	4313      	orrs	r3, r2
 80015b6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0308 	and.w	r3, r3, #8
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d009      	beq.n	80015d8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015c4:	4b13      	ldr	r3, [pc, #76]	; (8001614 <HAL_RCC_ClockConfig+0x1f0>)
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	691b      	ldr	r3, [r3, #16]
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	4910      	ldr	r1, [pc, #64]	; (8001614 <HAL_RCC_ClockConfig+0x1f0>)
 80015d4:	4313      	orrs	r3, r2
 80015d6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80015d8:	f000 f824 	bl	8001624 <HAL_RCC_GetSysClockFreq>
 80015dc:	4602      	mov	r2, r0
 80015de:	4b0d      	ldr	r3, [pc, #52]	; (8001614 <HAL_RCC_ClockConfig+0x1f0>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	091b      	lsrs	r3, r3, #4
 80015e4:	f003 030f 	and.w	r3, r3, #15
 80015e8:	490b      	ldr	r1, [pc, #44]	; (8001618 <HAL_RCC_ClockConfig+0x1f4>)
 80015ea:	5ccb      	ldrb	r3, [r1, r3]
 80015ec:	f003 031f 	and.w	r3, r3, #31
 80015f0:	fa22 f303 	lsr.w	r3, r2, r3
 80015f4:	4a09      	ldr	r2, [pc, #36]	; (800161c <HAL_RCC_ClockConfig+0x1f8>)
 80015f6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80015f8:	4b09      	ldr	r3, [pc, #36]	; (8001620 <HAL_RCC_ClockConfig+0x1fc>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7fe ffb9 	bl	8000574 <HAL_InitTick>
 8001602:	4603      	mov	r3, r0
 8001604:	72fb      	strb	r3, [r7, #11]

  return status;
 8001606:	7afb      	ldrb	r3, [r7, #11]
}
 8001608:	4618      	mov	r0, r3
 800160a:	3710      	adds	r7, #16
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40022000 	.word	0x40022000
 8001614:	40021000 	.word	0x40021000
 8001618:	08002738 	.word	0x08002738
 800161c:	20000000 	.word	0x20000000
 8001620:	20000004 	.word	0x20000004

08001624 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001624:	b480      	push	{r7}
 8001626:	b089      	sub	sp, #36	; 0x24
 8001628:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800162a:	2300      	movs	r3, #0
 800162c:	61fb      	str	r3, [r7, #28]
 800162e:	2300      	movs	r3, #0
 8001630:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001632:	4b3e      	ldr	r3, [pc, #248]	; (800172c <HAL_RCC_GetSysClockFreq+0x108>)
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	f003 030c 	and.w	r3, r3, #12
 800163a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800163c:	4b3b      	ldr	r3, [pc, #236]	; (800172c <HAL_RCC_GetSysClockFreq+0x108>)
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	f003 0303 	and.w	r3, r3, #3
 8001644:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d005      	beq.n	8001658 <HAL_RCC_GetSysClockFreq+0x34>
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	2b0c      	cmp	r3, #12
 8001650:	d121      	bne.n	8001696 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	2b01      	cmp	r3, #1
 8001656:	d11e      	bne.n	8001696 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001658:	4b34      	ldr	r3, [pc, #208]	; (800172c <HAL_RCC_GetSysClockFreq+0x108>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0308 	and.w	r3, r3, #8
 8001660:	2b00      	cmp	r3, #0
 8001662:	d107      	bne.n	8001674 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001664:	4b31      	ldr	r3, [pc, #196]	; (800172c <HAL_RCC_GetSysClockFreq+0x108>)
 8001666:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800166a:	0a1b      	lsrs	r3, r3, #8
 800166c:	f003 030f 	and.w	r3, r3, #15
 8001670:	61fb      	str	r3, [r7, #28]
 8001672:	e005      	b.n	8001680 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001674:	4b2d      	ldr	r3, [pc, #180]	; (800172c <HAL_RCC_GetSysClockFreq+0x108>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	091b      	lsrs	r3, r3, #4
 800167a:	f003 030f 	and.w	r3, r3, #15
 800167e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001680:	4a2b      	ldr	r2, [pc, #172]	; (8001730 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001688:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d10d      	bne.n	80016ac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001694:	e00a      	b.n	80016ac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	2b04      	cmp	r3, #4
 800169a:	d102      	bne.n	80016a2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800169c:	4b25      	ldr	r3, [pc, #148]	; (8001734 <HAL_RCC_GetSysClockFreq+0x110>)
 800169e:	61bb      	str	r3, [r7, #24]
 80016a0:	e004      	b.n	80016ac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	2b08      	cmp	r3, #8
 80016a6:	d101      	bne.n	80016ac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80016a8:	4b23      	ldr	r3, [pc, #140]	; (8001738 <HAL_RCC_GetSysClockFreq+0x114>)
 80016aa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	2b0c      	cmp	r3, #12
 80016b0:	d134      	bne.n	800171c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80016b2:	4b1e      	ldr	r3, [pc, #120]	; (800172c <HAL_RCC_GetSysClockFreq+0x108>)
 80016b4:	68db      	ldr	r3, [r3, #12]
 80016b6:	f003 0303 	and.w	r3, r3, #3
 80016ba:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d003      	beq.n	80016ca <HAL_RCC_GetSysClockFreq+0xa6>
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	2b03      	cmp	r3, #3
 80016c6:	d003      	beq.n	80016d0 <HAL_RCC_GetSysClockFreq+0xac>
 80016c8:	e005      	b.n	80016d6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80016ca:	4b1a      	ldr	r3, [pc, #104]	; (8001734 <HAL_RCC_GetSysClockFreq+0x110>)
 80016cc:	617b      	str	r3, [r7, #20]
      break;
 80016ce:	e005      	b.n	80016dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80016d0:	4b19      	ldr	r3, [pc, #100]	; (8001738 <HAL_RCC_GetSysClockFreq+0x114>)
 80016d2:	617b      	str	r3, [r7, #20]
      break;
 80016d4:	e002      	b.n	80016dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	617b      	str	r3, [r7, #20]
      break;
 80016da:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80016dc:	4b13      	ldr	r3, [pc, #76]	; (800172c <HAL_RCC_GetSysClockFreq+0x108>)
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	091b      	lsrs	r3, r3, #4
 80016e2:	f003 0307 	and.w	r3, r3, #7
 80016e6:	3301      	adds	r3, #1
 80016e8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80016ea:	4b10      	ldr	r3, [pc, #64]	; (800172c <HAL_RCC_GetSysClockFreq+0x108>)
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	0a1b      	lsrs	r3, r3, #8
 80016f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80016f4:	697a      	ldr	r2, [r7, #20]
 80016f6:	fb03 f202 	mul.w	r2, r3, r2
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001700:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001702:	4b0a      	ldr	r3, [pc, #40]	; (800172c <HAL_RCC_GetSysClockFreq+0x108>)
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	0e5b      	lsrs	r3, r3, #25
 8001708:	f003 0303 	and.w	r3, r3, #3
 800170c:	3301      	adds	r3, #1
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001712:	697a      	ldr	r2, [r7, #20]
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	fbb2 f3f3 	udiv	r3, r2, r3
 800171a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800171c:	69bb      	ldr	r3, [r7, #24]
}
 800171e:	4618      	mov	r0, r3
 8001720:	3724      	adds	r7, #36	; 0x24
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	40021000 	.word	0x40021000
 8001730:	08002748 	.word	0x08002748
 8001734:	00f42400 	.word	0x00f42400
 8001738:	007a1200 	.word	0x007a1200

0800173c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001744:	2300      	movs	r3, #0
 8001746:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001748:	4b2a      	ldr	r3, [pc, #168]	; (80017f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800174a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800174c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d003      	beq.n	800175c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001754:	f7ff fa26 	bl	8000ba4 <HAL_PWREx_GetVoltageRange>
 8001758:	6178      	str	r0, [r7, #20]
 800175a:	e014      	b.n	8001786 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800175c:	4b25      	ldr	r3, [pc, #148]	; (80017f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800175e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001760:	4a24      	ldr	r2, [pc, #144]	; (80017f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001762:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001766:	6593      	str	r3, [r2, #88]	; 0x58
 8001768:	4b22      	ldr	r3, [pc, #136]	; (80017f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800176a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800176c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001774:	f7ff fa16 	bl	8000ba4 <HAL_PWREx_GetVoltageRange>
 8001778:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800177a:	4b1e      	ldr	r3, [pc, #120]	; (80017f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800177c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800177e:	4a1d      	ldr	r2, [pc, #116]	; (80017f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001780:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001784:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800178c:	d10b      	bne.n	80017a6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2b80      	cmp	r3, #128	; 0x80
 8001792:	d919      	bls.n	80017c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2ba0      	cmp	r3, #160	; 0xa0
 8001798:	d902      	bls.n	80017a0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800179a:	2302      	movs	r3, #2
 800179c:	613b      	str	r3, [r7, #16]
 800179e:	e013      	b.n	80017c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80017a0:	2301      	movs	r3, #1
 80017a2:	613b      	str	r3, [r7, #16]
 80017a4:	e010      	b.n	80017c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2b80      	cmp	r3, #128	; 0x80
 80017aa:	d902      	bls.n	80017b2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80017ac:	2303      	movs	r3, #3
 80017ae:	613b      	str	r3, [r7, #16]
 80017b0:	e00a      	b.n	80017c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2b80      	cmp	r3, #128	; 0x80
 80017b6:	d102      	bne.n	80017be <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80017b8:	2302      	movs	r3, #2
 80017ba:	613b      	str	r3, [r7, #16]
 80017bc:	e004      	b.n	80017c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2b70      	cmp	r3, #112	; 0x70
 80017c2:	d101      	bne.n	80017c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80017c4:	2301      	movs	r3, #1
 80017c6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80017c8:	4b0b      	ldr	r3, [pc, #44]	; (80017f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f023 0207 	bic.w	r2, r3, #7
 80017d0:	4909      	ldr	r1, [pc, #36]	; (80017f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80017d8:	4b07      	ldr	r3, [pc, #28]	; (80017f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0307 	and.w	r3, r3, #7
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d001      	beq.n	80017ea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e000      	b.n	80017ec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80017ea:	2300      	movs	r3, #0
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3718      	adds	r7, #24
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	40021000 	.word	0x40021000
 80017f8:	40022000 	.word	0x40022000

080017fc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d101      	bne.n	800180e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e049      	b.n	80018a2 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001814:	b2db      	uxtb	r3, r3
 8001816:	2b00      	cmp	r3, #0
 8001818:	d106      	bne.n	8001828 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f7fe fdc6 	bl	80003b4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2202      	movs	r2, #2
 800182c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	3304      	adds	r3, #4
 8001838:	4619      	mov	r1, r3
 800183a:	4610      	mov	r0, r2
 800183c:	f000 fb08 	bl	8001e50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2201      	movs	r2, #1
 8001844:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2201      	movs	r2, #1
 800184c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2201      	movs	r2, #1
 8001854:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2201      	movs	r2, #1
 800185c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2201      	movs	r2, #1
 8001864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2201      	movs	r2, #1
 800186c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2201      	movs	r2, #1
 8001874:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2201      	movs	r2, #1
 800187c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2201      	movs	r2, #1
 8001884:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2201      	movs	r2, #1
 800188c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2201      	movs	r2, #1
 8001894:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2201      	movs	r2, #1
 800189c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
	...

080018ac <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d109      	bne.n	80018d0 <HAL_TIM_OC_Start+0x24>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	bf14      	ite	ne
 80018c8:	2301      	movne	r3, #1
 80018ca:	2300      	moveq	r3, #0
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	e03c      	b.n	800194a <HAL_TIM_OC_Start+0x9e>
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	2b04      	cmp	r3, #4
 80018d4:	d109      	bne.n	80018ea <HAL_TIM_OC_Start+0x3e>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	2b01      	cmp	r3, #1
 80018e0:	bf14      	ite	ne
 80018e2:	2301      	movne	r3, #1
 80018e4:	2300      	moveq	r3, #0
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	e02f      	b.n	800194a <HAL_TIM_OC_Start+0x9e>
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	2b08      	cmp	r3, #8
 80018ee:	d109      	bne.n	8001904 <HAL_TIM_OC_Start+0x58>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	bf14      	ite	ne
 80018fc:	2301      	movne	r3, #1
 80018fe:	2300      	moveq	r3, #0
 8001900:	b2db      	uxtb	r3, r3
 8001902:	e022      	b.n	800194a <HAL_TIM_OC_Start+0x9e>
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	2b0c      	cmp	r3, #12
 8001908:	d109      	bne.n	800191e <HAL_TIM_OC_Start+0x72>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001910:	b2db      	uxtb	r3, r3
 8001912:	2b01      	cmp	r3, #1
 8001914:	bf14      	ite	ne
 8001916:	2301      	movne	r3, #1
 8001918:	2300      	moveq	r3, #0
 800191a:	b2db      	uxtb	r3, r3
 800191c:	e015      	b.n	800194a <HAL_TIM_OC_Start+0x9e>
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	2b10      	cmp	r3, #16
 8001922:	d109      	bne.n	8001938 <HAL_TIM_OC_Start+0x8c>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800192a:	b2db      	uxtb	r3, r3
 800192c:	2b01      	cmp	r3, #1
 800192e:	bf14      	ite	ne
 8001930:	2301      	movne	r3, #1
 8001932:	2300      	moveq	r3, #0
 8001934:	b2db      	uxtb	r3, r3
 8001936:	e008      	b.n	800194a <HAL_TIM_OC_Start+0x9e>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800193e:	b2db      	uxtb	r3, r3
 8001940:	2b01      	cmp	r3, #1
 8001942:	bf14      	ite	ne
 8001944:	2301      	movne	r3, #1
 8001946:	2300      	moveq	r3, #0
 8001948:	b2db      	uxtb	r3, r3
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e09c      	b.n	8001a8c <HAL_TIM_OC_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d104      	bne.n	8001962 <HAL_TIM_OC_Start+0xb6>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2202      	movs	r2, #2
 800195c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001960:	e023      	b.n	80019aa <HAL_TIM_OC_Start+0xfe>
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	2b04      	cmp	r3, #4
 8001966:	d104      	bne.n	8001972 <HAL_TIM_OC_Start+0xc6>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2202      	movs	r2, #2
 800196c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001970:	e01b      	b.n	80019aa <HAL_TIM_OC_Start+0xfe>
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	2b08      	cmp	r3, #8
 8001976:	d104      	bne.n	8001982 <HAL_TIM_OC_Start+0xd6>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2202      	movs	r2, #2
 800197c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001980:	e013      	b.n	80019aa <HAL_TIM_OC_Start+0xfe>
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	2b0c      	cmp	r3, #12
 8001986:	d104      	bne.n	8001992 <HAL_TIM_OC_Start+0xe6>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2202      	movs	r2, #2
 800198c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001990:	e00b      	b.n	80019aa <HAL_TIM_OC_Start+0xfe>
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	2b10      	cmp	r3, #16
 8001996:	d104      	bne.n	80019a2 <HAL_TIM_OC_Start+0xf6>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2202      	movs	r2, #2
 800199c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80019a0:	e003      	b.n	80019aa <HAL_TIM_OC_Start+0xfe>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2202      	movs	r2, #2
 80019a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2201      	movs	r2, #1
 80019b0:	6839      	ldr	r1, [r7, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f000 fdbc 	bl	8002530 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a35      	ldr	r2, [pc, #212]	; (8001a94 <HAL_TIM_OC_Start+0x1e8>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d013      	beq.n	80019ea <HAL_TIM_OC_Start+0x13e>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a34      	ldr	r2, [pc, #208]	; (8001a98 <HAL_TIM_OC_Start+0x1ec>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d00e      	beq.n	80019ea <HAL_TIM_OC_Start+0x13e>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a32      	ldr	r2, [pc, #200]	; (8001a9c <HAL_TIM_OC_Start+0x1f0>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d009      	beq.n	80019ea <HAL_TIM_OC_Start+0x13e>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a31      	ldr	r2, [pc, #196]	; (8001aa0 <HAL_TIM_OC_Start+0x1f4>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d004      	beq.n	80019ea <HAL_TIM_OC_Start+0x13e>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a2f      	ldr	r2, [pc, #188]	; (8001aa4 <HAL_TIM_OC_Start+0x1f8>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d101      	bne.n	80019ee <HAL_TIM_OC_Start+0x142>
 80019ea:	2301      	movs	r3, #1
 80019ec:	e000      	b.n	80019f0 <HAL_TIM_OC_Start+0x144>
 80019ee:	2300      	movs	r3, #0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d007      	beq.n	8001a04 <HAL_TIM_OC_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a02:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a22      	ldr	r2, [pc, #136]	; (8001a94 <HAL_TIM_OC_Start+0x1e8>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d01d      	beq.n	8001a4a <HAL_TIM_OC_Start+0x19e>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a16:	d018      	beq.n	8001a4a <HAL_TIM_OC_Start+0x19e>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a22      	ldr	r2, [pc, #136]	; (8001aa8 <HAL_TIM_OC_Start+0x1fc>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d013      	beq.n	8001a4a <HAL_TIM_OC_Start+0x19e>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a21      	ldr	r2, [pc, #132]	; (8001aac <HAL_TIM_OC_Start+0x200>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d00e      	beq.n	8001a4a <HAL_TIM_OC_Start+0x19e>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a1f      	ldr	r2, [pc, #124]	; (8001ab0 <HAL_TIM_OC_Start+0x204>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d009      	beq.n	8001a4a <HAL_TIM_OC_Start+0x19e>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a17      	ldr	r2, [pc, #92]	; (8001a98 <HAL_TIM_OC_Start+0x1ec>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d004      	beq.n	8001a4a <HAL_TIM_OC_Start+0x19e>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a15      	ldr	r2, [pc, #84]	; (8001a9c <HAL_TIM_OC_Start+0x1f0>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d115      	bne.n	8001a76 <HAL_TIM_OC_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	689a      	ldr	r2, [r3, #8]
 8001a50:	4b18      	ldr	r3, [pc, #96]	; (8001ab4 <HAL_TIM_OC_Start+0x208>)
 8001a52:	4013      	ands	r3, r2
 8001a54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2b06      	cmp	r3, #6
 8001a5a:	d015      	beq.n	8001a88 <HAL_TIM_OC_Start+0x1dc>
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a62:	d011      	beq.n	8001a88 <HAL_TIM_OC_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f042 0201 	orr.w	r2, r2, #1
 8001a72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a74:	e008      	b.n	8001a88 <HAL_TIM_OC_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f042 0201 	orr.w	r2, r2, #1
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	e000      	b.n	8001a8a <HAL_TIM_OC_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a88:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001a8a:	2300      	movs	r3, #0
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3710      	adds	r7, #16
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	40012c00 	.word	0x40012c00
 8001a98:	40013400 	.word	0x40013400
 8001a9c:	40014000 	.word	0x40014000
 8001aa0:	40014400 	.word	0x40014400
 8001aa4:	40014800 	.word	0x40014800
 8001aa8:	40000400 	.word	0x40000400
 8001aac:	40000800 	.word	0x40000800
 8001ab0:	40000c00 	.word	0x40000c00
 8001ab4:	00010007 	.word	0x00010007

08001ab8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d122      	bne.n	8001b14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	f003 0302 	and.w	r3, r3, #2
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d11b      	bne.n	8001b14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f06f 0202 	mvn.w	r2, #2
 8001ae4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	699b      	ldr	r3, [r3, #24]
 8001af2:	f003 0303 	and.w	r3, r3, #3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d003      	beq.n	8001b02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f000 f98a 	bl	8001e14 <HAL_TIM_IC_CaptureCallback>
 8001b00:	e005      	b.n	8001b0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f000 f97c 	bl	8001e00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f000 f98d 	bl	8001e28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	f003 0304 	and.w	r3, r3, #4
 8001b1e:	2b04      	cmp	r3, #4
 8001b20:	d122      	bne.n	8001b68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	f003 0304 	and.w	r3, r3, #4
 8001b2c:	2b04      	cmp	r3, #4
 8001b2e:	d11b      	bne.n	8001b68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f06f 0204 	mvn.w	r2, #4
 8001b38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2202      	movs	r2, #2
 8001b3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	699b      	ldr	r3, [r3, #24]
 8001b46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d003      	beq.n	8001b56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f000 f960 	bl	8001e14 <HAL_TIM_IC_CaptureCallback>
 8001b54:	e005      	b.n	8001b62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f000 f952 	bl	8001e00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f000 f963 	bl	8001e28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	f003 0308 	and.w	r3, r3, #8
 8001b72:	2b08      	cmp	r3, #8
 8001b74:	d122      	bne.n	8001bbc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	f003 0308 	and.w	r3, r3, #8
 8001b80:	2b08      	cmp	r3, #8
 8001b82:	d11b      	bne.n	8001bbc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f06f 0208 	mvn.w	r2, #8
 8001b8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2204      	movs	r2, #4
 8001b92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	69db      	ldr	r3, [r3, #28]
 8001b9a:	f003 0303 	and.w	r3, r3, #3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d003      	beq.n	8001baa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f000 f936 	bl	8001e14 <HAL_TIM_IC_CaptureCallback>
 8001ba8:	e005      	b.n	8001bb6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f000 f928 	bl	8001e00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f000 f939 	bl	8001e28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	691b      	ldr	r3, [r3, #16]
 8001bc2:	f003 0310 	and.w	r3, r3, #16
 8001bc6:	2b10      	cmp	r3, #16
 8001bc8:	d122      	bne.n	8001c10 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	f003 0310 	and.w	r3, r3, #16
 8001bd4:	2b10      	cmp	r3, #16
 8001bd6:	d11b      	bne.n	8001c10 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f06f 0210 	mvn.w	r2, #16
 8001be0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2208      	movs	r2, #8
 8001be6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	69db      	ldr	r3, [r3, #28]
 8001bee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d003      	beq.n	8001bfe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 f90c 	bl	8001e14 <HAL_TIM_IC_CaptureCallback>
 8001bfc:	e005      	b.n	8001c0a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f000 f8fe 	bl	8001e00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f000 f90f 	bl	8001e28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	691b      	ldr	r3, [r3, #16]
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d10e      	bne.n	8001c3c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	f003 0301 	and.w	r3, r3, #1
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d107      	bne.n	8001c3c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f06f 0201 	mvn.w	r2, #1
 8001c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 f8d8 	bl	8001dec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c46:	2b80      	cmp	r3, #128	; 0x80
 8001c48:	d10e      	bne.n	8001c68 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c54:	2b80      	cmp	r3, #128	; 0x80
 8001c56:	d107      	bne.n	8001c68 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 fd1c 	bl	80026a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	691b      	ldr	r3, [r3, #16]
 8001c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c76:	d10e      	bne.n	8001c96 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c82:	2b80      	cmp	r3, #128	; 0x80
 8001c84:	d107      	bne.n	8001c96 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001c8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f000 fd0f 	bl	80026b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	691b      	ldr	r3, [r3, #16]
 8001c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ca0:	2b40      	cmp	r3, #64	; 0x40
 8001ca2:	d10e      	bne.n	8001cc2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cae:	2b40      	cmp	r3, #64	; 0x40
 8001cb0:	d107      	bne.n	8001cc2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001cba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f000 f8bd 	bl	8001e3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	691b      	ldr	r3, [r3, #16]
 8001cc8:	f003 0320 	and.w	r3, r3, #32
 8001ccc:	2b20      	cmp	r3, #32
 8001cce:	d10e      	bne.n	8001cee <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	f003 0320 	and.w	r3, r3, #32
 8001cda:	2b20      	cmp	r3, #32
 8001cdc:	d107      	bne.n	8001cee <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f06f 0220 	mvn.w	r2, #32
 8001ce6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f000 fccf 	bl	800268c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001cee:	bf00      	nop
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
	...

08001cf8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d04:	2300      	movs	r3, #0
 8001d06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d101      	bne.n	8001d16 <HAL_TIM_OC_ConfigChannel+0x1e>
 8001d12:	2302      	movs	r3, #2
 8001d14:	e066      	b.n	8001de4 <HAL_TIM_OC_ConfigChannel+0xec>
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2b14      	cmp	r3, #20
 8001d22:	d857      	bhi.n	8001dd4 <HAL_TIM_OC_ConfigChannel+0xdc>
 8001d24:	a201      	add	r2, pc, #4	; (adr r2, 8001d2c <HAL_TIM_OC_ConfigChannel+0x34>)
 8001d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d2a:	bf00      	nop
 8001d2c:	08001d81 	.word	0x08001d81
 8001d30:	08001dd5 	.word	0x08001dd5
 8001d34:	08001dd5 	.word	0x08001dd5
 8001d38:	08001dd5 	.word	0x08001dd5
 8001d3c:	08001d8f 	.word	0x08001d8f
 8001d40:	08001dd5 	.word	0x08001dd5
 8001d44:	08001dd5 	.word	0x08001dd5
 8001d48:	08001dd5 	.word	0x08001dd5
 8001d4c:	08001d9d 	.word	0x08001d9d
 8001d50:	08001dd5 	.word	0x08001dd5
 8001d54:	08001dd5 	.word	0x08001dd5
 8001d58:	08001dd5 	.word	0x08001dd5
 8001d5c:	08001dab 	.word	0x08001dab
 8001d60:	08001dd5 	.word	0x08001dd5
 8001d64:	08001dd5 	.word	0x08001dd5
 8001d68:	08001dd5 	.word	0x08001dd5
 8001d6c:	08001db9 	.word	0x08001db9
 8001d70:	08001dd5 	.word	0x08001dd5
 8001d74:	08001dd5 	.word	0x08001dd5
 8001d78:	08001dd5 	.word	0x08001dd5
 8001d7c:	08001dc7 	.word	0x08001dc7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	68b9      	ldr	r1, [r7, #8]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f000 f8fc 	bl	8001f84 <TIM_OC1_SetConfig>
      break;
 8001d8c:	e025      	b.n	8001dda <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	68b9      	ldr	r1, [r7, #8]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f000 f985 	bl	80020a4 <TIM_OC2_SetConfig>
      break;
 8001d9a:	e01e      	b.n	8001dda <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	68b9      	ldr	r1, [r7, #8]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f000 fa08 	bl	80021b8 <TIM_OC3_SetConfig>
      break;
 8001da8:	e017      	b.n	8001dda <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	68b9      	ldr	r1, [r7, #8]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f000 fa89 	bl	80022c8 <TIM_OC4_SetConfig>
      break;
 8001db6:	e010      	b.n	8001dda <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	68b9      	ldr	r1, [r7, #8]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f000 faec 	bl	800239c <TIM_OC5_SetConfig>
      break;
 8001dc4:	e009      	b.n	8001dda <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	68b9      	ldr	r1, [r7, #8]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f000 fb49 	bl	8002464 <TIM_OC6_SetConfig>
      break;
 8001dd2:	e002      	b.n	8001dda <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	75fb      	strb	r3, [r7, #23]
      break;
 8001dd8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001de2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3718      	adds	r7, #24
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001df4:	bf00      	nop
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e1c:	bf00      	nop
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b085      	sub	sp, #20
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	4a40      	ldr	r2, [pc, #256]	; (8001f64 <TIM_Base_SetConfig+0x114>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d013      	beq.n	8001e90 <TIM_Base_SetConfig+0x40>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e6e:	d00f      	beq.n	8001e90 <TIM_Base_SetConfig+0x40>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4a3d      	ldr	r2, [pc, #244]	; (8001f68 <TIM_Base_SetConfig+0x118>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d00b      	beq.n	8001e90 <TIM_Base_SetConfig+0x40>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4a3c      	ldr	r2, [pc, #240]	; (8001f6c <TIM_Base_SetConfig+0x11c>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d007      	beq.n	8001e90 <TIM_Base_SetConfig+0x40>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4a3b      	ldr	r2, [pc, #236]	; (8001f70 <TIM_Base_SetConfig+0x120>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d003      	beq.n	8001e90 <TIM_Base_SetConfig+0x40>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4a3a      	ldr	r2, [pc, #232]	; (8001f74 <TIM_Base_SetConfig+0x124>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d108      	bne.n	8001ea2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a2f      	ldr	r2, [pc, #188]	; (8001f64 <TIM_Base_SetConfig+0x114>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d01f      	beq.n	8001eea <TIM_Base_SetConfig+0x9a>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eb0:	d01b      	beq.n	8001eea <TIM_Base_SetConfig+0x9a>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a2c      	ldr	r2, [pc, #176]	; (8001f68 <TIM_Base_SetConfig+0x118>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d017      	beq.n	8001eea <TIM_Base_SetConfig+0x9a>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a2b      	ldr	r2, [pc, #172]	; (8001f6c <TIM_Base_SetConfig+0x11c>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d013      	beq.n	8001eea <TIM_Base_SetConfig+0x9a>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a2a      	ldr	r2, [pc, #168]	; (8001f70 <TIM_Base_SetConfig+0x120>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d00f      	beq.n	8001eea <TIM_Base_SetConfig+0x9a>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a29      	ldr	r2, [pc, #164]	; (8001f74 <TIM_Base_SetConfig+0x124>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d00b      	beq.n	8001eea <TIM_Base_SetConfig+0x9a>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a28      	ldr	r2, [pc, #160]	; (8001f78 <TIM_Base_SetConfig+0x128>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d007      	beq.n	8001eea <TIM_Base_SetConfig+0x9a>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a27      	ldr	r2, [pc, #156]	; (8001f7c <TIM_Base_SetConfig+0x12c>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d003      	beq.n	8001eea <TIM_Base_SetConfig+0x9a>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a26      	ldr	r2, [pc, #152]	; (8001f80 <TIM_Base_SetConfig+0x130>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d108      	bne.n	8001efc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ef0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	68fa      	ldr	r2, [r7, #12]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	695b      	ldr	r3, [r3, #20]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	68fa      	ldr	r2, [r7, #12]
 8001f0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	689a      	ldr	r2, [r3, #8]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	4a10      	ldr	r2, [pc, #64]	; (8001f64 <TIM_Base_SetConfig+0x114>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d00f      	beq.n	8001f48 <TIM_Base_SetConfig+0xf8>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4a12      	ldr	r2, [pc, #72]	; (8001f74 <TIM_Base_SetConfig+0x124>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d00b      	beq.n	8001f48 <TIM_Base_SetConfig+0xf8>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4a11      	ldr	r2, [pc, #68]	; (8001f78 <TIM_Base_SetConfig+0x128>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d007      	beq.n	8001f48 <TIM_Base_SetConfig+0xf8>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a10      	ldr	r2, [pc, #64]	; (8001f7c <TIM_Base_SetConfig+0x12c>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d003      	beq.n	8001f48 <TIM_Base_SetConfig+0xf8>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4a0f      	ldr	r2, [pc, #60]	; (8001f80 <TIM_Base_SetConfig+0x130>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d103      	bne.n	8001f50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	691a      	ldr	r2, [r3, #16]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	615a      	str	r2, [r3, #20]
}
 8001f56:	bf00      	nop
 8001f58:	3714      	adds	r7, #20
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	40012c00 	.word	0x40012c00
 8001f68:	40000400 	.word	0x40000400
 8001f6c:	40000800 	.word	0x40000800
 8001f70:	40000c00 	.word	0x40000c00
 8001f74:	40013400 	.word	0x40013400
 8001f78:	40014000 	.word	0x40014000
 8001f7c:	40014400 	.word	0x40014400
 8001f80:	40014800 	.word	0x40014800

08001f84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b087      	sub	sp, #28
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a1b      	ldr	r3, [r3, #32]
 8001f92:	f023 0201 	bic.w	r2, r3, #1
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6a1b      	ldr	r3, [r3, #32]
 8001f9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	699b      	ldr	r3, [r3, #24]
 8001faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f023 0303 	bic.w	r3, r3, #3
 8001fbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	f023 0302 	bic.w	r3, r3, #2
 8001fd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	697a      	ldr	r2, [r7, #20]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a2c      	ldr	r2, [pc, #176]	; (8002090 <TIM_OC1_SetConfig+0x10c>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d00f      	beq.n	8002004 <TIM_OC1_SetConfig+0x80>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a2b      	ldr	r2, [pc, #172]	; (8002094 <TIM_OC1_SetConfig+0x110>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d00b      	beq.n	8002004 <TIM_OC1_SetConfig+0x80>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a2a      	ldr	r2, [pc, #168]	; (8002098 <TIM_OC1_SetConfig+0x114>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d007      	beq.n	8002004 <TIM_OC1_SetConfig+0x80>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4a29      	ldr	r2, [pc, #164]	; (800209c <TIM_OC1_SetConfig+0x118>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d003      	beq.n	8002004 <TIM_OC1_SetConfig+0x80>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a28      	ldr	r2, [pc, #160]	; (80020a0 <TIM_OC1_SetConfig+0x11c>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d10c      	bne.n	800201e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	f023 0308 	bic.w	r3, r3, #8
 800200a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	697a      	ldr	r2, [r7, #20]
 8002012:	4313      	orrs	r3, r2
 8002014:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	f023 0304 	bic.w	r3, r3, #4
 800201c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a1b      	ldr	r2, [pc, #108]	; (8002090 <TIM_OC1_SetConfig+0x10c>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d00f      	beq.n	8002046 <TIM_OC1_SetConfig+0xc2>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a1a      	ldr	r2, [pc, #104]	; (8002094 <TIM_OC1_SetConfig+0x110>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d00b      	beq.n	8002046 <TIM_OC1_SetConfig+0xc2>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a19      	ldr	r2, [pc, #100]	; (8002098 <TIM_OC1_SetConfig+0x114>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d007      	beq.n	8002046 <TIM_OC1_SetConfig+0xc2>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a18      	ldr	r2, [pc, #96]	; (800209c <TIM_OC1_SetConfig+0x118>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d003      	beq.n	8002046 <TIM_OC1_SetConfig+0xc2>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a17      	ldr	r2, [pc, #92]	; (80020a0 <TIM_OC1_SetConfig+0x11c>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d111      	bne.n	800206a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800204c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002054:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	695b      	ldr	r3, [r3, #20]
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	4313      	orrs	r3, r2
 800205e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	4313      	orrs	r3, r2
 8002068:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	693a      	ldr	r2, [r7, #16]
 800206e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685a      	ldr	r2, [r3, #4]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	697a      	ldr	r2, [r7, #20]
 8002082:	621a      	str	r2, [r3, #32]
}
 8002084:	bf00      	nop
 8002086:	371c      	adds	r7, #28
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr
 8002090:	40012c00 	.word	0x40012c00
 8002094:	40013400 	.word	0x40013400
 8002098:	40014000 	.word	0x40014000
 800209c:	40014400 	.word	0x40014400
 80020a0:	40014800 	.word	0x40014800

080020a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b087      	sub	sp, #28
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a1b      	ldr	r3, [r3, #32]
 80020b2:	f023 0210 	bic.w	r2, r3, #16
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	021b      	lsls	r3, r3, #8
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	f023 0320 	bic.w	r3, r3, #32
 80020f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	011b      	lsls	r3, r3, #4
 80020fa:	697a      	ldr	r2, [r7, #20]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4a28      	ldr	r2, [pc, #160]	; (80021a4 <TIM_OC2_SetConfig+0x100>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d003      	beq.n	8002110 <TIM_OC2_SetConfig+0x6c>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4a27      	ldr	r2, [pc, #156]	; (80021a8 <TIM_OC2_SetConfig+0x104>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d10d      	bne.n	800212c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002116:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	011b      	lsls	r3, r3, #4
 800211e:	697a      	ldr	r2, [r7, #20]
 8002120:	4313      	orrs	r3, r2
 8002122:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800212a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a1d      	ldr	r2, [pc, #116]	; (80021a4 <TIM_OC2_SetConfig+0x100>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d00f      	beq.n	8002154 <TIM_OC2_SetConfig+0xb0>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4a1c      	ldr	r2, [pc, #112]	; (80021a8 <TIM_OC2_SetConfig+0x104>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d00b      	beq.n	8002154 <TIM_OC2_SetConfig+0xb0>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a1b      	ldr	r2, [pc, #108]	; (80021ac <TIM_OC2_SetConfig+0x108>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d007      	beq.n	8002154 <TIM_OC2_SetConfig+0xb0>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a1a      	ldr	r2, [pc, #104]	; (80021b0 <TIM_OC2_SetConfig+0x10c>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d003      	beq.n	8002154 <TIM_OC2_SetConfig+0xb0>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a19      	ldr	r2, [pc, #100]	; (80021b4 <TIM_OC2_SetConfig+0x110>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d113      	bne.n	800217c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800215a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002162:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	695b      	ldr	r3, [r3, #20]
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	693a      	ldr	r2, [r7, #16]
 800216c:	4313      	orrs	r3, r2
 800216e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	4313      	orrs	r3, r2
 800217a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685a      	ldr	r2, [r3, #4]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	697a      	ldr	r2, [r7, #20]
 8002194:	621a      	str	r2, [r3, #32]
}
 8002196:	bf00      	nop
 8002198:	371c      	adds	r7, #28
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	40012c00 	.word	0x40012c00
 80021a8:	40013400 	.word	0x40013400
 80021ac:	40014000 	.word	0x40014000
 80021b0:	40014400 	.word	0x40014400
 80021b4:	40014800 	.word	0x40014800

080021b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b087      	sub	sp, #28
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a1b      	ldr	r3, [r3, #32]
 80021c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a1b      	ldr	r3, [r3, #32]
 80021d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	69db      	ldr	r3, [r3, #28]
 80021de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f023 0303 	bic.w	r3, r3, #3
 80021f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002204:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	021b      	lsls	r3, r3, #8
 800220c:	697a      	ldr	r2, [r7, #20]
 800220e:	4313      	orrs	r3, r2
 8002210:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a27      	ldr	r2, [pc, #156]	; (80022b4 <TIM_OC3_SetConfig+0xfc>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d003      	beq.n	8002222 <TIM_OC3_SetConfig+0x6a>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a26      	ldr	r2, [pc, #152]	; (80022b8 <TIM_OC3_SetConfig+0x100>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d10d      	bne.n	800223e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002228:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	021b      	lsls	r3, r3, #8
 8002230:	697a      	ldr	r2, [r7, #20]
 8002232:	4313      	orrs	r3, r2
 8002234:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800223c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a1c      	ldr	r2, [pc, #112]	; (80022b4 <TIM_OC3_SetConfig+0xfc>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d00f      	beq.n	8002266 <TIM_OC3_SetConfig+0xae>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a1b      	ldr	r2, [pc, #108]	; (80022b8 <TIM_OC3_SetConfig+0x100>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d00b      	beq.n	8002266 <TIM_OC3_SetConfig+0xae>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a1a      	ldr	r2, [pc, #104]	; (80022bc <TIM_OC3_SetConfig+0x104>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d007      	beq.n	8002266 <TIM_OC3_SetConfig+0xae>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a19      	ldr	r2, [pc, #100]	; (80022c0 <TIM_OC3_SetConfig+0x108>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d003      	beq.n	8002266 <TIM_OC3_SetConfig+0xae>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a18      	ldr	r2, [pc, #96]	; (80022c4 <TIM_OC3_SetConfig+0x10c>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d113      	bne.n	800228e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800226c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002274:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	011b      	lsls	r3, r3, #4
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	4313      	orrs	r3, r2
 8002280:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	011b      	lsls	r3, r3, #4
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	4313      	orrs	r3, r2
 800228c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685a      	ldr	r2, [r3, #4]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	697a      	ldr	r2, [r7, #20]
 80022a6:	621a      	str	r2, [r3, #32]
}
 80022a8:	bf00      	nop
 80022aa:	371c      	adds	r7, #28
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr
 80022b4:	40012c00 	.word	0x40012c00
 80022b8:	40013400 	.word	0x40013400
 80022bc:	40014000 	.word	0x40014000
 80022c0:	40014400 	.word	0x40014400
 80022c4:	40014800 	.word	0x40014800

080022c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b087      	sub	sp, #28
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a1b      	ldr	r3, [r3, #32]
 80022d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a1b      	ldr	r3, [r3, #32]
 80022e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	69db      	ldr	r3, [r3, #28]
 80022ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002302:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	021b      	lsls	r3, r3, #8
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	4313      	orrs	r3, r2
 800230e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002316:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	031b      	lsls	r3, r3, #12
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	4313      	orrs	r3, r2
 8002322:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4a18      	ldr	r2, [pc, #96]	; (8002388 <TIM_OC4_SetConfig+0xc0>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d00f      	beq.n	800234c <TIM_OC4_SetConfig+0x84>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4a17      	ldr	r2, [pc, #92]	; (800238c <TIM_OC4_SetConfig+0xc4>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d00b      	beq.n	800234c <TIM_OC4_SetConfig+0x84>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	4a16      	ldr	r2, [pc, #88]	; (8002390 <TIM_OC4_SetConfig+0xc8>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d007      	beq.n	800234c <TIM_OC4_SetConfig+0x84>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	4a15      	ldr	r2, [pc, #84]	; (8002394 <TIM_OC4_SetConfig+0xcc>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d003      	beq.n	800234c <TIM_OC4_SetConfig+0x84>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	4a14      	ldr	r2, [pc, #80]	; (8002398 <TIM_OC4_SetConfig+0xd0>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d109      	bne.n	8002360 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002352:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	695b      	ldr	r3, [r3, #20]
 8002358:	019b      	lsls	r3, r3, #6
 800235a:	697a      	ldr	r2, [r7, #20]
 800235c:	4313      	orrs	r3, r2
 800235e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	697a      	ldr	r2, [r7, #20]
 8002364:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685a      	ldr	r2, [r3, #4]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	621a      	str	r2, [r3, #32]
}
 800237a:	bf00      	nop
 800237c:	371c      	adds	r7, #28
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	40012c00 	.word	0x40012c00
 800238c:	40013400 	.word	0x40013400
 8002390:	40014000 	.word	0x40014000
 8002394:	40014400 	.word	0x40014400
 8002398:	40014800 	.word	0x40014800

0800239c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800239c:	b480      	push	{r7}
 800239e:	b087      	sub	sp, #28
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a1b      	ldr	r3, [r3, #32]
 80023aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a1b      	ldr	r3, [r3, #32]
 80023b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68fa      	ldr	r2, [r7, #12]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80023e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	041b      	lsls	r3, r3, #16
 80023e8:	693a      	ldr	r2, [r7, #16]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a17      	ldr	r2, [pc, #92]	; (8002450 <TIM_OC5_SetConfig+0xb4>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d00f      	beq.n	8002416 <TIM_OC5_SetConfig+0x7a>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a16      	ldr	r2, [pc, #88]	; (8002454 <TIM_OC5_SetConfig+0xb8>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d00b      	beq.n	8002416 <TIM_OC5_SetConfig+0x7a>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a15      	ldr	r2, [pc, #84]	; (8002458 <TIM_OC5_SetConfig+0xbc>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d007      	beq.n	8002416 <TIM_OC5_SetConfig+0x7a>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a14      	ldr	r2, [pc, #80]	; (800245c <TIM_OC5_SetConfig+0xc0>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d003      	beq.n	8002416 <TIM_OC5_SetConfig+0x7a>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a13      	ldr	r2, [pc, #76]	; (8002460 <TIM_OC5_SetConfig+0xc4>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d109      	bne.n	800242a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800241c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	021b      	lsls	r3, r3, #8
 8002424:	697a      	ldr	r2, [r7, #20]
 8002426:	4313      	orrs	r3, r2
 8002428:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	697a      	ldr	r2, [r7, #20]
 800242e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	68fa      	ldr	r2, [r7, #12]
 8002434:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685a      	ldr	r2, [r3, #4]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	621a      	str	r2, [r3, #32]
}
 8002444:	bf00      	nop
 8002446:	371c      	adds	r7, #28
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	40012c00 	.word	0x40012c00
 8002454:	40013400 	.word	0x40013400
 8002458:	40014000 	.word	0x40014000
 800245c:	40014400 	.word	0x40014400
 8002460:	40014800 	.word	0x40014800

08002464 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002464:	b480      	push	{r7}
 8002466:	b087      	sub	sp, #28
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a1b      	ldr	r3, [r3, #32]
 8002472:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a1b      	ldr	r3, [r3, #32]
 800247e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800248a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002492:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002496:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	021b      	lsls	r3, r3, #8
 800249e:	68fa      	ldr	r2, [r7, #12]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80024aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	051b      	lsls	r3, r3, #20
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4a18      	ldr	r2, [pc, #96]	; (800251c <TIM_OC6_SetConfig+0xb8>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d00f      	beq.n	80024e0 <TIM_OC6_SetConfig+0x7c>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	4a17      	ldr	r2, [pc, #92]	; (8002520 <TIM_OC6_SetConfig+0xbc>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d00b      	beq.n	80024e0 <TIM_OC6_SetConfig+0x7c>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4a16      	ldr	r2, [pc, #88]	; (8002524 <TIM_OC6_SetConfig+0xc0>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d007      	beq.n	80024e0 <TIM_OC6_SetConfig+0x7c>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4a15      	ldr	r2, [pc, #84]	; (8002528 <TIM_OC6_SetConfig+0xc4>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d003      	beq.n	80024e0 <TIM_OC6_SetConfig+0x7c>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4a14      	ldr	r2, [pc, #80]	; (800252c <TIM_OC6_SetConfig+0xc8>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d109      	bne.n	80024f4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	695b      	ldr	r3, [r3, #20]
 80024ec:	029b      	lsls	r3, r3, #10
 80024ee:	697a      	ldr	r2, [r7, #20]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	697a      	ldr	r2, [r7, #20]
 80024f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685a      	ldr	r2, [r3, #4]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	621a      	str	r2, [r3, #32]
}
 800250e:	bf00      	nop
 8002510:	371c      	adds	r7, #28
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	40012c00 	.word	0x40012c00
 8002520:	40013400 	.word	0x40013400
 8002524:	40014000 	.word	0x40014000
 8002528:	40014400 	.word	0x40014400
 800252c:	40014800 	.word	0x40014800

08002530 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002530:	b480      	push	{r7}
 8002532:	b087      	sub	sp, #28
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	f003 031f 	and.w	r3, r3, #31
 8002542:	2201      	movs	r2, #1
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6a1a      	ldr	r2, [r3, #32]
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	43db      	mvns	r3, r3
 8002552:	401a      	ands	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6a1a      	ldr	r2, [r3, #32]
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	f003 031f 	and.w	r3, r3, #31
 8002562:	6879      	ldr	r1, [r7, #4]
 8002564:	fa01 f303 	lsl.w	r3, r1, r3
 8002568:	431a      	orrs	r2, r3
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	621a      	str	r2, [r3, #32]
}
 800256e:	bf00      	nop
 8002570:	371c      	adds	r7, #28
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
	...

0800257c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800257c:	b480      	push	{r7}
 800257e:	b085      	sub	sp, #20
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800258c:	2b01      	cmp	r3, #1
 800258e:	d101      	bne.n	8002594 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002590:	2302      	movs	r3, #2
 8002592:	e068      	b.n	8002666 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2202      	movs	r2, #2
 80025a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a2e      	ldr	r2, [pc, #184]	; (8002674 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d004      	beq.n	80025c8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a2d      	ldr	r2, [pc, #180]	; (8002678 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d108      	bne.n	80025da <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80025ce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	68fa      	ldr	r2, [r7, #12]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025e0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68fa      	ldr	r2, [r7, #12]
 80025f2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a1e      	ldr	r2, [pc, #120]	; (8002674 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d01d      	beq.n	800263a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002606:	d018      	beq.n	800263a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a1b      	ldr	r2, [pc, #108]	; (800267c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d013      	beq.n	800263a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a1a      	ldr	r2, [pc, #104]	; (8002680 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d00e      	beq.n	800263a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a18      	ldr	r2, [pc, #96]	; (8002684 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d009      	beq.n	800263a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a13      	ldr	r2, [pc, #76]	; (8002678 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d004      	beq.n	800263a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a14      	ldr	r2, [pc, #80]	; (8002688 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d10c      	bne.n	8002654 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002640:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	68ba      	ldr	r2, [r7, #8]
 8002648:	4313      	orrs	r3, r2
 800264a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	68ba      	ldr	r2, [r7, #8]
 8002652:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3714      	adds	r7, #20
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	40012c00 	.word	0x40012c00
 8002678:	40013400 	.word	0x40013400
 800267c:	40000400 	.word	0x40000400
 8002680:	40000800 	.word	0x40000800
 8002684:	40000c00 	.word	0x40000c00
 8002688:	40014000 	.word	0x40014000

0800268c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80026a8:	bf00      	nop
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80026bc:	bf00      	nop
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <memset>:
 80026c8:	4402      	add	r2, r0
 80026ca:	4603      	mov	r3, r0
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d100      	bne.n	80026d2 <memset+0xa>
 80026d0:	4770      	bx	lr
 80026d2:	f803 1b01 	strb.w	r1, [r3], #1
 80026d6:	e7f9      	b.n	80026cc <memset+0x4>

080026d8 <__libc_init_array>:
 80026d8:	b570      	push	{r4, r5, r6, lr}
 80026da:	4d0d      	ldr	r5, [pc, #52]	; (8002710 <__libc_init_array+0x38>)
 80026dc:	4c0d      	ldr	r4, [pc, #52]	; (8002714 <__libc_init_array+0x3c>)
 80026de:	1b64      	subs	r4, r4, r5
 80026e0:	10a4      	asrs	r4, r4, #2
 80026e2:	2600      	movs	r6, #0
 80026e4:	42a6      	cmp	r6, r4
 80026e6:	d109      	bne.n	80026fc <__libc_init_array+0x24>
 80026e8:	4d0b      	ldr	r5, [pc, #44]	; (8002718 <__libc_init_array+0x40>)
 80026ea:	4c0c      	ldr	r4, [pc, #48]	; (800271c <__libc_init_array+0x44>)
 80026ec:	f000 f818 	bl	8002720 <_init>
 80026f0:	1b64      	subs	r4, r4, r5
 80026f2:	10a4      	asrs	r4, r4, #2
 80026f4:	2600      	movs	r6, #0
 80026f6:	42a6      	cmp	r6, r4
 80026f8:	d105      	bne.n	8002706 <__libc_init_array+0x2e>
 80026fa:	bd70      	pop	{r4, r5, r6, pc}
 80026fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002700:	4798      	blx	r3
 8002702:	3601      	adds	r6, #1
 8002704:	e7ee      	b.n	80026e4 <__libc_init_array+0xc>
 8002706:	f855 3b04 	ldr.w	r3, [r5], #4
 800270a:	4798      	blx	r3
 800270c:	3601      	adds	r6, #1
 800270e:	e7f2      	b.n	80026f6 <__libc_init_array+0x1e>
 8002710:	08002778 	.word	0x08002778
 8002714:	08002778 	.word	0x08002778
 8002718:	08002778 	.word	0x08002778
 800271c:	0800277c 	.word	0x0800277c

08002720 <_init>:
 8002720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002722:	bf00      	nop
 8002724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002726:	bc08      	pop	{r3}
 8002728:	469e      	mov	lr, r3
 800272a:	4770      	bx	lr

0800272c <_fini>:
 800272c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800272e:	bf00      	nop
 8002730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002732:	bc08      	pop	{r3}
 8002734:	469e      	mov	lr, r3
 8002736:	4770      	bx	lr
