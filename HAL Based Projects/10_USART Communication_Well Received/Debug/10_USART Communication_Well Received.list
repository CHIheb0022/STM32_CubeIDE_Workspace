
10_USART Communication_Well Received.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b3c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003cc4  08003cc4  00013cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d0c  08003d0c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003d0c  08003d0c  00013d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d14  08003d14  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d14  08003d14  00013d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d18  08003d18  00013d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003d1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000000c  08003d28  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  08003d28  000200b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bc28  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001cc1  00000000  00000000  0002bca7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000998  00000000  00000000  0002d968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000757  00000000  00000000  0002e300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024f12  00000000  00000000  0002ea57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bff9  00000000  00000000  00053969  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3d58  00000000  00000000  0005f962  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002640  00000000  00000000  001436bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000099  00000000  00000000  00145cfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003cac 	.word	0x08003cac

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003cac 	.word	0x08003cac

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 f9d3 	bl	8000872 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f822 	bl	8000514 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 f8a2 	bl	8000618 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004d4:	f000 f870 	bl	80005b8 <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_UART_Receive_IT(&huart2, RX_buffer, 2);
 80004d8:	2202      	movs	r2, #2
 80004da:	490c      	ldr	r1, [pc, #48]	; (800050c <main+0x48>)
 80004dc:	480c      	ldr	r0, [pc, #48]	; (8000510 <main+0x4c>)
 80004de:	f002 f917 	bl	8002710 <HAL_UART_Receive_IT>
	if ((RX_buffer[0]=='h') && (RX_buffer[1]=='i')) {
 80004e2:	4b0a      	ldr	r3, [pc, #40]	; (800050c <main+0x48>)
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	2b68      	cmp	r3, #104	; 0x68
 80004e8:	d1f6      	bne.n	80004d8 <main+0x14>
 80004ea:	4b08      	ldr	r3, [pc, #32]	; (800050c <main+0x48>)
 80004ec:	785b      	ldrb	r3, [r3, #1]
 80004ee:	2b69      	cmp	r3, #105	; 0x69
 80004f0:	d1f2      	bne.n	80004d8 <main+0x14>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80004f2:	2120      	movs	r1, #32
 80004f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004f8:	f000 fd82 	bl	8001000 <HAL_GPIO_TogglePin>
		RX_buffer[0]=0;
 80004fc:	4b03      	ldr	r3, [pc, #12]	; (800050c <main+0x48>)
 80004fe:	2200      	movs	r2, #0
 8000500:	701a      	strb	r2, [r3, #0]
		RX_buffer[1]=0;// To avoid toggle' in in a loop the Led. // we can not see it changing state
 8000502:	4b02      	ldr	r3, [pc, #8]	; (800050c <main+0x48>)
 8000504:	2200      	movs	r2, #0
 8000506:	705a      	strb	r2, [r3, #1]
	HAL_UART_Receive_IT(&huart2, RX_buffer, 2);
 8000508:	e7e6      	b.n	80004d8 <main+0x14>
 800050a:	bf00      	nop
 800050c:	20000028 	.word	0x20000028
 8000510:	2000002c 	.word	0x2000002c

08000514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b096      	sub	sp, #88	; 0x58
 8000518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051a:	f107 0314 	add.w	r3, r7, #20
 800051e:	2244      	movs	r2, #68	; 0x44
 8000520:	2100      	movs	r1, #0
 8000522:	4618      	mov	r0, r3
 8000524:	f003 fb95 	bl	8003c52 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000528:	463b      	mov	r3, r7
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
 800052e:	605a      	str	r2, [r3, #4]
 8000530:	609a      	str	r2, [r3, #8]
 8000532:	60da      	str	r2, [r3, #12]
 8000534:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000536:	f44f 7000 	mov.w	r0, #512	; 0x200
 800053a:	f000 fd89 	bl	8001050 <HAL_PWREx_ControlVoltageScaling>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000544:	f000 f898 	bl	8000678 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000548:	2310      	movs	r3, #16
 800054a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800054c:	2301      	movs	r3, #1
 800054e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000550:	2300      	movs	r3, #0
 8000552:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000554:	2360      	movs	r3, #96	; 0x60
 8000556:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000558:	2302      	movs	r3, #2
 800055a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800055c:	2301      	movs	r3, #1
 800055e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000560:	2301      	movs	r3, #1
 8000562:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000564:	2328      	movs	r3, #40	; 0x28
 8000566:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000568:	2307      	movs	r3, #7
 800056a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800056c:	2302      	movs	r3, #2
 800056e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000570:	2302      	movs	r3, #2
 8000572:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000574:	f107 0314 	add.w	r3, r7, #20
 8000578:	4618      	mov	r0, r3
 800057a:	f000 fdbf 	bl	80010fc <HAL_RCC_OscConfig>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000584:	f000 f878 	bl	8000678 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000588:	230f      	movs	r3, #15
 800058a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800058c:	2303      	movs	r3, #3
 800058e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000590:	2300      	movs	r3, #0
 8000592:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000594:	2300      	movs	r3, #0
 8000596:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000598:	2300      	movs	r3, #0
 800059a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800059c:	463b      	mov	r3, r7
 800059e:	2104      	movs	r1, #4
 80005a0:	4618      	mov	r0, r3
 80005a2:	f001 f987 	bl	80018b4 <HAL_RCC_ClockConfig>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80005ac:	f000 f864 	bl	8000678 <Error_Handler>
  }
}
 80005b0:	bf00      	nop
 80005b2:	3758      	adds	r7, #88	; 0x58
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005bc:	4b14      	ldr	r3, [pc, #80]	; (8000610 <MX_USART2_UART_Init+0x58>)
 80005be:	4a15      	ldr	r2, [pc, #84]	; (8000614 <MX_USART2_UART_Init+0x5c>)
 80005c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80005c2:	4b13      	ldr	r3, [pc, #76]	; (8000610 <MX_USART2_UART_Init+0x58>)
 80005c4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80005c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005ca:	4b11      	ldr	r3, [pc, #68]	; (8000610 <MX_USART2_UART_Init+0x58>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005d0:	4b0f      	ldr	r3, [pc, #60]	; (8000610 <MX_USART2_UART_Init+0x58>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005d6:	4b0e      	ldr	r3, [pc, #56]	; (8000610 <MX_USART2_UART_Init+0x58>)
 80005d8:	2200      	movs	r2, #0
 80005da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005dc:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <MX_USART2_UART_Init+0x58>)
 80005de:	220c      	movs	r2, #12
 80005e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005e2:	4b0b      	ldr	r3, [pc, #44]	; (8000610 <MX_USART2_UART_Init+0x58>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005e8:	4b09      	ldr	r3, [pc, #36]	; (8000610 <MX_USART2_UART_Init+0x58>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005ee:	4b08      	ldr	r3, [pc, #32]	; (8000610 <MX_USART2_UART_Init+0x58>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005f4:	4b06      	ldr	r3, [pc, #24]	; (8000610 <MX_USART2_UART_Init+0x58>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005fa:	4805      	ldr	r0, [pc, #20]	; (8000610 <MX_USART2_UART_Init+0x58>)
 80005fc:	f002 f83a 	bl	8002674 <HAL_UART_Init>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000606:	f000 f837 	bl	8000678 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800060a:	bf00      	nop
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	2000002c 	.word	0x2000002c
 8000614:	40004400 	.word	0x40004400

08000618 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b086      	sub	sp, #24
 800061c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062c:	4b11      	ldr	r3, [pc, #68]	; (8000674 <MX_GPIO_Init+0x5c>)
 800062e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000630:	4a10      	ldr	r2, [pc, #64]	; (8000674 <MX_GPIO_Init+0x5c>)
 8000632:	f043 0301 	orr.w	r3, r3, #1
 8000636:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000638:	4b0e      	ldr	r3, [pc, #56]	; (8000674 <MX_GPIO_Init+0x5c>)
 800063a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800063c:	f003 0301 	and.w	r3, r3, #1
 8000640:	603b      	str	r3, [r7, #0]
 8000642:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000644:	2200      	movs	r2, #0
 8000646:	2120      	movs	r1, #32
 8000648:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800064c:	f000 fcc0 	bl	8000fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000650:	2320      	movs	r3, #32
 8000652:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000654:	2301      	movs	r3, #1
 8000656:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000658:	2300      	movs	r3, #0
 800065a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065c:	2300      	movs	r3, #0
 800065e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000660:	1d3b      	adds	r3, r7, #4
 8000662:	4619      	mov	r1, r3
 8000664:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000668:	f000 fb08 	bl	8000c7c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800066c:	bf00      	nop
 800066e:	3718      	adds	r7, #24
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	40021000 	.word	0x40021000

08000678 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800067c:	b672      	cpsid	i
}
 800067e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000680:	e7fe      	b.n	8000680 <Error_Handler+0x8>
	...

08000684 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800068a:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <HAL_MspInit+0x44>)
 800068c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800068e:	4a0e      	ldr	r2, [pc, #56]	; (80006c8 <HAL_MspInit+0x44>)
 8000690:	f043 0301 	orr.w	r3, r3, #1
 8000694:	6613      	str	r3, [r2, #96]	; 0x60
 8000696:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <HAL_MspInit+0x44>)
 8000698:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a2:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <HAL_MspInit+0x44>)
 80006a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006a6:	4a08      	ldr	r2, [pc, #32]	; (80006c8 <HAL_MspInit+0x44>)
 80006a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ac:	6593      	str	r3, [r2, #88]	; 0x58
 80006ae:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <HAL_MspInit+0x44>)
 80006b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b6:	603b      	str	r3, [r7, #0]
 80006b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ba:	bf00      	nop
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	40021000 	.word	0x40021000

080006cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b0ac      	sub	sp, #176	; 0xb0
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006e4:	f107 0314 	add.w	r3, r7, #20
 80006e8:	2288      	movs	r2, #136	; 0x88
 80006ea:	2100      	movs	r1, #0
 80006ec:	4618      	mov	r0, r3
 80006ee:	f003 fab0 	bl	8003c52 <memset>
  if(huart->Instance==USART2)
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4a25      	ldr	r2, [pc, #148]	; (800078c <HAL_UART_MspInit+0xc0>)
 80006f8:	4293      	cmp	r3, r2
 80006fa:	d143      	bne.n	8000784 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80006fc:	2302      	movs	r3, #2
 80006fe:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000700:	2300      	movs	r3, #0
 8000702:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000704:	f107 0314 	add.w	r3, r7, #20
 8000708:	4618      	mov	r0, r3
 800070a:	f001 faf7 	bl	8001cfc <HAL_RCCEx_PeriphCLKConfig>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000714:	f7ff ffb0 	bl	8000678 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000718:	4b1d      	ldr	r3, [pc, #116]	; (8000790 <HAL_UART_MspInit+0xc4>)
 800071a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800071c:	4a1c      	ldr	r2, [pc, #112]	; (8000790 <HAL_UART_MspInit+0xc4>)
 800071e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000722:	6593      	str	r3, [r2, #88]	; 0x58
 8000724:	4b1a      	ldr	r3, [pc, #104]	; (8000790 <HAL_UART_MspInit+0xc4>)
 8000726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800072c:	613b      	str	r3, [r7, #16]
 800072e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000730:	4b17      	ldr	r3, [pc, #92]	; (8000790 <HAL_UART_MspInit+0xc4>)
 8000732:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000734:	4a16      	ldr	r2, [pc, #88]	; (8000790 <HAL_UART_MspInit+0xc4>)
 8000736:	f043 0301 	orr.w	r3, r3, #1
 800073a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800073c:	4b14      	ldr	r3, [pc, #80]	; (8000790 <HAL_UART_MspInit+0xc4>)
 800073e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000740:	f003 0301 	and.w	r3, r3, #1
 8000744:	60fb      	str	r3, [r7, #12]
 8000746:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000748:	230c      	movs	r3, #12
 800074a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800074e:	2302      	movs	r3, #2
 8000750:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	2300      	movs	r3, #0
 8000756:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800075a:	2303      	movs	r3, #3
 800075c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000760:	2307      	movs	r3, #7
 8000762:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000766:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800076a:	4619      	mov	r1, r3
 800076c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000770:	f000 fa84 	bl	8000c7c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000774:	2200      	movs	r2, #0
 8000776:	2100      	movs	r1, #0
 8000778:	2026      	movs	r0, #38	; 0x26
 800077a:	f000 f9ca 	bl	8000b12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800077e:	2026      	movs	r0, #38	; 0x26
 8000780:	f000 f9e3 	bl	8000b4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000784:	bf00      	nop
 8000786:	37b0      	adds	r7, #176	; 0xb0
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40004400 	.word	0x40004400
 8000790:	40021000 	.word	0x40021000

08000794 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000798:	e7fe      	b.n	8000798 <NMI_Handler+0x4>

0800079a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800079a:	b480      	push	{r7}
 800079c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800079e:	e7fe      	b.n	800079e <HardFault_Handler+0x4>

080007a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007a4:	e7fe      	b.n	80007a4 <MemManage_Handler+0x4>

080007a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007aa:	e7fe      	b.n	80007aa <BusFault_Handler+0x4>

080007ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007b0:	e7fe      	b.n	80007b0 <UsageFault_Handler+0x4>

080007b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007b2:	b480      	push	{r7}
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007b6:	bf00      	nop
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr

080007c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007c4:	bf00      	nop
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr

080007ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ce:	b480      	push	{r7}
 80007d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007d2:	bf00      	nop
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr

080007dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007e0:	f000 f89c 	bl	800091c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80007ec:	4802      	ldr	r0, [pc, #8]	; (80007f8 <USART2_IRQHandler+0x10>)
 80007ee:	f001 ffe5 	bl	80027bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	2000002c 	.word	0x2000002c

080007fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000800:	4b06      	ldr	r3, [pc, #24]	; (800081c <SystemInit+0x20>)
 8000802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000806:	4a05      	ldr	r2, [pc, #20]	; (800081c <SystemInit+0x20>)
 8000808:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800080c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	e000ed00 	.word	0xe000ed00

08000820 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000820:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000858 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000824:	f7ff ffea 	bl	80007fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000828:	480c      	ldr	r0, [pc, #48]	; (800085c <LoopForever+0x6>)
  ldr r1, =_edata
 800082a:	490d      	ldr	r1, [pc, #52]	; (8000860 <LoopForever+0xa>)
  ldr r2, =_sidata
 800082c:	4a0d      	ldr	r2, [pc, #52]	; (8000864 <LoopForever+0xe>)
  movs r3, #0
 800082e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000830:	e002      	b.n	8000838 <LoopCopyDataInit>

08000832 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000832:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000834:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000836:	3304      	adds	r3, #4

08000838 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000838:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800083a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800083c:	d3f9      	bcc.n	8000832 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800083e:	4a0a      	ldr	r2, [pc, #40]	; (8000868 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000840:	4c0a      	ldr	r4, [pc, #40]	; (800086c <LoopForever+0x16>)
  movs r3, #0
 8000842:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000844:	e001      	b.n	800084a <LoopFillZerobss>

08000846 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000846:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000848:	3204      	adds	r2, #4

0800084a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800084a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800084c:	d3fb      	bcc.n	8000846 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800084e:	f003 fa09 	bl	8003c64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000852:	f7ff fe37 	bl	80004c4 <main>

08000856 <LoopForever>:

LoopForever:
    b LoopForever
 8000856:	e7fe      	b.n	8000856 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000858:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800085c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000860:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000864:	08003d1c 	.word	0x08003d1c
  ldr r2, =_sbss
 8000868:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800086c:	200000b4 	.word	0x200000b4

08000870 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000870:	e7fe      	b.n	8000870 <ADC1_2_IRQHandler>

08000872 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	b082      	sub	sp, #8
 8000876:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000878:	2300      	movs	r3, #0
 800087a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800087c:	2003      	movs	r0, #3
 800087e:	f000 f93d 	bl	8000afc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000882:	200f      	movs	r0, #15
 8000884:	f000 f80e 	bl	80008a4 <HAL_InitTick>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d002      	beq.n	8000894 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800088e:	2301      	movs	r3, #1
 8000890:	71fb      	strb	r3, [r7, #7]
 8000892:	e001      	b.n	8000898 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000894:	f7ff fef6 	bl	8000684 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000898:	79fb      	ldrb	r3, [r7, #7]
}
 800089a:	4618      	mov	r0, r3
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
	...

080008a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008ac:	2300      	movs	r3, #0
 80008ae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80008b0:	4b17      	ldr	r3, [pc, #92]	; (8000910 <HAL_InitTick+0x6c>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d023      	beq.n	8000900 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80008b8:	4b16      	ldr	r3, [pc, #88]	; (8000914 <HAL_InitTick+0x70>)
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	4b14      	ldr	r3, [pc, #80]	; (8000910 <HAL_InitTick+0x6c>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	4619      	mov	r1, r3
 80008c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ce:	4618      	mov	r0, r3
 80008d0:	f000 f949 	bl	8000b66 <HAL_SYSTICK_Config>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d10f      	bne.n	80008fa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	2b0f      	cmp	r3, #15
 80008de:	d809      	bhi.n	80008f4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008e0:	2200      	movs	r2, #0
 80008e2:	6879      	ldr	r1, [r7, #4]
 80008e4:	f04f 30ff 	mov.w	r0, #4294967295
 80008e8:	f000 f913 	bl	8000b12 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008ec:	4a0a      	ldr	r2, [pc, #40]	; (8000918 <HAL_InitTick+0x74>)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	6013      	str	r3, [r2, #0]
 80008f2:	e007      	b.n	8000904 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80008f4:	2301      	movs	r3, #1
 80008f6:	73fb      	strb	r3, [r7, #15]
 80008f8:	e004      	b.n	8000904 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008fa:	2301      	movs	r3, #1
 80008fc:	73fb      	strb	r3, [r7, #15]
 80008fe:	e001      	b.n	8000904 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000900:	2301      	movs	r3, #1
 8000902:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000904:	7bfb      	ldrb	r3, [r7, #15]
}
 8000906:	4618      	mov	r0, r3
 8000908:	3710      	adds	r7, #16
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	20000008 	.word	0x20000008
 8000914:	20000000 	.word	0x20000000
 8000918:	20000004 	.word	0x20000004

0800091c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000920:	4b06      	ldr	r3, [pc, #24]	; (800093c <HAL_IncTick+0x20>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	461a      	mov	r2, r3
 8000926:	4b06      	ldr	r3, [pc, #24]	; (8000940 <HAL_IncTick+0x24>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4413      	add	r3, r2
 800092c:	4a04      	ldr	r2, [pc, #16]	; (8000940 <HAL_IncTick+0x24>)
 800092e:	6013      	str	r3, [r2, #0]
}
 8000930:	bf00      	nop
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	20000008 	.word	0x20000008
 8000940:	200000b0 	.word	0x200000b0

08000944 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  return uwTick;
 8000948:	4b03      	ldr	r3, [pc, #12]	; (8000958 <HAL_GetTick+0x14>)
 800094a:	681b      	ldr	r3, [r3, #0]
}
 800094c:	4618      	mov	r0, r3
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	200000b0 	.word	0x200000b0

0800095c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800095c:	b480      	push	{r7}
 800095e:	b085      	sub	sp, #20
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	f003 0307 	and.w	r3, r3, #7
 800096a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800096c:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <__NVIC_SetPriorityGrouping+0x44>)
 800096e:	68db      	ldr	r3, [r3, #12]
 8000970:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000972:	68ba      	ldr	r2, [r7, #8]
 8000974:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000978:	4013      	ands	r3, r2
 800097a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000984:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000988:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800098c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800098e:	4a04      	ldr	r2, [pc, #16]	; (80009a0 <__NVIC_SetPriorityGrouping+0x44>)
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	60d3      	str	r3, [r2, #12]
}
 8000994:	bf00      	nop
 8000996:	3714      	adds	r7, #20
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr
 80009a0:	e000ed00 	.word	0xe000ed00

080009a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009a8:	4b04      	ldr	r3, [pc, #16]	; (80009bc <__NVIC_GetPriorityGrouping+0x18>)
 80009aa:	68db      	ldr	r3, [r3, #12]
 80009ac:	0a1b      	lsrs	r3, r3, #8
 80009ae:	f003 0307 	and.w	r3, r3, #7
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr
 80009bc:	e000ed00 	.word	0xe000ed00

080009c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	db0b      	blt.n	80009ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009d2:	79fb      	ldrb	r3, [r7, #7]
 80009d4:	f003 021f 	and.w	r2, r3, #31
 80009d8:	4907      	ldr	r1, [pc, #28]	; (80009f8 <__NVIC_EnableIRQ+0x38>)
 80009da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009de:	095b      	lsrs	r3, r3, #5
 80009e0:	2001      	movs	r0, #1
 80009e2:	fa00 f202 	lsl.w	r2, r0, r2
 80009e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80009ea:	bf00      	nop
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	e000e100 	.word	0xe000e100

080009fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	6039      	str	r1, [r7, #0]
 8000a06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	db0a      	blt.n	8000a26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	b2da      	uxtb	r2, r3
 8000a14:	490c      	ldr	r1, [pc, #48]	; (8000a48 <__NVIC_SetPriority+0x4c>)
 8000a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1a:	0112      	lsls	r2, r2, #4
 8000a1c:	b2d2      	uxtb	r2, r2
 8000a1e:	440b      	add	r3, r1
 8000a20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a24:	e00a      	b.n	8000a3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	b2da      	uxtb	r2, r3
 8000a2a:	4908      	ldr	r1, [pc, #32]	; (8000a4c <__NVIC_SetPriority+0x50>)
 8000a2c:	79fb      	ldrb	r3, [r7, #7]
 8000a2e:	f003 030f 	and.w	r3, r3, #15
 8000a32:	3b04      	subs	r3, #4
 8000a34:	0112      	lsls	r2, r2, #4
 8000a36:	b2d2      	uxtb	r2, r2
 8000a38:	440b      	add	r3, r1
 8000a3a:	761a      	strb	r2, [r3, #24]
}
 8000a3c:	bf00      	nop
 8000a3e:	370c      	adds	r7, #12
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr
 8000a48:	e000e100 	.word	0xe000e100
 8000a4c:	e000ed00 	.word	0xe000ed00

08000a50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b089      	sub	sp, #36	; 0x24
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	60f8      	str	r0, [r7, #12]
 8000a58:	60b9      	str	r1, [r7, #8]
 8000a5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	f003 0307 	and.w	r3, r3, #7
 8000a62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a64:	69fb      	ldr	r3, [r7, #28]
 8000a66:	f1c3 0307 	rsb	r3, r3, #7
 8000a6a:	2b04      	cmp	r3, #4
 8000a6c:	bf28      	it	cs
 8000a6e:	2304      	movcs	r3, #4
 8000a70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a72:	69fb      	ldr	r3, [r7, #28]
 8000a74:	3304      	adds	r3, #4
 8000a76:	2b06      	cmp	r3, #6
 8000a78:	d902      	bls.n	8000a80 <NVIC_EncodePriority+0x30>
 8000a7a:	69fb      	ldr	r3, [r7, #28]
 8000a7c:	3b03      	subs	r3, #3
 8000a7e:	e000      	b.n	8000a82 <NVIC_EncodePriority+0x32>
 8000a80:	2300      	movs	r3, #0
 8000a82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a84:	f04f 32ff 	mov.w	r2, #4294967295
 8000a88:	69bb      	ldr	r3, [r7, #24]
 8000a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8e:	43da      	mvns	r2, r3
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	401a      	ands	r2, r3
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a98:	f04f 31ff 	mov.w	r1, #4294967295
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa2:	43d9      	mvns	r1, r3
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa8:	4313      	orrs	r3, r2
         );
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3724      	adds	r7, #36	; 0x24
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
	...

08000ab8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	3b01      	subs	r3, #1
 8000ac4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ac8:	d301      	bcc.n	8000ace <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aca:	2301      	movs	r3, #1
 8000acc:	e00f      	b.n	8000aee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ace:	4a0a      	ldr	r2, [pc, #40]	; (8000af8 <SysTick_Config+0x40>)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	3b01      	subs	r3, #1
 8000ad4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ad6:	210f      	movs	r1, #15
 8000ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8000adc:	f7ff ff8e 	bl	80009fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ae0:	4b05      	ldr	r3, [pc, #20]	; (8000af8 <SysTick_Config+0x40>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ae6:	4b04      	ldr	r3, [pc, #16]	; (8000af8 <SysTick_Config+0x40>)
 8000ae8:	2207      	movs	r2, #7
 8000aea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000aec:	2300      	movs	r3, #0
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	e000e010 	.word	0xe000e010

08000afc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b04:	6878      	ldr	r0, [r7, #4]
 8000b06:	f7ff ff29 	bl	800095c <__NVIC_SetPriorityGrouping>
}
 8000b0a:	bf00      	nop
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b12:	b580      	push	{r7, lr}
 8000b14:	b086      	sub	sp, #24
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	4603      	mov	r3, r0
 8000b1a:	60b9      	str	r1, [r7, #8]
 8000b1c:	607a      	str	r2, [r7, #4]
 8000b1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b20:	2300      	movs	r3, #0
 8000b22:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b24:	f7ff ff3e 	bl	80009a4 <__NVIC_GetPriorityGrouping>
 8000b28:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b2a:	687a      	ldr	r2, [r7, #4]
 8000b2c:	68b9      	ldr	r1, [r7, #8]
 8000b2e:	6978      	ldr	r0, [r7, #20]
 8000b30:	f7ff ff8e 	bl	8000a50 <NVIC_EncodePriority>
 8000b34:	4602      	mov	r2, r0
 8000b36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b3a:	4611      	mov	r1, r2
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff ff5d 	bl	80009fc <__NVIC_SetPriority>
}
 8000b42:	bf00      	nop
 8000b44:	3718      	adds	r7, #24
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b082      	sub	sp, #8
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	4603      	mov	r3, r0
 8000b52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f7ff ff31 	bl	80009c0 <__NVIC_EnableIRQ>
}
 8000b5e:	bf00      	nop
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b082      	sub	sp, #8
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b6e:	6878      	ldr	r0, [r7, #4]
 8000b70:	f7ff ffa2 	bl	8000ab8 <SysTick_Config>
 8000b74:	4603      	mov	r3, r0
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	b085      	sub	sp, #20
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b86:	2300      	movs	r3, #0
 8000b88:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	2b02      	cmp	r3, #2
 8000b94:	d008      	beq.n	8000ba8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2204      	movs	r2, #4
 8000b9a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	e022      	b.n	8000bee <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f022 020e 	bic.w	r2, r2, #14
 8000bb6:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f022 0201 	bic.w	r2, r2, #1
 8000bc6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bcc:	f003 021c 	and.w	r2, r3, #28
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd4:	2101      	movs	r1, #1
 8000bd6:	fa01 f202 	lsl.w	r2, r1, r2
 8000bda:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2201      	movs	r2, #1
 8000be0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2200      	movs	r2, #0
 8000be8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8000bec:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3714      	adds	r7, #20
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr

08000bfa <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b084      	sub	sp, #16
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c02:	2300      	movs	r3, #0
 8000c04:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	2b02      	cmp	r3, #2
 8000c10:	d005      	beq.n	8000c1e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2204      	movs	r2, #4
 8000c16:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	73fb      	strb	r3, [r7, #15]
 8000c1c:	e029      	b.n	8000c72 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f022 020e 	bic.w	r2, r2, #14
 8000c2c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f022 0201 	bic.w	r2, r2, #1
 8000c3c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c42:	f003 021c 	and.w	r2, r3, #28
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4a:	2101      	movs	r1, #1
 8000c4c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c50:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2201      	movs	r2, #1
 8000c56:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d003      	beq.n	8000c72 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c6e:	6878      	ldr	r0, [r7, #4]
 8000c70:	4798      	blx	r3
    }
  }
  return status;
 8000c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3710      	adds	r7, #16
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b087      	sub	sp, #28
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c86:	2300      	movs	r3, #0
 8000c88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c8a:	e17f      	b.n	8000f8c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	2101      	movs	r1, #1
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	fa01 f303 	lsl.w	r3, r1, r3
 8000c98:	4013      	ands	r3, r2
 8000c9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	f000 8171 	beq.w	8000f86 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	f003 0303 	and.w	r3, r3, #3
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	d005      	beq.n	8000cbc <HAL_GPIO_Init+0x40>
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	f003 0303 	and.w	r3, r3, #3
 8000cb8:	2b02      	cmp	r3, #2
 8000cba:	d130      	bne.n	8000d1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	689b      	ldr	r3, [r3, #8]
 8000cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	005b      	lsls	r3, r3, #1
 8000cc6:	2203      	movs	r2, #3
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	43db      	mvns	r3, r3
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	68da      	ldr	r2, [r3, #12]
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce0:	693a      	ldr	r2, [r7, #16]
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	693a      	ldr	r2, [r7, #16]
 8000cea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfa:	43db      	mvns	r3, r3
 8000cfc:	693a      	ldr	r2, [r7, #16]
 8000cfe:	4013      	ands	r3, r2
 8000d00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	091b      	lsrs	r3, r3, #4
 8000d08:	f003 0201 	and.w	r2, r3, #1
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	f003 0303 	and.w	r3, r3, #3
 8000d26:	2b03      	cmp	r3, #3
 8000d28:	d118      	bne.n	8000d5c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000d30:	2201      	movs	r2, #1
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	43db      	mvns	r3, r3
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	08db      	lsrs	r3, r3, #3
 8000d46:	f003 0201 	and.w	r2, r3, #1
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d50:	693a      	ldr	r2, [r7, #16]
 8000d52:	4313      	orrs	r3, r2
 8000d54:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	693a      	ldr	r2, [r7, #16]
 8000d5a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f003 0303 	and.w	r3, r3, #3
 8000d64:	2b03      	cmp	r3, #3
 8000d66:	d017      	beq.n	8000d98 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	005b      	lsls	r3, r3, #1
 8000d72:	2203      	movs	r2, #3
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	43db      	mvns	r3, r3
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	689a      	ldr	r2, [r3, #8]
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	693a      	ldr	r2, [r7, #16]
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	693a      	ldr	r2, [r7, #16]
 8000d96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f003 0303 	and.w	r3, r3, #3
 8000da0:	2b02      	cmp	r3, #2
 8000da2:	d123      	bne.n	8000dec <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	08da      	lsrs	r2, r3, #3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	3208      	adds	r2, #8
 8000dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000db0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	f003 0307 	and.w	r3, r3, #7
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	220f      	movs	r2, #15
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	43db      	mvns	r3, r3
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	691a      	ldr	r2, [r3, #16]
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	f003 0307 	and.w	r3, r3, #7
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	08da      	lsrs	r2, r3, #3
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	3208      	adds	r2, #8
 8000de6:	6939      	ldr	r1, [r7, #16]
 8000de8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	2203      	movs	r2, #3
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	43db      	mvns	r3, r3
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	4013      	ands	r3, r2
 8000e02:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f003 0203 	and.w	r2, r3, #3
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	693a      	ldr	r2, [r7, #16]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	f000 80ac 	beq.w	8000f86 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e2e:	4b5f      	ldr	r3, [pc, #380]	; (8000fac <HAL_GPIO_Init+0x330>)
 8000e30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e32:	4a5e      	ldr	r2, [pc, #376]	; (8000fac <HAL_GPIO_Init+0x330>)
 8000e34:	f043 0301 	orr.w	r3, r3, #1
 8000e38:	6613      	str	r3, [r2, #96]	; 0x60
 8000e3a:	4b5c      	ldr	r3, [pc, #368]	; (8000fac <HAL_GPIO_Init+0x330>)
 8000e3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e3e:	f003 0301 	and.w	r3, r3, #1
 8000e42:	60bb      	str	r3, [r7, #8]
 8000e44:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e46:	4a5a      	ldr	r2, [pc, #360]	; (8000fb0 <HAL_GPIO_Init+0x334>)
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	089b      	lsrs	r3, r3, #2
 8000e4c:	3302      	adds	r3, #2
 8000e4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e52:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	f003 0303 	and.w	r3, r3, #3
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	220f      	movs	r2, #15
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	43db      	mvns	r3, r3
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	4013      	ands	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e70:	d025      	beq.n	8000ebe <HAL_GPIO_Init+0x242>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a4f      	ldr	r2, [pc, #316]	; (8000fb4 <HAL_GPIO_Init+0x338>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d01f      	beq.n	8000eba <HAL_GPIO_Init+0x23e>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a4e      	ldr	r2, [pc, #312]	; (8000fb8 <HAL_GPIO_Init+0x33c>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d019      	beq.n	8000eb6 <HAL_GPIO_Init+0x23a>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a4d      	ldr	r2, [pc, #308]	; (8000fbc <HAL_GPIO_Init+0x340>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d013      	beq.n	8000eb2 <HAL_GPIO_Init+0x236>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a4c      	ldr	r2, [pc, #304]	; (8000fc0 <HAL_GPIO_Init+0x344>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d00d      	beq.n	8000eae <HAL_GPIO_Init+0x232>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4a4b      	ldr	r2, [pc, #300]	; (8000fc4 <HAL_GPIO_Init+0x348>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d007      	beq.n	8000eaa <HAL_GPIO_Init+0x22e>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4a4a      	ldr	r2, [pc, #296]	; (8000fc8 <HAL_GPIO_Init+0x34c>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d101      	bne.n	8000ea6 <HAL_GPIO_Init+0x22a>
 8000ea2:	2306      	movs	r3, #6
 8000ea4:	e00c      	b.n	8000ec0 <HAL_GPIO_Init+0x244>
 8000ea6:	2307      	movs	r3, #7
 8000ea8:	e00a      	b.n	8000ec0 <HAL_GPIO_Init+0x244>
 8000eaa:	2305      	movs	r3, #5
 8000eac:	e008      	b.n	8000ec0 <HAL_GPIO_Init+0x244>
 8000eae:	2304      	movs	r3, #4
 8000eb0:	e006      	b.n	8000ec0 <HAL_GPIO_Init+0x244>
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	e004      	b.n	8000ec0 <HAL_GPIO_Init+0x244>
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	e002      	b.n	8000ec0 <HAL_GPIO_Init+0x244>
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e000      	b.n	8000ec0 <HAL_GPIO_Init+0x244>
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	697a      	ldr	r2, [r7, #20]
 8000ec2:	f002 0203 	and.w	r2, r2, #3
 8000ec6:	0092      	lsls	r2, r2, #2
 8000ec8:	4093      	lsls	r3, r2
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ed0:	4937      	ldr	r1, [pc, #220]	; (8000fb0 <HAL_GPIO_Init+0x334>)
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	089b      	lsrs	r3, r3, #2
 8000ed6:	3302      	adds	r3, #2
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ede:	4b3b      	ldr	r3, [pc, #236]	; (8000fcc <HAL_GPIO_Init+0x350>)
 8000ee0:	689b      	ldr	r3, [r3, #8]
 8000ee2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	4013      	ands	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d003      	beq.n	8000f02 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f02:	4a32      	ldr	r2, [pc, #200]	; (8000fcc <HAL_GPIO_Init+0x350>)
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f08:	4b30      	ldr	r3, [pc, #192]	; (8000fcc <HAL_GPIO_Init+0x350>)
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	43db      	mvns	r3, r3
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	4013      	ands	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d003      	beq.n	8000f2c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f2c:	4a27      	ldr	r2, [pc, #156]	; (8000fcc <HAL_GPIO_Init+0x350>)
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f32:	4b26      	ldr	r3, [pc, #152]	; (8000fcc <HAL_GPIO_Init+0x350>)
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d003      	beq.n	8000f56 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f56:	4a1d      	ldr	r2, [pc, #116]	; (8000fcc <HAL_GPIO_Init+0x350>)
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000f5c:	4b1b      	ldr	r3, [pc, #108]	; (8000fcc <HAL_GPIO_Init+0x350>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	43db      	mvns	r3, r3
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d003      	beq.n	8000f80 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f80:	4a12      	ldr	r2, [pc, #72]	; (8000fcc <HAL_GPIO_Init+0x350>)
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	fa22 f303 	lsr.w	r3, r2, r3
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	f47f ae78 	bne.w	8000c8c <HAL_GPIO_Init+0x10>
  }
}
 8000f9c:	bf00      	nop
 8000f9e:	bf00      	nop
 8000fa0:	371c      	adds	r7, #28
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	40021000 	.word	0x40021000
 8000fb0:	40010000 	.word	0x40010000
 8000fb4:	48000400 	.word	0x48000400
 8000fb8:	48000800 	.word	0x48000800
 8000fbc:	48000c00 	.word	0x48000c00
 8000fc0:	48001000 	.word	0x48001000
 8000fc4:	48001400 	.word	0x48001400
 8000fc8:	48001800 	.word	0x48001800
 8000fcc:	40010400 	.word	0x40010400

08000fd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	460b      	mov	r3, r1
 8000fda:	807b      	strh	r3, [r7, #2]
 8000fdc:	4613      	mov	r3, r2
 8000fde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fe0:	787b      	ldrb	r3, [r7, #1]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d003      	beq.n	8000fee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fe6:	887a      	ldrh	r2, [r7, #2]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fec:	e002      	b.n	8000ff4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fee:	887a      	ldrh	r2, [r7, #2]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ff4:	bf00      	nop
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	695b      	ldr	r3, [r3, #20]
 8001010:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001012:	887a      	ldrh	r2, [r7, #2]
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	4013      	ands	r3, r2
 8001018:	041a      	lsls	r2, r3, #16
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	43d9      	mvns	r1, r3
 800101e:	887b      	ldrh	r3, [r7, #2]
 8001020:	400b      	ands	r3, r1
 8001022:	431a      	orrs	r2, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	619a      	str	r2, [r3, #24]
}
 8001028:	bf00      	nop
 800102a:	3714      	adds	r7, #20
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001038:	4b04      	ldr	r3, [pc, #16]	; (800104c <HAL_PWREx_GetVoltageRange+0x18>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001040:	4618      	mov	r0, r3
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	40007000 	.word	0x40007000

08001050 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800105e:	d130      	bne.n	80010c2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001060:	4b23      	ldr	r3, [pc, #140]	; (80010f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001068:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800106c:	d038      	beq.n	80010e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800106e:	4b20      	ldr	r3, [pc, #128]	; (80010f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001076:	4a1e      	ldr	r2, [pc, #120]	; (80010f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001078:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800107c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800107e:	4b1d      	ldr	r3, [pc, #116]	; (80010f4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	2232      	movs	r2, #50	; 0x32
 8001084:	fb02 f303 	mul.w	r3, r2, r3
 8001088:	4a1b      	ldr	r2, [pc, #108]	; (80010f8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800108a:	fba2 2303 	umull	r2, r3, r2, r3
 800108e:	0c9b      	lsrs	r3, r3, #18
 8001090:	3301      	adds	r3, #1
 8001092:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001094:	e002      	b.n	800109c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	3b01      	subs	r3, #1
 800109a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800109c:	4b14      	ldr	r3, [pc, #80]	; (80010f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800109e:	695b      	ldr	r3, [r3, #20]
 80010a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010a8:	d102      	bne.n	80010b0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d1f2      	bne.n	8001096 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010b0:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010b2:	695b      	ldr	r3, [r3, #20]
 80010b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010bc:	d110      	bne.n	80010e0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80010be:	2303      	movs	r3, #3
 80010c0:	e00f      	b.n	80010e2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80010c2:	4b0b      	ldr	r3, [pc, #44]	; (80010f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80010ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010ce:	d007      	beq.n	80010e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80010d0:	4b07      	ldr	r3, [pc, #28]	; (80010f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010d8:	4a05      	ldr	r2, [pc, #20]	; (80010f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010de:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3714      	adds	r7, #20
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	40007000 	.word	0x40007000
 80010f4:	20000000 	.word	0x20000000
 80010f8:	431bde83 	.word	0x431bde83

080010fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b088      	sub	sp, #32
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d101      	bne.n	800110e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e3ca      	b.n	80018a4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800110e:	4b97      	ldr	r3, [pc, #604]	; (800136c <HAL_RCC_OscConfig+0x270>)
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	f003 030c 	and.w	r3, r3, #12
 8001116:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001118:	4b94      	ldr	r3, [pc, #592]	; (800136c <HAL_RCC_OscConfig+0x270>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	f003 0303 	and.w	r3, r3, #3
 8001120:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 0310 	and.w	r3, r3, #16
 800112a:	2b00      	cmp	r3, #0
 800112c:	f000 80e4 	beq.w	80012f8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d007      	beq.n	8001146 <HAL_RCC_OscConfig+0x4a>
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	2b0c      	cmp	r3, #12
 800113a:	f040 808b 	bne.w	8001254 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	2b01      	cmp	r3, #1
 8001142:	f040 8087 	bne.w	8001254 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001146:	4b89      	ldr	r3, [pc, #548]	; (800136c <HAL_RCC_OscConfig+0x270>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 0302 	and.w	r3, r3, #2
 800114e:	2b00      	cmp	r3, #0
 8001150:	d005      	beq.n	800115e <HAL_RCC_OscConfig+0x62>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	699b      	ldr	r3, [r3, #24]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d101      	bne.n	800115e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e3a2      	b.n	80018a4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6a1a      	ldr	r2, [r3, #32]
 8001162:	4b82      	ldr	r3, [pc, #520]	; (800136c <HAL_RCC_OscConfig+0x270>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 0308 	and.w	r3, r3, #8
 800116a:	2b00      	cmp	r3, #0
 800116c:	d004      	beq.n	8001178 <HAL_RCC_OscConfig+0x7c>
 800116e:	4b7f      	ldr	r3, [pc, #508]	; (800136c <HAL_RCC_OscConfig+0x270>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001176:	e005      	b.n	8001184 <HAL_RCC_OscConfig+0x88>
 8001178:	4b7c      	ldr	r3, [pc, #496]	; (800136c <HAL_RCC_OscConfig+0x270>)
 800117a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800117e:	091b      	lsrs	r3, r3, #4
 8001180:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001184:	4293      	cmp	r3, r2
 8001186:	d223      	bcs.n	80011d0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6a1b      	ldr	r3, [r3, #32]
 800118c:	4618      	mov	r0, r3
 800118e:	f000 fd55 	bl	8001c3c <RCC_SetFlashLatencyFromMSIRange>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	e383      	b.n	80018a4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800119c:	4b73      	ldr	r3, [pc, #460]	; (800136c <HAL_RCC_OscConfig+0x270>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a72      	ldr	r2, [pc, #456]	; (800136c <HAL_RCC_OscConfig+0x270>)
 80011a2:	f043 0308 	orr.w	r3, r3, #8
 80011a6:	6013      	str	r3, [r2, #0]
 80011a8:	4b70      	ldr	r3, [pc, #448]	; (800136c <HAL_RCC_OscConfig+0x270>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6a1b      	ldr	r3, [r3, #32]
 80011b4:	496d      	ldr	r1, [pc, #436]	; (800136c <HAL_RCC_OscConfig+0x270>)
 80011b6:	4313      	orrs	r3, r2
 80011b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011ba:	4b6c      	ldr	r3, [pc, #432]	; (800136c <HAL_RCC_OscConfig+0x270>)
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	69db      	ldr	r3, [r3, #28]
 80011c6:	021b      	lsls	r3, r3, #8
 80011c8:	4968      	ldr	r1, [pc, #416]	; (800136c <HAL_RCC_OscConfig+0x270>)
 80011ca:	4313      	orrs	r3, r2
 80011cc:	604b      	str	r3, [r1, #4]
 80011ce:	e025      	b.n	800121c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011d0:	4b66      	ldr	r3, [pc, #408]	; (800136c <HAL_RCC_OscConfig+0x270>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a65      	ldr	r2, [pc, #404]	; (800136c <HAL_RCC_OscConfig+0x270>)
 80011d6:	f043 0308 	orr.w	r3, r3, #8
 80011da:	6013      	str	r3, [r2, #0]
 80011dc:	4b63      	ldr	r3, [pc, #396]	; (800136c <HAL_RCC_OscConfig+0x270>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6a1b      	ldr	r3, [r3, #32]
 80011e8:	4960      	ldr	r1, [pc, #384]	; (800136c <HAL_RCC_OscConfig+0x270>)
 80011ea:	4313      	orrs	r3, r2
 80011ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011ee:	4b5f      	ldr	r3, [pc, #380]	; (800136c <HAL_RCC_OscConfig+0x270>)
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	69db      	ldr	r3, [r3, #28]
 80011fa:	021b      	lsls	r3, r3, #8
 80011fc:	495b      	ldr	r1, [pc, #364]	; (800136c <HAL_RCC_OscConfig+0x270>)
 80011fe:	4313      	orrs	r3, r2
 8001200:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d109      	bne.n	800121c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6a1b      	ldr	r3, [r3, #32]
 800120c:	4618      	mov	r0, r3
 800120e:	f000 fd15 	bl	8001c3c <RCC_SetFlashLatencyFromMSIRange>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	e343      	b.n	80018a4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800121c:	f000 fc4a 	bl	8001ab4 <HAL_RCC_GetSysClockFreq>
 8001220:	4602      	mov	r2, r0
 8001222:	4b52      	ldr	r3, [pc, #328]	; (800136c <HAL_RCC_OscConfig+0x270>)
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	091b      	lsrs	r3, r3, #4
 8001228:	f003 030f 	and.w	r3, r3, #15
 800122c:	4950      	ldr	r1, [pc, #320]	; (8001370 <HAL_RCC_OscConfig+0x274>)
 800122e:	5ccb      	ldrb	r3, [r1, r3]
 8001230:	f003 031f 	and.w	r3, r3, #31
 8001234:	fa22 f303 	lsr.w	r3, r2, r3
 8001238:	4a4e      	ldr	r2, [pc, #312]	; (8001374 <HAL_RCC_OscConfig+0x278>)
 800123a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800123c:	4b4e      	ldr	r3, [pc, #312]	; (8001378 <HAL_RCC_OscConfig+0x27c>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff fb2f 	bl	80008a4 <HAL_InitTick>
 8001246:	4603      	mov	r3, r0
 8001248:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800124a:	7bfb      	ldrb	r3, [r7, #15]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d052      	beq.n	80012f6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001250:	7bfb      	ldrb	r3, [r7, #15]
 8001252:	e327      	b.n	80018a4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d032      	beq.n	80012c2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800125c:	4b43      	ldr	r3, [pc, #268]	; (800136c <HAL_RCC_OscConfig+0x270>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a42      	ldr	r2, [pc, #264]	; (800136c <HAL_RCC_OscConfig+0x270>)
 8001262:	f043 0301 	orr.w	r3, r3, #1
 8001266:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001268:	f7ff fb6c 	bl	8000944 <HAL_GetTick>
 800126c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800126e:	e008      	b.n	8001282 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001270:	f7ff fb68 	bl	8000944 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b02      	cmp	r3, #2
 800127c:	d901      	bls.n	8001282 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e310      	b.n	80018a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001282:	4b3a      	ldr	r3, [pc, #232]	; (800136c <HAL_RCC_OscConfig+0x270>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	2b00      	cmp	r3, #0
 800128c:	d0f0      	beq.n	8001270 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800128e:	4b37      	ldr	r3, [pc, #220]	; (800136c <HAL_RCC_OscConfig+0x270>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a36      	ldr	r2, [pc, #216]	; (800136c <HAL_RCC_OscConfig+0x270>)
 8001294:	f043 0308 	orr.w	r3, r3, #8
 8001298:	6013      	str	r3, [r2, #0]
 800129a:	4b34      	ldr	r3, [pc, #208]	; (800136c <HAL_RCC_OscConfig+0x270>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6a1b      	ldr	r3, [r3, #32]
 80012a6:	4931      	ldr	r1, [pc, #196]	; (800136c <HAL_RCC_OscConfig+0x270>)
 80012a8:	4313      	orrs	r3, r2
 80012aa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012ac:	4b2f      	ldr	r3, [pc, #188]	; (800136c <HAL_RCC_OscConfig+0x270>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	69db      	ldr	r3, [r3, #28]
 80012b8:	021b      	lsls	r3, r3, #8
 80012ba:	492c      	ldr	r1, [pc, #176]	; (800136c <HAL_RCC_OscConfig+0x270>)
 80012bc:	4313      	orrs	r3, r2
 80012be:	604b      	str	r3, [r1, #4]
 80012c0:	e01a      	b.n	80012f8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80012c2:	4b2a      	ldr	r3, [pc, #168]	; (800136c <HAL_RCC_OscConfig+0x270>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a29      	ldr	r2, [pc, #164]	; (800136c <HAL_RCC_OscConfig+0x270>)
 80012c8:	f023 0301 	bic.w	r3, r3, #1
 80012cc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80012ce:	f7ff fb39 	bl	8000944 <HAL_GetTick>
 80012d2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80012d4:	e008      	b.n	80012e8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012d6:	f7ff fb35 	bl	8000944 <HAL_GetTick>
 80012da:	4602      	mov	r2, r0
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d901      	bls.n	80012e8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80012e4:	2303      	movs	r3, #3
 80012e6:	e2dd      	b.n	80018a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80012e8:	4b20      	ldr	r3, [pc, #128]	; (800136c <HAL_RCC_OscConfig+0x270>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0302 	and.w	r3, r3, #2
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d1f0      	bne.n	80012d6 <HAL_RCC_OscConfig+0x1da>
 80012f4:	e000      	b.n	80012f8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012f6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 0301 	and.w	r3, r3, #1
 8001300:	2b00      	cmp	r3, #0
 8001302:	d074      	beq.n	80013ee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	2b08      	cmp	r3, #8
 8001308:	d005      	beq.n	8001316 <HAL_RCC_OscConfig+0x21a>
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	2b0c      	cmp	r3, #12
 800130e:	d10e      	bne.n	800132e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	2b03      	cmp	r3, #3
 8001314:	d10b      	bne.n	800132e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001316:	4b15      	ldr	r3, [pc, #84]	; (800136c <HAL_RCC_OscConfig+0x270>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d064      	beq.n	80013ec <HAL_RCC_OscConfig+0x2f0>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d160      	bne.n	80013ec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e2ba      	b.n	80018a4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001336:	d106      	bne.n	8001346 <HAL_RCC_OscConfig+0x24a>
 8001338:	4b0c      	ldr	r3, [pc, #48]	; (800136c <HAL_RCC_OscConfig+0x270>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a0b      	ldr	r2, [pc, #44]	; (800136c <HAL_RCC_OscConfig+0x270>)
 800133e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001342:	6013      	str	r3, [r2, #0]
 8001344:	e026      	b.n	8001394 <HAL_RCC_OscConfig+0x298>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800134e:	d115      	bne.n	800137c <HAL_RCC_OscConfig+0x280>
 8001350:	4b06      	ldr	r3, [pc, #24]	; (800136c <HAL_RCC_OscConfig+0x270>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a05      	ldr	r2, [pc, #20]	; (800136c <HAL_RCC_OscConfig+0x270>)
 8001356:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800135a:	6013      	str	r3, [r2, #0]
 800135c:	4b03      	ldr	r3, [pc, #12]	; (800136c <HAL_RCC_OscConfig+0x270>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a02      	ldr	r2, [pc, #8]	; (800136c <HAL_RCC_OscConfig+0x270>)
 8001362:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001366:	6013      	str	r3, [r2, #0]
 8001368:	e014      	b.n	8001394 <HAL_RCC_OscConfig+0x298>
 800136a:	bf00      	nop
 800136c:	40021000 	.word	0x40021000
 8001370:	08003cc4 	.word	0x08003cc4
 8001374:	20000000 	.word	0x20000000
 8001378:	20000004 	.word	0x20000004
 800137c:	4ba0      	ldr	r3, [pc, #640]	; (8001600 <HAL_RCC_OscConfig+0x504>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a9f      	ldr	r2, [pc, #636]	; (8001600 <HAL_RCC_OscConfig+0x504>)
 8001382:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001386:	6013      	str	r3, [r2, #0]
 8001388:	4b9d      	ldr	r3, [pc, #628]	; (8001600 <HAL_RCC_OscConfig+0x504>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a9c      	ldr	r2, [pc, #624]	; (8001600 <HAL_RCC_OscConfig+0x504>)
 800138e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001392:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d013      	beq.n	80013c4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800139c:	f7ff fad2 	bl	8000944 <HAL_GetTick>
 80013a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013a2:	e008      	b.n	80013b6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013a4:	f7ff face 	bl	8000944 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	2b64      	cmp	r3, #100	; 0x64
 80013b0:	d901      	bls.n	80013b6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e276      	b.n	80018a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013b6:	4b92      	ldr	r3, [pc, #584]	; (8001600 <HAL_RCC_OscConfig+0x504>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d0f0      	beq.n	80013a4 <HAL_RCC_OscConfig+0x2a8>
 80013c2:	e014      	b.n	80013ee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c4:	f7ff fabe 	bl	8000944 <HAL_GetTick>
 80013c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013ca:	e008      	b.n	80013de <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013cc:	f7ff faba 	bl	8000944 <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	2b64      	cmp	r3, #100	; 0x64
 80013d8:	d901      	bls.n	80013de <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e262      	b.n	80018a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013de:	4b88      	ldr	r3, [pc, #544]	; (8001600 <HAL_RCC_OscConfig+0x504>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d1f0      	bne.n	80013cc <HAL_RCC_OscConfig+0x2d0>
 80013ea:	e000      	b.n	80013ee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d060      	beq.n	80014bc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	2b04      	cmp	r3, #4
 80013fe:	d005      	beq.n	800140c <HAL_RCC_OscConfig+0x310>
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	2b0c      	cmp	r3, #12
 8001404:	d119      	bne.n	800143a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	2b02      	cmp	r3, #2
 800140a:	d116      	bne.n	800143a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800140c:	4b7c      	ldr	r3, [pc, #496]	; (8001600 <HAL_RCC_OscConfig+0x504>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001414:	2b00      	cmp	r3, #0
 8001416:	d005      	beq.n	8001424 <HAL_RCC_OscConfig+0x328>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d101      	bne.n	8001424 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	e23f      	b.n	80018a4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001424:	4b76      	ldr	r3, [pc, #472]	; (8001600 <HAL_RCC_OscConfig+0x504>)
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	691b      	ldr	r3, [r3, #16]
 8001430:	061b      	lsls	r3, r3, #24
 8001432:	4973      	ldr	r1, [pc, #460]	; (8001600 <HAL_RCC_OscConfig+0x504>)
 8001434:	4313      	orrs	r3, r2
 8001436:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001438:	e040      	b.n	80014bc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	68db      	ldr	r3, [r3, #12]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d023      	beq.n	800148a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001442:	4b6f      	ldr	r3, [pc, #444]	; (8001600 <HAL_RCC_OscConfig+0x504>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a6e      	ldr	r2, [pc, #440]	; (8001600 <HAL_RCC_OscConfig+0x504>)
 8001448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800144c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800144e:	f7ff fa79 	bl	8000944 <HAL_GetTick>
 8001452:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001454:	e008      	b.n	8001468 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001456:	f7ff fa75 	bl	8000944 <HAL_GetTick>
 800145a:	4602      	mov	r2, r0
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	2b02      	cmp	r3, #2
 8001462:	d901      	bls.n	8001468 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001464:	2303      	movs	r3, #3
 8001466:	e21d      	b.n	80018a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001468:	4b65      	ldr	r3, [pc, #404]	; (8001600 <HAL_RCC_OscConfig+0x504>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001470:	2b00      	cmp	r3, #0
 8001472:	d0f0      	beq.n	8001456 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001474:	4b62      	ldr	r3, [pc, #392]	; (8001600 <HAL_RCC_OscConfig+0x504>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	691b      	ldr	r3, [r3, #16]
 8001480:	061b      	lsls	r3, r3, #24
 8001482:	495f      	ldr	r1, [pc, #380]	; (8001600 <HAL_RCC_OscConfig+0x504>)
 8001484:	4313      	orrs	r3, r2
 8001486:	604b      	str	r3, [r1, #4]
 8001488:	e018      	b.n	80014bc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800148a:	4b5d      	ldr	r3, [pc, #372]	; (8001600 <HAL_RCC_OscConfig+0x504>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a5c      	ldr	r2, [pc, #368]	; (8001600 <HAL_RCC_OscConfig+0x504>)
 8001490:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001494:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001496:	f7ff fa55 	bl	8000944 <HAL_GetTick>
 800149a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800149c:	e008      	b.n	80014b0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800149e:	f7ff fa51 	bl	8000944 <HAL_GetTick>
 80014a2:	4602      	mov	r2, r0
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d901      	bls.n	80014b0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80014ac:	2303      	movs	r3, #3
 80014ae:	e1f9      	b.n	80018a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014b0:	4b53      	ldr	r3, [pc, #332]	; (8001600 <HAL_RCC_OscConfig+0x504>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d1f0      	bne.n	800149e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 0308 	and.w	r3, r3, #8
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d03c      	beq.n	8001542 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	695b      	ldr	r3, [r3, #20]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d01c      	beq.n	800150a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014d0:	4b4b      	ldr	r3, [pc, #300]	; (8001600 <HAL_RCC_OscConfig+0x504>)
 80014d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014d6:	4a4a      	ldr	r2, [pc, #296]	; (8001600 <HAL_RCC_OscConfig+0x504>)
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014e0:	f7ff fa30 	bl	8000944 <HAL_GetTick>
 80014e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014e6:	e008      	b.n	80014fa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014e8:	f7ff fa2c 	bl	8000944 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e1d4      	b.n	80018a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014fa:	4b41      	ldr	r3, [pc, #260]	; (8001600 <HAL_RCC_OscConfig+0x504>)
 80014fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001500:	f003 0302 	and.w	r3, r3, #2
 8001504:	2b00      	cmp	r3, #0
 8001506:	d0ef      	beq.n	80014e8 <HAL_RCC_OscConfig+0x3ec>
 8001508:	e01b      	b.n	8001542 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800150a:	4b3d      	ldr	r3, [pc, #244]	; (8001600 <HAL_RCC_OscConfig+0x504>)
 800150c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001510:	4a3b      	ldr	r2, [pc, #236]	; (8001600 <HAL_RCC_OscConfig+0x504>)
 8001512:	f023 0301 	bic.w	r3, r3, #1
 8001516:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800151a:	f7ff fa13 	bl	8000944 <HAL_GetTick>
 800151e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001520:	e008      	b.n	8001534 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001522:	f7ff fa0f 	bl	8000944 <HAL_GetTick>
 8001526:	4602      	mov	r2, r0
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	2b02      	cmp	r3, #2
 800152e:	d901      	bls.n	8001534 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e1b7      	b.n	80018a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001534:	4b32      	ldr	r3, [pc, #200]	; (8001600 <HAL_RCC_OscConfig+0x504>)
 8001536:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	2b00      	cmp	r3, #0
 8001540:	d1ef      	bne.n	8001522 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0304 	and.w	r3, r3, #4
 800154a:	2b00      	cmp	r3, #0
 800154c:	f000 80a6 	beq.w	800169c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001550:	2300      	movs	r3, #0
 8001552:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001554:	4b2a      	ldr	r3, [pc, #168]	; (8001600 <HAL_RCC_OscConfig+0x504>)
 8001556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d10d      	bne.n	800157c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001560:	4b27      	ldr	r3, [pc, #156]	; (8001600 <HAL_RCC_OscConfig+0x504>)
 8001562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001564:	4a26      	ldr	r2, [pc, #152]	; (8001600 <HAL_RCC_OscConfig+0x504>)
 8001566:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800156a:	6593      	str	r3, [r2, #88]	; 0x58
 800156c:	4b24      	ldr	r3, [pc, #144]	; (8001600 <HAL_RCC_OscConfig+0x504>)
 800156e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001574:	60bb      	str	r3, [r7, #8]
 8001576:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001578:	2301      	movs	r3, #1
 800157a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800157c:	4b21      	ldr	r3, [pc, #132]	; (8001604 <HAL_RCC_OscConfig+0x508>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001584:	2b00      	cmp	r3, #0
 8001586:	d118      	bne.n	80015ba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001588:	4b1e      	ldr	r3, [pc, #120]	; (8001604 <HAL_RCC_OscConfig+0x508>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a1d      	ldr	r2, [pc, #116]	; (8001604 <HAL_RCC_OscConfig+0x508>)
 800158e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001592:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001594:	f7ff f9d6 	bl	8000944 <HAL_GetTick>
 8001598:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800159a:	e008      	b.n	80015ae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800159c:	f7ff f9d2 	bl	8000944 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e17a      	b.n	80018a4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015ae:	4b15      	ldr	r3, [pc, #84]	; (8001604 <HAL_RCC_OscConfig+0x508>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d0f0      	beq.n	800159c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d108      	bne.n	80015d4 <HAL_RCC_OscConfig+0x4d8>
 80015c2:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <HAL_RCC_OscConfig+0x504>)
 80015c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015c8:	4a0d      	ldr	r2, [pc, #52]	; (8001600 <HAL_RCC_OscConfig+0x504>)
 80015ca:	f043 0301 	orr.w	r3, r3, #1
 80015ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015d2:	e029      	b.n	8001628 <HAL_RCC_OscConfig+0x52c>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	2b05      	cmp	r3, #5
 80015da:	d115      	bne.n	8001608 <HAL_RCC_OscConfig+0x50c>
 80015dc:	4b08      	ldr	r3, [pc, #32]	; (8001600 <HAL_RCC_OscConfig+0x504>)
 80015de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015e2:	4a07      	ldr	r2, [pc, #28]	; (8001600 <HAL_RCC_OscConfig+0x504>)
 80015e4:	f043 0304 	orr.w	r3, r3, #4
 80015e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015ec:	4b04      	ldr	r3, [pc, #16]	; (8001600 <HAL_RCC_OscConfig+0x504>)
 80015ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015f2:	4a03      	ldr	r2, [pc, #12]	; (8001600 <HAL_RCC_OscConfig+0x504>)
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015fc:	e014      	b.n	8001628 <HAL_RCC_OscConfig+0x52c>
 80015fe:	bf00      	nop
 8001600:	40021000 	.word	0x40021000
 8001604:	40007000 	.word	0x40007000
 8001608:	4b9c      	ldr	r3, [pc, #624]	; (800187c <HAL_RCC_OscConfig+0x780>)
 800160a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800160e:	4a9b      	ldr	r2, [pc, #620]	; (800187c <HAL_RCC_OscConfig+0x780>)
 8001610:	f023 0301 	bic.w	r3, r3, #1
 8001614:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001618:	4b98      	ldr	r3, [pc, #608]	; (800187c <HAL_RCC_OscConfig+0x780>)
 800161a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800161e:	4a97      	ldr	r2, [pc, #604]	; (800187c <HAL_RCC_OscConfig+0x780>)
 8001620:	f023 0304 	bic.w	r3, r3, #4
 8001624:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d016      	beq.n	800165e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001630:	f7ff f988 	bl	8000944 <HAL_GetTick>
 8001634:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001636:	e00a      	b.n	800164e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001638:	f7ff f984 	bl	8000944 <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	f241 3288 	movw	r2, #5000	; 0x1388
 8001646:	4293      	cmp	r3, r2
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e12a      	b.n	80018a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800164e:	4b8b      	ldr	r3, [pc, #556]	; (800187c <HAL_RCC_OscConfig+0x780>)
 8001650:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001654:	f003 0302 	and.w	r3, r3, #2
 8001658:	2b00      	cmp	r3, #0
 800165a:	d0ed      	beq.n	8001638 <HAL_RCC_OscConfig+0x53c>
 800165c:	e015      	b.n	800168a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800165e:	f7ff f971 	bl	8000944 <HAL_GetTick>
 8001662:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001664:	e00a      	b.n	800167c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001666:	f7ff f96d 	bl	8000944 <HAL_GetTick>
 800166a:	4602      	mov	r2, r0
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	f241 3288 	movw	r2, #5000	; 0x1388
 8001674:	4293      	cmp	r3, r2
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e113      	b.n	80018a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800167c:	4b7f      	ldr	r3, [pc, #508]	; (800187c <HAL_RCC_OscConfig+0x780>)
 800167e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	2b00      	cmp	r3, #0
 8001688:	d1ed      	bne.n	8001666 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800168a:	7ffb      	ldrb	r3, [r7, #31]
 800168c:	2b01      	cmp	r3, #1
 800168e:	d105      	bne.n	800169c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001690:	4b7a      	ldr	r3, [pc, #488]	; (800187c <HAL_RCC_OscConfig+0x780>)
 8001692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001694:	4a79      	ldr	r2, [pc, #484]	; (800187c <HAL_RCC_OscConfig+0x780>)
 8001696:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800169a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	f000 80fe 	beq.w	80018a2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	f040 80d0 	bne.w	8001850 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80016b0:	4b72      	ldr	r3, [pc, #456]	; (800187c <HAL_RCC_OscConfig+0x780>)
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	f003 0203 	and.w	r2, r3, #3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d130      	bne.n	8001726 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	3b01      	subs	r3, #1
 80016d0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d127      	bne.n	8001726 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016e0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d11f      	bne.n	8001726 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80016f0:	2a07      	cmp	r2, #7
 80016f2:	bf14      	ite	ne
 80016f4:	2201      	movne	r2, #1
 80016f6:	2200      	moveq	r2, #0
 80016f8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d113      	bne.n	8001726 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001708:	085b      	lsrs	r3, r3, #1
 800170a:	3b01      	subs	r3, #1
 800170c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800170e:	429a      	cmp	r2, r3
 8001710:	d109      	bne.n	8001726 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171c:	085b      	lsrs	r3, r3, #1
 800171e:	3b01      	subs	r3, #1
 8001720:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001722:	429a      	cmp	r2, r3
 8001724:	d06e      	beq.n	8001804 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	2b0c      	cmp	r3, #12
 800172a:	d069      	beq.n	8001800 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800172c:	4b53      	ldr	r3, [pc, #332]	; (800187c <HAL_RCC_OscConfig+0x780>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d105      	bne.n	8001744 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001738:	4b50      	ldr	r3, [pc, #320]	; (800187c <HAL_RCC_OscConfig+0x780>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e0ad      	b.n	80018a4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001748:	4b4c      	ldr	r3, [pc, #304]	; (800187c <HAL_RCC_OscConfig+0x780>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a4b      	ldr	r2, [pc, #300]	; (800187c <HAL_RCC_OscConfig+0x780>)
 800174e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001752:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001754:	f7ff f8f6 	bl	8000944 <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800175c:	f7ff f8f2 	bl	8000944 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e09a      	b.n	80018a4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800176e:	4b43      	ldr	r3, [pc, #268]	; (800187c <HAL_RCC_OscConfig+0x780>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1f0      	bne.n	800175c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800177a:	4b40      	ldr	r3, [pc, #256]	; (800187c <HAL_RCC_OscConfig+0x780>)
 800177c:	68da      	ldr	r2, [r3, #12]
 800177e:	4b40      	ldr	r3, [pc, #256]	; (8001880 <HAL_RCC_OscConfig+0x784>)
 8001780:	4013      	ands	r3, r2
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800178a:	3a01      	subs	r2, #1
 800178c:	0112      	lsls	r2, r2, #4
 800178e:	4311      	orrs	r1, r2
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001794:	0212      	lsls	r2, r2, #8
 8001796:	4311      	orrs	r1, r2
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800179c:	0852      	lsrs	r2, r2, #1
 800179e:	3a01      	subs	r2, #1
 80017a0:	0552      	lsls	r2, r2, #21
 80017a2:	4311      	orrs	r1, r2
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80017a8:	0852      	lsrs	r2, r2, #1
 80017aa:	3a01      	subs	r2, #1
 80017ac:	0652      	lsls	r2, r2, #25
 80017ae:	4311      	orrs	r1, r2
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80017b4:	0912      	lsrs	r2, r2, #4
 80017b6:	0452      	lsls	r2, r2, #17
 80017b8:	430a      	orrs	r2, r1
 80017ba:	4930      	ldr	r1, [pc, #192]	; (800187c <HAL_RCC_OscConfig+0x780>)
 80017bc:	4313      	orrs	r3, r2
 80017be:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80017c0:	4b2e      	ldr	r3, [pc, #184]	; (800187c <HAL_RCC_OscConfig+0x780>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a2d      	ldr	r2, [pc, #180]	; (800187c <HAL_RCC_OscConfig+0x780>)
 80017c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017ca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80017cc:	4b2b      	ldr	r3, [pc, #172]	; (800187c <HAL_RCC_OscConfig+0x780>)
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	4a2a      	ldr	r2, [pc, #168]	; (800187c <HAL_RCC_OscConfig+0x780>)
 80017d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017d6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80017d8:	f7ff f8b4 	bl	8000944 <HAL_GetTick>
 80017dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017de:	e008      	b.n	80017f2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017e0:	f7ff f8b0 	bl	8000944 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e058      	b.n	80018a4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017f2:	4b22      	ldr	r3, [pc, #136]	; (800187c <HAL_RCC_OscConfig+0x780>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d0f0      	beq.n	80017e0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017fe:	e050      	b.n	80018a2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e04f      	b.n	80018a4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001804:	4b1d      	ldr	r3, [pc, #116]	; (800187c <HAL_RCC_OscConfig+0x780>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d148      	bne.n	80018a2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001810:	4b1a      	ldr	r3, [pc, #104]	; (800187c <HAL_RCC_OscConfig+0x780>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a19      	ldr	r2, [pc, #100]	; (800187c <HAL_RCC_OscConfig+0x780>)
 8001816:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800181a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800181c:	4b17      	ldr	r3, [pc, #92]	; (800187c <HAL_RCC_OscConfig+0x780>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	4a16      	ldr	r2, [pc, #88]	; (800187c <HAL_RCC_OscConfig+0x780>)
 8001822:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001826:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001828:	f7ff f88c 	bl	8000944 <HAL_GetTick>
 800182c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800182e:	e008      	b.n	8001842 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001830:	f7ff f888 	bl	8000944 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b02      	cmp	r3, #2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e030      	b.n	80018a4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001842:	4b0e      	ldr	r3, [pc, #56]	; (800187c <HAL_RCC_OscConfig+0x780>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d0f0      	beq.n	8001830 <HAL_RCC_OscConfig+0x734>
 800184e:	e028      	b.n	80018a2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	2b0c      	cmp	r3, #12
 8001854:	d023      	beq.n	800189e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001856:	4b09      	ldr	r3, [pc, #36]	; (800187c <HAL_RCC_OscConfig+0x780>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a08      	ldr	r2, [pc, #32]	; (800187c <HAL_RCC_OscConfig+0x780>)
 800185c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001860:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001862:	f7ff f86f 	bl	8000944 <HAL_GetTick>
 8001866:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001868:	e00c      	b.n	8001884 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800186a:	f7ff f86b 	bl	8000944 <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b02      	cmp	r3, #2
 8001876:	d905      	bls.n	8001884 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e013      	b.n	80018a4 <HAL_RCC_OscConfig+0x7a8>
 800187c:	40021000 	.word	0x40021000
 8001880:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001884:	4b09      	ldr	r3, [pc, #36]	; (80018ac <HAL_RCC_OscConfig+0x7b0>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d1ec      	bne.n	800186a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001890:	4b06      	ldr	r3, [pc, #24]	; (80018ac <HAL_RCC_OscConfig+0x7b0>)
 8001892:	68da      	ldr	r2, [r3, #12]
 8001894:	4905      	ldr	r1, [pc, #20]	; (80018ac <HAL_RCC_OscConfig+0x7b0>)
 8001896:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <HAL_RCC_OscConfig+0x7b4>)
 8001898:	4013      	ands	r3, r2
 800189a:	60cb      	str	r3, [r1, #12]
 800189c:	e001      	b.n	80018a2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e000      	b.n	80018a4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80018a2:	2300      	movs	r3, #0
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3720      	adds	r7, #32
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40021000 	.word	0x40021000
 80018b0:	feeefffc 	.word	0xfeeefffc

080018b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d101      	bne.n	80018c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e0e7      	b.n	8001a98 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018c8:	4b75      	ldr	r3, [pc, #468]	; (8001aa0 <HAL_RCC_ClockConfig+0x1ec>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0307 	and.w	r3, r3, #7
 80018d0:	683a      	ldr	r2, [r7, #0]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d910      	bls.n	80018f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018d6:	4b72      	ldr	r3, [pc, #456]	; (8001aa0 <HAL_RCC_ClockConfig+0x1ec>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f023 0207 	bic.w	r2, r3, #7
 80018de:	4970      	ldr	r1, [pc, #448]	; (8001aa0 <HAL_RCC_ClockConfig+0x1ec>)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018e6:	4b6e      	ldr	r3, [pc, #440]	; (8001aa0 <HAL_RCC_ClockConfig+0x1ec>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	683a      	ldr	r2, [r7, #0]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d001      	beq.n	80018f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e0cf      	b.n	8001a98 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	2b00      	cmp	r3, #0
 8001902:	d010      	beq.n	8001926 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689a      	ldr	r2, [r3, #8]
 8001908:	4b66      	ldr	r3, [pc, #408]	; (8001aa4 <HAL_RCC_ClockConfig+0x1f0>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001910:	429a      	cmp	r2, r3
 8001912:	d908      	bls.n	8001926 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001914:	4b63      	ldr	r3, [pc, #396]	; (8001aa4 <HAL_RCC_ClockConfig+0x1f0>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	4960      	ldr	r1, [pc, #384]	; (8001aa4 <HAL_RCC_ClockConfig+0x1f0>)
 8001922:	4313      	orrs	r3, r2
 8001924:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	2b00      	cmp	r3, #0
 8001930:	d04c      	beq.n	80019cc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	2b03      	cmp	r3, #3
 8001938:	d107      	bne.n	800194a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800193a:	4b5a      	ldr	r3, [pc, #360]	; (8001aa4 <HAL_RCC_ClockConfig+0x1f0>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d121      	bne.n	800198a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e0a6      	b.n	8001a98 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	2b02      	cmp	r3, #2
 8001950:	d107      	bne.n	8001962 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001952:	4b54      	ldr	r3, [pc, #336]	; (8001aa4 <HAL_RCC_ClockConfig+0x1f0>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d115      	bne.n	800198a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e09a      	b.n	8001a98 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d107      	bne.n	800197a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800196a:	4b4e      	ldr	r3, [pc, #312]	; (8001aa4 <HAL_RCC_ClockConfig+0x1f0>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d109      	bne.n	800198a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e08e      	b.n	8001a98 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800197a:	4b4a      	ldr	r3, [pc, #296]	; (8001aa4 <HAL_RCC_ClockConfig+0x1f0>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001982:	2b00      	cmp	r3, #0
 8001984:	d101      	bne.n	800198a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e086      	b.n	8001a98 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800198a:	4b46      	ldr	r3, [pc, #280]	; (8001aa4 <HAL_RCC_ClockConfig+0x1f0>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f023 0203 	bic.w	r2, r3, #3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	4943      	ldr	r1, [pc, #268]	; (8001aa4 <HAL_RCC_ClockConfig+0x1f0>)
 8001998:	4313      	orrs	r3, r2
 800199a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800199c:	f7fe ffd2 	bl	8000944 <HAL_GetTick>
 80019a0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019a2:	e00a      	b.n	80019ba <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019a4:	f7fe ffce 	bl	8000944 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e06e      	b.n	8001a98 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ba:	4b3a      	ldr	r3, [pc, #232]	; (8001aa4 <HAL_RCC_ClockConfig+0x1f0>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f003 020c 	and.w	r2, r3, #12
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d1eb      	bne.n	80019a4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d010      	beq.n	80019fa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	689a      	ldr	r2, [r3, #8]
 80019dc:	4b31      	ldr	r3, [pc, #196]	; (8001aa4 <HAL_RCC_ClockConfig+0x1f0>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d208      	bcs.n	80019fa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019e8:	4b2e      	ldr	r3, [pc, #184]	; (8001aa4 <HAL_RCC_ClockConfig+0x1f0>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	492b      	ldr	r1, [pc, #172]	; (8001aa4 <HAL_RCC_ClockConfig+0x1f0>)
 80019f6:	4313      	orrs	r3, r2
 80019f8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019fa:	4b29      	ldr	r3, [pc, #164]	; (8001aa0 <HAL_RCC_ClockConfig+0x1ec>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	683a      	ldr	r2, [r7, #0]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d210      	bcs.n	8001a2a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a08:	4b25      	ldr	r3, [pc, #148]	; (8001aa0 <HAL_RCC_ClockConfig+0x1ec>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f023 0207 	bic.w	r2, r3, #7
 8001a10:	4923      	ldr	r1, [pc, #140]	; (8001aa0 <HAL_RCC_ClockConfig+0x1ec>)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a18:	4b21      	ldr	r3, [pc, #132]	; (8001aa0 <HAL_RCC_ClockConfig+0x1ec>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0307 	and.w	r3, r3, #7
 8001a20:	683a      	ldr	r2, [r7, #0]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d001      	beq.n	8001a2a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e036      	b.n	8001a98 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0304 	and.w	r3, r3, #4
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d008      	beq.n	8001a48 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a36:	4b1b      	ldr	r3, [pc, #108]	; (8001aa4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	4918      	ldr	r1, [pc, #96]	; (8001aa4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a44:	4313      	orrs	r3, r2
 8001a46:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0308 	and.w	r3, r3, #8
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d009      	beq.n	8001a68 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a54:	4b13      	ldr	r3, [pc, #76]	; (8001aa4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	691b      	ldr	r3, [r3, #16]
 8001a60:	00db      	lsls	r3, r3, #3
 8001a62:	4910      	ldr	r1, [pc, #64]	; (8001aa4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a64:	4313      	orrs	r3, r2
 8001a66:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a68:	f000 f824 	bl	8001ab4 <HAL_RCC_GetSysClockFreq>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	4b0d      	ldr	r3, [pc, #52]	; (8001aa4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	091b      	lsrs	r3, r3, #4
 8001a74:	f003 030f 	and.w	r3, r3, #15
 8001a78:	490b      	ldr	r1, [pc, #44]	; (8001aa8 <HAL_RCC_ClockConfig+0x1f4>)
 8001a7a:	5ccb      	ldrb	r3, [r1, r3]
 8001a7c:	f003 031f 	and.w	r3, r3, #31
 8001a80:	fa22 f303 	lsr.w	r3, r2, r3
 8001a84:	4a09      	ldr	r2, [pc, #36]	; (8001aac <HAL_RCC_ClockConfig+0x1f8>)
 8001a86:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001a88:	4b09      	ldr	r3, [pc, #36]	; (8001ab0 <HAL_RCC_ClockConfig+0x1fc>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7fe ff09 	bl	80008a4 <HAL_InitTick>
 8001a92:	4603      	mov	r3, r0
 8001a94:	72fb      	strb	r3, [r7, #11]

  return status;
 8001a96:	7afb      	ldrb	r3, [r7, #11]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3710      	adds	r7, #16
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	40022000 	.word	0x40022000
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	08003cc4 	.word	0x08003cc4
 8001aac:	20000000 	.word	0x20000000
 8001ab0:	20000004 	.word	0x20000004

08001ab4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b089      	sub	sp, #36	; 0x24
 8001ab8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001aba:	2300      	movs	r3, #0
 8001abc:	61fb      	str	r3, [r7, #28]
 8001abe:	2300      	movs	r3, #0
 8001ac0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ac2:	4b3e      	ldr	r3, [pc, #248]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x108>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f003 030c 	and.w	r3, r3, #12
 8001aca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001acc:	4b3b      	ldr	r3, [pc, #236]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x108>)
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	f003 0303 	and.w	r3, r3, #3
 8001ad4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d005      	beq.n	8001ae8 <HAL_RCC_GetSysClockFreq+0x34>
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	2b0c      	cmp	r3, #12
 8001ae0:	d121      	bne.n	8001b26 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d11e      	bne.n	8001b26 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ae8:	4b34      	ldr	r3, [pc, #208]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x108>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0308 	and.w	r3, r3, #8
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d107      	bne.n	8001b04 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001af4:	4b31      	ldr	r3, [pc, #196]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x108>)
 8001af6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001afa:	0a1b      	lsrs	r3, r3, #8
 8001afc:	f003 030f 	and.w	r3, r3, #15
 8001b00:	61fb      	str	r3, [r7, #28]
 8001b02:	e005      	b.n	8001b10 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b04:	4b2d      	ldr	r3, [pc, #180]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x108>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	091b      	lsrs	r3, r3, #4
 8001b0a:	f003 030f 	and.w	r3, r3, #15
 8001b0e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001b10:	4a2b      	ldr	r2, [pc, #172]	; (8001bc0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b18:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d10d      	bne.n	8001b3c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b24:	e00a      	b.n	8001b3c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	2b04      	cmp	r3, #4
 8001b2a:	d102      	bne.n	8001b32 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001b2c:	4b25      	ldr	r3, [pc, #148]	; (8001bc4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b2e:	61bb      	str	r3, [r7, #24]
 8001b30:	e004      	b.n	8001b3c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	2b08      	cmp	r3, #8
 8001b36:	d101      	bne.n	8001b3c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b38:	4b23      	ldr	r3, [pc, #140]	; (8001bc8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001b3a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	2b0c      	cmp	r3, #12
 8001b40:	d134      	bne.n	8001bac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b42:	4b1e      	ldr	r3, [pc, #120]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x108>)
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	f003 0303 	and.w	r3, r3, #3
 8001b4a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d003      	beq.n	8001b5a <HAL_RCC_GetSysClockFreq+0xa6>
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	2b03      	cmp	r3, #3
 8001b56:	d003      	beq.n	8001b60 <HAL_RCC_GetSysClockFreq+0xac>
 8001b58:	e005      	b.n	8001b66 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001b5a:	4b1a      	ldr	r3, [pc, #104]	; (8001bc4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b5c:	617b      	str	r3, [r7, #20]
      break;
 8001b5e:	e005      	b.n	8001b6c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001b60:	4b19      	ldr	r3, [pc, #100]	; (8001bc8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001b62:	617b      	str	r3, [r7, #20]
      break;
 8001b64:	e002      	b.n	8001b6c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	617b      	str	r3, [r7, #20]
      break;
 8001b6a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b6c:	4b13      	ldr	r3, [pc, #76]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x108>)
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	091b      	lsrs	r3, r3, #4
 8001b72:	f003 0307 	and.w	r3, r3, #7
 8001b76:	3301      	adds	r3, #1
 8001b78:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001b7a:	4b10      	ldr	r3, [pc, #64]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x108>)
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	0a1b      	lsrs	r3, r3, #8
 8001b80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b84:	697a      	ldr	r2, [r7, #20]
 8001b86:	fb03 f202 	mul.w	r2, r3, r2
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b90:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b92:	4b0a      	ldr	r3, [pc, #40]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x108>)
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	0e5b      	lsrs	r3, r3, #25
 8001b98:	f003 0303 	and.w	r3, r3, #3
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001ba2:	697a      	ldr	r2, [r7, #20]
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001baa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001bac:	69bb      	ldr	r3, [r7, #24]
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3724      	adds	r7, #36	; 0x24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	08003cdc 	.word	0x08003cdc
 8001bc4:	00f42400 	.word	0x00f42400
 8001bc8:	007a1200 	.word	0x007a1200

08001bcc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bd0:	4b03      	ldr	r3, [pc, #12]	; (8001be0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	20000000 	.word	0x20000000

08001be4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001be8:	f7ff fff0 	bl	8001bcc <HAL_RCC_GetHCLKFreq>
 8001bec:	4602      	mov	r2, r0
 8001bee:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	0a1b      	lsrs	r3, r3, #8
 8001bf4:	f003 0307 	and.w	r3, r3, #7
 8001bf8:	4904      	ldr	r1, [pc, #16]	; (8001c0c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001bfa:	5ccb      	ldrb	r3, [r1, r3]
 8001bfc:	f003 031f 	and.w	r3, r3, #31
 8001c00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	08003cd4 	.word	0x08003cd4

08001c10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001c14:	f7ff ffda 	bl	8001bcc <HAL_RCC_GetHCLKFreq>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	0adb      	lsrs	r3, r3, #11
 8001c20:	f003 0307 	and.w	r3, r3, #7
 8001c24:	4904      	ldr	r1, [pc, #16]	; (8001c38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001c26:	5ccb      	ldrb	r3, [r1, r3]
 8001c28:	f003 031f 	and.w	r3, r3, #31
 8001c2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40021000 	.word	0x40021000
 8001c38:	08003cd4 	.word	0x08003cd4

08001c3c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001c44:	2300      	movs	r3, #0
 8001c46:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001c48:	4b2a      	ldr	r3, [pc, #168]	; (8001cf4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d003      	beq.n	8001c5c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001c54:	f7ff f9ee 	bl	8001034 <HAL_PWREx_GetVoltageRange>
 8001c58:	6178      	str	r0, [r7, #20]
 8001c5a:	e014      	b.n	8001c86 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c5c:	4b25      	ldr	r3, [pc, #148]	; (8001cf4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c60:	4a24      	ldr	r2, [pc, #144]	; (8001cf4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c66:	6593      	str	r3, [r2, #88]	; 0x58
 8001c68:	4b22      	ldr	r3, [pc, #136]	; (8001cf4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c70:	60fb      	str	r3, [r7, #12]
 8001c72:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001c74:	f7ff f9de 	bl	8001034 <HAL_PWREx_GetVoltageRange>
 8001c78:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001c7a:	4b1e      	ldr	r3, [pc, #120]	; (8001cf4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c7e:	4a1d      	ldr	r2, [pc, #116]	; (8001cf4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c84:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c8c:	d10b      	bne.n	8001ca6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2b80      	cmp	r3, #128	; 0x80
 8001c92:	d919      	bls.n	8001cc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2ba0      	cmp	r3, #160	; 0xa0
 8001c98:	d902      	bls.n	8001ca0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	613b      	str	r3, [r7, #16]
 8001c9e:	e013      	b.n	8001cc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	613b      	str	r3, [r7, #16]
 8001ca4:	e010      	b.n	8001cc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2b80      	cmp	r3, #128	; 0x80
 8001caa:	d902      	bls.n	8001cb2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001cac:	2303      	movs	r3, #3
 8001cae:	613b      	str	r3, [r7, #16]
 8001cb0:	e00a      	b.n	8001cc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2b80      	cmp	r3, #128	; 0x80
 8001cb6:	d102      	bne.n	8001cbe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001cb8:	2302      	movs	r3, #2
 8001cba:	613b      	str	r3, [r7, #16]
 8001cbc:	e004      	b.n	8001cc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2b70      	cmp	r3, #112	; 0x70
 8001cc2:	d101      	bne.n	8001cc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001cc8:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f023 0207 	bic.w	r2, r3, #7
 8001cd0:	4909      	ldr	r1, [pc, #36]	; (8001cf8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001cd8:	4b07      	ldr	r3, [pc, #28]	; (8001cf8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0307 	and.w	r3, r3, #7
 8001ce0:	693a      	ldr	r2, [r7, #16]
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d001      	beq.n	8001cea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e000      	b.n	8001cec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001cea:	2300      	movs	r3, #0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3718      	adds	r7, #24
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	40022000 	.word	0x40022000

08001cfc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b086      	sub	sp, #24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001d04:	2300      	movs	r3, #0
 8001d06:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d08:	2300      	movs	r3, #0
 8001d0a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d041      	beq.n	8001d9c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d1c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001d20:	d02a      	beq.n	8001d78 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001d22:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001d26:	d824      	bhi.n	8001d72 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001d28:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001d2c:	d008      	beq.n	8001d40 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001d2e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001d32:	d81e      	bhi.n	8001d72 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d00a      	beq.n	8001d4e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001d38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d3c:	d010      	beq.n	8001d60 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001d3e:	e018      	b.n	8001d72 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001d40:	4b86      	ldr	r3, [pc, #536]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	4a85      	ldr	r2, [pc, #532]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d4a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d4c:	e015      	b.n	8001d7a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	3304      	adds	r3, #4
 8001d52:	2100      	movs	r1, #0
 8001d54:	4618      	mov	r0, r3
 8001d56:	f000 fabb 	bl	80022d0 <RCCEx_PLLSAI1_Config>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d5e:	e00c      	b.n	8001d7a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	3320      	adds	r3, #32
 8001d64:	2100      	movs	r1, #0
 8001d66:	4618      	mov	r0, r3
 8001d68:	f000 fba6 	bl	80024b8 <RCCEx_PLLSAI2_Config>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d70:	e003      	b.n	8001d7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	74fb      	strb	r3, [r7, #19]
      break;
 8001d76:	e000      	b.n	8001d7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001d78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001d7a:	7cfb      	ldrb	r3, [r7, #19]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d10b      	bne.n	8001d98 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d80:	4b76      	ldr	r3, [pc, #472]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d86:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d8e:	4973      	ldr	r1, [pc, #460]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d90:	4313      	orrs	r3, r2
 8001d92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001d96:	e001      	b.n	8001d9c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d98:	7cfb      	ldrb	r3, [r7, #19]
 8001d9a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d041      	beq.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001dac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001db0:	d02a      	beq.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001db2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001db6:	d824      	bhi.n	8001e02 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001db8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001dbc:	d008      	beq.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001dbe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001dc2:	d81e      	bhi.n	8001e02 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d00a      	beq.n	8001dde <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001dc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dcc:	d010      	beq.n	8001df0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001dce:	e018      	b.n	8001e02 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001dd0:	4b62      	ldr	r3, [pc, #392]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	4a61      	ldr	r2, [pc, #388]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dda:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ddc:	e015      	b.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	3304      	adds	r3, #4
 8001de2:	2100      	movs	r1, #0
 8001de4:	4618      	mov	r0, r3
 8001de6:	f000 fa73 	bl	80022d0 <RCCEx_PLLSAI1_Config>
 8001dea:	4603      	mov	r3, r0
 8001dec:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001dee:	e00c      	b.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	3320      	adds	r3, #32
 8001df4:	2100      	movs	r1, #0
 8001df6:	4618      	mov	r0, r3
 8001df8:	f000 fb5e 	bl	80024b8 <RCCEx_PLLSAI2_Config>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e00:	e003      	b.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	74fb      	strb	r3, [r7, #19]
      break;
 8001e06:	e000      	b.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001e08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e0a:	7cfb      	ldrb	r3, [r7, #19]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d10b      	bne.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001e10:	4b52      	ldr	r3, [pc, #328]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e16:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e1e:	494f      	ldr	r1, [pc, #316]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e20:	4313      	orrs	r3, r2
 8001e22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001e26:	e001      	b.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e28:	7cfb      	ldrb	r3, [r7, #19]
 8001e2a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	f000 80a0 	beq.w	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e3e:	4b47      	ldr	r3, [pc, #284]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d101      	bne.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e000      	b.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001e4e:	2300      	movs	r3, #0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d00d      	beq.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e54:	4b41      	ldr	r3, [pc, #260]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e58:	4a40      	ldr	r2, [pc, #256]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e5e:	6593      	str	r3, [r2, #88]	; 0x58
 8001e60:	4b3e      	ldr	r3, [pc, #248]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e68:	60bb      	str	r3, [r7, #8]
 8001e6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e70:	4b3b      	ldr	r3, [pc, #236]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a3a      	ldr	r2, [pc, #232]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001e76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e7a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e7c:	f7fe fd62 	bl	8000944 <HAL_GetTick>
 8001e80:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001e82:	e009      	b.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e84:	f7fe fd5e 	bl	8000944 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d902      	bls.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	74fb      	strb	r3, [r7, #19]
        break;
 8001e96:	e005      	b.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001e98:	4b31      	ldr	r3, [pc, #196]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d0ef      	beq.n	8001e84 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001ea4:	7cfb      	ldrb	r3, [r7, #19]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d15c      	bne.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001eaa:	4b2c      	ldr	r3, [pc, #176]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eb4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d01f      	beq.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ec2:	697a      	ldr	r2, [r7, #20]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d019      	beq.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001ec8:	4b24      	ldr	r3, [pc, #144]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ece:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ed2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001ed4:	4b21      	ldr	r3, [pc, #132]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eda:	4a20      	ldr	r2, [pc, #128]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001edc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ee0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001ee4:	4b1d      	ldr	r3, [pc, #116]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eea:	4a1c      	ldr	r2, [pc, #112]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ef0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001ef4:	4a19      	ldr	r2, [pc, #100]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d016      	beq.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f06:	f7fe fd1d 	bl	8000944 <HAL_GetTick>
 8001f0a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f0c:	e00b      	b.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f0e:	f7fe fd19 	bl	8000944 <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d902      	bls.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	74fb      	strb	r3, [r7, #19]
            break;
 8001f24:	e006      	b.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f26:	4b0d      	ldr	r3, [pc, #52]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f2c:	f003 0302 	and.w	r3, r3, #2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d0ec      	beq.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001f34:	7cfb      	ldrb	r3, [r7, #19]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d10c      	bne.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f3a:	4b08      	ldr	r3, [pc, #32]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f4a:	4904      	ldr	r1, [pc, #16]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001f52:	e009      	b.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f54:	7cfb      	ldrb	r3, [r7, #19]
 8001f56:	74bb      	strb	r3, [r7, #18]
 8001f58:	e006      	b.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8001f5a:	bf00      	nop
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f64:	7cfb      	ldrb	r3, [r7, #19]
 8001f66:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f68:	7c7b      	ldrb	r3, [r7, #17]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d105      	bne.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f6e:	4b9e      	ldr	r3, [pc, #632]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f72:	4a9d      	ldr	r2, [pc, #628]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f78:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d00a      	beq.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f86:	4b98      	ldr	r3, [pc, #608]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f8c:	f023 0203 	bic.w	r2, r3, #3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f94:	4994      	ldr	r1, [pc, #592]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f96:	4313      	orrs	r3, r2
 8001f98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d00a      	beq.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001fa8:	4b8f      	ldr	r3, [pc, #572]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fae:	f023 020c 	bic.w	r2, r3, #12
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fb6:	498c      	ldr	r1, [pc, #560]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0304 	and.w	r3, r3, #4
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d00a      	beq.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001fca:	4b87      	ldr	r3, [pc, #540]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fd0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd8:	4983      	ldr	r1, [pc, #524]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0308 	and.w	r3, r3, #8
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d00a      	beq.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001fec:	4b7e      	ldr	r3, [pc, #504]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ff2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffa:	497b      	ldr	r1, [pc, #492]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0310 	and.w	r3, r3, #16
 800200a:	2b00      	cmp	r3, #0
 800200c:	d00a      	beq.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800200e:	4b76      	ldr	r3, [pc, #472]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002010:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002014:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800201c:	4972      	ldr	r1, [pc, #456]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800201e:	4313      	orrs	r3, r2
 8002020:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0320 	and.w	r3, r3, #32
 800202c:	2b00      	cmp	r3, #0
 800202e:	d00a      	beq.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002030:	4b6d      	ldr	r3, [pc, #436]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002036:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800203e:	496a      	ldr	r1, [pc, #424]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002040:	4313      	orrs	r3, r2
 8002042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800204e:	2b00      	cmp	r3, #0
 8002050:	d00a      	beq.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002052:	4b65      	ldr	r3, [pc, #404]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002058:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002060:	4961      	ldr	r1, [pc, #388]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002062:	4313      	orrs	r3, r2
 8002064:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002070:	2b00      	cmp	r3, #0
 8002072:	d00a      	beq.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002074:	4b5c      	ldr	r3, [pc, #368]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800207a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002082:	4959      	ldr	r1, [pc, #356]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002084:	4313      	orrs	r3, r2
 8002086:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002092:	2b00      	cmp	r3, #0
 8002094:	d00a      	beq.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002096:	4b54      	ldr	r3, [pc, #336]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800209c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020a4:	4950      	ldr	r1, [pc, #320]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d00a      	beq.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80020b8:	4b4b      	ldr	r3, [pc, #300]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020be:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020c6:	4948      	ldr	r1, [pc, #288]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00a      	beq.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80020da:	4b43      	ldr	r3, [pc, #268]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e8:	493f      	ldr	r1, [pc, #252]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d028      	beq.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80020fc:	4b3a      	ldr	r3, [pc, #232]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002102:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800210a:	4937      	ldr	r1, [pc, #220]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800210c:	4313      	orrs	r3, r2
 800210e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002116:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800211a:	d106      	bne.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800211c:	4b32      	ldr	r3, [pc, #200]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	4a31      	ldr	r2, [pc, #196]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002122:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002126:	60d3      	str	r3, [r2, #12]
 8002128:	e011      	b.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800212e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002132:	d10c      	bne.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	3304      	adds	r3, #4
 8002138:	2101      	movs	r1, #1
 800213a:	4618      	mov	r0, r3
 800213c:	f000 f8c8 	bl	80022d0 <RCCEx_PLLSAI1_Config>
 8002140:	4603      	mov	r3, r0
 8002142:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002144:	7cfb      	ldrb	r3, [r7, #19]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800214a:	7cfb      	ldrb	r3, [r7, #19]
 800214c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d028      	beq.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800215a:	4b23      	ldr	r3, [pc, #140]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800215c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002160:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002168:	491f      	ldr	r1, [pc, #124]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800216a:	4313      	orrs	r3, r2
 800216c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002174:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002178:	d106      	bne.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800217a:	4b1b      	ldr	r3, [pc, #108]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	4a1a      	ldr	r2, [pc, #104]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002180:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002184:	60d3      	str	r3, [r2, #12]
 8002186:	e011      	b.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800218c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002190:	d10c      	bne.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	3304      	adds	r3, #4
 8002196:	2101      	movs	r1, #1
 8002198:	4618      	mov	r0, r3
 800219a:	f000 f899 	bl	80022d0 <RCCEx_PLLSAI1_Config>
 800219e:	4603      	mov	r3, r0
 80021a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021a2:	7cfb      	ldrb	r3, [r7, #19]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80021a8:	7cfb      	ldrb	r3, [r7, #19]
 80021aa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d02b      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80021b8:	4b0b      	ldr	r3, [pc, #44]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021c6:	4908      	ldr	r1, [pc, #32]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021c8:	4313      	orrs	r3, r2
 80021ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021d6:	d109      	bne.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021d8:	4b03      	ldr	r3, [pc, #12]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	4a02      	ldr	r2, [pc, #8]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021e2:	60d3      	str	r3, [r2, #12]
 80021e4:	e014      	b.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80021e6:	bf00      	nop
 80021e8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80021f4:	d10c      	bne.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	3304      	adds	r3, #4
 80021fa:	2101      	movs	r1, #1
 80021fc:	4618      	mov	r0, r3
 80021fe:	f000 f867 	bl	80022d0 <RCCEx_PLLSAI1_Config>
 8002202:	4603      	mov	r3, r0
 8002204:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002206:	7cfb      	ldrb	r3, [r7, #19]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800220c:	7cfb      	ldrb	r3, [r7, #19]
 800220e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d02f      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800221c:	4b2b      	ldr	r3, [pc, #172]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800221e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002222:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800222a:	4928      	ldr	r1, [pc, #160]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800222c:	4313      	orrs	r3, r2
 800222e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002236:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800223a:	d10d      	bne.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	3304      	adds	r3, #4
 8002240:	2102      	movs	r1, #2
 8002242:	4618      	mov	r0, r3
 8002244:	f000 f844 	bl	80022d0 <RCCEx_PLLSAI1_Config>
 8002248:	4603      	mov	r3, r0
 800224a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800224c:	7cfb      	ldrb	r3, [r7, #19]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d014      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002252:	7cfb      	ldrb	r3, [r7, #19]
 8002254:	74bb      	strb	r3, [r7, #18]
 8002256:	e011      	b.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800225c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002260:	d10c      	bne.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	3320      	adds	r3, #32
 8002266:	2102      	movs	r1, #2
 8002268:	4618      	mov	r0, r3
 800226a:	f000 f925 	bl	80024b8 <RCCEx_PLLSAI2_Config>
 800226e:	4603      	mov	r3, r0
 8002270:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002272:	7cfb      	ldrb	r3, [r7, #19]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002278:	7cfb      	ldrb	r3, [r7, #19]
 800227a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d00a      	beq.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002288:	4b10      	ldr	r3, [pc, #64]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800228a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800228e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002296:	490d      	ldr	r1, [pc, #52]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002298:	4313      	orrs	r3, r2
 800229a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d00b      	beq.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80022aa:	4b08      	ldr	r3, [pc, #32]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022ba:	4904      	ldr	r1, [pc, #16]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80022c2:	7cbb      	ldrb	r3, [r7, #18]
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3718      	adds	r7, #24
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40021000 	.word	0x40021000

080022d0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80022da:	2300      	movs	r3, #0
 80022dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80022de:	4b75      	ldr	r3, [pc, #468]	; (80024b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	f003 0303 	and.w	r3, r3, #3
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d018      	beq.n	800231c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80022ea:	4b72      	ldr	r3, [pc, #456]	; (80024b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	f003 0203 	and.w	r2, r3, #3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d10d      	bne.n	8002316 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
       ||
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d009      	beq.n	8002316 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002302:	4b6c      	ldr	r3, [pc, #432]	; (80024b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	091b      	lsrs	r3, r3, #4
 8002308:	f003 0307 	and.w	r3, r3, #7
 800230c:	1c5a      	adds	r2, r3, #1
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
       ||
 8002312:	429a      	cmp	r2, r3
 8002314:	d047      	beq.n	80023a6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	73fb      	strb	r3, [r7, #15]
 800231a:	e044      	b.n	80023a6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2b03      	cmp	r3, #3
 8002322:	d018      	beq.n	8002356 <RCCEx_PLLSAI1_Config+0x86>
 8002324:	2b03      	cmp	r3, #3
 8002326:	d825      	bhi.n	8002374 <RCCEx_PLLSAI1_Config+0xa4>
 8002328:	2b01      	cmp	r3, #1
 800232a:	d002      	beq.n	8002332 <RCCEx_PLLSAI1_Config+0x62>
 800232c:	2b02      	cmp	r3, #2
 800232e:	d009      	beq.n	8002344 <RCCEx_PLLSAI1_Config+0x74>
 8002330:	e020      	b.n	8002374 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002332:	4b60      	ldr	r3, [pc, #384]	; (80024b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d11d      	bne.n	800237a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002342:	e01a      	b.n	800237a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002344:	4b5b      	ldr	r3, [pc, #364]	; (80024b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800234c:	2b00      	cmp	r3, #0
 800234e:	d116      	bne.n	800237e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002354:	e013      	b.n	800237e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002356:	4b57      	ldr	r3, [pc, #348]	; (80024b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d10f      	bne.n	8002382 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002362:	4b54      	ldr	r3, [pc, #336]	; (80024b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d109      	bne.n	8002382 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002372:	e006      	b.n	8002382 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	73fb      	strb	r3, [r7, #15]
      break;
 8002378:	e004      	b.n	8002384 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800237a:	bf00      	nop
 800237c:	e002      	b.n	8002384 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800237e:	bf00      	nop
 8002380:	e000      	b.n	8002384 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002382:	bf00      	nop
    }

    if(status == HAL_OK)
 8002384:	7bfb      	ldrb	r3, [r7, #15]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d10d      	bne.n	80023a6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800238a:	4b4a      	ldr	r3, [pc, #296]	; (80024b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6819      	ldr	r1, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	3b01      	subs	r3, #1
 800239c:	011b      	lsls	r3, r3, #4
 800239e:	430b      	orrs	r3, r1
 80023a0:	4944      	ldr	r1, [pc, #272]	; (80024b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023a2:	4313      	orrs	r3, r2
 80023a4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80023a6:	7bfb      	ldrb	r3, [r7, #15]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d17d      	bne.n	80024a8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80023ac:	4b41      	ldr	r3, [pc, #260]	; (80024b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a40      	ldr	r2, [pc, #256]	; (80024b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80023b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023b8:	f7fe fac4 	bl	8000944 <HAL_GetTick>
 80023bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80023be:	e009      	b.n	80023d4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80023c0:	f7fe fac0 	bl	8000944 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d902      	bls.n	80023d4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	73fb      	strb	r3, [r7, #15]
        break;
 80023d2:	e005      	b.n	80023e0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80023d4:	4b37      	ldr	r3, [pc, #220]	; (80024b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1ef      	bne.n	80023c0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80023e0:	7bfb      	ldrb	r3, [r7, #15]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d160      	bne.n	80024a8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d111      	bne.n	8002410 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80023ec:	4b31      	ldr	r3, [pc, #196]	; (80024b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023ee:	691b      	ldr	r3, [r3, #16]
 80023f0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80023f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	6892      	ldr	r2, [r2, #8]
 80023fc:	0211      	lsls	r1, r2, #8
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	68d2      	ldr	r2, [r2, #12]
 8002402:	0912      	lsrs	r2, r2, #4
 8002404:	0452      	lsls	r2, r2, #17
 8002406:	430a      	orrs	r2, r1
 8002408:	492a      	ldr	r1, [pc, #168]	; (80024b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800240a:	4313      	orrs	r3, r2
 800240c:	610b      	str	r3, [r1, #16]
 800240e:	e027      	b.n	8002460 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d112      	bne.n	800243c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002416:	4b27      	ldr	r3, [pc, #156]	; (80024b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800241e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	6892      	ldr	r2, [r2, #8]
 8002426:	0211      	lsls	r1, r2, #8
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	6912      	ldr	r2, [r2, #16]
 800242c:	0852      	lsrs	r2, r2, #1
 800242e:	3a01      	subs	r2, #1
 8002430:	0552      	lsls	r2, r2, #21
 8002432:	430a      	orrs	r2, r1
 8002434:	491f      	ldr	r1, [pc, #124]	; (80024b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002436:	4313      	orrs	r3, r2
 8002438:	610b      	str	r3, [r1, #16]
 800243a:	e011      	b.n	8002460 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800243c:	4b1d      	ldr	r3, [pc, #116]	; (80024b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800243e:	691b      	ldr	r3, [r3, #16]
 8002440:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002444:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	6892      	ldr	r2, [r2, #8]
 800244c:	0211      	lsls	r1, r2, #8
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	6952      	ldr	r2, [r2, #20]
 8002452:	0852      	lsrs	r2, r2, #1
 8002454:	3a01      	subs	r2, #1
 8002456:	0652      	lsls	r2, r2, #25
 8002458:	430a      	orrs	r2, r1
 800245a:	4916      	ldr	r1, [pc, #88]	; (80024b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800245c:	4313      	orrs	r3, r2
 800245e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002460:	4b14      	ldr	r3, [pc, #80]	; (80024b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a13      	ldr	r2, [pc, #76]	; (80024b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002466:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800246a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800246c:	f7fe fa6a 	bl	8000944 <HAL_GetTick>
 8002470:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002472:	e009      	b.n	8002488 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002474:	f7fe fa66 	bl	8000944 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b02      	cmp	r3, #2
 8002480:	d902      	bls.n	8002488 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	73fb      	strb	r3, [r7, #15]
          break;
 8002486:	e005      	b.n	8002494 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002488:	4b0a      	ldr	r3, [pc, #40]	; (80024b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d0ef      	beq.n	8002474 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002494:	7bfb      	ldrb	r3, [r7, #15]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d106      	bne.n	80024a8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800249a:	4b06      	ldr	r3, [pc, #24]	; (80024b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800249c:	691a      	ldr	r2, [r3, #16]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	4904      	ldr	r1, [pc, #16]	; (80024b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80024a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3710      	adds	r7, #16
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	40021000 	.word	0x40021000

080024b8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80024c2:	2300      	movs	r3, #0
 80024c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80024c6:	4b6a      	ldr	r3, [pc, #424]	; (8002670 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	f003 0303 	and.w	r3, r3, #3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d018      	beq.n	8002504 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80024d2:	4b67      	ldr	r3, [pc, #412]	; (8002670 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	f003 0203 	and.w	r2, r3, #3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d10d      	bne.n	80024fe <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
       ||
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d009      	beq.n	80024fe <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80024ea:	4b61      	ldr	r3, [pc, #388]	; (8002670 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	091b      	lsrs	r3, r3, #4
 80024f0:	f003 0307 	and.w	r3, r3, #7
 80024f4:	1c5a      	adds	r2, r3, #1
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
       ||
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d047      	beq.n	800258e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	73fb      	strb	r3, [r7, #15]
 8002502:	e044      	b.n	800258e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2b03      	cmp	r3, #3
 800250a:	d018      	beq.n	800253e <RCCEx_PLLSAI2_Config+0x86>
 800250c:	2b03      	cmp	r3, #3
 800250e:	d825      	bhi.n	800255c <RCCEx_PLLSAI2_Config+0xa4>
 8002510:	2b01      	cmp	r3, #1
 8002512:	d002      	beq.n	800251a <RCCEx_PLLSAI2_Config+0x62>
 8002514:	2b02      	cmp	r3, #2
 8002516:	d009      	beq.n	800252c <RCCEx_PLLSAI2_Config+0x74>
 8002518:	e020      	b.n	800255c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800251a:	4b55      	ldr	r3, [pc, #340]	; (8002670 <RCCEx_PLLSAI2_Config+0x1b8>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d11d      	bne.n	8002562 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800252a:	e01a      	b.n	8002562 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800252c:	4b50      	ldr	r3, [pc, #320]	; (8002670 <RCCEx_PLLSAI2_Config+0x1b8>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002534:	2b00      	cmp	r3, #0
 8002536:	d116      	bne.n	8002566 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800253c:	e013      	b.n	8002566 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800253e:	4b4c      	ldr	r3, [pc, #304]	; (8002670 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d10f      	bne.n	800256a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800254a:	4b49      	ldr	r3, [pc, #292]	; (8002670 <RCCEx_PLLSAI2_Config+0x1b8>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d109      	bne.n	800256a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800255a:	e006      	b.n	800256a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	73fb      	strb	r3, [r7, #15]
      break;
 8002560:	e004      	b.n	800256c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002562:	bf00      	nop
 8002564:	e002      	b.n	800256c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002566:	bf00      	nop
 8002568:	e000      	b.n	800256c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800256a:	bf00      	nop
    }

    if(status == HAL_OK)
 800256c:	7bfb      	ldrb	r3, [r7, #15]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10d      	bne.n	800258e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002572:	4b3f      	ldr	r3, [pc, #252]	; (8002670 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6819      	ldr	r1, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	3b01      	subs	r3, #1
 8002584:	011b      	lsls	r3, r3, #4
 8002586:	430b      	orrs	r3, r1
 8002588:	4939      	ldr	r1, [pc, #228]	; (8002670 <RCCEx_PLLSAI2_Config+0x1b8>)
 800258a:	4313      	orrs	r3, r2
 800258c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800258e:	7bfb      	ldrb	r3, [r7, #15]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d167      	bne.n	8002664 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002594:	4b36      	ldr	r3, [pc, #216]	; (8002670 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a35      	ldr	r2, [pc, #212]	; (8002670 <RCCEx_PLLSAI2_Config+0x1b8>)
 800259a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800259e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025a0:	f7fe f9d0 	bl	8000944 <HAL_GetTick>
 80025a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80025a6:	e009      	b.n	80025bc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80025a8:	f7fe f9cc 	bl	8000944 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d902      	bls.n	80025bc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	73fb      	strb	r3, [r7, #15]
        break;
 80025ba:	e005      	b.n	80025c8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80025bc:	4b2c      	ldr	r3, [pc, #176]	; (8002670 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d1ef      	bne.n	80025a8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80025c8:	7bfb      	ldrb	r3, [r7, #15]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d14a      	bne.n	8002664 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d111      	bne.n	80025f8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80025d4:	4b26      	ldr	r3, [pc, #152]	; (8002670 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025d6:	695b      	ldr	r3, [r3, #20]
 80025d8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80025dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	6892      	ldr	r2, [r2, #8]
 80025e4:	0211      	lsls	r1, r2, #8
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	68d2      	ldr	r2, [r2, #12]
 80025ea:	0912      	lsrs	r2, r2, #4
 80025ec:	0452      	lsls	r2, r2, #17
 80025ee:	430a      	orrs	r2, r1
 80025f0:	491f      	ldr	r1, [pc, #124]	; (8002670 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	614b      	str	r3, [r1, #20]
 80025f6:	e011      	b.n	800261c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80025f8:	4b1d      	ldr	r3, [pc, #116]	; (8002670 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025fa:	695b      	ldr	r3, [r3, #20]
 80025fc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002600:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	6892      	ldr	r2, [r2, #8]
 8002608:	0211      	lsls	r1, r2, #8
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	6912      	ldr	r2, [r2, #16]
 800260e:	0852      	lsrs	r2, r2, #1
 8002610:	3a01      	subs	r2, #1
 8002612:	0652      	lsls	r2, r2, #25
 8002614:	430a      	orrs	r2, r1
 8002616:	4916      	ldr	r1, [pc, #88]	; (8002670 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002618:	4313      	orrs	r3, r2
 800261a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800261c:	4b14      	ldr	r3, [pc, #80]	; (8002670 <RCCEx_PLLSAI2_Config+0x1b8>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a13      	ldr	r2, [pc, #76]	; (8002670 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002622:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002626:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002628:	f7fe f98c 	bl	8000944 <HAL_GetTick>
 800262c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800262e:	e009      	b.n	8002644 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002630:	f7fe f988 	bl	8000944 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b02      	cmp	r3, #2
 800263c:	d902      	bls.n	8002644 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	73fb      	strb	r3, [r7, #15]
          break;
 8002642:	e005      	b.n	8002650 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002644:	4b0a      	ldr	r3, [pc, #40]	; (8002670 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d0ef      	beq.n	8002630 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002650:	7bfb      	ldrb	r3, [r7, #15]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d106      	bne.n	8002664 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002656:	4b06      	ldr	r3, [pc, #24]	; (8002670 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002658:	695a      	ldr	r2, [r3, #20]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	4904      	ldr	r1, [pc, #16]	; (8002670 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002660:	4313      	orrs	r3, r2
 8002662:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002664:	7bfb      	ldrb	r3, [r7, #15]
}
 8002666:	4618      	mov	r0, r3
 8002668:	3710      	adds	r7, #16
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	40021000 	.word	0x40021000

08002674 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e040      	b.n	8002708 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800268a:	2b00      	cmp	r3, #0
 800268c:	d106      	bne.n	800269c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f7fe f818 	bl	80006cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2224      	movs	r2, #36	; 0x24
 80026a0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f022 0201 	bic.w	r2, r2, #1
 80026b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 fb8e 	bl	8002dd4 <UART_SetConfig>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d101      	bne.n	80026c2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e022      	b.n	8002708 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d002      	beq.n	80026d0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 fe3a 	bl	8003344 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	685a      	ldr	r2, [r3, #4]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	689a      	ldr	r2, [r3, #8]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f042 0201 	orr.w	r2, r2, #1
 80026fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f000 fec1 	bl	8003488 <UART_CheckIdleState>
 8002706:	4603      	mov	r3, r0
}
 8002708:	4618      	mov	r0, r3
 800270a:	3708      	adds	r7, #8
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b08a      	sub	sp, #40	; 0x28
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	4613      	mov	r3, r2
 800271c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002722:	2b20      	cmp	r3, #32
 8002724:	d142      	bne.n	80027ac <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d002      	beq.n	8002732 <HAL_UART_Receive_IT+0x22>
 800272c:	88fb      	ldrh	r3, [r7, #6]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e03b      	b.n	80027ae <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800273c:	2b01      	cmp	r3, #1
 800273e:	d101      	bne.n	8002744 <HAL_UART_Receive_IT+0x34>
 8002740:	2302      	movs	r3, #2
 8002742:	e034      	b.n	80027ae <HAL_UART_Receive_IT+0x9e>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2200      	movs	r2, #0
 8002750:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a18      	ldr	r2, [pc, #96]	; (80027b8 <HAL_UART_Receive_IT+0xa8>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d01f      	beq.n	800279c <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d018      	beq.n	800279c <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	e853 3f00 	ldrex	r3, [r3]
 8002776:	613b      	str	r3, [r7, #16]
   return(result);
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800277e:	627b      	str	r3, [r7, #36]	; 0x24
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	461a      	mov	r2, r3
 8002786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002788:	623b      	str	r3, [r7, #32]
 800278a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800278c:	69f9      	ldr	r1, [r7, #28]
 800278e:	6a3a      	ldr	r2, [r7, #32]
 8002790:	e841 2300 	strex	r3, r2, [r1]
 8002794:	61bb      	str	r3, [r7, #24]
   return(result);
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1e6      	bne.n	800276a <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800279c:	88fb      	ldrh	r3, [r7, #6]
 800279e:	461a      	mov	r2, r3
 80027a0:	68b9      	ldr	r1, [r7, #8]
 80027a2:	68f8      	ldr	r0, [r7, #12]
 80027a4:	f000 ff7e 	bl	80036a4 <UART_Start_Receive_IT>
 80027a8:	4603      	mov	r3, r0
 80027aa:	e000      	b.n	80027ae <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80027ac:	2302      	movs	r3, #2
  }
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3728      	adds	r7, #40	; 0x28
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	40008000 	.word	0x40008000

080027bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b0ba      	sub	sp, #232	; 0xe8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	69db      	ldr	r3, [r3, #28]
 80027ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80027e2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80027e6:	f640 030f 	movw	r3, #2063	; 0x80f
 80027ea:	4013      	ands	r3, r2
 80027ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80027f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d115      	bne.n	8002824 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80027f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027fc:	f003 0320 	and.w	r3, r3, #32
 8002800:	2b00      	cmp	r3, #0
 8002802:	d00f      	beq.n	8002824 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002804:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002808:	f003 0320 	and.w	r3, r3, #32
 800280c:	2b00      	cmp	r3, #0
 800280e:	d009      	beq.n	8002824 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002814:	2b00      	cmp	r3, #0
 8002816:	f000 82a6 	beq.w	8002d66 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	4798      	blx	r3
      }
      return;
 8002822:	e2a0      	b.n	8002d66 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002824:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002828:	2b00      	cmp	r3, #0
 800282a:	f000 8117 	beq.w	8002a5c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800282e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	2b00      	cmp	r3, #0
 8002838:	d106      	bne.n	8002848 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800283a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800283e:	4b85      	ldr	r3, [pc, #532]	; (8002a54 <HAL_UART_IRQHandler+0x298>)
 8002840:	4013      	ands	r3, r2
 8002842:	2b00      	cmp	r3, #0
 8002844:	f000 810a 	beq.w	8002a5c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002848:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800284c:	f003 0301 	and.w	r3, r3, #1
 8002850:	2b00      	cmp	r3, #0
 8002852:	d011      	beq.n	8002878 <HAL_UART_IRQHandler+0xbc>
 8002854:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800285c:	2b00      	cmp	r3, #0
 800285e:	d00b      	beq.n	8002878 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2201      	movs	r2, #1
 8002866:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800286e:	f043 0201 	orr.w	r2, r3, #1
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002878:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800287c:	f003 0302 	and.w	r3, r3, #2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d011      	beq.n	80028a8 <HAL_UART_IRQHandler+0xec>
 8002884:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002888:	f003 0301 	and.w	r3, r3, #1
 800288c:	2b00      	cmp	r3, #0
 800288e:	d00b      	beq.n	80028a8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2202      	movs	r2, #2
 8002896:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800289e:	f043 0204 	orr.w	r2, r3, #4
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80028a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028ac:	f003 0304 	and.w	r3, r3, #4
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d011      	beq.n	80028d8 <HAL_UART_IRQHandler+0x11c>
 80028b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028b8:	f003 0301 	and.w	r3, r3, #1
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d00b      	beq.n	80028d8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2204      	movs	r2, #4
 80028c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028ce:	f043 0202 	orr.w	r2, r3, #2
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80028d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028dc:	f003 0308 	and.w	r3, r3, #8
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d017      	beq.n	8002914 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80028e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028e8:	f003 0320 	and.w	r3, r3, #32
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d105      	bne.n	80028fc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80028f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028f4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d00b      	beq.n	8002914 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2208      	movs	r2, #8
 8002902:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800290a:	f043 0208 	orr.w	r2, r3, #8
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002914:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002918:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800291c:	2b00      	cmp	r3, #0
 800291e:	d012      	beq.n	8002946 <HAL_UART_IRQHandler+0x18a>
 8002920:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002924:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d00c      	beq.n	8002946 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002934:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800293c:	f043 0220 	orr.w	r2, r3, #32
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800294c:	2b00      	cmp	r3, #0
 800294e:	f000 820c 	beq.w	8002d6a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002956:	f003 0320 	and.w	r3, r3, #32
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00d      	beq.n	800297a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800295e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002962:	f003 0320 	and.w	r3, r3, #32
 8002966:	2b00      	cmp	r3, #0
 8002968:	d007      	beq.n	800297a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800296e:	2b00      	cmp	r3, #0
 8002970:	d003      	beq.n	800297a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002980:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800298e:	2b40      	cmp	r3, #64	; 0x40
 8002990:	d005      	beq.n	800299e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002992:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002996:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800299a:	2b00      	cmp	r3, #0
 800299c:	d04f      	beq.n	8002a3e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 ff4a 	bl	8003838 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ae:	2b40      	cmp	r3, #64	; 0x40
 80029b0:	d141      	bne.n	8002a36 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	3308      	adds	r3, #8
 80029b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80029c0:	e853 3f00 	ldrex	r3, [r3]
 80029c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80029c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80029cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	3308      	adds	r3, #8
 80029da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80029de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80029e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80029ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80029ee:	e841 2300 	strex	r3, r2, [r1]
 80029f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80029f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1d9      	bne.n	80029b2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d013      	beq.n	8002a2e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a0a:	4a13      	ldr	r2, [pc, #76]	; (8002a58 <HAL_UART_IRQHandler+0x29c>)
 8002a0c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7fe f8f1 	bl	8000bfa <HAL_DMA_Abort_IT>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d017      	beq.n	8002a4e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8002a28:	4610      	mov	r0, r2
 8002a2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a2c:	e00f      	b.n	8002a4e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 f9ba 	bl	8002da8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a34:	e00b      	b.n	8002a4e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f000 f9b6 	bl	8002da8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a3c:	e007      	b.n	8002a4e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 f9b2 	bl	8002da8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8002a4c:	e18d      	b.n	8002d6a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a4e:	bf00      	nop
    return;
 8002a50:	e18b      	b.n	8002d6a <HAL_UART_IRQHandler+0x5ae>
 8002a52:	bf00      	nop
 8002a54:	04000120 	.word	0x04000120
 8002a58:	080038ff 	.word	0x080038ff

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	f040 8146 	bne.w	8002cf2 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002a66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a6a:	f003 0310 	and.w	r3, r3, #16
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	f000 813f 	beq.w	8002cf2 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002a74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a78:	f003 0310 	and.w	r3, r3, #16
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	f000 8138 	beq.w	8002cf2 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2210      	movs	r2, #16
 8002a88:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a94:	2b40      	cmp	r3, #64	; 0x40
 8002a96:	f040 80b4 	bne.w	8002c02 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002aa6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	f000 815f 	beq.w	8002d6e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002ab6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002aba:	429a      	cmp	r2, r3
 8002abc:	f080 8157 	bcs.w	8002d6e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002ac6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0320 	and.w	r3, r3, #32
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f040 8085 	bne.w	8002be6 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ae4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ae8:	e853 3f00 	ldrex	r3, [r3]
 8002aec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002af0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002af4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002af8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	461a      	mov	r2, r3
 8002b02:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002b06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002b0a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b0e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002b12:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002b16:	e841 2300 	strex	r3, r2, [r1]
 8002b1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002b1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1da      	bne.n	8002adc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	3308      	adds	r3, #8
 8002b2c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b30:	e853 3f00 	ldrex	r3, [r3]
 8002b34:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002b36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b38:	f023 0301 	bic.w	r3, r3, #1
 8002b3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	3308      	adds	r3, #8
 8002b46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002b4a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002b4e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b50:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002b52:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002b56:	e841 2300 	strex	r3, r2, [r1]
 8002b5a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002b5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1e1      	bne.n	8002b26 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	3308      	adds	r3, #8
 8002b68:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b6c:	e853 3f00 	ldrex	r3, [r3]
 8002b70:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002b72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	3308      	adds	r3, #8
 8002b82:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002b86:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002b88:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b8a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002b8c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002b8e:	e841 2300 	strex	r3, r2, [r1]
 8002b92:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002b94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1e3      	bne.n	8002b62 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2220      	movs	r2, #32
 8002b9e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bae:	e853 3f00 	ldrex	r3, [r3]
 8002bb2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002bb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bb6:	f023 0310 	bic.w	r3, r3, #16
 8002bba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002bc8:	65bb      	str	r3, [r7, #88]	; 0x58
 8002bca:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bcc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002bce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002bd0:	e841 2300 	strex	r3, r2, [r1]
 8002bd4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002bd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d1e4      	bne.n	8002ba6 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7fd ffcc 	bl	8000b7e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 f8de 	bl	8002dbc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c00:	e0b5      	b.n	8002d6e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	f000 80a7 	beq.w	8002d72 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8002c24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f000 80a2 	beq.w	8002d72 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c36:	e853 3f00 	ldrex	r3, [r3]
 8002c3a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c3e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002c42:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002c50:	647b      	str	r3, [r7, #68]	; 0x44
 8002c52:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c54:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002c56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c58:	e841 2300 	strex	r3, r2, [r1]
 8002c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002c5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d1e4      	bne.n	8002c2e <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	3308      	adds	r3, #8
 8002c6a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6e:	e853 3f00 	ldrex	r3, [r3]
 8002c72:	623b      	str	r3, [r7, #32]
   return(result);
 8002c74:	6a3b      	ldr	r3, [r7, #32]
 8002c76:	f023 0301 	bic.w	r3, r3, #1
 8002c7a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	3308      	adds	r3, #8
 8002c84:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002c88:	633a      	str	r2, [r7, #48]	; 0x30
 8002c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c8c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002c8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c90:	e841 2300 	strex	r3, r2, [r1]
 8002c94:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d1e3      	bne.n	8002c64 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2220      	movs	r2, #32
 8002ca0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	e853 3f00 	ldrex	r3, [r3]
 8002cba:	60fb      	str	r3, [r7, #12]
   return(result);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f023 0310 	bic.w	r3, r3, #16
 8002cc2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	461a      	mov	r2, r3
 8002ccc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002cd0:	61fb      	str	r3, [r7, #28]
 8002cd2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cd4:	69b9      	ldr	r1, [r7, #24]
 8002cd6:	69fa      	ldr	r2, [r7, #28]
 8002cd8:	e841 2300 	strex	r3, r2, [r1]
 8002cdc:	617b      	str	r3, [r7, #20]
   return(result);
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d1e4      	bne.n	8002cae <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ce4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ce8:	4619      	mov	r1, r3
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 f866 	bl	8002dbc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002cf0:	e03f      	b.n	8002d72 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002cf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00e      	beq.n	8002d1c <HAL_UART_IRQHandler+0x560>
 8002cfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d008      	beq.n	8002d1c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002d12:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f000 ff92 	bl	8003c3e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d1a:	e02d      	b.n	8002d78 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002d1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d00e      	beq.n	8002d46 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002d28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d008      	beq.n	8002d46 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d01c      	beq.n	8002d76 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	4798      	blx	r3
    }
    return;
 8002d44:	e017      	b.n	8002d76 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d012      	beq.n	8002d78 <HAL_UART_IRQHandler+0x5bc>
 8002d52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00c      	beq.n	8002d78 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 fde3 	bl	800392a <UART_EndTransmit_IT>
    return;
 8002d64:	e008      	b.n	8002d78 <HAL_UART_IRQHandler+0x5bc>
      return;
 8002d66:	bf00      	nop
 8002d68:	e006      	b.n	8002d78 <HAL_UART_IRQHandler+0x5bc>
    return;
 8002d6a:	bf00      	nop
 8002d6c:	e004      	b.n	8002d78 <HAL_UART_IRQHandler+0x5bc>
      return;
 8002d6e:	bf00      	nop
 8002d70:	e002      	b.n	8002d78 <HAL_UART_IRQHandler+0x5bc>
      return;
 8002d72:	bf00      	nop
 8002d74:	e000      	b.n	8002d78 <HAL_UART_IRQHandler+0x5bc>
    return;
 8002d76:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8002d78:	37e8      	adds	r7, #232	; 0xe8
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop

08002d80 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002db0:	bf00      	nop
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002dc8:	bf00      	nop
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002dd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dd8:	b08a      	sub	sp, #40	; 0x28
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002dde:	2300      	movs	r3, #0
 8002de0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	689a      	ldr	r2, [r3, #8]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	691b      	ldr	r3, [r3, #16]
 8002dec:	431a      	orrs	r2, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	431a      	orrs	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	69db      	ldr	r3, [r3, #28]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	4ba4      	ldr	r3, [pc, #656]	; (8003094 <UART_SetConfig+0x2c0>)
 8002e04:	4013      	ands	r3, r2
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	6812      	ldr	r2, [r2, #0]
 8002e0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e0c:	430b      	orrs	r3, r1
 8002e0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	68da      	ldr	r2, [r3, #12]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	430a      	orrs	r2, r1
 8002e24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a99      	ldr	r2, [pc, #612]	; (8003098 <UART_SetConfig+0x2c4>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d004      	beq.n	8002e40 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6a1b      	ldr	r3, [r3, #32]
 8002e3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e50:	430a      	orrs	r2, r1
 8002e52:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a90      	ldr	r2, [pc, #576]	; (800309c <UART_SetConfig+0x2c8>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d126      	bne.n	8002eac <UART_SetConfig+0xd8>
 8002e5e:	4b90      	ldr	r3, [pc, #576]	; (80030a0 <UART_SetConfig+0x2cc>)
 8002e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e64:	f003 0303 	and.w	r3, r3, #3
 8002e68:	2b03      	cmp	r3, #3
 8002e6a:	d81b      	bhi.n	8002ea4 <UART_SetConfig+0xd0>
 8002e6c:	a201      	add	r2, pc, #4	; (adr r2, 8002e74 <UART_SetConfig+0xa0>)
 8002e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e72:	bf00      	nop
 8002e74:	08002e85 	.word	0x08002e85
 8002e78:	08002e95 	.word	0x08002e95
 8002e7c:	08002e8d 	.word	0x08002e8d
 8002e80:	08002e9d 	.word	0x08002e9d
 8002e84:	2301      	movs	r3, #1
 8002e86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e8a:	e116      	b.n	80030ba <UART_SetConfig+0x2e6>
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e92:	e112      	b.n	80030ba <UART_SetConfig+0x2e6>
 8002e94:	2304      	movs	r3, #4
 8002e96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e9a:	e10e      	b.n	80030ba <UART_SetConfig+0x2e6>
 8002e9c:	2308      	movs	r3, #8
 8002e9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ea2:	e10a      	b.n	80030ba <UART_SetConfig+0x2e6>
 8002ea4:	2310      	movs	r3, #16
 8002ea6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002eaa:	e106      	b.n	80030ba <UART_SetConfig+0x2e6>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a7c      	ldr	r2, [pc, #496]	; (80030a4 <UART_SetConfig+0x2d0>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d138      	bne.n	8002f28 <UART_SetConfig+0x154>
 8002eb6:	4b7a      	ldr	r3, [pc, #488]	; (80030a0 <UART_SetConfig+0x2cc>)
 8002eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ebc:	f003 030c 	and.w	r3, r3, #12
 8002ec0:	2b0c      	cmp	r3, #12
 8002ec2:	d82d      	bhi.n	8002f20 <UART_SetConfig+0x14c>
 8002ec4:	a201      	add	r2, pc, #4	; (adr r2, 8002ecc <UART_SetConfig+0xf8>)
 8002ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eca:	bf00      	nop
 8002ecc:	08002f01 	.word	0x08002f01
 8002ed0:	08002f21 	.word	0x08002f21
 8002ed4:	08002f21 	.word	0x08002f21
 8002ed8:	08002f21 	.word	0x08002f21
 8002edc:	08002f11 	.word	0x08002f11
 8002ee0:	08002f21 	.word	0x08002f21
 8002ee4:	08002f21 	.word	0x08002f21
 8002ee8:	08002f21 	.word	0x08002f21
 8002eec:	08002f09 	.word	0x08002f09
 8002ef0:	08002f21 	.word	0x08002f21
 8002ef4:	08002f21 	.word	0x08002f21
 8002ef8:	08002f21 	.word	0x08002f21
 8002efc:	08002f19 	.word	0x08002f19
 8002f00:	2300      	movs	r3, #0
 8002f02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f06:	e0d8      	b.n	80030ba <UART_SetConfig+0x2e6>
 8002f08:	2302      	movs	r3, #2
 8002f0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f0e:	e0d4      	b.n	80030ba <UART_SetConfig+0x2e6>
 8002f10:	2304      	movs	r3, #4
 8002f12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f16:	e0d0      	b.n	80030ba <UART_SetConfig+0x2e6>
 8002f18:	2308      	movs	r3, #8
 8002f1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f1e:	e0cc      	b.n	80030ba <UART_SetConfig+0x2e6>
 8002f20:	2310      	movs	r3, #16
 8002f22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f26:	e0c8      	b.n	80030ba <UART_SetConfig+0x2e6>
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a5e      	ldr	r2, [pc, #376]	; (80030a8 <UART_SetConfig+0x2d4>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d125      	bne.n	8002f7e <UART_SetConfig+0x1aa>
 8002f32:	4b5b      	ldr	r3, [pc, #364]	; (80030a0 <UART_SetConfig+0x2cc>)
 8002f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f38:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002f3c:	2b30      	cmp	r3, #48	; 0x30
 8002f3e:	d016      	beq.n	8002f6e <UART_SetConfig+0x19a>
 8002f40:	2b30      	cmp	r3, #48	; 0x30
 8002f42:	d818      	bhi.n	8002f76 <UART_SetConfig+0x1a2>
 8002f44:	2b20      	cmp	r3, #32
 8002f46:	d00a      	beq.n	8002f5e <UART_SetConfig+0x18a>
 8002f48:	2b20      	cmp	r3, #32
 8002f4a:	d814      	bhi.n	8002f76 <UART_SetConfig+0x1a2>
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d002      	beq.n	8002f56 <UART_SetConfig+0x182>
 8002f50:	2b10      	cmp	r3, #16
 8002f52:	d008      	beq.n	8002f66 <UART_SetConfig+0x192>
 8002f54:	e00f      	b.n	8002f76 <UART_SetConfig+0x1a2>
 8002f56:	2300      	movs	r3, #0
 8002f58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f5c:	e0ad      	b.n	80030ba <UART_SetConfig+0x2e6>
 8002f5e:	2302      	movs	r3, #2
 8002f60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f64:	e0a9      	b.n	80030ba <UART_SetConfig+0x2e6>
 8002f66:	2304      	movs	r3, #4
 8002f68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f6c:	e0a5      	b.n	80030ba <UART_SetConfig+0x2e6>
 8002f6e:	2308      	movs	r3, #8
 8002f70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f74:	e0a1      	b.n	80030ba <UART_SetConfig+0x2e6>
 8002f76:	2310      	movs	r3, #16
 8002f78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f7c:	e09d      	b.n	80030ba <UART_SetConfig+0x2e6>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a4a      	ldr	r2, [pc, #296]	; (80030ac <UART_SetConfig+0x2d8>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d125      	bne.n	8002fd4 <UART_SetConfig+0x200>
 8002f88:	4b45      	ldr	r3, [pc, #276]	; (80030a0 <UART_SetConfig+0x2cc>)
 8002f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f8e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002f92:	2bc0      	cmp	r3, #192	; 0xc0
 8002f94:	d016      	beq.n	8002fc4 <UART_SetConfig+0x1f0>
 8002f96:	2bc0      	cmp	r3, #192	; 0xc0
 8002f98:	d818      	bhi.n	8002fcc <UART_SetConfig+0x1f8>
 8002f9a:	2b80      	cmp	r3, #128	; 0x80
 8002f9c:	d00a      	beq.n	8002fb4 <UART_SetConfig+0x1e0>
 8002f9e:	2b80      	cmp	r3, #128	; 0x80
 8002fa0:	d814      	bhi.n	8002fcc <UART_SetConfig+0x1f8>
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d002      	beq.n	8002fac <UART_SetConfig+0x1d8>
 8002fa6:	2b40      	cmp	r3, #64	; 0x40
 8002fa8:	d008      	beq.n	8002fbc <UART_SetConfig+0x1e8>
 8002faa:	e00f      	b.n	8002fcc <UART_SetConfig+0x1f8>
 8002fac:	2300      	movs	r3, #0
 8002fae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fb2:	e082      	b.n	80030ba <UART_SetConfig+0x2e6>
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fba:	e07e      	b.n	80030ba <UART_SetConfig+0x2e6>
 8002fbc:	2304      	movs	r3, #4
 8002fbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fc2:	e07a      	b.n	80030ba <UART_SetConfig+0x2e6>
 8002fc4:	2308      	movs	r3, #8
 8002fc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fca:	e076      	b.n	80030ba <UART_SetConfig+0x2e6>
 8002fcc:	2310      	movs	r3, #16
 8002fce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fd2:	e072      	b.n	80030ba <UART_SetConfig+0x2e6>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a35      	ldr	r2, [pc, #212]	; (80030b0 <UART_SetConfig+0x2dc>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d12a      	bne.n	8003034 <UART_SetConfig+0x260>
 8002fde:	4b30      	ldr	r3, [pc, #192]	; (80030a0 <UART_SetConfig+0x2cc>)
 8002fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fe8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fec:	d01a      	beq.n	8003024 <UART_SetConfig+0x250>
 8002fee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ff2:	d81b      	bhi.n	800302c <UART_SetConfig+0x258>
 8002ff4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ff8:	d00c      	beq.n	8003014 <UART_SetConfig+0x240>
 8002ffa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ffe:	d815      	bhi.n	800302c <UART_SetConfig+0x258>
 8003000:	2b00      	cmp	r3, #0
 8003002:	d003      	beq.n	800300c <UART_SetConfig+0x238>
 8003004:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003008:	d008      	beq.n	800301c <UART_SetConfig+0x248>
 800300a:	e00f      	b.n	800302c <UART_SetConfig+0x258>
 800300c:	2300      	movs	r3, #0
 800300e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003012:	e052      	b.n	80030ba <UART_SetConfig+0x2e6>
 8003014:	2302      	movs	r3, #2
 8003016:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800301a:	e04e      	b.n	80030ba <UART_SetConfig+0x2e6>
 800301c:	2304      	movs	r3, #4
 800301e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003022:	e04a      	b.n	80030ba <UART_SetConfig+0x2e6>
 8003024:	2308      	movs	r3, #8
 8003026:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800302a:	e046      	b.n	80030ba <UART_SetConfig+0x2e6>
 800302c:	2310      	movs	r3, #16
 800302e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003032:	e042      	b.n	80030ba <UART_SetConfig+0x2e6>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a17      	ldr	r2, [pc, #92]	; (8003098 <UART_SetConfig+0x2c4>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d13a      	bne.n	80030b4 <UART_SetConfig+0x2e0>
 800303e:	4b18      	ldr	r3, [pc, #96]	; (80030a0 <UART_SetConfig+0x2cc>)
 8003040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003044:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003048:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800304c:	d01a      	beq.n	8003084 <UART_SetConfig+0x2b0>
 800304e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003052:	d81b      	bhi.n	800308c <UART_SetConfig+0x2b8>
 8003054:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003058:	d00c      	beq.n	8003074 <UART_SetConfig+0x2a0>
 800305a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800305e:	d815      	bhi.n	800308c <UART_SetConfig+0x2b8>
 8003060:	2b00      	cmp	r3, #0
 8003062:	d003      	beq.n	800306c <UART_SetConfig+0x298>
 8003064:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003068:	d008      	beq.n	800307c <UART_SetConfig+0x2a8>
 800306a:	e00f      	b.n	800308c <UART_SetConfig+0x2b8>
 800306c:	2300      	movs	r3, #0
 800306e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003072:	e022      	b.n	80030ba <UART_SetConfig+0x2e6>
 8003074:	2302      	movs	r3, #2
 8003076:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800307a:	e01e      	b.n	80030ba <UART_SetConfig+0x2e6>
 800307c:	2304      	movs	r3, #4
 800307e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003082:	e01a      	b.n	80030ba <UART_SetConfig+0x2e6>
 8003084:	2308      	movs	r3, #8
 8003086:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800308a:	e016      	b.n	80030ba <UART_SetConfig+0x2e6>
 800308c:	2310      	movs	r3, #16
 800308e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003092:	e012      	b.n	80030ba <UART_SetConfig+0x2e6>
 8003094:	efff69f3 	.word	0xefff69f3
 8003098:	40008000 	.word	0x40008000
 800309c:	40013800 	.word	0x40013800
 80030a0:	40021000 	.word	0x40021000
 80030a4:	40004400 	.word	0x40004400
 80030a8:	40004800 	.word	0x40004800
 80030ac:	40004c00 	.word	0x40004c00
 80030b0:	40005000 	.word	0x40005000
 80030b4:	2310      	movs	r3, #16
 80030b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a9f      	ldr	r2, [pc, #636]	; (800333c <UART_SetConfig+0x568>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d17a      	bne.n	80031ba <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80030c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030c8:	2b08      	cmp	r3, #8
 80030ca:	d824      	bhi.n	8003116 <UART_SetConfig+0x342>
 80030cc:	a201      	add	r2, pc, #4	; (adr r2, 80030d4 <UART_SetConfig+0x300>)
 80030ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d2:	bf00      	nop
 80030d4:	080030f9 	.word	0x080030f9
 80030d8:	08003117 	.word	0x08003117
 80030dc:	08003101 	.word	0x08003101
 80030e0:	08003117 	.word	0x08003117
 80030e4:	08003107 	.word	0x08003107
 80030e8:	08003117 	.word	0x08003117
 80030ec:	08003117 	.word	0x08003117
 80030f0:	08003117 	.word	0x08003117
 80030f4:	0800310f 	.word	0x0800310f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030f8:	f7fe fd74 	bl	8001be4 <HAL_RCC_GetPCLK1Freq>
 80030fc:	61f8      	str	r0, [r7, #28]
        break;
 80030fe:	e010      	b.n	8003122 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003100:	4b8f      	ldr	r3, [pc, #572]	; (8003340 <UART_SetConfig+0x56c>)
 8003102:	61fb      	str	r3, [r7, #28]
        break;
 8003104:	e00d      	b.n	8003122 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003106:	f7fe fcd5 	bl	8001ab4 <HAL_RCC_GetSysClockFreq>
 800310a:	61f8      	str	r0, [r7, #28]
        break;
 800310c:	e009      	b.n	8003122 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800310e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003112:	61fb      	str	r3, [r7, #28]
        break;
 8003114:	e005      	b.n	8003122 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003116:	2300      	movs	r3, #0
 8003118:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003120:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	2b00      	cmp	r3, #0
 8003126:	f000 80fb 	beq.w	8003320 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	685a      	ldr	r2, [r3, #4]
 800312e:	4613      	mov	r3, r2
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	4413      	add	r3, r2
 8003134:	69fa      	ldr	r2, [r7, #28]
 8003136:	429a      	cmp	r2, r3
 8003138:	d305      	bcc.n	8003146 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003140:	69fa      	ldr	r2, [r7, #28]
 8003142:	429a      	cmp	r2, r3
 8003144:	d903      	bls.n	800314e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800314c:	e0e8      	b.n	8003320 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	2200      	movs	r2, #0
 8003152:	461c      	mov	r4, r3
 8003154:	4615      	mov	r5, r2
 8003156:	f04f 0200 	mov.w	r2, #0
 800315a:	f04f 0300 	mov.w	r3, #0
 800315e:	022b      	lsls	r3, r5, #8
 8003160:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003164:	0222      	lsls	r2, r4, #8
 8003166:	68f9      	ldr	r1, [r7, #12]
 8003168:	6849      	ldr	r1, [r1, #4]
 800316a:	0849      	lsrs	r1, r1, #1
 800316c:	2000      	movs	r0, #0
 800316e:	4688      	mov	r8, r1
 8003170:	4681      	mov	r9, r0
 8003172:	eb12 0a08 	adds.w	sl, r2, r8
 8003176:	eb43 0b09 	adc.w	fp, r3, r9
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	603b      	str	r3, [r7, #0]
 8003182:	607a      	str	r2, [r7, #4]
 8003184:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003188:	4650      	mov	r0, sl
 800318a:	4659      	mov	r1, fp
 800318c:	f7fd f81c 	bl	80001c8 <__aeabi_uldivmod>
 8003190:	4602      	mov	r2, r0
 8003192:	460b      	mov	r3, r1
 8003194:	4613      	mov	r3, r2
 8003196:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800319e:	d308      	bcc.n	80031b2 <UART_SetConfig+0x3de>
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031a6:	d204      	bcs.n	80031b2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	60da      	str	r2, [r3, #12]
 80031b0:	e0b6      	b.n	8003320 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80031b8:	e0b2      	b.n	8003320 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031c2:	d15e      	bne.n	8003282 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80031c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031c8:	2b08      	cmp	r3, #8
 80031ca:	d828      	bhi.n	800321e <UART_SetConfig+0x44a>
 80031cc:	a201      	add	r2, pc, #4	; (adr r2, 80031d4 <UART_SetConfig+0x400>)
 80031ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031d2:	bf00      	nop
 80031d4:	080031f9 	.word	0x080031f9
 80031d8:	08003201 	.word	0x08003201
 80031dc:	08003209 	.word	0x08003209
 80031e0:	0800321f 	.word	0x0800321f
 80031e4:	0800320f 	.word	0x0800320f
 80031e8:	0800321f 	.word	0x0800321f
 80031ec:	0800321f 	.word	0x0800321f
 80031f0:	0800321f 	.word	0x0800321f
 80031f4:	08003217 	.word	0x08003217
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031f8:	f7fe fcf4 	bl	8001be4 <HAL_RCC_GetPCLK1Freq>
 80031fc:	61f8      	str	r0, [r7, #28]
        break;
 80031fe:	e014      	b.n	800322a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003200:	f7fe fd06 	bl	8001c10 <HAL_RCC_GetPCLK2Freq>
 8003204:	61f8      	str	r0, [r7, #28]
        break;
 8003206:	e010      	b.n	800322a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003208:	4b4d      	ldr	r3, [pc, #308]	; (8003340 <UART_SetConfig+0x56c>)
 800320a:	61fb      	str	r3, [r7, #28]
        break;
 800320c:	e00d      	b.n	800322a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800320e:	f7fe fc51 	bl	8001ab4 <HAL_RCC_GetSysClockFreq>
 8003212:	61f8      	str	r0, [r7, #28]
        break;
 8003214:	e009      	b.n	800322a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003216:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800321a:	61fb      	str	r3, [r7, #28]
        break;
 800321c:	e005      	b.n	800322a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800321e:	2300      	movs	r3, #0
 8003220:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003228:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d077      	beq.n	8003320 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	005a      	lsls	r2, r3, #1
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	085b      	lsrs	r3, r3, #1
 800323a:	441a      	add	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	fbb2 f3f3 	udiv	r3, r2, r3
 8003244:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	2b0f      	cmp	r3, #15
 800324a:	d916      	bls.n	800327a <UART_SetConfig+0x4a6>
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003252:	d212      	bcs.n	800327a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003254:	69bb      	ldr	r3, [r7, #24]
 8003256:	b29b      	uxth	r3, r3
 8003258:	f023 030f 	bic.w	r3, r3, #15
 800325c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	085b      	lsrs	r3, r3, #1
 8003262:	b29b      	uxth	r3, r3
 8003264:	f003 0307 	and.w	r3, r3, #7
 8003268:	b29a      	uxth	r2, r3
 800326a:	8afb      	ldrh	r3, [r7, #22]
 800326c:	4313      	orrs	r3, r2
 800326e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	8afa      	ldrh	r2, [r7, #22]
 8003276:	60da      	str	r2, [r3, #12]
 8003278:	e052      	b.n	8003320 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003280:	e04e      	b.n	8003320 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003282:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003286:	2b08      	cmp	r3, #8
 8003288:	d827      	bhi.n	80032da <UART_SetConfig+0x506>
 800328a:	a201      	add	r2, pc, #4	; (adr r2, 8003290 <UART_SetConfig+0x4bc>)
 800328c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003290:	080032b5 	.word	0x080032b5
 8003294:	080032bd 	.word	0x080032bd
 8003298:	080032c5 	.word	0x080032c5
 800329c:	080032db 	.word	0x080032db
 80032a0:	080032cb 	.word	0x080032cb
 80032a4:	080032db 	.word	0x080032db
 80032a8:	080032db 	.word	0x080032db
 80032ac:	080032db 	.word	0x080032db
 80032b0:	080032d3 	.word	0x080032d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032b4:	f7fe fc96 	bl	8001be4 <HAL_RCC_GetPCLK1Freq>
 80032b8:	61f8      	str	r0, [r7, #28]
        break;
 80032ba:	e014      	b.n	80032e6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032bc:	f7fe fca8 	bl	8001c10 <HAL_RCC_GetPCLK2Freq>
 80032c0:	61f8      	str	r0, [r7, #28]
        break;
 80032c2:	e010      	b.n	80032e6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032c4:	4b1e      	ldr	r3, [pc, #120]	; (8003340 <UART_SetConfig+0x56c>)
 80032c6:	61fb      	str	r3, [r7, #28]
        break;
 80032c8:	e00d      	b.n	80032e6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032ca:	f7fe fbf3 	bl	8001ab4 <HAL_RCC_GetSysClockFreq>
 80032ce:	61f8      	str	r0, [r7, #28]
        break;
 80032d0:	e009      	b.n	80032e6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032d6:	61fb      	str	r3, [r7, #28]
        break;
 80032d8:	e005      	b.n	80032e6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80032da:	2300      	movs	r3, #0
 80032dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80032e4:	bf00      	nop
    }

    if (pclk != 0U)
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d019      	beq.n	8003320 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	085a      	lsrs	r2, r3, #1
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	441a      	add	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80032fe:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	2b0f      	cmp	r3, #15
 8003304:	d909      	bls.n	800331a <UART_SetConfig+0x546>
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800330c:	d205      	bcs.n	800331a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	b29a      	uxth	r2, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	60da      	str	r2, [r3, #12]
 8003318:	e002      	b.n	8003320 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2200      	movs	r2, #0
 8003324:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800332c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003330:	4618      	mov	r0, r3
 8003332:	3728      	adds	r7, #40	; 0x28
 8003334:	46bd      	mov	sp, r7
 8003336:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800333a:	bf00      	nop
 800333c:	40008000 	.word	0x40008000
 8003340:	00f42400 	.word	0x00f42400

08003344 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003350:	f003 0301 	and.w	r3, r3, #1
 8003354:	2b00      	cmp	r3, #0
 8003356:	d00a      	beq.n	800336e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	430a      	orrs	r2, r1
 800336c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00a      	beq.n	8003390 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	430a      	orrs	r2, r1
 800338e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003394:	f003 0304 	and.w	r3, r3, #4
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00a      	beq.n	80033b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	430a      	orrs	r2, r1
 80033b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b6:	f003 0308 	and.w	r3, r3, #8
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00a      	beq.n	80033d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	430a      	orrs	r2, r1
 80033d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d8:	f003 0310 	and.w	r3, r3, #16
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d00a      	beq.n	80033f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	430a      	orrs	r2, r1
 80033f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fa:	f003 0320 	and.w	r3, r3, #32
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00a      	beq.n	8003418 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	430a      	orrs	r2, r1
 8003416:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003420:	2b00      	cmp	r3, #0
 8003422:	d01a      	beq.n	800345a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	430a      	orrs	r2, r1
 8003438:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003442:	d10a      	bne.n	800345a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	430a      	orrs	r2, r1
 8003458:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00a      	beq.n	800347c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	430a      	orrs	r2, r1
 800347a:	605a      	str	r2, [r3, #4]
  }
}
 800347c:	bf00      	nop
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b086      	sub	sp, #24
 800348c:	af02      	add	r7, sp, #8
 800348e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003498:	f7fd fa54 	bl	8000944 <HAL_GetTick>
 800349c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0308 	and.w	r3, r3, #8
 80034a8:	2b08      	cmp	r3, #8
 80034aa:	d10e      	bne.n	80034ca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034b0:	9300      	str	r3, [sp, #0]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 f82d 	bl	800351a <UART_WaitOnFlagUntilTimeout>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e023      	b.n	8003512 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0304 	and.w	r3, r3, #4
 80034d4:	2b04      	cmp	r3, #4
 80034d6:	d10e      	bne.n	80034f6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034dc:	9300      	str	r3, [sp, #0]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 f817 	bl	800351a <UART_WaitOnFlagUntilTimeout>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e00d      	b.n	8003512 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2220      	movs	r2, #32
 80034fa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2220      	movs	r2, #32
 8003500:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3710      	adds	r7, #16
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b09c      	sub	sp, #112	; 0x70
 800351e:	af00      	add	r7, sp, #0
 8003520:	60f8      	str	r0, [r7, #12]
 8003522:	60b9      	str	r1, [r7, #8]
 8003524:	603b      	str	r3, [r7, #0]
 8003526:	4613      	mov	r3, r2
 8003528:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800352a:	e0a5      	b.n	8003678 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800352c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800352e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003532:	f000 80a1 	beq.w	8003678 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003536:	f7fd fa05 	bl	8000944 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003542:	429a      	cmp	r2, r3
 8003544:	d302      	bcc.n	800354c <UART_WaitOnFlagUntilTimeout+0x32>
 8003546:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003548:	2b00      	cmp	r3, #0
 800354a:	d13e      	bne.n	80035ca <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003552:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003554:	e853 3f00 	ldrex	r3, [r3]
 8003558:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800355a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800355c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003560:	667b      	str	r3, [r7, #100]	; 0x64
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	461a      	mov	r2, r3
 8003568:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800356a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800356c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800356e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003570:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003572:	e841 2300 	strex	r3, r2, [r1]
 8003576:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003578:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800357a:	2b00      	cmp	r3, #0
 800357c:	d1e6      	bne.n	800354c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	3308      	adds	r3, #8
 8003584:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003588:	e853 3f00 	ldrex	r3, [r3]
 800358c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800358e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003590:	f023 0301 	bic.w	r3, r3, #1
 8003594:	663b      	str	r3, [r7, #96]	; 0x60
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	3308      	adds	r3, #8
 800359c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800359e:	64ba      	str	r2, [r7, #72]	; 0x48
 80035a0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80035a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035a6:	e841 2300 	strex	r3, r2, [r1]
 80035aa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80035ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1e5      	bne.n	800357e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2220      	movs	r2, #32
 80035b6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2220      	movs	r2, #32
 80035bc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e067      	b.n	800369a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0304 	and.w	r3, r3, #4
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d04f      	beq.n	8003678 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	69db      	ldr	r3, [r3, #28]
 80035de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035e6:	d147      	bne.n	8003678 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035f0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035fa:	e853 3f00 	ldrex	r3, [r3]
 80035fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003602:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003606:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	461a      	mov	r2, r3
 800360e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003610:	637b      	str	r3, [r7, #52]	; 0x34
 8003612:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003614:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003616:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003618:	e841 2300 	strex	r3, r2, [r1]
 800361c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800361e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1e6      	bne.n	80035f2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	3308      	adds	r3, #8
 800362a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	e853 3f00 	ldrex	r3, [r3]
 8003632:	613b      	str	r3, [r7, #16]
   return(result);
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	f023 0301 	bic.w	r3, r3, #1
 800363a:	66bb      	str	r3, [r7, #104]	; 0x68
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	3308      	adds	r3, #8
 8003642:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003644:	623a      	str	r2, [r7, #32]
 8003646:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003648:	69f9      	ldr	r1, [r7, #28]
 800364a:	6a3a      	ldr	r2, [r7, #32]
 800364c:	e841 2300 	strex	r3, r2, [r1]
 8003650:	61bb      	str	r3, [r7, #24]
   return(result);
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1e5      	bne.n	8003624 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2220      	movs	r2, #32
 800365c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2220      	movs	r2, #32
 8003662:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2220      	movs	r2, #32
 8003668:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e010      	b.n	800369a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	69da      	ldr	r2, [r3, #28]
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	4013      	ands	r3, r2
 8003682:	68ba      	ldr	r2, [r7, #8]
 8003684:	429a      	cmp	r2, r3
 8003686:	bf0c      	ite	eq
 8003688:	2301      	moveq	r3, #1
 800368a:	2300      	movne	r3, #0
 800368c:	b2db      	uxtb	r3, r3
 800368e:	461a      	mov	r2, r3
 8003690:	79fb      	ldrb	r3, [r7, #7]
 8003692:	429a      	cmp	r2, r3
 8003694:	f43f af4a 	beq.w	800352c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3770      	adds	r7, #112	; 0x70
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
	...

080036a4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b097      	sub	sp, #92	; 0x5c
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	4613      	mov	r3, r2
 80036b0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	68ba      	ldr	r2, [r7, #8]
 80036b6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	88fa      	ldrh	r2, [r7, #6]
 80036bc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	88fa      	ldrh	r2, [r7, #6]
 80036c4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036d6:	d10e      	bne.n	80036f6 <UART_Start_Receive_IT+0x52>
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d105      	bne.n	80036ec <UART_Start_Receive_IT+0x48>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80036e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80036ea:	e02d      	b.n	8003748 <UART_Start_Receive_IT+0xa4>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	22ff      	movs	r2, #255	; 0xff
 80036f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80036f4:	e028      	b.n	8003748 <UART_Start_Receive_IT+0xa4>
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d10d      	bne.n	800371a <UART_Start_Receive_IT+0x76>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d104      	bne.n	8003710 <UART_Start_Receive_IT+0x6c>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	22ff      	movs	r2, #255	; 0xff
 800370a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800370e:	e01b      	b.n	8003748 <UART_Start_Receive_IT+0xa4>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	227f      	movs	r2, #127	; 0x7f
 8003714:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003718:	e016      	b.n	8003748 <UART_Start_Receive_IT+0xa4>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003722:	d10d      	bne.n	8003740 <UART_Start_Receive_IT+0x9c>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d104      	bne.n	8003736 <UART_Start_Receive_IT+0x92>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	227f      	movs	r2, #127	; 0x7f
 8003730:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003734:	e008      	b.n	8003748 <UART_Start_Receive_IT+0xa4>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	223f      	movs	r2, #63	; 0x3f
 800373a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800373e:	e003      	b.n	8003748 <UART_Start_Receive_IT+0xa4>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2200      	movs	r2, #0
 8003744:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2200      	movs	r2, #0
 800374c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2222      	movs	r2, #34	; 0x22
 8003754:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	3308      	adds	r3, #8
 800375c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800375e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003760:	e853 3f00 	ldrex	r3, [r3]
 8003764:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003768:	f043 0301 	orr.w	r3, r3, #1
 800376c:	657b      	str	r3, [r7, #84]	; 0x54
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	3308      	adds	r3, #8
 8003774:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003776:	64ba      	str	r2, [r7, #72]	; 0x48
 8003778:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800377a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800377c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800377e:	e841 2300 	strex	r3, r2, [r1]
 8003782:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003784:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003786:	2b00      	cmp	r3, #0
 8003788:	d1e5      	bne.n	8003756 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003792:	d107      	bne.n	80037a4 <UART_Start_Receive_IT+0x100>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d103      	bne.n	80037a4 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	4a24      	ldr	r2, [pc, #144]	; (8003830 <UART_Start_Receive_IT+0x18c>)
 80037a0:	665a      	str	r2, [r3, #100]	; 0x64
 80037a2:	e002      	b.n	80037aa <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	4a23      	ldr	r2, [pc, #140]	; (8003834 <UART_Start_Receive_IT+0x190>)
 80037a8:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d019      	beq.n	80037ee <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c2:	e853 3f00 	ldrex	r3, [r3]
 80037c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ca:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80037ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	461a      	mov	r2, r3
 80037d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037d8:	637b      	str	r3, [r7, #52]	; 0x34
 80037da:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80037de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037e0:	e841 2300 	strex	r3, r2, [r1]
 80037e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80037e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d1e6      	bne.n	80037ba <UART_Start_Receive_IT+0x116>
 80037ec:	e018      	b.n	8003820 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	e853 3f00 	ldrex	r3, [r3]
 80037fa:	613b      	str	r3, [r7, #16]
   return(result);
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	f043 0320 	orr.w	r3, r3, #32
 8003802:	653b      	str	r3, [r7, #80]	; 0x50
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	461a      	mov	r2, r3
 800380a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800380c:	623b      	str	r3, [r7, #32]
 800380e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003810:	69f9      	ldr	r1, [r7, #28]
 8003812:	6a3a      	ldr	r2, [r7, #32]
 8003814:	e841 2300 	strex	r3, r2, [r1]
 8003818:	61bb      	str	r3, [r7, #24]
   return(result);
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d1e6      	bne.n	80037ee <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	375c      	adds	r7, #92	; 0x5c
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	08003adf 	.word	0x08003adf
 8003834:	0800397f 	.word	0x0800397f

08003838 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003838:	b480      	push	{r7}
 800383a:	b095      	sub	sp, #84	; 0x54
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003848:	e853 3f00 	ldrex	r3, [r3]
 800384c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800384e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003850:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003854:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	461a      	mov	r2, r3
 800385c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800385e:	643b      	str	r3, [r7, #64]	; 0x40
 8003860:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003862:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003864:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003866:	e841 2300 	strex	r3, r2, [r1]
 800386a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800386c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800386e:	2b00      	cmp	r3, #0
 8003870:	d1e6      	bne.n	8003840 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	3308      	adds	r3, #8
 8003878:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800387a:	6a3b      	ldr	r3, [r7, #32]
 800387c:	e853 3f00 	ldrex	r3, [r3]
 8003880:	61fb      	str	r3, [r7, #28]
   return(result);
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	f023 0301 	bic.w	r3, r3, #1
 8003888:	64bb      	str	r3, [r7, #72]	; 0x48
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	3308      	adds	r3, #8
 8003890:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003892:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003894:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003896:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003898:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800389a:	e841 2300 	strex	r3, r2, [r1]
 800389e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d1e5      	bne.n	8003872 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d118      	bne.n	80038e0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	e853 3f00 	ldrex	r3, [r3]
 80038ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	f023 0310 	bic.w	r3, r3, #16
 80038c2:	647b      	str	r3, [r7, #68]	; 0x44
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	461a      	mov	r2, r3
 80038ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038cc:	61bb      	str	r3, [r7, #24]
 80038ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038d0:	6979      	ldr	r1, [r7, #20]
 80038d2:	69ba      	ldr	r2, [r7, #24]
 80038d4:	e841 2300 	strex	r3, r2, [r1]
 80038d8:	613b      	str	r3, [r7, #16]
   return(result);
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d1e6      	bne.n	80038ae <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2220      	movs	r2, #32
 80038e4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	665a      	str	r2, [r3, #100]	; 0x64
}
 80038f2:	bf00      	nop
 80038f4:	3754      	adds	r7, #84	; 0x54
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr

080038fe <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80038fe:	b580      	push	{r7, lr}
 8003900:	b084      	sub	sp, #16
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2200      	movs	r2, #0
 8003918:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800391c:	68f8      	ldr	r0, [r7, #12]
 800391e:	f7ff fa43 	bl	8002da8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003922:	bf00      	nop
 8003924:	3710      	adds	r7, #16
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}

0800392a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800392a:	b580      	push	{r7, lr}
 800392c:	b088      	sub	sp, #32
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	e853 3f00 	ldrex	r3, [r3]
 800393e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003946:	61fb      	str	r3, [r7, #28]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	461a      	mov	r2, r3
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	61bb      	str	r3, [r7, #24]
 8003952:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003954:	6979      	ldr	r1, [r7, #20]
 8003956:	69ba      	ldr	r2, [r7, #24]
 8003958:	e841 2300 	strex	r3, r2, [r1]
 800395c:	613b      	str	r3, [r7, #16]
   return(result);
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d1e6      	bne.n	8003932 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2220      	movs	r2, #32
 8003968:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f7ff fa05 	bl	8002d80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003976:	bf00      	nop
 8003978:	3720      	adds	r7, #32
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}

0800397e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800397e:	b580      	push	{r7, lr}
 8003980:	b096      	sub	sp, #88	; 0x58
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800398c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003994:	2b22      	cmp	r3, #34	; 0x22
 8003996:	f040 8094 	bne.w	8003ac2 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80039a0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80039a4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80039a8:	b2d9      	uxtb	r1, r3
 80039aa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80039ae:	b2da      	uxtb	r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b4:	400a      	ands	r2, r1
 80039b6:	b2d2      	uxtb	r2, r2
 80039b8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039be:	1c5a      	adds	r2, r3, #1
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	3b01      	subs	r3, #1
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80039dc:	b29b      	uxth	r3, r3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d179      	bne.n	8003ad6 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ea:	e853 3f00 	ldrex	r3, [r3]
 80039ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80039f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039f6:	653b      	str	r3, [r7, #80]	; 0x50
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	461a      	mov	r2, r3
 80039fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a00:	647b      	str	r3, [r7, #68]	; 0x44
 8003a02:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a04:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a08:	e841 2300 	strex	r3, r2, [r1]
 8003a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d1e6      	bne.n	80039e2 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	3308      	adds	r3, #8
 8003a1a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1e:	e853 3f00 	ldrex	r3, [r3]
 8003a22:	623b      	str	r3, [r7, #32]
   return(result);
 8003a24:	6a3b      	ldr	r3, [r7, #32]
 8003a26:	f023 0301 	bic.w	r3, r3, #1
 8003a2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	3308      	adds	r3, #8
 8003a32:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a34:	633a      	str	r2, [r7, #48]	; 0x30
 8003a36:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a38:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a3c:	e841 2300 	strex	r3, r2, [r1]
 8003a40:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d1e5      	bne.n	8003a14 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2220      	movs	r2, #32
 8003a4c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d12e      	bne.n	8003aba <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	e853 3f00 	ldrex	r3, [r3]
 8003a6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f023 0310 	bic.w	r3, r3, #16
 8003a76:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a80:	61fb      	str	r3, [r7, #28]
 8003a82:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a84:	69b9      	ldr	r1, [r7, #24]
 8003a86:	69fa      	ldr	r2, [r7, #28]
 8003a88:	e841 2300 	strex	r3, r2, [r1]
 8003a8c:	617b      	str	r3, [r7, #20]
   return(result);
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1e6      	bne.n	8003a62 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	69db      	ldr	r3, [r3, #28]
 8003a9a:	f003 0310 	and.w	r3, r3, #16
 8003a9e:	2b10      	cmp	r3, #16
 8003aa0:	d103      	bne.n	8003aaa <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2210      	movs	r2, #16
 8003aa8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f7ff f982 	bl	8002dbc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003ab8:	e00d      	b.n	8003ad6 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f7ff f96a 	bl	8002d94 <HAL_UART_RxCpltCallback>
}
 8003ac0:	e009      	b.n	8003ad6 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	8b1b      	ldrh	r3, [r3, #24]
 8003ac8:	b29a      	uxth	r2, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f042 0208 	orr.w	r2, r2, #8
 8003ad2:	b292      	uxth	r2, r2
 8003ad4:	831a      	strh	r2, [r3, #24]
}
 8003ad6:	bf00      	nop
 8003ad8:	3758      	adds	r7, #88	; 0x58
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b096      	sub	sp, #88	; 0x58
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003aec:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003af4:	2b22      	cmp	r3, #34	; 0x22
 8003af6:	f040 8094 	bne.w	8003c22 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003b00:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b08:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8003b0a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8003b0e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003b12:	4013      	ands	r3, r2
 8003b14:	b29a      	uxth	r2, r3
 8003b16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b18:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b1e:	1c9a      	adds	r2, r3, #2
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	b29a      	uxth	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d179      	bne.n	8003c36 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b4a:	e853 3f00 	ldrex	r3, [r3]
 8003b4e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b52:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b60:	643b      	str	r3, [r7, #64]	; 0x40
 8003b62:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b64:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003b66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b68:	e841 2300 	strex	r3, r2, [r1]
 8003b6c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d1e6      	bne.n	8003b42 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	3308      	adds	r3, #8
 8003b7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b7c:	6a3b      	ldr	r3, [r7, #32]
 8003b7e:	e853 3f00 	ldrex	r3, [r3]
 8003b82:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	f023 0301 	bic.w	r3, r3, #1
 8003b8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	3308      	adds	r3, #8
 8003b92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b94:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b9c:	e841 2300 	strex	r3, r2, [r1]
 8003ba0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1e5      	bne.n	8003b74 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2220      	movs	r2, #32
 8003bac:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d12e      	bne.n	8003c1a <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	e853 3f00 	ldrex	r3, [r3]
 8003bce:	60bb      	str	r3, [r7, #8]
   return(result);
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	f023 0310 	bic.w	r3, r3, #16
 8003bd6:	647b      	str	r3, [r7, #68]	; 0x44
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	461a      	mov	r2, r3
 8003bde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003be0:	61bb      	str	r3, [r7, #24]
 8003be2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be4:	6979      	ldr	r1, [r7, #20]
 8003be6:	69ba      	ldr	r2, [r7, #24]
 8003be8:	e841 2300 	strex	r3, r2, [r1]
 8003bec:	613b      	str	r3, [r7, #16]
   return(result);
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d1e6      	bne.n	8003bc2 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	69db      	ldr	r3, [r3, #28]
 8003bfa:	f003 0310 	and.w	r3, r3, #16
 8003bfe:	2b10      	cmp	r3, #16
 8003c00:	d103      	bne.n	8003c0a <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2210      	movs	r2, #16
 8003c08:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003c10:	4619      	mov	r1, r3
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f7ff f8d2 	bl	8002dbc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003c18:	e00d      	b.n	8003c36 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f7ff f8ba 	bl	8002d94 <HAL_UART_RxCpltCallback>
}
 8003c20:	e009      	b.n	8003c36 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	8b1b      	ldrh	r3, [r3, #24]
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f042 0208 	orr.w	r2, r2, #8
 8003c32:	b292      	uxth	r2, r2
 8003c34:	831a      	strh	r2, [r3, #24]
}
 8003c36:	bf00      	nop
 8003c38:	3758      	adds	r7, #88	; 0x58
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003c3e:	b480      	push	{r7}
 8003c40:	b083      	sub	sp, #12
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003c46:	bf00      	nop
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr

08003c52 <memset>:
 8003c52:	4402      	add	r2, r0
 8003c54:	4603      	mov	r3, r0
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d100      	bne.n	8003c5c <memset+0xa>
 8003c5a:	4770      	bx	lr
 8003c5c:	f803 1b01 	strb.w	r1, [r3], #1
 8003c60:	e7f9      	b.n	8003c56 <memset+0x4>
	...

08003c64 <__libc_init_array>:
 8003c64:	b570      	push	{r4, r5, r6, lr}
 8003c66:	4d0d      	ldr	r5, [pc, #52]	; (8003c9c <__libc_init_array+0x38>)
 8003c68:	4c0d      	ldr	r4, [pc, #52]	; (8003ca0 <__libc_init_array+0x3c>)
 8003c6a:	1b64      	subs	r4, r4, r5
 8003c6c:	10a4      	asrs	r4, r4, #2
 8003c6e:	2600      	movs	r6, #0
 8003c70:	42a6      	cmp	r6, r4
 8003c72:	d109      	bne.n	8003c88 <__libc_init_array+0x24>
 8003c74:	4d0b      	ldr	r5, [pc, #44]	; (8003ca4 <__libc_init_array+0x40>)
 8003c76:	4c0c      	ldr	r4, [pc, #48]	; (8003ca8 <__libc_init_array+0x44>)
 8003c78:	f000 f818 	bl	8003cac <_init>
 8003c7c:	1b64      	subs	r4, r4, r5
 8003c7e:	10a4      	asrs	r4, r4, #2
 8003c80:	2600      	movs	r6, #0
 8003c82:	42a6      	cmp	r6, r4
 8003c84:	d105      	bne.n	8003c92 <__libc_init_array+0x2e>
 8003c86:	bd70      	pop	{r4, r5, r6, pc}
 8003c88:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c8c:	4798      	blx	r3
 8003c8e:	3601      	adds	r6, #1
 8003c90:	e7ee      	b.n	8003c70 <__libc_init_array+0xc>
 8003c92:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c96:	4798      	blx	r3
 8003c98:	3601      	adds	r6, #1
 8003c9a:	e7f2      	b.n	8003c82 <__libc_init_array+0x1e>
 8003c9c:	08003d14 	.word	0x08003d14
 8003ca0:	08003d14 	.word	0x08003d14
 8003ca4:	08003d14 	.word	0x08003d14
 8003ca8:	08003d18 	.word	0x08003d18

08003cac <_init>:
 8003cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cae:	bf00      	nop
 8003cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cb2:	bc08      	pop	{r3}
 8003cb4:	469e      	mov	lr, r3
 8003cb6:	4770      	bx	lr

08003cb8 <_fini>:
 8003cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cba:	bf00      	nop
 8003cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cbe:	bc08      	pop	{r3}
 8003cc0:	469e      	mov	lr, r3
 8003cc2:	4770      	bx	lr
