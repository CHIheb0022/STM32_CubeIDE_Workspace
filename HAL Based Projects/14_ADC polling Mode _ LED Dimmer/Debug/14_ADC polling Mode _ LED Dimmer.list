
14_ADC polling Mode _ LED Dimmer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049a4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004b2c  08004b2c  00014b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b6c  08004b6c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004b6c  08004b6c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b6c  08004b6c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b6c  08004b6c  00014b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b70  08004b70  00014b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004b74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  2000000c  08004b80  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  08004b80  000200e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e907  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f93  00000000  00000000  0002e986  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fb8  00000000  00000000  00030920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c1e  00000000  00000000  000318d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000271cf  00000000  00000000  000324f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000109f9  00000000  00000000  000596c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fc715  00000000  00000000  0006a0be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004304  00000000  00000000  001667d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000095  00000000  00000000  0016aad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004b14 	.word	0x08004b14

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004b14 	.word	0x08004b14

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fad9 	bl	8000782 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f834 	bl	800023c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f966 	bl	80004a4 <MX_GPIO_Init>
  MX_ADC1_Init();
 80001d8:	f000 f876 	bl	80002c8 <MX_ADC1_Init>
  MX_TIM2_Init();
 80001dc:	f000 f8ea 	bl	80003b4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 80001e0:	2100      	movs	r1, #0
 80001e2:	4812      	ldr	r0, [pc, #72]	; (800022c <main+0x64>)
 80001e4:	f003 fcce 	bl	8003b84 <HAL_TIM_PWM_Start>
  // Calibrate The ADC On Power-Up For Better Accuracy
  HAL_ADCEx_Calibration_Start(&hadc1,ADC_SINGLE_ENDED);
 80001e8:	217f      	movs	r1, #127	; 0x7f
 80001ea:	4811      	ldr	r0, [pc, #68]	; (8000230 <main+0x68>)
 80001ec:	f001 fd8a 	bl	8001d04 <HAL_ADCEx_Calibration_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // Start ADC Conversion
    HAL_ADC_Start(&hadc1);
 80001f0:	480f      	ldr	r0, [pc, #60]	; (8000230 <main+0x68>)
 80001f2:	f000 febf 	bl	8000f74 <HAL_ADC_Start>
    // Poll ADC1 Perihperal & TimeOut = 1mSec
    HAL_ADC_PollForConversion(&hadc1, 10);
 80001f6:	210a      	movs	r1, #10
 80001f8:	480d      	ldr	r0, [pc, #52]	; (8000230 <main+0x68>)
 80001fa:	f000 ff75 	bl	80010e8 <HAL_ADC_PollForConversion>
    // Read The ADC Conversion Result & Map It To PWM DutyCycle
    ADC_RES = HAL_ADC_GetValue(&hadc1);
 80001fe:	480c      	ldr	r0, [pc, #48]	; (8000230 <main+0x68>)
 8000200:	f001 f84a 	bl	8001298 <HAL_ADC_GetValue>
 8000204:	4603      	mov	r3, r0
 8000206:	b29a      	uxth	r2, r3
 8000208:	4b0a      	ldr	r3, [pc, #40]	; (8000234 <main+0x6c>)
 800020a:	801a      	strh	r2, [r3, #0]
    TIM2->CCR1 = (ADC_RES<<10);
 800020c:	4b09      	ldr	r3, [pc, #36]	; (8000234 <main+0x6c>)
 800020e:	881b      	ldrh	r3, [r3, #0]
 8000210:	029a      	lsls	r2, r3, #10
 8000212:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000216:	635a      	str	r2, [r3, #52]	; 0x34
    k=(ADC_RES<<10);
 8000218:	4b06      	ldr	r3, [pc, #24]	; (8000234 <main+0x6c>)
 800021a:	881b      	ldrh	r3, [r3, #0]
 800021c:	029b      	lsls	r3, r3, #10
 800021e:	461a      	mov	r2, r3
 8000220:	4b05      	ldr	r3, [pc, #20]	; (8000238 <main+0x70>)
 8000222:	601a      	str	r2, [r3, #0]
    HAL_Delay(10);
 8000224:	200a      	movs	r0, #10
 8000226:	f000 fb21 	bl	800086c <HAL_Delay>
    HAL_ADC_Start(&hadc1);
 800022a:	e7e1      	b.n	80001f0 <main+0x28>
 800022c:	2000008c 	.word	0x2000008c
 8000230:	20000028 	.word	0x20000028
 8000234:	200000d8 	.word	0x200000d8
 8000238:	200000dc 	.word	0x200000dc

0800023c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b096      	sub	sp, #88	; 0x58
 8000240:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000242:	f107 0314 	add.w	r3, r7, #20
 8000246:	2244      	movs	r2, #68	; 0x44
 8000248:	2100      	movs	r1, #0
 800024a:	4618      	mov	r0, r3
 800024c:	f004 fc36 	bl	8004abc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000250:	463b      	mov	r3, r7
 8000252:	2200      	movs	r2, #0
 8000254:	601a      	str	r2, [r3, #0]
 8000256:	605a      	str	r2, [r3, #4]
 8000258:	609a      	str	r2, [r3, #8]
 800025a:	60da      	str	r2, [r3, #12]
 800025c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800025e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000262:	f002 f8fd 	bl	8002460 <HAL_PWREx_ControlVoltageScaling>
 8000266:	4603      	mov	r3, r0
 8000268:	2b00      	cmp	r3, #0
 800026a:	d001      	beq.n	8000270 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800026c:	f000 f93e 	bl	80004ec <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000270:	2310      	movs	r3, #16
 8000272:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000274:	2301      	movs	r3, #1
 8000276:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000278:	2300      	movs	r3, #0
 800027a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800027c:	2360      	movs	r3, #96	; 0x60
 800027e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000280:	2300      	movs	r3, #0
 8000282:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000284:	f107 0314 	add.w	r3, r7, #20
 8000288:	4618      	mov	r0, r3
 800028a:	f002 f93f 	bl	800250c <HAL_RCC_OscConfig>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d001      	beq.n	8000298 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000294:	f000 f92a 	bl	80004ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000298:	230f      	movs	r3, #15
 800029a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800029c:	2300      	movs	r3, #0
 800029e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a0:	2300      	movs	r3, #0
 80002a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002a4:	2300      	movs	r3, #0
 80002a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a8:	2300      	movs	r3, #0
 80002aa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002ac:	463b      	mov	r3, r7
 80002ae:	2100      	movs	r1, #0
 80002b0:	4618      	mov	r0, r3
 80002b2:	f002 fd07 	bl	8002cc4 <HAL_RCC_ClockConfig>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d001      	beq.n	80002c0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80002bc:	f000 f916 	bl	80004ec <Error_Handler>
  }
}
 80002c0:	bf00      	nop
 80002c2:	3758      	adds	r7, #88	; 0x58
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}

080002c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b08a      	sub	sp, #40	; 0x28
 80002cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80002ce:	f107 031c 	add.w	r3, r7, #28
 80002d2:	2200      	movs	r2, #0
 80002d4:	601a      	str	r2, [r3, #0]
 80002d6:	605a      	str	r2, [r3, #4]
 80002d8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80002da:	1d3b      	adds	r3, r7, #4
 80002dc:	2200      	movs	r2, #0
 80002de:	601a      	str	r2, [r3, #0]
 80002e0:	605a      	str	r2, [r3, #4]
 80002e2:	609a      	str	r2, [r3, #8]
 80002e4:	60da      	str	r2, [r3, #12]
 80002e6:	611a      	str	r2, [r3, #16]
 80002e8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002ea:	4b2f      	ldr	r3, [pc, #188]	; (80003a8 <MX_ADC1_Init+0xe0>)
 80002ec:	4a2f      	ldr	r2, [pc, #188]	; (80003ac <MX_ADC1_Init+0xe4>)
 80002ee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80002f0:	4b2d      	ldr	r3, [pc, #180]	; (80003a8 <MX_ADC1_Init+0xe0>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002f6:	4b2c      	ldr	r3, [pc, #176]	; (80003a8 <MX_ADC1_Init+0xe0>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002fc:	4b2a      	ldr	r3, [pc, #168]	; (80003a8 <MX_ADC1_Init+0xe0>)
 80002fe:	2200      	movs	r2, #0
 8000300:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000302:	4b29      	ldr	r3, [pc, #164]	; (80003a8 <MX_ADC1_Init+0xe0>)
 8000304:	2200      	movs	r2, #0
 8000306:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000308:	4b27      	ldr	r3, [pc, #156]	; (80003a8 <MX_ADC1_Init+0xe0>)
 800030a:	2204      	movs	r2, #4
 800030c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800030e:	4b26      	ldr	r3, [pc, #152]	; (80003a8 <MX_ADC1_Init+0xe0>)
 8000310:	2200      	movs	r2, #0
 8000312:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000314:	4b24      	ldr	r3, [pc, #144]	; (80003a8 <MX_ADC1_Init+0xe0>)
 8000316:	2200      	movs	r2, #0
 8000318:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800031a:	4b23      	ldr	r3, [pc, #140]	; (80003a8 <MX_ADC1_Init+0xe0>)
 800031c:	2201      	movs	r2, #1
 800031e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000320:	4b21      	ldr	r3, [pc, #132]	; (80003a8 <MX_ADC1_Init+0xe0>)
 8000322:	2200      	movs	r2, #0
 8000324:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000328:	4b1f      	ldr	r3, [pc, #124]	; (80003a8 <MX_ADC1_Init+0xe0>)
 800032a:	2200      	movs	r2, #0
 800032c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800032e:	4b1e      	ldr	r3, [pc, #120]	; (80003a8 <MX_ADC1_Init+0xe0>)
 8000330:	2200      	movs	r2, #0
 8000332:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000334:	4b1c      	ldr	r3, [pc, #112]	; (80003a8 <MX_ADC1_Init+0xe0>)
 8000336:	2200      	movs	r2, #0
 8000338:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800033c:	4b1a      	ldr	r3, [pc, #104]	; (80003a8 <MX_ADC1_Init+0xe0>)
 800033e:	2200      	movs	r2, #0
 8000340:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000342:	4b19      	ldr	r3, [pc, #100]	; (80003a8 <MX_ADC1_Init+0xe0>)
 8000344:	2200      	movs	r2, #0
 8000346:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800034a:	4817      	ldr	r0, [pc, #92]	; (80003a8 <MX_ADC1_Init+0xe0>)
 800034c:	f000 fcbc 	bl	8000cc8 <HAL_ADC_Init>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000356:	f000 f8c9 	bl	80004ec <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800035a:	2300      	movs	r3, #0
 800035c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800035e:	f107 031c 	add.w	r3, r7, #28
 8000362:	4619      	mov	r1, r3
 8000364:	4810      	ldr	r0, [pc, #64]	; (80003a8 <MX_ADC1_Init+0xe0>)
 8000366:	f001 fd2d 	bl	8001dc4 <HAL_ADCEx_MultiModeConfigChannel>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000370:	f000 f8bc 	bl	80004ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000374:	4b0e      	ldr	r3, [pc, #56]	; (80003b0 <MX_ADC1_Init+0xe8>)
 8000376:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000378:	2306      	movs	r3, #6
 800037a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800037c:	2300      	movs	r3, #0
 800037e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000380:	237f      	movs	r3, #127	; 0x7f
 8000382:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000384:	2304      	movs	r3, #4
 8000386:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000388:	2300      	movs	r3, #0
 800038a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800038c:	1d3b      	adds	r3, r7, #4
 800038e:	4619      	mov	r1, r3
 8000390:	4805      	ldr	r0, [pc, #20]	; (80003a8 <MX_ADC1_Init+0xe0>)
 8000392:	f000 ff8f 	bl	80012b4 <HAL_ADC_ConfigChannel>
 8000396:	4603      	mov	r3, r0
 8000398:	2b00      	cmp	r3, #0
 800039a:	d001      	beq.n	80003a0 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 800039c:	f000 f8a6 	bl	80004ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003a0:	bf00      	nop
 80003a2:	3728      	adds	r7, #40	; 0x28
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd80      	pop	{r7, pc}
 80003a8:	20000028 	.word	0x20000028
 80003ac:	50040000 	.word	0x50040000
 80003b0:	04300002 	.word	0x04300002

080003b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b08e      	sub	sp, #56	; 0x38
 80003b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003be:	2200      	movs	r2, #0
 80003c0:	601a      	str	r2, [r3, #0]
 80003c2:	605a      	str	r2, [r3, #4]
 80003c4:	609a      	str	r2, [r3, #8]
 80003c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003c8:	f107 031c 	add.w	r3, r7, #28
 80003cc:	2200      	movs	r2, #0
 80003ce:	601a      	str	r2, [r3, #0]
 80003d0:	605a      	str	r2, [r3, #4]
 80003d2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003d4:	463b      	mov	r3, r7
 80003d6:	2200      	movs	r2, #0
 80003d8:	601a      	str	r2, [r3, #0]
 80003da:	605a      	str	r2, [r3, #4]
 80003dc:	609a      	str	r2, [r3, #8]
 80003de:	60da      	str	r2, [r3, #12]
 80003e0:	611a      	str	r2, [r3, #16]
 80003e2:	615a      	str	r2, [r3, #20]
 80003e4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80003e6:	4b2e      	ldr	r3, [pc, #184]	; (80004a0 <MX_TIM2_Init+0xec>)
 80003e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003ec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3;
 80003ee:	4b2c      	ldr	r3, [pc, #176]	; (80004a0 <MX_TIM2_Init+0xec>)
 80003f0:	2203      	movs	r2, #3
 80003f2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003f4:	4b2a      	ldr	r3, [pc, #168]	; (80004a0 <MX_TIM2_Init+0xec>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80003fa:	4b29      	ldr	r3, [pc, #164]	; (80004a0 <MX_TIM2_Init+0xec>)
 80003fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000400:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000402:	4b27      	ldr	r3, [pc, #156]	; (80004a0 <MX_TIM2_Init+0xec>)
 8000404:	2200      	movs	r2, #0
 8000406:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000408:	4b25      	ldr	r3, [pc, #148]	; (80004a0 <MX_TIM2_Init+0xec>)
 800040a:	2200      	movs	r2, #0
 800040c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800040e:	4824      	ldr	r0, [pc, #144]	; (80004a0 <MX_TIM2_Init+0xec>)
 8000410:	f003 fb00 	bl	8003a14 <HAL_TIM_Base_Init>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800041a:	f000 f867 	bl	80004ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800041e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000422:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000424:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000428:	4619      	mov	r1, r3
 800042a:	481d      	ldr	r0, [pc, #116]	; (80004a0 <MX_TIM2_Init+0xec>)
 800042c:	f003 fdc4 	bl	8003fb8 <HAL_TIM_ConfigClockSource>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d001      	beq.n	800043a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000436:	f000 f859 	bl	80004ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800043a:	4819      	ldr	r0, [pc, #100]	; (80004a0 <MX_TIM2_Init+0xec>)
 800043c:	f003 fb41 	bl	8003ac2 <HAL_TIM_PWM_Init>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000446:	f000 f851 	bl	80004ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800044a:	2300      	movs	r3, #0
 800044c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800044e:	2300      	movs	r3, #0
 8000450:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000452:	f107 031c 	add.w	r3, r7, #28
 8000456:	4619      	mov	r1, r3
 8000458:	4811      	ldr	r0, [pc, #68]	; (80004a0 <MX_TIM2_Init+0xec>)
 800045a:	f004 faa7 	bl	80049ac <HAL_TIMEx_MasterConfigSynchronization>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d001      	beq.n	8000468 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000464:	f000 f842 	bl	80004ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000468:	2360      	movs	r3, #96	; 0x60
 800046a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 800046c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000470:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000472:	2300      	movs	r3, #0
 8000474:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000476:	2300      	movs	r3, #0
 8000478:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800047a:	463b      	mov	r3, r7
 800047c:	2200      	movs	r2, #0
 800047e:	4619      	mov	r1, r3
 8000480:	4807      	ldr	r0, [pc, #28]	; (80004a0 <MX_TIM2_Init+0xec>)
 8000482:	f003 fc85 	bl	8003d90 <HAL_TIM_PWM_ConfigChannel>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 800048c:	f000 f82e 	bl	80004ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000490:	4803      	ldr	r0, [pc, #12]	; (80004a0 <MX_TIM2_Init+0xec>)
 8000492:	f000 f8dd 	bl	8000650 <HAL_TIM_MspPostInit>

}
 8000496:	bf00      	nop
 8000498:	3738      	adds	r7, #56	; 0x38
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	2000008c 	.word	0x2000008c

080004a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	b083      	sub	sp, #12
 80004a8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004aa:	4b0f      	ldr	r3, [pc, #60]	; (80004e8 <MX_GPIO_Init+0x44>)
 80004ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ae:	4a0e      	ldr	r2, [pc, #56]	; (80004e8 <MX_GPIO_Init+0x44>)
 80004b0:	f043 0304 	orr.w	r3, r3, #4
 80004b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004b6:	4b0c      	ldr	r3, [pc, #48]	; (80004e8 <MX_GPIO_Init+0x44>)
 80004b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ba:	f003 0304 	and.w	r3, r3, #4
 80004be:	607b      	str	r3, [r7, #4]
 80004c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c2:	4b09      	ldr	r3, [pc, #36]	; (80004e8 <MX_GPIO_Init+0x44>)
 80004c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004c6:	4a08      	ldr	r2, [pc, #32]	; (80004e8 <MX_GPIO_Init+0x44>)
 80004c8:	f043 0301 	orr.w	r3, r3, #1
 80004cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004ce:	4b06      	ldr	r3, [pc, #24]	; (80004e8 <MX_GPIO_Init+0x44>)
 80004d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004d2:	f003 0301 	and.w	r3, r3, #1
 80004d6:	603b      	str	r3, [r7, #0]
 80004d8:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004da:	bf00      	nop
 80004dc:	370c      	adds	r7, #12
 80004de:	46bd      	mov	sp, r7
 80004e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	40021000 	.word	0x40021000

080004ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004f0:	b672      	cpsid	i
}
 80004f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004f4:	e7fe      	b.n	80004f4 <Error_Handler+0x8>
	...

080004f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b083      	sub	sp, #12
 80004fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004fe:	4b0f      	ldr	r3, [pc, #60]	; (800053c <HAL_MspInit+0x44>)
 8000500:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000502:	4a0e      	ldr	r2, [pc, #56]	; (800053c <HAL_MspInit+0x44>)
 8000504:	f043 0301 	orr.w	r3, r3, #1
 8000508:	6613      	str	r3, [r2, #96]	; 0x60
 800050a:	4b0c      	ldr	r3, [pc, #48]	; (800053c <HAL_MspInit+0x44>)
 800050c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800050e:	f003 0301 	and.w	r3, r3, #1
 8000512:	607b      	str	r3, [r7, #4]
 8000514:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000516:	4b09      	ldr	r3, [pc, #36]	; (800053c <HAL_MspInit+0x44>)
 8000518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800051a:	4a08      	ldr	r2, [pc, #32]	; (800053c <HAL_MspInit+0x44>)
 800051c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000520:	6593      	str	r3, [r2, #88]	; 0x58
 8000522:	4b06      	ldr	r3, [pc, #24]	; (800053c <HAL_MspInit+0x44>)
 8000524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800052a:	603b      	str	r3, [r7, #0]
 800052c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800052e:	bf00      	nop
 8000530:	370c      	adds	r7, #12
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	40021000 	.word	0x40021000

08000540 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b0ac      	sub	sp, #176	; 0xb0
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000548:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	60da      	str	r2, [r3, #12]
 8000556:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000558:	f107 0314 	add.w	r3, r7, #20
 800055c:	2288      	movs	r2, #136	; 0x88
 800055e:	2100      	movs	r1, #0
 8000560:	4618      	mov	r0, r3
 8000562:	f004 faab 	bl	8004abc <memset>
  if(hadc->Instance==ADC1)
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4a27      	ldr	r2, [pc, #156]	; (8000608 <HAL_ADC_MspInit+0xc8>)
 800056c:	4293      	cmp	r3, r2
 800056e:	d146      	bne.n	80005fe <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000570:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000574:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000576:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800057a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800057e:	2301      	movs	r3, #1
 8000580:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000582:	2301      	movs	r3, #1
 8000584:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 18;
 8000586:	2312      	movs	r3, #18
 8000588:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800058a:	2307      	movs	r3, #7
 800058c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800058e:	2302      	movs	r3, #2
 8000590:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV6;
 8000592:	2306      	movs	r3, #6
 8000594:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000596:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800059a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800059c:	f107 0314 	add.w	r3, r7, #20
 80005a0:	4618      	mov	r0, r3
 80005a2:	f002 fd7b 	bl	800309c <HAL_RCCEx_PeriphCLKConfig>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80005ac:	f7ff ff9e 	bl	80004ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80005b0:	4b16      	ldr	r3, [pc, #88]	; (800060c <HAL_ADC_MspInit+0xcc>)
 80005b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b4:	4a15      	ldr	r2, [pc, #84]	; (800060c <HAL_ADC_MspInit+0xcc>)
 80005b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80005ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005bc:	4b13      	ldr	r3, [pc, #76]	; (800060c <HAL_ADC_MspInit+0xcc>)
 80005be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80005c4:	613b      	str	r3, [r7, #16]
 80005c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c8:	4b10      	ldr	r3, [pc, #64]	; (800060c <HAL_ADC_MspInit+0xcc>)
 80005ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005cc:	4a0f      	ldr	r2, [pc, #60]	; (800060c <HAL_ADC_MspInit+0xcc>)
 80005ce:	f043 0304 	orr.w	r3, r3, #4
 80005d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005d4:	4b0d      	ldr	r3, [pc, #52]	; (800060c <HAL_ADC_MspInit+0xcc>)
 80005d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005d8:	f003 0304 	and.w	r3, r3, #4
 80005dc:	60fb      	str	r3, [r7, #12]
 80005de:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80005e0:	2301      	movs	r3, #1
 80005e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80005e6:	230b      	movs	r3, #11
 80005e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ec:	2300      	movs	r3, #0
 80005ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005f2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80005f6:	4619      	mov	r1, r3
 80005f8:	4805      	ldr	r0, [pc, #20]	; (8000610 <HAL_ADC_MspInit+0xd0>)
 80005fa:	f001 fd79 	bl	80020f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80005fe:	bf00      	nop
 8000600:	37b0      	adds	r7, #176	; 0xb0
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	50040000 	.word	0x50040000
 800060c:	40021000 	.word	0x40021000
 8000610:	48000800 	.word	0x48000800

08000614 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000614:	b480      	push	{r7}
 8000616:	b085      	sub	sp, #20
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000624:	d10b      	bne.n	800063e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000626:	4b09      	ldr	r3, [pc, #36]	; (800064c <HAL_TIM_Base_MspInit+0x38>)
 8000628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800062a:	4a08      	ldr	r2, [pc, #32]	; (800064c <HAL_TIM_Base_MspInit+0x38>)
 800062c:	f043 0301 	orr.w	r3, r3, #1
 8000630:	6593      	str	r3, [r2, #88]	; 0x58
 8000632:	4b06      	ldr	r3, [pc, #24]	; (800064c <HAL_TIM_Base_MspInit+0x38>)
 8000634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000636:	f003 0301 	and.w	r3, r3, #1
 800063a:	60fb      	str	r3, [r7, #12]
 800063c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800063e:	bf00      	nop
 8000640:	3714      	adds	r7, #20
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	40021000 	.word	0x40021000

08000650 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b088      	sub	sp, #32
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000670:	d11c      	bne.n	80006ac <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000672:	4b10      	ldr	r3, [pc, #64]	; (80006b4 <HAL_TIM_MspPostInit+0x64>)
 8000674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000676:	4a0f      	ldr	r2, [pc, #60]	; (80006b4 <HAL_TIM_MspPostInit+0x64>)
 8000678:	f043 0301 	orr.w	r3, r3, #1
 800067c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800067e:	4b0d      	ldr	r3, [pc, #52]	; (80006b4 <HAL_TIM_MspPostInit+0x64>)
 8000680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800068a:	2320      	movs	r3, #32
 800068c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800068e:	2302      	movs	r3, #2
 8000690:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000692:	2300      	movs	r3, #0
 8000694:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000696:	2300      	movs	r3, #0
 8000698:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800069a:	2301      	movs	r3, #1
 800069c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800069e:	f107 030c 	add.w	r3, r7, #12
 80006a2:	4619      	mov	r1, r3
 80006a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006a8:	f001 fd22 	bl	80020f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80006ac:	bf00      	nop
 80006ae:	3720      	adds	r7, #32
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	40021000 	.word	0x40021000

080006b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006bc:	e7fe      	b.n	80006bc <NMI_Handler+0x4>

080006be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006be:	b480      	push	{r7}
 80006c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006c2:	e7fe      	b.n	80006c2 <HardFault_Handler+0x4>

080006c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006c8:	e7fe      	b.n	80006c8 <MemManage_Handler+0x4>

080006ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006ca:	b480      	push	{r7}
 80006cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006ce:	e7fe      	b.n	80006ce <BusFault_Handler+0x4>

080006d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006d4:	e7fe      	b.n	80006d4 <UsageFault_Handler+0x4>

080006d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006d6:	b480      	push	{r7}
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006da:	bf00      	nop
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr

080006e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006e8:	bf00      	nop
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr

080006f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006f2:	b480      	push	{r7}
 80006f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006f6:	bf00      	nop
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr

08000700 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000704:	f000 f892 	bl	800082c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}

0800070c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000710:	4b06      	ldr	r3, [pc, #24]	; (800072c <SystemInit+0x20>)
 8000712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000716:	4a05      	ldr	r2, [pc, #20]	; (800072c <SystemInit+0x20>)
 8000718:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800071c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	e000ed00 	.word	0xe000ed00

08000730 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000730:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000768 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000734:	f7ff ffea 	bl	800070c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000738:	480c      	ldr	r0, [pc, #48]	; (800076c <LoopForever+0x6>)
  ldr r1, =_edata
 800073a:	490d      	ldr	r1, [pc, #52]	; (8000770 <LoopForever+0xa>)
  ldr r2, =_sidata
 800073c:	4a0d      	ldr	r2, [pc, #52]	; (8000774 <LoopForever+0xe>)
  movs r3, #0
 800073e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000740:	e002      	b.n	8000748 <LoopCopyDataInit>

08000742 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000742:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000744:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000746:	3304      	adds	r3, #4

08000748 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000748:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800074a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800074c:	d3f9      	bcc.n	8000742 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800074e:	4a0a      	ldr	r2, [pc, #40]	; (8000778 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000750:	4c0a      	ldr	r4, [pc, #40]	; (800077c <LoopForever+0x16>)
  movs r3, #0
 8000752:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000754:	e001      	b.n	800075a <LoopFillZerobss>

08000756 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000756:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000758:	3204      	adds	r2, #4

0800075a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800075a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800075c:	d3fb      	bcc.n	8000756 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800075e:	f004 f9b5 	bl	8004acc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000762:	f7ff fd31 	bl	80001c8 <main>

08000766 <LoopForever>:

LoopForever:
    b LoopForever
 8000766:	e7fe      	b.n	8000766 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000768:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800076c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000770:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000774:	08004b74 	.word	0x08004b74
  ldr r2, =_sbss
 8000778:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800077c:	200000e4 	.word	0x200000e4

08000780 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000780:	e7fe      	b.n	8000780 <ADC1_2_IRQHandler>

08000782 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000782:	b580      	push	{r7, lr}
 8000784:	b082      	sub	sp, #8
 8000786:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000788:	2300      	movs	r3, #0
 800078a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800078c:	2003      	movs	r0, #3
 800078e:	f001 fc7b 	bl	8002088 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000792:	200f      	movs	r0, #15
 8000794:	f000 f80e 	bl	80007b4 <HAL_InitTick>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d002      	beq.n	80007a4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800079e:	2301      	movs	r3, #1
 80007a0:	71fb      	strb	r3, [r7, #7]
 80007a2:	e001      	b.n	80007a8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80007a4:	f7ff fea8 	bl	80004f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007a8:	79fb      	ldrb	r3, [r7, #7]
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
	...

080007b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80007bc:	2300      	movs	r3, #0
 80007be:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80007c0:	4b17      	ldr	r3, [pc, #92]	; (8000820 <HAL_InitTick+0x6c>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d023      	beq.n	8000810 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80007c8:	4b16      	ldr	r3, [pc, #88]	; (8000824 <HAL_InitTick+0x70>)
 80007ca:	681a      	ldr	r2, [r3, #0]
 80007cc:	4b14      	ldr	r3, [pc, #80]	; (8000820 <HAL_InitTick+0x6c>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	4619      	mov	r1, r3
 80007d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80007da:	fbb2 f3f3 	udiv	r3, r2, r3
 80007de:	4618      	mov	r0, r3
 80007e0:	f001 fc79 	bl	80020d6 <HAL_SYSTICK_Config>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d10f      	bne.n	800080a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2b0f      	cmp	r3, #15
 80007ee:	d809      	bhi.n	8000804 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007f0:	2200      	movs	r2, #0
 80007f2:	6879      	ldr	r1, [r7, #4]
 80007f4:	f04f 30ff 	mov.w	r0, #4294967295
 80007f8:	f001 fc51 	bl	800209e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007fc:	4a0a      	ldr	r2, [pc, #40]	; (8000828 <HAL_InitTick+0x74>)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	6013      	str	r3, [r2, #0]
 8000802:	e007      	b.n	8000814 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000804:	2301      	movs	r3, #1
 8000806:	73fb      	strb	r3, [r7, #15]
 8000808:	e004      	b.n	8000814 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800080a:	2301      	movs	r3, #1
 800080c:	73fb      	strb	r3, [r7, #15]
 800080e:	e001      	b.n	8000814 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000810:	2301      	movs	r3, #1
 8000812:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000814:	7bfb      	ldrb	r3, [r7, #15]
}
 8000816:	4618      	mov	r0, r3
 8000818:	3710      	adds	r7, #16
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000008 	.word	0x20000008
 8000824:	20000000 	.word	0x20000000
 8000828:	20000004 	.word	0x20000004

0800082c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <HAL_IncTick+0x20>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	461a      	mov	r2, r3
 8000836:	4b06      	ldr	r3, [pc, #24]	; (8000850 <HAL_IncTick+0x24>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4413      	add	r3, r2
 800083c:	4a04      	ldr	r2, [pc, #16]	; (8000850 <HAL_IncTick+0x24>)
 800083e:	6013      	str	r3, [r2, #0]
}
 8000840:	bf00      	nop
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	20000008 	.word	0x20000008
 8000850:	200000e0 	.word	0x200000e0

08000854 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  return uwTick;
 8000858:	4b03      	ldr	r3, [pc, #12]	; (8000868 <HAL_GetTick+0x14>)
 800085a:	681b      	ldr	r3, [r3, #0]
}
 800085c:	4618      	mov	r0, r3
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	200000e0 	.word	0x200000e0

0800086c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000874:	f7ff ffee 	bl	8000854 <HAL_GetTick>
 8000878:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000884:	d005      	beq.n	8000892 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000886:	4b0a      	ldr	r3, [pc, #40]	; (80008b0 <HAL_Delay+0x44>)
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	461a      	mov	r2, r3
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	4413      	add	r3, r2
 8000890:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000892:	bf00      	nop
 8000894:	f7ff ffde 	bl	8000854 <HAL_GetTick>
 8000898:	4602      	mov	r2, r0
 800089a:	68bb      	ldr	r3, [r7, #8]
 800089c:	1ad3      	subs	r3, r2, r3
 800089e:	68fa      	ldr	r2, [r7, #12]
 80008a0:	429a      	cmp	r2, r3
 80008a2:	d8f7      	bhi.n	8000894 <HAL_Delay+0x28>
  {
  }
}
 80008a4:	bf00      	nop
 80008a6:	bf00      	nop
 80008a8:	3710      	adds	r7, #16
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	20000008 	.word	0x20000008

080008b4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
 80008bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	689b      	ldr	r3, [r3, #8]
 80008c2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	431a      	orrs	r2, r3
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	609a      	str	r2, [r3, #8]
}
 80008ce:	bf00      	nop
 80008d0:	370c      	adds	r7, #12
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr

080008da <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80008da:	b480      	push	{r7}
 80008dc:	b083      	sub	sp, #12
 80008de:	af00      	add	r7, sp, #0
 80008e0:	6078      	str	r0, [r7, #4]
 80008e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	689b      	ldr	r3, [r3, #8]
 80008e8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	431a      	orrs	r2, r3
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	609a      	str	r2, [r3, #8]
}
 80008f4:	bf00      	nop
 80008f6:	370c      	adds	r7, #12
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr

08000900 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	689b      	ldr	r3, [r3, #8]
 800090c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000910:	4618      	mov	r0, r3
 8000912:	370c      	adds	r7, #12
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr

0800091c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800091c:	b480      	push	{r7}
 800091e:	b087      	sub	sp, #28
 8000920:	af00      	add	r7, sp, #0
 8000922:	60f8      	str	r0, [r7, #12]
 8000924:	60b9      	str	r1, [r7, #8]
 8000926:	607a      	str	r2, [r7, #4]
 8000928:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	3360      	adds	r3, #96	; 0x60
 800092e:	461a      	mov	r2, r3
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	009b      	lsls	r3, r3, #2
 8000934:	4413      	add	r3, r2
 8000936:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	681a      	ldr	r2, [r3, #0]
 800093c:	4b08      	ldr	r3, [pc, #32]	; (8000960 <LL_ADC_SetOffset+0x44>)
 800093e:	4013      	ands	r3, r2
 8000940:	687a      	ldr	r2, [r7, #4]
 8000942:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000946:	683a      	ldr	r2, [r7, #0]
 8000948:	430a      	orrs	r2, r1
 800094a:	4313      	orrs	r3, r2
 800094c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000954:	bf00      	nop
 8000956:	371c      	adds	r7, #28
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr
 8000960:	03fff000 	.word	0x03fff000

08000964 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000964:	b480      	push	{r7}
 8000966:	b085      	sub	sp, #20
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
 800096c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	3360      	adds	r3, #96	; 0x60
 8000972:	461a      	mov	r2, r3
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	009b      	lsls	r3, r3, #2
 8000978:	4413      	add	r3, r2
 800097a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000984:	4618      	mov	r0, r3
 8000986:	3714      	adds	r7, #20
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr

08000990 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000990:	b480      	push	{r7}
 8000992:	b087      	sub	sp, #28
 8000994:	af00      	add	r7, sp, #0
 8000996:	60f8      	str	r0, [r7, #12]
 8000998:	60b9      	str	r1, [r7, #8]
 800099a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	3360      	adds	r3, #96	; 0x60
 80009a0:	461a      	mov	r2, r3
 80009a2:	68bb      	ldr	r3, [r7, #8]
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	4413      	add	r3, r2
 80009a8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	431a      	orrs	r2, r3
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80009ba:	bf00      	nop
 80009bc:	371c      	adds	r7, #28
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr

080009c6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80009c6:	b480      	push	{r7}
 80009c8:	b083      	sub	sp, #12
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	68db      	ldr	r3, [r3, #12]
 80009d2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d101      	bne.n	80009de <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80009da:	2301      	movs	r3, #1
 80009dc:	e000      	b.n	80009e0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80009de:	2300      	movs	r3, #0
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	370c      	adds	r7, #12
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr

080009ec <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b087      	sub	sp, #28
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	60f8      	str	r0, [r7, #12]
 80009f4:	60b9      	str	r1, [r7, #8]
 80009f6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	3330      	adds	r3, #48	; 0x30
 80009fc:	461a      	mov	r2, r3
 80009fe:	68bb      	ldr	r3, [r7, #8]
 8000a00:	0a1b      	lsrs	r3, r3, #8
 8000a02:	009b      	lsls	r3, r3, #2
 8000a04:	f003 030c 	and.w	r3, r3, #12
 8000a08:	4413      	add	r3, r2
 8000a0a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	f003 031f 	and.w	r3, r3, #31
 8000a16:	211f      	movs	r1, #31
 8000a18:	fa01 f303 	lsl.w	r3, r1, r3
 8000a1c:	43db      	mvns	r3, r3
 8000a1e:	401a      	ands	r2, r3
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	0e9b      	lsrs	r3, r3, #26
 8000a24:	f003 011f 	and.w	r1, r3, #31
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	f003 031f 	and.w	r3, r3, #31
 8000a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a32:	431a      	orrs	r2, r3
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000a38:	bf00      	nop
 8000a3a:	371c      	adds	r7, #28
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr

08000a44 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b087      	sub	sp, #28
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	60f8      	str	r0, [r7, #12]
 8000a4c:	60b9      	str	r1, [r7, #8]
 8000a4e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	3314      	adds	r3, #20
 8000a54:	461a      	mov	r2, r3
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	0e5b      	lsrs	r3, r3, #25
 8000a5a:	009b      	lsls	r3, r3, #2
 8000a5c:	f003 0304 	and.w	r3, r3, #4
 8000a60:	4413      	add	r3, r2
 8000a62:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	681a      	ldr	r2, [r3, #0]
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	0d1b      	lsrs	r3, r3, #20
 8000a6c:	f003 031f 	and.w	r3, r3, #31
 8000a70:	2107      	movs	r1, #7
 8000a72:	fa01 f303 	lsl.w	r3, r1, r3
 8000a76:	43db      	mvns	r3, r3
 8000a78:	401a      	ands	r2, r3
 8000a7a:	68bb      	ldr	r3, [r7, #8]
 8000a7c:	0d1b      	lsrs	r3, r3, #20
 8000a7e:	f003 031f 	and.w	r3, r3, #31
 8000a82:	6879      	ldr	r1, [r7, #4]
 8000a84:	fa01 f303 	lsl.w	r3, r1, r3
 8000a88:	431a      	orrs	r2, r3
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000a8e:	bf00      	nop
 8000a90:	371c      	adds	r7, #28
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
	...

08000a9c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	60f8      	str	r0, [r7, #12]
 8000aa4:	60b9      	str	r1, [r7, #8]
 8000aa6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000aae:	68bb      	ldr	r3, [r7, #8]
 8000ab0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ab4:	43db      	mvns	r3, r3
 8000ab6:	401a      	ands	r2, r3
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	f003 0318 	and.w	r3, r3, #24
 8000abe:	4908      	ldr	r1, [pc, #32]	; (8000ae0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000ac0:	40d9      	lsrs	r1, r3
 8000ac2:	68bb      	ldr	r3, [r7, #8]
 8000ac4:	400b      	ands	r3, r1
 8000ac6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000aca:	431a      	orrs	r2, r3
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000ad2:	bf00      	nop
 8000ad4:	3714      	adds	r7, #20
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	0007ffff 	.word	0x0007ffff

08000ae4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	689b      	ldr	r3, [r3, #8]
 8000af0:	f003 031f 	and.w	r3, r3, #31
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	370c      	adds	r7, #12
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	689b      	ldr	r3, [r3, #8]
 8000b0c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr

08000b1c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	689b      	ldr	r3, [r3, #8]
 8000b28:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000b2c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000b30:	687a      	ldr	r2, [r7, #4]
 8000b32:	6093      	str	r3, [r2, #8]
}
 8000b34:	bf00      	nop
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	689b      	ldr	r3, [r3, #8]
 8000b4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000b50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000b54:	d101      	bne.n	8000b5a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000b56:	2301      	movs	r3, #1
 8000b58:	e000      	b.n	8000b5c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000b5a:	2300      	movs	r3, #0
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr

08000b68 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	689b      	ldr	r3, [r3, #8]
 8000b74:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000b78:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000b7c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000b84:	bf00      	nop
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	689b      	ldr	r3, [r3, #8]
 8000b9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ba0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000ba4:	d101      	bne.n	8000baa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e000      	b.n	8000bac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000baa:	2300      	movs	r3, #0
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	689b      	ldr	r3, [r3, #8]
 8000bc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000bc8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000bcc:	f043 0201 	orr.w	r2, r3, #1
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000bd4:	bf00      	nop
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	689b      	ldr	r3, [r3, #8]
 8000bec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000bf0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000bf4:	f043 0202 	orr.w	r2, r3, #2
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000bfc:	bf00      	nop
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	689b      	ldr	r3, [r3, #8]
 8000c14:	f003 0301 	and.w	r3, r3, #1
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d101      	bne.n	8000c20 <LL_ADC_IsEnabled+0x18>
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	e000      	b.n	8000c22 <LL_ADC_IsEnabled+0x1a>
 8000c20:	2300      	movs	r3, #0
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr

08000c2e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	b083      	sub	sp, #12
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	689b      	ldr	r3, [r3, #8]
 8000c3a:	f003 0302 	and.w	r3, r3, #2
 8000c3e:	2b02      	cmp	r3, #2
 8000c40:	d101      	bne.n	8000c46 <LL_ADC_IsDisableOngoing+0x18>
 8000c42:	2301      	movs	r3, #1
 8000c44:	e000      	b.n	8000c48 <LL_ADC_IsDisableOngoing+0x1a>
 8000c46:	2300      	movs	r3, #0
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	689b      	ldr	r3, [r3, #8]
 8000c60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000c64:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000c68:	f043 0204 	orr.w	r2, r3, #4
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000c70:	bf00      	nop
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	689b      	ldr	r3, [r3, #8]
 8000c88:	f003 0304 	and.w	r3, r3, #4
 8000c8c:	2b04      	cmp	r3, #4
 8000c8e:	d101      	bne.n	8000c94 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000c90:	2301      	movs	r3, #1
 8000c92:	e000      	b.n	8000c96 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr

08000ca2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	b083      	sub	sp, #12
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	689b      	ldr	r3, [r3, #8]
 8000cae:	f003 0308 	and.w	r3, r3, #8
 8000cb2:	2b08      	cmp	r3, #8
 8000cb4:	d101      	bne.n	8000cba <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e000      	b.n	8000cbc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000cba:	2300      	movs	r3, #0
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000cc8:	b590      	push	{r4, r7, lr}
 8000cca:	b089      	sub	sp, #36	; 0x24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d101      	bne.n	8000ce2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e136      	b.n	8000f50 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	691b      	ldr	r3, [r3, #16]
 8000ce6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d109      	bne.n	8000d04 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f7ff fc25 	bl	8000540 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2200      	movs	r2, #0
 8000d00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff ff19 	bl	8000b40 <LL_ADC_IsDeepPowerDownEnabled>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d004      	beq.n	8000d1e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff feff 	bl	8000b1c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff ff34 	bl	8000b90 <LL_ADC_IsInternalRegulatorEnabled>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d115      	bne.n	8000d5a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff ff18 	bl	8000b68 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000d38:	4b87      	ldr	r3, [pc, #540]	; (8000f58 <HAL_ADC_Init+0x290>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	099b      	lsrs	r3, r3, #6
 8000d3e:	4a87      	ldr	r2, [pc, #540]	; (8000f5c <HAL_ADC_Init+0x294>)
 8000d40:	fba2 2303 	umull	r2, r3, r2, r3
 8000d44:	099b      	lsrs	r3, r3, #6
 8000d46:	3301      	adds	r3, #1
 8000d48:	005b      	lsls	r3, r3, #1
 8000d4a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000d4c:	e002      	b.n	8000d54 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8000d4e:	68bb      	ldr	r3, [r7, #8]
 8000d50:	3b01      	subs	r3, #1
 8000d52:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d1f9      	bne.n	8000d4e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff ff16 	bl	8000b90 <LL_ADC_IsInternalRegulatorEnabled>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d10d      	bne.n	8000d86 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d6e:	f043 0210 	orr.w	r2, r3, #16
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d7a:	f043 0201 	orr.w	r2, r3, #1
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff ff76 	bl	8000c7c <LL_ADC_REG_IsConversionOngoing>
 8000d90:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d96:	f003 0310 	and.w	r3, r3, #16
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	f040 80cf 	bne.w	8000f3e <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f040 80cb 	bne.w	8000f3e <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dac:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000db0:	f043 0202 	orr.w	r2, r3, #2
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff ff23 	bl	8000c08 <LL_ADC_IsEnabled>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d115      	bne.n	8000df4 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000dc8:	4865      	ldr	r0, [pc, #404]	; (8000f60 <HAL_ADC_Init+0x298>)
 8000dca:	f7ff ff1d 	bl	8000c08 <LL_ADC_IsEnabled>
 8000dce:	4604      	mov	r4, r0
 8000dd0:	4864      	ldr	r0, [pc, #400]	; (8000f64 <HAL_ADC_Init+0x29c>)
 8000dd2:	f7ff ff19 	bl	8000c08 <LL_ADC_IsEnabled>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	431c      	orrs	r4, r3
 8000dda:	4863      	ldr	r0, [pc, #396]	; (8000f68 <HAL_ADC_Init+0x2a0>)
 8000ddc:	f7ff ff14 	bl	8000c08 <LL_ADC_IsEnabled>
 8000de0:	4603      	mov	r3, r0
 8000de2:	4323      	orrs	r3, r4
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d105      	bne.n	8000df4 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	4619      	mov	r1, r3
 8000dee:	485f      	ldr	r0, [pc, #380]	; (8000f6c <HAL_ADC_Init+0x2a4>)
 8000df0:	f7ff fd60 	bl	80008b4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	7e5b      	ldrb	r3, [r3, #25]
 8000df8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000dfe:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8000e04:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8000e0a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e12:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000e14:	4313      	orrs	r3, r2
 8000e16:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d106      	bne.n	8000e30 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e26:	3b01      	subs	r3, #1
 8000e28:	045b      	lsls	r3, r3, #17
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d009      	beq.n	8000e4c <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e3c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e44:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	68da      	ldr	r2, [r3, #12]
 8000e52:	4b47      	ldr	r3, [pc, #284]	; (8000f70 <HAL_ADC_Init+0x2a8>)
 8000e54:	4013      	ands	r3, r2
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	6812      	ldr	r2, [r2, #0]
 8000e5a:	69b9      	ldr	r1, [r7, #24]
 8000e5c:	430b      	orrs	r3, r1
 8000e5e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff ff09 	bl	8000c7c <LL_ADC_REG_IsConversionOngoing>
 8000e6a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff ff16 	bl	8000ca2 <LL_ADC_INJ_IsConversionOngoing>
 8000e76:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d13d      	bne.n	8000efa <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d13a      	bne.n	8000efa <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000e88:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000e90:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000e92:	4313      	orrs	r3, r2
 8000e94:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000ea0:	f023 0302 	bic.w	r3, r3, #2
 8000ea4:	687a      	ldr	r2, [r7, #4]
 8000ea6:	6812      	ldr	r2, [r2, #0]
 8000ea8:	69b9      	ldr	r1, [r7, #24]
 8000eaa:	430b      	orrs	r3, r1
 8000eac:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d118      	bne.n	8000eea <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	691b      	ldr	r3, [r3, #16]
 8000ebe:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000ec2:	f023 0304 	bic.w	r3, r3, #4
 8000ec6:	687a      	ldr	r2, [r7, #4]
 8000ec8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000ece:	4311      	orrs	r1, r2
 8000ed0:	687a      	ldr	r2, [r7, #4]
 8000ed2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000ed4:	4311      	orrs	r1, r2
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000eda:	430a      	orrs	r2, r1
 8000edc:	431a      	orrs	r2, r3
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f042 0201 	orr.w	r2, r2, #1
 8000ee6:	611a      	str	r2, [r3, #16]
 8000ee8:	e007      	b.n	8000efa <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	691a      	ldr	r2, [r3, #16]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f022 0201 	bic.w	r2, r2, #1
 8000ef8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	691b      	ldr	r3, [r3, #16]
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d10c      	bne.n	8000f1c <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f08:	f023 010f 	bic.w	r1, r3, #15
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	69db      	ldr	r3, [r3, #28]
 8000f10:	1e5a      	subs	r2, r3, #1
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	430a      	orrs	r2, r1
 8000f18:	631a      	str	r2, [r3, #48]	; 0x30
 8000f1a:	e007      	b.n	8000f2c <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f022 020f 	bic.w	r2, r2, #15
 8000f2a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f30:	f023 0303 	bic.w	r3, r3, #3
 8000f34:	f043 0201 	orr.w	r2, r3, #1
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	655a      	str	r2, [r3, #84]	; 0x54
 8000f3c:	e007      	b.n	8000f4e <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f42:	f043 0210 	orr.w	r2, r3, #16
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000f4e:	7ffb      	ldrb	r3, [r7, #31]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3724      	adds	r7, #36	; 0x24
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd90      	pop	{r4, r7, pc}
 8000f58:	20000000 	.word	0x20000000
 8000f5c:	053e2d63 	.word	0x053e2d63
 8000f60:	50040000 	.word	0x50040000
 8000f64:	50040100 	.word	0x50040100
 8000f68:	50040200 	.word	0x50040200
 8000f6c:	50040300 	.word	0x50040300
 8000f70:	fff0c007 	.word	0xfff0c007

08000f74 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000f7c:	4857      	ldr	r0, [pc, #348]	; (80010dc <HAL_ADC_Start+0x168>)
 8000f7e:	f7ff fdb1 	bl	8000ae4 <LL_ADC_GetMultimode>
 8000f82:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff fe77 	bl	8000c7c <LL_ADC_REG_IsConversionOngoing>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	f040 809c 	bne.w	80010ce <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d101      	bne.n	8000fa4 <HAL_ADC_Start+0x30>
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	e097      	b.n	80010d4 <HAL_ADC_Start+0x160>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f000 fd71 	bl	8001a94 <ADC_Enable>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000fb6:	7dfb      	ldrb	r3, [r7, #23]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	f040 8083 	bne.w	80010c4 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fc2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000fc6:	f023 0301 	bic.w	r3, r3, #1
 8000fca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a42      	ldr	r2, [pc, #264]	; (80010e0 <HAL_ADC_Start+0x16c>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d002      	beq.n	8000fe2 <HAL_ADC_Start+0x6e>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	e000      	b.n	8000fe4 <HAL_ADC_Start+0x70>
 8000fe2:	4b40      	ldr	r3, [pc, #256]	; (80010e4 <HAL_ADC_Start+0x170>)
 8000fe4:	687a      	ldr	r2, [r7, #4]
 8000fe6:	6812      	ldr	r2, [r2, #0]
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d002      	beq.n	8000ff2 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d105      	bne.n	8000ffe <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ff6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001002:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001006:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800100a:	d106      	bne.n	800101a <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001010:	f023 0206 	bic.w	r2, r3, #6
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	659a      	str	r2, [r3, #88]	; 0x58
 8001018:	e002      	b.n	8001020 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2200      	movs	r2, #0
 800101e:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	221c      	movs	r2, #28
 8001026:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2200      	movs	r2, #0
 800102c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a2a      	ldr	r2, [pc, #168]	; (80010e0 <HAL_ADC_Start+0x16c>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d002      	beq.n	8001040 <HAL_ADC_Start+0xcc>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	e000      	b.n	8001042 <HAL_ADC_Start+0xce>
 8001040:	4b28      	ldr	r3, [pc, #160]	; (80010e4 <HAL_ADC_Start+0x170>)
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	6812      	ldr	r2, [r2, #0]
 8001046:	4293      	cmp	r3, r2
 8001048:	d008      	beq.n	800105c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d005      	beq.n	800105c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	2b05      	cmp	r3, #5
 8001054:	d002      	beq.n	800105c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	2b09      	cmp	r3, #9
 800105a:	d114      	bne.n	8001086 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	68db      	ldr	r3, [r3, #12]
 8001062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001066:	2b00      	cmp	r3, #0
 8001068:	d007      	beq.n	800107a <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800106e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001072:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff fde8 	bl	8000c54 <LL_ADC_REG_StartConversion>
 8001084:	e025      	b.n	80010d2 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800108a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a12      	ldr	r2, [pc, #72]	; (80010e0 <HAL_ADC_Start+0x16c>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d002      	beq.n	80010a2 <HAL_ADC_Start+0x12e>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	e000      	b.n	80010a4 <HAL_ADC_Start+0x130>
 80010a2:	4b10      	ldr	r3, [pc, #64]	; (80010e4 <HAL_ADC_Start+0x170>)
 80010a4:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	68db      	ldr	r3, [r3, #12]
 80010aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d00f      	beq.n	80010d2 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010b6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80010ba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	655a      	str	r2, [r3, #84]	; 0x54
 80010c2:	e006      	b.n	80010d2 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2200      	movs	r2, #0
 80010c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80010cc:	e001      	b.n	80010d2 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80010ce:	2302      	movs	r3, #2
 80010d0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80010d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3718      	adds	r7, #24
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	50040300 	.word	0x50040300
 80010e0:	50040100 	.word	0x50040100
 80010e4:	50040000 	.word	0x50040000

080010e8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b088      	sub	sp, #32
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80010f2:	4866      	ldr	r0, [pc, #408]	; (800128c <HAL_ADC_PollForConversion+0x1a4>)
 80010f4:	f7ff fcf6 	bl	8000ae4 <LL_ADC_GetMultimode>
 80010f8:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	695b      	ldr	r3, [r3, #20]
 80010fe:	2b08      	cmp	r3, #8
 8001100:	d102      	bne.n	8001108 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001102:	2308      	movs	r3, #8
 8001104:	61fb      	str	r3, [r7, #28]
 8001106:	e02a      	b.n	800115e <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d005      	beq.n	800111a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	2b05      	cmp	r3, #5
 8001112:	d002      	beq.n	800111a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	2b09      	cmp	r3, #9
 8001118:	d111      	bne.n	800113e <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	f003 0301 	and.w	r3, r3, #1
 8001124:	2b00      	cmp	r3, #0
 8001126:	d007      	beq.n	8001138 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800112c:	f043 0220 	orr.w	r2, r3, #32
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001134:	2301      	movs	r3, #1
 8001136:	e0a4      	b.n	8001282 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001138:	2304      	movs	r3, #4
 800113a:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800113c:	e00f      	b.n	800115e <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800113e:	4853      	ldr	r0, [pc, #332]	; (800128c <HAL_ADC_PollForConversion+0x1a4>)
 8001140:	f7ff fcde 	bl	8000b00 <LL_ADC_GetMultiDMATransfer>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d007      	beq.n	800115a <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800114e:	f043 0220 	orr.w	r2, r3, #32
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e093      	b.n	8001282 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800115a:	2304      	movs	r3, #4
 800115c:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800115e:	f7ff fb79 	bl	8000854 <HAL_GetTick>
 8001162:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001164:	e021      	b.n	80011aa <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800116c:	d01d      	beq.n	80011aa <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800116e:	f7ff fb71 	bl	8000854 <HAL_GetTick>
 8001172:	4602      	mov	r2, r0
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	683a      	ldr	r2, [r7, #0]
 800117a:	429a      	cmp	r2, r3
 800117c:	d302      	bcc.n	8001184 <HAL_ADC_PollForConversion+0x9c>
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d112      	bne.n	80011aa <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	4013      	ands	r3, r2
 800118e:	2b00      	cmp	r3, #0
 8001190:	d10b      	bne.n	80011aa <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001196:	f043 0204 	orr.w	r2, r3, #4
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2200      	movs	r2, #0
 80011a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80011a6:	2303      	movs	r3, #3
 80011a8:	e06b      	b.n	8001282 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	4013      	ands	r3, r2
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d0d6      	beq.n	8001166 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011bc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff fbfc 	bl	80009c6 <LL_ADC_REG_IsTriggerSourceSWStart>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d01c      	beq.n	800120e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	7e5b      	ldrb	r3, [r3, #25]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d118      	bne.n	800120e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 0308 	and.w	r3, r3, #8
 80011e6:	2b08      	cmp	r3, #8
 80011e8:	d111      	bne.n	800120e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d105      	bne.n	800120e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001206:	f043 0201 	orr.w	r2, r3, #1
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a1f      	ldr	r2, [pc, #124]	; (8001290 <HAL_ADC_PollForConversion+0x1a8>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d002      	beq.n	800121e <HAL_ADC_PollForConversion+0x136>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	e000      	b.n	8001220 <HAL_ADC_PollForConversion+0x138>
 800121e:	4b1d      	ldr	r3, [pc, #116]	; (8001294 <HAL_ADC_PollForConversion+0x1ac>)
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	6812      	ldr	r2, [r2, #0]
 8001224:	4293      	cmp	r3, r2
 8001226:	d008      	beq.n	800123a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d005      	beq.n	800123a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	2b05      	cmp	r3, #5
 8001232:	d002      	beq.n	800123a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	2b09      	cmp	r3, #9
 8001238:	d104      	bne.n	8001244 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	61bb      	str	r3, [r7, #24]
 8001242:	e00c      	b.n	800125e <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a11      	ldr	r2, [pc, #68]	; (8001290 <HAL_ADC_PollForConversion+0x1a8>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d002      	beq.n	8001254 <HAL_ADC_PollForConversion+0x16c>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	e000      	b.n	8001256 <HAL_ADC_PollForConversion+0x16e>
 8001254:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <HAL_ADC_PollForConversion+0x1ac>)
 8001256:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	2b08      	cmp	r3, #8
 8001262:	d104      	bne.n	800126e <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2208      	movs	r2, #8
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	e008      	b.n	8001280 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d103      	bne.n	8001280 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	220c      	movs	r2, #12
 800127e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001280:	2300      	movs	r3, #0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3720      	adds	r7, #32
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	50040300 	.word	0x50040300
 8001290:	50040100 	.word	0x50040100
 8001294:	50040000 	.word	0x50040000

08001298 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
	...

080012b4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b0b6      	sub	sp, #216	; 0xd8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012be:	2300      	movs	r3, #0
 80012c0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d101      	bne.n	80012d6 <HAL_ADC_ConfigChannel+0x22>
 80012d2:	2302      	movs	r3, #2
 80012d4:	e3c7      	b.n	8001a66 <HAL_ADC_ConfigChannel+0x7b2>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2201      	movs	r2, #1
 80012da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff fcca 	bl	8000c7c <LL_ADC_REG_IsConversionOngoing>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	f040 83a8 	bne.w	8001a40 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	2b05      	cmp	r3, #5
 80012f6:	d824      	bhi.n	8001342 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	3b02      	subs	r3, #2
 80012fe:	2b03      	cmp	r3, #3
 8001300:	d81b      	bhi.n	800133a <HAL_ADC_ConfigChannel+0x86>
 8001302:	a201      	add	r2, pc, #4	; (adr r2, 8001308 <HAL_ADC_ConfigChannel+0x54>)
 8001304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001308:	08001319 	.word	0x08001319
 800130c:	08001321 	.word	0x08001321
 8001310:	08001329 	.word	0x08001329
 8001314:	08001331 	.word	0x08001331
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	220c      	movs	r2, #12
 800131c:	605a      	str	r2, [r3, #4]
          break;
 800131e:	e010      	b.n	8001342 <HAL_ADC_ConfigChannel+0x8e>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	2212      	movs	r2, #18
 8001324:	605a      	str	r2, [r3, #4]
          break;
 8001326:	e00c      	b.n	8001342 <HAL_ADC_ConfigChannel+0x8e>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	2218      	movs	r2, #24
 800132c:	605a      	str	r2, [r3, #4]
          break;
 800132e:	e008      	b.n	8001342 <HAL_ADC_ConfigChannel+0x8e>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001336:	605a      	str	r2, [r3, #4]
          break;
 8001338:	e003      	b.n	8001342 <HAL_ADC_ConfigChannel+0x8e>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	2206      	movs	r2, #6
 800133e:	605a      	str	r2, [r3, #4]
          break;
 8001340:	bf00      	nop
      }
    }
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6818      	ldr	r0, [r3, #0]
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	6859      	ldr	r1, [r3, #4]
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	461a      	mov	r2, r3
 8001350:	f7ff fb4c 	bl	80009ec <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff fc8f 	bl	8000c7c <LL_ADC_REG_IsConversionOngoing>
 800135e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff fc9b 	bl	8000ca2 <LL_ADC_INJ_IsConversionOngoing>
 800136c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001370:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001374:	2b00      	cmp	r3, #0
 8001376:	f040 81a6 	bne.w	80016c6 <HAL_ADC_ConfigChannel+0x412>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800137a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800137e:	2b00      	cmp	r3, #0
 8001380:	f040 81a1 	bne.w	80016c6 <HAL_ADC_ConfigChannel+0x412>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6818      	ldr	r0, [r3, #0]
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	6819      	ldr	r1, [r3, #0]
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	461a      	mov	r2, r3
 8001392:	f7ff fb57 	bl	8000a44 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	695a      	ldr	r2, [r3, #20]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	08db      	lsrs	r3, r3, #3
 80013a2:	f003 0303 	and.w	r3, r3, #3
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	691b      	ldr	r3, [r3, #16]
 80013b4:	2b04      	cmp	r3, #4
 80013b6:	d00a      	beq.n	80013ce <HAL_ADC_ConfigChannel+0x11a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6818      	ldr	r0, [r3, #0]
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	6919      	ldr	r1, [r3, #16]
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80013c8:	f7ff faa8 	bl	800091c <LL_ADC_SetOffset>
 80013cc:	e17b      	b.n	80016c6 <HAL_ADC_ConfigChannel+0x412>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2100      	movs	r1, #0
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff fac5 	bl	8000964 <LL_ADC_GetOffsetChannel>
 80013da:	4603      	mov	r3, r0
 80013dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d10a      	bne.n	80013fa <HAL_ADC_ConfigChannel+0x146>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2100      	movs	r1, #0
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff faba 	bl	8000964 <LL_ADC_GetOffsetChannel>
 80013f0:	4603      	mov	r3, r0
 80013f2:	0e9b      	lsrs	r3, r3, #26
 80013f4:	f003 021f 	and.w	r2, r3, #31
 80013f8:	e01e      	b.n	8001438 <HAL_ADC_ConfigChannel+0x184>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2100      	movs	r1, #0
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff faaf 	bl	8000964 <LL_ADC_GetOffsetChannel>
 8001406:	4603      	mov	r3, r0
 8001408:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800140c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001410:	fa93 f3a3 	rbit	r3, r3
 8001414:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001418:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800141c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001420:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d101      	bne.n	800142c <HAL_ADC_ConfigChannel+0x178>
  {
    return 32U;
 8001428:	2320      	movs	r3, #32
 800142a:	e004      	b.n	8001436 <HAL_ADC_ConfigChannel+0x182>
  }
  return __builtin_clz(value);
 800142c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001430:	fab3 f383 	clz	r3, r3
 8001434:	b2db      	uxtb	r3, r3
 8001436:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001440:	2b00      	cmp	r3, #0
 8001442:	d105      	bne.n	8001450 <HAL_ADC_ConfigChannel+0x19c>
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	0e9b      	lsrs	r3, r3, #26
 800144a:	f003 031f 	and.w	r3, r3, #31
 800144e:	e018      	b.n	8001482 <HAL_ADC_ConfigChannel+0x1ce>
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001458:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800145c:	fa93 f3a3 	rbit	r3, r3
 8001460:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001464:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001468:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800146c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001470:	2b00      	cmp	r3, #0
 8001472:	d101      	bne.n	8001478 <HAL_ADC_ConfigChannel+0x1c4>
    return 32U;
 8001474:	2320      	movs	r3, #32
 8001476:	e004      	b.n	8001482 <HAL_ADC_ConfigChannel+0x1ce>
  return __builtin_clz(value);
 8001478:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800147c:	fab3 f383 	clz	r3, r3
 8001480:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001482:	429a      	cmp	r2, r3
 8001484:	d106      	bne.n	8001494 <HAL_ADC_ConfigChannel+0x1e0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	2200      	movs	r2, #0
 800148c:	2100      	movs	r1, #0
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff fa7e 	bl	8000990 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2101      	movs	r1, #1
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff fa62 	bl	8000964 <LL_ADC_GetOffsetChannel>
 80014a0:	4603      	mov	r3, r0
 80014a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d10a      	bne.n	80014c0 <HAL_ADC_ConfigChannel+0x20c>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2101      	movs	r1, #1
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff fa57 	bl	8000964 <LL_ADC_GetOffsetChannel>
 80014b6:	4603      	mov	r3, r0
 80014b8:	0e9b      	lsrs	r3, r3, #26
 80014ba:	f003 021f 	and.w	r2, r3, #31
 80014be:	e01e      	b.n	80014fe <HAL_ADC_ConfigChannel+0x24a>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2101      	movs	r1, #1
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff fa4c 	bl	8000964 <LL_ADC_GetOffsetChannel>
 80014cc:	4603      	mov	r3, r0
 80014ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80014d6:	fa93 f3a3 	rbit	r3, r3
 80014da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80014de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80014e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80014e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d101      	bne.n	80014f2 <HAL_ADC_ConfigChannel+0x23e>
    return 32U;
 80014ee:	2320      	movs	r3, #32
 80014f0:	e004      	b.n	80014fc <HAL_ADC_ConfigChannel+0x248>
  return __builtin_clz(value);
 80014f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80014f6:	fab3 f383 	clz	r3, r3
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001506:	2b00      	cmp	r3, #0
 8001508:	d105      	bne.n	8001516 <HAL_ADC_ConfigChannel+0x262>
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	0e9b      	lsrs	r3, r3, #26
 8001510:	f003 031f 	and.w	r3, r3, #31
 8001514:	e018      	b.n	8001548 <HAL_ADC_ConfigChannel+0x294>
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800151e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001522:	fa93 f3a3 	rbit	r3, r3
 8001526:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800152a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800152e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001532:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001536:	2b00      	cmp	r3, #0
 8001538:	d101      	bne.n	800153e <HAL_ADC_ConfigChannel+0x28a>
    return 32U;
 800153a:	2320      	movs	r3, #32
 800153c:	e004      	b.n	8001548 <HAL_ADC_ConfigChannel+0x294>
  return __builtin_clz(value);
 800153e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001542:	fab3 f383 	clz	r3, r3
 8001546:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001548:	429a      	cmp	r2, r3
 800154a:	d106      	bne.n	800155a <HAL_ADC_ConfigChannel+0x2a6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2200      	movs	r2, #0
 8001552:	2101      	movs	r1, #1
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff fa1b 	bl	8000990 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	2102      	movs	r1, #2
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff f9ff 	bl	8000964 <LL_ADC_GetOffsetChannel>
 8001566:	4603      	mov	r3, r0
 8001568:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800156c:	2b00      	cmp	r3, #0
 800156e:	d10a      	bne.n	8001586 <HAL_ADC_ConfigChannel+0x2d2>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2102      	movs	r1, #2
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff f9f4 	bl	8000964 <LL_ADC_GetOffsetChannel>
 800157c:	4603      	mov	r3, r0
 800157e:	0e9b      	lsrs	r3, r3, #26
 8001580:	f003 021f 	and.w	r2, r3, #31
 8001584:	e01e      	b.n	80015c4 <HAL_ADC_ConfigChannel+0x310>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2102      	movs	r1, #2
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff f9e9 	bl	8000964 <LL_ADC_GetOffsetChannel>
 8001592:	4603      	mov	r3, r0
 8001594:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001598:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800159c:	fa93 f3a3 	rbit	r3, r3
 80015a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80015a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80015a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80015ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d101      	bne.n	80015b8 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 80015b4:	2320      	movs	r3, #32
 80015b6:	e004      	b.n	80015c2 <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 80015b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80015bc:	fab3 f383 	clz	r3, r3
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d105      	bne.n	80015dc <HAL_ADC_ConfigChannel+0x328>
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	0e9b      	lsrs	r3, r3, #26
 80015d6:	f003 031f 	and.w	r3, r3, #31
 80015da:	e016      	b.n	800160a <HAL_ADC_ConfigChannel+0x356>
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80015e8:	fa93 f3a3 	rbit	r3, r3
 80015ec:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80015ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80015f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80015f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d101      	bne.n	8001600 <HAL_ADC_ConfigChannel+0x34c>
    return 32U;
 80015fc:	2320      	movs	r3, #32
 80015fe:	e004      	b.n	800160a <HAL_ADC_ConfigChannel+0x356>
  return __builtin_clz(value);
 8001600:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001604:	fab3 f383 	clz	r3, r3
 8001608:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800160a:	429a      	cmp	r2, r3
 800160c:	d106      	bne.n	800161c <HAL_ADC_ConfigChannel+0x368>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2200      	movs	r2, #0
 8001614:	2102      	movs	r1, #2
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff f9ba 	bl	8000990 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2103      	movs	r1, #3
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff f99e 	bl	8000964 <LL_ADC_GetOffsetChannel>
 8001628:	4603      	mov	r3, r0
 800162a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800162e:	2b00      	cmp	r3, #0
 8001630:	d10a      	bne.n	8001648 <HAL_ADC_ConfigChannel+0x394>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2103      	movs	r1, #3
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff f993 	bl	8000964 <LL_ADC_GetOffsetChannel>
 800163e:	4603      	mov	r3, r0
 8001640:	0e9b      	lsrs	r3, r3, #26
 8001642:	f003 021f 	and.w	r2, r3, #31
 8001646:	e017      	b.n	8001678 <HAL_ADC_ConfigChannel+0x3c4>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2103      	movs	r1, #3
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff f988 	bl	8000964 <LL_ADC_GetOffsetChannel>
 8001654:	4603      	mov	r3, r0
 8001656:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001658:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800165a:	fa93 f3a3 	rbit	r3, r3
 800165e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001660:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001662:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001664:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001666:	2b00      	cmp	r3, #0
 8001668:	d101      	bne.n	800166e <HAL_ADC_ConfigChannel+0x3ba>
    return 32U;
 800166a:	2320      	movs	r3, #32
 800166c:	e003      	b.n	8001676 <HAL_ADC_ConfigChannel+0x3c2>
  return __builtin_clz(value);
 800166e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001670:	fab3 f383 	clz	r3, r3
 8001674:	b2db      	uxtb	r3, r3
 8001676:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001680:	2b00      	cmp	r3, #0
 8001682:	d105      	bne.n	8001690 <HAL_ADC_ConfigChannel+0x3dc>
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	0e9b      	lsrs	r3, r3, #26
 800168a:	f003 031f 	and.w	r3, r3, #31
 800168e:	e011      	b.n	80016b4 <HAL_ADC_ConfigChannel+0x400>
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001696:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001698:	fa93 f3a3 	rbit	r3, r3
 800169c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800169e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80016a0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80016a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d101      	bne.n	80016ac <HAL_ADC_ConfigChannel+0x3f8>
    return 32U;
 80016a8:	2320      	movs	r3, #32
 80016aa:	e003      	b.n	80016b4 <HAL_ADC_ConfigChannel+0x400>
  return __builtin_clz(value);
 80016ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80016ae:	fab3 f383 	clz	r3, r3
 80016b2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d106      	bne.n	80016c6 <HAL_ADC_ConfigChannel+0x412>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2200      	movs	r2, #0
 80016be:	2103      	movs	r1, #3
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff f965 	bl	8000990 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff fa9c 	bl	8000c08 <LL_ADC_IsEnabled>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	f040 8140 	bne.w	8001958 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6818      	ldr	r0, [r3, #0]
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	6819      	ldr	r1, [r3, #0]
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	461a      	mov	r2, r3
 80016e6:	f7ff f9d9 	bl	8000a9c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	4a8f      	ldr	r2, [pc, #572]	; (800192c <HAL_ADC_ConfigChannel+0x678>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	f040 8131 	bne.w	8001958 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001702:	2b00      	cmp	r3, #0
 8001704:	d10b      	bne.n	800171e <HAL_ADC_ConfigChannel+0x46a>
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	0e9b      	lsrs	r3, r3, #26
 800170c:	3301      	adds	r3, #1
 800170e:	f003 031f 	and.w	r3, r3, #31
 8001712:	2b09      	cmp	r3, #9
 8001714:	bf94      	ite	ls
 8001716:	2301      	movls	r3, #1
 8001718:	2300      	movhi	r3, #0
 800171a:	b2db      	uxtb	r3, r3
 800171c:	e019      	b.n	8001752 <HAL_ADC_ConfigChannel+0x49e>
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001724:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001726:	fa93 f3a3 	rbit	r3, r3
 800172a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800172c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800172e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001730:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001732:	2b00      	cmp	r3, #0
 8001734:	d101      	bne.n	800173a <HAL_ADC_ConfigChannel+0x486>
    return 32U;
 8001736:	2320      	movs	r3, #32
 8001738:	e003      	b.n	8001742 <HAL_ADC_ConfigChannel+0x48e>
  return __builtin_clz(value);
 800173a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800173c:	fab3 f383 	clz	r3, r3
 8001740:	b2db      	uxtb	r3, r3
 8001742:	3301      	adds	r3, #1
 8001744:	f003 031f 	and.w	r3, r3, #31
 8001748:	2b09      	cmp	r3, #9
 800174a:	bf94      	ite	ls
 800174c:	2301      	movls	r3, #1
 800174e:	2300      	movhi	r3, #0
 8001750:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001752:	2b00      	cmp	r3, #0
 8001754:	d079      	beq.n	800184a <HAL_ADC_ConfigChannel+0x596>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800175e:	2b00      	cmp	r3, #0
 8001760:	d107      	bne.n	8001772 <HAL_ADC_ConfigChannel+0x4be>
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	0e9b      	lsrs	r3, r3, #26
 8001768:	3301      	adds	r3, #1
 800176a:	069b      	lsls	r3, r3, #26
 800176c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001770:	e015      	b.n	800179e <HAL_ADC_ConfigChannel+0x4ea>
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001778:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800177a:	fa93 f3a3 	rbit	r3, r3
 800177e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001780:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001782:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001784:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001786:	2b00      	cmp	r3, #0
 8001788:	d101      	bne.n	800178e <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 800178a:	2320      	movs	r3, #32
 800178c:	e003      	b.n	8001796 <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 800178e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001790:	fab3 f383 	clz	r3, r3
 8001794:	b2db      	uxtb	r3, r3
 8001796:	3301      	adds	r3, #1
 8001798:	069b      	lsls	r3, r3, #26
 800179a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d109      	bne.n	80017be <HAL_ADC_ConfigChannel+0x50a>
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	0e9b      	lsrs	r3, r3, #26
 80017b0:	3301      	adds	r3, #1
 80017b2:	f003 031f 	and.w	r3, r3, #31
 80017b6:	2101      	movs	r1, #1
 80017b8:	fa01 f303 	lsl.w	r3, r1, r3
 80017bc:	e017      	b.n	80017ee <HAL_ADC_ConfigChannel+0x53a>
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017c6:	fa93 f3a3 	rbit	r3, r3
 80017ca:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80017cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017ce:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80017d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d101      	bne.n	80017da <HAL_ADC_ConfigChannel+0x526>
    return 32U;
 80017d6:	2320      	movs	r3, #32
 80017d8:	e003      	b.n	80017e2 <HAL_ADC_ConfigChannel+0x52e>
  return __builtin_clz(value);
 80017da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017dc:	fab3 f383 	clz	r3, r3
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	3301      	adds	r3, #1
 80017e4:	f003 031f 	and.w	r3, r3, #31
 80017e8:	2101      	movs	r1, #1
 80017ea:	fa01 f303 	lsl.w	r3, r1, r3
 80017ee:	ea42 0103 	orr.w	r1, r2, r3
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d10a      	bne.n	8001814 <HAL_ADC_ConfigChannel+0x560>
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	0e9b      	lsrs	r3, r3, #26
 8001804:	3301      	adds	r3, #1
 8001806:	f003 021f 	and.w	r2, r3, #31
 800180a:	4613      	mov	r3, r2
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	4413      	add	r3, r2
 8001810:	051b      	lsls	r3, r3, #20
 8001812:	e018      	b.n	8001846 <HAL_ADC_ConfigChannel+0x592>
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800181a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800181c:	fa93 f3a3 	rbit	r3, r3
 8001820:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001824:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001828:	2b00      	cmp	r3, #0
 800182a:	d101      	bne.n	8001830 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 800182c:	2320      	movs	r3, #32
 800182e:	e003      	b.n	8001838 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8001830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001832:	fab3 f383 	clz	r3, r3
 8001836:	b2db      	uxtb	r3, r3
 8001838:	3301      	adds	r3, #1
 800183a:	f003 021f 	and.w	r2, r3, #31
 800183e:	4613      	mov	r3, r2
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	4413      	add	r3, r2
 8001844:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001846:	430b      	orrs	r3, r1
 8001848:	e081      	b.n	800194e <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001852:	2b00      	cmp	r3, #0
 8001854:	d107      	bne.n	8001866 <HAL_ADC_ConfigChannel+0x5b2>
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	0e9b      	lsrs	r3, r3, #26
 800185c:	3301      	adds	r3, #1
 800185e:	069b      	lsls	r3, r3, #26
 8001860:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001864:	e015      	b.n	8001892 <HAL_ADC_ConfigChannel+0x5de>
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800186c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800186e:	fa93 f3a3 	rbit	r3, r3
 8001872:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001876:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800187a:	2b00      	cmp	r3, #0
 800187c:	d101      	bne.n	8001882 <HAL_ADC_ConfigChannel+0x5ce>
    return 32U;
 800187e:	2320      	movs	r3, #32
 8001880:	e003      	b.n	800188a <HAL_ADC_ConfigChannel+0x5d6>
  return __builtin_clz(value);
 8001882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001884:	fab3 f383 	clz	r3, r3
 8001888:	b2db      	uxtb	r3, r3
 800188a:	3301      	adds	r3, #1
 800188c:	069b      	lsls	r3, r3, #26
 800188e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800189a:	2b00      	cmp	r3, #0
 800189c:	d109      	bne.n	80018b2 <HAL_ADC_ConfigChannel+0x5fe>
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	0e9b      	lsrs	r3, r3, #26
 80018a4:	3301      	adds	r3, #1
 80018a6:	f003 031f 	and.w	r3, r3, #31
 80018aa:	2101      	movs	r1, #1
 80018ac:	fa01 f303 	lsl.w	r3, r1, r3
 80018b0:	e017      	b.n	80018e2 <HAL_ADC_ConfigChannel+0x62e>
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b8:	6a3b      	ldr	r3, [r7, #32]
 80018ba:	fa93 f3a3 	rbit	r3, r3
 80018be:	61fb      	str	r3, [r7, #28]
  return result;
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80018c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d101      	bne.n	80018ce <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 80018ca:	2320      	movs	r3, #32
 80018cc:	e003      	b.n	80018d6 <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 80018ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d0:	fab3 f383 	clz	r3, r3
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	3301      	adds	r3, #1
 80018d8:	f003 031f 	and.w	r3, r3, #31
 80018dc:	2101      	movs	r1, #1
 80018de:	fa01 f303 	lsl.w	r3, r1, r3
 80018e2:	ea42 0103 	orr.w	r1, r2, r3
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d10d      	bne.n	800190e <HAL_ADC_ConfigChannel+0x65a>
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	0e9b      	lsrs	r3, r3, #26
 80018f8:	3301      	adds	r3, #1
 80018fa:	f003 021f 	and.w	r2, r3, #31
 80018fe:	4613      	mov	r3, r2
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	4413      	add	r3, r2
 8001904:	3b1e      	subs	r3, #30
 8001906:	051b      	lsls	r3, r3, #20
 8001908:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800190c:	e01e      	b.n	800194c <HAL_ADC_ConfigChannel+0x698>
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	fa93 f3a3 	rbit	r3, r3
 800191a:	613b      	str	r3, [r7, #16]
  return result;
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d104      	bne.n	8001930 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001926:	2320      	movs	r3, #32
 8001928:	e006      	b.n	8001938 <HAL_ADC_ConfigChannel+0x684>
 800192a:	bf00      	nop
 800192c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	fab3 f383 	clz	r3, r3
 8001936:	b2db      	uxtb	r3, r3
 8001938:	3301      	adds	r3, #1
 800193a:	f003 021f 	and.w	r2, r3, #31
 800193e:	4613      	mov	r3, r2
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	4413      	add	r3, r2
 8001944:	3b1e      	subs	r3, #30
 8001946:	051b      	lsls	r3, r3, #20
 8001948:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800194c:	430b      	orrs	r3, r1
 800194e:	683a      	ldr	r2, [r7, #0]
 8001950:	6892      	ldr	r2, [r2, #8]
 8001952:	4619      	mov	r1, r3
 8001954:	f7ff f876 	bl	8000a44 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	4b44      	ldr	r3, [pc, #272]	; (8001a70 <HAL_ADC_ConfigChannel+0x7bc>)
 800195e:	4013      	ands	r3, r2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d07a      	beq.n	8001a5a <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001964:	4843      	ldr	r0, [pc, #268]	; (8001a74 <HAL_ADC_ConfigChannel+0x7c0>)
 8001966:	f7fe ffcb 	bl	8000900 <LL_ADC_GetCommonPathInternalCh>
 800196a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a41      	ldr	r2, [pc, #260]	; (8001a78 <HAL_ADC_ConfigChannel+0x7c4>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d12c      	bne.n	80019d2 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001978:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800197c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d126      	bne.n	80019d2 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a3c      	ldr	r2, [pc, #240]	; (8001a7c <HAL_ADC_ConfigChannel+0x7c8>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d004      	beq.n	8001998 <HAL_ADC_ConfigChannel+0x6e4>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a3b      	ldr	r2, [pc, #236]	; (8001a80 <HAL_ADC_ConfigChannel+0x7cc>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d15d      	bne.n	8001a54 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001998:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800199c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80019a0:	4619      	mov	r1, r3
 80019a2:	4834      	ldr	r0, [pc, #208]	; (8001a74 <HAL_ADC_ConfigChannel+0x7c0>)
 80019a4:	f7fe ff99 	bl	80008da <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80019a8:	4b36      	ldr	r3, [pc, #216]	; (8001a84 <HAL_ADC_ConfigChannel+0x7d0>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	099b      	lsrs	r3, r3, #6
 80019ae:	4a36      	ldr	r2, [pc, #216]	; (8001a88 <HAL_ADC_ConfigChannel+0x7d4>)
 80019b0:	fba2 2303 	umull	r2, r3, r2, r3
 80019b4:	099b      	lsrs	r3, r3, #6
 80019b6:	1c5a      	adds	r2, r3, #1
 80019b8:	4613      	mov	r3, r2
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	4413      	add	r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80019c2:	e002      	b.n	80019ca <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	3b01      	subs	r3, #1
 80019c8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d1f9      	bne.n	80019c4 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80019d0:	e040      	b.n	8001a54 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a2d      	ldr	r2, [pc, #180]	; (8001a8c <HAL_ADC_ConfigChannel+0x7d8>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d118      	bne.n	8001a0e <HAL_ADC_ConfigChannel+0x75a>
 80019dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80019e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d112      	bne.n	8001a0e <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a23      	ldr	r2, [pc, #140]	; (8001a7c <HAL_ADC_ConfigChannel+0x7c8>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d004      	beq.n	80019fc <HAL_ADC_ConfigChannel+0x748>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a22      	ldr	r2, [pc, #136]	; (8001a80 <HAL_ADC_ConfigChannel+0x7cc>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d12d      	bne.n	8001a58 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80019fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001a00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a04:	4619      	mov	r1, r3
 8001a06:	481b      	ldr	r0, [pc, #108]	; (8001a74 <HAL_ADC_ConfigChannel+0x7c0>)
 8001a08:	f7fe ff67 	bl	80008da <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001a0c:	e024      	b.n	8001a58 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a1f      	ldr	r2, [pc, #124]	; (8001a90 <HAL_ADC_ConfigChannel+0x7dc>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d120      	bne.n	8001a5a <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001a18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001a1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d11a      	bne.n	8001a5a <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a14      	ldr	r2, [pc, #80]	; (8001a7c <HAL_ADC_ConfigChannel+0x7c8>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d115      	bne.n	8001a5a <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a2e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001a32:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a36:	4619      	mov	r1, r3
 8001a38:	480e      	ldr	r0, [pc, #56]	; (8001a74 <HAL_ADC_ConfigChannel+0x7c0>)
 8001a3a:	f7fe ff4e 	bl	80008da <LL_ADC_SetCommonPathInternalCh>
 8001a3e:	e00c      	b.n	8001a5a <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a44:	f043 0220 	orr.w	r2, r3, #32
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001a52:	e002      	b.n	8001a5a <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001a54:	bf00      	nop
 8001a56:	e000      	b.n	8001a5a <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001a58:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001a62:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	37d8      	adds	r7, #216	; 0xd8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	80080000 	.word	0x80080000
 8001a74:	50040300 	.word	0x50040300
 8001a78:	c7520000 	.word	0xc7520000
 8001a7c:	50040000 	.word	0x50040000
 8001a80:	50040200 	.word	0x50040200
 8001a84:	20000000 	.word	0x20000000
 8001a88:	053e2d63 	.word	0x053e2d63
 8001a8c:	cb840000 	.word	0xcb840000
 8001a90:	80000001 	.word	0x80000001

08001a94 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff f8af 	bl	8000c08 <LL_ADC_IsEnabled>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d169      	bne.n	8001b84 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	689a      	ldr	r2, [r3, #8]
 8001ab6:	4b36      	ldr	r3, [pc, #216]	; (8001b90 <ADC_Enable+0xfc>)
 8001ab8:	4013      	ands	r3, r2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d00d      	beq.n	8001ada <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ac2:	f043 0210 	orr.w	r2, r3, #16
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ace:	f043 0201 	orr.w	r2, r3, #1
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e055      	b.n	8001b86 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7ff f86a 	bl	8000bb8 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001ae4:	482b      	ldr	r0, [pc, #172]	; (8001b94 <ADC_Enable+0x100>)
 8001ae6:	f7fe ff0b 	bl	8000900 <LL_ADC_GetCommonPathInternalCh>
 8001aea:	4603      	mov	r3, r0
 8001aec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d013      	beq.n	8001b1c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001af4:	4b28      	ldr	r3, [pc, #160]	; (8001b98 <ADC_Enable+0x104>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	099b      	lsrs	r3, r3, #6
 8001afa:	4a28      	ldr	r2, [pc, #160]	; (8001b9c <ADC_Enable+0x108>)
 8001afc:	fba2 2303 	umull	r2, r3, r2, r3
 8001b00:	099b      	lsrs	r3, r3, #6
 8001b02:	1c5a      	adds	r2, r3, #1
 8001b04:	4613      	mov	r3, r2
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	4413      	add	r3, r2
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8001b0e:	e002      	b.n	8001b16 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	3b01      	subs	r3, #1
 8001b14:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d1f9      	bne.n	8001b10 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001b1c:	f7fe fe9a 	bl	8000854 <HAL_GetTick>
 8001b20:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001b22:	e028      	b.n	8001b76 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff f86d 	bl	8000c08 <LL_ADC_IsEnabled>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d104      	bne.n	8001b3e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff f83d 	bl	8000bb8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001b3e:	f7fe fe89 	bl	8000854 <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d914      	bls.n	8001b76 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d00d      	beq.n	8001b76 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b5e:	f043 0210 	orr.w	r2, r3, #16
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b6a:	f043 0201 	orr.w	r2, r3, #1
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e007      	b.n	8001b86 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0301 	and.w	r3, r3, #1
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d1cf      	bne.n	8001b24 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	8000003f 	.word	0x8000003f
 8001b94:	50040300 	.word	0x50040300
 8001b98:	20000000 	.word	0x20000000
 8001b9c:	053e2d63 	.word	0x053e2d63

08001ba0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff f83e 	bl	8000c2e <LL_ADC_IsDisableOngoing>
 8001bb2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff f825 	bl	8000c08 <LL_ADC_IsEnabled>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d047      	beq.n	8001c54 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d144      	bne.n	8001c54 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f003 030d 	and.w	r3, r3, #13
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d10c      	bne.n	8001bf2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7fe ffff 	bl	8000be0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2203      	movs	r2, #3
 8001be8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001bea:	f7fe fe33 	bl	8000854 <HAL_GetTick>
 8001bee:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001bf0:	e029      	b.n	8001c46 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bf6:	f043 0210 	orr.w	r2, r3, #16
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c02:	f043 0201 	orr.w	r2, r3, #1
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e023      	b.n	8001c56 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001c0e:	f7fe fe21 	bl	8000854 <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d914      	bls.n	8001c46 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d00d      	beq.n	8001c46 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c2e:	f043 0210 	orr.w	r2, r3, #16
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c3a:	f043 0201 	orr.w	r2, r3, #1
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e007      	b.n	8001c56 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f003 0301 	and.w	r3, r3, #1
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d1dc      	bne.n	8001c0e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3710      	adds	r7, #16
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <LL_ADC_IsEnabled>:
{
 8001c5e:	b480      	push	{r7}
 8001c60:	b083      	sub	sp, #12
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d101      	bne.n	8001c76 <LL_ADC_IsEnabled+0x18>
 8001c72:	2301      	movs	r3, #1
 8001c74:	e000      	b.n	8001c78 <LL_ADC_IsEnabled+0x1a>
 8001c76:	2300      	movs	r3, #0
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <LL_ADC_StartCalibration>:
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001c96:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c9a:	683a      	ldr	r2, [r7, #0]
 8001c9c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	609a      	str	r2, [r3, #8]
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <LL_ADC_IsCalibrationOnGoing>:
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b083      	sub	sp, #12
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001cc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001cca:	d101      	bne.n	8001cd0 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e000      	b.n	8001cd2 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr

08001cde <LL_ADC_REG_IsConversionOngoing>:
{
 8001cde:	b480      	push	{r7}
 8001ce0:	b083      	sub	sp, #12
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f003 0304 	and.w	r3, r3, #4
 8001cee:	2b04      	cmp	r3, #4
 8001cf0:	d101      	bne.n	8001cf6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e000      	b.n	8001cf8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001cf6:	2300      	movs	r3, #0
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d101      	bne.n	8001d20 <HAL_ADCEx_Calibration_Start+0x1c>
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	e04d      	b.n	8001dbc <HAL_ADCEx_Calibration_Start+0xb8>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f7ff ff39 	bl	8001ba0 <ADC_Disable>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001d32:	7bfb      	ldrb	r3, [r7, #15]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d136      	bne.n	8001da6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d3c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d40:	f023 0302 	bic.w	r3, r3, #2
 8001d44:	f043 0202 	orr.w	r2, r3, #2
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6839      	ldr	r1, [r7, #0]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff ff96 	bl	8001c84 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8001d58:	e014      	b.n	8001d84 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8001d66:	d30d      	bcc.n	8001d84 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d6c:	f023 0312 	bic.w	r3, r3, #18
 8001d70:	f043 0210 	orr.w	r2, r3, #16
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e01b      	b.n	8001dbc <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff ff94 	bl	8001cb6 <LL_ADC_IsCalibrationOnGoing>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d1e2      	bne.n	8001d5a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d98:	f023 0303 	bic.w	r3, r3, #3
 8001d9c:	f043 0201 	orr.w	r2, r3, #1
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	655a      	str	r2, [r3, #84]	; 0x54
 8001da4:	e005      	b.n	8001db2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001daa:	f043 0210 	orr.w	r2, r3, #16
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3710      	adds	r7, #16
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001dc4:	b590      	push	{r4, r7, lr}
 8001dc6:	b09f      	sub	sp, #124	; 0x7c
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d101      	bne.n	8001de2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001dde:	2302      	movs	r3, #2
 8001de0:	e093      	b.n	8001f0a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2201      	movs	r2, #1
 8001de6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8001dea:	2300      	movs	r3, #0
 8001dec:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8001dee:	2300      	movs	r3, #0
 8001df0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a47      	ldr	r2, [pc, #284]	; (8001f14 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d102      	bne.n	8001e02 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001dfc:	4b46      	ldr	r3, [pc, #280]	; (8001f18 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001dfe:	60bb      	str	r3, [r7, #8]
 8001e00:	e001      	b.n	8001e06 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001e02:	2300      	movs	r3, #0
 8001e04:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d10b      	bne.n	8001e24 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e10:	f043 0220 	orr.w	r2, r3, #32
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e072      	b.n	8001f0a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7ff ff59 	bl	8001cde <LL_ADC_REG_IsConversionOngoing>
 8001e2c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff ff53 	bl	8001cde <LL_ADC_REG_IsConversionOngoing>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d154      	bne.n	8001ee8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001e3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d151      	bne.n	8001ee8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001e44:	4b35      	ldr	r3, [pc, #212]	; (8001f1c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8001e46:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d02c      	beq.n	8001eaa <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001e50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	6859      	ldr	r1, [r3, #4]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e62:	035b      	lsls	r3, r3, #13
 8001e64:	430b      	orrs	r3, r1
 8001e66:	431a      	orrs	r2, r3
 8001e68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e6a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e6c:	4829      	ldr	r0, [pc, #164]	; (8001f14 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001e6e:	f7ff fef6 	bl	8001c5e <LL_ADC_IsEnabled>
 8001e72:	4604      	mov	r4, r0
 8001e74:	4828      	ldr	r0, [pc, #160]	; (8001f18 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001e76:	f7ff fef2 	bl	8001c5e <LL_ADC_IsEnabled>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	431c      	orrs	r4, r3
 8001e7e:	4828      	ldr	r0, [pc, #160]	; (8001f20 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001e80:	f7ff feed 	bl	8001c5e <LL_ADC_IsEnabled>
 8001e84:	4603      	mov	r3, r0
 8001e86:	4323      	orrs	r3, r4
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d137      	bne.n	8001efc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001e8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001e94:	f023 030f 	bic.w	r3, r3, #15
 8001e98:	683a      	ldr	r2, [r7, #0]
 8001e9a:	6811      	ldr	r1, [r2, #0]
 8001e9c:	683a      	ldr	r2, [r7, #0]
 8001e9e:	6892      	ldr	r2, [r2, #8]
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	431a      	orrs	r2, r3
 8001ea4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ea6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ea8:	e028      	b.n	8001efc <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001eaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001eb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001eb4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001eb6:	4817      	ldr	r0, [pc, #92]	; (8001f14 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001eb8:	f7ff fed1 	bl	8001c5e <LL_ADC_IsEnabled>
 8001ebc:	4604      	mov	r4, r0
 8001ebe:	4816      	ldr	r0, [pc, #88]	; (8001f18 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001ec0:	f7ff fecd 	bl	8001c5e <LL_ADC_IsEnabled>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	431c      	orrs	r4, r3
 8001ec8:	4815      	ldr	r0, [pc, #84]	; (8001f20 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001eca:	f7ff fec8 	bl	8001c5e <LL_ADC_IsEnabled>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	4323      	orrs	r3, r4
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d112      	bne.n	8001efc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001ed6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001ede:	f023 030f 	bic.w	r3, r3, #15
 8001ee2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001ee4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ee6:	e009      	b.n	8001efc <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eec:	f043 0220 	orr.w	r2, r3, #32
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001efa:	e000      	b.n	8001efe <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001efc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001f06:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	377c      	adds	r7, #124	; 0x7c
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd90      	pop	{r4, r7, pc}
 8001f12:	bf00      	nop
 8001f14:	50040000 	.word	0x50040000
 8001f18:	50040100 	.word	0x50040100
 8001f1c:	50040300 	.word	0x50040300
 8001f20:	50040200 	.word	0x50040200

08001f24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f34:	4b0c      	ldr	r3, [pc, #48]	; (8001f68 <__NVIC_SetPriorityGrouping+0x44>)
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f3a:	68ba      	ldr	r2, [r7, #8]
 8001f3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f40:	4013      	ands	r3, r2
 8001f42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f56:	4a04      	ldr	r2, [pc, #16]	; (8001f68 <__NVIC_SetPriorityGrouping+0x44>)
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	60d3      	str	r3, [r2, #12]
}
 8001f5c:	bf00      	nop
 8001f5e:	3714      	adds	r7, #20
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	e000ed00 	.word	0xe000ed00

08001f6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f70:	4b04      	ldr	r3, [pc, #16]	; (8001f84 <__NVIC_GetPriorityGrouping+0x18>)
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	0a1b      	lsrs	r3, r3, #8
 8001f76:	f003 0307 	and.w	r3, r3, #7
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr
 8001f84:	e000ed00 	.word	0xe000ed00

08001f88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	4603      	mov	r3, r0
 8001f90:	6039      	str	r1, [r7, #0]
 8001f92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	db0a      	blt.n	8001fb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	b2da      	uxtb	r2, r3
 8001fa0:	490c      	ldr	r1, [pc, #48]	; (8001fd4 <__NVIC_SetPriority+0x4c>)
 8001fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa6:	0112      	lsls	r2, r2, #4
 8001fa8:	b2d2      	uxtb	r2, r2
 8001faa:	440b      	add	r3, r1
 8001fac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fb0:	e00a      	b.n	8001fc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	b2da      	uxtb	r2, r3
 8001fb6:	4908      	ldr	r1, [pc, #32]	; (8001fd8 <__NVIC_SetPriority+0x50>)
 8001fb8:	79fb      	ldrb	r3, [r7, #7]
 8001fba:	f003 030f 	and.w	r3, r3, #15
 8001fbe:	3b04      	subs	r3, #4
 8001fc0:	0112      	lsls	r2, r2, #4
 8001fc2:	b2d2      	uxtb	r2, r2
 8001fc4:	440b      	add	r3, r1
 8001fc6:	761a      	strb	r2, [r3, #24]
}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr
 8001fd4:	e000e100 	.word	0xe000e100
 8001fd8:	e000ed00 	.word	0xe000ed00

08001fdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b089      	sub	sp, #36	; 0x24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f003 0307 	and.w	r3, r3, #7
 8001fee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	f1c3 0307 	rsb	r3, r3, #7
 8001ff6:	2b04      	cmp	r3, #4
 8001ff8:	bf28      	it	cs
 8001ffa:	2304      	movcs	r3, #4
 8001ffc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	3304      	adds	r3, #4
 8002002:	2b06      	cmp	r3, #6
 8002004:	d902      	bls.n	800200c <NVIC_EncodePriority+0x30>
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	3b03      	subs	r3, #3
 800200a:	e000      	b.n	800200e <NVIC_EncodePriority+0x32>
 800200c:	2300      	movs	r3, #0
 800200e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002010:	f04f 32ff 	mov.w	r2, #4294967295
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	43da      	mvns	r2, r3
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	401a      	ands	r2, r3
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002024:	f04f 31ff 	mov.w	r1, #4294967295
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	fa01 f303 	lsl.w	r3, r1, r3
 800202e:	43d9      	mvns	r1, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002034:	4313      	orrs	r3, r2
         );
}
 8002036:	4618      	mov	r0, r3
 8002038:	3724      	adds	r7, #36	; 0x24
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
	...

08002044 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	3b01      	subs	r3, #1
 8002050:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002054:	d301      	bcc.n	800205a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002056:	2301      	movs	r3, #1
 8002058:	e00f      	b.n	800207a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800205a:	4a0a      	ldr	r2, [pc, #40]	; (8002084 <SysTick_Config+0x40>)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	3b01      	subs	r3, #1
 8002060:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002062:	210f      	movs	r1, #15
 8002064:	f04f 30ff 	mov.w	r0, #4294967295
 8002068:	f7ff ff8e 	bl	8001f88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800206c:	4b05      	ldr	r3, [pc, #20]	; (8002084 <SysTick_Config+0x40>)
 800206e:	2200      	movs	r2, #0
 8002070:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002072:	4b04      	ldr	r3, [pc, #16]	; (8002084 <SysTick_Config+0x40>)
 8002074:	2207      	movs	r2, #7
 8002076:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	e000e010 	.word	0xe000e010

08002088 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f7ff ff47 	bl	8001f24 <__NVIC_SetPriorityGrouping>
}
 8002096:	bf00      	nop
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b086      	sub	sp, #24
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	4603      	mov	r3, r0
 80020a6:	60b9      	str	r1, [r7, #8]
 80020a8:	607a      	str	r2, [r7, #4]
 80020aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80020ac:	2300      	movs	r3, #0
 80020ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020b0:	f7ff ff5c 	bl	8001f6c <__NVIC_GetPriorityGrouping>
 80020b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	68b9      	ldr	r1, [r7, #8]
 80020ba:	6978      	ldr	r0, [r7, #20]
 80020bc:	f7ff ff8e 	bl	8001fdc <NVIC_EncodePriority>
 80020c0:	4602      	mov	r2, r0
 80020c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020c6:	4611      	mov	r1, r2
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff ff5d 	bl	8001f88 <__NVIC_SetPriority>
}
 80020ce:	bf00      	nop
 80020d0:	3718      	adds	r7, #24
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b082      	sub	sp, #8
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f7ff ffb0 	bl	8002044 <SysTick_Config>
 80020e4:	4603      	mov	r3, r0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
	...

080020f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b087      	sub	sp, #28
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020fa:	2300      	movs	r3, #0
 80020fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020fe:	e17f      	b.n	8002400 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	2101      	movs	r1, #1
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	fa01 f303 	lsl.w	r3, r1, r3
 800210c:	4013      	ands	r3, r2
 800210e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2b00      	cmp	r3, #0
 8002114:	f000 8171 	beq.w	80023fa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f003 0303 	and.w	r3, r3, #3
 8002120:	2b01      	cmp	r3, #1
 8002122:	d005      	beq.n	8002130 <HAL_GPIO_Init+0x40>
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f003 0303 	and.w	r3, r3, #3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d130      	bne.n	8002192 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	2203      	movs	r2, #3
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	43db      	mvns	r3, r3
 8002142:	693a      	ldr	r2, [r7, #16]
 8002144:	4013      	ands	r3, r2
 8002146:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	68da      	ldr	r2, [r3, #12]
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	693a      	ldr	r2, [r7, #16]
 8002156:	4313      	orrs	r3, r2
 8002158:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	693a      	ldr	r2, [r7, #16]
 800215e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002166:	2201      	movs	r2, #1
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	fa02 f303 	lsl.w	r3, r2, r3
 800216e:	43db      	mvns	r3, r3
 8002170:	693a      	ldr	r2, [r7, #16]
 8002172:	4013      	ands	r3, r2
 8002174:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	091b      	lsrs	r3, r3, #4
 800217c:	f003 0201 	and.w	r2, r3, #1
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	4313      	orrs	r3, r2
 800218a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f003 0303 	and.w	r3, r3, #3
 800219a:	2b03      	cmp	r3, #3
 800219c:	d118      	bne.n	80021d0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80021a4:	2201      	movs	r2, #1
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	43db      	mvns	r3, r3
 80021ae:	693a      	ldr	r2, [r7, #16]
 80021b0:	4013      	ands	r3, r2
 80021b2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	08db      	lsrs	r3, r3, #3
 80021ba:	f003 0201 	and.w	r2, r3, #1
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	693a      	ldr	r2, [r7, #16]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	693a      	ldr	r2, [r7, #16]
 80021ce:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f003 0303 	and.w	r3, r3, #3
 80021d8:	2b03      	cmp	r3, #3
 80021da:	d017      	beq.n	800220c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	2203      	movs	r2, #3
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	43db      	mvns	r3, r3
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	4013      	ands	r3, r2
 80021f2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	689a      	ldr	r2, [r3, #8]
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	4313      	orrs	r3, r2
 8002204:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f003 0303 	and.w	r3, r3, #3
 8002214:	2b02      	cmp	r3, #2
 8002216:	d123      	bne.n	8002260 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	08da      	lsrs	r2, r3, #3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	3208      	adds	r2, #8
 8002220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002224:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	f003 0307 	and.w	r3, r3, #7
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	220f      	movs	r2, #15
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	43db      	mvns	r3, r3
 8002236:	693a      	ldr	r2, [r7, #16]
 8002238:	4013      	ands	r3, r2
 800223a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	691a      	ldr	r2, [r3, #16]
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	f003 0307 	and.w	r3, r3, #7
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	4313      	orrs	r3, r2
 8002250:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	08da      	lsrs	r2, r3, #3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	3208      	adds	r2, #8
 800225a:	6939      	ldr	r1, [r7, #16]
 800225c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	2203      	movs	r2, #3
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	43db      	mvns	r3, r3
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	4013      	ands	r3, r2
 8002276:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f003 0203 	and.w	r2, r3, #3
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	4313      	orrs	r3, r2
 800228c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800229c:	2b00      	cmp	r3, #0
 800229e:	f000 80ac 	beq.w	80023fa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022a2:	4b5f      	ldr	r3, [pc, #380]	; (8002420 <HAL_GPIO_Init+0x330>)
 80022a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022a6:	4a5e      	ldr	r2, [pc, #376]	; (8002420 <HAL_GPIO_Init+0x330>)
 80022a8:	f043 0301 	orr.w	r3, r3, #1
 80022ac:	6613      	str	r3, [r2, #96]	; 0x60
 80022ae:	4b5c      	ldr	r3, [pc, #368]	; (8002420 <HAL_GPIO_Init+0x330>)
 80022b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	60bb      	str	r3, [r7, #8]
 80022b8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80022ba:	4a5a      	ldr	r2, [pc, #360]	; (8002424 <HAL_GPIO_Init+0x334>)
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	089b      	lsrs	r3, r3, #2
 80022c0:	3302      	adds	r3, #2
 80022c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	f003 0303 	and.w	r3, r3, #3
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	220f      	movs	r2, #15
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	43db      	mvns	r3, r3
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	4013      	ands	r3, r2
 80022dc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80022e4:	d025      	beq.n	8002332 <HAL_GPIO_Init+0x242>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a4f      	ldr	r2, [pc, #316]	; (8002428 <HAL_GPIO_Init+0x338>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d01f      	beq.n	800232e <HAL_GPIO_Init+0x23e>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a4e      	ldr	r2, [pc, #312]	; (800242c <HAL_GPIO_Init+0x33c>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d019      	beq.n	800232a <HAL_GPIO_Init+0x23a>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a4d      	ldr	r2, [pc, #308]	; (8002430 <HAL_GPIO_Init+0x340>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d013      	beq.n	8002326 <HAL_GPIO_Init+0x236>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a4c      	ldr	r2, [pc, #304]	; (8002434 <HAL_GPIO_Init+0x344>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d00d      	beq.n	8002322 <HAL_GPIO_Init+0x232>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a4b      	ldr	r2, [pc, #300]	; (8002438 <HAL_GPIO_Init+0x348>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d007      	beq.n	800231e <HAL_GPIO_Init+0x22e>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a4a      	ldr	r2, [pc, #296]	; (800243c <HAL_GPIO_Init+0x34c>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d101      	bne.n	800231a <HAL_GPIO_Init+0x22a>
 8002316:	2306      	movs	r3, #6
 8002318:	e00c      	b.n	8002334 <HAL_GPIO_Init+0x244>
 800231a:	2307      	movs	r3, #7
 800231c:	e00a      	b.n	8002334 <HAL_GPIO_Init+0x244>
 800231e:	2305      	movs	r3, #5
 8002320:	e008      	b.n	8002334 <HAL_GPIO_Init+0x244>
 8002322:	2304      	movs	r3, #4
 8002324:	e006      	b.n	8002334 <HAL_GPIO_Init+0x244>
 8002326:	2303      	movs	r3, #3
 8002328:	e004      	b.n	8002334 <HAL_GPIO_Init+0x244>
 800232a:	2302      	movs	r3, #2
 800232c:	e002      	b.n	8002334 <HAL_GPIO_Init+0x244>
 800232e:	2301      	movs	r3, #1
 8002330:	e000      	b.n	8002334 <HAL_GPIO_Init+0x244>
 8002332:	2300      	movs	r3, #0
 8002334:	697a      	ldr	r2, [r7, #20]
 8002336:	f002 0203 	and.w	r2, r2, #3
 800233a:	0092      	lsls	r2, r2, #2
 800233c:	4093      	lsls	r3, r2
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	4313      	orrs	r3, r2
 8002342:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002344:	4937      	ldr	r1, [pc, #220]	; (8002424 <HAL_GPIO_Init+0x334>)
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	089b      	lsrs	r3, r3, #2
 800234a:	3302      	adds	r3, #2
 800234c:	693a      	ldr	r2, [r7, #16]
 800234e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002352:	4b3b      	ldr	r3, [pc, #236]	; (8002440 <HAL_GPIO_Init+0x350>)
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	43db      	mvns	r3, r3
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	4013      	ands	r3, r2
 8002360:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d003      	beq.n	8002376 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	4313      	orrs	r3, r2
 8002374:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002376:	4a32      	ldr	r2, [pc, #200]	; (8002440 <HAL_GPIO_Init+0x350>)
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800237c:	4b30      	ldr	r3, [pc, #192]	; (8002440 <HAL_GPIO_Init+0x350>)
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	43db      	mvns	r3, r3
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	4013      	ands	r3, r2
 800238a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d003      	beq.n	80023a0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002398:	693a      	ldr	r2, [r7, #16]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	4313      	orrs	r3, r2
 800239e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80023a0:	4a27      	ldr	r2, [pc, #156]	; (8002440 <HAL_GPIO_Init+0x350>)
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80023a6:	4b26      	ldr	r3, [pc, #152]	; (8002440 <HAL_GPIO_Init+0x350>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	43db      	mvns	r3, r3
 80023b0:	693a      	ldr	r2, [r7, #16]
 80023b2:	4013      	ands	r3, r2
 80023b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d003      	beq.n	80023ca <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80023ca:	4a1d      	ldr	r2, [pc, #116]	; (8002440 <HAL_GPIO_Init+0x350>)
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80023d0:	4b1b      	ldr	r3, [pc, #108]	; (8002440 <HAL_GPIO_Init+0x350>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	43db      	mvns	r3, r3
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	4013      	ands	r3, r2
 80023de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d003      	beq.n	80023f4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80023f4:	4a12      	ldr	r2, [pc, #72]	; (8002440 <HAL_GPIO_Init+0x350>)
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	3301      	adds	r3, #1
 80023fe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	fa22 f303 	lsr.w	r3, r2, r3
 800240a:	2b00      	cmp	r3, #0
 800240c:	f47f ae78 	bne.w	8002100 <HAL_GPIO_Init+0x10>
  }
}
 8002410:	bf00      	nop
 8002412:	bf00      	nop
 8002414:	371c      	adds	r7, #28
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	40021000 	.word	0x40021000
 8002424:	40010000 	.word	0x40010000
 8002428:	48000400 	.word	0x48000400
 800242c:	48000800 	.word	0x48000800
 8002430:	48000c00 	.word	0x48000c00
 8002434:	48001000 	.word	0x48001000
 8002438:	48001400 	.word	0x48001400
 800243c:	48001800 	.word	0x48001800
 8002440:	40010400 	.word	0x40010400

08002444 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002448:	4b04      	ldr	r3, [pc, #16]	; (800245c <HAL_PWREx_GetVoltageRange+0x18>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002450:	4618      	mov	r0, r3
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	40007000 	.word	0x40007000

08002460 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002460:	b480      	push	{r7}
 8002462:	b085      	sub	sp, #20
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800246e:	d130      	bne.n	80024d2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002470:	4b23      	ldr	r3, [pc, #140]	; (8002500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002478:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800247c:	d038      	beq.n	80024f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800247e:	4b20      	ldr	r3, [pc, #128]	; (8002500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002486:	4a1e      	ldr	r2, [pc, #120]	; (8002500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002488:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800248c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800248e:	4b1d      	ldr	r3, [pc, #116]	; (8002504 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2232      	movs	r2, #50	; 0x32
 8002494:	fb02 f303 	mul.w	r3, r2, r3
 8002498:	4a1b      	ldr	r2, [pc, #108]	; (8002508 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800249a:	fba2 2303 	umull	r2, r3, r2, r3
 800249e:	0c9b      	lsrs	r3, r3, #18
 80024a0:	3301      	adds	r3, #1
 80024a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024a4:	e002      	b.n	80024ac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	3b01      	subs	r3, #1
 80024aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024ac:	4b14      	ldr	r3, [pc, #80]	; (8002500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024ae:	695b      	ldr	r3, [r3, #20]
 80024b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024b8:	d102      	bne.n	80024c0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d1f2      	bne.n	80024a6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80024c0:	4b0f      	ldr	r3, [pc, #60]	; (8002500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024c2:	695b      	ldr	r3, [r3, #20]
 80024c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024cc:	d110      	bne.n	80024f0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e00f      	b.n	80024f2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80024d2:	4b0b      	ldr	r3, [pc, #44]	; (8002500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80024da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024de:	d007      	beq.n	80024f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80024e0:	4b07      	ldr	r3, [pc, #28]	; (8002500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80024e8:	4a05      	ldr	r2, [pc, #20]	; (8002500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024ee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3714      	adds	r7, #20
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	40007000 	.word	0x40007000
 8002504:	20000000 	.word	0x20000000
 8002508:	431bde83 	.word	0x431bde83

0800250c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b088      	sub	sp, #32
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e3ca      	b.n	8002cb4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800251e:	4b97      	ldr	r3, [pc, #604]	; (800277c <HAL_RCC_OscConfig+0x270>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f003 030c 	and.w	r3, r3, #12
 8002526:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002528:	4b94      	ldr	r3, [pc, #592]	; (800277c <HAL_RCC_OscConfig+0x270>)
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	f003 0303 	and.w	r3, r3, #3
 8002530:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0310 	and.w	r3, r3, #16
 800253a:	2b00      	cmp	r3, #0
 800253c:	f000 80e4 	beq.w	8002708 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d007      	beq.n	8002556 <HAL_RCC_OscConfig+0x4a>
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	2b0c      	cmp	r3, #12
 800254a:	f040 808b 	bne.w	8002664 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	2b01      	cmp	r3, #1
 8002552:	f040 8087 	bne.w	8002664 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002556:	4b89      	ldr	r3, [pc, #548]	; (800277c <HAL_RCC_OscConfig+0x270>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d005      	beq.n	800256e <HAL_RCC_OscConfig+0x62>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e3a2      	b.n	8002cb4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a1a      	ldr	r2, [r3, #32]
 8002572:	4b82      	ldr	r3, [pc, #520]	; (800277c <HAL_RCC_OscConfig+0x270>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0308 	and.w	r3, r3, #8
 800257a:	2b00      	cmp	r3, #0
 800257c:	d004      	beq.n	8002588 <HAL_RCC_OscConfig+0x7c>
 800257e:	4b7f      	ldr	r3, [pc, #508]	; (800277c <HAL_RCC_OscConfig+0x270>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002586:	e005      	b.n	8002594 <HAL_RCC_OscConfig+0x88>
 8002588:	4b7c      	ldr	r3, [pc, #496]	; (800277c <HAL_RCC_OscConfig+0x270>)
 800258a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800258e:	091b      	lsrs	r3, r3, #4
 8002590:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002594:	4293      	cmp	r3, r2
 8002596:	d223      	bcs.n	80025e0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a1b      	ldr	r3, [r3, #32]
 800259c:	4618      	mov	r0, r3
 800259e:	f000 fd1d 	bl	8002fdc <RCC_SetFlashLatencyFromMSIRange>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e383      	b.n	8002cb4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025ac:	4b73      	ldr	r3, [pc, #460]	; (800277c <HAL_RCC_OscConfig+0x270>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a72      	ldr	r2, [pc, #456]	; (800277c <HAL_RCC_OscConfig+0x270>)
 80025b2:	f043 0308 	orr.w	r3, r3, #8
 80025b6:	6013      	str	r3, [r2, #0]
 80025b8:	4b70      	ldr	r3, [pc, #448]	; (800277c <HAL_RCC_OscConfig+0x270>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a1b      	ldr	r3, [r3, #32]
 80025c4:	496d      	ldr	r1, [pc, #436]	; (800277c <HAL_RCC_OscConfig+0x270>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025ca:	4b6c      	ldr	r3, [pc, #432]	; (800277c <HAL_RCC_OscConfig+0x270>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	69db      	ldr	r3, [r3, #28]
 80025d6:	021b      	lsls	r3, r3, #8
 80025d8:	4968      	ldr	r1, [pc, #416]	; (800277c <HAL_RCC_OscConfig+0x270>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	604b      	str	r3, [r1, #4]
 80025de:	e025      	b.n	800262c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025e0:	4b66      	ldr	r3, [pc, #408]	; (800277c <HAL_RCC_OscConfig+0x270>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a65      	ldr	r2, [pc, #404]	; (800277c <HAL_RCC_OscConfig+0x270>)
 80025e6:	f043 0308 	orr.w	r3, r3, #8
 80025ea:	6013      	str	r3, [r2, #0]
 80025ec:	4b63      	ldr	r3, [pc, #396]	; (800277c <HAL_RCC_OscConfig+0x270>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a1b      	ldr	r3, [r3, #32]
 80025f8:	4960      	ldr	r1, [pc, #384]	; (800277c <HAL_RCC_OscConfig+0x270>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025fe:	4b5f      	ldr	r3, [pc, #380]	; (800277c <HAL_RCC_OscConfig+0x270>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	69db      	ldr	r3, [r3, #28]
 800260a:	021b      	lsls	r3, r3, #8
 800260c:	495b      	ldr	r1, [pc, #364]	; (800277c <HAL_RCC_OscConfig+0x270>)
 800260e:	4313      	orrs	r3, r2
 8002610:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d109      	bne.n	800262c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a1b      	ldr	r3, [r3, #32]
 800261c:	4618      	mov	r0, r3
 800261e:	f000 fcdd 	bl	8002fdc <RCC_SetFlashLatencyFromMSIRange>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e343      	b.n	8002cb4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800262c:	f000 fc4a 	bl	8002ec4 <HAL_RCC_GetSysClockFreq>
 8002630:	4602      	mov	r2, r0
 8002632:	4b52      	ldr	r3, [pc, #328]	; (800277c <HAL_RCC_OscConfig+0x270>)
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	091b      	lsrs	r3, r3, #4
 8002638:	f003 030f 	and.w	r3, r3, #15
 800263c:	4950      	ldr	r1, [pc, #320]	; (8002780 <HAL_RCC_OscConfig+0x274>)
 800263e:	5ccb      	ldrb	r3, [r1, r3]
 8002640:	f003 031f 	and.w	r3, r3, #31
 8002644:	fa22 f303 	lsr.w	r3, r2, r3
 8002648:	4a4e      	ldr	r2, [pc, #312]	; (8002784 <HAL_RCC_OscConfig+0x278>)
 800264a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800264c:	4b4e      	ldr	r3, [pc, #312]	; (8002788 <HAL_RCC_OscConfig+0x27c>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4618      	mov	r0, r3
 8002652:	f7fe f8af 	bl	80007b4 <HAL_InitTick>
 8002656:	4603      	mov	r3, r0
 8002658:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800265a:	7bfb      	ldrb	r3, [r7, #15]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d052      	beq.n	8002706 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002660:	7bfb      	ldrb	r3, [r7, #15]
 8002662:	e327      	b.n	8002cb4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d032      	beq.n	80026d2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800266c:	4b43      	ldr	r3, [pc, #268]	; (800277c <HAL_RCC_OscConfig+0x270>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a42      	ldr	r2, [pc, #264]	; (800277c <HAL_RCC_OscConfig+0x270>)
 8002672:	f043 0301 	orr.w	r3, r3, #1
 8002676:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002678:	f7fe f8ec 	bl	8000854 <HAL_GetTick>
 800267c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800267e:	e008      	b.n	8002692 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002680:	f7fe f8e8 	bl	8000854 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b02      	cmp	r3, #2
 800268c:	d901      	bls.n	8002692 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e310      	b.n	8002cb4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002692:	4b3a      	ldr	r3, [pc, #232]	; (800277c <HAL_RCC_OscConfig+0x270>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d0f0      	beq.n	8002680 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800269e:	4b37      	ldr	r3, [pc, #220]	; (800277c <HAL_RCC_OscConfig+0x270>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a36      	ldr	r2, [pc, #216]	; (800277c <HAL_RCC_OscConfig+0x270>)
 80026a4:	f043 0308 	orr.w	r3, r3, #8
 80026a8:	6013      	str	r3, [r2, #0]
 80026aa:	4b34      	ldr	r3, [pc, #208]	; (800277c <HAL_RCC_OscConfig+0x270>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a1b      	ldr	r3, [r3, #32]
 80026b6:	4931      	ldr	r1, [pc, #196]	; (800277c <HAL_RCC_OscConfig+0x270>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026bc:	4b2f      	ldr	r3, [pc, #188]	; (800277c <HAL_RCC_OscConfig+0x270>)
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	69db      	ldr	r3, [r3, #28]
 80026c8:	021b      	lsls	r3, r3, #8
 80026ca:	492c      	ldr	r1, [pc, #176]	; (800277c <HAL_RCC_OscConfig+0x270>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	604b      	str	r3, [r1, #4]
 80026d0:	e01a      	b.n	8002708 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80026d2:	4b2a      	ldr	r3, [pc, #168]	; (800277c <HAL_RCC_OscConfig+0x270>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a29      	ldr	r2, [pc, #164]	; (800277c <HAL_RCC_OscConfig+0x270>)
 80026d8:	f023 0301 	bic.w	r3, r3, #1
 80026dc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026de:	f7fe f8b9 	bl	8000854 <HAL_GetTick>
 80026e2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026e4:	e008      	b.n	80026f8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026e6:	f7fe f8b5 	bl	8000854 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d901      	bls.n	80026f8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e2dd      	b.n	8002cb4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026f8:	4b20      	ldr	r3, [pc, #128]	; (800277c <HAL_RCC_OscConfig+0x270>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d1f0      	bne.n	80026e6 <HAL_RCC_OscConfig+0x1da>
 8002704:	e000      	b.n	8002708 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002706:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0301 	and.w	r3, r3, #1
 8002710:	2b00      	cmp	r3, #0
 8002712:	d074      	beq.n	80027fe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	2b08      	cmp	r3, #8
 8002718:	d005      	beq.n	8002726 <HAL_RCC_OscConfig+0x21a>
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	2b0c      	cmp	r3, #12
 800271e:	d10e      	bne.n	800273e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	2b03      	cmp	r3, #3
 8002724:	d10b      	bne.n	800273e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002726:	4b15      	ldr	r3, [pc, #84]	; (800277c <HAL_RCC_OscConfig+0x270>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d064      	beq.n	80027fc <HAL_RCC_OscConfig+0x2f0>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d160      	bne.n	80027fc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e2ba      	b.n	8002cb4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002746:	d106      	bne.n	8002756 <HAL_RCC_OscConfig+0x24a>
 8002748:	4b0c      	ldr	r3, [pc, #48]	; (800277c <HAL_RCC_OscConfig+0x270>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a0b      	ldr	r2, [pc, #44]	; (800277c <HAL_RCC_OscConfig+0x270>)
 800274e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002752:	6013      	str	r3, [r2, #0]
 8002754:	e026      	b.n	80027a4 <HAL_RCC_OscConfig+0x298>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800275e:	d115      	bne.n	800278c <HAL_RCC_OscConfig+0x280>
 8002760:	4b06      	ldr	r3, [pc, #24]	; (800277c <HAL_RCC_OscConfig+0x270>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a05      	ldr	r2, [pc, #20]	; (800277c <HAL_RCC_OscConfig+0x270>)
 8002766:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800276a:	6013      	str	r3, [r2, #0]
 800276c:	4b03      	ldr	r3, [pc, #12]	; (800277c <HAL_RCC_OscConfig+0x270>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a02      	ldr	r2, [pc, #8]	; (800277c <HAL_RCC_OscConfig+0x270>)
 8002772:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002776:	6013      	str	r3, [r2, #0]
 8002778:	e014      	b.n	80027a4 <HAL_RCC_OscConfig+0x298>
 800277a:	bf00      	nop
 800277c:	40021000 	.word	0x40021000
 8002780:	08004b2c 	.word	0x08004b2c
 8002784:	20000000 	.word	0x20000000
 8002788:	20000004 	.word	0x20000004
 800278c:	4ba0      	ldr	r3, [pc, #640]	; (8002a10 <HAL_RCC_OscConfig+0x504>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a9f      	ldr	r2, [pc, #636]	; (8002a10 <HAL_RCC_OscConfig+0x504>)
 8002792:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002796:	6013      	str	r3, [r2, #0]
 8002798:	4b9d      	ldr	r3, [pc, #628]	; (8002a10 <HAL_RCC_OscConfig+0x504>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a9c      	ldr	r2, [pc, #624]	; (8002a10 <HAL_RCC_OscConfig+0x504>)
 800279e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d013      	beq.n	80027d4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ac:	f7fe f852 	bl	8000854 <HAL_GetTick>
 80027b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027b2:	e008      	b.n	80027c6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027b4:	f7fe f84e 	bl	8000854 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b64      	cmp	r3, #100	; 0x64
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e276      	b.n	8002cb4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027c6:	4b92      	ldr	r3, [pc, #584]	; (8002a10 <HAL_RCC_OscConfig+0x504>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d0f0      	beq.n	80027b4 <HAL_RCC_OscConfig+0x2a8>
 80027d2:	e014      	b.n	80027fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d4:	f7fe f83e 	bl	8000854 <HAL_GetTick>
 80027d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027da:	e008      	b.n	80027ee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027dc:	f7fe f83a 	bl	8000854 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b64      	cmp	r3, #100	; 0x64
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e262      	b.n	8002cb4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027ee:	4b88      	ldr	r3, [pc, #544]	; (8002a10 <HAL_RCC_OscConfig+0x504>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d1f0      	bne.n	80027dc <HAL_RCC_OscConfig+0x2d0>
 80027fa:	e000      	b.n	80027fe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d060      	beq.n	80028cc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	2b04      	cmp	r3, #4
 800280e:	d005      	beq.n	800281c <HAL_RCC_OscConfig+0x310>
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	2b0c      	cmp	r3, #12
 8002814:	d119      	bne.n	800284a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	2b02      	cmp	r3, #2
 800281a:	d116      	bne.n	800284a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800281c:	4b7c      	ldr	r3, [pc, #496]	; (8002a10 <HAL_RCC_OscConfig+0x504>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002824:	2b00      	cmp	r3, #0
 8002826:	d005      	beq.n	8002834 <HAL_RCC_OscConfig+0x328>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d101      	bne.n	8002834 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e23f      	b.n	8002cb4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002834:	4b76      	ldr	r3, [pc, #472]	; (8002a10 <HAL_RCC_OscConfig+0x504>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	061b      	lsls	r3, r3, #24
 8002842:	4973      	ldr	r1, [pc, #460]	; (8002a10 <HAL_RCC_OscConfig+0x504>)
 8002844:	4313      	orrs	r3, r2
 8002846:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002848:	e040      	b.n	80028cc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d023      	beq.n	800289a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002852:	4b6f      	ldr	r3, [pc, #444]	; (8002a10 <HAL_RCC_OscConfig+0x504>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a6e      	ldr	r2, [pc, #440]	; (8002a10 <HAL_RCC_OscConfig+0x504>)
 8002858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800285c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800285e:	f7fd fff9 	bl	8000854 <HAL_GetTick>
 8002862:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002864:	e008      	b.n	8002878 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002866:	f7fd fff5 	bl	8000854 <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	2b02      	cmp	r3, #2
 8002872:	d901      	bls.n	8002878 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e21d      	b.n	8002cb4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002878:	4b65      	ldr	r3, [pc, #404]	; (8002a10 <HAL_RCC_OscConfig+0x504>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002880:	2b00      	cmp	r3, #0
 8002882:	d0f0      	beq.n	8002866 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002884:	4b62      	ldr	r3, [pc, #392]	; (8002a10 <HAL_RCC_OscConfig+0x504>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	691b      	ldr	r3, [r3, #16]
 8002890:	061b      	lsls	r3, r3, #24
 8002892:	495f      	ldr	r1, [pc, #380]	; (8002a10 <HAL_RCC_OscConfig+0x504>)
 8002894:	4313      	orrs	r3, r2
 8002896:	604b      	str	r3, [r1, #4]
 8002898:	e018      	b.n	80028cc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800289a:	4b5d      	ldr	r3, [pc, #372]	; (8002a10 <HAL_RCC_OscConfig+0x504>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a5c      	ldr	r2, [pc, #368]	; (8002a10 <HAL_RCC_OscConfig+0x504>)
 80028a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a6:	f7fd ffd5 	bl	8000854 <HAL_GetTick>
 80028aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028ac:	e008      	b.n	80028c0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028ae:	f7fd ffd1 	bl	8000854 <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d901      	bls.n	80028c0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e1f9      	b.n	8002cb4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028c0:	4b53      	ldr	r3, [pc, #332]	; (8002a10 <HAL_RCC_OscConfig+0x504>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d1f0      	bne.n	80028ae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0308 	and.w	r3, r3, #8
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d03c      	beq.n	8002952 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	695b      	ldr	r3, [r3, #20]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d01c      	beq.n	800291a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028e0:	4b4b      	ldr	r3, [pc, #300]	; (8002a10 <HAL_RCC_OscConfig+0x504>)
 80028e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028e6:	4a4a      	ldr	r2, [pc, #296]	; (8002a10 <HAL_RCC_OscConfig+0x504>)
 80028e8:	f043 0301 	orr.w	r3, r3, #1
 80028ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f0:	f7fd ffb0 	bl	8000854 <HAL_GetTick>
 80028f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028f6:	e008      	b.n	800290a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028f8:	f7fd ffac 	bl	8000854 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e1d4      	b.n	8002cb4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800290a:	4b41      	ldr	r3, [pc, #260]	; (8002a10 <HAL_RCC_OscConfig+0x504>)
 800290c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002910:	f003 0302 	and.w	r3, r3, #2
 8002914:	2b00      	cmp	r3, #0
 8002916:	d0ef      	beq.n	80028f8 <HAL_RCC_OscConfig+0x3ec>
 8002918:	e01b      	b.n	8002952 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800291a:	4b3d      	ldr	r3, [pc, #244]	; (8002a10 <HAL_RCC_OscConfig+0x504>)
 800291c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002920:	4a3b      	ldr	r2, [pc, #236]	; (8002a10 <HAL_RCC_OscConfig+0x504>)
 8002922:	f023 0301 	bic.w	r3, r3, #1
 8002926:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800292a:	f7fd ff93 	bl	8000854 <HAL_GetTick>
 800292e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002930:	e008      	b.n	8002944 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002932:	f7fd ff8f 	bl	8000854 <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	2b02      	cmp	r3, #2
 800293e:	d901      	bls.n	8002944 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e1b7      	b.n	8002cb4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002944:	4b32      	ldr	r3, [pc, #200]	; (8002a10 <HAL_RCC_OscConfig+0x504>)
 8002946:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1ef      	bne.n	8002932 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0304 	and.w	r3, r3, #4
 800295a:	2b00      	cmp	r3, #0
 800295c:	f000 80a6 	beq.w	8002aac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002960:	2300      	movs	r3, #0
 8002962:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002964:	4b2a      	ldr	r3, [pc, #168]	; (8002a10 <HAL_RCC_OscConfig+0x504>)
 8002966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002968:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d10d      	bne.n	800298c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002970:	4b27      	ldr	r3, [pc, #156]	; (8002a10 <HAL_RCC_OscConfig+0x504>)
 8002972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002974:	4a26      	ldr	r2, [pc, #152]	; (8002a10 <HAL_RCC_OscConfig+0x504>)
 8002976:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800297a:	6593      	str	r3, [r2, #88]	; 0x58
 800297c:	4b24      	ldr	r3, [pc, #144]	; (8002a10 <HAL_RCC_OscConfig+0x504>)
 800297e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002984:	60bb      	str	r3, [r7, #8]
 8002986:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002988:	2301      	movs	r3, #1
 800298a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800298c:	4b21      	ldr	r3, [pc, #132]	; (8002a14 <HAL_RCC_OscConfig+0x508>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002994:	2b00      	cmp	r3, #0
 8002996:	d118      	bne.n	80029ca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002998:	4b1e      	ldr	r3, [pc, #120]	; (8002a14 <HAL_RCC_OscConfig+0x508>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a1d      	ldr	r2, [pc, #116]	; (8002a14 <HAL_RCC_OscConfig+0x508>)
 800299e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029a4:	f7fd ff56 	bl	8000854 <HAL_GetTick>
 80029a8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029aa:	e008      	b.n	80029be <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029ac:	f7fd ff52 	bl	8000854 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e17a      	b.n	8002cb4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029be:	4b15      	ldr	r3, [pc, #84]	; (8002a14 <HAL_RCC_OscConfig+0x508>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d0f0      	beq.n	80029ac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d108      	bne.n	80029e4 <HAL_RCC_OscConfig+0x4d8>
 80029d2:	4b0f      	ldr	r3, [pc, #60]	; (8002a10 <HAL_RCC_OscConfig+0x504>)
 80029d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029d8:	4a0d      	ldr	r2, [pc, #52]	; (8002a10 <HAL_RCC_OscConfig+0x504>)
 80029da:	f043 0301 	orr.w	r3, r3, #1
 80029de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029e2:	e029      	b.n	8002a38 <HAL_RCC_OscConfig+0x52c>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	2b05      	cmp	r3, #5
 80029ea:	d115      	bne.n	8002a18 <HAL_RCC_OscConfig+0x50c>
 80029ec:	4b08      	ldr	r3, [pc, #32]	; (8002a10 <HAL_RCC_OscConfig+0x504>)
 80029ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029f2:	4a07      	ldr	r2, [pc, #28]	; (8002a10 <HAL_RCC_OscConfig+0x504>)
 80029f4:	f043 0304 	orr.w	r3, r3, #4
 80029f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029fc:	4b04      	ldr	r3, [pc, #16]	; (8002a10 <HAL_RCC_OscConfig+0x504>)
 80029fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a02:	4a03      	ldr	r2, [pc, #12]	; (8002a10 <HAL_RCC_OscConfig+0x504>)
 8002a04:	f043 0301 	orr.w	r3, r3, #1
 8002a08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a0c:	e014      	b.n	8002a38 <HAL_RCC_OscConfig+0x52c>
 8002a0e:	bf00      	nop
 8002a10:	40021000 	.word	0x40021000
 8002a14:	40007000 	.word	0x40007000
 8002a18:	4b9c      	ldr	r3, [pc, #624]	; (8002c8c <HAL_RCC_OscConfig+0x780>)
 8002a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a1e:	4a9b      	ldr	r2, [pc, #620]	; (8002c8c <HAL_RCC_OscConfig+0x780>)
 8002a20:	f023 0301 	bic.w	r3, r3, #1
 8002a24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a28:	4b98      	ldr	r3, [pc, #608]	; (8002c8c <HAL_RCC_OscConfig+0x780>)
 8002a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a2e:	4a97      	ldr	r2, [pc, #604]	; (8002c8c <HAL_RCC_OscConfig+0x780>)
 8002a30:	f023 0304 	bic.w	r3, r3, #4
 8002a34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d016      	beq.n	8002a6e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a40:	f7fd ff08 	bl	8000854 <HAL_GetTick>
 8002a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a46:	e00a      	b.n	8002a5e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a48:	f7fd ff04 	bl	8000854 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e12a      	b.n	8002cb4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a5e:	4b8b      	ldr	r3, [pc, #556]	; (8002c8c <HAL_RCC_OscConfig+0x780>)
 8002a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a64:	f003 0302 	and.w	r3, r3, #2
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d0ed      	beq.n	8002a48 <HAL_RCC_OscConfig+0x53c>
 8002a6c:	e015      	b.n	8002a9a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a6e:	f7fd fef1 	bl	8000854 <HAL_GetTick>
 8002a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a74:	e00a      	b.n	8002a8c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a76:	f7fd feed 	bl	8000854 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d901      	bls.n	8002a8c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e113      	b.n	8002cb4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a8c:	4b7f      	ldr	r3, [pc, #508]	; (8002c8c <HAL_RCC_OscConfig+0x780>)
 8002a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d1ed      	bne.n	8002a76 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a9a:	7ffb      	ldrb	r3, [r7, #31]
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d105      	bne.n	8002aac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aa0:	4b7a      	ldr	r3, [pc, #488]	; (8002c8c <HAL_RCC_OscConfig+0x780>)
 8002aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa4:	4a79      	ldr	r2, [pc, #484]	; (8002c8c <HAL_RCC_OscConfig+0x780>)
 8002aa6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002aaa:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	f000 80fe 	beq.w	8002cb2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	f040 80d0 	bne.w	8002c60 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002ac0:	4b72      	ldr	r3, [pc, #456]	; (8002c8c <HAL_RCC_OscConfig+0x780>)
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	f003 0203 	and.w	r2, r3, #3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d130      	bne.n	8002b36 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d127      	bne.n	8002b36 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002af0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d11f      	bne.n	8002b36 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b00:	2a07      	cmp	r2, #7
 8002b02:	bf14      	ite	ne
 8002b04:	2201      	movne	r2, #1
 8002b06:	2200      	moveq	r2, #0
 8002b08:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d113      	bne.n	8002b36 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b18:	085b      	lsrs	r3, r3, #1
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d109      	bne.n	8002b36 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2c:	085b      	lsrs	r3, r3, #1
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d06e      	beq.n	8002c14 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	2b0c      	cmp	r3, #12
 8002b3a:	d069      	beq.n	8002c10 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002b3c:	4b53      	ldr	r3, [pc, #332]	; (8002c8c <HAL_RCC_OscConfig+0x780>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d105      	bne.n	8002b54 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002b48:	4b50      	ldr	r3, [pc, #320]	; (8002c8c <HAL_RCC_OscConfig+0x780>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d001      	beq.n	8002b58 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e0ad      	b.n	8002cb4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002b58:	4b4c      	ldr	r3, [pc, #304]	; (8002c8c <HAL_RCC_OscConfig+0x780>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a4b      	ldr	r2, [pc, #300]	; (8002c8c <HAL_RCC_OscConfig+0x780>)
 8002b5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b62:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b64:	f7fd fe76 	bl	8000854 <HAL_GetTick>
 8002b68:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b6a:	e008      	b.n	8002b7e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b6c:	f7fd fe72 	bl	8000854 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e09a      	b.n	8002cb4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b7e:	4b43      	ldr	r3, [pc, #268]	; (8002c8c <HAL_RCC_OscConfig+0x780>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d1f0      	bne.n	8002b6c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b8a:	4b40      	ldr	r3, [pc, #256]	; (8002c8c <HAL_RCC_OscConfig+0x780>)
 8002b8c:	68da      	ldr	r2, [r3, #12]
 8002b8e:	4b40      	ldr	r3, [pc, #256]	; (8002c90 <HAL_RCC_OscConfig+0x784>)
 8002b90:	4013      	ands	r3, r2
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002b9a:	3a01      	subs	r2, #1
 8002b9c:	0112      	lsls	r2, r2, #4
 8002b9e:	4311      	orrs	r1, r2
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ba4:	0212      	lsls	r2, r2, #8
 8002ba6:	4311      	orrs	r1, r2
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002bac:	0852      	lsrs	r2, r2, #1
 8002bae:	3a01      	subs	r2, #1
 8002bb0:	0552      	lsls	r2, r2, #21
 8002bb2:	4311      	orrs	r1, r2
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002bb8:	0852      	lsrs	r2, r2, #1
 8002bba:	3a01      	subs	r2, #1
 8002bbc:	0652      	lsls	r2, r2, #25
 8002bbe:	4311      	orrs	r1, r2
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002bc4:	0912      	lsrs	r2, r2, #4
 8002bc6:	0452      	lsls	r2, r2, #17
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	4930      	ldr	r1, [pc, #192]	; (8002c8c <HAL_RCC_OscConfig+0x780>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002bd0:	4b2e      	ldr	r3, [pc, #184]	; (8002c8c <HAL_RCC_OscConfig+0x780>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a2d      	ldr	r2, [pc, #180]	; (8002c8c <HAL_RCC_OscConfig+0x780>)
 8002bd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bda:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002bdc:	4b2b      	ldr	r3, [pc, #172]	; (8002c8c <HAL_RCC_OscConfig+0x780>)
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	4a2a      	ldr	r2, [pc, #168]	; (8002c8c <HAL_RCC_OscConfig+0x780>)
 8002be2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002be6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002be8:	f7fd fe34 	bl	8000854 <HAL_GetTick>
 8002bec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bee:	e008      	b.n	8002c02 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bf0:	f7fd fe30 	bl	8000854 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e058      	b.n	8002cb4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c02:	4b22      	ldr	r3, [pc, #136]	; (8002c8c <HAL_RCC_OscConfig+0x780>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d0f0      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c0e:	e050      	b.n	8002cb2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e04f      	b.n	8002cb4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c14:	4b1d      	ldr	r3, [pc, #116]	; (8002c8c <HAL_RCC_OscConfig+0x780>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d148      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002c20:	4b1a      	ldr	r3, [pc, #104]	; (8002c8c <HAL_RCC_OscConfig+0x780>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a19      	ldr	r2, [pc, #100]	; (8002c8c <HAL_RCC_OscConfig+0x780>)
 8002c26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c2a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c2c:	4b17      	ldr	r3, [pc, #92]	; (8002c8c <HAL_RCC_OscConfig+0x780>)
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	4a16      	ldr	r2, [pc, #88]	; (8002c8c <HAL_RCC_OscConfig+0x780>)
 8002c32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c36:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c38:	f7fd fe0c 	bl	8000854 <HAL_GetTick>
 8002c3c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c3e:	e008      	b.n	8002c52 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c40:	f7fd fe08 	bl	8000854 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e030      	b.n	8002cb4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c52:	4b0e      	ldr	r3, [pc, #56]	; (8002c8c <HAL_RCC_OscConfig+0x780>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d0f0      	beq.n	8002c40 <HAL_RCC_OscConfig+0x734>
 8002c5e:	e028      	b.n	8002cb2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	2b0c      	cmp	r3, #12
 8002c64:	d023      	beq.n	8002cae <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c66:	4b09      	ldr	r3, [pc, #36]	; (8002c8c <HAL_RCC_OscConfig+0x780>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a08      	ldr	r2, [pc, #32]	; (8002c8c <HAL_RCC_OscConfig+0x780>)
 8002c6c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c72:	f7fd fdef 	bl	8000854 <HAL_GetTick>
 8002c76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c78:	e00c      	b.n	8002c94 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c7a:	f7fd fdeb 	bl	8000854 <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d905      	bls.n	8002c94 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e013      	b.n	8002cb4 <HAL_RCC_OscConfig+0x7a8>
 8002c8c:	40021000 	.word	0x40021000
 8002c90:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c94:	4b09      	ldr	r3, [pc, #36]	; (8002cbc <HAL_RCC_OscConfig+0x7b0>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d1ec      	bne.n	8002c7a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002ca0:	4b06      	ldr	r3, [pc, #24]	; (8002cbc <HAL_RCC_OscConfig+0x7b0>)
 8002ca2:	68da      	ldr	r2, [r3, #12]
 8002ca4:	4905      	ldr	r1, [pc, #20]	; (8002cbc <HAL_RCC_OscConfig+0x7b0>)
 8002ca6:	4b06      	ldr	r3, [pc, #24]	; (8002cc0 <HAL_RCC_OscConfig+0x7b4>)
 8002ca8:	4013      	ands	r3, r2
 8002caa:	60cb      	str	r3, [r1, #12]
 8002cac:	e001      	b.n	8002cb2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e000      	b.n	8002cb4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3720      	adds	r7, #32
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	feeefffc 	.word	0xfeeefffc

08002cc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d101      	bne.n	8002cd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e0e7      	b.n	8002ea8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cd8:	4b75      	ldr	r3, [pc, #468]	; (8002eb0 <HAL_RCC_ClockConfig+0x1ec>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0307 	and.w	r3, r3, #7
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d910      	bls.n	8002d08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ce6:	4b72      	ldr	r3, [pc, #456]	; (8002eb0 <HAL_RCC_ClockConfig+0x1ec>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f023 0207 	bic.w	r2, r3, #7
 8002cee:	4970      	ldr	r1, [pc, #448]	; (8002eb0 <HAL_RCC_ClockConfig+0x1ec>)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cf6:	4b6e      	ldr	r3, [pc, #440]	; (8002eb0 <HAL_RCC_ClockConfig+0x1ec>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0307 	and.w	r3, r3, #7
 8002cfe:	683a      	ldr	r2, [r7, #0]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d001      	beq.n	8002d08 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e0cf      	b.n	8002ea8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d010      	beq.n	8002d36 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689a      	ldr	r2, [r3, #8]
 8002d18:	4b66      	ldr	r3, [pc, #408]	; (8002eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d908      	bls.n	8002d36 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d24:	4b63      	ldr	r3, [pc, #396]	; (8002eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	4960      	ldr	r1, [pc, #384]	; (8002eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d04c      	beq.n	8002ddc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	2b03      	cmp	r3, #3
 8002d48:	d107      	bne.n	8002d5a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d4a:	4b5a      	ldr	r3, [pc, #360]	; (8002eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d121      	bne.n	8002d9a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e0a6      	b.n	8002ea8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d107      	bne.n	8002d72 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d62:	4b54      	ldr	r3, [pc, #336]	; (8002eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d115      	bne.n	8002d9a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e09a      	b.n	8002ea8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d107      	bne.n	8002d8a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d7a:	4b4e      	ldr	r3, [pc, #312]	; (8002eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d109      	bne.n	8002d9a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e08e      	b.n	8002ea8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d8a:	4b4a      	ldr	r3, [pc, #296]	; (8002eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e086      	b.n	8002ea8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d9a:	4b46      	ldr	r3, [pc, #280]	; (8002eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f023 0203 	bic.w	r2, r3, #3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	4943      	ldr	r1, [pc, #268]	; (8002eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dac:	f7fd fd52 	bl	8000854 <HAL_GetTick>
 8002db0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002db2:	e00a      	b.n	8002dca <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002db4:	f7fd fd4e 	bl	8000854 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e06e      	b.n	8002ea8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dca:	4b3a      	ldr	r3, [pc, #232]	; (8002eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f003 020c 	and.w	r2, r3, #12
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d1eb      	bne.n	8002db4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0302 	and.w	r3, r3, #2
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d010      	beq.n	8002e0a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689a      	ldr	r2, [r3, #8]
 8002dec:	4b31      	ldr	r3, [pc, #196]	; (8002eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d208      	bcs.n	8002e0a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002df8:	4b2e      	ldr	r3, [pc, #184]	; (8002eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	492b      	ldr	r1, [pc, #172]	; (8002eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e0a:	4b29      	ldr	r3, [pc, #164]	; (8002eb0 <HAL_RCC_ClockConfig+0x1ec>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0307 	and.w	r3, r3, #7
 8002e12:	683a      	ldr	r2, [r7, #0]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d210      	bcs.n	8002e3a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e18:	4b25      	ldr	r3, [pc, #148]	; (8002eb0 <HAL_RCC_ClockConfig+0x1ec>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f023 0207 	bic.w	r2, r3, #7
 8002e20:	4923      	ldr	r1, [pc, #140]	; (8002eb0 <HAL_RCC_ClockConfig+0x1ec>)
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e28:	4b21      	ldr	r3, [pc, #132]	; (8002eb0 <HAL_RCC_ClockConfig+0x1ec>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0307 	and.w	r3, r3, #7
 8002e30:	683a      	ldr	r2, [r7, #0]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d001      	beq.n	8002e3a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e036      	b.n	8002ea8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0304 	and.w	r3, r3, #4
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d008      	beq.n	8002e58 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e46:	4b1b      	ldr	r3, [pc, #108]	; (8002eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	4918      	ldr	r1, [pc, #96]	; (8002eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0308 	and.w	r3, r3, #8
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d009      	beq.n	8002e78 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e64:	4b13      	ldr	r3, [pc, #76]	; (8002eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	00db      	lsls	r3, r3, #3
 8002e72:	4910      	ldr	r1, [pc, #64]	; (8002eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e78:	f000 f824 	bl	8002ec4 <HAL_RCC_GetSysClockFreq>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	4b0d      	ldr	r3, [pc, #52]	; (8002eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	091b      	lsrs	r3, r3, #4
 8002e84:	f003 030f 	and.w	r3, r3, #15
 8002e88:	490b      	ldr	r1, [pc, #44]	; (8002eb8 <HAL_RCC_ClockConfig+0x1f4>)
 8002e8a:	5ccb      	ldrb	r3, [r1, r3]
 8002e8c:	f003 031f 	and.w	r3, r3, #31
 8002e90:	fa22 f303 	lsr.w	r3, r2, r3
 8002e94:	4a09      	ldr	r2, [pc, #36]	; (8002ebc <HAL_RCC_ClockConfig+0x1f8>)
 8002e96:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e98:	4b09      	ldr	r3, [pc, #36]	; (8002ec0 <HAL_RCC_ClockConfig+0x1fc>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7fd fc89 	bl	80007b4 <HAL_InitTick>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	72fb      	strb	r3, [r7, #11]

  return status;
 8002ea6:	7afb      	ldrb	r3, [r7, #11]
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3710      	adds	r7, #16
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	40022000 	.word	0x40022000
 8002eb4:	40021000 	.word	0x40021000
 8002eb8:	08004b2c 	.word	0x08004b2c
 8002ebc:	20000000 	.word	0x20000000
 8002ec0:	20000004 	.word	0x20000004

08002ec4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b089      	sub	sp, #36	; 0x24
 8002ec8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	61fb      	str	r3, [r7, #28]
 8002ece:	2300      	movs	r3, #0
 8002ed0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ed2:	4b3e      	ldr	r3, [pc, #248]	; (8002fcc <HAL_RCC_GetSysClockFreq+0x108>)
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f003 030c 	and.w	r3, r3, #12
 8002eda:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002edc:	4b3b      	ldr	r3, [pc, #236]	; (8002fcc <HAL_RCC_GetSysClockFreq+0x108>)
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	f003 0303 	and.w	r3, r3, #3
 8002ee4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d005      	beq.n	8002ef8 <HAL_RCC_GetSysClockFreq+0x34>
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	2b0c      	cmp	r3, #12
 8002ef0:	d121      	bne.n	8002f36 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d11e      	bne.n	8002f36 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ef8:	4b34      	ldr	r3, [pc, #208]	; (8002fcc <HAL_RCC_GetSysClockFreq+0x108>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0308 	and.w	r3, r3, #8
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d107      	bne.n	8002f14 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002f04:	4b31      	ldr	r3, [pc, #196]	; (8002fcc <HAL_RCC_GetSysClockFreq+0x108>)
 8002f06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f0a:	0a1b      	lsrs	r3, r3, #8
 8002f0c:	f003 030f 	and.w	r3, r3, #15
 8002f10:	61fb      	str	r3, [r7, #28]
 8002f12:	e005      	b.n	8002f20 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002f14:	4b2d      	ldr	r3, [pc, #180]	; (8002fcc <HAL_RCC_GetSysClockFreq+0x108>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	091b      	lsrs	r3, r3, #4
 8002f1a:	f003 030f 	and.w	r3, r3, #15
 8002f1e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002f20:	4a2b      	ldr	r2, [pc, #172]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f28:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d10d      	bne.n	8002f4c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f34:	e00a      	b.n	8002f4c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	2b04      	cmp	r3, #4
 8002f3a:	d102      	bne.n	8002f42 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f3c:	4b25      	ldr	r3, [pc, #148]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f3e:	61bb      	str	r3, [r7, #24]
 8002f40:	e004      	b.n	8002f4c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	2b08      	cmp	r3, #8
 8002f46:	d101      	bne.n	8002f4c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f48:	4b23      	ldr	r3, [pc, #140]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f4a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	2b0c      	cmp	r3, #12
 8002f50:	d134      	bne.n	8002fbc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f52:	4b1e      	ldr	r3, [pc, #120]	; (8002fcc <HAL_RCC_GetSysClockFreq+0x108>)
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	f003 0303 	and.w	r3, r3, #3
 8002f5a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d003      	beq.n	8002f6a <HAL_RCC_GetSysClockFreq+0xa6>
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	2b03      	cmp	r3, #3
 8002f66:	d003      	beq.n	8002f70 <HAL_RCC_GetSysClockFreq+0xac>
 8002f68:	e005      	b.n	8002f76 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002f6a:	4b1a      	ldr	r3, [pc, #104]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f6c:	617b      	str	r3, [r7, #20]
      break;
 8002f6e:	e005      	b.n	8002f7c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002f70:	4b19      	ldr	r3, [pc, #100]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f72:	617b      	str	r3, [r7, #20]
      break;
 8002f74:	e002      	b.n	8002f7c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	617b      	str	r3, [r7, #20]
      break;
 8002f7a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f7c:	4b13      	ldr	r3, [pc, #76]	; (8002fcc <HAL_RCC_GetSysClockFreq+0x108>)
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	091b      	lsrs	r3, r3, #4
 8002f82:	f003 0307 	and.w	r3, r3, #7
 8002f86:	3301      	adds	r3, #1
 8002f88:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f8a:	4b10      	ldr	r3, [pc, #64]	; (8002fcc <HAL_RCC_GetSysClockFreq+0x108>)
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	0a1b      	lsrs	r3, r3, #8
 8002f90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f94:	697a      	ldr	r2, [r7, #20]
 8002f96:	fb03 f202 	mul.w	r2, r3, r2
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002fa2:	4b0a      	ldr	r3, [pc, #40]	; (8002fcc <HAL_RCC_GetSysClockFreq+0x108>)
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	0e5b      	lsrs	r3, r3, #25
 8002fa8:	f003 0303 	and.w	r3, r3, #3
 8002fac:	3301      	adds	r3, #1
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002fb2:	697a      	ldr	r2, [r7, #20]
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fba:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002fbc:	69bb      	ldr	r3, [r7, #24]
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3724      	adds	r7, #36	; 0x24
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	40021000 	.word	0x40021000
 8002fd0:	08004b3c 	.word	0x08004b3c
 8002fd4:	00f42400 	.word	0x00f42400
 8002fd8:	007a1200 	.word	0x007a1200

08002fdc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b086      	sub	sp, #24
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002fe8:	4b2a      	ldr	r3, [pc, #168]	; (8003094 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d003      	beq.n	8002ffc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002ff4:	f7ff fa26 	bl	8002444 <HAL_PWREx_GetVoltageRange>
 8002ff8:	6178      	str	r0, [r7, #20]
 8002ffa:	e014      	b.n	8003026 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ffc:	4b25      	ldr	r3, [pc, #148]	; (8003094 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003000:	4a24      	ldr	r2, [pc, #144]	; (8003094 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003002:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003006:	6593      	str	r3, [r2, #88]	; 0x58
 8003008:	4b22      	ldr	r3, [pc, #136]	; (8003094 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800300a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800300c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003010:	60fb      	str	r3, [r7, #12]
 8003012:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003014:	f7ff fa16 	bl	8002444 <HAL_PWREx_GetVoltageRange>
 8003018:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800301a:	4b1e      	ldr	r3, [pc, #120]	; (8003094 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800301c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800301e:	4a1d      	ldr	r2, [pc, #116]	; (8003094 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003020:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003024:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800302c:	d10b      	bne.n	8003046 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2b80      	cmp	r3, #128	; 0x80
 8003032:	d919      	bls.n	8003068 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2ba0      	cmp	r3, #160	; 0xa0
 8003038:	d902      	bls.n	8003040 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800303a:	2302      	movs	r3, #2
 800303c:	613b      	str	r3, [r7, #16]
 800303e:	e013      	b.n	8003068 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003040:	2301      	movs	r3, #1
 8003042:	613b      	str	r3, [r7, #16]
 8003044:	e010      	b.n	8003068 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2b80      	cmp	r3, #128	; 0x80
 800304a:	d902      	bls.n	8003052 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800304c:	2303      	movs	r3, #3
 800304e:	613b      	str	r3, [r7, #16]
 8003050:	e00a      	b.n	8003068 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2b80      	cmp	r3, #128	; 0x80
 8003056:	d102      	bne.n	800305e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003058:	2302      	movs	r3, #2
 800305a:	613b      	str	r3, [r7, #16]
 800305c:	e004      	b.n	8003068 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2b70      	cmp	r3, #112	; 0x70
 8003062:	d101      	bne.n	8003068 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003064:	2301      	movs	r3, #1
 8003066:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003068:	4b0b      	ldr	r3, [pc, #44]	; (8003098 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f023 0207 	bic.w	r2, r3, #7
 8003070:	4909      	ldr	r1, [pc, #36]	; (8003098 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	4313      	orrs	r3, r2
 8003076:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003078:	4b07      	ldr	r3, [pc, #28]	; (8003098 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0307 	and.w	r3, r3, #7
 8003080:	693a      	ldr	r2, [r7, #16]
 8003082:	429a      	cmp	r2, r3
 8003084:	d001      	beq.n	800308a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e000      	b.n	800308c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3718      	adds	r7, #24
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	40021000 	.word	0x40021000
 8003098:	40022000 	.word	0x40022000

0800309c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b086      	sub	sp, #24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80030a4:	2300      	movs	r3, #0
 80030a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80030a8:	2300      	movs	r3, #0
 80030aa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d041      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030bc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80030c0:	d02a      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80030c2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80030c6:	d824      	bhi.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80030c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030cc:	d008      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80030ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030d2:	d81e      	bhi.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d00a      	beq.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x52>
 80030d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030dc:	d010      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80030de:	e018      	b.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80030e0:	4b86      	ldr	r3, [pc, #536]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	4a85      	ldr	r2, [pc, #532]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030ea:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030ec:	e015      	b.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	3304      	adds	r3, #4
 80030f2:	2100      	movs	r1, #0
 80030f4:	4618      	mov	r0, r3
 80030f6:	f000 fabb 	bl	8003670 <RCCEx_PLLSAI1_Config>
 80030fa:	4603      	mov	r3, r0
 80030fc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030fe:	e00c      	b.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	3320      	adds	r3, #32
 8003104:	2100      	movs	r1, #0
 8003106:	4618      	mov	r0, r3
 8003108:	f000 fba6 	bl	8003858 <RCCEx_PLLSAI2_Config>
 800310c:	4603      	mov	r3, r0
 800310e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003110:	e003      	b.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	74fb      	strb	r3, [r7, #19]
      break;
 8003116:	e000      	b.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003118:	bf00      	nop
    }

    if(ret == HAL_OK)
 800311a:	7cfb      	ldrb	r3, [r7, #19]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d10b      	bne.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003120:	4b76      	ldr	r3, [pc, #472]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003126:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800312e:	4973      	ldr	r1, [pc, #460]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003130:	4313      	orrs	r3, r2
 8003132:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003136:	e001      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003138:	7cfb      	ldrb	r3, [r7, #19]
 800313a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d041      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800314c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003150:	d02a      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003152:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003156:	d824      	bhi.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003158:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800315c:	d008      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800315e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003162:	d81e      	bhi.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003164:	2b00      	cmp	r3, #0
 8003166:	d00a      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003168:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800316c:	d010      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800316e:	e018      	b.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003170:	4b62      	ldr	r3, [pc, #392]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	4a61      	ldr	r2, [pc, #388]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003176:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800317a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800317c:	e015      	b.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	3304      	adds	r3, #4
 8003182:	2100      	movs	r1, #0
 8003184:	4618      	mov	r0, r3
 8003186:	f000 fa73 	bl	8003670 <RCCEx_PLLSAI1_Config>
 800318a:	4603      	mov	r3, r0
 800318c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800318e:	e00c      	b.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	3320      	adds	r3, #32
 8003194:	2100      	movs	r1, #0
 8003196:	4618      	mov	r0, r3
 8003198:	f000 fb5e 	bl	8003858 <RCCEx_PLLSAI2_Config>
 800319c:	4603      	mov	r3, r0
 800319e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031a0:	e003      	b.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	74fb      	strb	r3, [r7, #19]
      break;
 80031a6:	e000      	b.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80031a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031aa:	7cfb      	ldrb	r3, [r7, #19]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d10b      	bne.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80031b0:	4b52      	ldr	r3, [pc, #328]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031be:	494f      	ldr	r1, [pc, #316]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80031c6:	e001      	b.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031c8:	7cfb      	ldrb	r3, [r7, #19]
 80031ca:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f000 80a0 	beq.w	800331a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031da:	2300      	movs	r3, #0
 80031dc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80031de:	4b47      	ldr	r3, [pc, #284]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d101      	bne.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x152>
 80031ea:	2301      	movs	r3, #1
 80031ec:	e000      	b.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80031ee:	2300      	movs	r3, #0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d00d      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031f4:	4b41      	ldr	r3, [pc, #260]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f8:	4a40      	ldr	r2, [pc, #256]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031fe:	6593      	str	r3, [r2, #88]	; 0x58
 8003200:	4b3e      	ldr	r3, [pc, #248]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003204:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003208:	60bb      	str	r3, [r7, #8]
 800320a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800320c:	2301      	movs	r3, #1
 800320e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003210:	4b3b      	ldr	r3, [pc, #236]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a3a      	ldr	r2, [pc, #232]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003216:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800321a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800321c:	f7fd fb1a 	bl	8000854 <HAL_GetTick>
 8003220:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003222:	e009      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003224:	f7fd fb16 	bl	8000854 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b02      	cmp	r3, #2
 8003230:	d902      	bls.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	74fb      	strb	r3, [r7, #19]
        break;
 8003236:	e005      	b.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003238:	4b31      	ldr	r3, [pc, #196]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003240:	2b00      	cmp	r3, #0
 8003242:	d0ef      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003244:	7cfb      	ldrb	r3, [r7, #19]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d15c      	bne.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800324a:	4b2c      	ldr	r3, [pc, #176]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800324c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003250:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003254:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d01f      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003262:	697a      	ldr	r2, [r7, #20]
 8003264:	429a      	cmp	r2, r3
 8003266:	d019      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003268:	4b24      	ldr	r3, [pc, #144]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800326a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800326e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003272:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003274:	4b21      	ldr	r3, [pc, #132]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800327a:	4a20      	ldr	r2, [pc, #128]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800327c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003280:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003284:	4b1d      	ldr	r3, [pc, #116]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800328a:	4a1c      	ldr	r2, [pc, #112]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800328c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003290:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003294:	4a19      	ldr	r2, [pc, #100]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d016      	beq.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a6:	f7fd fad5 	bl	8000854 <HAL_GetTick>
 80032aa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032ac:	e00b      	b.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ae:	f7fd fad1 	bl	8000854 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032bc:	4293      	cmp	r3, r2
 80032be:	d902      	bls.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	74fb      	strb	r3, [r7, #19]
            break;
 80032c4:	e006      	b.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032c6:	4b0d      	ldr	r3, [pc, #52]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032cc:	f003 0302 	and.w	r3, r3, #2
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d0ec      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80032d4:	7cfb      	ldrb	r3, [r7, #19]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d10c      	bne.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032da:	4b08      	ldr	r3, [pc, #32]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032ea:	4904      	ldr	r1, [pc, #16]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80032f2:	e009      	b.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80032f4:	7cfb      	ldrb	r3, [r7, #19]
 80032f6:	74bb      	strb	r3, [r7, #18]
 80032f8:	e006      	b.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80032fa:	bf00      	nop
 80032fc:	40021000 	.word	0x40021000
 8003300:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003304:	7cfb      	ldrb	r3, [r7, #19]
 8003306:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003308:	7c7b      	ldrb	r3, [r7, #17]
 800330a:	2b01      	cmp	r3, #1
 800330c:	d105      	bne.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800330e:	4b9e      	ldr	r3, [pc, #632]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003312:	4a9d      	ldr	r2, [pc, #628]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003314:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003318:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00a      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003326:	4b98      	ldr	r3, [pc, #608]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800332c:	f023 0203 	bic.w	r2, r3, #3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003334:	4994      	ldr	r1, [pc, #592]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003336:	4313      	orrs	r3, r2
 8003338:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0302 	and.w	r3, r3, #2
 8003344:	2b00      	cmp	r3, #0
 8003346:	d00a      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003348:	4b8f      	ldr	r3, [pc, #572]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800334a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800334e:	f023 020c 	bic.w	r2, r3, #12
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003356:	498c      	ldr	r1, [pc, #560]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003358:	4313      	orrs	r3, r2
 800335a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0304 	and.w	r3, r3, #4
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00a      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800336a:	4b87      	ldr	r3, [pc, #540]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800336c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003370:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003378:	4983      	ldr	r1, [pc, #524]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800337a:	4313      	orrs	r3, r2
 800337c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0308 	and.w	r3, r3, #8
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00a      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800338c:	4b7e      	ldr	r3, [pc, #504]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800338e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003392:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800339a:	497b      	ldr	r1, [pc, #492]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800339c:	4313      	orrs	r3, r2
 800339e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0310 	and.w	r3, r3, #16
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00a      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80033ae:	4b76      	ldr	r3, [pc, #472]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033bc:	4972      	ldr	r1, [pc, #456]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0320 	and.w	r3, r3, #32
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d00a      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80033d0:	4b6d      	ldr	r3, [pc, #436]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033de:	496a      	ldr	r1, [pc, #424]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00a      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80033f2:	4b65      	ldr	r3, [pc, #404]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003400:	4961      	ldr	r1, [pc, #388]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003402:	4313      	orrs	r3, r2
 8003404:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003410:	2b00      	cmp	r3, #0
 8003412:	d00a      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003414:	4b5c      	ldr	r3, [pc, #368]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800341a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003422:	4959      	ldr	r1, [pc, #356]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003424:	4313      	orrs	r3, r2
 8003426:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00a      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003436:	4b54      	ldr	r3, [pc, #336]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800343c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003444:	4950      	ldr	r1, [pc, #320]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003446:	4313      	orrs	r3, r2
 8003448:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003454:	2b00      	cmp	r3, #0
 8003456:	d00a      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003458:	4b4b      	ldr	r3, [pc, #300]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800345a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800345e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003466:	4948      	ldr	r1, [pc, #288]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003468:	4313      	orrs	r3, r2
 800346a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00a      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800347a:	4b43      	ldr	r3, [pc, #268]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800347c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003480:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003488:	493f      	ldr	r1, [pc, #252]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800348a:	4313      	orrs	r3, r2
 800348c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d028      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800349c:	4b3a      	ldr	r3, [pc, #232]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800349e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034aa:	4937      	ldr	r1, [pc, #220]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034ba:	d106      	bne.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034bc:	4b32      	ldr	r3, [pc, #200]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	4a31      	ldr	r2, [pc, #196]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034c6:	60d3      	str	r3, [r2, #12]
 80034c8:	e011      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034d2:	d10c      	bne.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	3304      	adds	r3, #4
 80034d8:	2101      	movs	r1, #1
 80034da:	4618      	mov	r0, r3
 80034dc:	f000 f8c8 	bl	8003670 <RCCEx_PLLSAI1_Config>
 80034e0:	4603      	mov	r3, r0
 80034e2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80034e4:	7cfb      	ldrb	r3, [r7, #19]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d001      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80034ea:	7cfb      	ldrb	r3, [r7, #19]
 80034ec:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d028      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80034fa:	4b23      	ldr	r3, [pc, #140]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003500:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003508:	491f      	ldr	r1, [pc, #124]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800350a:	4313      	orrs	r3, r2
 800350c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003514:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003518:	d106      	bne.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800351a:	4b1b      	ldr	r3, [pc, #108]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	4a1a      	ldr	r2, [pc, #104]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003520:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003524:	60d3      	str	r3, [r2, #12]
 8003526:	e011      	b.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800352c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003530:	d10c      	bne.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	3304      	adds	r3, #4
 8003536:	2101      	movs	r1, #1
 8003538:	4618      	mov	r0, r3
 800353a:	f000 f899 	bl	8003670 <RCCEx_PLLSAI1_Config>
 800353e:	4603      	mov	r3, r0
 8003540:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003542:	7cfb      	ldrb	r3, [r7, #19]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d001      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003548:	7cfb      	ldrb	r3, [r7, #19]
 800354a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d02b      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003558:	4b0b      	ldr	r3, [pc, #44]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800355a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800355e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003566:	4908      	ldr	r1, [pc, #32]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003568:	4313      	orrs	r3, r2
 800356a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003572:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003576:	d109      	bne.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003578:	4b03      	ldr	r3, [pc, #12]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	4a02      	ldr	r2, [pc, #8]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800357e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003582:	60d3      	str	r3, [r2, #12]
 8003584:	e014      	b.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003586:	bf00      	nop
 8003588:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003590:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003594:	d10c      	bne.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	3304      	adds	r3, #4
 800359a:	2101      	movs	r1, #1
 800359c:	4618      	mov	r0, r3
 800359e:	f000 f867 	bl	8003670 <RCCEx_PLLSAI1_Config>
 80035a2:	4603      	mov	r3, r0
 80035a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035a6:	7cfb      	ldrb	r3, [r7, #19]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80035ac:	7cfb      	ldrb	r3, [r7, #19]
 80035ae:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d02f      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035bc:	4b2b      	ldr	r3, [pc, #172]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035ca:	4928      	ldr	r1, [pc, #160]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035da:	d10d      	bne.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	3304      	adds	r3, #4
 80035e0:	2102      	movs	r1, #2
 80035e2:	4618      	mov	r0, r3
 80035e4:	f000 f844 	bl	8003670 <RCCEx_PLLSAI1_Config>
 80035e8:	4603      	mov	r3, r0
 80035ea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035ec:	7cfb      	ldrb	r3, [r7, #19]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d014      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80035f2:	7cfb      	ldrb	r3, [r7, #19]
 80035f4:	74bb      	strb	r3, [r7, #18]
 80035f6:	e011      	b.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003600:	d10c      	bne.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	3320      	adds	r3, #32
 8003606:	2102      	movs	r1, #2
 8003608:	4618      	mov	r0, r3
 800360a:	f000 f925 	bl	8003858 <RCCEx_PLLSAI2_Config>
 800360e:	4603      	mov	r3, r0
 8003610:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003612:	7cfb      	ldrb	r3, [r7, #19]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d001      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003618:	7cfb      	ldrb	r3, [r7, #19]
 800361a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00a      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003628:	4b10      	ldr	r3, [pc, #64]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800362a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800362e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003636:	490d      	ldr	r1, [pc, #52]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003638:	4313      	orrs	r3, r2
 800363a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00b      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800364a:	4b08      	ldr	r3, [pc, #32]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800364c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003650:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800365a:	4904      	ldr	r1, [pc, #16]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800365c:	4313      	orrs	r3, r2
 800365e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003662:	7cbb      	ldrb	r3, [r7, #18]
}
 8003664:	4618      	mov	r0, r3
 8003666:	3718      	adds	r7, #24
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	40021000 	.word	0x40021000

08003670 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800367a:	2300      	movs	r3, #0
 800367c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800367e:	4b75      	ldr	r3, [pc, #468]	; (8003854 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	f003 0303 	and.w	r3, r3, #3
 8003686:	2b00      	cmp	r3, #0
 8003688:	d018      	beq.n	80036bc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800368a:	4b72      	ldr	r3, [pc, #456]	; (8003854 <RCCEx_PLLSAI1_Config+0x1e4>)
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	f003 0203 	and.w	r2, r3, #3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	429a      	cmp	r2, r3
 8003698:	d10d      	bne.n	80036b6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
       ||
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d009      	beq.n	80036b6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80036a2:	4b6c      	ldr	r3, [pc, #432]	; (8003854 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	091b      	lsrs	r3, r3, #4
 80036a8:	f003 0307 	and.w	r3, r3, #7
 80036ac:	1c5a      	adds	r2, r3, #1
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
       ||
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d047      	beq.n	8003746 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	73fb      	strb	r3, [r7, #15]
 80036ba:	e044      	b.n	8003746 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2b03      	cmp	r3, #3
 80036c2:	d018      	beq.n	80036f6 <RCCEx_PLLSAI1_Config+0x86>
 80036c4:	2b03      	cmp	r3, #3
 80036c6:	d825      	bhi.n	8003714 <RCCEx_PLLSAI1_Config+0xa4>
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d002      	beq.n	80036d2 <RCCEx_PLLSAI1_Config+0x62>
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d009      	beq.n	80036e4 <RCCEx_PLLSAI1_Config+0x74>
 80036d0:	e020      	b.n	8003714 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80036d2:	4b60      	ldr	r3, [pc, #384]	; (8003854 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d11d      	bne.n	800371a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036e2:	e01a      	b.n	800371a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80036e4:	4b5b      	ldr	r3, [pc, #364]	; (8003854 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d116      	bne.n	800371e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036f4:	e013      	b.n	800371e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80036f6:	4b57      	ldr	r3, [pc, #348]	; (8003854 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d10f      	bne.n	8003722 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003702:	4b54      	ldr	r3, [pc, #336]	; (8003854 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d109      	bne.n	8003722 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003712:	e006      	b.n	8003722 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	73fb      	strb	r3, [r7, #15]
      break;
 8003718:	e004      	b.n	8003724 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800371a:	bf00      	nop
 800371c:	e002      	b.n	8003724 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800371e:	bf00      	nop
 8003720:	e000      	b.n	8003724 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003722:	bf00      	nop
    }

    if(status == HAL_OK)
 8003724:	7bfb      	ldrb	r3, [r7, #15]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d10d      	bne.n	8003746 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800372a:	4b4a      	ldr	r3, [pc, #296]	; (8003854 <RCCEx_PLLSAI1_Config+0x1e4>)
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6819      	ldr	r1, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	3b01      	subs	r3, #1
 800373c:	011b      	lsls	r3, r3, #4
 800373e:	430b      	orrs	r3, r1
 8003740:	4944      	ldr	r1, [pc, #272]	; (8003854 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003742:	4313      	orrs	r3, r2
 8003744:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003746:	7bfb      	ldrb	r3, [r7, #15]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d17d      	bne.n	8003848 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800374c:	4b41      	ldr	r3, [pc, #260]	; (8003854 <RCCEx_PLLSAI1_Config+0x1e4>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a40      	ldr	r2, [pc, #256]	; (8003854 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003752:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003756:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003758:	f7fd f87c 	bl	8000854 <HAL_GetTick>
 800375c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800375e:	e009      	b.n	8003774 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003760:	f7fd f878 	bl	8000854 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b02      	cmp	r3, #2
 800376c:	d902      	bls.n	8003774 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	73fb      	strb	r3, [r7, #15]
        break;
 8003772:	e005      	b.n	8003780 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003774:	4b37      	ldr	r3, [pc, #220]	; (8003854 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1ef      	bne.n	8003760 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003780:	7bfb      	ldrb	r3, [r7, #15]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d160      	bne.n	8003848 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d111      	bne.n	80037b0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800378c:	4b31      	ldr	r3, [pc, #196]	; (8003854 <RCCEx_PLLSAI1_Config+0x1e4>)
 800378e:	691b      	ldr	r3, [r3, #16]
 8003790:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003794:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	6892      	ldr	r2, [r2, #8]
 800379c:	0211      	lsls	r1, r2, #8
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	68d2      	ldr	r2, [r2, #12]
 80037a2:	0912      	lsrs	r2, r2, #4
 80037a4:	0452      	lsls	r2, r2, #17
 80037a6:	430a      	orrs	r2, r1
 80037a8:	492a      	ldr	r1, [pc, #168]	; (8003854 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	610b      	str	r3, [r1, #16]
 80037ae:	e027      	b.n	8003800 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d112      	bne.n	80037dc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037b6:	4b27      	ldr	r3, [pc, #156]	; (8003854 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80037be:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	6892      	ldr	r2, [r2, #8]
 80037c6:	0211      	lsls	r1, r2, #8
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	6912      	ldr	r2, [r2, #16]
 80037cc:	0852      	lsrs	r2, r2, #1
 80037ce:	3a01      	subs	r2, #1
 80037d0:	0552      	lsls	r2, r2, #21
 80037d2:	430a      	orrs	r2, r1
 80037d4:	491f      	ldr	r1, [pc, #124]	; (8003854 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	610b      	str	r3, [r1, #16]
 80037da:	e011      	b.n	8003800 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037dc:	4b1d      	ldr	r3, [pc, #116]	; (8003854 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80037e4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	6892      	ldr	r2, [r2, #8]
 80037ec:	0211      	lsls	r1, r2, #8
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	6952      	ldr	r2, [r2, #20]
 80037f2:	0852      	lsrs	r2, r2, #1
 80037f4:	3a01      	subs	r2, #1
 80037f6:	0652      	lsls	r2, r2, #25
 80037f8:	430a      	orrs	r2, r1
 80037fa:	4916      	ldr	r1, [pc, #88]	; (8003854 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003800:	4b14      	ldr	r3, [pc, #80]	; (8003854 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a13      	ldr	r2, [pc, #76]	; (8003854 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003806:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800380a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800380c:	f7fd f822 	bl	8000854 <HAL_GetTick>
 8003810:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003812:	e009      	b.n	8003828 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003814:	f7fd f81e 	bl	8000854 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b02      	cmp	r3, #2
 8003820:	d902      	bls.n	8003828 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	73fb      	strb	r3, [r7, #15]
          break;
 8003826:	e005      	b.n	8003834 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003828:	4b0a      	ldr	r3, [pc, #40]	; (8003854 <RCCEx_PLLSAI1_Config+0x1e4>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d0ef      	beq.n	8003814 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003834:	7bfb      	ldrb	r3, [r7, #15]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d106      	bne.n	8003848 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800383a:	4b06      	ldr	r3, [pc, #24]	; (8003854 <RCCEx_PLLSAI1_Config+0x1e4>)
 800383c:	691a      	ldr	r2, [r3, #16]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	4904      	ldr	r1, [pc, #16]	; (8003854 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003844:	4313      	orrs	r3, r2
 8003846:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003848:	7bfb      	ldrb	r3, [r7, #15]
}
 800384a:	4618      	mov	r0, r3
 800384c:	3710      	adds	r7, #16
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	40021000 	.word	0x40021000

08003858 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003862:	2300      	movs	r3, #0
 8003864:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003866:	4b6a      	ldr	r3, [pc, #424]	; (8003a10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	f003 0303 	and.w	r3, r3, #3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d018      	beq.n	80038a4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003872:	4b67      	ldr	r3, [pc, #412]	; (8003a10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	f003 0203 	and.w	r2, r3, #3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	429a      	cmp	r2, r3
 8003880:	d10d      	bne.n	800389e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
       ||
 8003886:	2b00      	cmp	r3, #0
 8003888:	d009      	beq.n	800389e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800388a:	4b61      	ldr	r3, [pc, #388]	; (8003a10 <RCCEx_PLLSAI2_Config+0x1b8>)
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	091b      	lsrs	r3, r3, #4
 8003890:	f003 0307 	and.w	r3, r3, #7
 8003894:	1c5a      	adds	r2, r3, #1
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
       ||
 800389a:	429a      	cmp	r2, r3
 800389c:	d047      	beq.n	800392e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	73fb      	strb	r3, [r7, #15]
 80038a2:	e044      	b.n	800392e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2b03      	cmp	r3, #3
 80038aa:	d018      	beq.n	80038de <RCCEx_PLLSAI2_Config+0x86>
 80038ac:	2b03      	cmp	r3, #3
 80038ae:	d825      	bhi.n	80038fc <RCCEx_PLLSAI2_Config+0xa4>
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d002      	beq.n	80038ba <RCCEx_PLLSAI2_Config+0x62>
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d009      	beq.n	80038cc <RCCEx_PLLSAI2_Config+0x74>
 80038b8:	e020      	b.n	80038fc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80038ba:	4b55      	ldr	r3, [pc, #340]	; (8003a10 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d11d      	bne.n	8003902 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038ca:	e01a      	b.n	8003902 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80038cc:	4b50      	ldr	r3, [pc, #320]	; (8003a10 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d116      	bne.n	8003906 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038dc:	e013      	b.n	8003906 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80038de:	4b4c      	ldr	r3, [pc, #304]	; (8003a10 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d10f      	bne.n	800390a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80038ea:	4b49      	ldr	r3, [pc, #292]	; (8003a10 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d109      	bne.n	800390a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80038fa:	e006      	b.n	800390a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	73fb      	strb	r3, [r7, #15]
      break;
 8003900:	e004      	b.n	800390c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003902:	bf00      	nop
 8003904:	e002      	b.n	800390c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003906:	bf00      	nop
 8003908:	e000      	b.n	800390c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800390a:	bf00      	nop
    }

    if(status == HAL_OK)
 800390c:	7bfb      	ldrb	r3, [r7, #15]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10d      	bne.n	800392e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003912:	4b3f      	ldr	r3, [pc, #252]	; (8003a10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6819      	ldr	r1, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	3b01      	subs	r3, #1
 8003924:	011b      	lsls	r3, r3, #4
 8003926:	430b      	orrs	r3, r1
 8003928:	4939      	ldr	r1, [pc, #228]	; (8003a10 <RCCEx_PLLSAI2_Config+0x1b8>)
 800392a:	4313      	orrs	r3, r2
 800392c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800392e:	7bfb      	ldrb	r3, [r7, #15]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d167      	bne.n	8003a04 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003934:	4b36      	ldr	r3, [pc, #216]	; (8003a10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a35      	ldr	r2, [pc, #212]	; (8003a10 <RCCEx_PLLSAI2_Config+0x1b8>)
 800393a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800393e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003940:	f7fc ff88 	bl	8000854 <HAL_GetTick>
 8003944:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003946:	e009      	b.n	800395c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003948:	f7fc ff84 	bl	8000854 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b02      	cmp	r3, #2
 8003954:	d902      	bls.n	800395c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	73fb      	strb	r3, [r7, #15]
        break;
 800395a:	e005      	b.n	8003968 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800395c:	4b2c      	ldr	r3, [pc, #176]	; (8003a10 <RCCEx_PLLSAI2_Config+0x1b8>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d1ef      	bne.n	8003948 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003968:	7bfb      	ldrb	r3, [r7, #15]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d14a      	bne.n	8003a04 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d111      	bne.n	8003998 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003974:	4b26      	ldr	r3, [pc, #152]	; (8003a10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003976:	695b      	ldr	r3, [r3, #20]
 8003978:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800397c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	6892      	ldr	r2, [r2, #8]
 8003984:	0211      	lsls	r1, r2, #8
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	68d2      	ldr	r2, [r2, #12]
 800398a:	0912      	lsrs	r2, r2, #4
 800398c:	0452      	lsls	r2, r2, #17
 800398e:	430a      	orrs	r2, r1
 8003990:	491f      	ldr	r1, [pc, #124]	; (8003a10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003992:	4313      	orrs	r3, r2
 8003994:	614b      	str	r3, [r1, #20]
 8003996:	e011      	b.n	80039bc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003998:	4b1d      	ldr	r3, [pc, #116]	; (8003a10 <RCCEx_PLLSAI2_Config+0x1b8>)
 800399a:	695b      	ldr	r3, [r3, #20]
 800399c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80039a0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	6892      	ldr	r2, [r2, #8]
 80039a8:	0211      	lsls	r1, r2, #8
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	6912      	ldr	r2, [r2, #16]
 80039ae:	0852      	lsrs	r2, r2, #1
 80039b0:	3a01      	subs	r2, #1
 80039b2:	0652      	lsls	r2, r2, #25
 80039b4:	430a      	orrs	r2, r1
 80039b6:	4916      	ldr	r1, [pc, #88]	; (8003a10 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80039bc:	4b14      	ldr	r3, [pc, #80]	; (8003a10 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a13      	ldr	r2, [pc, #76]	; (8003a10 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039c6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039c8:	f7fc ff44 	bl	8000854 <HAL_GetTick>
 80039cc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80039ce:	e009      	b.n	80039e4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80039d0:	f7fc ff40 	bl	8000854 <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d902      	bls.n	80039e4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	73fb      	strb	r3, [r7, #15]
          break;
 80039e2:	e005      	b.n	80039f0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80039e4:	4b0a      	ldr	r3, [pc, #40]	; (8003a10 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d0ef      	beq.n	80039d0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80039f0:	7bfb      	ldrb	r3, [r7, #15]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d106      	bne.n	8003a04 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80039f6:	4b06      	ldr	r3, [pc, #24]	; (8003a10 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039f8:	695a      	ldr	r2, [r3, #20]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	695b      	ldr	r3, [r3, #20]
 80039fe:	4904      	ldr	r1, [pc, #16]	; (8003a10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3710      	adds	r7, #16
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	40021000 	.word	0x40021000

08003a14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d101      	bne.n	8003a26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e049      	b.n	8003aba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d106      	bne.n	8003a40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f7fc fdea 	bl	8000614 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2202      	movs	r2, #2
 8003a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	3304      	adds	r3, #4
 8003a50:	4619      	mov	r1, r3
 8003a52:	4610      	mov	r0, r2
 8003a54:	f000 fb7a 	bl	800414c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3708      	adds	r7, #8
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}

08003ac2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	b082      	sub	sp, #8
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d101      	bne.n	8003ad4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e049      	b.n	8003b68 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d106      	bne.n	8003aee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f000 f841 	bl	8003b70 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2202      	movs	r2, #2
 8003af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	3304      	adds	r3, #4
 8003afe:	4619      	mov	r1, r3
 8003b00:	4610      	mov	r0, r2
 8003b02:	f000 fb23 	bl	800414c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2201      	movs	r2, #1
 8003b12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2201      	movs	r2, #1
 8003b22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2201      	movs	r2, #1
 8003b42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2201      	movs	r2, #1
 8003b4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2201      	movs	r2, #1
 8003b52:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2201      	movs	r2, #1
 8003b5a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2201      	movs	r2, #1
 8003b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b66:	2300      	movs	r3, #0
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3708      	adds	r7, #8
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003b78:	bf00      	nop
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d109      	bne.n	8003ba8 <HAL_TIM_PWM_Start+0x24>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	bf14      	ite	ne
 8003ba0:	2301      	movne	r3, #1
 8003ba2:	2300      	moveq	r3, #0
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	e03c      	b.n	8003c22 <HAL_TIM_PWM_Start+0x9e>
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	2b04      	cmp	r3, #4
 8003bac:	d109      	bne.n	8003bc2 <HAL_TIM_PWM_Start+0x3e>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	bf14      	ite	ne
 8003bba:	2301      	movne	r3, #1
 8003bbc:	2300      	moveq	r3, #0
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	e02f      	b.n	8003c22 <HAL_TIM_PWM_Start+0x9e>
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	2b08      	cmp	r3, #8
 8003bc6:	d109      	bne.n	8003bdc <HAL_TIM_PWM_Start+0x58>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	bf14      	ite	ne
 8003bd4:	2301      	movne	r3, #1
 8003bd6:	2300      	moveq	r3, #0
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	e022      	b.n	8003c22 <HAL_TIM_PWM_Start+0x9e>
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	2b0c      	cmp	r3, #12
 8003be0:	d109      	bne.n	8003bf6 <HAL_TIM_PWM_Start+0x72>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	bf14      	ite	ne
 8003bee:	2301      	movne	r3, #1
 8003bf0:	2300      	moveq	r3, #0
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	e015      	b.n	8003c22 <HAL_TIM_PWM_Start+0x9e>
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	2b10      	cmp	r3, #16
 8003bfa:	d109      	bne.n	8003c10 <HAL_TIM_PWM_Start+0x8c>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	bf14      	ite	ne
 8003c08:	2301      	movne	r3, #1
 8003c0a:	2300      	moveq	r3, #0
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	e008      	b.n	8003c22 <HAL_TIM_PWM_Start+0x9e>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	bf14      	ite	ne
 8003c1c:	2301      	movne	r3, #1
 8003c1e:	2300      	moveq	r3, #0
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d001      	beq.n	8003c2a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e09c      	b.n	8003d64 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d104      	bne.n	8003c3a <HAL_TIM_PWM_Start+0xb6>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2202      	movs	r2, #2
 8003c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c38:	e023      	b.n	8003c82 <HAL_TIM_PWM_Start+0xfe>
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	2b04      	cmp	r3, #4
 8003c3e:	d104      	bne.n	8003c4a <HAL_TIM_PWM_Start+0xc6>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2202      	movs	r2, #2
 8003c44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c48:	e01b      	b.n	8003c82 <HAL_TIM_PWM_Start+0xfe>
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	2b08      	cmp	r3, #8
 8003c4e:	d104      	bne.n	8003c5a <HAL_TIM_PWM_Start+0xd6>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2202      	movs	r2, #2
 8003c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c58:	e013      	b.n	8003c82 <HAL_TIM_PWM_Start+0xfe>
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	2b0c      	cmp	r3, #12
 8003c5e:	d104      	bne.n	8003c6a <HAL_TIM_PWM_Start+0xe6>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2202      	movs	r2, #2
 8003c64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c68:	e00b      	b.n	8003c82 <HAL_TIM_PWM_Start+0xfe>
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	2b10      	cmp	r3, #16
 8003c6e:	d104      	bne.n	8003c7a <HAL_TIM_PWM_Start+0xf6>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2202      	movs	r2, #2
 8003c74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c78:	e003      	b.n	8003c82 <HAL_TIM_PWM_Start+0xfe>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2202      	movs	r2, #2
 8003c7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2201      	movs	r2, #1
 8003c88:	6839      	ldr	r1, [r7, #0]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f000 fe68 	bl	8004960 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a35      	ldr	r2, [pc, #212]	; (8003d6c <HAL_TIM_PWM_Start+0x1e8>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d013      	beq.n	8003cc2 <HAL_TIM_PWM_Start+0x13e>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a34      	ldr	r2, [pc, #208]	; (8003d70 <HAL_TIM_PWM_Start+0x1ec>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d00e      	beq.n	8003cc2 <HAL_TIM_PWM_Start+0x13e>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a32      	ldr	r2, [pc, #200]	; (8003d74 <HAL_TIM_PWM_Start+0x1f0>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d009      	beq.n	8003cc2 <HAL_TIM_PWM_Start+0x13e>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a31      	ldr	r2, [pc, #196]	; (8003d78 <HAL_TIM_PWM_Start+0x1f4>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d004      	beq.n	8003cc2 <HAL_TIM_PWM_Start+0x13e>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a2f      	ldr	r2, [pc, #188]	; (8003d7c <HAL_TIM_PWM_Start+0x1f8>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d101      	bne.n	8003cc6 <HAL_TIM_PWM_Start+0x142>
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e000      	b.n	8003cc8 <HAL_TIM_PWM_Start+0x144>
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d007      	beq.n	8003cdc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cda:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a22      	ldr	r2, [pc, #136]	; (8003d6c <HAL_TIM_PWM_Start+0x1e8>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d01d      	beq.n	8003d22 <HAL_TIM_PWM_Start+0x19e>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cee:	d018      	beq.n	8003d22 <HAL_TIM_PWM_Start+0x19e>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a22      	ldr	r2, [pc, #136]	; (8003d80 <HAL_TIM_PWM_Start+0x1fc>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d013      	beq.n	8003d22 <HAL_TIM_PWM_Start+0x19e>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a21      	ldr	r2, [pc, #132]	; (8003d84 <HAL_TIM_PWM_Start+0x200>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d00e      	beq.n	8003d22 <HAL_TIM_PWM_Start+0x19e>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a1f      	ldr	r2, [pc, #124]	; (8003d88 <HAL_TIM_PWM_Start+0x204>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d009      	beq.n	8003d22 <HAL_TIM_PWM_Start+0x19e>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a17      	ldr	r2, [pc, #92]	; (8003d70 <HAL_TIM_PWM_Start+0x1ec>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d004      	beq.n	8003d22 <HAL_TIM_PWM_Start+0x19e>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a15      	ldr	r2, [pc, #84]	; (8003d74 <HAL_TIM_PWM_Start+0x1f0>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d115      	bne.n	8003d4e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	689a      	ldr	r2, [r3, #8]
 8003d28:	4b18      	ldr	r3, [pc, #96]	; (8003d8c <HAL_TIM_PWM_Start+0x208>)
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2b06      	cmp	r3, #6
 8003d32:	d015      	beq.n	8003d60 <HAL_TIM_PWM_Start+0x1dc>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d3a:	d011      	beq.n	8003d60 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f042 0201 	orr.w	r2, r2, #1
 8003d4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d4c:	e008      	b.n	8003d60 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f042 0201 	orr.w	r2, r2, #1
 8003d5c:	601a      	str	r2, [r3, #0]
 8003d5e:	e000      	b.n	8003d62 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d60:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d62:	2300      	movs	r3, #0
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3710      	adds	r7, #16
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	40012c00 	.word	0x40012c00
 8003d70:	40013400 	.word	0x40013400
 8003d74:	40014000 	.word	0x40014000
 8003d78:	40014400 	.word	0x40014400
 8003d7c:	40014800 	.word	0x40014800
 8003d80:	40000400 	.word	0x40000400
 8003d84:	40000800 	.word	0x40000800
 8003d88:	40000c00 	.word	0x40000c00
 8003d8c:	00010007 	.word	0x00010007

08003d90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b086      	sub	sp, #24
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d101      	bne.n	8003dae <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003daa:	2302      	movs	r3, #2
 8003dac:	e0ff      	b.n	8003fae <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2201      	movs	r2, #1
 8003db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2b14      	cmp	r3, #20
 8003dba:	f200 80f0 	bhi.w	8003f9e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003dbe:	a201      	add	r2, pc, #4	; (adr r2, 8003dc4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dc4:	08003e19 	.word	0x08003e19
 8003dc8:	08003f9f 	.word	0x08003f9f
 8003dcc:	08003f9f 	.word	0x08003f9f
 8003dd0:	08003f9f 	.word	0x08003f9f
 8003dd4:	08003e59 	.word	0x08003e59
 8003dd8:	08003f9f 	.word	0x08003f9f
 8003ddc:	08003f9f 	.word	0x08003f9f
 8003de0:	08003f9f 	.word	0x08003f9f
 8003de4:	08003e9b 	.word	0x08003e9b
 8003de8:	08003f9f 	.word	0x08003f9f
 8003dec:	08003f9f 	.word	0x08003f9f
 8003df0:	08003f9f 	.word	0x08003f9f
 8003df4:	08003edb 	.word	0x08003edb
 8003df8:	08003f9f 	.word	0x08003f9f
 8003dfc:	08003f9f 	.word	0x08003f9f
 8003e00:	08003f9f 	.word	0x08003f9f
 8003e04:	08003f1d 	.word	0x08003f1d
 8003e08:	08003f9f 	.word	0x08003f9f
 8003e0c:	08003f9f 	.word	0x08003f9f
 8003e10:	08003f9f 	.word	0x08003f9f
 8003e14:	08003f5d 	.word	0x08003f5d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68b9      	ldr	r1, [r7, #8]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f000 fa2e 	bl	8004280 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	699a      	ldr	r2, [r3, #24]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f042 0208 	orr.w	r2, r2, #8
 8003e32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	699a      	ldr	r2, [r3, #24]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f022 0204 	bic.w	r2, r2, #4
 8003e42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	6999      	ldr	r1, [r3, #24]
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	691a      	ldr	r2, [r3, #16]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	430a      	orrs	r2, r1
 8003e54:	619a      	str	r2, [r3, #24]
      break;
 8003e56:	e0a5      	b.n	8003fa4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68b9      	ldr	r1, [r7, #8]
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f000 fa9e 	bl	80043a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	699a      	ldr	r2, [r3, #24]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	699a      	ldr	r2, [r3, #24]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	6999      	ldr	r1, [r3, #24]
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	021a      	lsls	r2, r3, #8
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	430a      	orrs	r2, r1
 8003e96:	619a      	str	r2, [r3, #24]
      break;
 8003e98:	e084      	b.n	8003fa4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68b9      	ldr	r1, [r7, #8]
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f000 fb07 	bl	80044b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	69da      	ldr	r2, [r3, #28]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f042 0208 	orr.w	r2, r2, #8
 8003eb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	69da      	ldr	r2, [r3, #28]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f022 0204 	bic.w	r2, r2, #4
 8003ec4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	69d9      	ldr	r1, [r3, #28]
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	691a      	ldr	r2, [r3, #16]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	430a      	orrs	r2, r1
 8003ed6:	61da      	str	r2, [r3, #28]
      break;
 8003ed8:	e064      	b.n	8003fa4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68b9      	ldr	r1, [r7, #8]
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f000 fb6f 	bl	80045c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	69da      	ldr	r2, [r3, #28]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ef4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	69da      	ldr	r2, [r3, #28]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	69d9      	ldr	r1, [r3, #28]
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	021a      	lsls	r2, r3, #8
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	430a      	orrs	r2, r1
 8003f18:	61da      	str	r2, [r3, #28]
      break;
 8003f1a:	e043      	b.n	8003fa4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68b9      	ldr	r1, [r7, #8]
 8003f22:	4618      	mov	r0, r3
 8003f24:	f000 fbb8 	bl	8004698 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f042 0208 	orr.w	r2, r2, #8
 8003f36:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f022 0204 	bic.w	r2, r2, #4
 8003f46:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	691a      	ldr	r2, [r3, #16]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	430a      	orrs	r2, r1
 8003f58:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003f5a:	e023      	b.n	8003fa4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68b9      	ldr	r1, [r7, #8]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f000 fbfc 	bl	8004760 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f76:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f86:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	021a      	lsls	r2, r3, #8
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003f9c:	e002      	b.n	8003fa4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	75fb      	strb	r3, [r7, #23]
      break;
 8003fa2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003fac:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3718      	adds	r7, #24
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop

08003fb8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d101      	bne.n	8003fd4 <HAL_TIM_ConfigClockSource+0x1c>
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	e0b6      	b.n	8004142 <HAL_TIM_ConfigClockSource+0x18a>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2202      	movs	r2, #2
 8003fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ff2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ff6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ffe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68ba      	ldr	r2, [r7, #8]
 8004006:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004010:	d03e      	beq.n	8004090 <HAL_TIM_ConfigClockSource+0xd8>
 8004012:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004016:	f200 8087 	bhi.w	8004128 <HAL_TIM_ConfigClockSource+0x170>
 800401a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800401e:	f000 8086 	beq.w	800412e <HAL_TIM_ConfigClockSource+0x176>
 8004022:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004026:	d87f      	bhi.n	8004128 <HAL_TIM_ConfigClockSource+0x170>
 8004028:	2b70      	cmp	r3, #112	; 0x70
 800402a:	d01a      	beq.n	8004062 <HAL_TIM_ConfigClockSource+0xaa>
 800402c:	2b70      	cmp	r3, #112	; 0x70
 800402e:	d87b      	bhi.n	8004128 <HAL_TIM_ConfigClockSource+0x170>
 8004030:	2b60      	cmp	r3, #96	; 0x60
 8004032:	d050      	beq.n	80040d6 <HAL_TIM_ConfigClockSource+0x11e>
 8004034:	2b60      	cmp	r3, #96	; 0x60
 8004036:	d877      	bhi.n	8004128 <HAL_TIM_ConfigClockSource+0x170>
 8004038:	2b50      	cmp	r3, #80	; 0x50
 800403a:	d03c      	beq.n	80040b6 <HAL_TIM_ConfigClockSource+0xfe>
 800403c:	2b50      	cmp	r3, #80	; 0x50
 800403e:	d873      	bhi.n	8004128 <HAL_TIM_ConfigClockSource+0x170>
 8004040:	2b40      	cmp	r3, #64	; 0x40
 8004042:	d058      	beq.n	80040f6 <HAL_TIM_ConfigClockSource+0x13e>
 8004044:	2b40      	cmp	r3, #64	; 0x40
 8004046:	d86f      	bhi.n	8004128 <HAL_TIM_ConfigClockSource+0x170>
 8004048:	2b30      	cmp	r3, #48	; 0x30
 800404a:	d064      	beq.n	8004116 <HAL_TIM_ConfigClockSource+0x15e>
 800404c:	2b30      	cmp	r3, #48	; 0x30
 800404e:	d86b      	bhi.n	8004128 <HAL_TIM_ConfigClockSource+0x170>
 8004050:	2b20      	cmp	r3, #32
 8004052:	d060      	beq.n	8004116 <HAL_TIM_ConfigClockSource+0x15e>
 8004054:	2b20      	cmp	r3, #32
 8004056:	d867      	bhi.n	8004128 <HAL_TIM_ConfigClockSource+0x170>
 8004058:	2b00      	cmp	r3, #0
 800405a:	d05c      	beq.n	8004116 <HAL_TIM_ConfigClockSource+0x15e>
 800405c:	2b10      	cmp	r3, #16
 800405e:	d05a      	beq.n	8004116 <HAL_TIM_ConfigClockSource+0x15e>
 8004060:	e062      	b.n	8004128 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004072:	f000 fc55 	bl	8004920 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004084:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68ba      	ldr	r2, [r7, #8]
 800408c:	609a      	str	r2, [r3, #8]
      break;
 800408e:	e04f      	b.n	8004130 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80040a0:	f000 fc3e 	bl	8004920 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	689a      	ldr	r2, [r3, #8]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040b2:	609a      	str	r2, [r3, #8]
      break;
 80040b4:	e03c      	b.n	8004130 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040c2:	461a      	mov	r2, r3
 80040c4:	f000 fbb2 	bl	800482c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2150      	movs	r1, #80	; 0x50
 80040ce:	4618      	mov	r0, r3
 80040d0:	f000 fc0b 	bl	80048ea <TIM_ITRx_SetConfig>
      break;
 80040d4:	e02c      	b.n	8004130 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80040e2:	461a      	mov	r2, r3
 80040e4:	f000 fbd1 	bl	800488a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2160      	movs	r1, #96	; 0x60
 80040ee:	4618      	mov	r0, r3
 80040f0:	f000 fbfb 	bl	80048ea <TIM_ITRx_SetConfig>
      break;
 80040f4:	e01c      	b.n	8004130 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004102:	461a      	mov	r2, r3
 8004104:	f000 fb92 	bl	800482c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2140      	movs	r1, #64	; 0x40
 800410e:	4618      	mov	r0, r3
 8004110:	f000 fbeb 	bl	80048ea <TIM_ITRx_SetConfig>
      break;
 8004114:	e00c      	b.n	8004130 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4619      	mov	r1, r3
 8004120:	4610      	mov	r0, r2
 8004122:	f000 fbe2 	bl	80048ea <TIM_ITRx_SetConfig>
      break;
 8004126:	e003      	b.n	8004130 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	73fb      	strb	r3, [r7, #15]
      break;
 800412c:	e000      	b.n	8004130 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800412e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004140:	7bfb      	ldrb	r3, [r7, #15]
}
 8004142:	4618      	mov	r0, r3
 8004144:	3710      	adds	r7, #16
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
	...

0800414c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a40      	ldr	r2, [pc, #256]	; (8004260 <TIM_Base_SetConfig+0x114>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d013      	beq.n	800418c <TIM_Base_SetConfig+0x40>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800416a:	d00f      	beq.n	800418c <TIM_Base_SetConfig+0x40>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a3d      	ldr	r2, [pc, #244]	; (8004264 <TIM_Base_SetConfig+0x118>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d00b      	beq.n	800418c <TIM_Base_SetConfig+0x40>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a3c      	ldr	r2, [pc, #240]	; (8004268 <TIM_Base_SetConfig+0x11c>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d007      	beq.n	800418c <TIM_Base_SetConfig+0x40>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4a3b      	ldr	r2, [pc, #236]	; (800426c <TIM_Base_SetConfig+0x120>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d003      	beq.n	800418c <TIM_Base_SetConfig+0x40>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4a3a      	ldr	r2, [pc, #232]	; (8004270 <TIM_Base_SetConfig+0x124>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d108      	bne.n	800419e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004192:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	4313      	orrs	r3, r2
 800419c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a2f      	ldr	r2, [pc, #188]	; (8004260 <TIM_Base_SetConfig+0x114>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d01f      	beq.n	80041e6 <TIM_Base_SetConfig+0x9a>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ac:	d01b      	beq.n	80041e6 <TIM_Base_SetConfig+0x9a>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a2c      	ldr	r2, [pc, #176]	; (8004264 <TIM_Base_SetConfig+0x118>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d017      	beq.n	80041e6 <TIM_Base_SetConfig+0x9a>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a2b      	ldr	r2, [pc, #172]	; (8004268 <TIM_Base_SetConfig+0x11c>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d013      	beq.n	80041e6 <TIM_Base_SetConfig+0x9a>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a2a      	ldr	r2, [pc, #168]	; (800426c <TIM_Base_SetConfig+0x120>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d00f      	beq.n	80041e6 <TIM_Base_SetConfig+0x9a>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a29      	ldr	r2, [pc, #164]	; (8004270 <TIM_Base_SetConfig+0x124>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d00b      	beq.n	80041e6 <TIM_Base_SetConfig+0x9a>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a28      	ldr	r2, [pc, #160]	; (8004274 <TIM_Base_SetConfig+0x128>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d007      	beq.n	80041e6 <TIM_Base_SetConfig+0x9a>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a27      	ldr	r2, [pc, #156]	; (8004278 <TIM_Base_SetConfig+0x12c>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d003      	beq.n	80041e6 <TIM_Base_SetConfig+0x9a>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a26      	ldr	r2, [pc, #152]	; (800427c <TIM_Base_SetConfig+0x130>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d108      	bne.n	80041f8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	4313      	orrs	r3, r2
 8004204:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	68fa      	ldr	r2, [r7, #12]
 800420a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	689a      	ldr	r2, [r3, #8]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a10      	ldr	r2, [pc, #64]	; (8004260 <TIM_Base_SetConfig+0x114>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d00f      	beq.n	8004244 <TIM_Base_SetConfig+0xf8>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a12      	ldr	r2, [pc, #72]	; (8004270 <TIM_Base_SetConfig+0x124>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d00b      	beq.n	8004244 <TIM_Base_SetConfig+0xf8>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a11      	ldr	r2, [pc, #68]	; (8004274 <TIM_Base_SetConfig+0x128>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d007      	beq.n	8004244 <TIM_Base_SetConfig+0xf8>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a10      	ldr	r2, [pc, #64]	; (8004278 <TIM_Base_SetConfig+0x12c>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d003      	beq.n	8004244 <TIM_Base_SetConfig+0xf8>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a0f      	ldr	r2, [pc, #60]	; (800427c <TIM_Base_SetConfig+0x130>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d103      	bne.n	800424c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	691a      	ldr	r2, [r3, #16]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	615a      	str	r2, [r3, #20]
}
 8004252:	bf00      	nop
 8004254:	3714      	adds	r7, #20
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	40012c00 	.word	0x40012c00
 8004264:	40000400 	.word	0x40000400
 8004268:	40000800 	.word	0x40000800
 800426c:	40000c00 	.word	0x40000c00
 8004270:	40013400 	.word	0x40013400
 8004274:	40014000 	.word	0x40014000
 8004278:	40014400 	.word	0x40014400
 800427c:	40014800 	.word	0x40014800

08004280 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004280:	b480      	push	{r7}
 8004282:	b087      	sub	sp, #28
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a1b      	ldr	r3, [r3, #32]
 800428e:	f023 0201 	bic.w	r2, r3, #1
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a1b      	ldr	r3, [r3, #32]
 800429a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	699b      	ldr	r3, [r3, #24]
 80042a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f023 0303 	bic.w	r3, r3, #3
 80042ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68fa      	ldr	r2, [r7, #12]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	f023 0302 	bic.w	r3, r3, #2
 80042cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	697a      	ldr	r2, [r7, #20]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a2c      	ldr	r2, [pc, #176]	; (800438c <TIM_OC1_SetConfig+0x10c>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d00f      	beq.n	8004300 <TIM_OC1_SetConfig+0x80>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a2b      	ldr	r2, [pc, #172]	; (8004390 <TIM_OC1_SetConfig+0x110>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d00b      	beq.n	8004300 <TIM_OC1_SetConfig+0x80>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a2a      	ldr	r2, [pc, #168]	; (8004394 <TIM_OC1_SetConfig+0x114>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d007      	beq.n	8004300 <TIM_OC1_SetConfig+0x80>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4a29      	ldr	r2, [pc, #164]	; (8004398 <TIM_OC1_SetConfig+0x118>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d003      	beq.n	8004300 <TIM_OC1_SetConfig+0x80>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4a28      	ldr	r2, [pc, #160]	; (800439c <TIM_OC1_SetConfig+0x11c>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d10c      	bne.n	800431a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	f023 0308 	bic.w	r3, r3, #8
 8004306:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	697a      	ldr	r2, [r7, #20]
 800430e:	4313      	orrs	r3, r2
 8004310:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	f023 0304 	bic.w	r3, r3, #4
 8004318:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a1b      	ldr	r2, [pc, #108]	; (800438c <TIM_OC1_SetConfig+0x10c>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d00f      	beq.n	8004342 <TIM_OC1_SetConfig+0xc2>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a1a      	ldr	r2, [pc, #104]	; (8004390 <TIM_OC1_SetConfig+0x110>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d00b      	beq.n	8004342 <TIM_OC1_SetConfig+0xc2>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a19      	ldr	r2, [pc, #100]	; (8004394 <TIM_OC1_SetConfig+0x114>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d007      	beq.n	8004342 <TIM_OC1_SetConfig+0xc2>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a18      	ldr	r2, [pc, #96]	; (8004398 <TIM_OC1_SetConfig+0x118>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d003      	beq.n	8004342 <TIM_OC1_SetConfig+0xc2>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a17      	ldr	r2, [pc, #92]	; (800439c <TIM_OC1_SetConfig+0x11c>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d111      	bne.n	8004366 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004348:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004350:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	693a      	ldr	r2, [r7, #16]
 8004358:	4313      	orrs	r3, r2
 800435a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	699b      	ldr	r3, [r3, #24]
 8004360:	693a      	ldr	r2, [r7, #16]
 8004362:	4313      	orrs	r3, r2
 8004364:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	693a      	ldr	r2, [r7, #16]
 800436a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	685a      	ldr	r2, [r3, #4]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	697a      	ldr	r2, [r7, #20]
 800437e:	621a      	str	r2, [r3, #32]
}
 8004380:	bf00      	nop
 8004382:	371c      	adds	r7, #28
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr
 800438c:	40012c00 	.word	0x40012c00
 8004390:	40013400 	.word	0x40013400
 8004394:	40014000 	.word	0x40014000
 8004398:	40014400 	.word	0x40014400
 800439c:	40014800 	.word	0x40014800

080043a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b087      	sub	sp, #28
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	f023 0210 	bic.w	r2, r3, #16
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a1b      	ldr	r3, [r3, #32]
 80043ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	021b      	lsls	r3, r3, #8
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	f023 0320 	bic.w	r3, r3, #32
 80043ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	011b      	lsls	r3, r3, #4
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a28      	ldr	r2, [pc, #160]	; (80044a0 <TIM_OC2_SetConfig+0x100>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d003      	beq.n	800440c <TIM_OC2_SetConfig+0x6c>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4a27      	ldr	r2, [pc, #156]	; (80044a4 <TIM_OC2_SetConfig+0x104>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d10d      	bne.n	8004428 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004412:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	011b      	lsls	r3, r3, #4
 800441a:	697a      	ldr	r2, [r7, #20]
 800441c:	4313      	orrs	r3, r2
 800441e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004426:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4a1d      	ldr	r2, [pc, #116]	; (80044a0 <TIM_OC2_SetConfig+0x100>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d00f      	beq.n	8004450 <TIM_OC2_SetConfig+0xb0>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4a1c      	ldr	r2, [pc, #112]	; (80044a4 <TIM_OC2_SetConfig+0x104>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d00b      	beq.n	8004450 <TIM_OC2_SetConfig+0xb0>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a1b      	ldr	r2, [pc, #108]	; (80044a8 <TIM_OC2_SetConfig+0x108>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d007      	beq.n	8004450 <TIM_OC2_SetConfig+0xb0>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4a1a      	ldr	r2, [pc, #104]	; (80044ac <TIM_OC2_SetConfig+0x10c>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d003      	beq.n	8004450 <TIM_OC2_SetConfig+0xb0>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4a19      	ldr	r2, [pc, #100]	; (80044b0 <TIM_OC2_SetConfig+0x110>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d113      	bne.n	8004478 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004456:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800445e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	695b      	ldr	r3, [r3, #20]
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	4313      	orrs	r3, r2
 800446a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	699b      	ldr	r3, [r3, #24]
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	693a      	ldr	r2, [r7, #16]
 8004474:	4313      	orrs	r3, r2
 8004476:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	693a      	ldr	r2, [r7, #16]
 800447c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	68fa      	ldr	r2, [r7, #12]
 8004482:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	685a      	ldr	r2, [r3, #4]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	697a      	ldr	r2, [r7, #20]
 8004490:	621a      	str	r2, [r3, #32]
}
 8004492:	bf00      	nop
 8004494:	371c      	adds	r7, #28
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop
 80044a0:	40012c00 	.word	0x40012c00
 80044a4:	40013400 	.word	0x40013400
 80044a8:	40014000 	.word	0x40014000
 80044ac:	40014400 	.word	0x40014400
 80044b0:	40014800 	.word	0x40014800

080044b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b087      	sub	sp, #28
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a1b      	ldr	r3, [r3, #32]
 80044c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a1b      	ldr	r3, [r3, #32]
 80044ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	69db      	ldr	r3, [r3, #28]
 80044da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f023 0303 	bic.w	r3, r3, #3
 80044ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004500:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	021b      	lsls	r3, r3, #8
 8004508:	697a      	ldr	r2, [r7, #20]
 800450a:	4313      	orrs	r3, r2
 800450c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a27      	ldr	r2, [pc, #156]	; (80045b0 <TIM_OC3_SetConfig+0xfc>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d003      	beq.n	800451e <TIM_OC3_SetConfig+0x6a>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a26      	ldr	r2, [pc, #152]	; (80045b4 <TIM_OC3_SetConfig+0x100>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d10d      	bne.n	800453a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004524:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	021b      	lsls	r3, r3, #8
 800452c:	697a      	ldr	r2, [r7, #20]
 800452e:	4313      	orrs	r3, r2
 8004530:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004538:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a1c      	ldr	r2, [pc, #112]	; (80045b0 <TIM_OC3_SetConfig+0xfc>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d00f      	beq.n	8004562 <TIM_OC3_SetConfig+0xae>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a1b      	ldr	r2, [pc, #108]	; (80045b4 <TIM_OC3_SetConfig+0x100>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d00b      	beq.n	8004562 <TIM_OC3_SetConfig+0xae>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a1a      	ldr	r2, [pc, #104]	; (80045b8 <TIM_OC3_SetConfig+0x104>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d007      	beq.n	8004562 <TIM_OC3_SetConfig+0xae>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a19      	ldr	r2, [pc, #100]	; (80045bc <TIM_OC3_SetConfig+0x108>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d003      	beq.n	8004562 <TIM_OC3_SetConfig+0xae>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a18      	ldr	r2, [pc, #96]	; (80045c0 <TIM_OC3_SetConfig+0x10c>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d113      	bne.n	800458a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004568:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004570:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	011b      	lsls	r3, r3, #4
 8004578:	693a      	ldr	r2, [r7, #16]
 800457a:	4313      	orrs	r3, r2
 800457c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	011b      	lsls	r3, r3, #4
 8004584:	693a      	ldr	r2, [r7, #16]
 8004586:	4313      	orrs	r3, r2
 8004588:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	693a      	ldr	r2, [r7, #16]
 800458e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	68fa      	ldr	r2, [r7, #12]
 8004594:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	685a      	ldr	r2, [r3, #4]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	697a      	ldr	r2, [r7, #20]
 80045a2:	621a      	str	r2, [r3, #32]
}
 80045a4:	bf00      	nop
 80045a6:	371c      	adds	r7, #28
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr
 80045b0:	40012c00 	.word	0x40012c00
 80045b4:	40013400 	.word	0x40013400
 80045b8:	40014000 	.word	0x40014000
 80045bc:	40014400 	.word	0x40014400
 80045c0:	40014800 	.word	0x40014800

080045c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b087      	sub	sp, #28
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a1b      	ldr	r3, [r3, #32]
 80045d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a1b      	ldr	r3, [r3, #32]
 80045de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	69db      	ldr	r3, [r3, #28]
 80045ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	021b      	lsls	r3, r3, #8
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	4313      	orrs	r3, r2
 800460a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004612:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	031b      	lsls	r3, r3, #12
 800461a:	693a      	ldr	r2, [r7, #16]
 800461c:	4313      	orrs	r3, r2
 800461e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4a18      	ldr	r2, [pc, #96]	; (8004684 <TIM_OC4_SetConfig+0xc0>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d00f      	beq.n	8004648 <TIM_OC4_SetConfig+0x84>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a17      	ldr	r2, [pc, #92]	; (8004688 <TIM_OC4_SetConfig+0xc4>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d00b      	beq.n	8004648 <TIM_OC4_SetConfig+0x84>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a16      	ldr	r2, [pc, #88]	; (800468c <TIM_OC4_SetConfig+0xc8>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d007      	beq.n	8004648 <TIM_OC4_SetConfig+0x84>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a15      	ldr	r2, [pc, #84]	; (8004690 <TIM_OC4_SetConfig+0xcc>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d003      	beq.n	8004648 <TIM_OC4_SetConfig+0x84>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4a14      	ldr	r2, [pc, #80]	; (8004694 <TIM_OC4_SetConfig+0xd0>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d109      	bne.n	800465c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800464e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	695b      	ldr	r3, [r3, #20]
 8004654:	019b      	lsls	r3, r3, #6
 8004656:	697a      	ldr	r2, [r7, #20]
 8004658:	4313      	orrs	r3, r2
 800465a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	697a      	ldr	r2, [r7, #20]
 8004660:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	685a      	ldr	r2, [r3, #4]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	693a      	ldr	r2, [r7, #16]
 8004674:	621a      	str	r2, [r3, #32]
}
 8004676:	bf00      	nop
 8004678:	371c      	adds	r7, #28
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	40012c00 	.word	0x40012c00
 8004688:	40013400 	.word	0x40013400
 800468c:	40014000 	.word	0x40014000
 8004690:	40014400 	.word	0x40014400
 8004694:	40014800 	.word	0x40014800

08004698 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004698:	b480      	push	{r7}
 800469a:	b087      	sub	sp, #28
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a1b      	ldr	r3, [r3, #32]
 80046a6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a1b      	ldr	r3, [r3, #32]
 80046b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80046dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	041b      	lsls	r3, r3, #16
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a17      	ldr	r2, [pc, #92]	; (800474c <TIM_OC5_SetConfig+0xb4>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d00f      	beq.n	8004712 <TIM_OC5_SetConfig+0x7a>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a16      	ldr	r2, [pc, #88]	; (8004750 <TIM_OC5_SetConfig+0xb8>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d00b      	beq.n	8004712 <TIM_OC5_SetConfig+0x7a>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a15      	ldr	r2, [pc, #84]	; (8004754 <TIM_OC5_SetConfig+0xbc>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d007      	beq.n	8004712 <TIM_OC5_SetConfig+0x7a>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a14      	ldr	r2, [pc, #80]	; (8004758 <TIM_OC5_SetConfig+0xc0>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d003      	beq.n	8004712 <TIM_OC5_SetConfig+0x7a>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a13      	ldr	r2, [pc, #76]	; (800475c <TIM_OC5_SetConfig+0xc4>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d109      	bne.n	8004726 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004718:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	021b      	lsls	r3, r3, #8
 8004720:	697a      	ldr	r2, [r7, #20]
 8004722:	4313      	orrs	r3, r2
 8004724:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	697a      	ldr	r2, [r7, #20]
 800472a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	68fa      	ldr	r2, [r7, #12]
 8004730:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	685a      	ldr	r2, [r3, #4]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	693a      	ldr	r2, [r7, #16]
 800473e:	621a      	str	r2, [r3, #32]
}
 8004740:	bf00      	nop
 8004742:	371c      	adds	r7, #28
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr
 800474c:	40012c00 	.word	0x40012c00
 8004750:	40013400 	.word	0x40013400
 8004754:	40014000 	.word	0x40014000
 8004758:	40014400 	.word	0x40014400
 800475c:	40014800 	.word	0x40014800

08004760 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004760:	b480      	push	{r7}
 8004762:	b087      	sub	sp, #28
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a1b      	ldr	r3, [r3, #32]
 800476e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a1b      	ldr	r3, [r3, #32]
 800477a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800478e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004792:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	021b      	lsls	r3, r3, #8
 800479a:	68fa      	ldr	r2, [r7, #12]
 800479c:	4313      	orrs	r3, r2
 800479e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80047a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	051b      	lsls	r3, r3, #20
 80047ae:	693a      	ldr	r2, [r7, #16]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a18      	ldr	r2, [pc, #96]	; (8004818 <TIM_OC6_SetConfig+0xb8>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d00f      	beq.n	80047dc <TIM_OC6_SetConfig+0x7c>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4a17      	ldr	r2, [pc, #92]	; (800481c <TIM_OC6_SetConfig+0xbc>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d00b      	beq.n	80047dc <TIM_OC6_SetConfig+0x7c>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a16      	ldr	r2, [pc, #88]	; (8004820 <TIM_OC6_SetConfig+0xc0>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d007      	beq.n	80047dc <TIM_OC6_SetConfig+0x7c>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4a15      	ldr	r2, [pc, #84]	; (8004824 <TIM_OC6_SetConfig+0xc4>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d003      	beq.n	80047dc <TIM_OC6_SetConfig+0x7c>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4a14      	ldr	r2, [pc, #80]	; (8004828 <TIM_OC6_SetConfig+0xc8>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d109      	bne.n	80047f0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047e2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	695b      	ldr	r3, [r3, #20]
 80047e8:	029b      	lsls	r3, r3, #10
 80047ea:	697a      	ldr	r2, [r7, #20]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	697a      	ldr	r2, [r7, #20]
 80047f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	68fa      	ldr	r2, [r7, #12]
 80047fa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	685a      	ldr	r2, [r3, #4]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	693a      	ldr	r2, [r7, #16]
 8004808:	621a      	str	r2, [r3, #32]
}
 800480a:	bf00      	nop
 800480c:	371c      	adds	r7, #28
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	40012c00 	.word	0x40012c00
 800481c:	40013400 	.word	0x40013400
 8004820:	40014000 	.word	0x40014000
 8004824:	40014400 	.word	0x40014400
 8004828:	40014800 	.word	0x40014800

0800482c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800482c:	b480      	push	{r7}
 800482e:	b087      	sub	sp, #28
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6a1b      	ldr	r3, [r3, #32]
 800483c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	f023 0201 	bic.w	r2, r3, #1
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	699b      	ldr	r3, [r3, #24]
 800484e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004856:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	011b      	lsls	r3, r3, #4
 800485c:	693a      	ldr	r2, [r7, #16]
 800485e:	4313      	orrs	r3, r2
 8004860:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	f023 030a 	bic.w	r3, r3, #10
 8004868:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800486a:	697a      	ldr	r2, [r7, #20]
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	4313      	orrs	r3, r2
 8004870:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	697a      	ldr	r2, [r7, #20]
 800487c:	621a      	str	r2, [r3, #32]
}
 800487e:	bf00      	nop
 8004880:	371c      	adds	r7, #28
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr

0800488a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800488a:	b480      	push	{r7}
 800488c:	b087      	sub	sp, #28
 800488e:	af00      	add	r7, sp, #0
 8004890:	60f8      	str	r0, [r7, #12]
 8004892:	60b9      	str	r1, [r7, #8]
 8004894:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6a1b      	ldr	r3, [r3, #32]
 800489a:	f023 0210 	bic.w	r2, r3, #16
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	699b      	ldr	r3, [r3, #24]
 80048a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6a1b      	ldr	r3, [r3, #32]
 80048ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	031b      	lsls	r3, r3, #12
 80048ba:	697a      	ldr	r2, [r7, #20]
 80048bc:	4313      	orrs	r3, r2
 80048be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80048c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	011b      	lsls	r3, r3, #4
 80048cc:	693a      	ldr	r2, [r7, #16]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	697a      	ldr	r2, [r7, #20]
 80048d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	693a      	ldr	r2, [r7, #16]
 80048dc:	621a      	str	r2, [r3, #32]
}
 80048de:	bf00      	nop
 80048e0:	371c      	adds	r7, #28
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr

080048ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048ea:	b480      	push	{r7}
 80048ec:	b085      	sub	sp, #20
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
 80048f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004900:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004902:	683a      	ldr	r2, [r7, #0]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	4313      	orrs	r3, r2
 8004908:	f043 0307 	orr.w	r3, r3, #7
 800490c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	609a      	str	r2, [r3, #8]
}
 8004914:	bf00      	nop
 8004916:	3714      	adds	r7, #20
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004920:	b480      	push	{r7}
 8004922:	b087      	sub	sp, #28
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	607a      	str	r2, [r7, #4]
 800492c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800493a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	021a      	lsls	r2, r3, #8
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	431a      	orrs	r2, r3
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	4313      	orrs	r3, r2
 8004948:	697a      	ldr	r2, [r7, #20]
 800494a:	4313      	orrs	r3, r2
 800494c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	697a      	ldr	r2, [r7, #20]
 8004952:	609a      	str	r2, [r3, #8]
}
 8004954:	bf00      	nop
 8004956:	371c      	adds	r7, #28
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004960:	b480      	push	{r7}
 8004962:	b087      	sub	sp, #28
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	f003 031f 	and.w	r3, r3, #31
 8004972:	2201      	movs	r2, #1
 8004974:	fa02 f303 	lsl.w	r3, r2, r3
 8004978:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6a1a      	ldr	r2, [r3, #32]
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	43db      	mvns	r3, r3
 8004982:	401a      	ands	r2, r3
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6a1a      	ldr	r2, [r3, #32]
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	f003 031f 	and.w	r3, r3, #31
 8004992:	6879      	ldr	r1, [r7, #4]
 8004994:	fa01 f303 	lsl.w	r3, r1, r3
 8004998:	431a      	orrs	r2, r3
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	621a      	str	r2, [r3, #32]
}
 800499e:	bf00      	nop
 80049a0:	371c      	adds	r7, #28
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
	...

080049ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b085      	sub	sp, #20
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d101      	bne.n	80049c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049c0:	2302      	movs	r3, #2
 80049c2:	e068      	b.n	8004a96 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2202      	movs	r2, #2
 80049d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a2e      	ldr	r2, [pc, #184]	; (8004aa4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d004      	beq.n	80049f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a2d      	ldr	r2, [pc, #180]	; (8004aa8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d108      	bne.n	8004a0a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80049fe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a10:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	68fa      	ldr	r2, [r7, #12]
 8004a22:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a1e      	ldr	r2, [pc, #120]	; (8004aa4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d01d      	beq.n	8004a6a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a36:	d018      	beq.n	8004a6a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a1b      	ldr	r2, [pc, #108]	; (8004aac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d013      	beq.n	8004a6a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a1a      	ldr	r2, [pc, #104]	; (8004ab0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d00e      	beq.n	8004a6a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a18      	ldr	r2, [pc, #96]	; (8004ab4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d009      	beq.n	8004a6a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a13      	ldr	r2, [pc, #76]	; (8004aa8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d004      	beq.n	8004a6a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a14      	ldr	r2, [pc, #80]	; (8004ab8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d10c      	bne.n	8004a84 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	68ba      	ldr	r2, [r7, #8]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68ba      	ldr	r2, [r7, #8]
 8004a82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3714      	adds	r7, #20
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	40012c00 	.word	0x40012c00
 8004aa8:	40013400 	.word	0x40013400
 8004aac:	40000400 	.word	0x40000400
 8004ab0:	40000800 	.word	0x40000800
 8004ab4:	40000c00 	.word	0x40000c00
 8004ab8:	40014000 	.word	0x40014000

08004abc <memset>:
 8004abc:	4402      	add	r2, r0
 8004abe:	4603      	mov	r3, r0
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d100      	bne.n	8004ac6 <memset+0xa>
 8004ac4:	4770      	bx	lr
 8004ac6:	f803 1b01 	strb.w	r1, [r3], #1
 8004aca:	e7f9      	b.n	8004ac0 <memset+0x4>

08004acc <__libc_init_array>:
 8004acc:	b570      	push	{r4, r5, r6, lr}
 8004ace:	4d0d      	ldr	r5, [pc, #52]	; (8004b04 <__libc_init_array+0x38>)
 8004ad0:	4c0d      	ldr	r4, [pc, #52]	; (8004b08 <__libc_init_array+0x3c>)
 8004ad2:	1b64      	subs	r4, r4, r5
 8004ad4:	10a4      	asrs	r4, r4, #2
 8004ad6:	2600      	movs	r6, #0
 8004ad8:	42a6      	cmp	r6, r4
 8004ada:	d109      	bne.n	8004af0 <__libc_init_array+0x24>
 8004adc:	4d0b      	ldr	r5, [pc, #44]	; (8004b0c <__libc_init_array+0x40>)
 8004ade:	4c0c      	ldr	r4, [pc, #48]	; (8004b10 <__libc_init_array+0x44>)
 8004ae0:	f000 f818 	bl	8004b14 <_init>
 8004ae4:	1b64      	subs	r4, r4, r5
 8004ae6:	10a4      	asrs	r4, r4, #2
 8004ae8:	2600      	movs	r6, #0
 8004aea:	42a6      	cmp	r6, r4
 8004aec:	d105      	bne.n	8004afa <__libc_init_array+0x2e>
 8004aee:	bd70      	pop	{r4, r5, r6, pc}
 8004af0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004af4:	4798      	blx	r3
 8004af6:	3601      	adds	r6, #1
 8004af8:	e7ee      	b.n	8004ad8 <__libc_init_array+0xc>
 8004afa:	f855 3b04 	ldr.w	r3, [r5], #4
 8004afe:	4798      	blx	r3
 8004b00:	3601      	adds	r6, #1
 8004b02:	e7f2      	b.n	8004aea <__libc_init_array+0x1e>
 8004b04:	08004b6c 	.word	0x08004b6c
 8004b08:	08004b6c 	.word	0x08004b6c
 8004b0c:	08004b6c 	.word	0x08004b6c
 8004b10:	08004b70 	.word	0x08004b70

08004b14 <_init>:
 8004b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b16:	bf00      	nop
 8004b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b1a:	bc08      	pop	{r3}
 8004b1c:	469e      	mov	lr, r3
 8004b1e:	4770      	bx	lr

08004b20 <_fini>:
 8004b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b22:	bf00      	nop
 8004b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b26:	bc08      	pop	{r3}
 8004b28:	469e      	mov	lr, r3
 8004b2a:	4770      	bx	lr
