
15_SPI Slave Receiver_Polling Mode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f80  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800203c  0800203c  0001203c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800207c  0800207c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800207c  0800207c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800207c  0800207c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800207c  0800207c  0001207c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002080  08002080  00012080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002084  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  2000000c  08002090  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  08002090  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005b21  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001449  00000000  00000000  00025b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006c8  00000000  00000000  00026fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000510  00000000  00000000  000276b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014426  00000000  00000000  00027bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007ac1  00000000  00000000  0003bfe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00080c84  00000000  00000000  00043aa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000016e0  00000000  00000000  000c472c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000097  00000000  00000000  000c5e0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002024 	.word	0x08002024

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08002024 	.word	0x08002024

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000220:	f000 f984 	bl	800052c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000224:	f000 f816 	bl	8000254 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000228:	f000 f8ae 	bl	8000388 <MX_GPIO_Init>
  MX_SPI1_Init();
 800022c:	f000 f870 	bl	8000310 <MX_SPI1_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	HAL_SPI_Receive(&hspi1, Rx_Buffer, sizeof(Rx_Buffer),1000);
 8000230:	23fa      	movs	r3, #250	; 0xfa
 8000232:	009b      	lsls	r3, r3, #2
 8000234:	4905      	ldr	r1, [pc, #20]	; (800024c <main+0x30>)
 8000236:	4806      	ldr	r0, [pc, #24]	; (8000250 <main+0x34>)
 8000238:	220d      	movs	r2, #13
 800023a:	f001 f9d5 	bl	80015e8 <HAL_SPI_Receive>
	HAL_Delay(1000);
 800023e:	23fa      	movs	r3, #250	; 0xfa
 8000240:	009b      	lsls	r3, r3, #2
 8000242:	0018      	movs	r0, r3
 8000244:	f000 f9f8 	bl	8000638 <HAL_Delay>
	HAL_SPI_Receive(&hspi1, Rx_Buffer, sizeof(Rx_Buffer),1000);
 8000248:	e7f2      	b.n	8000230 <main+0x14>
 800024a:	46c0      	nop			; (mov r8, r8)
 800024c:	2000008c 	.word	0x2000008c
 8000250:	20000028 	.word	0x20000028

08000254 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000254:	b590      	push	{r4, r7, lr}
 8000256:	b093      	sub	sp, #76	; 0x4c
 8000258:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800025a:	2410      	movs	r4, #16
 800025c:	193b      	adds	r3, r7, r4
 800025e:	0018      	movs	r0, r3
 8000260:	2338      	movs	r3, #56	; 0x38
 8000262:	001a      	movs	r2, r3
 8000264:	2100      	movs	r1, #0
 8000266:	f001 feb1 	bl	8001fcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800026a:	003b      	movs	r3, r7
 800026c:	0018      	movs	r0, r3
 800026e:	2310      	movs	r3, #16
 8000270:	001a      	movs	r2, r3
 8000272:	2100      	movs	r1, #0
 8000274:	f001 feaa 	bl	8001fcc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000278:	2380      	movs	r3, #128	; 0x80
 800027a:	009b      	lsls	r3, r3, #2
 800027c:	0018      	movs	r0, r3
 800027e:	f000 fc17 	bl	8000ab0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000282:	193b      	adds	r3, r7, r4
 8000284:	2202      	movs	r2, #2
 8000286:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000288:	193b      	adds	r3, r7, r4
 800028a:	2280      	movs	r2, #128	; 0x80
 800028c:	0052      	lsls	r2, r2, #1
 800028e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000290:	0021      	movs	r1, r4
 8000292:	187b      	adds	r3, r7, r1
 8000294:	2200      	movs	r2, #0
 8000296:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000298:	187b      	adds	r3, r7, r1
 800029a:	2240      	movs	r2, #64	; 0x40
 800029c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800029e:	187b      	adds	r3, r7, r1
 80002a0:	2202      	movs	r2, #2
 80002a2:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002a4:	187b      	adds	r3, r7, r1
 80002a6:	2202      	movs	r2, #2
 80002a8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80002aa:	187b      	adds	r3, r7, r1
 80002ac:	2200      	movs	r2, #0
 80002ae:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 10;
 80002b0:	187b      	adds	r3, r7, r1
 80002b2:	220a      	movs	r2, #10
 80002b4:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002b6:	187b      	adds	r3, r7, r1
 80002b8:	2280      	movs	r2, #128	; 0x80
 80002ba:	0292      	lsls	r2, r2, #10
 80002bc:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002be:	187b      	adds	r3, r7, r1
 80002c0:	2280      	movs	r2, #128	; 0x80
 80002c2:	0492      	lsls	r2, r2, #18
 80002c4:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80002c6:	187b      	adds	r3, r7, r1
 80002c8:	22c0      	movs	r2, #192	; 0xc0
 80002ca:	05d2      	lsls	r2, r2, #23
 80002cc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ce:	187b      	adds	r3, r7, r1
 80002d0:	0018      	movs	r0, r3
 80002d2:	f000 fc2d 	bl	8000b30 <HAL_RCC_OscConfig>
 80002d6:	1e03      	subs	r3, r0, #0
 80002d8:	d001      	beq.n	80002de <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80002da:	f000 f86b 	bl	80003b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002de:	003b      	movs	r3, r7
 80002e0:	2207      	movs	r2, #7
 80002e2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002e4:	003b      	movs	r3, r7
 80002e6:	2202      	movs	r2, #2
 80002e8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ea:	003b      	movs	r3, r7
 80002ec:	2200      	movs	r2, #0
 80002ee:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002f0:	003b      	movs	r3, r7
 80002f2:	2200      	movs	r2, #0
 80002f4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002f6:	003b      	movs	r3, r7
 80002f8:	2101      	movs	r1, #1
 80002fa:	0018      	movs	r0, r3
 80002fc:	f000 ff32 	bl	8001164 <HAL_RCC_ClockConfig>
 8000300:	1e03      	subs	r3, r0, #0
 8000302:	d001      	beq.n	8000308 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000304:	f000 f856 	bl	80003b4 <Error_Handler>
  }
}
 8000308:	46c0      	nop			; (mov r8, r8)
 800030a:	46bd      	mov	sp, r7
 800030c:	b013      	add	sp, #76	; 0x4c
 800030e:	bd90      	pop	{r4, r7, pc}

08000310 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000314:	4b1a      	ldr	r3, [pc, #104]	; (8000380 <MX_SPI1_Init+0x70>)
 8000316:	4a1b      	ldr	r2, [pc, #108]	; (8000384 <MX_SPI1_Init+0x74>)
 8000318:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800031a:	4b19      	ldr	r3, [pc, #100]	; (8000380 <MX_SPI1_Init+0x70>)
 800031c:	2200      	movs	r2, #0
 800031e:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000320:	4b17      	ldr	r3, [pc, #92]	; (8000380 <MX_SPI1_Init+0x70>)
 8000322:	2280      	movs	r2, #128	; 0x80
 8000324:	00d2      	lsls	r2, r2, #3
 8000326:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000328:	4b15      	ldr	r3, [pc, #84]	; (8000380 <MX_SPI1_Init+0x70>)
 800032a:	22e0      	movs	r2, #224	; 0xe0
 800032c:	00d2      	lsls	r2, r2, #3
 800032e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000330:	4b13      	ldr	r3, [pc, #76]	; (8000380 <MX_SPI1_Init+0x70>)
 8000332:	2200      	movs	r2, #0
 8000334:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000336:	4b12      	ldr	r3, [pc, #72]	; (8000380 <MX_SPI1_Init+0x70>)
 8000338:	2200      	movs	r2, #0
 800033a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800033c:	4b10      	ldr	r3, [pc, #64]	; (8000380 <MX_SPI1_Init+0x70>)
 800033e:	2280      	movs	r2, #128	; 0x80
 8000340:	0092      	lsls	r2, r2, #2
 8000342:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000344:	4b0e      	ldr	r3, [pc, #56]	; (8000380 <MX_SPI1_Init+0x70>)
 8000346:	2200      	movs	r2, #0
 8000348:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800034a:	4b0d      	ldr	r3, [pc, #52]	; (8000380 <MX_SPI1_Init+0x70>)
 800034c:	2200      	movs	r2, #0
 800034e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000350:	4b0b      	ldr	r3, [pc, #44]	; (8000380 <MX_SPI1_Init+0x70>)
 8000352:	2200      	movs	r2, #0
 8000354:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000356:	4b0a      	ldr	r3, [pc, #40]	; (8000380 <MX_SPI1_Init+0x70>)
 8000358:	2207      	movs	r2, #7
 800035a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800035c:	4b08      	ldr	r3, [pc, #32]	; (8000380 <MX_SPI1_Init+0x70>)
 800035e:	2200      	movs	r2, #0
 8000360:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000362:	4b07      	ldr	r3, [pc, #28]	; (8000380 <MX_SPI1_Init+0x70>)
 8000364:	2200      	movs	r2, #0
 8000366:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000368:	4b05      	ldr	r3, [pc, #20]	; (8000380 <MX_SPI1_Init+0x70>)
 800036a:	0018      	movs	r0, r3
 800036c:	f001 f884 	bl	8001478 <HAL_SPI_Init>
 8000370:	1e03      	subs	r3, r0, #0
 8000372:	d001      	beq.n	8000378 <MX_SPI1_Init+0x68>
  {
    Error_Handler();
 8000374:	f000 f81e 	bl	80003b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000378:	46c0      	nop			; (mov r8, r8)
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	46c0      	nop			; (mov r8, r8)
 8000380:	20000028 	.word	0x20000028
 8000384:	40013000 	.word	0x40013000

08000388 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800038e:	4b08      	ldr	r3, [pc, #32]	; (80003b0 <MX_GPIO_Init+0x28>)
 8000390:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000392:	4b07      	ldr	r3, [pc, #28]	; (80003b0 <MX_GPIO_Init+0x28>)
 8000394:	2101      	movs	r1, #1
 8000396:	430a      	orrs	r2, r1
 8000398:	635a      	str	r2, [r3, #52]	; 0x34
 800039a:	4b05      	ldr	r3, [pc, #20]	; (80003b0 <MX_GPIO_Init+0x28>)
 800039c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800039e:	2201      	movs	r2, #1
 80003a0:	4013      	ands	r3, r2
 80003a2:	607b      	str	r3, [r7, #4]
 80003a4:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003a6:	46c0      	nop			; (mov r8, r8)
 80003a8:	46bd      	mov	sp, r7
 80003aa:	b002      	add	sp, #8
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	46c0      	nop			; (mov r8, r8)
 80003b0:	40021000 	.word	0x40021000

080003b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003b8:	b672      	cpsid	i
}
 80003ba:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003bc:	e7fe      	b.n	80003bc <Error_Handler+0x8>
	...

080003c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003c6:	4b0f      	ldr	r3, [pc, #60]	; (8000404 <HAL_MspInit+0x44>)
 80003c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80003ca:	4b0e      	ldr	r3, [pc, #56]	; (8000404 <HAL_MspInit+0x44>)
 80003cc:	2101      	movs	r1, #1
 80003ce:	430a      	orrs	r2, r1
 80003d0:	641a      	str	r2, [r3, #64]	; 0x40
 80003d2:	4b0c      	ldr	r3, [pc, #48]	; (8000404 <HAL_MspInit+0x44>)
 80003d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003d6:	2201      	movs	r2, #1
 80003d8:	4013      	ands	r3, r2
 80003da:	607b      	str	r3, [r7, #4]
 80003dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003de:	4b09      	ldr	r3, [pc, #36]	; (8000404 <HAL_MspInit+0x44>)
 80003e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80003e2:	4b08      	ldr	r3, [pc, #32]	; (8000404 <HAL_MspInit+0x44>)
 80003e4:	2180      	movs	r1, #128	; 0x80
 80003e6:	0549      	lsls	r1, r1, #21
 80003e8:	430a      	orrs	r2, r1
 80003ea:	63da      	str	r2, [r3, #60]	; 0x3c
 80003ec:	4b05      	ldr	r3, [pc, #20]	; (8000404 <HAL_MspInit+0x44>)
 80003ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80003f0:	2380      	movs	r3, #128	; 0x80
 80003f2:	055b      	lsls	r3, r3, #21
 80003f4:	4013      	ands	r3, r2
 80003f6:	603b      	str	r3, [r7, #0]
 80003f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003fa:	46c0      	nop			; (mov r8, r8)
 80003fc:	46bd      	mov	sp, r7
 80003fe:	b002      	add	sp, #8
 8000400:	bd80      	pop	{r7, pc}
 8000402:	46c0      	nop			; (mov r8, r8)
 8000404:	40021000 	.word	0x40021000

08000408 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000408:	b590      	push	{r4, r7, lr}
 800040a:	b08b      	sub	sp, #44	; 0x2c
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000410:	2414      	movs	r4, #20
 8000412:	193b      	adds	r3, r7, r4
 8000414:	0018      	movs	r0, r3
 8000416:	2314      	movs	r3, #20
 8000418:	001a      	movs	r2, r3
 800041a:	2100      	movs	r1, #0
 800041c:	f001 fdd6 	bl	8001fcc <memset>
  if(hspi->Instance==SPI1)
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	4a1b      	ldr	r2, [pc, #108]	; (8000494 <HAL_SPI_MspInit+0x8c>)
 8000426:	4293      	cmp	r3, r2
 8000428:	d130      	bne.n	800048c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800042a:	4b1b      	ldr	r3, [pc, #108]	; (8000498 <HAL_SPI_MspInit+0x90>)
 800042c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800042e:	4b1a      	ldr	r3, [pc, #104]	; (8000498 <HAL_SPI_MspInit+0x90>)
 8000430:	2180      	movs	r1, #128	; 0x80
 8000432:	0149      	lsls	r1, r1, #5
 8000434:	430a      	orrs	r2, r1
 8000436:	641a      	str	r2, [r3, #64]	; 0x40
 8000438:	4b17      	ldr	r3, [pc, #92]	; (8000498 <HAL_SPI_MspInit+0x90>)
 800043a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800043c:	2380      	movs	r3, #128	; 0x80
 800043e:	015b      	lsls	r3, r3, #5
 8000440:	4013      	ands	r3, r2
 8000442:	613b      	str	r3, [r7, #16]
 8000444:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000446:	4b14      	ldr	r3, [pc, #80]	; (8000498 <HAL_SPI_MspInit+0x90>)
 8000448:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800044a:	4b13      	ldr	r3, [pc, #76]	; (8000498 <HAL_SPI_MspInit+0x90>)
 800044c:	2101      	movs	r1, #1
 800044e:	430a      	orrs	r2, r1
 8000450:	635a      	str	r2, [r3, #52]	; 0x34
 8000452:	4b11      	ldr	r3, [pc, #68]	; (8000498 <HAL_SPI_MspInit+0x90>)
 8000454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000456:	2201      	movs	r2, #1
 8000458:	4013      	ands	r3, r2
 800045a:	60fb      	str	r3, [r7, #12]
 800045c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA12 [PA10]     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_12;
 800045e:	0021      	movs	r1, r4
 8000460:	187b      	adds	r3, r7, r1
 8000462:	4a0e      	ldr	r2, [pc, #56]	; (800049c <HAL_SPI_MspInit+0x94>)
 8000464:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000466:	187b      	adds	r3, r7, r1
 8000468:	2202      	movs	r2, #2
 800046a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800046c:	187b      	adds	r3, r7, r1
 800046e:	2200      	movs	r2, #0
 8000470:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000472:	187b      	adds	r3, r7, r1
 8000474:	2200      	movs	r2, #0
 8000476:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000478:	187b      	adds	r3, r7, r1
 800047a:	2200      	movs	r2, #0
 800047c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800047e:	187a      	adds	r2, r7, r1
 8000480:	23a0      	movs	r3, #160	; 0xa0
 8000482:	05db      	lsls	r3, r3, #23
 8000484:	0011      	movs	r1, r2
 8000486:	0018      	movs	r0, r3
 8000488:	f000 f9ae 	bl	80007e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800048c:	46c0      	nop			; (mov r8, r8)
 800048e:	46bd      	mov	sp, r7
 8000490:	b00b      	add	sp, #44	; 0x2c
 8000492:	bd90      	pop	{r4, r7, pc}
 8000494:	40013000 	.word	0x40013000
 8000498:	40021000 	.word	0x40021000
 800049c:	00001002 	.word	0x00001002

080004a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004a4:	e7fe      	b.n	80004a4 <NMI_Handler+0x4>

080004a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004a6:	b580      	push	{r7, lr}
 80004a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004aa:	e7fe      	b.n	80004aa <HardFault_Handler+0x4>

080004ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80004b0:	46c0      	nop			; (mov r8, r8)
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}

080004b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004b6:	b580      	push	{r7, lr}
 80004b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004ba:	46c0      	nop			; (mov r8, r8)
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}

080004c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004c4:	f000 f89c 	bl	8000600 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004c8:	46c0      	nop			; (mov r8, r8)
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}

080004ce <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004ce:	b580      	push	{r7, lr}
 80004d0:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004d2:	46c0      	nop			; (mov r8, r8)
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004d8:	480d      	ldr	r0, [pc, #52]	; (8000510 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004da:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80004dc:	f7ff fff7 	bl	80004ce <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004e0:	480c      	ldr	r0, [pc, #48]	; (8000514 <LoopForever+0x6>)
  ldr r1, =_edata
 80004e2:	490d      	ldr	r1, [pc, #52]	; (8000518 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004e4:	4a0d      	ldr	r2, [pc, #52]	; (800051c <LoopForever+0xe>)
  movs r3, #0
 80004e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004e8:	e002      	b.n	80004f0 <LoopCopyDataInit>

080004ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004ee:	3304      	adds	r3, #4

080004f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004f4:	d3f9      	bcc.n	80004ea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004f6:	4a0a      	ldr	r2, [pc, #40]	; (8000520 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004f8:	4c0a      	ldr	r4, [pc, #40]	; (8000524 <LoopForever+0x16>)
  movs r3, #0
 80004fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004fc:	e001      	b.n	8000502 <LoopFillZerobss>

080004fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000500:	3204      	adds	r2, #4

08000502 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000502:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000504:	d3fb      	bcc.n	80004fe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000506:	f001 fd69 	bl	8001fdc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800050a:	f7ff fe87 	bl	800021c <main>

0800050e <LoopForever>:

LoopForever:
  b LoopForever
 800050e:	e7fe      	b.n	800050e <LoopForever>
  ldr   r0, =_estack
 8000510:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000514:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000518:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800051c:	08002084 	.word	0x08002084
  ldr r2, =_sbss
 8000520:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000524:	200000a0 	.word	0x200000a0

08000528 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000528:	e7fe      	b.n	8000528 <ADC1_IRQHandler>
	...

0800052c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000532:	1dfb      	adds	r3, r7, #7
 8000534:	2200      	movs	r2, #0
 8000536:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000538:	4b0b      	ldr	r3, [pc, #44]	; (8000568 <HAL_Init+0x3c>)
 800053a:	681a      	ldr	r2, [r3, #0]
 800053c:	4b0a      	ldr	r3, [pc, #40]	; (8000568 <HAL_Init+0x3c>)
 800053e:	2180      	movs	r1, #128	; 0x80
 8000540:	0049      	lsls	r1, r1, #1
 8000542:	430a      	orrs	r2, r1
 8000544:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000546:	2003      	movs	r0, #3
 8000548:	f000 f810 	bl	800056c <HAL_InitTick>
 800054c:	1e03      	subs	r3, r0, #0
 800054e:	d003      	beq.n	8000558 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000550:	1dfb      	adds	r3, r7, #7
 8000552:	2201      	movs	r2, #1
 8000554:	701a      	strb	r2, [r3, #0]
 8000556:	e001      	b.n	800055c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000558:	f7ff ff32 	bl	80003c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800055c:	1dfb      	adds	r3, r7, #7
 800055e:	781b      	ldrb	r3, [r3, #0]
}
 8000560:	0018      	movs	r0, r3
 8000562:	46bd      	mov	sp, r7
 8000564:	b002      	add	sp, #8
 8000566:	bd80      	pop	{r7, pc}
 8000568:	40022000 	.word	0x40022000

0800056c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800056c:	b590      	push	{r4, r7, lr}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000574:	230f      	movs	r3, #15
 8000576:	18fb      	adds	r3, r7, r3
 8000578:	2200      	movs	r2, #0
 800057a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800057c:	4b1d      	ldr	r3, [pc, #116]	; (80005f4 <HAL_InitTick+0x88>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d02b      	beq.n	80005dc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000584:	4b1c      	ldr	r3, [pc, #112]	; (80005f8 <HAL_InitTick+0x8c>)
 8000586:	681c      	ldr	r4, [r3, #0]
 8000588:	4b1a      	ldr	r3, [pc, #104]	; (80005f4 <HAL_InitTick+0x88>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	0019      	movs	r1, r3
 800058e:	23fa      	movs	r3, #250	; 0xfa
 8000590:	0098      	lsls	r0, r3, #2
 8000592:	f7ff fdb7 	bl	8000104 <__udivsi3>
 8000596:	0003      	movs	r3, r0
 8000598:	0019      	movs	r1, r3
 800059a:	0020      	movs	r0, r4
 800059c:	f7ff fdb2 	bl	8000104 <__udivsi3>
 80005a0:	0003      	movs	r3, r0
 80005a2:	0018      	movs	r0, r3
 80005a4:	f000 f913 	bl	80007ce <HAL_SYSTICK_Config>
 80005a8:	1e03      	subs	r3, r0, #0
 80005aa:	d112      	bne.n	80005d2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2b03      	cmp	r3, #3
 80005b0:	d80a      	bhi.n	80005c8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005b2:	6879      	ldr	r1, [r7, #4]
 80005b4:	2301      	movs	r3, #1
 80005b6:	425b      	negs	r3, r3
 80005b8:	2200      	movs	r2, #0
 80005ba:	0018      	movs	r0, r3
 80005bc:	f000 f8f2 	bl	80007a4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005c0:	4b0e      	ldr	r3, [pc, #56]	; (80005fc <HAL_InitTick+0x90>)
 80005c2:	687a      	ldr	r2, [r7, #4]
 80005c4:	601a      	str	r2, [r3, #0]
 80005c6:	e00d      	b.n	80005e4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80005c8:	230f      	movs	r3, #15
 80005ca:	18fb      	adds	r3, r7, r3
 80005cc:	2201      	movs	r2, #1
 80005ce:	701a      	strb	r2, [r3, #0]
 80005d0:	e008      	b.n	80005e4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80005d2:	230f      	movs	r3, #15
 80005d4:	18fb      	adds	r3, r7, r3
 80005d6:	2201      	movs	r2, #1
 80005d8:	701a      	strb	r2, [r3, #0]
 80005da:	e003      	b.n	80005e4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80005dc:	230f      	movs	r3, #15
 80005de:	18fb      	adds	r3, r7, r3
 80005e0:	2201      	movs	r2, #1
 80005e2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80005e4:	230f      	movs	r3, #15
 80005e6:	18fb      	adds	r3, r7, r3
 80005e8:	781b      	ldrb	r3, [r3, #0]
}
 80005ea:	0018      	movs	r0, r3
 80005ec:	46bd      	mov	sp, r7
 80005ee:	b005      	add	sp, #20
 80005f0:	bd90      	pop	{r4, r7, pc}
 80005f2:	46c0      	nop			; (mov r8, r8)
 80005f4:	20000008 	.word	0x20000008
 80005f8:	20000000 	.word	0x20000000
 80005fc:	20000004 	.word	0x20000004

08000600 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000604:	4b05      	ldr	r3, [pc, #20]	; (800061c <HAL_IncTick+0x1c>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	001a      	movs	r2, r3
 800060a:	4b05      	ldr	r3, [pc, #20]	; (8000620 <HAL_IncTick+0x20>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	18d2      	adds	r2, r2, r3
 8000610:	4b03      	ldr	r3, [pc, #12]	; (8000620 <HAL_IncTick+0x20>)
 8000612:	601a      	str	r2, [r3, #0]
}
 8000614:	46c0      	nop			; (mov r8, r8)
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	20000008 	.word	0x20000008
 8000620:	2000009c 	.word	0x2000009c

08000624 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  return uwTick;
 8000628:	4b02      	ldr	r3, [pc, #8]	; (8000634 <HAL_GetTick+0x10>)
 800062a:	681b      	ldr	r3, [r3, #0]
}
 800062c:	0018      	movs	r0, r3
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	2000009c 	.word	0x2000009c

08000638 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000640:	f7ff fff0 	bl	8000624 <HAL_GetTick>
 8000644:	0003      	movs	r3, r0
 8000646:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	3301      	adds	r3, #1
 8000650:	d005      	beq.n	800065e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000652:	4b0a      	ldr	r3, [pc, #40]	; (800067c <HAL_Delay+0x44>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	001a      	movs	r2, r3
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	189b      	adds	r3, r3, r2
 800065c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800065e:	46c0      	nop			; (mov r8, r8)
 8000660:	f7ff ffe0 	bl	8000624 <HAL_GetTick>
 8000664:	0002      	movs	r2, r0
 8000666:	68bb      	ldr	r3, [r7, #8]
 8000668:	1ad3      	subs	r3, r2, r3
 800066a:	68fa      	ldr	r2, [r7, #12]
 800066c:	429a      	cmp	r2, r3
 800066e:	d8f7      	bhi.n	8000660 <HAL_Delay+0x28>
  {
  }
}
 8000670:	46c0      	nop			; (mov r8, r8)
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	46bd      	mov	sp, r7
 8000676:	b004      	add	sp, #16
 8000678:	bd80      	pop	{r7, pc}
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	20000008 	.word	0x20000008

08000680 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000680:	b590      	push	{r4, r7, lr}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	0002      	movs	r2, r0
 8000688:	6039      	str	r1, [r7, #0]
 800068a:	1dfb      	adds	r3, r7, #7
 800068c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800068e:	1dfb      	adds	r3, r7, #7
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	2b7f      	cmp	r3, #127	; 0x7f
 8000694:	d828      	bhi.n	80006e8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000696:	4a2f      	ldr	r2, [pc, #188]	; (8000754 <__NVIC_SetPriority+0xd4>)
 8000698:	1dfb      	adds	r3, r7, #7
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	b25b      	sxtb	r3, r3
 800069e:	089b      	lsrs	r3, r3, #2
 80006a0:	33c0      	adds	r3, #192	; 0xc0
 80006a2:	009b      	lsls	r3, r3, #2
 80006a4:	589b      	ldr	r3, [r3, r2]
 80006a6:	1dfa      	adds	r2, r7, #7
 80006a8:	7812      	ldrb	r2, [r2, #0]
 80006aa:	0011      	movs	r1, r2
 80006ac:	2203      	movs	r2, #3
 80006ae:	400a      	ands	r2, r1
 80006b0:	00d2      	lsls	r2, r2, #3
 80006b2:	21ff      	movs	r1, #255	; 0xff
 80006b4:	4091      	lsls	r1, r2
 80006b6:	000a      	movs	r2, r1
 80006b8:	43d2      	mvns	r2, r2
 80006ba:	401a      	ands	r2, r3
 80006bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	019b      	lsls	r3, r3, #6
 80006c2:	22ff      	movs	r2, #255	; 0xff
 80006c4:	401a      	ands	r2, r3
 80006c6:	1dfb      	adds	r3, r7, #7
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	0018      	movs	r0, r3
 80006cc:	2303      	movs	r3, #3
 80006ce:	4003      	ands	r3, r0
 80006d0:	00db      	lsls	r3, r3, #3
 80006d2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006d4:	481f      	ldr	r0, [pc, #124]	; (8000754 <__NVIC_SetPriority+0xd4>)
 80006d6:	1dfb      	adds	r3, r7, #7
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	b25b      	sxtb	r3, r3
 80006dc:	089b      	lsrs	r3, r3, #2
 80006de:	430a      	orrs	r2, r1
 80006e0:	33c0      	adds	r3, #192	; 0xc0
 80006e2:	009b      	lsls	r3, r3, #2
 80006e4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80006e6:	e031      	b.n	800074c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006e8:	4a1b      	ldr	r2, [pc, #108]	; (8000758 <__NVIC_SetPriority+0xd8>)
 80006ea:	1dfb      	adds	r3, r7, #7
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	0019      	movs	r1, r3
 80006f0:	230f      	movs	r3, #15
 80006f2:	400b      	ands	r3, r1
 80006f4:	3b08      	subs	r3, #8
 80006f6:	089b      	lsrs	r3, r3, #2
 80006f8:	3306      	adds	r3, #6
 80006fa:	009b      	lsls	r3, r3, #2
 80006fc:	18d3      	adds	r3, r2, r3
 80006fe:	3304      	adds	r3, #4
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	1dfa      	adds	r2, r7, #7
 8000704:	7812      	ldrb	r2, [r2, #0]
 8000706:	0011      	movs	r1, r2
 8000708:	2203      	movs	r2, #3
 800070a:	400a      	ands	r2, r1
 800070c:	00d2      	lsls	r2, r2, #3
 800070e:	21ff      	movs	r1, #255	; 0xff
 8000710:	4091      	lsls	r1, r2
 8000712:	000a      	movs	r2, r1
 8000714:	43d2      	mvns	r2, r2
 8000716:	401a      	ands	r2, r3
 8000718:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	019b      	lsls	r3, r3, #6
 800071e:	22ff      	movs	r2, #255	; 0xff
 8000720:	401a      	ands	r2, r3
 8000722:	1dfb      	adds	r3, r7, #7
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	0018      	movs	r0, r3
 8000728:	2303      	movs	r3, #3
 800072a:	4003      	ands	r3, r0
 800072c:	00db      	lsls	r3, r3, #3
 800072e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000730:	4809      	ldr	r0, [pc, #36]	; (8000758 <__NVIC_SetPriority+0xd8>)
 8000732:	1dfb      	adds	r3, r7, #7
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	001c      	movs	r4, r3
 8000738:	230f      	movs	r3, #15
 800073a:	4023      	ands	r3, r4
 800073c:	3b08      	subs	r3, #8
 800073e:	089b      	lsrs	r3, r3, #2
 8000740:	430a      	orrs	r2, r1
 8000742:	3306      	adds	r3, #6
 8000744:	009b      	lsls	r3, r3, #2
 8000746:	18c3      	adds	r3, r0, r3
 8000748:	3304      	adds	r3, #4
 800074a:	601a      	str	r2, [r3, #0]
}
 800074c:	46c0      	nop			; (mov r8, r8)
 800074e:	46bd      	mov	sp, r7
 8000750:	b003      	add	sp, #12
 8000752:	bd90      	pop	{r4, r7, pc}
 8000754:	e000e100 	.word	0xe000e100
 8000758:	e000ed00 	.word	0xe000ed00

0800075c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	1e5a      	subs	r2, r3, #1
 8000768:	2380      	movs	r3, #128	; 0x80
 800076a:	045b      	lsls	r3, r3, #17
 800076c:	429a      	cmp	r2, r3
 800076e:	d301      	bcc.n	8000774 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000770:	2301      	movs	r3, #1
 8000772:	e010      	b.n	8000796 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000774:	4b0a      	ldr	r3, [pc, #40]	; (80007a0 <SysTick_Config+0x44>)
 8000776:	687a      	ldr	r2, [r7, #4]
 8000778:	3a01      	subs	r2, #1
 800077a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800077c:	2301      	movs	r3, #1
 800077e:	425b      	negs	r3, r3
 8000780:	2103      	movs	r1, #3
 8000782:	0018      	movs	r0, r3
 8000784:	f7ff ff7c 	bl	8000680 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000788:	4b05      	ldr	r3, [pc, #20]	; (80007a0 <SysTick_Config+0x44>)
 800078a:	2200      	movs	r2, #0
 800078c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800078e:	4b04      	ldr	r3, [pc, #16]	; (80007a0 <SysTick_Config+0x44>)
 8000790:	2207      	movs	r2, #7
 8000792:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000794:	2300      	movs	r3, #0
}
 8000796:	0018      	movs	r0, r3
 8000798:	46bd      	mov	sp, r7
 800079a:	b002      	add	sp, #8
 800079c:	bd80      	pop	{r7, pc}
 800079e:	46c0      	nop			; (mov r8, r8)
 80007a0:	e000e010 	.word	0xe000e010

080007a4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	60b9      	str	r1, [r7, #8]
 80007ac:	607a      	str	r2, [r7, #4]
 80007ae:	210f      	movs	r1, #15
 80007b0:	187b      	adds	r3, r7, r1
 80007b2:	1c02      	adds	r2, r0, #0
 80007b4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80007b6:	68ba      	ldr	r2, [r7, #8]
 80007b8:	187b      	adds	r3, r7, r1
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	b25b      	sxtb	r3, r3
 80007be:	0011      	movs	r1, r2
 80007c0:	0018      	movs	r0, r3
 80007c2:	f7ff ff5d 	bl	8000680 <__NVIC_SetPriority>
}
 80007c6:	46c0      	nop			; (mov r8, r8)
 80007c8:	46bd      	mov	sp, r7
 80007ca:	b004      	add	sp, #16
 80007cc:	bd80      	pop	{r7, pc}

080007ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007ce:	b580      	push	{r7, lr}
 80007d0:	b082      	sub	sp, #8
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	0018      	movs	r0, r3
 80007da:	f7ff ffbf 	bl	800075c <SysTick_Config>
 80007de:	0003      	movs	r3, r0
}
 80007e0:	0018      	movs	r0, r3
 80007e2:	46bd      	mov	sp, r7
 80007e4:	b002      	add	sp, #8
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b086      	sub	sp, #24
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007f2:	2300      	movs	r3, #0
 80007f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007f6:	e147      	b.n	8000a88 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	2101      	movs	r1, #1
 80007fe:	697a      	ldr	r2, [r7, #20]
 8000800:	4091      	lsls	r1, r2
 8000802:	000a      	movs	r2, r1
 8000804:	4013      	ands	r3, r2
 8000806:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d100      	bne.n	8000810 <HAL_GPIO_Init+0x28>
 800080e:	e138      	b.n	8000a82 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	685b      	ldr	r3, [r3, #4]
 8000814:	2203      	movs	r2, #3
 8000816:	4013      	ands	r3, r2
 8000818:	2b01      	cmp	r3, #1
 800081a:	d005      	beq.n	8000828 <HAL_GPIO_Init+0x40>
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	685b      	ldr	r3, [r3, #4]
 8000820:	2203      	movs	r2, #3
 8000822:	4013      	ands	r3, r2
 8000824:	2b02      	cmp	r3, #2
 8000826:	d130      	bne.n	800088a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	689b      	ldr	r3, [r3, #8]
 800082c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800082e:	697b      	ldr	r3, [r7, #20]
 8000830:	005b      	lsls	r3, r3, #1
 8000832:	2203      	movs	r2, #3
 8000834:	409a      	lsls	r2, r3
 8000836:	0013      	movs	r3, r2
 8000838:	43da      	mvns	r2, r3
 800083a:	693b      	ldr	r3, [r7, #16]
 800083c:	4013      	ands	r3, r2
 800083e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	68da      	ldr	r2, [r3, #12]
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	005b      	lsls	r3, r3, #1
 8000848:	409a      	lsls	r2, r3
 800084a:	0013      	movs	r3, r2
 800084c:	693a      	ldr	r2, [r7, #16]
 800084e:	4313      	orrs	r3, r2
 8000850:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	693a      	ldr	r2, [r7, #16]
 8000856:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800085e:	2201      	movs	r2, #1
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	409a      	lsls	r2, r3
 8000864:	0013      	movs	r3, r2
 8000866:	43da      	mvns	r2, r3
 8000868:	693b      	ldr	r3, [r7, #16]
 800086a:	4013      	ands	r3, r2
 800086c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	685b      	ldr	r3, [r3, #4]
 8000872:	091b      	lsrs	r3, r3, #4
 8000874:	2201      	movs	r2, #1
 8000876:	401a      	ands	r2, r3
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	409a      	lsls	r2, r3
 800087c:	0013      	movs	r3, r2
 800087e:	693a      	ldr	r2, [r7, #16]
 8000880:	4313      	orrs	r3, r2
 8000882:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	693a      	ldr	r2, [r7, #16]
 8000888:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	685b      	ldr	r3, [r3, #4]
 800088e:	2203      	movs	r2, #3
 8000890:	4013      	ands	r3, r2
 8000892:	2b03      	cmp	r3, #3
 8000894:	d017      	beq.n	80008c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	68db      	ldr	r3, [r3, #12]
 800089a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	005b      	lsls	r3, r3, #1
 80008a0:	2203      	movs	r2, #3
 80008a2:	409a      	lsls	r2, r3
 80008a4:	0013      	movs	r3, r2
 80008a6:	43da      	mvns	r2, r3
 80008a8:	693b      	ldr	r3, [r7, #16]
 80008aa:	4013      	ands	r3, r2
 80008ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	689a      	ldr	r2, [r3, #8]
 80008b2:	697b      	ldr	r3, [r7, #20]
 80008b4:	005b      	lsls	r3, r3, #1
 80008b6:	409a      	lsls	r2, r3
 80008b8:	0013      	movs	r3, r2
 80008ba:	693a      	ldr	r2, [r7, #16]
 80008bc:	4313      	orrs	r3, r2
 80008be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	693a      	ldr	r2, [r7, #16]
 80008c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	685b      	ldr	r3, [r3, #4]
 80008ca:	2203      	movs	r2, #3
 80008cc:	4013      	ands	r3, r2
 80008ce:	2b02      	cmp	r3, #2
 80008d0:	d123      	bne.n	800091a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80008d2:	697b      	ldr	r3, [r7, #20]
 80008d4:	08da      	lsrs	r2, r3, #3
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	3208      	adds	r2, #8
 80008da:	0092      	lsls	r2, r2, #2
 80008dc:	58d3      	ldr	r3, [r2, r3]
 80008de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	2207      	movs	r2, #7
 80008e4:	4013      	ands	r3, r2
 80008e6:	009b      	lsls	r3, r3, #2
 80008e8:	220f      	movs	r2, #15
 80008ea:	409a      	lsls	r2, r3
 80008ec:	0013      	movs	r3, r2
 80008ee:	43da      	mvns	r2, r3
 80008f0:	693b      	ldr	r3, [r7, #16]
 80008f2:	4013      	ands	r3, r2
 80008f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	691a      	ldr	r2, [r3, #16]
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	2107      	movs	r1, #7
 80008fe:	400b      	ands	r3, r1
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	409a      	lsls	r2, r3
 8000904:	0013      	movs	r3, r2
 8000906:	693a      	ldr	r2, [r7, #16]
 8000908:	4313      	orrs	r3, r2
 800090a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	08da      	lsrs	r2, r3, #3
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	3208      	adds	r2, #8
 8000914:	0092      	lsls	r2, r2, #2
 8000916:	6939      	ldr	r1, [r7, #16]
 8000918:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	005b      	lsls	r3, r3, #1
 8000924:	2203      	movs	r2, #3
 8000926:	409a      	lsls	r2, r3
 8000928:	0013      	movs	r3, r2
 800092a:	43da      	mvns	r2, r3
 800092c:	693b      	ldr	r3, [r7, #16]
 800092e:	4013      	ands	r3, r2
 8000930:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	685b      	ldr	r3, [r3, #4]
 8000936:	2203      	movs	r2, #3
 8000938:	401a      	ands	r2, r3
 800093a:	697b      	ldr	r3, [r7, #20]
 800093c:	005b      	lsls	r3, r3, #1
 800093e:	409a      	lsls	r2, r3
 8000940:	0013      	movs	r3, r2
 8000942:	693a      	ldr	r2, [r7, #16]
 8000944:	4313      	orrs	r3, r2
 8000946:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	693a      	ldr	r2, [r7, #16]
 800094c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	685a      	ldr	r2, [r3, #4]
 8000952:	23c0      	movs	r3, #192	; 0xc0
 8000954:	029b      	lsls	r3, r3, #10
 8000956:	4013      	ands	r3, r2
 8000958:	d100      	bne.n	800095c <HAL_GPIO_Init+0x174>
 800095a:	e092      	b.n	8000a82 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800095c:	4a50      	ldr	r2, [pc, #320]	; (8000aa0 <HAL_GPIO_Init+0x2b8>)
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	089b      	lsrs	r3, r3, #2
 8000962:	3318      	adds	r3, #24
 8000964:	009b      	lsls	r3, r3, #2
 8000966:	589b      	ldr	r3, [r3, r2]
 8000968:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800096a:	697b      	ldr	r3, [r7, #20]
 800096c:	2203      	movs	r2, #3
 800096e:	4013      	ands	r3, r2
 8000970:	00db      	lsls	r3, r3, #3
 8000972:	220f      	movs	r2, #15
 8000974:	409a      	lsls	r2, r3
 8000976:	0013      	movs	r3, r2
 8000978:	43da      	mvns	r2, r3
 800097a:	693b      	ldr	r3, [r7, #16]
 800097c:	4013      	ands	r3, r2
 800097e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000980:	687a      	ldr	r2, [r7, #4]
 8000982:	23a0      	movs	r3, #160	; 0xa0
 8000984:	05db      	lsls	r3, r3, #23
 8000986:	429a      	cmp	r2, r3
 8000988:	d013      	beq.n	80009b2 <HAL_GPIO_Init+0x1ca>
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4a45      	ldr	r2, [pc, #276]	; (8000aa4 <HAL_GPIO_Init+0x2bc>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d00d      	beq.n	80009ae <HAL_GPIO_Init+0x1c6>
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4a44      	ldr	r2, [pc, #272]	; (8000aa8 <HAL_GPIO_Init+0x2c0>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d007      	beq.n	80009aa <HAL_GPIO_Init+0x1c2>
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4a43      	ldr	r2, [pc, #268]	; (8000aac <HAL_GPIO_Init+0x2c4>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d101      	bne.n	80009a6 <HAL_GPIO_Init+0x1be>
 80009a2:	2303      	movs	r3, #3
 80009a4:	e006      	b.n	80009b4 <HAL_GPIO_Init+0x1cc>
 80009a6:	2305      	movs	r3, #5
 80009a8:	e004      	b.n	80009b4 <HAL_GPIO_Init+0x1cc>
 80009aa:	2302      	movs	r3, #2
 80009ac:	e002      	b.n	80009b4 <HAL_GPIO_Init+0x1cc>
 80009ae:	2301      	movs	r3, #1
 80009b0:	e000      	b.n	80009b4 <HAL_GPIO_Init+0x1cc>
 80009b2:	2300      	movs	r3, #0
 80009b4:	697a      	ldr	r2, [r7, #20]
 80009b6:	2103      	movs	r1, #3
 80009b8:	400a      	ands	r2, r1
 80009ba:	00d2      	lsls	r2, r2, #3
 80009bc:	4093      	lsls	r3, r2
 80009be:	693a      	ldr	r2, [r7, #16]
 80009c0:	4313      	orrs	r3, r2
 80009c2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80009c4:	4936      	ldr	r1, [pc, #216]	; (8000aa0 <HAL_GPIO_Init+0x2b8>)
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	089b      	lsrs	r3, r3, #2
 80009ca:	3318      	adds	r3, #24
 80009cc:	009b      	lsls	r3, r3, #2
 80009ce:	693a      	ldr	r2, [r7, #16]
 80009d0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80009d2:	4b33      	ldr	r3, [pc, #204]	; (8000aa0 <HAL_GPIO_Init+0x2b8>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	43da      	mvns	r2, r3
 80009dc:	693b      	ldr	r3, [r7, #16]
 80009de:	4013      	ands	r3, r2
 80009e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	685a      	ldr	r2, [r3, #4]
 80009e6:	2380      	movs	r3, #128	; 0x80
 80009e8:	035b      	lsls	r3, r3, #13
 80009ea:	4013      	ands	r3, r2
 80009ec:	d003      	beq.n	80009f6 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80009ee:	693a      	ldr	r2, [r7, #16]
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	4313      	orrs	r3, r2
 80009f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80009f6:	4b2a      	ldr	r3, [pc, #168]	; (8000aa0 <HAL_GPIO_Init+0x2b8>)
 80009f8:	693a      	ldr	r2, [r7, #16]
 80009fa:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80009fc:	4b28      	ldr	r3, [pc, #160]	; (8000aa0 <HAL_GPIO_Init+0x2b8>)
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	43da      	mvns	r2, r3
 8000a06:	693b      	ldr	r3, [r7, #16]
 8000a08:	4013      	ands	r3, r2
 8000a0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	685a      	ldr	r2, [r3, #4]
 8000a10:	2380      	movs	r3, #128	; 0x80
 8000a12:	039b      	lsls	r3, r3, #14
 8000a14:	4013      	ands	r3, r2
 8000a16:	d003      	beq.n	8000a20 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000a18:	693a      	ldr	r2, [r7, #16]
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	4313      	orrs	r3, r2
 8000a1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000a20:	4b1f      	ldr	r3, [pc, #124]	; (8000aa0 <HAL_GPIO_Init+0x2b8>)
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000a26:	4a1e      	ldr	r2, [pc, #120]	; (8000aa0 <HAL_GPIO_Init+0x2b8>)
 8000a28:	2384      	movs	r3, #132	; 0x84
 8000a2a:	58d3      	ldr	r3, [r2, r3]
 8000a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	43da      	mvns	r2, r3
 8000a32:	693b      	ldr	r3, [r7, #16]
 8000a34:	4013      	ands	r3, r2
 8000a36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	685a      	ldr	r2, [r3, #4]
 8000a3c:	2380      	movs	r3, #128	; 0x80
 8000a3e:	029b      	lsls	r3, r3, #10
 8000a40:	4013      	ands	r3, r2
 8000a42:	d003      	beq.n	8000a4c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000a44:	693a      	ldr	r2, [r7, #16]
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000a4c:	4914      	ldr	r1, [pc, #80]	; (8000aa0 <HAL_GPIO_Init+0x2b8>)
 8000a4e:	2284      	movs	r2, #132	; 0x84
 8000a50:	693b      	ldr	r3, [r7, #16]
 8000a52:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000a54:	4a12      	ldr	r2, [pc, #72]	; (8000aa0 <HAL_GPIO_Init+0x2b8>)
 8000a56:	2380      	movs	r3, #128	; 0x80
 8000a58:	58d3      	ldr	r3, [r2, r3]
 8000a5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	43da      	mvns	r2, r3
 8000a60:	693b      	ldr	r3, [r7, #16]
 8000a62:	4013      	ands	r3, r2
 8000a64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	685a      	ldr	r2, [r3, #4]
 8000a6a:	2380      	movs	r3, #128	; 0x80
 8000a6c:	025b      	lsls	r3, r3, #9
 8000a6e:	4013      	ands	r3, r2
 8000a70:	d003      	beq.n	8000a7a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000a72:	693a      	ldr	r2, [r7, #16]
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	4313      	orrs	r3, r2
 8000a78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000a7a:	4909      	ldr	r1, [pc, #36]	; (8000aa0 <HAL_GPIO_Init+0x2b8>)
 8000a7c:	2280      	movs	r2, #128	; 0x80
 8000a7e:	693b      	ldr	r3, [r7, #16]
 8000a80:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	3301      	adds	r3, #1
 8000a86:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	40da      	lsrs	r2, r3
 8000a90:	1e13      	subs	r3, r2, #0
 8000a92:	d000      	beq.n	8000a96 <HAL_GPIO_Init+0x2ae>
 8000a94:	e6b0      	b.n	80007f8 <HAL_GPIO_Init+0x10>
  }
}
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	46c0      	nop			; (mov r8, r8)
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	b006      	add	sp, #24
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40021800 	.word	0x40021800
 8000aa4:	50000400 	.word	0x50000400
 8000aa8:	50000800 	.word	0x50000800
 8000aac:	50000c00 	.word	0x50000c00

08000ab0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000ab8:	4b19      	ldr	r3, [pc, #100]	; (8000b20 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a19      	ldr	r2, [pc, #100]	; (8000b24 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000abe:	4013      	ands	r3, r2
 8000ac0:	0019      	movs	r1, r3
 8000ac2:	4b17      	ldr	r3, [pc, #92]	; (8000b20 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000ac4:	687a      	ldr	r2, [r7, #4]
 8000ac6:	430a      	orrs	r2, r1
 8000ac8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000aca:	687a      	ldr	r2, [r7, #4]
 8000acc:	2380      	movs	r3, #128	; 0x80
 8000ace:	009b      	lsls	r3, r3, #2
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	d11f      	bne.n	8000b14 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000ad4:	4b14      	ldr	r3, [pc, #80]	; (8000b28 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	0013      	movs	r3, r2
 8000ada:	005b      	lsls	r3, r3, #1
 8000adc:	189b      	adds	r3, r3, r2
 8000ade:	005b      	lsls	r3, r3, #1
 8000ae0:	4912      	ldr	r1, [pc, #72]	; (8000b2c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	f7ff fb0e 	bl	8000104 <__udivsi3>
 8000ae8:	0003      	movs	r3, r0
 8000aea:	3301      	adds	r3, #1
 8000aec:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000aee:	e008      	b.n	8000b02 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d003      	beq.n	8000afe <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	3b01      	subs	r3, #1
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	e001      	b.n	8000b02 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8000afe:	2303      	movs	r3, #3
 8000b00:	e009      	b.n	8000b16 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000b02:	4b07      	ldr	r3, [pc, #28]	; (8000b20 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000b04:	695a      	ldr	r2, [r3, #20]
 8000b06:	2380      	movs	r3, #128	; 0x80
 8000b08:	00db      	lsls	r3, r3, #3
 8000b0a:	401a      	ands	r2, r3
 8000b0c:	2380      	movs	r3, #128	; 0x80
 8000b0e:	00db      	lsls	r3, r3, #3
 8000b10:	429a      	cmp	r2, r3
 8000b12:	d0ed      	beq.n	8000af0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8000b14:	2300      	movs	r3, #0
}
 8000b16:	0018      	movs	r0, r3
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	b004      	add	sp, #16
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	46c0      	nop			; (mov r8, r8)
 8000b20:	40007000 	.word	0x40007000
 8000b24:	fffff9ff 	.word	0xfffff9ff
 8000b28:	20000000 	.word	0x20000000
 8000b2c:	000f4240 	.word	0x000f4240

08000b30 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b088      	sub	sp, #32
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d101      	bne.n	8000b42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e2fe      	b.n	8001140 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	2201      	movs	r2, #1
 8000b48:	4013      	ands	r3, r2
 8000b4a:	d100      	bne.n	8000b4e <HAL_RCC_OscConfig+0x1e>
 8000b4c:	e07c      	b.n	8000c48 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000b4e:	4bc3      	ldr	r3, [pc, #780]	; (8000e5c <HAL_RCC_OscConfig+0x32c>)
 8000b50:	689b      	ldr	r3, [r3, #8]
 8000b52:	2238      	movs	r2, #56	; 0x38
 8000b54:	4013      	ands	r3, r2
 8000b56:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000b58:	4bc0      	ldr	r3, [pc, #768]	; (8000e5c <HAL_RCC_OscConfig+0x32c>)
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	2203      	movs	r2, #3
 8000b5e:	4013      	ands	r3, r2
 8000b60:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8000b62:	69bb      	ldr	r3, [r7, #24]
 8000b64:	2b10      	cmp	r3, #16
 8000b66:	d102      	bne.n	8000b6e <HAL_RCC_OscConfig+0x3e>
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	2b03      	cmp	r3, #3
 8000b6c:	d002      	beq.n	8000b74 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8000b6e:	69bb      	ldr	r3, [r7, #24]
 8000b70:	2b08      	cmp	r3, #8
 8000b72:	d10b      	bne.n	8000b8c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b74:	4bb9      	ldr	r3, [pc, #740]	; (8000e5c <HAL_RCC_OscConfig+0x32c>)
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	2380      	movs	r3, #128	; 0x80
 8000b7a:	029b      	lsls	r3, r3, #10
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	d062      	beq.n	8000c46 <HAL_RCC_OscConfig+0x116>
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d15e      	bne.n	8000c46 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	e2d9      	b.n	8001140 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	685a      	ldr	r2, [r3, #4]
 8000b90:	2380      	movs	r3, #128	; 0x80
 8000b92:	025b      	lsls	r3, r3, #9
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d107      	bne.n	8000ba8 <HAL_RCC_OscConfig+0x78>
 8000b98:	4bb0      	ldr	r3, [pc, #704]	; (8000e5c <HAL_RCC_OscConfig+0x32c>)
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	4baf      	ldr	r3, [pc, #700]	; (8000e5c <HAL_RCC_OscConfig+0x32c>)
 8000b9e:	2180      	movs	r1, #128	; 0x80
 8000ba0:	0249      	lsls	r1, r1, #9
 8000ba2:	430a      	orrs	r2, r1
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	e020      	b.n	8000bea <HAL_RCC_OscConfig+0xba>
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	685a      	ldr	r2, [r3, #4]
 8000bac:	23a0      	movs	r3, #160	; 0xa0
 8000bae:	02db      	lsls	r3, r3, #11
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	d10e      	bne.n	8000bd2 <HAL_RCC_OscConfig+0xa2>
 8000bb4:	4ba9      	ldr	r3, [pc, #676]	; (8000e5c <HAL_RCC_OscConfig+0x32c>)
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	4ba8      	ldr	r3, [pc, #672]	; (8000e5c <HAL_RCC_OscConfig+0x32c>)
 8000bba:	2180      	movs	r1, #128	; 0x80
 8000bbc:	02c9      	lsls	r1, r1, #11
 8000bbe:	430a      	orrs	r2, r1
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	4ba6      	ldr	r3, [pc, #664]	; (8000e5c <HAL_RCC_OscConfig+0x32c>)
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	4ba5      	ldr	r3, [pc, #660]	; (8000e5c <HAL_RCC_OscConfig+0x32c>)
 8000bc8:	2180      	movs	r1, #128	; 0x80
 8000bca:	0249      	lsls	r1, r1, #9
 8000bcc:	430a      	orrs	r2, r1
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	e00b      	b.n	8000bea <HAL_RCC_OscConfig+0xba>
 8000bd2:	4ba2      	ldr	r3, [pc, #648]	; (8000e5c <HAL_RCC_OscConfig+0x32c>)
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	4ba1      	ldr	r3, [pc, #644]	; (8000e5c <HAL_RCC_OscConfig+0x32c>)
 8000bd8:	49a1      	ldr	r1, [pc, #644]	; (8000e60 <HAL_RCC_OscConfig+0x330>)
 8000bda:	400a      	ands	r2, r1
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	4b9f      	ldr	r3, [pc, #636]	; (8000e5c <HAL_RCC_OscConfig+0x32c>)
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	4b9e      	ldr	r3, [pc, #632]	; (8000e5c <HAL_RCC_OscConfig+0x32c>)
 8000be4:	499f      	ldr	r1, [pc, #636]	; (8000e64 <HAL_RCC_OscConfig+0x334>)
 8000be6:	400a      	ands	r2, r1
 8000be8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d014      	beq.n	8000c1c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000bf2:	f7ff fd17 	bl	8000624 <HAL_GetTick>
 8000bf6:	0003      	movs	r3, r0
 8000bf8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000bfa:	e008      	b.n	8000c0e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000bfc:	f7ff fd12 	bl	8000624 <HAL_GetTick>
 8000c00:	0002      	movs	r2, r0
 8000c02:	693b      	ldr	r3, [r7, #16]
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	2b64      	cmp	r3, #100	; 0x64
 8000c08:	d901      	bls.n	8000c0e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	e298      	b.n	8001140 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000c0e:	4b93      	ldr	r3, [pc, #588]	; (8000e5c <HAL_RCC_OscConfig+0x32c>)
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	2380      	movs	r3, #128	; 0x80
 8000c14:	029b      	lsls	r3, r3, #10
 8000c16:	4013      	ands	r3, r2
 8000c18:	d0f0      	beq.n	8000bfc <HAL_RCC_OscConfig+0xcc>
 8000c1a:	e015      	b.n	8000c48 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c1c:	f7ff fd02 	bl	8000624 <HAL_GetTick>
 8000c20:	0003      	movs	r3, r0
 8000c22:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000c24:	e008      	b.n	8000c38 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c26:	f7ff fcfd 	bl	8000624 <HAL_GetTick>
 8000c2a:	0002      	movs	r2, r0
 8000c2c:	693b      	ldr	r3, [r7, #16]
 8000c2e:	1ad3      	subs	r3, r2, r3
 8000c30:	2b64      	cmp	r3, #100	; 0x64
 8000c32:	d901      	bls.n	8000c38 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8000c34:	2303      	movs	r3, #3
 8000c36:	e283      	b.n	8001140 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000c38:	4b88      	ldr	r3, [pc, #544]	; (8000e5c <HAL_RCC_OscConfig+0x32c>)
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	2380      	movs	r3, #128	; 0x80
 8000c3e:	029b      	lsls	r3, r3, #10
 8000c40:	4013      	ands	r3, r2
 8000c42:	d1f0      	bne.n	8000c26 <HAL_RCC_OscConfig+0xf6>
 8000c44:	e000      	b.n	8000c48 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c46:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	2202      	movs	r2, #2
 8000c4e:	4013      	ands	r3, r2
 8000c50:	d100      	bne.n	8000c54 <HAL_RCC_OscConfig+0x124>
 8000c52:	e099      	b.n	8000d88 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c54:	4b81      	ldr	r3, [pc, #516]	; (8000e5c <HAL_RCC_OscConfig+0x32c>)
 8000c56:	689b      	ldr	r3, [r3, #8]
 8000c58:	2238      	movs	r2, #56	; 0x38
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000c5e:	4b7f      	ldr	r3, [pc, #508]	; (8000e5c <HAL_RCC_OscConfig+0x32c>)
 8000c60:	68db      	ldr	r3, [r3, #12]
 8000c62:	2203      	movs	r2, #3
 8000c64:	4013      	ands	r3, r2
 8000c66:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8000c68:	69bb      	ldr	r3, [r7, #24]
 8000c6a:	2b10      	cmp	r3, #16
 8000c6c:	d102      	bne.n	8000c74 <HAL_RCC_OscConfig+0x144>
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	2b02      	cmp	r3, #2
 8000c72:	d002      	beq.n	8000c7a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8000c74:	69bb      	ldr	r3, [r7, #24]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d135      	bne.n	8000ce6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000c7a:	4b78      	ldr	r3, [pc, #480]	; (8000e5c <HAL_RCC_OscConfig+0x32c>)
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	2380      	movs	r3, #128	; 0x80
 8000c80:	00db      	lsls	r3, r3, #3
 8000c82:	4013      	ands	r3, r2
 8000c84:	d005      	beq.n	8000c92 <HAL_RCC_OscConfig+0x162>
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	68db      	ldr	r3, [r3, #12]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d101      	bne.n	8000c92 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	e256      	b.n	8001140 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c92:	4b72      	ldr	r3, [pc, #456]	; (8000e5c <HAL_RCC_OscConfig+0x32c>)
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	4a74      	ldr	r2, [pc, #464]	; (8000e68 <HAL_RCC_OscConfig+0x338>)
 8000c98:	4013      	ands	r3, r2
 8000c9a:	0019      	movs	r1, r3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	695b      	ldr	r3, [r3, #20]
 8000ca0:	021a      	lsls	r2, r3, #8
 8000ca2:	4b6e      	ldr	r3, [pc, #440]	; (8000e5c <HAL_RCC_OscConfig+0x32c>)
 8000ca4:	430a      	orrs	r2, r1
 8000ca6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ca8:	69bb      	ldr	r3, [r7, #24]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d112      	bne.n	8000cd4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000cae:	4b6b      	ldr	r3, [pc, #428]	; (8000e5c <HAL_RCC_OscConfig+0x32c>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a6e      	ldr	r2, [pc, #440]	; (8000e6c <HAL_RCC_OscConfig+0x33c>)
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	0019      	movs	r1, r3
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	691a      	ldr	r2, [r3, #16]
 8000cbc:	4b67      	ldr	r3, [pc, #412]	; (8000e5c <HAL_RCC_OscConfig+0x32c>)
 8000cbe:	430a      	orrs	r2, r1
 8000cc0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8000cc2:	4b66      	ldr	r3, [pc, #408]	; (8000e5c <HAL_RCC_OscConfig+0x32c>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	0adb      	lsrs	r3, r3, #11
 8000cc8:	2207      	movs	r2, #7
 8000cca:	4013      	ands	r3, r2
 8000ccc:	4a68      	ldr	r2, [pc, #416]	; (8000e70 <HAL_RCC_OscConfig+0x340>)
 8000cce:	40da      	lsrs	r2, r3
 8000cd0:	4b68      	ldr	r3, [pc, #416]	; (8000e74 <HAL_RCC_OscConfig+0x344>)
 8000cd2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000cd4:	4b68      	ldr	r3, [pc, #416]	; (8000e78 <HAL_RCC_OscConfig+0x348>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	0018      	movs	r0, r3
 8000cda:	f7ff fc47 	bl	800056c <HAL_InitTick>
 8000cde:	1e03      	subs	r3, r0, #0
 8000ce0:	d051      	beq.n	8000d86 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e22c      	b.n	8001140 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	68db      	ldr	r3, [r3, #12]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d030      	beq.n	8000d50 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000cee:	4b5b      	ldr	r3, [pc, #364]	; (8000e5c <HAL_RCC_OscConfig+0x32c>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a5e      	ldr	r2, [pc, #376]	; (8000e6c <HAL_RCC_OscConfig+0x33c>)
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	0019      	movs	r1, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	691a      	ldr	r2, [r3, #16]
 8000cfc:	4b57      	ldr	r3, [pc, #348]	; (8000e5c <HAL_RCC_OscConfig+0x32c>)
 8000cfe:	430a      	orrs	r2, r1
 8000d00:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8000d02:	4b56      	ldr	r3, [pc, #344]	; (8000e5c <HAL_RCC_OscConfig+0x32c>)
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	4b55      	ldr	r3, [pc, #340]	; (8000e5c <HAL_RCC_OscConfig+0x32c>)
 8000d08:	2180      	movs	r1, #128	; 0x80
 8000d0a:	0049      	lsls	r1, r1, #1
 8000d0c:	430a      	orrs	r2, r1
 8000d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d10:	f7ff fc88 	bl	8000624 <HAL_GetTick>
 8000d14:	0003      	movs	r3, r0
 8000d16:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000d18:	e008      	b.n	8000d2c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d1a:	f7ff fc83 	bl	8000624 <HAL_GetTick>
 8000d1e:	0002      	movs	r2, r0
 8000d20:	693b      	ldr	r3, [r7, #16]
 8000d22:	1ad3      	subs	r3, r2, r3
 8000d24:	2b02      	cmp	r3, #2
 8000d26:	d901      	bls.n	8000d2c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8000d28:	2303      	movs	r3, #3
 8000d2a:	e209      	b.n	8001140 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000d2c:	4b4b      	ldr	r3, [pc, #300]	; (8000e5c <HAL_RCC_OscConfig+0x32c>)
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	2380      	movs	r3, #128	; 0x80
 8000d32:	00db      	lsls	r3, r3, #3
 8000d34:	4013      	ands	r3, r2
 8000d36:	d0f0      	beq.n	8000d1a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d38:	4b48      	ldr	r3, [pc, #288]	; (8000e5c <HAL_RCC_OscConfig+0x32c>)
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	4a4a      	ldr	r2, [pc, #296]	; (8000e68 <HAL_RCC_OscConfig+0x338>)
 8000d3e:	4013      	ands	r3, r2
 8000d40:	0019      	movs	r1, r3
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	695b      	ldr	r3, [r3, #20]
 8000d46:	021a      	lsls	r2, r3, #8
 8000d48:	4b44      	ldr	r3, [pc, #272]	; (8000e5c <HAL_RCC_OscConfig+0x32c>)
 8000d4a:	430a      	orrs	r2, r1
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	e01b      	b.n	8000d88 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8000d50:	4b42      	ldr	r3, [pc, #264]	; (8000e5c <HAL_RCC_OscConfig+0x32c>)
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	4b41      	ldr	r3, [pc, #260]	; (8000e5c <HAL_RCC_OscConfig+0x32c>)
 8000d56:	4949      	ldr	r1, [pc, #292]	; (8000e7c <HAL_RCC_OscConfig+0x34c>)
 8000d58:	400a      	ands	r2, r1
 8000d5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d5c:	f7ff fc62 	bl	8000624 <HAL_GetTick>
 8000d60:	0003      	movs	r3, r0
 8000d62:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000d64:	e008      	b.n	8000d78 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d66:	f7ff fc5d 	bl	8000624 <HAL_GetTick>
 8000d6a:	0002      	movs	r2, r0
 8000d6c:	693b      	ldr	r3, [r7, #16]
 8000d6e:	1ad3      	subs	r3, r2, r3
 8000d70:	2b02      	cmp	r3, #2
 8000d72:	d901      	bls.n	8000d78 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8000d74:	2303      	movs	r3, #3
 8000d76:	e1e3      	b.n	8001140 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000d78:	4b38      	ldr	r3, [pc, #224]	; (8000e5c <HAL_RCC_OscConfig+0x32c>)
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	2380      	movs	r3, #128	; 0x80
 8000d7e:	00db      	lsls	r3, r3, #3
 8000d80:	4013      	ands	r3, r2
 8000d82:	d1f0      	bne.n	8000d66 <HAL_RCC_OscConfig+0x236>
 8000d84:	e000      	b.n	8000d88 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000d86:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2208      	movs	r2, #8
 8000d8e:	4013      	ands	r3, r2
 8000d90:	d047      	beq.n	8000e22 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8000d92:	4b32      	ldr	r3, [pc, #200]	; (8000e5c <HAL_RCC_OscConfig+0x32c>)
 8000d94:	689b      	ldr	r3, [r3, #8]
 8000d96:	2238      	movs	r2, #56	; 0x38
 8000d98:	4013      	ands	r3, r2
 8000d9a:	2b18      	cmp	r3, #24
 8000d9c:	d10a      	bne.n	8000db4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8000d9e:	4b2f      	ldr	r3, [pc, #188]	; (8000e5c <HAL_RCC_OscConfig+0x32c>)
 8000da0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000da2:	2202      	movs	r2, #2
 8000da4:	4013      	ands	r3, r2
 8000da6:	d03c      	beq.n	8000e22 <HAL_RCC_OscConfig+0x2f2>
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	699b      	ldr	r3, [r3, #24]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d138      	bne.n	8000e22 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8000db0:	2301      	movs	r3, #1
 8000db2:	e1c5      	b.n	8001140 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	699b      	ldr	r3, [r3, #24]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d019      	beq.n	8000df0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8000dbc:	4b27      	ldr	r3, [pc, #156]	; (8000e5c <HAL_RCC_OscConfig+0x32c>)
 8000dbe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000dc0:	4b26      	ldr	r3, [pc, #152]	; (8000e5c <HAL_RCC_OscConfig+0x32c>)
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	430a      	orrs	r2, r1
 8000dc6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dc8:	f7ff fc2c 	bl	8000624 <HAL_GetTick>
 8000dcc:	0003      	movs	r3, r0
 8000dce:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000dd0:	e008      	b.n	8000de4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000dd2:	f7ff fc27 	bl	8000624 <HAL_GetTick>
 8000dd6:	0002      	movs	r2, r0
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	1ad3      	subs	r3, r2, r3
 8000ddc:	2b02      	cmp	r3, #2
 8000dde:	d901      	bls.n	8000de4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8000de0:	2303      	movs	r3, #3
 8000de2:	e1ad      	b.n	8001140 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000de4:	4b1d      	ldr	r3, [pc, #116]	; (8000e5c <HAL_RCC_OscConfig+0x32c>)
 8000de6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000de8:	2202      	movs	r2, #2
 8000dea:	4013      	ands	r3, r2
 8000dec:	d0f1      	beq.n	8000dd2 <HAL_RCC_OscConfig+0x2a2>
 8000dee:	e018      	b.n	8000e22 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8000df0:	4b1a      	ldr	r3, [pc, #104]	; (8000e5c <HAL_RCC_OscConfig+0x32c>)
 8000df2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000df4:	4b19      	ldr	r3, [pc, #100]	; (8000e5c <HAL_RCC_OscConfig+0x32c>)
 8000df6:	2101      	movs	r1, #1
 8000df8:	438a      	bics	r2, r1
 8000dfa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dfc:	f7ff fc12 	bl	8000624 <HAL_GetTick>
 8000e00:	0003      	movs	r3, r0
 8000e02:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000e04:	e008      	b.n	8000e18 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e06:	f7ff fc0d 	bl	8000624 <HAL_GetTick>
 8000e0a:	0002      	movs	r2, r0
 8000e0c:	693b      	ldr	r3, [r7, #16]
 8000e0e:	1ad3      	subs	r3, r2, r3
 8000e10:	2b02      	cmp	r3, #2
 8000e12:	d901      	bls.n	8000e18 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8000e14:	2303      	movs	r3, #3
 8000e16:	e193      	b.n	8001140 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000e18:	4b10      	ldr	r3, [pc, #64]	; (8000e5c <HAL_RCC_OscConfig+0x32c>)
 8000e1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e1c:	2202      	movs	r2, #2
 8000e1e:	4013      	ands	r3, r2
 8000e20:	d1f1      	bne.n	8000e06 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	2204      	movs	r2, #4
 8000e28:	4013      	ands	r3, r2
 8000e2a:	d100      	bne.n	8000e2e <HAL_RCC_OscConfig+0x2fe>
 8000e2c:	e0c6      	b.n	8000fbc <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e2e:	231f      	movs	r3, #31
 8000e30:	18fb      	adds	r3, r7, r3
 8000e32:	2200      	movs	r2, #0
 8000e34:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8000e36:	4b09      	ldr	r3, [pc, #36]	; (8000e5c <HAL_RCC_OscConfig+0x32c>)
 8000e38:	689b      	ldr	r3, [r3, #8]
 8000e3a:	2238      	movs	r2, #56	; 0x38
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	2b20      	cmp	r3, #32
 8000e40:	d11e      	bne.n	8000e80 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8000e42:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <HAL_RCC_OscConfig+0x32c>)
 8000e44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e46:	2202      	movs	r2, #2
 8000e48:	4013      	ands	r3, r2
 8000e4a:	d100      	bne.n	8000e4e <HAL_RCC_OscConfig+0x31e>
 8000e4c:	e0b6      	b.n	8000fbc <HAL_RCC_OscConfig+0x48c>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	689b      	ldr	r3, [r3, #8]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d000      	beq.n	8000e58 <HAL_RCC_OscConfig+0x328>
 8000e56:	e0b1      	b.n	8000fbc <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	e171      	b.n	8001140 <HAL_RCC_OscConfig+0x610>
 8000e5c:	40021000 	.word	0x40021000
 8000e60:	fffeffff 	.word	0xfffeffff
 8000e64:	fffbffff 	.word	0xfffbffff
 8000e68:	ffff80ff 	.word	0xffff80ff
 8000e6c:	ffffc7ff 	.word	0xffffc7ff
 8000e70:	00f42400 	.word	0x00f42400
 8000e74:	20000000 	.word	0x20000000
 8000e78:	20000004 	.word	0x20000004
 8000e7c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8000e80:	4bb1      	ldr	r3, [pc, #708]	; (8001148 <HAL_RCC_OscConfig+0x618>)
 8000e82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e84:	2380      	movs	r3, #128	; 0x80
 8000e86:	055b      	lsls	r3, r3, #21
 8000e88:	4013      	ands	r3, r2
 8000e8a:	d101      	bne.n	8000e90 <HAL_RCC_OscConfig+0x360>
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	e000      	b.n	8000e92 <HAL_RCC_OscConfig+0x362>
 8000e90:	2300      	movs	r3, #0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d011      	beq.n	8000eba <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8000e96:	4bac      	ldr	r3, [pc, #688]	; (8001148 <HAL_RCC_OscConfig+0x618>)
 8000e98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e9a:	4bab      	ldr	r3, [pc, #684]	; (8001148 <HAL_RCC_OscConfig+0x618>)
 8000e9c:	2180      	movs	r1, #128	; 0x80
 8000e9e:	0549      	lsls	r1, r1, #21
 8000ea0:	430a      	orrs	r2, r1
 8000ea2:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ea4:	4ba8      	ldr	r3, [pc, #672]	; (8001148 <HAL_RCC_OscConfig+0x618>)
 8000ea6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ea8:	2380      	movs	r3, #128	; 0x80
 8000eaa:	055b      	lsls	r3, r3, #21
 8000eac:	4013      	ands	r3, r2
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8000eb2:	231f      	movs	r3, #31
 8000eb4:	18fb      	adds	r3, r7, r3
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000eba:	4ba4      	ldr	r3, [pc, #656]	; (800114c <HAL_RCC_OscConfig+0x61c>)
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	2380      	movs	r3, #128	; 0x80
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	d11a      	bne.n	8000efc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000ec6:	4ba1      	ldr	r3, [pc, #644]	; (800114c <HAL_RCC_OscConfig+0x61c>)
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	4ba0      	ldr	r3, [pc, #640]	; (800114c <HAL_RCC_OscConfig+0x61c>)
 8000ecc:	2180      	movs	r1, #128	; 0x80
 8000ece:	0049      	lsls	r1, r1, #1
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8000ed4:	f7ff fba6 	bl	8000624 <HAL_GetTick>
 8000ed8:	0003      	movs	r3, r0
 8000eda:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000edc:	e008      	b.n	8000ef0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ede:	f7ff fba1 	bl	8000624 <HAL_GetTick>
 8000ee2:	0002      	movs	r2, r0
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	1ad3      	subs	r3, r2, r3
 8000ee8:	2b02      	cmp	r3, #2
 8000eea:	d901      	bls.n	8000ef0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8000eec:	2303      	movs	r3, #3
 8000eee:	e127      	b.n	8001140 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000ef0:	4b96      	ldr	r3, [pc, #600]	; (800114c <HAL_RCC_OscConfig+0x61c>)
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	2380      	movs	r3, #128	; 0x80
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	4013      	ands	r3, r2
 8000efa:	d0f0      	beq.n	8000ede <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	689b      	ldr	r3, [r3, #8]
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d106      	bne.n	8000f12 <HAL_RCC_OscConfig+0x3e2>
 8000f04:	4b90      	ldr	r3, [pc, #576]	; (8001148 <HAL_RCC_OscConfig+0x618>)
 8000f06:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000f08:	4b8f      	ldr	r3, [pc, #572]	; (8001148 <HAL_RCC_OscConfig+0x618>)
 8000f0a:	2101      	movs	r1, #1
 8000f0c:	430a      	orrs	r2, r1
 8000f0e:	65da      	str	r2, [r3, #92]	; 0x5c
 8000f10:	e01c      	b.n	8000f4c <HAL_RCC_OscConfig+0x41c>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	689b      	ldr	r3, [r3, #8]
 8000f16:	2b05      	cmp	r3, #5
 8000f18:	d10c      	bne.n	8000f34 <HAL_RCC_OscConfig+0x404>
 8000f1a:	4b8b      	ldr	r3, [pc, #556]	; (8001148 <HAL_RCC_OscConfig+0x618>)
 8000f1c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000f1e:	4b8a      	ldr	r3, [pc, #552]	; (8001148 <HAL_RCC_OscConfig+0x618>)
 8000f20:	2104      	movs	r1, #4
 8000f22:	430a      	orrs	r2, r1
 8000f24:	65da      	str	r2, [r3, #92]	; 0x5c
 8000f26:	4b88      	ldr	r3, [pc, #544]	; (8001148 <HAL_RCC_OscConfig+0x618>)
 8000f28:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000f2a:	4b87      	ldr	r3, [pc, #540]	; (8001148 <HAL_RCC_OscConfig+0x618>)
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	430a      	orrs	r2, r1
 8000f30:	65da      	str	r2, [r3, #92]	; 0x5c
 8000f32:	e00b      	b.n	8000f4c <HAL_RCC_OscConfig+0x41c>
 8000f34:	4b84      	ldr	r3, [pc, #528]	; (8001148 <HAL_RCC_OscConfig+0x618>)
 8000f36:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000f38:	4b83      	ldr	r3, [pc, #524]	; (8001148 <HAL_RCC_OscConfig+0x618>)
 8000f3a:	2101      	movs	r1, #1
 8000f3c:	438a      	bics	r2, r1
 8000f3e:	65da      	str	r2, [r3, #92]	; 0x5c
 8000f40:	4b81      	ldr	r3, [pc, #516]	; (8001148 <HAL_RCC_OscConfig+0x618>)
 8000f42:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000f44:	4b80      	ldr	r3, [pc, #512]	; (8001148 <HAL_RCC_OscConfig+0x618>)
 8000f46:	2104      	movs	r1, #4
 8000f48:	438a      	bics	r2, r1
 8000f4a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d014      	beq.n	8000f7e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f54:	f7ff fb66 	bl	8000624 <HAL_GetTick>
 8000f58:	0003      	movs	r3, r0
 8000f5a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000f5c:	e009      	b.n	8000f72 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f5e:	f7ff fb61 	bl	8000624 <HAL_GetTick>
 8000f62:	0002      	movs	r2, r0
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	1ad3      	subs	r3, r2, r3
 8000f68:	4a79      	ldr	r2, [pc, #484]	; (8001150 <HAL_RCC_OscConfig+0x620>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d901      	bls.n	8000f72 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	e0e6      	b.n	8001140 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000f72:	4b75      	ldr	r3, [pc, #468]	; (8001148 <HAL_RCC_OscConfig+0x618>)
 8000f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f76:	2202      	movs	r2, #2
 8000f78:	4013      	ands	r3, r2
 8000f7a:	d0f0      	beq.n	8000f5e <HAL_RCC_OscConfig+0x42e>
 8000f7c:	e013      	b.n	8000fa6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f7e:	f7ff fb51 	bl	8000624 <HAL_GetTick>
 8000f82:	0003      	movs	r3, r0
 8000f84:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000f86:	e009      	b.n	8000f9c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f88:	f7ff fb4c 	bl	8000624 <HAL_GetTick>
 8000f8c:	0002      	movs	r2, r0
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	4a6f      	ldr	r2, [pc, #444]	; (8001150 <HAL_RCC_OscConfig+0x620>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d901      	bls.n	8000f9c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	e0d1      	b.n	8001140 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000f9c:	4b6a      	ldr	r3, [pc, #424]	; (8001148 <HAL_RCC_OscConfig+0x618>)
 8000f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fa0:	2202      	movs	r2, #2
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	d1f0      	bne.n	8000f88 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8000fa6:	231f      	movs	r3, #31
 8000fa8:	18fb      	adds	r3, r7, r3
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d105      	bne.n	8000fbc <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8000fb0:	4b65      	ldr	r3, [pc, #404]	; (8001148 <HAL_RCC_OscConfig+0x618>)
 8000fb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000fb4:	4b64      	ldr	r3, [pc, #400]	; (8001148 <HAL_RCC_OscConfig+0x618>)
 8000fb6:	4967      	ldr	r1, [pc, #412]	; (8001154 <HAL_RCC_OscConfig+0x624>)
 8000fb8:	400a      	ands	r2, r1
 8000fba:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	69db      	ldr	r3, [r3, #28]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d100      	bne.n	8000fc6 <HAL_RCC_OscConfig+0x496>
 8000fc4:	e0bb      	b.n	800113e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fc6:	4b60      	ldr	r3, [pc, #384]	; (8001148 <HAL_RCC_OscConfig+0x618>)
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	2238      	movs	r2, #56	; 0x38
 8000fcc:	4013      	ands	r3, r2
 8000fce:	2b10      	cmp	r3, #16
 8000fd0:	d100      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x4a4>
 8000fd2:	e07b      	b.n	80010cc <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	69db      	ldr	r3, [r3, #28]
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d156      	bne.n	800108a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fdc:	4b5a      	ldr	r3, [pc, #360]	; (8001148 <HAL_RCC_OscConfig+0x618>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	4b59      	ldr	r3, [pc, #356]	; (8001148 <HAL_RCC_OscConfig+0x618>)
 8000fe2:	495d      	ldr	r1, [pc, #372]	; (8001158 <HAL_RCC_OscConfig+0x628>)
 8000fe4:	400a      	ands	r2, r1
 8000fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fe8:	f7ff fb1c 	bl	8000624 <HAL_GetTick>
 8000fec:	0003      	movs	r3, r0
 8000fee:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000ff0:	e008      	b.n	8001004 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ff2:	f7ff fb17 	bl	8000624 <HAL_GetTick>
 8000ff6:	0002      	movs	r2, r0
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d901      	bls.n	8001004 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001000:	2303      	movs	r3, #3
 8001002:	e09d      	b.n	8001140 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001004:	4b50      	ldr	r3, [pc, #320]	; (8001148 <HAL_RCC_OscConfig+0x618>)
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	2380      	movs	r3, #128	; 0x80
 800100a:	049b      	lsls	r3, r3, #18
 800100c:	4013      	ands	r3, r2
 800100e:	d1f0      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001010:	4b4d      	ldr	r3, [pc, #308]	; (8001148 <HAL_RCC_OscConfig+0x618>)
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	4a51      	ldr	r2, [pc, #324]	; (800115c <HAL_RCC_OscConfig+0x62c>)
 8001016:	4013      	ands	r3, r2
 8001018:	0019      	movs	r1, r3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6a1a      	ldr	r2, [r3, #32]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001022:	431a      	orrs	r2, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001028:	021b      	lsls	r3, r3, #8
 800102a:	431a      	orrs	r2, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001030:	431a      	orrs	r2, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	431a      	orrs	r2, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800103c:	431a      	orrs	r2, r3
 800103e:	4b42      	ldr	r3, [pc, #264]	; (8001148 <HAL_RCC_OscConfig+0x618>)
 8001040:	430a      	orrs	r2, r1
 8001042:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001044:	4b40      	ldr	r3, [pc, #256]	; (8001148 <HAL_RCC_OscConfig+0x618>)
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	4b3f      	ldr	r3, [pc, #252]	; (8001148 <HAL_RCC_OscConfig+0x618>)
 800104a:	2180      	movs	r1, #128	; 0x80
 800104c:	0449      	lsls	r1, r1, #17
 800104e:	430a      	orrs	r2, r1
 8001050:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001052:	4b3d      	ldr	r3, [pc, #244]	; (8001148 <HAL_RCC_OscConfig+0x618>)
 8001054:	68da      	ldr	r2, [r3, #12]
 8001056:	4b3c      	ldr	r3, [pc, #240]	; (8001148 <HAL_RCC_OscConfig+0x618>)
 8001058:	2180      	movs	r1, #128	; 0x80
 800105a:	0549      	lsls	r1, r1, #21
 800105c:	430a      	orrs	r2, r1
 800105e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001060:	f7ff fae0 	bl	8000624 <HAL_GetTick>
 8001064:	0003      	movs	r3, r0
 8001066:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001068:	e008      	b.n	800107c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800106a:	f7ff fadb 	bl	8000624 <HAL_GetTick>
 800106e:	0002      	movs	r2, r0
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	1ad3      	subs	r3, r2, r3
 8001074:	2b02      	cmp	r3, #2
 8001076:	d901      	bls.n	800107c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001078:	2303      	movs	r3, #3
 800107a:	e061      	b.n	8001140 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800107c:	4b32      	ldr	r3, [pc, #200]	; (8001148 <HAL_RCC_OscConfig+0x618>)
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	2380      	movs	r3, #128	; 0x80
 8001082:	049b      	lsls	r3, r3, #18
 8001084:	4013      	ands	r3, r2
 8001086:	d0f0      	beq.n	800106a <HAL_RCC_OscConfig+0x53a>
 8001088:	e059      	b.n	800113e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800108a:	4b2f      	ldr	r3, [pc, #188]	; (8001148 <HAL_RCC_OscConfig+0x618>)
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	4b2e      	ldr	r3, [pc, #184]	; (8001148 <HAL_RCC_OscConfig+0x618>)
 8001090:	4931      	ldr	r1, [pc, #196]	; (8001158 <HAL_RCC_OscConfig+0x628>)
 8001092:	400a      	ands	r2, r1
 8001094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001096:	f7ff fac5 	bl	8000624 <HAL_GetTick>
 800109a:	0003      	movs	r3, r0
 800109c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800109e:	e008      	b.n	80010b2 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010a0:	f7ff fac0 	bl	8000624 <HAL_GetTick>
 80010a4:	0002      	movs	r2, r0
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	2b02      	cmp	r3, #2
 80010ac:	d901      	bls.n	80010b2 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80010ae:	2303      	movs	r3, #3
 80010b0:	e046      	b.n	8001140 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80010b2:	4b25      	ldr	r3, [pc, #148]	; (8001148 <HAL_RCC_OscConfig+0x618>)
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	2380      	movs	r3, #128	; 0x80
 80010b8:	049b      	lsls	r3, r3, #18
 80010ba:	4013      	ands	r3, r2
 80010bc:	d1f0      	bne.n	80010a0 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80010be:	4b22      	ldr	r3, [pc, #136]	; (8001148 <HAL_RCC_OscConfig+0x618>)
 80010c0:	68da      	ldr	r2, [r3, #12]
 80010c2:	4b21      	ldr	r3, [pc, #132]	; (8001148 <HAL_RCC_OscConfig+0x618>)
 80010c4:	4926      	ldr	r1, [pc, #152]	; (8001160 <HAL_RCC_OscConfig+0x630>)
 80010c6:	400a      	ands	r2, r1
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	e038      	b.n	800113e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	69db      	ldr	r3, [r3, #28]
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d101      	bne.n	80010d8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	e033      	b.n	8001140 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80010d8:	4b1b      	ldr	r3, [pc, #108]	; (8001148 <HAL_RCC_OscConfig+0x618>)
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	2203      	movs	r2, #3
 80010e2:	401a      	ands	r2, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6a1b      	ldr	r3, [r3, #32]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d126      	bne.n	800113a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	2270      	movs	r2, #112	; 0x70
 80010f0:	401a      	ands	r2, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d11f      	bne.n	800113a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80010fa:	697a      	ldr	r2, [r7, #20]
 80010fc:	23fe      	movs	r3, #254	; 0xfe
 80010fe:	01db      	lsls	r3, r3, #7
 8001100:	401a      	ands	r2, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001106:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001108:	429a      	cmp	r2, r3
 800110a:	d116      	bne.n	800113a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800110c:	697a      	ldr	r2, [r7, #20]
 800110e:	23f8      	movs	r3, #248	; 0xf8
 8001110:	039b      	lsls	r3, r3, #14
 8001112:	401a      	ands	r2, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001118:	429a      	cmp	r2, r3
 800111a:	d10e      	bne.n	800113a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800111c:	697a      	ldr	r2, [r7, #20]
 800111e:	23e0      	movs	r3, #224	; 0xe0
 8001120:	051b      	lsls	r3, r3, #20
 8001122:	401a      	ands	r2, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001128:	429a      	cmp	r2, r3
 800112a:	d106      	bne.n	800113a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	0f5b      	lsrs	r3, r3, #29
 8001130:	075a      	lsls	r2, r3, #29
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001136:	429a      	cmp	r2, r3
 8001138:	d001      	beq.n	800113e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e000      	b.n	8001140 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800113e:	2300      	movs	r3, #0
}
 8001140:	0018      	movs	r0, r3
 8001142:	46bd      	mov	sp, r7
 8001144:	b008      	add	sp, #32
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40021000 	.word	0x40021000
 800114c:	40007000 	.word	0x40007000
 8001150:	00001388 	.word	0x00001388
 8001154:	efffffff 	.word	0xefffffff
 8001158:	feffffff 	.word	0xfeffffff
 800115c:	11c1808c 	.word	0x11c1808c
 8001160:	eefefffc 	.word	0xeefefffc

08001164 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d101      	bne.n	8001178 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001174:	2301      	movs	r3, #1
 8001176:	e0e9      	b.n	800134c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001178:	4b76      	ldr	r3, [pc, #472]	; (8001354 <HAL_RCC_ClockConfig+0x1f0>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2207      	movs	r2, #7
 800117e:	4013      	ands	r3, r2
 8001180:	683a      	ldr	r2, [r7, #0]
 8001182:	429a      	cmp	r2, r3
 8001184:	d91e      	bls.n	80011c4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001186:	4b73      	ldr	r3, [pc, #460]	; (8001354 <HAL_RCC_ClockConfig+0x1f0>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2207      	movs	r2, #7
 800118c:	4393      	bics	r3, r2
 800118e:	0019      	movs	r1, r3
 8001190:	4b70      	ldr	r3, [pc, #448]	; (8001354 <HAL_RCC_ClockConfig+0x1f0>)
 8001192:	683a      	ldr	r2, [r7, #0]
 8001194:	430a      	orrs	r2, r1
 8001196:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001198:	f7ff fa44 	bl	8000624 <HAL_GetTick>
 800119c:	0003      	movs	r3, r0
 800119e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80011a0:	e009      	b.n	80011b6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011a2:	f7ff fa3f 	bl	8000624 <HAL_GetTick>
 80011a6:	0002      	movs	r2, r0
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	4a6a      	ldr	r2, [pc, #424]	; (8001358 <HAL_RCC_ClockConfig+0x1f4>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d901      	bls.n	80011b6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80011b2:	2303      	movs	r3, #3
 80011b4:	e0ca      	b.n	800134c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80011b6:	4b67      	ldr	r3, [pc, #412]	; (8001354 <HAL_RCC_ClockConfig+0x1f0>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2207      	movs	r2, #7
 80011bc:	4013      	ands	r3, r2
 80011be:	683a      	ldr	r2, [r7, #0]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d1ee      	bne.n	80011a2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2202      	movs	r2, #2
 80011ca:	4013      	ands	r3, r2
 80011cc:	d015      	beq.n	80011fa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2204      	movs	r2, #4
 80011d4:	4013      	ands	r3, r2
 80011d6:	d006      	beq.n	80011e6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80011d8:	4b60      	ldr	r3, [pc, #384]	; (800135c <HAL_RCC_ClockConfig+0x1f8>)
 80011da:	689a      	ldr	r2, [r3, #8]
 80011dc:	4b5f      	ldr	r3, [pc, #380]	; (800135c <HAL_RCC_ClockConfig+0x1f8>)
 80011de:	21e0      	movs	r1, #224	; 0xe0
 80011e0:	01c9      	lsls	r1, r1, #7
 80011e2:	430a      	orrs	r2, r1
 80011e4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011e6:	4b5d      	ldr	r3, [pc, #372]	; (800135c <HAL_RCC_ClockConfig+0x1f8>)
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	4a5d      	ldr	r2, [pc, #372]	; (8001360 <HAL_RCC_ClockConfig+0x1fc>)
 80011ec:	4013      	ands	r3, r2
 80011ee:	0019      	movs	r1, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	689a      	ldr	r2, [r3, #8]
 80011f4:	4b59      	ldr	r3, [pc, #356]	; (800135c <HAL_RCC_ClockConfig+0x1f8>)
 80011f6:	430a      	orrs	r2, r1
 80011f8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	2201      	movs	r2, #1
 8001200:	4013      	ands	r3, r2
 8001202:	d057      	beq.n	80012b4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	2b01      	cmp	r3, #1
 800120a:	d107      	bne.n	800121c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800120c:	4b53      	ldr	r3, [pc, #332]	; (800135c <HAL_RCC_ClockConfig+0x1f8>)
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	2380      	movs	r3, #128	; 0x80
 8001212:	029b      	lsls	r3, r3, #10
 8001214:	4013      	ands	r3, r2
 8001216:	d12b      	bne.n	8001270 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	e097      	b.n	800134c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	2b02      	cmp	r3, #2
 8001222:	d107      	bne.n	8001234 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001224:	4b4d      	ldr	r3, [pc, #308]	; (800135c <HAL_RCC_ClockConfig+0x1f8>)
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	2380      	movs	r3, #128	; 0x80
 800122a:	049b      	lsls	r3, r3, #18
 800122c:	4013      	ands	r3, r2
 800122e:	d11f      	bne.n	8001270 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	e08b      	b.n	800134c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d107      	bne.n	800124c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800123c:	4b47      	ldr	r3, [pc, #284]	; (800135c <HAL_RCC_ClockConfig+0x1f8>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	2380      	movs	r3, #128	; 0x80
 8001242:	00db      	lsls	r3, r3, #3
 8001244:	4013      	ands	r3, r2
 8001246:	d113      	bne.n	8001270 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	e07f      	b.n	800134c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	2b03      	cmp	r3, #3
 8001252:	d106      	bne.n	8001262 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001254:	4b41      	ldr	r3, [pc, #260]	; (800135c <HAL_RCC_ClockConfig+0x1f8>)
 8001256:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001258:	2202      	movs	r2, #2
 800125a:	4013      	ands	r3, r2
 800125c:	d108      	bne.n	8001270 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e074      	b.n	800134c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001262:	4b3e      	ldr	r3, [pc, #248]	; (800135c <HAL_RCC_ClockConfig+0x1f8>)
 8001264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001266:	2202      	movs	r2, #2
 8001268:	4013      	ands	r3, r2
 800126a:	d101      	bne.n	8001270 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800126c:	2301      	movs	r3, #1
 800126e:	e06d      	b.n	800134c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001270:	4b3a      	ldr	r3, [pc, #232]	; (800135c <HAL_RCC_ClockConfig+0x1f8>)
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	2207      	movs	r2, #7
 8001276:	4393      	bics	r3, r2
 8001278:	0019      	movs	r1, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	685a      	ldr	r2, [r3, #4]
 800127e:	4b37      	ldr	r3, [pc, #220]	; (800135c <HAL_RCC_ClockConfig+0x1f8>)
 8001280:	430a      	orrs	r2, r1
 8001282:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001284:	f7ff f9ce 	bl	8000624 <HAL_GetTick>
 8001288:	0003      	movs	r3, r0
 800128a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800128c:	e009      	b.n	80012a2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800128e:	f7ff f9c9 	bl	8000624 <HAL_GetTick>
 8001292:	0002      	movs	r2, r0
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	4a2f      	ldr	r2, [pc, #188]	; (8001358 <HAL_RCC_ClockConfig+0x1f4>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d901      	bls.n	80012a2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800129e:	2303      	movs	r3, #3
 80012a0:	e054      	b.n	800134c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012a2:	4b2e      	ldr	r3, [pc, #184]	; (800135c <HAL_RCC_ClockConfig+0x1f8>)
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	2238      	movs	r2, #56	; 0x38
 80012a8:	401a      	ands	r2, r3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	00db      	lsls	r3, r3, #3
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d1ec      	bne.n	800128e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012b4:	4b27      	ldr	r3, [pc, #156]	; (8001354 <HAL_RCC_ClockConfig+0x1f0>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2207      	movs	r2, #7
 80012ba:	4013      	ands	r3, r2
 80012bc:	683a      	ldr	r2, [r7, #0]
 80012be:	429a      	cmp	r2, r3
 80012c0:	d21e      	bcs.n	8001300 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012c2:	4b24      	ldr	r3, [pc, #144]	; (8001354 <HAL_RCC_ClockConfig+0x1f0>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2207      	movs	r2, #7
 80012c8:	4393      	bics	r3, r2
 80012ca:	0019      	movs	r1, r3
 80012cc:	4b21      	ldr	r3, [pc, #132]	; (8001354 <HAL_RCC_ClockConfig+0x1f0>)
 80012ce:	683a      	ldr	r2, [r7, #0]
 80012d0:	430a      	orrs	r2, r1
 80012d2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80012d4:	f7ff f9a6 	bl	8000624 <HAL_GetTick>
 80012d8:	0003      	movs	r3, r0
 80012da:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80012dc:	e009      	b.n	80012f2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012de:	f7ff f9a1 	bl	8000624 <HAL_GetTick>
 80012e2:	0002      	movs	r2, r0
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	4a1b      	ldr	r2, [pc, #108]	; (8001358 <HAL_RCC_ClockConfig+0x1f4>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d901      	bls.n	80012f2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80012ee:	2303      	movs	r3, #3
 80012f0:	e02c      	b.n	800134c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80012f2:	4b18      	ldr	r3, [pc, #96]	; (8001354 <HAL_RCC_ClockConfig+0x1f0>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2207      	movs	r2, #7
 80012f8:	4013      	ands	r3, r2
 80012fa:	683a      	ldr	r2, [r7, #0]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d1ee      	bne.n	80012de <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2204      	movs	r2, #4
 8001306:	4013      	ands	r3, r2
 8001308:	d009      	beq.n	800131e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800130a:	4b14      	ldr	r3, [pc, #80]	; (800135c <HAL_RCC_ClockConfig+0x1f8>)
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	4a15      	ldr	r2, [pc, #84]	; (8001364 <HAL_RCC_ClockConfig+0x200>)
 8001310:	4013      	ands	r3, r2
 8001312:	0019      	movs	r1, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	68da      	ldr	r2, [r3, #12]
 8001318:	4b10      	ldr	r3, [pc, #64]	; (800135c <HAL_RCC_ClockConfig+0x1f8>)
 800131a:	430a      	orrs	r2, r1
 800131c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800131e:	f000 f829 	bl	8001374 <HAL_RCC_GetSysClockFreq>
 8001322:	0001      	movs	r1, r0
 8001324:	4b0d      	ldr	r3, [pc, #52]	; (800135c <HAL_RCC_ClockConfig+0x1f8>)
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	0a1b      	lsrs	r3, r3, #8
 800132a:	220f      	movs	r2, #15
 800132c:	401a      	ands	r2, r3
 800132e:	4b0e      	ldr	r3, [pc, #56]	; (8001368 <HAL_RCC_ClockConfig+0x204>)
 8001330:	0092      	lsls	r2, r2, #2
 8001332:	58d3      	ldr	r3, [r2, r3]
 8001334:	221f      	movs	r2, #31
 8001336:	4013      	ands	r3, r2
 8001338:	000a      	movs	r2, r1
 800133a:	40da      	lsrs	r2, r3
 800133c:	4b0b      	ldr	r3, [pc, #44]	; (800136c <HAL_RCC_ClockConfig+0x208>)
 800133e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001340:	4b0b      	ldr	r3, [pc, #44]	; (8001370 <HAL_RCC_ClockConfig+0x20c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	0018      	movs	r0, r3
 8001346:	f7ff f911 	bl	800056c <HAL_InitTick>
 800134a:	0003      	movs	r3, r0
}
 800134c:	0018      	movs	r0, r3
 800134e:	46bd      	mov	sp, r7
 8001350:	b004      	add	sp, #16
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40022000 	.word	0x40022000
 8001358:	00001388 	.word	0x00001388
 800135c:	40021000 	.word	0x40021000
 8001360:	fffff0ff 	.word	0xfffff0ff
 8001364:	ffff8fff 	.word	0xffff8fff
 8001368:	0800203c 	.word	0x0800203c
 800136c:	20000000 	.word	0x20000000
 8001370:	20000004 	.word	0x20000004

08001374 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800137a:	4b3c      	ldr	r3, [pc, #240]	; (800146c <HAL_RCC_GetSysClockFreq+0xf8>)
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	2238      	movs	r2, #56	; 0x38
 8001380:	4013      	ands	r3, r2
 8001382:	d10f      	bne.n	80013a4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001384:	4b39      	ldr	r3, [pc, #228]	; (800146c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	0adb      	lsrs	r3, r3, #11
 800138a:	2207      	movs	r2, #7
 800138c:	4013      	ands	r3, r2
 800138e:	2201      	movs	r2, #1
 8001390:	409a      	lsls	r2, r3
 8001392:	0013      	movs	r3, r2
 8001394:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001396:	6839      	ldr	r1, [r7, #0]
 8001398:	4835      	ldr	r0, [pc, #212]	; (8001470 <HAL_RCC_GetSysClockFreq+0xfc>)
 800139a:	f7fe feb3 	bl	8000104 <__udivsi3>
 800139e:	0003      	movs	r3, r0
 80013a0:	613b      	str	r3, [r7, #16]
 80013a2:	e05d      	b.n	8001460 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013a4:	4b31      	ldr	r3, [pc, #196]	; (800146c <HAL_RCC_GetSysClockFreq+0xf8>)
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	2238      	movs	r2, #56	; 0x38
 80013aa:	4013      	ands	r3, r2
 80013ac:	2b08      	cmp	r3, #8
 80013ae:	d102      	bne.n	80013b6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80013b0:	4b30      	ldr	r3, [pc, #192]	; (8001474 <HAL_RCC_GetSysClockFreq+0x100>)
 80013b2:	613b      	str	r3, [r7, #16]
 80013b4:	e054      	b.n	8001460 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013b6:	4b2d      	ldr	r3, [pc, #180]	; (800146c <HAL_RCC_GetSysClockFreq+0xf8>)
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	2238      	movs	r2, #56	; 0x38
 80013bc:	4013      	ands	r3, r2
 80013be:	2b10      	cmp	r3, #16
 80013c0:	d138      	bne.n	8001434 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80013c2:	4b2a      	ldr	r3, [pc, #168]	; (800146c <HAL_RCC_GetSysClockFreq+0xf8>)
 80013c4:	68db      	ldr	r3, [r3, #12]
 80013c6:	2203      	movs	r2, #3
 80013c8:	4013      	ands	r3, r2
 80013ca:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80013cc:	4b27      	ldr	r3, [pc, #156]	; (800146c <HAL_RCC_GetSysClockFreq+0xf8>)
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	091b      	lsrs	r3, r3, #4
 80013d2:	2207      	movs	r2, #7
 80013d4:	4013      	ands	r3, r2
 80013d6:	3301      	adds	r3, #1
 80013d8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	2b03      	cmp	r3, #3
 80013de:	d10d      	bne.n	80013fc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80013e0:	68b9      	ldr	r1, [r7, #8]
 80013e2:	4824      	ldr	r0, [pc, #144]	; (8001474 <HAL_RCC_GetSysClockFreq+0x100>)
 80013e4:	f7fe fe8e 	bl	8000104 <__udivsi3>
 80013e8:	0003      	movs	r3, r0
 80013ea:	0019      	movs	r1, r3
 80013ec:	4b1f      	ldr	r3, [pc, #124]	; (800146c <HAL_RCC_GetSysClockFreq+0xf8>)
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	0a1b      	lsrs	r3, r3, #8
 80013f2:	227f      	movs	r2, #127	; 0x7f
 80013f4:	4013      	ands	r3, r2
 80013f6:	434b      	muls	r3, r1
 80013f8:	617b      	str	r3, [r7, #20]
        break;
 80013fa:	e00d      	b.n	8001418 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80013fc:	68b9      	ldr	r1, [r7, #8]
 80013fe:	481c      	ldr	r0, [pc, #112]	; (8001470 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001400:	f7fe fe80 	bl	8000104 <__udivsi3>
 8001404:	0003      	movs	r3, r0
 8001406:	0019      	movs	r1, r3
 8001408:	4b18      	ldr	r3, [pc, #96]	; (800146c <HAL_RCC_GetSysClockFreq+0xf8>)
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	0a1b      	lsrs	r3, r3, #8
 800140e:	227f      	movs	r2, #127	; 0x7f
 8001410:	4013      	ands	r3, r2
 8001412:	434b      	muls	r3, r1
 8001414:	617b      	str	r3, [r7, #20]
        break;
 8001416:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001418:	4b14      	ldr	r3, [pc, #80]	; (800146c <HAL_RCC_GetSysClockFreq+0xf8>)
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	0f5b      	lsrs	r3, r3, #29
 800141e:	2207      	movs	r2, #7
 8001420:	4013      	ands	r3, r2
 8001422:	3301      	adds	r3, #1
 8001424:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001426:	6879      	ldr	r1, [r7, #4]
 8001428:	6978      	ldr	r0, [r7, #20]
 800142a:	f7fe fe6b 	bl	8000104 <__udivsi3>
 800142e:	0003      	movs	r3, r0
 8001430:	613b      	str	r3, [r7, #16]
 8001432:	e015      	b.n	8001460 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001434:	4b0d      	ldr	r3, [pc, #52]	; (800146c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	2238      	movs	r2, #56	; 0x38
 800143a:	4013      	ands	r3, r2
 800143c:	2b20      	cmp	r3, #32
 800143e:	d103      	bne.n	8001448 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001440:	2380      	movs	r3, #128	; 0x80
 8001442:	021b      	lsls	r3, r3, #8
 8001444:	613b      	str	r3, [r7, #16]
 8001446:	e00b      	b.n	8001460 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001448:	4b08      	ldr	r3, [pc, #32]	; (800146c <HAL_RCC_GetSysClockFreq+0xf8>)
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	2238      	movs	r2, #56	; 0x38
 800144e:	4013      	ands	r3, r2
 8001450:	2b18      	cmp	r3, #24
 8001452:	d103      	bne.n	800145c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001454:	23fa      	movs	r3, #250	; 0xfa
 8001456:	01db      	lsls	r3, r3, #7
 8001458:	613b      	str	r3, [r7, #16]
 800145a:	e001      	b.n	8001460 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800145c:	2300      	movs	r3, #0
 800145e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001460:	693b      	ldr	r3, [r7, #16]
}
 8001462:	0018      	movs	r0, r3
 8001464:	46bd      	mov	sp, r7
 8001466:	b006      	add	sp, #24
 8001468:	bd80      	pop	{r7, pc}
 800146a:	46c0      	nop			; (mov r8, r8)
 800146c:	40021000 	.word	0x40021000
 8001470:	00f42400 	.word	0x00f42400
 8001474:	007a1200 	.word	0x007a1200

08001478 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d101      	bne.n	800148a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e0a8      	b.n	80015dc <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148e:	2b00      	cmp	r3, #0
 8001490:	d109      	bne.n	80014a6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685a      	ldr	r2, [r3, #4]
 8001496:	2382      	movs	r3, #130	; 0x82
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	429a      	cmp	r2, r3
 800149c:	d009      	beq.n	80014b2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2200      	movs	r2, #0
 80014a2:	61da      	str	r2, [r3, #28]
 80014a4:	e005      	b.n	80014b2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2200      	movs	r2, #0
 80014aa:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2200      	movs	r2, #0
 80014b0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	225d      	movs	r2, #93	; 0x5d
 80014bc:	5c9b      	ldrb	r3, [r3, r2]
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d107      	bne.n	80014d4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	225c      	movs	r2, #92	; 0x5c
 80014c8:	2100      	movs	r1, #0
 80014ca:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	0018      	movs	r0, r3
 80014d0:	f7fe ff9a 	bl	8000408 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	225d      	movs	r2, #93	; 0x5d
 80014d8:	2102      	movs	r1, #2
 80014da:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2140      	movs	r1, #64	; 0x40
 80014e8:	438a      	bics	r2, r1
 80014ea:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	68da      	ldr	r2, [r3, #12]
 80014f0:	23e0      	movs	r3, #224	; 0xe0
 80014f2:	00db      	lsls	r3, r3, #3
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d902      	bls.n	80014fe <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80014f8:	2300      	movs	r3, #0
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	e002      	b.n	8001504 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80014fe:	2380      	movs	r3, #128	; 0x80
 8001500:	015b      	lsls	r3, r3, #5
 8001502:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	68da      	ldr	r2, [r3, #12]
 8001508:	23f0      	movs	r3, #240	; 0xf0
 800150a:	011b      	lsls	r3, r3, #4
 800150c:	429a      	cmp	r2, r3
 800150e:	d008      	beq.n	8001522 <HAL_SPI_Init+0xaa>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	68da      	ldr	r2, [r3, #12]
 8001514:	23e0      	movs	r3, #224	; 0xe0
 8001516:	00db      	lsls	r3, r3, #3
 8001518:	429a      	cmp	r2, r3
 800151a:	d002      	beq.n	8001522 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2200      	movs	r2, #0
 8001520:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685a      	ldr	r2, [r3, #4]
 8001526:	2382      	movs	r3, #130	; 0x82
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	401a      	ands	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6899      	ldr	r1, [r3, #8]
 8001530:	2384      	movs	r3, #132	; 0x84
 8001532:	021b      	lsls	r3, r3, #8
 8001534:	400b      	ands	r3, r1
 8001536:	431a      	orrs	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	691b      	ldr	r3, [r3, #16]
 800153c:	2102      	movs	r1, #2
 800153e:	400b      	ands	r3, r1
 8001540:	431a      	orrs	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	695b      	ldr	r3, [r3, #20]
 8001546:	2101      	movs	r1, #1
 8001548:	400b      	ands	r3, r1
 800154a:	431a      	orrs	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6999      	ldr	r1, [r3, #24]
 8001550:	2380      	movs	r3, #128	; 0x80
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	400b      	ands	r3, r1
 8001556:	431a      	orrs	r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	69db      	ldr	r3, [r3, #28]
 800155c:	2138      	movs	r1, #56	; 0x38
 800155e:	400b      	ands	r3, r1
 8001560:	431a      	orrs	r2, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a1b      	ldr	r3, [r3, #32]
 8001566:	2180      	movs	r1, #128	; 0x80
 8001568:	400b      	ands	r3, r1
 800156a:	431a      	orrs	r2, r3
 800156c:	0011      	movs	r1, r2
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001572:	2380      	movs	r3, #128	; 0x80
 8001574:	019b      	lsls	r3, r3, #6
 8001576:	401a      	ands	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	430a      	orrs	r2, r1
 800157e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	0c1b      	lsrs	r3, r3, #16
 8001586:	2204      	movs	r2, #4
 8001588:	401a      	ands	r2, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800158e:	2110      	movs	r1, #16
 8001590:	400b      	ands	r3, r1
 8001592:	431a      	orrs	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001598:	2108      	movs	r1, #8
 800159a:	400b      	ands	r3, r1
 800159c:	431a      	orrs	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	68d9      	ldr	r1, [r3, #12]
 80015a2:	23f0      	movs	r3, #240	; 0xf0
 80015a4:	011b      	lsls	r3, r3, #4
 80015a6:	400b      	ands	r3, r1
 80015a8:	431a      	orrs	r2, r3
 80015aa:	0011      	movs	r1, r2
 80015ac:	68fa      	ldr	r2, [r7, #12]
 80015ae:	2380      	movs	r3, #128	; 0x80
 80015b0:	015b      	lsls	r3, r3, #5
 80015b2:	401a      	ands	r2, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	430a      	orrs	r2, r1
 80015ba:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	69da      	ldr	r2, [r3, #28]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4907      	ldr	r1, [pc, #28]	; (80015e4 <HAL_SPI_Init+0x16c>)
 80015c8:	400a      	ands	r2, r1
 80015ca:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	225d      	movs	r2, #93	; 0x5d
 80015d6:	2101      	movs	r1, #1
 80015d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80015da:	2300      	movs	r3, #0
}
 80015dc:	0018      	movs	r0, r3
 80015de:	46bd      	mov	sp, r7
 80015e0:	b004      	add	sp, #16
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	fffff7ff 	.word	0xfffff7ff

080015e8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015e8:	b590      	push	{r4, r7, lr}
 80015ea:	b089      	sub	sp, #36	; 0x24
 80015ec:	af02      	add	r7, sp, #8
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	603b      	str	r3, [r7, #0]
 80015f4:	1dbb      	adds	r3, r7, #6
 80015f6:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80015f8:	2317      	movs	r3, #23
 80015fa:	18fb      	adds	r3, r7, r3
 80015fc:	2200      	movs	r2, #0
 80015fe:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	685a      	ldr	r2, [r3, #4]
 8001604:	2382      	movs	r3, #130	; 0x82
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	429a      	cmp	r2, r3
 800160a:	d113      	bne.n	8001634 <HAL_SPI_Receive+0x4c>
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d10f      	bne.n	8001634 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	225d      	movs	r2, #93	; 0x5d
 8001618:	2104      	movs	r1, #4
 800161a:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800161c:	1dbb      	adds	r3, r7, #6
 800161e:	881c      	ldrh	r4, [r3, #0]
 8001620:	68ba      	ldr	r2, [r7, #8]
 8001622:	68b9      	ldr	r1, [r7, #8]
 8001624:	68f8      	ldr	r0, [r7, #12]
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	9300      	str	r3, [sp, #0]
 800162a:	0023      	movs	r3, r4
 800162c:	f000 f928 	bl	8001880 <HAL_SPI_TransmitReceive>
 8001630:	0003      	movs	r3, r0
 8001632:	e11c      	b.n	800186e <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	225c      	movs	r2, #92	; 0x5c
 8001638:	5c9b      	ldrb	r3, [r3, r2]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d101      	bne.n	8001642 <HAL_SPI_Receive+0x5a>
 800163e:	2302      	movs	r3, #2
 8001640:	e115      	b.n	800186e <HAL_SPI_Receive+0x286>
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	225c      	movs	r2, #92	; 0x5c
 8001646:	2101      	movs	r1, #1
 8001648:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800164a:	f7fe ffeb 	bl	8000624 <HAL_GetTick>
 800164e:	0003      	movs	r3, r0
 8001650:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	225d      	movs	r2, #93	; 0x5d
 8001656:	5c9b      	ldrb	r3, [r3, r2]
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b01      	cmp	r3, #1
 800165c:	d004      	beq.n	8001668 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 800165e:	2317      	movs	r3, #23
 8001660:	18fb      	adds	r3, r7, r3
 8001662:	2202      	movs	r2, #2
 8001664:	701a      	strb	r2, [r3, #0]
    goto error;
 8001666:	e0f7      	b.n	8001858 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d003      	beq.n	8001676 <HAL_SPI_Receive+0x8e>
 800166e:	1dbb      	adds	r3, r7, #6
 8001670:	881b      	ldrh	r3, [r3, #0]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d104      	bne.n	8001680 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8001676:	2317      	movs	r3, #23
 8001678:	18fb      	adds	r3, r7, r3
 800167a:	2201      	movs	r2, #1
 800167c:	701a      	strb	r2, [r3, #0]
    goto error;
 800167e:	e0eb      	b.n	8001858 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	225d      	movs	r2, #93	; 0x5d
 8001684:	2104      	movs	r1, #4
 8001686:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2200      	movs	r2, #0
 800168c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	68ba      	ldr	r2, [r7, #8]
 8001692:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	1dba      	adds	r2, r7, #6
 8001698:	2144      	movs	r1, #68	; 0x44
 800169a:	8812      	ldrh	r2, [r2, #0]
 800169c:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	1dba      	adds	r2, r7, #6
 80016a2:	2146      	movs	r1, #70	; 0x46
 80016a4:	8812      	ldrh	r2, [r2, #0]
 80016a6:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2200      	movs	r2, #0
 80016ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2200      	movs	r2, #0
 80016b2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2200      	movs	r2, #0
 80016b8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	2200      	movs	r2, #0
 80016be:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2200      	movs	r2, #0
 80016c4:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	68da      	ldr	r2, [r3, #12]
 80016ca:	23e0      	movs	r3, #224	; 0xe0
 80016cc:	00db      	lsls	r3, r3, #3
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d908      	bls.n	80016e4 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	685a      	ldr	r2, [r3, #4]
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4966      	ldr	r1, [pc, #408]	; (8001878 <HAL_SPI_Receive+0x290>)
 80016de:	400a      	ands	r2, r1
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	e008      	b.n	80016f6 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	685a      	ldr	r2, [r3, #4]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2180      	movs	r1, #128	; 0x80
 80016f0:	0149      	lsls	r1, r1, #5
 80016f2:	430a      	orrs	r2, r1
 80016f4:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	689a      	ldr	r2, [r3, #8]
 80016fa:	2380      	movs	r3, #128	; 0x80
 80016fc:	021b      	lsls	r3, r3, #8
 80016fe:	429a      	cmp	r2, r3
 8001700:	d10f      	bne.n	8001722 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2140      	movs	r1, #64	; 0x40
 800170e:	438a      	bics	r2, r1
 8001710:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4957      	ldr	r1, [pc, #348]	; (800187c <HAL_SPI_Receive+0x294>)
 800171e:	400a      	ands	r2, r1
 8001720:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2240      	movs	r2, #64	; 0x40
 800172a:	4013      	ands	r3, r2
 800172c:	2b40      	cmp	r3, #64	; 0x40
 800172e:	d007      	beq.n	8001740 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2140      	movs	r1, #64	; 0x40
 800173c:	430a      	orrs	r2, r1
 800173e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	68da      	ldr	r2, [r3, #12]
 8001744:	23e0      	movs	r3, #224	; 0xe0
 8001746:	00db      	lsls	r3, r3, #3
 8001748:	429a      	cmp	r2, r3
 800174a:	d900      	bls.n	800174e <HAL_SPI_Receive+0x166>
 800174c:	e069      	b.n	8001822 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800174e:	e031      	b.n	80017b4 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	2201      	movs	r2, #1
 8001758:	4013      	ands	r3, r2
 800175a:	2b01      	cmp	r3, #1
 800175c:	d117      	bne.n	800178e <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	330c      	adds	r3, #12
 8001764:	001a      	movs	r2, r3
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176a:	7812      	ldrb	r2, [r2, #0]
 800176c:	b2d2      	uxtb	r2, r2
 800176e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001774:	1c5a      	adds	r2, r3, #1
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2246      	movs	r2, #70	; 0x46
 800177e:	5a9b      	ldrh	r3, [r3, r2]
 8001780:	b29b      	uxth	r3, r3
 8001782:	3b01      	subs	r3, #1
 8001784:	b299      	uxth	r1, r3
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	2246      	movs	r2, #70	; 0x46
 800178a:	5299      	strh	r1, [r3, r2]
 800178c:	e012      	b.n	80017b4 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800178e:	f7fe ff49 	bl	8000624 <HAL_GetTick>
 8001792:	0002      	movs	r2, r0
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	683a      	ldr	r2, [r7, #0]
 800179a:	429a      	cmp	r2, r3
 800179c:	d802      	bhi.n	80017a4 <HAL_SPI_Receive+0x1bc>
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	3301      	adds	r3, #1
 80017a2:	d102      	bne.n	80017aa <HAL_SPI_Receive+0x1c2>
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d104      	bne.n	80017b4 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 80017aa:	2317      	movs	r3, #23
 80017ac:	18fb      	adds	r3, r7, r3
 80017ae:	2203      	movs	r2, #3
 80017b0:	701a      	strb	r2, [r3, #0]
          goto error;
 80017b2:	e051      	b.n	8001858 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2246      	movs	r2, #70	; 0x46
 80017b8:	5a9b      	ldrh	r3, [r3, r2]
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d1c7      	bne.n	8001750 <HAL_SPI_Receive+0x168>
 80017c0:	e035      	b.n	800182e <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	2201      	movs	r2, #1
 80017ca:	4013      	ands	r3, r2
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d115      	bne.n	80017fc <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	68da      	ldr	r2, [r3, #12]
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017da:	b292      	uxth	r2, r2
 80017dc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	1c9a      	adds	r2, r3, #2
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2246      	movs	r2, #70	; 0x46
 80017ec:	5a9b      	ldrh	r3, [r3, r2]
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	3b01      	subs	r3, #1
 80017f2:	b299      	uxth	r1, r3
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2246      	movs	r2, #70	; 0x46
 80017f8:	5299      	strh	r1, [r3, r2]
 80017fa:	e012      	b.n	8001822 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80017fc:	f7fe ff12 	bl	8000624 <HAL_GetTick>
 8001800:	0002      	movs	r2, r0
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	683a      	ldr	r2, [r7, #0]
 8001808:	429a      	cmp	r2, r3
 800180a:	d802      	bhi.n	8001812 <HAL_SPI_Receive+0x22a>
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	3301      	adds	r3, #1
 8001810:	d102      	bne.n	8001818 <HAL_SPI_Receive+0x230>
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d104      	bne.n	8001822 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8001818:	2317      	movs	r3, #23
 800181a:	18fb      	adds	r3, r7, r3
 800181c:	2203      	movs	r2, #3
 800181e:	701a      	strb	r2, [r3, #0]
          goto error;
 8001820:	e01a      	b.n	8001858 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2246      	movs	r2, #70	; 0x46
 8001826:	5a9b      	ldrh	r3, [r3, r2]
 8001828:	b29b      	uxth	r3, r3
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1c9      	bne.n	80017c2 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	6839      	ldr	r1, [r7, #0]
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	0018      	movs	r0, r3
 8001836:	f000 fb25 	bl	8001e84 <SPI_EndRxTransaction>
 800183a:	1e03      	subs	r3, r0, #0
 800183c:	d002      	beq.n	8001844 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2220      	movs	r2, #32
 8001842:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001848:	2b00      	cmp	r3, #0
 800184a:	d004      	beq.n	8001856 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 800184c:	2317      	movs	r3, #23
 800184e:	18fb      	adds	r3, r7, r3
 8001850:	2201      	movs	r2, #1
 8001852:	701a      	strb	r2, [r3, #0]
 8001854:	e000      	b.n	8001858 <HAL_SPI_Receive+0x270>
  }

error :
 8001856:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	225d      	movs	r2, #93	; 0x5d
 800185c:	2101      	movs	r1, #1
 800185e:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	225c      	movs	r2, #92	; 0x5c
 8001864:	2100      	movs	r1, #0
 8001866:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001868:	2317      	movs	r3, #23
 800186a:	18fb      	adds	r3, r7, r3
 800186c:	781b      	ldrb	r3, [r3, #0]
}
 800186e:	0018      	movs	r0, r3
 8001870:	46bd      	mov	sp, r7
 8001872:	b007      	add	sp, #28
 8001874:	bd90      	pop	{r4, r7, pc}
 8001876:	46c0      	nop			; (mov r8, r8)
 8001878:	ffffefff 	.word	0xffffefff
 800187c:	ffffbfff 	.word	0xffffbfff

08001880 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b08a      	sub	sp, #40	; 0x28
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
 800188c:	001a      	movs	r2, r3
 800188e:	1cbb      	adds	r3, r7, #2
 8001890:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001892:	2301      	movs	r3, #1
 8001894:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001896:	2323      	movs	r3, #35	; 0x23
 8001898:	18fb      	adds	r3, r7, r3
 800189a:	2200      	movs	r2, #0
 800189c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	225c      	movs	r2, #92	; 0x5c
 80018a2:	5c9b      	ldrb	r3, [r3, r2]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d101      	bne.n	80018ac <HAL_SPI_TransmitReceive+0x2c>
 80018a8:	2302      	movs	r3, #2
 80018aa:	e1b5      	b.n	8001c18 <HAL_SPI_TransmitReceive+0x398>
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	225c      	movs	r2, #92	; 0x5c
 80018b0:	2101      	movs	r1, #1
 80018b2:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80018b4:	f7fe feb6 	bl	8000624 <HAL_GetTick>
 80018b8:	0003      	movs	r3, r0
 80018ba:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80018bc:	201b      	movs	r0, #27
 80018be:	183b      	adds	r3, r7, r0
 80018c0:	68fa      	ldr	r2, [r7, #12]
 80018c2:	215d      	movs	r1, #93	; 0x5d
 80018c4:	5c52      	ldrb	r2, [r2, r1]
 80018c6:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80018ce:	2312      	movs	r3, #18
 80018d0:	18fb      	adds	r3, r7, r3
 80018d2:	1cba      	adds	r2, r7, #2
 80018d4:	8812      	ldrh	r2, [r2, #0]
 80018d6:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80018d8:	183b      	adds	r3, r7, r0
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d011      	beq.n	8001904 <HAL_SPI_TransmitReceive+0x84>
 80018e0:	697a      	ldr	r2, [r7, #20]
 80018e2:	2382      	movs	r3, #130	; 0x82
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d107      	bne.n	80018fa <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d103      	bne.n	80018fa <HAL_SPI_TransmitReceive+0x7a>
 80018f2:	183b      	adds	r3, r7, r0
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	2b04      	cmp	r3, #4
 80018f8:	d004      	beq.n	8001904 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80018fa:	2323      	movs	r3, #35	; 0x23
 80018fc:	18fb      	adds	r3, r7, r3
 80018fe:	2202      	movs	r2, #2
 8001900:	701a      	strb	r2, [r3, #0]
    goto error;
 8001902:	e17e      	b.n	8001c02 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d006      	beq.n	8001918 <HAL_SPI_TransmitReceive+0x98>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d003      	beq.n	8001918 <HAL_SPI_TransmitReceive+0x98>
 8001910:	1cbb      	adds	r3, r7, #2
 8001912:	881b      	ldrh	r3, [r3, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d104      	bne.n	8001922 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8001918:	2323      	movs	r3, #35	; 0x23
 800191a:	18fb      	adds	r3, r7, r3
 800191c:	2201      	movs	r2, #1
 800191e:	701a      	strb	r2, [r3, #0]
    goto error;
 8001920:	e16f      	b.n	8001c02 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	225d      	movs	r2, #93	; 0x5d
 8001926:	5c9b      	ldrb	r3, [r3, r2]
 8001928:	b2db      	uxtb	r3, r3
 800192a:	2b04      	cmp	r3, #4
 800192c:	d003      	beq.n	8001936 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	225d      	movs	r2, #93	; 0x5d
 8001932:	2105      	movs	r1, #5
 8001934:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2200      	movs	r2, #0
 800193a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	1cba      	adds	r2, r7, #2
 8001946:	2146      	movs	r1, #70	; 0x46
 8001948:	8812      	ldrh	r2, [r2, #0]
 800194a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	1cba      	adds	r2, r7, #2
 8001950:	2144      	movs	r1, #68	; 0x44
 8001952:	8812      	ldrh	r2, [r2, #0]
 8001954:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	68ba      	ldr	r2, [r7, #8]
 800195a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	1cba      	adds	r2, r7, #2
 8001960:	8812      	ldrh	r2, [r2, #0]
 8001962:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	1cba      	adds	r2, r7, #2
 8001968:	8812      	ldrh	r2, [r2, #0]
 800196a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2200      	movs	r2, #0
 8001970:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2200      	movs	r2, #0
 8001976:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	68da      	ldr	r2, [r3, #12]
 800197c:	23e0      	movs	r3, #224	; 0xe0
 800197e:	00db      	lsls	r3, r3, #3
 8001980:	429a      	cmp	r2, r3
 8001982:	d908      	bls.n	8001996 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	685a      	ldr	r2, [r3, #4]
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	49a4      	ldr	r1, [pc, #656]	; (8001c20 <HAL_SPI_TransmitReceive+0x3a0>)
 8001990:	400a      	ands	r2, r1
 8001992:	605a      	str	r2, [r3, #4]
 8001994:	e008      	b.n	80019a8 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	685a      	ldr	r2, [r3, #4]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2180      	movs	r1, #128	; 0x80
 80019a2:	0149      	lsls	r1, r1, #5
 80019a4:	430a      	orrs	r2, r1
 80019a6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2240      	movs	r2, #64	; 0x40
 80019b0:	4013      	ands	r3, r2
 80019b2:	2b40      	cmp	r3, #64	; 0x40
 80019b4:	d007      	beq.n	80019c6 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2140      	movs	r1, #64	; 0x40
 80019c2:	430a      	orrs	r2, r1
 80019c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	68da      	ldr	r2, [r3, #12]
 80019ca:	23e0      	movs	r3, #224	; 0xe0
 80019cc:	00db      	lsls	r3, r3, #3
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d800      	bhi.n	80019d4 <HAL_SPI_TransmitReceive+0x154>
 80019d2:	e07f      	b.n	8001ad4 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d005      	beq.n	80019e8 <HAL_SPI_TransmitReceive+0x168>
 80019dc:	2312      	movs	r3, #18
 80019de:	18fb      	adds	r3, r7, r3
 80019e0:	881b      	ldrh	r3, [r3, #0]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d000      	beq.n	80019e8 <HAL_SPI_TransmitReceive+0x168>
 80019e6:	e069      	b.n	8001abc <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019ec:	881a      	ldrh	r2, [r3, #0]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019f8:	1c9a      	adds	r2, r3, #2
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	3b01      	subs	r3, #1
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001a0c:	e056      	b.n	8001abc <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	2202      	movs	r2, #2
 8001a16:	4013      	ands	r3, r2
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d11b      	bne.n	8001a54 <HAL_SPI_TransmitReceive+0x1d4>
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d016      	beq.n	8001a54 <HAL_SPI_TransmitReceive+0x1d4>
 8001a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d113      	bne.n	8001a54 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a30:	881a      	ldrh	r2, [r3, #0]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a3c:	1c9a      	adds	r2, r3, #2
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	3b01      	subs	r3, #1
 8001a4a:	b29a      	uxth	r2, r3
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001a50:	2300      	movs	r3, #0
 8001a52:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d11c      	bne.n	8001a9c <HAL_SPI_TransmitReceive+0x21c>
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2246      	movs	r2, #70	; 0x46
 8001a66:	5a9b      	ldrh	r3, [r3, r2]
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d016      	beq.n	8001a9c <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	68da      	ldr	r2, [r3, #12]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a78:	b292      	uxth	r2, r2
 8001a7a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a80:	1c9a      	adds	r2, r3, #2
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2246      	movs	r2, #70	; 0x46
 8001a8a:	5a9b      	ldrh	r3, [r3, r2]
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	b299      	uxth	r1, r3
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2246      	movs	r2, #70	; 0x46
 8001a96:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001a9c:	f7fe fdc2 	bl	8000624 <HAL_GetTick>
 8001aa0:	0002      	movs	r2, r0
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d807      	bhi.n	8001abc <HAL_SPI_TransmitReceive+0x23c>
 8001aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aae:	3301      	adds	r3, #1
 8001ab0:	d004      	beq.n	8001abc <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8001ab2:	2323      	movs	r3, #35	; 0x23
 8001ab4:	18fb      	adds	r3, r7, r3
 8001ab6:	2203      	movs	r2, #3
 8001ab8:	701a      	strb	r2, [r3, #0]
        goto error;
 8001aba:	e0a2      	b.n	8001c02 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d1a3      	bne.n	8001a0e <HAL_SPI_TransmitReceive+0x18e>
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2246      	movs	r2, #70	; 0x46
 8001aca:	5a9b      	ldrh	r3, [r3, r2]
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d19d      	bne.n	8001a0e <HAL_SPI_TransmitReceive+0x18e>
 8001ad2:	e085      	b.n	8001be0 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d005      	beq.n	8001ae8 <HAL_SPI_TransmitReceive+0x268>
 8001adc:	2312      	movs	r3, #18
 8001ade:	18fb      	adds	r3, r7, r3
 8001ae0:	881b      	ldrh	r3, [r3, #0]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d000      	beq.n	8001ae8 <HAL_SPI_TransmitReceive+0x268>
 8001ae6:	e070      	b.n	8001bca <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	330c      	adds	r3, #12
 8001af2:	7812      	ldrb	r2, [r2, #0]
 8001af4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001afa:	1c5a      	adds	r2, r3, #1
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	3b01      	subs	r3, #1
 8001b08:	b29a      	uxth	r2, r3
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001b0e:	e05c      	b.n	8001bca <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	2202      	movs	r2, #2
 8001b18:	4013      	ands	r3, r2
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d11c      	bne.n	8001b58 <HAL_SPI_TransmitReceive+0x2d8>
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d017      	beq.n	8001b58 <HAL_SPI_TransmitReceive+0x2d8>
 8001b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d114      	bne.n	8001b58 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	330c      	adds	r3, #12
 8001b38:	7812      	ldrb	r2, [r2, #0]
 8001b3a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b40:	1c5a      	adds	r2, r3, #1
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	3b01      	subs	r3, #1
 8001b4e:	b29a      	uxth	r2, r3
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001b54:	2300      	movs	r3, #0
 8001b56:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	4013      	ands	r3, r2
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d11e      	bne.n	8001ba4 <HAL_SPI_TransmitReceive+0x324>
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2246      	movs	r2, #70	; 0x46
 8001b6a:	5a9b      	ldrh	r3, [r3, r2]
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d018      	beq.n	8001ba4 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	330c      	adds	r3, #12
 8001b78:	001a      	movs	r2, r3
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7e:	7812      	ldrb	r2, [r2, #0]
 8001b80:	b2d2      	uxtb	r2, r2
 8001b82:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b88:	1c5a      	adds	r2, r3, #1
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2246      	movs	r2, #70	; 0x46
 8001b92:	5a9b      	ldrh	r3, [r3, r2]
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	3b01      	subs	r3, #1
 8001b98:	b299      	uxth	r1, r3
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2246      	movs	r2, #70	; 0x46
 8001b9e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001ba4:	f7fe fd3e 	bl	8000624 <HAL_GetTick>
 8001ba8:	0002      	movs	r2, r0
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d802      	bhi.n	8001bba <HAL_SPI_TransmitReceive+0x33a>
 8001bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	d102      	bne.n	8001bc0 <HAL_SPI_TransmitReceive+0x340>
 8001bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d104      	bne.n	8001bca <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8001bc0:	2323      	movs	r3, #35	; 0x23
 8001bc2:	18fb      	adds	r3, r7, r3
 8001bc4:	2203      	movs	r2, #3
 8001bc6:	701a      	strb	r2, [r3, #0]
        goto error;
 8001bc8:	e01b      	b.n	8001c02 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d19d      	bne.n	8001b10 <HAL_SPI_TransmitReceive+0x290>
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2246      	movs	r2, #70	; 0x46
 8001bd8:	5a9b      	ldrh	r3, [r3, r2]
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d197      	bne.n	8001b10 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001be0:	69fa      	ldr	r2, [r7, #28]
 8001be2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	0018      	movs	r0, r3
 8001be8:	f000 f9aa 	bl	8001f40 <SPI_EndRxTxTransaction>
 8001bec:	1e03      	subs	r3, r0, #0
 8001bee:	d007      	beq.n	8001c00 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8001bf0:	2323      	movs	r3, #35	; 0x23
 8001bf2:	18fb      	adds	r3, r7, r3
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2220      	movs	r2, #32
 8001bfc:	661a      	str	r2, [r3, #96]	; 0x60
 8001bfe:	e000      	b.n	8001c02 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8001c00:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	225d      	movs	r2, #93	; 0x5d
 8001c06:	2101      	movs	r1, #1
 8001c08:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	225c      	movs	r2, #92	; 0x5c
 8001c0e:	2100      	movs	r1, #0
 8001c10:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001c12:	2323      	movs	r3, #35	; 0x23
 8001c14:	18fb      	adds	r3, r7, r3
 8001c16:	781b      	ldrb	r3, [r3, #0]
}
 8001c18:	0018      	movs	r0, r3
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	b00a      	add	sp, #40	; 0x28
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	ffffefff 	.word	0xffffefff

08001c24 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b088      	sub	sp, #32
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	603b      	str	r3, [r7, #0]
 8001c30:	1dfb      	adds	r3, r7, #7
 8001c32:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001c34:	f7fe fcf6 	bl	8000624 <HAL_GetTick>
 8001c38:	0002      	movs	r2, r0
 8001c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c3c:	1a9b      	subs	r3, r3, r2
 8001c3e:	683a      	ldr	r2, [r7, #0]
 8001c40:	18d3      	adds	r3, r2, r3
 8001c42:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001c44:	f7fe fcee 	bl	8000624 <HAL_GetTick>
 8001c48:	0003      	movs	r3, r0
 8001c4a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001c4c:	4b3a      	ldr	r3, [pc, #232]	; (8001d38 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	015b      	lsls	r3, r3, #5
 8001c52:	0d1b      	lsrs	r3, r3, #20
 8001c54:	69fa      	ldr	r2, [r7, #28]
 8001c56:	4353      	muls	r3, r2
 8001c58:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001c5a:	e058      	b.n	8001d0e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	d055      	beq.n	8001d0e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001c62:	f7fe fcdf 	bl	8000624 <HAL_GetTick>
 8001c66:	0002      	movs	r2, r0
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	69fa      	ldr	r2, [r7, #28]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d902      	bls.n	8001c78 <SPI_WaitFlagStateUntilTimeout+0x54>
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d142      	bne.n	8001cfe <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	685a      	ldr	r2, [r3, #4]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	21e0      	movs	r1, #224	; 0xe0
 8001c84:	438a      	bics	r2, r1
 8001c86:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	685a      	ldr	r2, [r3, #4]
 8001c8c:	2382      	movs	r3, #130	; 0x82
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d113      	bne.n	8001cbc <SPI_WaitFlagStateUntilTimeout+0x98>
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	689a      	ldr	r2, [r3, #8]
 8001c98:	2380      	movs	r3, #128	; 0x80
 8001c9a:	021b      	lsls	r3, r3, #8
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d005      	beq.n	8001cac <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	689a      	ldr	r2, [r3, #8]
 8001ca4:	2380      	movs	r3, #128	; 0x80
 8001ca6:	00db      	lsls	r3, r3, #3
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d107      	bne.n	8001cbc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2140      	movs	r1, #64	; 0x40
 8001cb8:	438a      	bics	r2, r1
 8001cba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cc0:	2380      	movs	r3, #128	; 0x80
 8001cc2:	019b      	lsls	r3, r3, #6
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d110      	bne.n	8001cea <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	491a      	ldr	r1, [pc, #104]	; (8001d3c <SPI_WaitFlagStateUntilTimeout+0x118>)
 8001cd4:	400a      	ands	r2, r1
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2180      	movs	r1, #128	; 0x80
 8001ce4:	0189      	lsls	r1, r1, #6
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	225d      	movs	r2, #93	; 0x5d
 8001cee:	2101      	movs	r1, #1
 8001cf0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	225c      	movs	r2, #92	; 0x5c
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e017      	b.n	8001d2e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d101      	bne.n	8001d08 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8001d04:	2300      	movs	r3, #0
 8001d06:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	68ba      	ldr	r2, [r7, #8]
 8001d16:	4013      	ands	r3, r2
 8001d18:	68ba      	ldr	r2, [r7, #8]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	425a      	negs	r2, r3
 8001d1e:	4153      	adcs	r3, r2
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	001a      	movs	r2, r3
 8001d24:	1dfb      	adds	r3, r7, #7
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d197      	bne.n	8001c5c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	0018      	movs	r0, r3
 8001d30:	46bd      	mov	sp, r7
 8001d32:	b008      	add	sp, #32
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	46c0      	nop			; (mov r8, r8)
 8001d38:	20000000 	.word	0x20000000
 8001d3c:	ffffdfff 	.word	0xffffdfff

08001d40 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b08a      	sub	sp, #40	; 0x28
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	607a      	str	r2, [r7, #4]
 8001d4c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8001d4e:	2317      	movs	r3, #23
 8001d50:	18fb      	adds	r3, r7, r3
 8001d52:	2200      	movs	r2, #0
 8001d54:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8001d56:	f7fe fc65 	bl	8000624 <HAL_GetTick>
 8001d5a:	0002      	movs	r2, r0
 8001d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d5e:	1a9b      	subs	r3, r3, r2
 8001d60:	683a      	ldr	r2, [r7, #0]
 8001d62:	18d3      	adds	r3, r2, r3
 8001d64:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8001d66:	f7fe fc5d 	bl	8000624 <HAL_GetTick>
 8001d6a:	0003      	movs	r3, r0
 8001d6c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	330c      	adds	r3, #12
 8001d74:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8001d76:	4b41      	ldr	r3, [pc, #260]	; (8001e7c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	0013      	movs	r3, r2
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	189b      	adds	r3, r3, r2
 8001d80:	00da      	lsls	r2, r3, #3
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	0d1b      	lsrs	r3, r3, #20
 8001d86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d88:	4353      	muls	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8001d8c:	e068      	b.n	8001e60 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001d8e:	68ba      	ldr	r2, [r7, #8]
 8001d90:	23c0      	movs	r3, #192	; 0xc0
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d10a      	bne.n	8001dae <SPI_WaitFifoStateUntilTimeout+0x6e>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d107      	bne.n	8001dae <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	b2da      	uxtb	r2, r3
 8001da4:	2117      	movs	r1, #23
 8001da6:	187b      	adds	r3, r7, r1
 8001da8:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8001daa:	187b      	adds	r3, r7, r1
 8001dac:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	3301      	adds	r3, #1
 8001db2:	d055      	beq.n	8001e60 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001db4:	f7fe fc36 	bl	8000624 <HAL_GetTick>
 8001db8:	0002      	movs	r2, r0
 8001dba:	6a3b      	ldr	r3, [r7, #32]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d902      	bls.n	8001dca <SPI_WaitFifoStateUntilTimeout+0x8a>
 8001dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d142      	bne.n	8001e50 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	685a      	ldr	r2, [r3, #4]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	21e0      	movs	r1, #224	; 0xe0
 8001dd6:	438a      	bics	r2, r1
 8001dd8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	685a      	ldr	r2, [r3, #4]
 8001dde:	2382      	movs	r3, #130	; 0x82
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d113      	bne.n	8001e0e <SPI_WaitFifoStateUntilTimeout+0xce>
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	689a      	ldr	r2, [r3, #8]
 8001dea:	2380      	movs	r3, #128	; 0x80
 8001dec:	021b      	lsls	r3, r3, #8
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d005      	beq.n	8001dfe <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	689a      	ldr	r2, [r3, #8]
 8001df6:	2380      	movs	r3, #128	; 0x80
 8001df8:	00db      	lsls	r3, r3, #3
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d107      	bne.n	8001e0e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2140      	movs	r1, #64	; 0x40
 8001e0a:	438a      	bics	r2, r1
 8001e0c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e12:	2380      	movs	r3, #128	; 0x80
 8001e14:	019b      	lsls	r3, r3, #6
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d110      	bne.n	8001e3c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4916      	ldr	r1, [pc, #88]	; (8001e80 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8001e26:	400a      	ands	r2, r1
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2180      	movs	r1, #128	; 0x80
 8001e36:	0189      	lsls	r1, r1, #6
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	225d      	movs	r2, #93	; 0x5d
 8001e40:	2101      	movs	r1, #1
 8001e42:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	225c      	movs	r2, #92	; 0x5c
 8001e48:	2100      	movs	r1, #0
 8001e4a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e010      	b.n	8001e72 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d101      	bne.n	8001e5a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8001e56:	2300      	movs	r3, #0
 8001e58:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	68ba      	ldr	r2, [r7, #8]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d18e      	bne.n	8001d8e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	0018      	movs	r0, r3
 8001e74:	46bd      	mov	sp, r7
 8001e76:	b00a      	add	sp, #40	; 0x28
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	46c0      	nop			; (mov r8, r8)
 8001e7c:	20000000 	.word	0x20000000
 8001e80:	ffffdfff 	.word	0xffffdfff

08001e84 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af02      	add	r7, sp, #8
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	685a      	ldr	r2, [r3, #4]
 8001e94:	2382      	movs	r3, #130	; 0x82
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d113      	bne.n	8001ec4 <SPI_EndRxTransaction+0x40>
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	689a      	ldr	r2, [r3, #8]
 8001ea0:	2380      	movs	r3, #128	; 0x80
 8001ea2:	021b      	lsls	r3, r3, #8
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d005      	beq.n	8001eb4 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	689a      	ldr	r2, [r3, #8]
 8001eac:	2380      	movs	r3, #128	; 0x80
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d107      	bne.n	8001ec4 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2140      	movs	r1, #64	; 0x40
 8001ec0:	438a      	bics	r2, r1
 8001ec2:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001ec4:	68ba      	ldr	r2, [r7, #8]
 8001ec6:	68f8      	ldr	r0, [r7, #12]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	9300      	str	r3, [sp, #0]
 8001ecc:	0013      	movs	r3, r2
 8001ece:	2200      	movs	r2, #0
 8001ed0:	2180      	movs	r1, #128	; 0x80
 8001ed2:	f7ff fea7 	bl	8001c24 <SPI_WaitFlagStateUntilTimeout>
 8001ed6:	1e03      	subs	r3, r0, #0
 8001ed8:	d007      	beq.n	8001eea <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ede:	2220      	movs	r2, #32
 8001ee0:	431a      	orrs	r2, r3
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e026      	b.n	8001f38 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	685a      	ldr	r2, [r3, #4]
 8001eee:	2382      	movs	r3, #130	; 0x82
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d11f      	bne.n	8001f36 <SPI_EndRxTransaction+0xb2>
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	689a      	ldr	r2, [r3, #8]
 8001efa:	2380      	movs	r3, #128	; 0x80
 8001efc:	021b      	lsls	r3, r3, #8
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d005      	beq.n	8001f0e <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	689a      	ldr	r2, [r3, #8]
 8001f06:	2380      	movs	r3, #128	; 0x80
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d113      	bne.n	8001f36 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001f0e:	68ba      	ldr	r2, [r7, #8]
 8001f10:	23c0      	movs	r3, #192	; 0xc0
 8001f12:	00d9      	lsls	r1, r3, #3
 8001f14:	68f8      	ldr	r0, [r7, #12]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	9300      	str	r3, [sp, #0]
 8001f1a:	0013      	movs	r3, r2
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f7ff ff0f 	bl	8001d40 <SPI_WaitFifoStateUntilTimeout>
 8001f22:	1e03      	subs	r3, r0, #0
 8001f24:	d007      	beq.n	8001f36 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f2a:	2220      	movs	r2, #32
 8001f2c:	431a      	orrs	r2, r3
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e000      	b.n	8001f38 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	0018      	movs	r0, r3
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	b004      	add	sp, #16
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af02      	add	r7, sp, #8
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001f4c:	68ba      	ldr	r2, [r7, #8]
 8001f4e:	23c0      	movs	r3, #192	; 0xc0
 8001f50:	0159      	lsls	r1, r3, #5
 8001f52:	68f8      	ldr	r0, [r7, #12]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	9300      	str	r3, [sp, #0]
 8001f58:	0013      	movs	r3, r2
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f7ff fef0 	bl	8001d40 <SPI_WaitFifoStateUntilTimeout>
 8001f60:	1e03      	subs	r3, r0, #0
 8001f62:	d007      	beq.n	8001f74 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f68:	2220      	movs	r2, #32
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e027      	b.n	8001fc4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001f74:	68ba      	ldr	r2, [r7, #8]
 8001f76:	68f8      	ldr	r0, [r7, #12]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	9300      	str	r3, [sp, #0]
 8001f7c:	0013      	movs	r3, r2
 8001f7e:	2200      	movs	r2, #0
 8001f80:	2180      	movs	r1, #128	; 0x80
 8001f82:	f7ff fe4f 	bl	8001c24 <SPI_WaitFlagStateUntilTimeout>
 8001f86:	1e03      	subs	r3, r0, #0
 8001f88:	d007      	beq.n	8001f9a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f8e:	2220      	movs	r2, #32
 8001f90:	431a      	orrs	r2, r3
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e014      	b.n	8001fc4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001f9a:	68ba      	ldr	r2, [r7, #8]
 8001f9c:	23c0      	movs	r3, #192	; 0xc0
 8001f9e:	00d9      	lsls	r1, r3, #3
 8001fa0:	68f8      	ldr	r0, [r7, #12]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	9300      	str	r3, [sp, #0]
 8001fa6:	0013      	movs	r3, r2
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f7ff fec9 	bl	8001d40 <SPI_WaitFifoStateUntilTimeout>
 8001fae:	1e03      	subs	r3, r0, #0
 8001fb0:	d007      	beq.n	8001fc2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fb6:	2220      	movs	r2, #32
 8001fb8:	431a      	orrs	r2, r3
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e000      	b.n	8001fc4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
}
 8001fc4:	0018      	movs	r0, r3
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	b004      	add	sp, #16
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <memset>:
 8001fcc:	0003      	movs	r3, r0
 8001fce:	1882      	adds	r2, r0, r2
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d100      	bne.n	8001fd6 <memset+0xa>
 8001fd4:	4770      	bx	lr
 8001fd6:	7019      	strb	r1, [r3, #0]
 8001fd8:	3301      	adds	r3, #1
 8001fda:	e7f9      	b.n	8001fd0 <memset+0x4>

08001fdc <__libc_init_array>:
 8001fdc:	b570      	push	{r4, r5, r6, lr}
 8001fde:	2600      	movs	r6, #0
 8001fe0:	4c0c      	ldr	r4, [pc, #48]	; (8002014 <__libc_init_array+0x38>)
 8001fe2:	4d0d      	ldr	r5, [pc, #52]	; (8002018 <__libc_init_array+0x3c>)
 8001fe4:	1b64      	subs	r4, r4, r5
 8001fe6:	10a4      	asrs	r4, r4, #2
 8001fe8:	42a6      	cmp	r6, r4
 8001fea:	d109      	bne.n	8002000 <__libc_init_array+0x24>
 8001fec:	2600      	movs	r6, #0
 8001fee:	f000 f819 	bl	8002024 <_init>
 8001ff2:	4c0a      	ldr	r4, [pc, #40]	; (800201c <__libc_init_array+0x40>)
 8001ff4:	4d0a      	ldr	r5, [pc, #40]	; (8002020 <__libc_init_array+0x44>)
 8001ff6:	1b64      	subs	r4, r4, r5
 8001ff8:	10a4      	asrs	r4, r4, #2
 8001ffa:	42a6      	cmp	r6, r4
 8001ffc:	d105      	bne.n	800200a <__libc_init_array+0x2e>
 8001ffe:	bd70      	pop	{r4, r5, r6, pc}
 8002000:	00b3      	lsls	r3, r6, #2
 8002002:	58eb      	ldr	r3, [r5, r3]
 8002004:	4798      	blx	r3
 8002006:	3601      	adds	r6, #1
 8002008:	e7ee      	b.n	8001fe8 <__libc_init_array+0xc>
 800200a:	00b3      	lsls	r3, r6, #2
 800200c:	58eb      	ldr	r3, [r5, r3]
 800200e:	4798      	blx	r3
 8002010:	3601      	adds	r6, #1
 8002012:	e7f2      	b.n	8001ffa <__libc_init_array+0x1e>
 8002014:	0800207c 	.word	0x0800207c
 8002018:	0800207c 	.word	0x0800207c
 800201c:	08002080 	.word	0x08002080
 8002020:	0800207c 	.word	0x0800207c

08002024 <_init>:
 8002024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002026:	46c0      	nop			; (mov r8, r8)
 8002028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800202a:	bc08      	pop	{r3}
 800202c:	469e      	mov	lr, r3
 800202e:	4770      	bx	lr

08002030 <_fini>:
 8002030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002032:	46c0      	nop			; (mov r8, r8)
 8002034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002036:	bc08      	pop	{r3}
 8002038:	469e      	mov	lr, r3
 800203a:	4770      	bx	lr
