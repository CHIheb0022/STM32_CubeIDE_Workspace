
MPU - Based Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036f8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003880  08003880  00013880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038c0  080038c0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080038c0  080038c0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080038c0  080038c0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038c0  080038c0  000138c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038c4  080038c4  000138c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080038c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  2000000c  080038d4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  080038d4  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008e52  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018f2  00000000  00000000  00028ed1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000970  00000000  00000000  0002a7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000072b  00000000  00000000  0002b138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024b94  00000000  00000000  0002b863  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b4f5  00000000  00000000  000503f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e18ae  00000000  00000000  0005b8ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000026bc  00000000  00000000  0013d19c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000088  00000000  00000000  0013f858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003868 	.word	0x08003868

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003868 	.word	0x08003868

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a08:	f000 faee 	bl	8000fe8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a0c:	f000 f816 	bl	8000a3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a10:	f000 f8a6 	bl	8000b60 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a14:	f000 f864 	bl	8000ae0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  MPU6050_Init();
 8000a18:	f000 f8ba 	bl	8000b90 <MPU6050_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	MPU6050_Read_Accel(Acc_val);
 8000a1c:	4805      	ldr	r0, [pc, #20]	; (8000a34 <main+0x30>)
 8000a1e:	f000 f911 	bl	8000c44 <MPU6050_Read_Accel>
	MPU6050_Read_Gyro(Gyro_val);
 8000a22:	4805      	ldr	r0, [pc, #20]	; (8000a38 <main+0x34>)
 8000a24:	f000 f980 	bl	8000d28 <MPU6050_Read_Gyro>
	HAL_Delay(1000);
 8000a28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a2c:	f000 fb58 	bl	80010e0 <HAL_Delay>
	MPU6050_Read_Accel(Acc_val);
 8000a30:	e7f4      	b.n	8000a1c <main+0x18>
 8000a32:	bf00      	nop
 8000a34:	2000007c 	.word	0x2000007c
 8000a38:	20000088 	.word	0x20000088

08000a3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b096      	sub	sp, #88	; 0x58
 8000a40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a42:	f107 0314 	add.w	r3, r7, #20
 8000a46:	2244      	movs	r2, #68	; 0x44
 8000a48:	2100      	movs	r1, #0
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f002 fee0 	bl	8003810 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a50:	463b      	mov	r3, r7
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
 8000a58:	609a      	str	r2, [r3, #8]
 8000a5a:	60da      	str	r2, [r3, #12]
 8000a5c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a5e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a62:	f001 fbfb 	bl	800225c <HAL_PWREx_ControlVoltageScaling>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a6c:	f000 f9ce 	bl	8000e0c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a70:	2302      	movs	r3, #2
 8000a72:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a78:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a7a:	2310      	movs	r3, #16
 8000a7c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a82:	2302      	movs	r3, #2
 8000a84:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a86:	2301      	movs	r3, #1
 8000a88:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000a8a:	230a      	movs	r3, #10
 8000a8c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a8e:	2307      	movs	r3, #7
 8000a90:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a92:	2302      	movs	r3, #2
 8000a94:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a96:	2302      	movs	r3, #2
 8000a98:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a9a:	f107 0314 	add.w	r3, r7, #20
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f001 fc32 	bl	8002308 <HAL_RCC_OscConfig>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000aaa:	f000 f9af 	bl	8000e0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aae:	230f      	movs	r3, #15
 8000ab0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000aba:	2300      	movs	r3, #0
 8000abc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ac2:	463b      	mov	r3, r7
 8000ac4:	2104      	movs	r1, #4
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f001 fffa 	bl	8002ac0 <HAL_RCC_ClockConfig>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ad2:	f000 f99b 	bl	8000e0c <Error_Handler>
  }
}
 8000ad6:	bf00      	nop
 8000ad8:	3758      	adds	r7, #88	; 0x58
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
	...

08000ae0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ae4:	4b1b      	ldr	r3, [pc, #108]	; (8000b54 <MX_I2C1_Init+0x74>)
 8000ae6:	4a1c      	ldr	r2, [pc, #112]	; (8000b58 <MX_I2C1_Init+0x78>)
 8000ae8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000aea:	4b1a      	ldr	r3, [pc, #104]	; (8000b54 <MX_I2C1_Init+0x74>)
 8000aec:	4a1b      	ldr	r2, [pc, #108]	; (8000b5c <MX_I2C1_Init+0x7c>)
 8000aee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000af0:	4b18      	ldr	r3, [pc, #96]	; (8000b54 <MX_I2C1_Init+0x74>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000af6:	4b17      	ldr	r3, [pc, #92]	; (8000b54 <MX_I2C1_Init+0x74>)
 8000af8:	2201      	movs	r2, #1
 8000afa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000afc:	4b15      	ldr	r3, [pc, #84]	; (8000b54 <MX_I2C1_Init+0x74>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b02:	4b14      	ldr	r3, [pc, #80]	; (8000b54 <MX_I2C1_Init+0x74>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b08:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <MX_I2C1_Init+0x74>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b0e:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <MX_I2C1_Init+0x74>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b14:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <MX_I2C1_Init+0x74>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b1a:	480e      	ldr	r0, [pc, #56]	; (8000b54 <MX_I2C1_Init+0x74>)
 8000b1c:	f000 fd94 	bl	8001648 <HAL_I2C_Init>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b26:	f000 f971 	bl	8000e0c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	4809      	ldr	r0, [pc, #36]	; (8000b54 <MX_I2C1_Init+0x74>)
 8000b2e:	f001 faef 	bl	8002110 <HAL_I2CEx_ConfigAnalogFilter>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b38:	f000 f968 	bl	8000e0c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4805      	ldr	r0, [pc, #20]	; (8000b54 <MX_I2C1_Init+0x74>)
 8000b40:	f001 fb31 	bl	80021a6 <HAL_I2CEx_ConfigDigitalFilter>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b4a:	f000 f95f 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20000028 	.word	0x20000028
 8000b58:	40005400 	.word	0x40005400
 8000b5c:	10909cec 	.word	0x10909cec

08000b60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b66:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <MX_GPIO_Init+0x2c>)
 8000b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b6a:	4a08      	ldr	r2, [pc, #32]	; (8000b8c <MX_GPIO_Init+0x2c>)
 8000b6c:	f043 0302 	orr.w	r3, r3, #2
 8000b70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b72:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <MX_GPIO_Init+0x2c>)
 8000b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b76:	f003 0302 	and.w	r3, r3, #2
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b7e:	bf00      	nop
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	40021000 	.word	0x40021000

08000b90 <MPU6050_Init>:

/* USER CODE BEGIN 4 */

void MPU6050_Init(void){
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af04      	add	r7, sp, #16

	uint8_t check, Data;
	// Check device ID "who am i ?"
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, 1000);
 8000b96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b9a:	9302      	str	r3, [sp, #8]
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	9301      	str	r3, [sp, #4]
 8000ba0:	1dfb      	adds	r3, r7, #7
 8000ba2:	9300      	str	r3, [sp, #0]
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	2275      	movs	r2, #117	; 0x75
 8000ba8:	21d0      	movs	r1, #208	; 0xd0
 8000baa:	4824      	ldr	r0, [pc, #144]	; (8000c3c <MPU6050_Init+0xac>)
 8000bac:	f000 fef0 	bl	8001990 <HAL_I2C_Mem_Read>


	if (check == WHO_AM_I_RESPONDE) {// if the device is present
 8000bb0:	79fb      	ldrb	r3, [r7, #7]
 8000bb2:	2b20      	cmp	r3, #32
 8000bb4:	d13e      	bne.n	8000c34 <MPU6050_Init+0xa4>
		x = 1;
 8000bb6:	4b22      	ldr	r3, [pc, #136]	; (8000c40 <MPU6050_Init+0xb0>)
 8000bb8:	2201      	movs	r2, #1
 8000bba:	601a      	str	r2, [r3, #0]

		Data = 0x00;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8000bc0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bc4:	9302      	str	r3, [sp, #8]
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	9301      	str	r3, [sp, #4]
 8000bca:	1dbb      	adds	r3, r7, #6
 8000bcc:	9300      	str	r3, [sp, #0]
 8000bce:	2301      	movs	r3, #1
 8000bd0:	226b      	movs	r2, #107	; 0x6b
 8000bd2:	21d0      	movs	r1, #208	; 0xd0
 8000bd4:	4819      	ldr	r0, [pc, #100]	; (8000c3c <MPU6050_Init+0xac>)
 8000bd6:	f000 fdc7 	bl	8001768 <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 8000bda:	2307      	movs	r3, #7
 8000bdc:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8000bde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000be2:	9302      	str	r3, [sp, #8]
 8000be4:	2301      	movs	r3, #1
 8000be6:	9301      	str	r3, [sp, #4]
 8000be8:	1dbb      	adds	r3, r7, #6
 8000bea:	9300      	str	r3, [sp, #0]
 8000bec:	2301      	movs	r3, #1
 8000bee:	2219      	movs	r2, #25
 8000bf0:	21d0      	movs	r1, #208	; 0xd0
 8000bf2:	4812      	ldr	r0, [pc, #72]	; (8000c3c <MPU6050_Init+0xac>)
 8000bf4:	f000 fdb8 	bl	8001768 <HAL_I2C_Mem_Write>

		//Set Accelometer configuration (+-2g)
		Data = 0x00;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8000bfc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c00:	9302      	str	r3, [sp, #8]
 8000c02:	2301      	movs	r3, #1
 8000c04:	9301      	str	r3, [sp, #4]
 8000c06:	1dbb      	adds	r3, r7, #6
 8000c08:	9300      	str	r3, [sp, #0]
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	221c      	movs	r2, #28
 8000c0e:	21d0      	movs	r1, #208	; 0xd0
 8000c10:	480a      	ldr	r0, [pc, #40]	; (8000c3c <MPU6050_Init+0xac>)
 8000c12:	f000 fda9 	bl	8001768 <HAL_I2C_Mem_Write>

		//Set Gyroscope configuration (+-250 d/s)
		Data = 0x00;
 8000c16:	2300      	movs	r3, #0
 8000c18:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8000c1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c1e:	9302      	str	r3, [sp, #8]
 8000c20:	2301      	movs	r3, #1
 8000c22:	9301      	str	r3, [sp, #4]
 8000c24:	1dbb      	adds	r3, r7, #6
 8000c26:	9300      	str	r3, [sp, #0]
 8000c28:	2301      	movs	r3, #1
 8000c2a:	221b      	movs	r2, #27
 8000c2c:	21d0      	movs	r1, #208	; 0xd0
 8000c2e:	4803      	ldr	r0, [pc, #12]	; (8000c3c <MPU6050_Init+0xac>)
 8000c30:	f000 fd9a 	bl	8001768 <HAL_I2C_Mem_Write>
	}
}
 8000c34:	bf00      	nop
 8000c36:	3708      	adds	r7, #8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	20000028 	.word	0x20000028
 8000c40:	20000094 	.word	0x20000094

08000c44 <MPU6050_Read_Accel>:

void MPU6050_Read_Accel(float* Accel_buff){
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08e      	sub	sp, #56	; 0x38
 8000c48:	af04      	add	r7, sp, #16
 8000c4a:	6078      	str	r0, [r7, #4]
	float Ax,Ay,Az;

	uint8_t Rec_Data[6];
	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8000c4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c50:	9302      	str	r3, [sp, #8]
 8000c52:	2306      	movs	r3, #6
 8000c54:	9301      	str	r3, [sp, #4]
 8000c56:	f107 030c 	add.w	r3, r7, #12
 8000c5a:	9300      	str	r3, [sp, #0]
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	223b      	movs	r2, #59	; 0x3b
 8000c60:	21d0      	movs	r1, #208	; 0xd0
 8000c62:	482e      	ldr	r0, [pc, #184]	; (8000d1c <MPU6050_Read_Accel+0xd8>)
 8000c64:	f000 fe94 	bl	8001990 <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8000c68:	7b3b      	ldrb	r3, [r7, #12]
 8000c6a:	021b      	lsls	r3, r3, #8
 8000c6c:	b21a      	sxth	r2, r3
 8000c6e:	7b7b      	ldrb	r3, [r7, #13]
 8000c70:	b21b      	sxth	r3, r3
 8000c72:	4313      	orrs	r3, r2
 8000c74:	b21b      	sxth	r3, r3
 8000c76:	84fb      	strh	r3, [r7, #38]	; 0x26
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8000c78:	7bbb      	ldrb	r3, [r7, #14]
 8000c7a:	021b      	lsls	r3, r3, #8
 8000c7c:	b21a      	sxth	r2, r3
 8000c7e:	7bfb      	ldrb	r3, [r7, #15]
 8000c80:	b21b      	sxth	r3, r3
 8000c82:	4313      	orrs	r3, r2
 8000c84:	b21b      	sxth	r3, r3
 8000c86:	84bb      	strh	r3, [r7, #36]	; 0x24
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8000c88:	7c3b      	ldrb	r3, [r7, #16]
 8000c8a:	021b      	lsls	r3, r3, #8
 8000c8c:	b21a      	sxth	r2, r3
 8000c8e:	7c7b      	ldrb	r3, [r7, #17]
 8000c90:	b21b      	sxth	r3, r3
 8000c92:	4313      	orrs	r3, r2
 8000c94:	b21b      	sxth	r3, r3
 8000c96:	847b      	strh	r3, [r7, #34]	; 0x22
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	Ax = Accel_X_RAW/16384.0;  // get the float g
 8000c98:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff fbe6 	bl	800046c <__aeabi_i2d>
 8000ca0:	f04f 0200 	mov.w	r2, #0
 8000ca4:	4b1e      	ldr	r3, [pc, #120]	; (8000d20 <MPU6050_Read_Accel+0xdc>)
 8000ca6:	f7ff fd75 	bl	8000794 <__aeabi_ddiv>
 8000caa:	4602      	mov	r2, r0
 8000cac:	460b      	mov	r3, r1
 8000cae:	4610      	mov	r0, r2
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	f7ff fe57 	bl	8000964 <__aeabi_d2f>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	61fb      	str	r3, [r7, #28]
	Ay = Accel_Y_RAW/16384.0;
 8000cba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff fbd5 	bl	800046c <__aeabi_i2d>
 8000cc2:	f04f 0200 	mov.w	r2, #0
 8000cc6:	4b16      	ldr	r3, [pc, #88]	; (8000d20 <MPU6050_Read_Accel+0xdc>)
 8000cc8:	f7ff fd64 	bl	8000794 <__aeabi_ddiv>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	460b      	mov	r3, r1
 8000cd0:	4610      	mov	r0, r2
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	f7ff fe46 	bl	8000964 <__aeabi_d2f>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	61bb      	str	r3, [r7, #24]
	Az = Accel_Z_RAW/16384.0;
 8000cdc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff fbc4 	bl	800046c <__aeabi_i2d>
 8000ce4:	f04f 0200 	mov.w	r2, #0
 8000ce8:	4b0d      	ldr	r3, [pc, #52]	; (8000d20 <MPU6050_Read_Accel+0xdc>)
 8000cea:	f7ff fd53 	bl	8000794 <__aeabi_ddiv>
 8000cee:	4602      	mov	r2, r0
 8000cf0:	460b      	mov	r3, r1
 8000cf2:	4610      	mov	r0, r2
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	f7ff fe35 	bl	8000964 <__aeabi_d2f>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	617b      	str	r3, [r7, #20]

	Accel_buff[0] = Ax;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	69fa      	ldr	r2, [r7, #28]
 8000d02:	601a      	str	r2, [r3, #0]
	Accel_buff[1] = Ay;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	3304      	adds	r3, #4
 8000d08:	69ba      	ldr	r2, [r7, #24]
 8000d0a:	601a      	str	r2, [r3, #0]
	Accel_buff[2] = Az;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	3308      	adds	r3, #8
 8000d10:	697a      	ldr	r2, [r7, #20]
 8000d12:	601a      	str	r2, [r3, #0]
}
 8000d14:	bf00      	nop
 8000d16:	3728      	adds	r7, #40	; 0x28
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	20000028 	.word	0x20000028
 8000d20:	40d00000 	.word	0x40d00000
 8000d24:	00000000 	.word	0x00000000

08000d28 <MPU6050_Read_Gyro>:

void MPU6050_Read_Gyro(float* Gyro_buff){
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08e      	sub	sp, #56	; 0x38
 8000d2c:	af04      	add	r7, sp, #16
 8000d2e:	6078      	str	r0, [r7, #4]

	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from GYRO_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8000d30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d34:	9302      	str	r3, [sp, #8]
 8000d36:	2306      	movs	r3, #6
 8000d38:	9301      	str	r3, [sp, #4]
 8000d3a:	f107 030c 	add.w	r3, r7, #12
 8000d3e:	9300      	str	r3, [sp, #0]
 8000d40:	2301      	movs	r3, #1
 8000d42:	2243      	movs	r2, #67	; 0x43
 8000d44:	21d0      	movs	r1, #208	; 0xd0
 8000d46:	4830      	ldr	r0, [pc, #192]	; (8000e08 <MPU6050_Read_Gyro+0xe0>)
 8000d48:	f000 fe22 	bl	8001990 <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8000d4c:	7b3b      	ldrb	r3, [r7, #12]
 8000d4e:	021b      	lsls	r3, r3, #8
 8000d50:	b21a      	sxth	r2, r3
 8000d52:	7b7b      	ldrb	r3, [r7, #13]
 8000d54:	b21b      	sxth	r3, r3
 8000d56:	4313      	orrs	r3, r2
 8000d58:	b21b      	sxth	r3, r3
 8000d5a:	84fb      	strh	r3, [r7, #38]	; 0x26
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8000d5c:	7bbb      	ldrb	r3, [r7, #14]
 8000d5e:	021b      	lsls	r3, r3, #8
 8000d60:	b21a      	sxth	r2, r3
 8000d62:	7bfb      	ldrb	r3, [r7, #15]
 8000d64:	b21b      	sxth	r3, r3
 8000d66:	4313      	orrs	r3, r2
 8000d68:	b21b      	sxth	r3, r3
 8000d6a:	84bb      	strh	r3, [r7, #36]	; 0x24
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8000d6c:	7c3b      	ldrb	r3, [r7, #16]
 8000d6e:	021b      	lsls	r3, r3, #8
 8000d70:	b21a      	sxth	r2, r3
 8000d72:	7c7b      	ldrb	r3, [r7, #17]
 8000d74:	b21b      	sxth	r3, r3
 8000d76:	4313      	orrs	r3, r2
 8000d78:	b21b      	sxth	r3, r3
 8000d7a:	847b      	strh	r3, [r7, #34]	; 0x22
	/*** convert the RAW values into dps (°/s)
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 131.0
	     for more details check GYRO_CONFIG Register              ****/

	Gx = Gyro_X_RAW/131.0;
 8000d7c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff fb74 	bl	800046c <__aeabi_i2d>
 8000d84:	a31e      	add	r3, pc, #120	; (adr r3, 8000e00 <MPU6050_Read_Gyro+0xd8>)
 8000d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d8a:	f7ff fd03 	bl	8000794 <__aeabi_ddiv>
 8000d8e:	4602      	mov	r2, r0
 8000d90:	460b      	mov	r3, r1
 8000d92:	4610      	mov	r0, r2
 8000d94:	4619      	mov	r1, r3
 8000d96:	f7ff fde5 	bl	8000964 <__aeabi_d2f>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	61fb      	str	r3, [r7, #28]
	Gy = Gyro_Y_RAW/131.0;
 8000d9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff fb63 	bl	800046c <__aeabi_i2d>
 8000da6:	a316      	add	r3, pc, #88	; (adr r3, 8000e00 <MPU6050_Read_Gyro+0xd8>)
 8000da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dac:	f7ff fcf2 	bl	8000794 <__aeabi_ddiv>
 8000db0:	4602      	mov	r2, r0
 8000db2:	460b      	mov	r3, r1
 8000db4:	4610      	mov	r0, r2
 8000db6:	4619      	mov	r1, r3
 8000db8:	f7ff fdd4 	bl	8000964 <__aeabi_d2f>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	61bb      	str	r3, [r7, #24]
	Gz = Gyro_Z_RAW/131.0;
 8000dc0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff fb52 	bl	800046c <__aeabi_i2d>
 8000dc8:	a30d      	add	r3, pc, #52	; (adr r3, 8000e00 <MPU6050_Read_Gyro+0xd8>)
 8000dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dce:	f7ff fce1 	bl	8000794 <__aeabi_ddiv>
 8000dd2:	4602      	mov	r2, r0
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	4610      	mov	r0, r2
 8000dd8:	4619      	mov	r1, r3
 8000dda:	f7ff fdc3 	bl	8000964 <__aeabi_d2f>
 8000dde:	4603      	mov	r3, r0
 8000de0:	617b      	str	r3, [r7, #20]

	Gyro_buff[0] = Gx;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	69fa      	ldr	r2, [r7, #28]
 8000de6:	601a      	str	r2, [r3, #0]
	Gyro_buff[1] = Gy;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3304      	adds	r3, #4
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	601a      	str	r2, [r3, #0]
	Gyro_buff[2] = Gz;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	3308      	adds	r3, #8
 8000df4:	697a      	ldr	r2, [r7, #20]
 8000df6:	601a      	str	r2, [r3, #0]


}
 8000df8:	bf00      	nop
 8000dfa:	3728      	adds	r7, #40	; 0x28
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	00000000 	.word	0x00000000
 8000e04:	40606000 	.word	0x40606000
 8000e08:	20000028 	.word	0x20000028

08000e0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e10:	b672      	cpsid	i
}
 8000e12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e14:	e7fe      	b.n	8000e14 <Error_Handler+0x8>
	...

08000e18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e1e:	4b0f      	ldr	r3, [pc, #60]	; (8000e5c <HAL_MspInit+0x44>)
 8000e20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e22:	4a0e      	ldr	r2, [pc, #56]	; (8000e5c <HAL_MspInit+0x44>)
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	6613      	str	r3, [r2, #96]	; 0x60
 8000e2a:	4b0c      	ldr	r3, [pc, #48]	; (8000e5c <HAL_MspInit+0x44>)
 8000e2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	607b      	str	r3, [r7, #4]
 8000e34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e36:	4b09      	ldr	r3, [pc, #36]	; (8000e5c <HAL_MspInit+0x44>)
 8000e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e3a:	4a08      	ldr	r2, [pc, #32]	; (8000e5c <HAL_MspInit+0x44>)
 8000e3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e40:	6593      	str	r3, [r2, #88]	; 0x58
 8000e42:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <HAL_MspInit+0x44>)
 8000e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e4a:	603b      	str	r3, [r7, #0]
 8000e4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	40021000 	.word	0x40021000

08000e60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b0ac      	sub	sp, #176	; 0xb0
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e68:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
 8000e76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e78:	f107 0314 	add.w	r3, r7, #20
 8000e7c:	2288      	movs	r2, #136	; 0x88
 8000e7e:	2100      	movs	r1, #0
 8000e80:	4618      	mov	r0, r3
 8000e82:	f002 fcc5 	bl	8003810 <memset>
  if(hi2c->Instance==I2C1)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a21      	ldr	r2, [pc, #132]	; (8000f10 <HAL_I2C_MspInit+0xb0>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d13a      	bne.n	8000f06 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e90:	2340      	movs	r3, #64	; 0x40
 8000e92:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e94:	2300      	movs	r3, #0
 8000e96:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e98:	f107 0314 	add.w	r3, r7, #20
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f001 fffb 	bl	8002e98 <HAL_RCCEx_PeriphCLKConfig>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000ea8:	f7ff ffb0 	bl	8000e0c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eac:	4b19      	ldr	r3, [pc, #100]	; (8000f14 <HAL_I2C_MspInit+0xb4>)
 8000eae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb0:	4a18      	ldr	r2, [pc, #96]	; (8000f14 <HAL_I2C_MspInit+0xb4>)
 8000eb2:	f043 0302 	orr.w	r3, r3, #2
 8000eb6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eb8:	4b16      	ldr	r3, [pc, #88]	; (8000f14 <HAL_I2C_MspInit+0xb4>)
 8000eba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ebc:	f003 0302 	and.w	r3, r3, #2
 8000ec0:	613b      	str	r3, [r7, #16]
 8000ec2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ec4:	23c0      	movs	r3, #192	; 0xc0
 8000ec6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eca:	2312      	movs	r3, #18
 8000ecc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000edc:	2304      	movs	r3, #4
 8000ede:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	480b      	ldr	r0, [pc, #44]	; (8000f18 <HAL_I2C_MspInit+0xb8>)
 8000eea:	f000 fa03 	bl	80012f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000eee:	4b09      	ldr	r3, [pc, #36]	; (8000f14 <HAL_I2C_MspInit+0xb4>)
 8000ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ef2:	4a08      	ldr	r2, [pc, #32]	; (8000f14 <HAL_I2C_MspInit+0xb4>)
 8000ef4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ef8:	6593      	str	r3, [r2, #88]	; 0x58
 8000efa:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <HAL_I2C_MspInit+0xb4>)
 8000efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000efe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f06:	bf00      	nop
 8000f08:	37b0      	adds	r7, #176	; 0xb0
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40005400 	.word	0x40005400
 8000f14:	40021000 	.word	0x40021000
 8000f18:	48000400 	.word	0x48000400

08000f1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f20:	e7fe      	b.n	8000f20 <NMI_Handler+0x4>

08000f22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f26:	e7fe      	b.n	8000f26 <HardFault_Handler+0x4>

08000f28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <MemManage_Handler+0x4>

08000f2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f32:	e7fe      	b.n	8000f32 <BusFault_Handler+0x4>

08000f34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f38:	e7fe      	b.n	8000f38 <UsageFault_Handler+0x4>

08000f3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr

08000f56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f68:	f000 f89a 	bl	80010a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f6c:	bf00      	nop
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f74:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <SystemInit+0x20>)
 8000f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f7a:	4a05      	ldr	r2, [pc, #20]	; (8000f90 <SystemInit+0x20>)
 8000f7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fcc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f98:	f7ff ffea 	bl	8000f70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f9c:	480c      	ldr	r0, [pc, #48]	; (8000fd0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f9e:	490d      	ldr	r1, [pc, #52]	; (8000fd4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fa0:	4a0d      	ldr	r2, [pc, #52]	; (8000fd8 <LoopForever+0xe>)
  movs r3, #0
 8000fa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fa4:	e002      	b.n	8000fac <LoopCopyDataInit>

08000fa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000faa:	3304      	adds	r3, #4

08000fac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fb0:	d3f9      	bcc.n	8000fa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fb2:	4a0a      	ldr	r2, [pc, #40]	; (8000fdc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fb4:	4c0a      	ldr	r4, [pc, #40]	; (8000fe0 <LoopForever+0x16>)
  movs r3, #0
 8000fb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fb8:	e001      	b.n	8000fbe <LoopFillZerobss>

08000fba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fbc:	3204      	adds	r2, #4

08000fbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fc0:	d3fb      	bcc.n	8000fba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fc2:	f002 fc2d 	bl	8003820 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fc6:	f7ff fd1d 	bl	8000a04 <main>

08000fca <LoopForever>:

LoopForever:
    b LoopForever
 8000fca:	e7fe      	b.n	8000fca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000fcc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000fd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fd4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000fd8:	080038c8 	.word	0x080038c8
  ldr r2, =_sbss
 8000fdc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000fe0:	2000009c 	.word	0x2000009c

08000fe4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fe4:	e7fe      	b.n	8000fe4 <ADC1_2_IRQHandler>
	...

08000fe8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ff2:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <HAL_Init+0x3c>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a0b      	ldr	r2, [pc, #44]	; (8001024 <HAL_Init+0x3c>)
 8000ff8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ffc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ffe:	2003      	movs	r0, #3
 8001000:	f000 f944 	bl	800128c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001004:	2000      	movs	r0, #0
 8001006:	f000 f80f 	bl	8001028 <HAL_InitTick>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d002      	beq.n	8001016 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001010:	2301      	movs	r3, #1
 8001012:	71fb      	strb	r3, [r7, #7]
 8001014:	e001      	b.n	800101a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001016:	f7ff feff 	bl	8000e18 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800101a:	79fb      	ldrb	r3, [r7, #7]
}
 800101c:	4618      	mov	r0, r3
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40022000 	.word	0x40022000

08001028 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001030:	2300      	movs	r3, #0
 8001032:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001034:	4b17      	ldr	r3, [pc, #92]	; (8001094 <HAL_InitTick+0x6c>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d023      	beq.n	8001084 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800103c:	4b16      	ldr	r3, [pc, #88]	; (8001098 <HAL_InitTick+0x70>)
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	4b14      	ldr	r3, [pc, #80]	; (8001094 <HAL_InitTick+0x6c>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	4619      	mov	r1, r3
 8001046:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800104a:	fbb3 f3f1 	udiv	r3, r3, r1
 800104e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001052:	4618      	mov	r0, r3
 8001054:	f000 f941 	bl	80012da <HAL_SYSTICK_Config>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d10f      	bne.n	800107e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2b0f      	cmp	r3, #15
 8001062:	d809      	bhi.n	8001078 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001064:	2200      	movs	r2, #0
 8001066:	6879      	ldr	r1, [r7, #4]
 8001068:	f04f 30ff 	mov.w	r0, #4294967295
 800106c:	f000 f919 	bl	80012a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001070:	4a0a      	ldr	r2, [pc, #40]	; (800109c <HAL_InitTick+0x74>)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6013      	str	r3, [r2, #0]
 8001076:	e007      	b.n	8001088 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001078:	2301      	movs	r3, #1
 800107a:	73fb      	strb	r3, [r7, #15]
 800107c:	e004      	b.n	8001088 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	73fb      	strb	r3, [r7, #15]
 8001082:	e001      	b.n	8001088 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001084:	2301      	movs	r3, #1
 8001086:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001088:	7bfb      	ldrb	r3, [r7, #15]
}
 800108a:	4618      	mov	r0, r3
 800108c:	3710      	adds	r7, #16
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	20000008 	.word	0x20000008
 8001098:	20000000 	.word	0x20000000
 800109c:	20000004 	.word	0x20000004

080010a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <HAL_IncTick+0x20>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	461a      	mov	r2, r3
 80010aa:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <HAL_IncTick+0x24>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4413      	add	r3, r2
 80010b0:	4a04      	ldr	r2, [pc, #16]	; (80010c4 <HAL_IncTick+0x24>)
 80010b2:	6013      	str	r3, [r2, #0]
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	20000008 	.word	0x20000008
 80010c4:	20000098 	.word	0x20000098

080010c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  return uwTick;
 80010cc:	4b03      	ldr	r3, [pc, #12]	; (80010dc <HAL_GetTick+0x14>)
 80010ce:	681b      	ldr	r3, [r3, #0]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	20000098 	.word	0x20000098

080010e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010e8:	f7ff ffee 	bl	80010c8 <HAL_GetTick>
 80010ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010f8:	d005      	beq.n	8001106 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80010fa:	4b0a      	ldr	r3, [pc, #40]	; (8001124 <HAL_Delay+0x44>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	461a      	mov	r2, r3
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	4413      	add	r3, r2
 8001104:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001106:	bf00      	nop
 8001108:	f7ff ffde 	bl	80010c8 <HAL_GetTick>
 800110c:	4602      	mov	r2, r0
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	68fa      	ldr	r2, [r7, #12]
 8001114:	429a      	cmp	r2, r3
 8001116:	d8f7      	bhi.n	8001108 <HAL_Delay+0x28>
  {
  }
}
 8001118:	bf00      	nop
 800111a:	bf00      	nop
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20000008 	.word	0x20000008

08001128 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001128:	b480      	push	{r7}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f003 0307 	and.w	r3, r3, #7
 8001136:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001138:	4b0c      	ldr	r3, [pc, #48]	; (800116c <__NVIC_SetPriorityGrouping+0x44>)
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800113e:	68ba      	ldr	r2, [r7, #8]
 8001140:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001144:	4013      	ands	r3, r2
 8001146:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001150:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001154:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001158:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800115a:	4a04      	ldr	r2, [pc, #16]	; (800116c <__NVIC_SetPriorityGrouping+0x44>)
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	60d3      	str	r3, [r2, #12]
}
 8001160:	bf00      	nop
 8001162:	3714      	adds	r7, #20
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001174:	4b04      	ldr	r3, [pc, #16]	; (8001188 <__NVIC_GetPriorityGrouping+0x18>)
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	0a1b      	lsrs	r3, r3, #8
 800117a:	f003 0307 	and.w	r3, r3, #7
}
 800117e:	4618      	mov	r0, r3
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	e000ed00 	.word	0xe000ed00

0800118c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	6039      	str	r1, [r7, #0]
 8001196:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119c:	2b00      	cmp	r3, #0
 800119e:	db0a      	blt.n	80011b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	b2da      	uxtb	r2, r3
 80011a4:	490c      	ldr	r1, [pc, #48]	; (80011d8 <__NVIC_SetPriority+0x4c>)
 80011a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011aa:	0112      	lsls	r2, r2, #4
 80011ac:	b2d2      	uxtb	r2, r2
 80011ae:	440b      	add	r3, r1
 80011b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011b4:	e00a      	b.n	80011cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	b2da      	uxtb	r2, r3
 80011ba:	4908      	ldr	r1, [pc, #32]	; (80011dc <__NVIC_SetPriority+0x50>)
 80011bc:	79fb      	ldrb	r3, [r7, #7]
 80011be:	f003 030f 	and.w	r3, r3, #15
 80011c2:	3b04      	subs	r3, #4
 80011c4:	0112      	lsls	r2, r2, #4
 80011c6:	b2d2      	uxtb	r2, r2
 80011c8:	440b      	add	r3, r1
 80011ca:	761a      	strb	r2, [r3, #24]
}
 80011cc:	bf00      	nop
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	e000e100 	.word	0xe000e100
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b089      	sub	sp, #36	; 0x24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f003 0307 	and.w	r3, r3, #7
 80011f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	f1c3 0307 	rsb	r3, r3, #7
 80011fa:	2b04      	cmp	r3, #4
 80011fc:	bf28      	it	cs
 80011fe:	2304      	movcs	r3, #4
 8001200:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	3304      	adds	r3, #4
 8001206:	2b06      	cmp	r3, #6
 8001208:	d902      	bls.n	8001210 <NVIC_EncodePriority+0x30>
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	3b03      	subs	r3, #3
 800120e:	e000      	b.n	8001212 <NVIC_EncodePriority+0x32>
 8001210:	2300      	movs	r3, #0
 8001212:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001214:	f04f 32ff 	mov.w	r2, #4294967295
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43da      	mvns	r2, r3
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	401a      	ands	r2, r3
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001228:	f04f 31ff 	mov.w	r1, #4294967295
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	fa01 f303 	lsl.w	r3, r1, r3
 8001232:	43d9      	mvns	r1, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001238:	4313      	orrs	r3, r2
         );
}
 800123a:	4618      	mov	r0, r3
 800123c:	3724      	adds	r7, #36	; 0x24
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
	...

08001248 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3b01      	subs	r3, #1
 8001254:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001258:	d301      	bcc.n	800125e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800125a:	2301      	movs	r3, #1
 800125c:	e00f      	b.n	800127e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800125e:	4a0a      	ldr	r2, [pc, #40]	; (8001288 <SysTick_Config+0x40>)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	3b01      	subs	r3, #1
 8001264:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001266:	210f      	movs	r1, #15
 8001268:	f04f 30ff 	mov.w	r0, #4294967295
 800126c:	f7ff ff8e 	bl	800118c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001270:	4b05      	ldr	r3, [pc, #20]	; (8001288 <SysTick_Config+0x40>)
 8001272:	2200      	movs	r2, #0
 8001274:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001276:	4b04      	ldr	r3, [pc, #16]	; (8001288 <SysTick_Config+0x40>)
 8001278:	2207      	movs	r2, #7
 800127a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	e000e010 	.word	0xe000e010

0800128c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f7ff ff47 	bl	8001128 <__NVIC_SetPriorityGrouping>
}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b086      	sub	sp, #24
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	4603      	mov	r3, r0
 80012aa:	60b9      	str	r1, [r7, #8]
 80012ac:	607a      	str	r2, [r7, #4]
 80012ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012b4:	f7ff ff5c 	bl	8001170 <__NVIC_GetPriorityGrouping>
 80012b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	68b9      	ldr	r1, [r7, #8]
 80012be:	6978      	ldr	r0, [r7, #20]
 80012c0:	f7ff ff8e 	bl	80011e0 <NVIC_EncodePriority>
 80012c4:	4602      	mov	r2, r0
 80012c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ca:	4611      	mov	r1, r2
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff ff5d 	bl	800118c <__NVIC_SetPriority>
}
 80012d2:	bf00      	nop
 80012d4:	3718      	adds	r7, #24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b082      	sub	sp, #8
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f7ff ffb0 	bl	8001248 <SysTick_Config>
 80012e8:	4603      	mov	r3, r0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
	...

080012f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b087      	sub	sp, #28
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012fe:	2300      	movs	r3, #0
 8001300:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001302:	e17f      	b.n	8001604 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	2101      	movs	r1, #1
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	fa01 f303 	lsl.w	r3, r1, r3
 8001310:	4013      	ands	r3, r2
 8001312:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	2b00      	cmp	r3, #0
 8001318:	f000 8171 	beq.w	80015fe <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f003 0303 	and.w	r3, r3, #3
 8001324:	2b01      	cmp	r3, #1
 8001326:	d005      	beq.n	8001334 <HAL_GPIO_Init+0x40>
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f003 0303 	and.w	r3, r3, #3
 8001330:	2b02      	cmp	r3, #2
 8001332:	d130      	bne.n	8001396 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	2203      	movs	r2, #3
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	43db      	mvns	r3, r3
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	4013      	ands	r3, r2
 800134a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	68da      	ldr	r2, [r3, #12]
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	4313      	orrs	r3, r2
 800135c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800136a:	2201      	movs	r2, #1
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	43db      	mvns	r3, r3
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	4013      	ands	r3, r2
 8001378:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	091b      	lsrs	r3, r3, #4
 8001380:	f003 0201 	and.w	r2, r3, #1
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	4313      	orrs	r3, r2
 800138e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f003 0303 	and.w	r3, r3, #3
 800139e:	2b03      	cmp	r3, #3
 80013a0:	d118      	bne.n	80013d4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80013a8:	2201      	movs	r2, #1
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	43db      	mvns	r3, r3
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	4013      	ands	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	08db      	lsrs	r3, r3, #3
 80013be:	f003 0201 	and.w	r2, r3, #1
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f003 0303 	and.w	r3, r3, #3
 80013dc:	2b03      	cmp	r3, #3
 80013de:	d017      	beq.n	8001410 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	2203      	movs	r2, #3
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	43db      	mvns	r3, r3
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	4013      	ands	r3, r2
 80013f6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	689a      	ldr	r2, [r3, #8]
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	4313      	orrs	r3, r2
 8001408:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	693a      	ldr	r2, [r7, #16]
 800140e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f003 0303 	and.w	r3, r3, #3
 8001418:	2b02      	cmp	r3, #2
 800141a:	d123      	bne.n	8001464 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	08da      	lsrs	r2, r3, #3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	3208      	adds	r2, #8
 8001424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001428:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	f003 0307 	and.w	r3, r3, #7
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	220f      	movs	r2, #15
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	43db      	mvns	r3, r3
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	4013      	ands	r3, r2
 800143e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	691a      	ldr	r2, [r3, #16]
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	f003 0307 	and.w	r3, r3, #7
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	693a      	ldr	r2, [r7, #16]
 8001452:	4313      	orrs	r3, r2
 8001454:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	08da      	lsrs	r2, r3, #3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	3208      	adds	r2, #8
 800145e:	6939      	ldr	r1, [r7, #16]
 8001460:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	2203      	movs	r2, #3
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	43db      	mvns	r3, r3
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	4013      	ands	r3, r2
 800147a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f003 0203 	and.w	r2, r3, #3
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	4313      	orrs	r3, r2
 8001490:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	f000 80ac 	beq.w	80015fe <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014a6:	4b5f      	ldr	r3, [pc, #380]	; (8001624 <HAL_GPIO_Init+0x330>)
 80014a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014aa:	4a5e      	ldr	r2, [pc, #376]	; (8001624 <HAL_GPIO_Init+0x330>)
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	6613      	str	r3, [r2, #96]	; 0x60
 80014b2:	4b5c      	ldr	r3, [pc, #368]	; (8001624 <HAL_GPIO_Init+0x330>)
 80014b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	60bb      	str	r3, [r7, #8]
 80014bc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014be:	4a5a      	ldr	r2, [pc, #360]	; (8001628 <HAL_GPIO_Init+0x334>)
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	089b      	lsrs	r3, r3, #2
 80014c4:	3302      	adds	r3, #2
 80014c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	f003 0303 	and.w	r3, r3, #3
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	220f      	movs	r2, #15
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	43db      	mvns	r3, r3
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	4013      	ands	r3, r2
 80014e0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80014e8:	d025      	beq.n	8001536 <HAL_GPIO_Init+0x242>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a4f      	ldr	r2, [pc, #316]	; (800162c <HAL_GPIO_Init+0x338>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d01f      	beq.n	8001532 <HAL_GPIO_Init+0x23e>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a4e      	ldr	r2, [pc, #312]	; (8001630 <HAL_GPIO_Init+0x33c>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d019      	beq.n	800152e <HAL_GPIO_Init+0x23a>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a4d      	ldr	r2, [pc, #308]	; (8001634 <HAL_GPIO_Init+0x340>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d013      	beq.n	800152a <HAL_GPIO_Init+0x236>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a4c      	ldr	r2, [pc, #304]	; (8001638 <HAL_GPIO_Init+0x344>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d00d      	beq.n	8001526 <HAL_GPIO_Init+0x232>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a4b      	ldr	r2, [pc, #300]	; (800163c <HAL_GPIO_Init+0x348>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d007      	beq.n	8001522 <HAL_GPIO_Init+0x22e>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a4a      	ldr	r2, [pc, #296]	; (8001640 <HAL_GPIO_Init+0x34c>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d101      	bne.n	800151e <HAL_GPIO_Init+0x22a>
 800151a:	2306      	movs	r3, #6
 800151c:	e00c      	b.n	8001538 <HAL_GPIO_Init+0x244>
 800151e:	2307      	movs	r3, #7
 8001520:	e00a      	b.n	8001538 <HAL_GPIO_Init+0x244>
 8001522:	2305      	movs	r3, #5
 8001524:	e008      	b.n	8001538 <HAL_GPIO_Init+0x244>
 8001526:	2304      	movs	r3, #4
 8001528:	e006      	b.n	8001538 <HAL_GPIO_Init+0x244>
 800152a:	2303      	movs	r3, #3
 800152c:	e004      	b.n	8001538 <HAL_GPIO_Init+0x244>
 800152e:	2302      	movs	r3, #2
 8001530:	e002      	b.n	8001538 <HAL_GPIO_Init+0x244>
 8001532:	2301      	movs	r3, #1
 8001534:	e000      	b.n	8001538 <HAL_GPIO_Init+0x244>
 8001536:	2300      	movs	r3, #0
 8001538:	697a      	ldr	r2, [r7, #20]
 800153a:	f002 0203 	and.w	r2, r2, #3
 800153e:	0092      	lsls	r2, r2, #2
 8001540:	4093      	lsls	r3, r2
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	4313      	orrs	r3, r2
 8001546:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001548:	4937      	ldr	r1, [pc, #220]	; (8001628 <HAL_GPIO_Init+0x334>)
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	089b      	lsrs	r3, r3, #2
 800154e:	3302      	adds	r3, #2
 8001550:	693a      	ldr	r2, [r7, #16]
 8001552:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001556:	4b3b      	ldr	r3, [pc, #236]	; (8001644 <HAL_GPIO_Init+0x350>)
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	43db      	mvns	r3, r3
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	4013      	ands	r3, r2
 8001564:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d003      	beq.n	800157a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	4313      	orrs	r3, r2
 8001578:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800157a:	4a32      	ldr	r2, [pc, #200]	; (8001644 <HAL_GPIO_Init+0x350>)
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001580:	4b30      	ldr	r3, [pc, #192]	; (8001644 <HAL_GPIO_Init+0x350>)
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	43db      	mvns	r3, r3
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	4013      	ands	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d003      	beq.n	80015a4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015a4:	4a27      	ldr	r2, [pc, #156]	; (8001644 <HAL_GPIO_Init+0x350>)
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80015aa:	4b26      	ldr	r3, [pc, #152]	; (8001644 <HAL_GPIO_Init+0x350>)
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	43db      	mvns	r3, r3
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	4013      	ands	r3, r2
 80015b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d003      	beq.n	80015ce <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015ce:	4a1d      	ldr	r2, [pc, #116]	; (8001644 <HAL_GPIO_Init+0x350>)
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80015d4:	4b1b      	ldr	r3, [pc, #108]	; (8001644 <HAL_GPIO_Init+0x350>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	43db      	mvns	r3, r3
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	4013      	ands	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d003      	beq.n	80015f8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015f8:	4a12      	ldr	r2, [pc, #72]	; (8001644 <HAL_GPIO_Init+0x350>)
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	3301      	adds	r3, #1
 8001602:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	fa22 f303 	lsr.w	r3, r2, r3
 800160e:	2b00      	cmp	r3, #0
 8001610:	f47f ae78 	bne.w	8001304 <HAL_GPIO_Init+0x10>
  }
}
 8001614:	bf00      	nop
 8001616:	bf00      	nop
 8001618:	371c      	adds	r7, #28
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	40021000 	.word	0x40021000
 8001628:	40010000 	.word	0x40010000
 800162c:	48000400 	.word	0x48000400
 8001630:	48000800 	.word	0x48000800
 8001634:	48000c00 	.word	0x48000c00
 8001638:	48001000 	.word	0x48001000
 800163c:	48001400 	.word	0x48001400
 8001640:	48001800 	.word	0x48001800
 8001644:	40010400 	.word	0x40010400

08001648 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d101      	bne.n	800165a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e081      	b.n	800175e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001660:	b2db      	uxtb	r3, r3
 8001662:	2b00      	cmp	r3, #0
 8001664:	d106      	bne.n	8001674 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2200      	movs	r2, #0
 800166a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f7ff fbf6 	bl	8000e60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2224      	movs	r2, #36	; 0x24
 8001678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f022 0201 	bic.w	r2, r2, #1
 800168a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685a      	ldr	r2, [r3, #4]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001698:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	689a      	ldr	r2, [r3, #8]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80016a8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d107      	bne.n	80016c2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	689a      	ldr	r2, [r3, #8]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	e006      	b.n	80016d0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	689a      	ldr	r2, [r3, #8]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80016ce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d104      	bne.n	80016e2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	6812      	ldr	r2, [r2, #0]
 80016ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016f4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	68da      	ldr	r2, [r3, #12]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001704:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	691a      	ldr	r2, [r3, #16]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	695b      	ldr	r3, [r3, #20]
 800170e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	699b      	ldr	r3, [r3, #24]
 8001716:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	430a      	orrs	r2, r1
 800171e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	69d9      	ldr	r1, [r3, #28]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a1a      	ldr	r2, [r3, #32]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	430a      	orrs	r2, r1
 800172e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f042 0201 	orr.w	r2, r2, #1
 800173e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2200      	movs	r2, #0
 8001744:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2220      	movs	r2, #32
 800174a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2200      	movs	r2, #0
 8001752:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2200      	movs	r2, #0
 8001758:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
	...

08001768 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b088      	sub	sp, #32
 800176c:	af02      	add	r7, sp, #8
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	4608      	mov	r0, r1
 8001772:	4611      	mov	r1, r2
 8001774:	461a      	mov	r2, r3
 8001776:	4603      	mov	r3, r0
 8001778:	817b      	strh	r3, [r7, #10]
 800177a:	460b      	mov	r3, r1
 800177c:	813b      	strh	r3, [r7, #8]
 800177e:	4613      	mov	r3, r2
 8001780:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001788:	b2db      	uxtb	r3, r3
 800178a:	2b20      	cmp	r3, #32
 800178c:	f040 80f9 	bne.w	8001982 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001790:	6a3b      	ldr	r3, [r7, #32]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d002      	beq.n	800179c <HAL_I2C_Mem_Write+0x34>
 8001796:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001798:	2b00      	cmp	r3, #0
 800179a:	d105      	bne.n	80017a8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017a2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e0ed      	b.n	8001984 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d101      	bne.n	80017b6 <HAL_I2C_Mem_Write+0x4e>
 80017b2:	2302      	movs	r3, #2
 80017b4:	e0e6      	b.n	8001984 <HAL_I2C_Mem_Write+0x21c>
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	2201      	movs	r2, #1
 80017ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80017be:	f7ff fc83 	bl	80010c8 <HAL_GetTick>
 80017c2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	9300      	str	r3, [sp, #0]
 80017c8:	2319      	movs	r3, #25
 80017ca:	2201      	movs	r2, #1
 80017cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017d0:	68f8      	ldr	r0, [r7, #12]
 80017d2:	f000 fac3 	bl	8001d5c <I2C_WaitOnFlagUntilTimeout>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e0d1      	b.n	8001984 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	2221      	movs	r2, #33	; 0x21
 80017e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2240      	movs	r2, #64	; 0x40
 80017ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2200      	movs	r2, #0
 80017f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	6a3a      	ldr	r2, [r7, #32]
 80017fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001800:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2200      	movs	r2, #0
 8001806:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001808:	88f8      	ldrh	r0, [r7, #6]
 800180a:	893a      	ldrh	r2, [r7, #8]
 800180c:	8979      	ldrh	r1, [r7, #10]
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	9301      	str	r3, [sp, #4]
 8001812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001814:	9300      	str	r3, [sp, #0]
 8001816:	4603      	mov	r3, r0
 8001818:	68f8      	ldr	r0, [r7, #12]
 800181a:	f000 f9d3 	bl	8001bc4 <I2C_RequestMemoryWrite>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d005      	beq.n	8001830 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2200      	movs	r2, #0
 8001828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e0a9      	b.n	8001984 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001834:	b29b      	uxth	r3, r3
 8001836:	2bff      	cmp	r3, #255	; 0xff
 8001838:	d90e      	bls.n	8001858 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	22ff      	movs	r2, #255	; 0xff
 800183e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001844:	b2da      	uxtb	r2, r3
 8001846:	8979      	ldrh	r1, [r7, #10]
 8001848:	2300      	movs	r3, #0
 800184a:	9300      	str	r3, [sp, #0]
 800184c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001850:	68f8      	ldr	r0, [r7, #12]
 8001852:	f000 fc2b 	bl	80020ac <I2C_TransferConfig>
 8001856:	e00f      	b.n	8001878 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800185c:	b29a      	uxth	r2, r3
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001866:	b2da      	uxtb	r2, r3
 8001868:	8979      	ldrh	r1, [r7, #10]
 800186a:	2300      	movs	r3, #0
 800186c:	9300      	str	r3, [sp, #0]
 800186e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001872:	68f8      	ldr	r0, [r7, #12]
 8001874:	f000 fc1a 	bl	80020ac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001878:	697a      	ldr	r2, [r7, #20]
 800187a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800187c:	68f8      	ldr	r0, [r7, #12]
 800187e:	f000 faad 	bl	8001ddc <I2C_WaitOnTXISFlagUntilTimeout>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e07b      	b.n	8001984 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001890:	781a      	ldrb	r2, [r3, #0]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189c:	1c5a      	adds	r2, r3, #1
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	3b01      	subs	r3, #1
 80018aa:	b29a      	uxth	r2, r3
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018b4:	3b01      	subs	r3, #1
 80018b6:	b29a      	uxth	r2, r3
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d034      	beq.n	8001930 <HAL_I2C_Mem_Write+0x1c8>
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d130      	bne.n	8001930 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	9300      	str	r3, [sp, #0]
 80018d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018d4:	2200      	movs	r2, #0
 80018d6:	2180      	movs	r1, #128	; 0x80
 80018d8:	68f8      	ldr	r0, [r7, #12]
 80018da:	f000 fa3f 	bl	8001d5c <I2C_WaitOnFlagUntilTimeout>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e04d      	b.n	8001984 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	2bff      	cmp	r3, #255	; 0xff
 80018f0:	d90e      	bls.n	8001910 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	22ff      	movs	r2, #255	; 0xff
 80018f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018fc:	b2da      	uxtb	r2, r3
 80018fe:	8979      	ldrh	r1, [r7, #10]
 8001900:	2300      	movs	r3, #0
 8001902:	9300      	str	r3, [sp, #0]
 8001904:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001908:	68f8      	ldr	r0, [r7, #12]
 800190a:	f000 fbcf 	bl	80020ac <I2C_TransferConfig>
 800190e:	e00f      	b.n	8001930 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001914:	b29a      	uxth	r2, r3
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800191e:	b2da      	uxtb	r2, r3
 8001920:	8979      	ldrh	r1, [r7, #10]
 8001922:	2300      	movs	r3, #0
 8001924:	9300      	str	r3, [sp, #0]
 8001926:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800192a:	68f8      	ldr	r0, [r7, #12]
 800192c:	f000 fbbe 	bl	80020ac <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001934:	b29b      	uxth	r3, r3
 8001936:	2b00      	cmp	r3, #0
 8001938:	d19e      	bne.n	8001878 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800193a:	697a      	ldr	r2, [r7, #20]
 800193c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800193e:	68f8      	ldr	r0, [r7, #12]
 8001940:	f000 fa8c 	bl	8001e5c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e01a      	b.n	8001984 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2220      	movs	r2, #32
 8001954:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	6859      	ldr	r1, [r3, #4]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	4b0a      	ldr	r3, [pc, #40]	; (800198c <HAL_I2C_Mem_Write+0x224>)
 8001962:	400b      	ands	r3, r1
 8001964:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2220      	movs	r2, #32
 800196a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2200      	movs	r2, #0
 8001972:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2200      	movs	r2, #0
 800197a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800197e:	2300      	movs	r3, #0
 8001980:	e000      	b.n	8001984 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001982:	2302      	movs	r3, #2
  }
}
 8001984:	4618      	mov	r0, r3
 8001986:	3718      	adds	r7, #24
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	fe00e800 	.word	0xfe00e800

08001990 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b088      	sub	sp, #32
 8001994:	af02      	add	r7, sp, #8
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	4608      	mov	r0, r1
 800199a:	4611      	mov	r1, r2
 800199c:	461a      	mov	r2, r3
 800199e:	4603      	mov	r3, r0
 80019a0:	817b      	strh	r3, [r7, #10]
 80019a2:	460b      	mov	r3, r1
 80019a4:	813b      	strh	r3, [r7, #8]
 80019a6:	4613      	mov	r3, r2
 80019a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2b20      	cmp	r3, #32
 80019b4:	f040 80fd 	bne.w	8001bb2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80019b8:	6a3b      	ldr	r3, [r7, #32]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d002      	beq.n	80019c4 <HAL_I2C_Mem_Read+0x34>
 80019be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d105      	bne.n	80019d0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019ca:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e0f1      	b.n	8001bb4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d101      	bne.n	80019de <HAL_I2C_Mem_Read+0x4e>
 80019da:	2302      	movs	r3, #2
 80019dc:	e0ea      	b.n	8001bb4 <HAL_I2C_Mem_Read+0x224>
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2201      	movs	r2, #1
 80019e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80019e6:	f7ff fb6f 	bl	80010c8 <HAL_GetTick>
 80019ea:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	9300      	str	r3, [sp, #0]
 80019f0:	2319      	movs	r3, #25
 80019f2:	2201      	movs	r2, #1
 80019f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019f8:	68f8      	ldr	r0, [r7, #12]
 80019fa:	f000 f9af 	bl	8001d5c <I2C_WaitOnFlagUntilTimeout>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e0d5      	b.n	8001bb4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2222      	movs	r2, #34	; 0x22
 8001a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2240      	movs	r2, #64	; 0x40
 8001a14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	6a3a      	ldr	r2, [r7, #32]
 8001a22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001a28:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001a30:	88f8      	ldrh	r0, [r7, #6]
 8001a32:	893a      	ldrh	r2, [r7, #8]
 8001a34:	8979      	ldrh	r1, [r7, #10]
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	9301      	str	r3, [sp, #4]
 8001a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a3c:	9300      	str	r3, [sp, #0]
 8001a3e:	4603      	mov	r3, r0
 8001a40:	68f8      	ldr	r0, [r7, #12]
 8001a42:	f000 f913 	bl	8001c6c <I2C_RequestMemoryRead>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d005      	beq.n	8001a58 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e0ad      	b.n	8001bb4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	2bff      	cmp	r3, #255	; 0xff
 8001a60:	d90e      	bls.n	8001a80 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	22ff      	movs	r2, #255	; 0xff
 8001a66:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a6c:	b2da      	uxtb	r2, r3
 8001a6e:	8979      	ldrh	r1, [r7, #10]
 8001a70:	4b52      	ldr	r3, [pc, #328]	; (8001bbc <HAL_I2C_Mem_Read+0x22c>)
 8001a72:	9300      	str	r3, [sp, #0]
 8001a74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a78:	68f8      	ldr	r0, [r7, #12]
 8001a7a:	f000 fb17 	bl	80020ac <I2C_TransferConfig>
 8001a7e:	e00f      	b.n	8001aa0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a84:	b29a      	uxth	r2, r3
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a8e:	b2da      	uxtb	r2, r3
 8001a90:	8979      	ldrh	r1, [r7, #10]
 8001a92:	4b4a      	ldr	r3, [pc, #296]	; (8001bbc <HAL_I2C_Mem_Read+0x22c>)
 8001a94:	9300      	str	r3, [sp, #0]
 8001a96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a9a:	68f8      	ldr	r0, [r7, #12]
 8001a9c:	f000 fb06 	bl	80020ac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	9300      	str	r3, [sp, #0]
 8001aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	2104      	movs	r1, #4
 8001aaa:	68f8      	ldr	r0, [r7, #12]
 8001aac:	f000 f956 	bl	8001d5c <I2C_WaitOnFlagUntilTimeout>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e07c      	b.n	8001bb4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac4:	b2d2      	uxtb	r2, r2
 8001ac6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001acc:	1c5a      	adds	r2, r3, #1
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	b29a      	uxth	r2, r3
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	3b01      	subs	r3, #1
 8001ae6:	b29a      	uxth	r2, r3
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d034      	beq.n	8001b60 <HAL_I2C_Mem_Read+0x1d0>
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d130      	bne.n	8001b60 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	9300      	str	r3, [sp, #0]
 8001b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b04:	2200      	movs	r2, #0
 8001b06:	2180      	movs	r1, #128	; 0x80
 8001b08:	68f8      	ldr	r0, [r7, #12]
 8001b0a:	f000 f927 	bl	8001d5c <I2C_WaitOnFlagUntilTimeout>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e04d      	b.n	8001bb4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	2bff      	cmp	r3, #255	; 0xff
 8001b20:	d90e      	bls.n	8001b40 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	22ff      	movs	r2, #255	; 0xff
 8001b26:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b2c:	b2da      	uxtb	r2, r3
 8001b2e:	8979      	ldrh	r1, [r7, #10]
 8001b30:	2300      	movs	r3, #0
 8001b32:	9300      	str	r3, [sp, #0]
 8001b34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b38:	68f8      	ldr	r0, [r7, #12]
 8001b3a:	f000 fab7 	bl	80020ac <I2C_TransferConfig>
 8001b3e:	e00f      	b.n	8001b60 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b44:	b29a      	uxth	r2, r3
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b4e:	b2da      	uxtb	r2, r3
 8001b50:	8979      	ldrh	r1, [r7, #10]
 8001b52:	2300      	movs	r3, #0
 8001b54:	9300      	str	r3, [sp, #0]
 8001b56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b5a:	68f8      	ldr	r0, [r7, #12]
 8001b5c:	f000 faa6 	bl	80020ac <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d19a      	bne.n	8001aa0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b6a:	697a      	ldr	r2, [r7, #20]
 8001b6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b6e:	68f8      	ldr	r0, [r7, #12]
 8001b70:	f000 f974 	bl	8001e5c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e01a      	b.n	8001bb4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2220      	movs	r2, #32
 8001b84:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	6859      	ldr	r1, [r3, #4]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	4b0b      	ldr	r3, [pc, #44]	; (8001bc0 <HAL_I2C_Mem_Read+0x230>)
 8001b92:	400b      	ands	r3, r1
 8001b94:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2220      	movs	r2, #32
 8001b9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	e000      	b.n	8001bb4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001bb2:	2302      	movs	r3, #2
  }
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3718      	adds	r7, #24
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	80002400 	.word	0x80002400
 8001bc0:	fe00e800 	.word	0xfe00e800

08001bc4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af02      	add	r7, sp, #8
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	4608      	mov	r0, r1
 8001bce:	4611      	mov	r1, r2
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	817b      	strh	r3, [r7, #10]
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	813b      	strh	r3, [r7, #8]
 8001bda:	4613      	mov	r3, r2
 8001bdc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001bde:	88fb      	ldrh	r3, [r7, #6]
 8001be0:	b2da      	uxtb	r2, r3
 8001be2:	8979      	ldrh	r1, [r7, #10]
 8001be4:	4b20      	ldr	r3, [pc, #128]	; (8001c68 <I2C_RequestMemoryWrite+0xa4>)
 8001be6:	9300      	str	r3, [sp, #0]
 8001be8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001bec:	68f8      	ldr	r0, [r7, #12]
 8001bee:	f000 fa5d 	bl	80020ac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bf2:	69fa      	ldr	r2, [r7, #28]
 8001bf4:	69b9      	ldr	r1, [r7, #24]
 8001bf6:	68f8      	ldr	r0, [r7, #12]
 8001bf8:	f000 f8f0 	bl	8001ddc <I2C_WaitOnTXISFlagUntilTimeout>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e02c      	b.n	8001c60 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001c06:	88fb      	ldrh	r3, [r7, #6]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d105      	bne.n	8001c18 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c0c:	893b      	ldrh	r3, [r7, #8]
 8001c0e:	b2da      	uxtb	r2, r3
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	629a      	str	r2, [r3, #40]	; 0x28
 8001c16:	e015      	b.n	8001c44 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001c18:	893b      	ldrh	r3, [r7, #8]
 8001c1a:	0a1b      	lsrs	r3, r3, #8
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	b2da      	uxtb	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c26:	69fa      	ldr	r2, [r7, #28]
 8001c28:	69b9      	ldr	r1, [r7, #24]
 8001c2a:	68f8      	ldr	r0, [r7, #12]
 8001c2c:	f000 f8d6 	bl	8001ddc <I2C_WaitOnTXISFlagUntilTimeout>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e012      	b.n	8001c60 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c3a:	893b      	ldrh	r3, [r7, #8]
 8001c3c:	b2da      	uxtb	r2, r3
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	9300      	str	r3, [sp, #0]
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	2180      	movs	r1, #128	; 0x80
 8001c4e:	68f8      	ldr	r0, [r7, #12]
 8001c50:	f000 f884 	bl	8001d5c <I2C_WaitOnFlagUntilTimeout>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e000      	b.n	8001c60 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3710      	adds	r7, #16
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	80002000 	.word	0x80002000

08001c6c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af02      	add	r7, sp, #8
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	4608      	mov	r0, r1
 8001c76:	4611      	mov	r1, r2
 8001c78:	461a      	mov	r2, r3
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	817b      	strh	r3, [r7, #10]
 8001c7e:	460b      	mov	r3, r1
 8001c80:	813b      	strh	r3, [r7, #8]
 8001c82:	4613      	mov	r3, r2
 8001c84:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001c86:	88fb      	ldrh	r3, [r7, #6]
 8001c88:	b2da      	uxtb	r2, r3
 8001c8a:	8979      	ldrh	r1, [r7, #10]
 8001c8c:	4b20      	ldr	r3, [pc, #128]	; (8001d10 <I2C_RequestMemoryRead+0xa4>)
 8001c8e:	9300      	str	r3, [sp, #0]
 8001c90:	2300      	movs	r3, #0
 8001c92:	68f8      	ldr	r0, [r7, #12]
 8001c94:	f000 fa0a 	bl	80020ac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c98:	69fa      	ldr	r2, [r7, #28]
 8001c9a:	69b9      	ldr	r1, [r7, #24]
 8001c9c:	68f8      	ldr	r0, [r7, #12]
 8001c9e:	f000 f89d 	bl	8001ddc <I2C_WaitOnTXISFlagUntilTimeout>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e02c      	b.n	8001d06 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001cac:	88fb      	ldrh	r3, [r7, #6]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d105      	bne.n	8001cbe <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001cb2:	893b      	ldrh	r3, [r7, #8]
 8001cb4:	b2da      	uxtb	r2, r3
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	629a      	str	r2, [r3, #40]	; 0x28
 8001cbc:	e015      	b.n	8001cea <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001cbe:	893b      	ldrh	r3, [r7, #8]
 8001cc0:	0a1b      	lsrs	r3, r3, #8
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	b2da      	uxtb	r2, r3
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ccc:	69fa      	ldr	r2, [r7, #28]
 8001cce:	69b9      	ldr	r1, [r7, #24]
 8001cd0:	68f8      	ldr	r0, [r7, #12]
 8001cd2:	f000 f883 	bl	8001ddc <I2C_WaitOnTXISFlagUntilTimeout>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e012      	b.n	8001d06 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ce0:	893b      	ldrh	r3, [r7, #8]
 8001ce2:	b2da      	uxtb	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	9300      	str	r3, [sp, #0]
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	2140      	movs	r1, #64	; 0x40
 8001cf4:	68f8      	ldr	r0, [r7, #12]
 8001cf6:	f000 f831 	bl	8001d5c <I2C_WaitOnFlagUntilTimeout>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e000      	b.n	8001d06 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	80002000 	.word	0x80002000

08001d14 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	699b      	ldr	r3, [r3, #24]
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d103      	bne.n	8001d32 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d007      	beq.n	8001d50 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	699a      	ldr	r2, [r3, #24]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f042 0201 	orr.w	r2, r2, #1
 8001d4e:	619a      	str	r2, [r3, #24]
  }
}
 8001d50:	bf00      	nop
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	603b      	str	r3, [r7, #0]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d6c:	e022      	b.n	8001db4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d74:	d01e      	beq.n	8001db4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d76:	f7ff f9a7 	bl	80010c8 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	683a      	ldr	r2, [r7, #0]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d302      	bcc.n	8001d8c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d113      	bne.n	8001db4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d90:	f043 0220 	orr.w	r2, r3, #32
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2220      	movs	r2, #32
 8001d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2200      	movs	r2, #0
 8001da4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2200      	movs	r2, #0
 8001dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e00f      	b.n	8001dd4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	699a      	ldr	r2, [r3, #24]
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	68ba      	ldr	r2, [r7, #8]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	bf0c      	ite	eq
 8001dc4:	2301      	moveq	r3, #1
 8001dc6:	2300      	movne	r3, #0
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	461a      	mov	r2, r3
 8001dcc:	79fb      	ldrb	r3, [r7, #7]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d0cd      	beq.n	8001d6e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001dd2:	2300      	movs	r3, #0
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3710      	adds	r7, #16
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	60b9      	str	r1, [r7, #8]
 8001de6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001de8:	e02c      	b.n	8001e44 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	68b9      	ldr	r1, [r7, #8]
 8001dee:	68f8      	ldr	r0, [r7, #12]
 8001df0:	f000 f870 	bl	8001ed4 <I2C_IsErrorOccurred>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e02a      	b.n	8001e54 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e04:	d01e      	beq.n	8001e44 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e06:	f7ff f95f 	bl	80010c8 <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	68ba      	ldr	r2, [r7, #8]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d302      	bcc.n	8001e1c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d113      	bne.n	8001e44 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e20:	f043 0220 	orr.w	r2, r3, #32
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2220      	movs	r2, #32
 8001e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e007      	b.n	8001e54 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d1cb      	bne.n	8001dea <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3710      	adds	r7, #16
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e68:	e028      	b.n	8001ebc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	68b9      	ldr	r1, [r7, #8]
 8001e6e:	68f8      	ldr	r0, [r7, #12]
 8001e70:	f000 f830 	bl	8001ed4 <I2C_IsErrorOccurred>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e026      	b.n	8001ecc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e7e:	f7ff f923 	bl	80010c8 <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	68ba      	ldr	r2, [r7, #8]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d302      	bcc.n	8001e94 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d113      	bne.n	8001ebc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e98:	f043 0220 	orr.w	r2, r3, #32
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2220      	movs	r2, #32
 8001ea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e007      	b.n	8001ecc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	f003 0320 	and.w	r3, r3, #32
 8001ec6:	2b20      	cmp	r3, #32
 8001ec8:	d1cf      	bne.n	8001e6a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b08a      	sub	sp, #40	; 0x28
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	f003 0310 	and.w	r3, r3, #16
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d075      	beq.n	8001fec <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2210      	movs	r2, #16
 8001f06:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001f08:	e056      	b.n	8001fb8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f10:	d052      	beq.n	8001fb8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001f12:	f7ff f8d9 	bl	80010c8 <HAL_GetTick>
 8001f16:	4602      	mov	r2, r0
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	68ba      	ldr	r2, [r7, #8]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d302      	bcc.n	8001f28 <I2C_IsErrorOccurred+0x54>
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d147      	bne.n	8001fb8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f32:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f3a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	699b      	ldr	r3, [r3, #24]
 8001f42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f4a:	d12e      	bne.n	8001faa <I2C_IsErrorOccurred+0xd6>
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f52:	d02a      	beq.n	8001faa <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8001f54:	7cfb      	ldrb	r3, [r7, #19]
 8001f56:	2b20      	cmp	r3, #32
 8001f58:	d027      	beq.n	8001faa <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	685a      	ldr	r2, [r3, #4]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f68:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001f6a:	f7ff f8ad 	bl	80010c8 <HAL_GetTick>
 8001f6e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f70:	e01b      	b.n	8001faa <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001f72:	f7ff f8a9 	bl	80010c8 <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	2b19      	cmp	r3, #25
 8001f7e:	d914      	bls.n	8001faa <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f84:	f043 0220 	orr.w	r2, r3, #32
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2220      	movs	r2, #32
 8001f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	f003 0320 	and.w	r3, r3, #32
 8001fb4:	2b20      	cmp	r3, #32
 8001fb6:	d1dc      	bne.n	8001f72 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	699b      	ldr	r3, [r3, #24]
 8001fbe:	f003 0320 	and.w	r3, r3, #32
 8001fc2:	2b20      	cmp	r3, #32
 8001fc4:	d003      	beq.n	8001fce <I2C_IsErrorOccurred+0xfa>
 8001fc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d09d      	beq.n	8001f0a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001fce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d103      	bne.n	8001fde <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2220      	movs	r2, #32
 8001fdc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001fde:	6a3b      	ldr	r3, [r7, #32]
 8001fe0:	f043 0304 	orr.w	r3, r3, #4
 8001fe4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	699b      	ldr	r3, [r3, #24]
 8001ff2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00b      	beq.n	8002016 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001ffe:	6a3b      	ldr	r3, [r7, #32]
 8002000:	f043 0301 	orr.w	r3, r3, #1
 8002004:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800200e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800201c:	2b00      	cmp	r3, #0
 800201e:	d00b      	beq.n	8002038 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002020:	6a3b      	ldr	r3, [r7, #32]
 8002022:	f043 0308 	orr.w	r3, r3, #8
 8002026:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002030:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800203e:	2b00      	cmp	r3, #0
 8002040:	d00b      	beq.n	800205a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002042:	6a3b      	ldr	r3, [r7, #32]
 8002044:	f043 0302 	orr.w	r3, r3, #2
 8002048:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002052:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800205a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800205e:	2b00      	cmp	r3, #0
 8002060:	d01c      	beq.n	800209c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002062:	68f8      	ldr	r0, [r7, #12]
 8002064:	f7ff fe56 	bl	8001d14 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6859      	ldr	r1, [r3, #4]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	4b0d      	ldr	r3, [pc, #52]	; (80020a8 <I2C_IsErrorOccurred+0x1d4>)
 8002074:	400b      	ands	r3, r1
 8002076:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800207c:	6a3b      	ldr	r3, [r7, #32]
 800207e:	431a      	orrs	r2, r3
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2220      	movs	r2, #32
 8002088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2200      	movs	r2, #0
 8002098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800209c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3728      	adds	r7, #40	; 0x28
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	fe00e800 	.word	0xfe00e800

080020ac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b087      	sub	sp, #28
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	607b      	str	r3, [r7, #4]
 80020b6:	460b      	mov	r3, r1
 80020b8:	817b      	strh	r3, [r7, #10]
 80020ba:	4613      	mov	r3, r2
 80020bc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80020be:	897b      	ldrh	r3, [r7, #10]
 80020c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80020c4:	7a7b      	ldrb	r3, [r7, #9]
 80020c6:	041b      	lsls	r3, r3, #16
 80020c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80020cc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80020d2:	6a3b      	ldr	r3, [r7, #32]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80020da:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	685a      	ldr	r2, [r3, #4]
 80020e2:	6a3b      	ldr	r3, [r7, #32]
 80020e4:	0d5b      	lsrs	r3, r3, #21
 80020e6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80020ea:	4b08      	ldr	r3, [pc, #32]	; (800210c <I2C_TransferConfig+0x60>)
 80020ec:	430b      	orrs	r3, r1
 80020ee:	43db      	mvns	r3, r3
 80020f0:	ea02 0103 	and.w	r1, r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	697a      	ldr	r2, [r7, #20]
 80020fa:	430a      	orrs	r2, r1
 80020fc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80020fe:	bf00      	nop
 8002100:	371c      	adds	r7, #28
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	03ff63ff 	.word	0x03ff63ff

08002110 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2b20      	cmp	r3, #32
 8002124:	d138      	bne.n	8002198 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800212c:	2b01      	cmp	r3, #1
 800212e:	d101      	bne.n	8002134 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002130:	2302      	movs	r3, #2
 8002132:	e032      	b.n	800219a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2224      	movs	r2, #36	; 0x24
 8002140:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f022 0201 	bic.w	r2, r2, #1
 8002152:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002162:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	6819      	ldr	r1, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	683a      	ldr	r2, [r7, #0]
 8002170:	430a      	orrs	r2, r1
 8002172:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f042 0201 	orr.w	r2, r2, #1
 8002182:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2220      	movs	r2, #32
 8002188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002194:	2300      	movs	r3, #0
 8002196:	e000      	b.n	800219a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002198:	2302      	movs	r3, #2
  }
}
 800219a:	4618      	mov	r0, r3
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr

080021a6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80021a6:	b480      	push	{r7}
 80021a8:	b085      	sub	sp, #20
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
 80021ae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	2b20      	cmp	r3, #32
 80021ba:	d139      	bne.n	8002230 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d101      	bne.n	80021ca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80021c6:	2302      	movs	r3, #2
 80021c8:	e033      	b.n	8002232 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2201      	movs	r2, #1
 80021ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2224      	movs	r2, #36	; 0x24
 80021d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f022 0201 	bic.w	r2, r2, #1
 80021e8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80021f8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	021b      	lsls	r3, r3, #8
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	4313      	orrs	r3, r2
 8002202:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	68fa      	ldr	r2, [r7, #12]
 800220a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f042 0201 	orr.w	r2, r2, #1
 800221a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2220      	movs	r2, #32
 8002220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800222c:	2300      	movs	r3, #0
 800222e:	e000      	b.n	8002232 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002230:	2302      	movs	r3, #2
  }
}
 8002232:	4618      	mov	r0, r3
 8002234:	3714      	adds	r7, #20
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
	...

08002240 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002244:	4b04      	ldr	r3, [pc, #16]	; (8002258 <HAL_PWREx_GetVoltageRange+0x18>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800224c:	4618      	mov	r0, r3
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	40007000 	.word	0x40007000

0800225c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800226a:	d130      	bne.n	80022ce <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800226c:	4b23      	ldr	r3, [pc, #140]	; (80022fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002274:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002278:	d038      	beq.n	80022ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800227a:	4b20      	ldr	r3, [pc, #128]	; (80022fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002282:	4a1e      	ldr	r2, [pc, #120]	; (80022fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002284:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002288:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800228a:	4b1d      	ldr	r3, [pc, #116]	; (8002300 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2232      	movs	r2, #50	; 0x32
 8002290:	fb02 f303 	mul.w	r3, r2, r3
 8002294:	4a1b      	ldr	r2, [pc, #108]	; (8002304 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002296:	fba2 2303 	umull	r2, r3, r2, r3
 800229a:	0c9b      	lsrs	r3, r3, #18
 800229c:	3301      	adds	r3, #1
 800229e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022a0:	e002      	b.n	80022a8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	3b01      	subs	r3, #1
 80022a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022a8:	4b14      	ldr	r3, [pc, #80]	; (80022fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022aa:	695b      	ldr	r3, [r3, #20]
 80022ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022b4:	d102      	bne.n	80022bc <HAL_PWREx_ControlVoltageScaling+0x60>
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d1f2      	bne.n	80022a2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022bc:	4b0f      	ldr	r3, [pc, #60]	; (80022fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022be:	695b      	ldr	r3, [r3, #20]
 80022c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022c8:	d110      	bne.n	80022ec <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e00f      	b.n	80022ee <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80022ce:	4b0b      	ldr	r3, [pc, #44]	; (80022fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80022d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022da:	d007      	beq.n	80022ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80022dc:	4b07      	ldr	r3, [pc, #28]	; (80022fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022e4:	4a05      	ldr	r2, [pc, #20]	; (80022fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022ea:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3714      	adds	r7, #20
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	40007000 	.word	0x40007000
 8002300:	20000000 	.word	0x20000000
 8002304:	431bde83 	.word	0x431bde83

08002308 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b088      	sub	sp, #32
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e3ca      	b.n	8002ab0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800231a:	4b97      	ldr	r3, [pc, #604]	; (8002578 <HAL_RCC_OscConfig+0x270>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f003 030c 	and.w	r3, r3, #12
 8002322:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002324:	4b94      	ldr	r3, [pc, #592]	; (8002578 <HAL_RCC_OscConfig+0x270>)
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	f003 0303 	and.w	r3, r3, #3
 800232c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0310 	and.w	r3, r3, #16
 8002336:	2b00      	cmp	r3, #0
 8002338:	f000 80e4 	beq.w	8002504 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d007      	beq.n	8002352 <HAL_RCC_OscConfig+0x4a>
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	2b0c      	cmp	r3, #12
 8002346:	f040 808b 	bne.w	8002460 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	2b01      	cmp	r3, #1
 800234e:	f040 8087 	bne.w	8002460 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002352:	4b89      	ldr	r3, [pc, #548]	; (8002578 <HAL_RCC_OscConfig+0x270>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d005      	beq.n	800236a <HAL_RCC_OscConfig+0x62>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e3a2      	b.n	8002ab0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a1a      	ldr	r2, [r3, #32]
 800236e:	4b82      	ldr	r3, [pc, #520]	; (8002578 <HAL_RCC_OscConfig+0x270>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0308 	and.w	r3, r3, #8
 8002376:	2b00      	cmp	r3, #0
 8002378:	d004      	beq.n	8002384 <HAL_RCC_OscConfig+0x7c>
 800237a:	4b7f      	ldr	r3, [pc, #508]	; (8002578 <HAL_RCC_OscConfig+0x270>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002382:	e005      	b.n	8002390 <HAL_RCC_OscConfig+0x88>
 8002384:	4b7c      	ldr	r3, [pc, #496]	; (8002578 <HAL_RCC_OscConfig+0x270>)
 8002386:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800238a:	091b      	lsrs	r3, r3, #4
 800238c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002390:	4293      	cmp	r3, r2
 8002392:	d223      	bcs.n	80023dc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a1b      	ldr	r3, [r3, #32]
 8002398:	4618      	mov	r0, r3
 800239a:	f000 fd1d 	bl	8002dd8 <RCC_SetFlashLatencyFromMSIRange>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e383      	b.n	8002ab0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023a8:	4b73      	ldr	r3, [pc, #460]	; (8002578 <HAL_RCC_OscConfig+0x270>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a72      	ldr	r2, [pc, #456]	; (8002578 <HAL_RCC_OscConfig+0x270>)
 80023ae:	f043 0308 	orr.w	r3, r3, #8
 80023b2:	6013      	str	r3, [r2, #0]
 80023b4:	4b70      	ldr	r3, [pc, #448]	; (8002578 <HAL_RCC_OscConfig+0x270>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a1b      	ldr	r3, [r3, #32]
 80023c0:	496d      	ldr	r1, [pc, #436]	; (8002578 <HAL_RCC_OscConfig+0x270>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023c6:	4b6c      	ldr	r3, [pc, #432]	; (8002578 <HAL_RCC_OscConfig+0x270>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	69db      	ldr	r3, [r3, #28]
 80023d2:	021b      	lsls	r3, r3, #8
 80023d4:	4968      	ldr	r1, [pc, #416]	; (8002578 <HAL_RCC_OscConfig+0x270>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	604b      	str	r3, [r1, #4]
 80023da:	e025      	b.n	8002428 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023dc:	4b66      	ldr	r3, [pc, #408]	; (8002578 <HAL_RCC_OscConfig+0x270>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a65      	ldr	r2, [pc, #404]	; (8002578 <HAL_RCC_OscConfig+0x270>)
 80023e2:	f043 0308 	orr.w	r3, r3, #8
 80023e6:	6013      	str	r3, [r2, #0]
 80023e8:	4b63      	ldr	r3, [pc, #396]	; (8002578 <HAL_RCC_OscConfig+0x270>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a1b      	ldr	r3, [r3, #32]
 80023f4:	4960      	ldr	r1, [pc, #384]	; (8002578 <HAL_RCC_OscConfig+0x270>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023fa:	4b5f      	ldr	r3, [pc, #380]	; (8002578 <HAL_RCC_OscConfig+0x270>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	69db      	ldr	r3, [r3, #28]
 8002406:	021b      	lsls	r3, r3, #8
 8002408:	495b      	ldr	r1, [pc, #364]	; (8002578 <HAL_RCC_OscConfig+0x270>)
 800240a:	4313      	orrs	r3, r2
 800240c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d109      	bne.n	8002428 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a1b      	ldr	r3, [r3, #32]
 8002418:	4618      	mov	r0, r3
 800241a:	f000 fcdd 	bl	8002dd8 <RCC_SetFlashLatencyFromMSIRange>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e343      	b.n	8002ab0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002428:	f000 fc4a 	bl	8002cc0 <HAL_RCC_GetSysClockFreq>
 800242c:	4602      	mov	r2, r0
 800242e:	4b52      	ldr	r3, [pc, #328]	; (8002578 <HAL_RCC_OscConfig+0x270>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	091b      	lsrs	r3, r3, #4
 8002434:	f003 030f 	and.w	r3, r3, #15
 8002438:	4950      	ldr	r1, [pc, #320]	; (800257c <HAL_RCC_OscConfig+0x274>)
 800243a:	5ccb      	ldrb	r3, [r1, r3]
 800243c:	f003 031f 	and.w	r3, r3, #31
 8002440:	fa22 f303 	lsr.w	r3, r2, r3
 8002444:	4a4e      	ldr	r2, [pc, #312]	; (8002580 <HAL_RCC_OscConfig+0x278>)
 8002446:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002448:	4b4e      	ldr	r3, [pc, #312]	; (8002584 <HAL_RCC_OscConfig+0x27c>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4618      	mov	r0, r3
 800244e:	f7fe fdeb 	bl	8001028 <HAL_InitTick>
 8002452:	4603      	mov	r3, r0
 8002454:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002456:	7bfb      	ldrb	r3, [r7, #15]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d052      	beq.n	8002502 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800245c:	7bfb      	ldrb	r3, [r7, #15]
 800245e:	e327      	b.n	8002ab0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d032      	beq.n	80024ce <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002468:	4b43      	ldr	r3, [pc, #268]	; (8002578 <HAL_RCC_OscConfig+0x270>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a42      	ldr	r2, [pc, #264]	; (8002578 <HAL_RCC_OscConfig+0x270>)
 800246e:	f043 0301 	orr.w	r3, r3, #1
 8002472:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002474:	f7fe fe28 	bl	80010c8 <HAL_GetTick>
 8002478:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800247a:	e008      	b.n	800248e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800247c:	f7fe fe24 	bl	80010c8 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b02      	cmp	r3, #2
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e310      	b.n	8002ab0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800248e:	4b3a      	ldr	r3, [pc, #232]	; (8002578 <HAL_RCC_OscConfig+0x270>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d0f0      	beq.n	800247c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800249a:	4b37      	ldr	r3, [pc, #220]	; (8002578 <HAL_RCC_OscConfig+0x270>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a36      	ldr	r2, [pc, #216]	; (8002578 <HAL_RCC_OscConfig+0x270>)
 80024a0:	f043 0308 	orr.w	r3, r3, #8
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	4b34      	ldr	r3, [pc, #208]	; (8002578 <HAL_RCC_OscConfig+0x270>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a1b      	ldr	r3, [r3, #32]
 80024b2:	4931      	ldr	r1, [pc, #196]	; (8002578 <HAL_RCC_OscConfig+0x270>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024b8:	4b2f      	ldr	r3, [pc, #188]	; (8002578 <HAL_RCC_OscConfig+0x270>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	69db      	ldr	r3, [r3, #28]
 80024c4:	021b      	lsls	r3, r3, #8
 80024c6:	492c      	ldr	r1, [pc, #176]	; (8002578 <HAL_RCC_OscConfig+0x270>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	604b      	str	r3, [r1, #4]
 80024cc:	e01a      	b.n	8002504 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80024ce:	4b2a      	ldr	r3, [pc, #168]	; (8002578 <HAL_RCC_OscConfig+0x270>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a29      	ldr	r2, [pc, #164]	; (8002578 <HAL_RCC_OscConfig+0x270>)
 80024d4:	f023 0301 	bic.w	r3, r3, #1
 80024d8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024da:	f7fe fdf5 	bl	80010c8 <HAL_GetTick>
 80024de:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024e0:	e008      	b.n	80024f4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024e2:	f7fe fdf1 	bl	80010c8 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e2dd      	b.n	8002ab0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024f4:	4b20      	ldr	r3, [pc, #128]	; (8002578 <HAL_RCC_OscConfig+0x270>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d1f0      	bne.n	80024e2 <HAL_RCC_OscConfig+0x1da>
 8002500:	e000      	b.n	8002504 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002502:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0301 	and.w	r3, r3, #1
 800250c:	2b00      	cmp	r3, #0
 800250e:	d074      	beq.n	80025fa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	2b08      	cmp	r3, #8
 8002514:	d005      	beq.n	8002522 <HAL_RCC_OscConfig+0x21a>
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	2b0c      	cmp	r3, #12
 800251a:	d10e      	bne.n	800253a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	2b03      	cmp	r3, #3
 8002520:	d10b      	bne.n	800253a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002522:	4b15      	ldr	r3, [pc, #84]	; (8002578 <HAL_RCC_OscConfig+0x270>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d064      	beq.n	80025f8 <HAL_RCC_OscConfig+0x2f0>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d160      	bne.n	80025f8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e2ba      	b.n	8002ab0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002542:	d106      	bne.n	8002552 <HAL_RCC_OscConfig+0x24a>
 8002544:	4b0c      	ldr	r3, [pc, #48]	; (8002578 <HAL_RCC_OscConfig+0x270>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a0b      	ldr	r2, [pc, #44]	; (8002578 <HAL_RCC_OscConfig+0x270>)
 800254a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800254e:	6013      	str	r3, [r2, #0]
 8002550:	e026      	b.n	80025a0 <HAL_RCC_OscConfig+0x298>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800255a:	d115      	bne.n	8002588 <HAL_RCC_OscConfig+0x280>
 800255c:	4b06      	ldr	r3, [pc, #24]	; (8002578 <HAL_RCC_OscConfig+0x270>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a05      	ldr	r2, [pc, #20]	; (8002578 <HAL_RCC_OscConfig+0x270>)
 8002562:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002566:	6013      	str	r3, [r2, #0]
 8002568:	4b03      	ldr	r3, [pc, #12]	; (8002578 <HAL_RCC_OscConfig+0x270>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a02      	ldr	r2, [pc, #8]	; (8002578 <HAL_RCC_OscConfig+0x270>)
 800256e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002572:	6013      	str	r3, [r2, #0]
 8002574:	e014      	b.n	80025a0 <HAL_RCC_OscConfig+0x298>
 8002576:	bf00      	nop
 8002578:	40021000 	.word	0x40021000
 800257c:	08003880 	.word	0x08003880
 8002580:	20000000 	.word	0x20000000
 8002584:	20000004 	.word	0x20000004
 8002588:	4ba0      	ldr	r3, [pc, #640]	; (800280c <HAL_RCC_OscConfig+0x504>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a9f      	ldr	r2, [pc, #636]	; (800280c <HAL_RCC_OscConfig+0x504>)
 800258e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002592:	6013      	str	r3, [r2, #0]
 8002594:	4b9d      	ldr	r3, [pc, #628]	; (800280c <HAL_RCC_OscConfig+0x504>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a9c      	ldr	r2, [pc, #624]	; (800280c <HAL_RCC_OscConfig+0x504>)
 800259a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800259e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d013      	beq.n	80025d0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a8:	f7fe fd8e 	bl	80010c8 <HAL_GetTick>
 80025ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025ae:	e008      	b.n	80025c2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025b0:	f7fe fd8a 	bl	80010c8 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b64      	cmp	r3, #100	; 0x64
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e276      	b.n	8002ab0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025c2:	4b92      	ldr	r3, [pc, #584]	; (800280c <HAL_RCC_OscConfig+0x504>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d0f0      	beq.n	80025b0 <HAL_RCC_OscConfig+0x2a8>
 80025ce:	e014      	b.n	80025fa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d0:	f7fe fd7a 	bl	80010c8 <HAL_GetTick>
 80025d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025d8:	f7fe fd76 	bl	80010c8 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b64      	cmp	r3, #100	; 0x64
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e262      	b.n	8002ab0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025ea:	4b88      	ldr	r3, [pc, #544]	; (800280c <HAL_RCC_OscConfig+0x504>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1f0      	bne.n	80025d8 <HAL_RCC_OscConfig+0x2d0>
 80025f6:	e000      	b.n	80025fa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d060      	beq.n	80026c8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	2b04      	cmp	r3, #4
 800260a:	d005      	beq.n	8002618 <HAL_RCC_OscConfig+0x310>
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	2b0c      	cmp	r3, #12
 8002610:	d119      	bne.n	8002646 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	2b02      	cmp	r3, #2
 8002616:	d116      	bne.n	8002646 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002618:	4b7c      	ldr	r3, [pc, #496]	; (800280c <HAL_RCC_OscConfig+0x504>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002620:	2b00      	cmp	r3, #0
 8002622:	d005      	beq.n	8002630 <HAL_RCC_OscConfig+0x328>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e23f      	b.n	8002ab0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002630:	4b76      	ldr	r3, [pc, #472]	; (800280c <HAL_RCC_OscConfig+0x504>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	061b      	lsls	r3, r3, #24
 800263e:	4973      	ldr	r1, [pc, #460]	; (800280c <HAL_RCC_OscConfig+0x504>)
 8002640:	4313      	orrs	r3, r2
 8002642:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002644:	e040      	b.n	80026c8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d023      	beq.n	8002696 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800264e:	4b6f      	ldr	r3, [pc, #444]	; (800280c <HAL_RCC_OscConfig+0x504>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a6e      	ldr	r2, [pc, #440]	; (800280c <HAL_RCC_OscConfig+0x504>)
 8002654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002658:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800265a:	f7fe fd35 	bl	80010c8 <HAL_GetTick>
 800265e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002660:	e008      	b.n	8002674 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002662:	f7fe fd31 	bl	80010c8 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d901      	bls.n	8002674 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e21d      	b.n	8002ab0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002674:	4b65      	ldr	r3, [pc, #404]	; (800280c <HAL_RCC_OscConfig+0x504>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800267c:	2b00      	cmp	r3, #0
 800267e:	d0f0      	beq.n	8002662 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002680:	4b62      	ldr	r3, [pc, #392]	; (800280c <HAL_RCC_OscConfig+0x504>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	061b      	lsls	r3, r3, #24
 800268e:	495f      	ldr	r1, [pc, #380]	; (800280c <HAL_RCC_OscConfig+0x504>)
 8002690:	4313      	orrs	r3, r2
 8002692:	604b      	str	r3, [r1, #4]
 8002694:	e018      	b.n	80026c8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002696:	4b5d      	ldr	r3, [pc, #372]	; (800280c <HAL_RCC_OscConfig+0x504>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a5c      	ldr	r2, [pc, #368]	; (800280c <HAL_RCC_OscConfig+0x504>)
 800269c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a2:	f7fe fd11 	bl	80010c8 <HAL_GetTick>
 80026a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026a8:	e008      	b.n	80026bc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026aa:	f7fe fd0d 	bl	80010c8 <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d901      	bls.n	80026bc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e1f9      	b.n	8002ab0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026bc:	4b53      	ldr	r3, [pc, #332]	; (800280c <HAL_RCC_OscConfig+0x504>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d1f0      	bne.n	80026aa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0308 	and.w	r3, r3, #8
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d03c      	beq.n	800274e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	695b      	ldr	r3, [r3, #20]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d01c      	beq.n	8002716 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026dc:	4b4b      	ldr	r3, [pc, #300]	; (800280c <HAL_RCC_OscConfig+0x504>)
 80026de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026e2:	4a4a      	ldr	r2, [pc, #296]	; (800280c <HAL_RCC_OscConfig+0x504>)
 80026e4:	f043 0301 	orr.w	r3, r3, #1
 80026e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ec:	f7fe fcec 	bl	80010c8 <HAL_GetTick>
 80026f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026f2:	e008      	b.n	8002706 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026f4:	f7fe fce8 	bl	80010c8 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d901      	bls.n	8002706 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e1d4      	b.n	8002ab0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002706:	4b41      	ldr	r3, [pc, #260]	; (800280c <HAL_RCC_OscConfig+0x504>)
 8002708:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d0ef      	beq.n	80026f4 <HAL_RCC_OscConfig+0x3ec>
 8002714:	e01b      	b.n	800274e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002716:	4b3d      	ldr	r3, [pc, #244]	; (800280c <HAL_RCC_OscConfig+0x504>)
 8002718:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800271c:	4a3b      	ldr	r2, [pc, #236]	; (800280c <HAL_RCC_OscConfig+0x504>)
 800271e:	f023 0301 	bic.w	r3, r3, #1
 8002722:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002726:	f7fe fccf 	bl	80010c8 <HAL_GetTick>
 800272a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800272c:	e008      	b.n	8002740 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800272e:	f7fe fccb 	bl	80010c8 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b02      	cmp	r3, #2
 800273a:	d901      	bls.n	8002740 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e1b7      	b.n	8002ab0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002740:	4b32      	ldr	r3, [pc, #200]	; (800280c <HAL_RCC_OscConfig+0x504>)
 8002742:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1ef      	bne.n	800272e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0304 	and.w	r3, r3, #4
 8002756:	2b00      	cmp	r3, #0
 8002758:	f000 80a6 	beq.w	80028a8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800275c:	2300      	movs	r3, #0
 800275e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002760:	4b2a      	ldr	r3, [pc, #168]	; (800280c <HAL_RCC_OscConfig+0x504>)
 8002762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d10d      	bne.n	8002788 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800276c:	4b27      	ldr	r3, [pc, #156]	; (800280c <HAL_RCC_OscConfig+0x504>)
 800276e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002770:	4a26      	ldr	r2, [pc, #152]	; (800280c <HAL_RCC_OscConfig+0x504>)
 8002772:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002776:	6593      	str	r3, [r2, #88]	; 0x58
 8002778:	4b24      	ldr	r3, [pc, #144]	; (800280c <HAL_RCC_OscConfig+0x504>)
 800277a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800277c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002780:	60bb      	str	r3, [r7, #8]
 8002782:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002784:	2301      	movs	r3, #1
 8002786:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002788:	4b21      	ldr	r3, [pc, #132]	; (8002810 <HAL_RCC_OscConfig+0x508>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002790:	2b00      	cmp	r3, #0
 8002792:	d118      	bne.n	80027c6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002794:	4b1e      	ldr	r3, [pc, #120]	; (8002810 <HAL_RCC_OscConfig+0x508>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a1d      	ldr	r2, [pc, #116]	; (8002810 <HAL_RCC_OscConfig+0x508>)
 800279a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800279e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027a0:	f7fe fc92 	bl	80010c8 <HAL_GetTick>
 80027a4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027a6:	e008      	b.n	80027ba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027a8:	f7fe fc8e 	bl	80010c8 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e17a      	b.n	8002ab0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027ba:	4b15      	ldr	r3, [pc, #84]	; (8002810 <HAL_RCC_OscConfig+0x508>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d0f0      	beq.n	80027a8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d108      	bne.n	80027e0 <HAL_RCC_OscConfig+0x4d8>
 80027ce:	4b0f      	ldr	r3, [pc, #60]	; (800280c <HAL_RCC_OscConfig+0x504>)
 80027d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027d4:	4a0d      	ldr	r2, [pc, #52]	; (800280c <HAL_RCC_OscConfig+0x504>)
 80027d6:	f043 0301 	orr.w	r3, r3, #1
 80027da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027de:	e029      	b.n	8002834 <HAL_RCC_OscConfig+0x52c>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	2b05      	cmp	r3, #5
 80027e6:	d115      	bne.n	8002814 <HAL_RCC_OscConfig+0x50c>
 80027e8:	4b08      	ldr	r3, [pc, #32]	; (800280c <HAL_RCC_OscConfig+0x504>)
 80027ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ee:	4a07      	ldr	r2, [pc, #28]	; (800280c <HAL_RCC_OscConfig+0x504>)
 80027f0:	f043 0304 	orr.w	r3, r3, #4
 80027f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027f8:	4b04      	ldr	r3, [pc, #16]	; (800280c <HAL_RCC_OscConfig+0x504>)
 80027fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027fe:	4a03      	ldr	r2, [pc, #12]	; (800280c <HAL_RCC_OscConfig+0x504>)
 8002800:	f043 0301 	orr.w	r3, r3, #1
 8002804:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002808:	e014      	b.n	8002834 <HAL_RCC_OscConfig+0x52c>
 800280a:	bf00      	nop
 800280c:	40021000 	.word	0x40021000
 8002810:	40007000 	.word	0x40007000
 8002814:	4b9c      	ldr	r3, [pc, #624]	; (8002a88 <HAL_RCC_OscConfig+0x780>)
 8002816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800281a:	4a9b      	ldr	r2, [pc, #620]	; (8002a88 <HAL_RCC_OscConfig+0x780>)
 800281c:	f023 0301 	bic.w	r3, r3, #1
 8002820:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002824:	4b98      	ldr	r3, [pc, #608]	; (8002a88 <HAL_RCC_OscConfig+0x780>)
 8002826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800282a:	4a97      	ldr	r2, [pc, #604]	; (8002a88 <HAL_RCC_OscConfig+0x780>)
 800282c:	f023 0304 	bic.w	r3, r3, #4
 8002830:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d016      	beq.n	800286a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800283c:	f7fe fc44 	bl	80010c8 <HAL_GetTick>
 8002840:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002842:	e00a      	b.n	800285a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002844:	f7fe fc40 	bl	80010c8 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002852:	4293      	cmp	r3, r2
 8002854:	d901      	bls.n	800285a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e12a      	b.n	8002ab0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800285a:	4b8b      	ldr	r3, [pc, #556]	; (8002a88 <HAL_RCC_OscConfig+0x780>)
 800285c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002860:	f003 0302 	and.w	r3, r3, #2
 8002864:	2b00      	cmp	r3, #0
 8002866:	d0ed      	beq.n	8002844 <HAL_RCC_OscConfig+0x53c>
 8002868:	e015      	b.n	8002896 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800286a:	f7fe fc2d 	bl	80010c8 <HAL_GetTick>
 800286e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002870:	e00a      	b.n	8002888 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002872:	f7fe fc29 	bl	80010c8 <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002880:	4293      	cmp	r3, r2
 8002882:	d901      	bls.n	8002888 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e113      	b.n	8002ab0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002888:	4b7f      	ldr	r3, [pc, #508]	; (8002a88 <HAL_RCC_OscConfig+0x780>)
 800288a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1ed      	bne.n	8002872 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002896:	7ffb      	ldrb	r3, [r7, #31]
 8002898:	2b01      	cmp	r3, #1
 800289a:	d105      	bne.n	80028a8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800289c:	4b7a      	ldr	r3, [pc, #488]	; (8002a88 <HAL_RCC_OscConfig+0x780>)
 800289e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a0:	4a79      	ldr	r2, [pc, #484]	; (8002a88 <HAL_RCC_OscConfig+0x780>)
 80028a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028a6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	f000 80fe 	beq.w	8002aae <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	f040 80d0 	bne.w	8002a5c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80028bc:	4b72      	ldr	r3, [pc, #456]	; (8002a88 <HAL_RCC_OscConfig+0x780>)
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	f003 0203 	and.w	r2, r3, #3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d130      	bne.n	8002932 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028da:	3b01      	subs	r3, #1
 80028dc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028de:	429a      	cmp	r2, r3
 80028e0:	d127      	bne.n	8002932 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ec:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d11f      	bne.n	8002932 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80028fc:	2a07      	cmp	r2, #7
 80028fe:	bf14      	ite	ne
 8002900:	2201      	movne	r2, #1
 8002902:	2200      	moveq	r2, #0
 8002904:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002906:	4293      	cmp	r3, r2
 8002908:	d113      	bne.n	8002932 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002914:	085b      	lsrs	r3, r3, #1
 8002916:	3b01      	subs	r3, #1
 8002918:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800291a:	429a      	cmp	r2, r3
 800291c:	d109      	bne.n	8002932 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002928:	085b      	lsrs	r3, r3, #1
 800292a:	3b01      	subs	r3, #1
 800292c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800292e:	429a      	cmp	r2, r3
 8002930:	d06e      	beq.n	8002a10 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	2b0c      	cmp	r3, #12
 8002936:	d069      	beq.n	8002a0c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002938:	4b53      	ldr	r3, [pc, #332]	; (8002a88 <HAL_RCC_OscConfig+0x780>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d105      	bne.n	8002950 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002944:	4b50      	ldr	r3, [pc, #320]	; (8002a88 <HAL_RCC_OscConfig+0x780>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d001      	beq.n	8002954 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e0ad      	b.n	8002ab0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002954:	4b4c      	ldr	r3, [pc, #304]	; (8002a88 <HAL_RCC_OscConfig+0x780>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a4b      	ldr	r2, [pc, #300]	; (8002a88 <HAL_RCC_OscConfig+0x780>)
 800295a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800295e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002960:	f7fe fbb2 	bl	80010c8 <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002968:	f7fe fbae 	bl	80010c8 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e09a      	b.n	8002ab0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800297a:	4b43      	ldr	r3, [pc, #268]	; (8002a88 <HAL_RCC_OscConfig+0x780>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d1f0      	bne.n	8002968 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002986:	4b40      	ldr	r3, [pc, #256]	; (8002a88 <HAL_RCC_OscConfig+0x780>)
 8002988:	68da      	ldr	r2, [r3, #12]
 800298a:	4b40      	ldr	r3, [pc, #256]	; (8002a8c <HAL_RCC_OscConfig+0x784>)
 800298c:	4013      	ands	r3, r2
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002996:	3a01      	subs	r2, #1
 8002998:	0112      	lsls	r2, r2, #4
 800299a:	4311      	orrs	r1, r2
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80029a0:	0212      	lsls	r2, r2, #8
 80029a2:	4311      	orrs	r1, r2
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80029a8:	0852      	lsrs	r2, r2, #1
 80029aa:	3a01      	subs	r2, #1
 80029ac:	0552      	lsls	r2, r2, #21
 80029ae:	4311      	orrs	r1, r2
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80029b4:	0852      	lsrs	r2, r2, #1
 80029b6:	3a01      	subs	r2, #1
 80029b8:	0652      	lsls	r2, r2, #25
 80029ba:	4311      	orrs	r1, r2
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80029c0:	0912      	lsrs	r2, r2, #4
 80029c2:	0452      	lsls	r2, r2, #17
 80029c4:	430a      	orrs	r2, r1
 80029c6:	4930      	ldr	r1, [pc, #192]	; (8002a88 <HAL_RCC_OscConfig+0x780>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80029cc:	4b2e      	ldr	r3, [pc, #184]	; (8002a88 <HAL_RCC_OscConfig+0x780>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a2d      	ldr	r2, [pc, #180]	; (8002a88 <HAL_RCC_OscConfig+0x780>)
 80029d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029d6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029d8:	4b2b      	ldr	r3, [pc, #172]	; (8002a88 <HAL_RCC_OscConfig+0x780>)
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	4a2a      	ldr	r2, [pc, #168]	; (8002a88 <HAL_RCC_OscConfig+0x780>)
 80029de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029e2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029e4:	f7fe fb70 	bl	80010c8 <HAL_GetTick>
 80029e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029ea:	e008      	b.n	80029fe <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ec:	f7fe fb6c 	bl	80010c8 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e058      	b.n	8002ab0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029fe:	4b22      	ldr	r3, [pc, #136]	; (8002a88 <HAL_RCC_OscConfig+0x780>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d0f0      	beq.n	80029ec <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a0a:	e050      	b.n	8002aae <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e04f      	b.n	8002ab0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a10:	4b1d      	ldr	r3, [pc, #116]	; (8002a88 <HAL_RCC_OscConfig+0x780>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d148      	bne.n	8002aae <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002a1c:	4b1a      	ldr	r3, [pc, #104]	; (8002a88 <HAL_RCC_OscConfig+0x780>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a19      	ldr	r2, [pc, #100]	; (8002a88 <HAL_RCC_OscConfig+0x780>)
 8002a22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a26:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a28:	4b17      	ldr	r3, [pc, #92]	; (8002a88 <HAL_RCC_OscConfig+0x780>)
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	4a16      	ldr	r2, [pc, #88]	; (8002a88 <HAL_RCC_OscConfig+0x780>)
 8002a2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a32:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a34:	f7fe fb48 	bl	80010c8 <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a3c:	f7fe fb44 	bl	80010c8 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e030      	b.n	8002ab0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a4e:	4b0e      	ldr	r3, [pc, #56]	; (8002a88 <HAL_RCC_OscConfig+0x780>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d0f0      	beq.n	8002a3c <HAL_RCC_OscConfig+0x734>
 8002a5a:	e028      	b.n	8002aae <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	2b0c      	cmp	r3, #12
 8002a60:	d023      	beq.n	8002aaa <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a62:	4b09      	ldr	r3, [pc, #36]	; (8002a88 <HAL_RCC_OscConfig+0x780>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a08      	ldr	r2, [pc, #32]	; (8002a88 <HAL_RCC_OscConfig+0x780>)
 8002a68:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a6e:	f7fe fb2b 	bl	80010c8 <HAL_GetTick>
 8002a72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a74:	e00c      	b.n	8002a90 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a76:	f7fe fb27 	bl	80010c8 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d905      	bls.n	8002a90 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e013      	b.n	8002ab0 <HAL_RCC_OscConfig+0x7a8>
 8002a88:	40021000 	.word	0x40021000
 8002a8c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a90:	4b09      	ldr	r3, [pc, #36]	; (8002ab8 <HAL_RCC_OscConfig+0x7b0>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1ec      	bne.n	8002a76 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002a9c:	4b06      	ldr	r3, [pc, #24]	; (8002ab8 <HAL_RCC_OscConfig+0x7b0>)
 8002a9e:	68da      	ldr	r2, [r3, #12]
 8002aa0:	4905      	ldr	r1, [pc, #20]	; (8002ab8 <HAL_RCC_OscConfig+0x7b0>)
 8002aa2:	4b06      	ldr	r3, [pc, #24]	; (8002abc <HAL_RCC_OscConfig+0x7b4>)
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	60cb      	str	r3, [r1, #12]
 8002aa8:	e001      	b.n	8002aae <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e000      	b.n	8002ab0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3720      	adds	r7, #32
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	feeefffc 	.word	0xfeeefffc

08002ac0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d101      	bne.n	8002ad4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e0e7      	b.n	8002ca4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ad4:	4b75      	ldr	r3, [pc, #468]	; (8002cac <HAL_RCC_ClockConfig+0x1ec>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0307 	and.w	r3, r3, #7
 8002adc:	683a      	ldr	r2, [r7, #0]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d910      	bls.n	8002b04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ae2:	4b72      	ldr	r3, [pc, #456]	; (8002cac <HAL_RCC_ClockConfig+0x1ec>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f023 0207 	bic.w	r2, r3, #7
 8002aea:	4970      	ldr	r1, [pc, #448]	; (8002cac <HAL_RCC_ClockConfig+0x1ec>)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002af2:	4b6e      	ldr	r3, [pc, #440]	; (8002cac <HAL_RCC_ClockConfig+0x1ec>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0307 	and.w	r3, r3, #7
 8002afa:	683a      	ldr	r2, [r7, #0]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d001      	beq.n	8002b04 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e0cf      	b.n	8002ca4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0302 	and.w	r3, r3, #2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d010      	beq.n	8002b32 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689a      	ldr	r2, [r3, #8]
 8002b14:	4b66      	ldr	r3, [pc, #408]	; (8002cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d908      	bls.n	8002b32 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b20:	4b63      	ldr	r3, [pc, #396]	; (8002cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	4960      	ldr	r1, [pc, #384]	; (8002cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d04c      	beq.n	8002bd8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	2b03      	cmp	r3, #3
 8002b44:	d107      	bne.n	8002b56 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b46:	4b5a      	ldr	r3, [pc, #360]	; (8002cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d121      	bne.n	8002b96 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e0a6      	b.n	8002ca4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d107      	bne.n	8002b6e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b5e:	4b54      	ldr	r3, [pc, #336]	; (8002cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d115      	bne.n	8002b96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e09a      	b.n	8002ca4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d107      	bne.n	8002b86 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b76:	4b4e      	ldr	r3, [pc, #312]	; (8002cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d109      	bne.n	8002b96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e08e      	b.n	8002ca4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b86:	4b4a      	ldr	r3, [pc, #296]	; (8002cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d101      	bne.n	8002b96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e086      	b.n	8002ca4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b96:	4b46      	ldr	r3, [pc, #280]	; (8002cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f023 0203 	bic.w	r2, r3, #3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	4943      	ldr	r1, [pc, #268]	; (8002cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ba8:	f7fe fa8e 	bl	80010c8 <HAL_GetTick>
 8002bac:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bae:	e00a      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bb0:	f7fe fa8a 	bl	80010c8 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e06e      	b.n	8002ca4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bc6:	4b3a      	ldr	r3, [pc, #232]	; (8002cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f003 020c 	and.w	r2, r3, #12
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d1eb      	bne.n	8002bb0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0302 	and.w	r3, r3, #2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d010      	beq.n	8002c06 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689a      	ldr	r2, [r3, #8]
 8002be8:	4b31      	ldr	r3, [pc, #196]	; (8002cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d208      	bcs.n	8002c06 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bf4:	4b2e      	ldr	r3, [pc, #184]	; (8002cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	492b      	ldr	r1, [pc, #172]	; (8002cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c06:	4b29      	ldr	r3, [pc, #164]	; (8002cac <HAL_RCC_ClockConfig+0x1ec>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0307 	and.w	r3, r3, #7
 8002c0e:	683a      	ldr	r2, [r7, #0]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d210      	bcs.n	8002c36 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c14:	4b25      	ldr	r3, [pc, #148]	; (8002cac <HAL_RCC_ClockConfig+0x1ec>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f023 0207 	bic.w	r2, r3, #7
 8002c1c:	4923      	ldr	r1, [pc, #140]	; (8002cac <HAL_RCC_ClockConfig+0x1ec>)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c24:	4b21      	ldr	r3, [pc, #132]	; (8002cac <HAL_RCC_ClockConfig+0x1ec>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0307 	and.w	r3, r3, #7
 8002c2c:	683a      	ldr	r2, [r7, #0]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d001      	beq.n	8002c36 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e036      	b.n	8002ca4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0304 	and.w	r3, r3, #4
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d008      	beq.n	8002c54 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c42:	4b1b      	ldr	r3, [pc, #108]	; (8002cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	4918      	ldr	r1, [pc, #96]	; (8002cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0308 	and.w	r3, r3, #8
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d009      	beq.n	8002c74 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c60:	4b13      	ldr	r3, [pc, #76]	; (8002cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	00db      	lsls	r3, r3, #3
 8002c6e:	4910      	ldr	r1, [pc, #64]	; (8002cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c74:	f000 f824 	bl	8002cc0 <HAL_RCC_GetSysClockFreq>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	4b0d      	ldr	r3, [pc, #52]	; (8002cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	091b      	lsrs	r3, r3, #4
 8002c80:	f003 030f 	and.w	r3, r3, #15
 8002c84:	490b      	ldr	r1, [pc, #44]	; (8002cb4 <HAL_RCC_ClockConfig+0x1f4>)
 8002c86:	5ccb      	ldrb	r3, [r1, r3]
 8002c88:	f003 031f 	and.w	r3, r3, #31
 8002c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8002c90:	4a09      	ldr	r2, [pc, #36]	; (8002cb8 <HAL_RCC_ClockConfig+0x1f8>)
 8002c92:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c94:	4b09      	ldr	r3, [pc, #36]	; (8002cbc <HAL_RCC_ClockConfig+0x1fc>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7fe f9c5 	bl	8001028 <HAL_InitTick>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	72fb      	strb	r3, [r7, #11]

  return status;
 8002ca2:	7afb      	ldrb	r3, [r7, #11]
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3710      	adds	r7, #16
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	40022000 	.word	0x40022000
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	08003880 	.word	0x08003880
 8002cb8:	20000000 	.word	0x20000000
 8002cbc:	20000004 	.word	0x20000004

08002cc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b089      	sub	sp, #36	; 0x24
 8002cc4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	61fb      	str	r3, [r7, #28]
 8002cca:	2300      	movs	r3, #0
 8002ccc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cce:	4b3e      	ldr	r3, [pc, #248]	; (8002dc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f003 030c 	and.w	r3, r3, #12
 8002cd6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cd8:	4b3b      	ldr	r3, [pc, #236]	; (8002dc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	f003 0303 	and.w	r3, r3, #3
 8002ce0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d005      	beq.n	8002cf4 <HAL_RCC_GetSysClockFreq+0x34>
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	2b0c      	cmp	r3, #12
 8002cec:	d121      	bne.n	8002d32 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d11e      	bne.n	8002d32 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002cf4:	4b34      	ldr	r3, [pc, #208]	; (8002dc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0308 	and.w	r3, r3, #8
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d107      	bne.n	8002d10 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d00:	4b31      	ldr	r3, [pc, #196]	; (8002dc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d06:	0a1b      	lsrs	r3, r3, #8
 8002d08:	f003 030f 	and.w	r3, r3, #15
 8002d0c:	61fb      	str	r3, [r7, #28]
 8002d0e:	e005      	b.n	8002d1c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d10:	4b2d      	ldr	r3, [pc, #180]	; (8002dc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	091b      	lsrs	r3, r3, #4
 8002d16:	f003 030f 	and.w	r3, r3, #15
 8002d1a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002d1c:	4a2b      	ldr	r2, [pc, #172]	; (8002dcc <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d24:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d10d      	bne.n	8002d48 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d30:	e00a      	b.n	8002d48 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	2b04      	cmp	r3, #4
 8002d36:	d102      	bne.n	8002d3e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d38:	4b25      	ldr	r3, [pc, #148]	; (8002dd0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d3a:	61bb      	str	r3, [r7, #24]
 8002d3c:	e004      	b.n	8002d48 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	2b08      	cmp	r3, #8
 8002d42:	d101      	bne.n	8002d48 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d44:	4b23      	ldr	r3, [pc, #140]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002d46:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	2b0c      	cmp	r3, #12
 8002d4c:	d134      	bne.n	8002db8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d4e:	4b1e      	ldr	r3, [pc, #120]	; (8002dc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	f003 0303 	and.w	r3, r3, #3
 8002d56:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d003      	beq.n	8002d66 <HAL_RCC_GetSysClockFreq+0xa6>
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	2b03      	cmp	r3, #3
 8002d62:	d003      	beq.n	8002d6c <HAL_RCC_GetSysClockFreq+0xac>
 8002d64:	e005      	b.n	8002d72 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002d66:	4b1a      	ldr	r3, [pc, #104]	; (8002dd0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d68:	617b      	str	r3, [r7, #20]
      break;
 8002d6a:	e005      	b.n	8002d78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002d6c:	4b19      	ldr	r3, [pc, #100]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002d6e:	617b      	str	r3, [r7, #20]
      break;
 8002d70:	e002      	b.n	8002d78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	617b      	str	r3, [r7, #20]
      break;
 8002d76:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d78:	4b13      	ldr	r3, [pc, #76]	; (8002dc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	091b      	lsrs	r3, r3, #4
 8002d7e:	f003 0307 	and.w	r3, r3, #7
 8002d82:	3301      	adds	r3, #1
 8002d84:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d86:	4b10      	ldr	r3, [pc, #64]	; (8002dc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	0a1b      	lsrs	r3, r3, #8
 8002d8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d90:	697a      	ldr	r2, [r7, #20]
 8002d92:	fb03 f202 	mul.w	r2, r3, r2
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d9c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d9e:	4b0a      	ldr	r3, [pc, #40]	; (8002dc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	0e5b      	lsrs	r3, r3, #25
 8002da4:	f003 0303 	and.w	r3, r3, #3
 8002da8:	3301      	adds	r3, #1
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002dae:	697a      	ldr	r2, [r7, #20]
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002db6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002db8:	69bb      	ldr	r3, [r7, #24]
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3724      	adds	r7, #36	; 0x24
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	40021000 	.word	0x40021000
 8002dcc:	08003890 	.word	0x08003890
 8002dd0:	00f42400 	.word	0x00f42400
 8002dd4:	007a1200 	.word	0x007a1200

08002dd8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b086      	sub	sp, #24
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002de0:	2300      	movs	r3, #0
 8002de2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002de4:	4b2a      	ldr	r3, [pc, #168]	; (8002e90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d003      	beq.n	8002df8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002df0:	f7ff fa26 	bl	8002240 <HAL_PWREx_GetVoltageRange>
 8002df4:	6178      	str	r0, [r7, #20]
 8002df6:	e014      	b.n	8002e22 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002df8:	4b25      	ldr	r3, [pc, #148]	; (8002e90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dfc:	4a24      	ldr	r2, [pc, #144]	; (8002e90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e02:	6593      	str	r3, [r2, #88]	; 0x58
 8002e04:	4b22      	ldr	r3, [pc, #136]	; (8002e90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e0c:	60fb      	str	r3, [r7, #12]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002e10:	f7ff fa16 	bl	8002240 <HAL_PWREx_GetVoltageRange>
 8002e14:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002e16:	4b1e      	ldr	r3, [pc, #120]	; (8002e90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e1a:	4a1d      	ldr	r2, [pc, #116]	; (8002e90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e20:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e28:	d10b      	bne.n	8002e42 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2b80      	cmp	r3, #128	; 0x80
 8002e2e:	d919      	bls.n	8002e64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2ba0      	cmp	r3, #160	; 0xa0
 8002e34:	d902      	bls.n	8002e3c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e36:	2302      	movs	r3, #2
 8002e38:	613b      	str	r3, [r7, #16]
 8002e3a:	e013      	b.n	8002e64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	613b      	str	r3, [r7, #16]
 8002e40:	e010      	b.n	8002e64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2b80      	cmp	r3, #128	; 0x80
 8002e46:	d902      	bls.n	8002e4e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002e48:	2303      	movs	r3, #3
 8002e4a:	613b      	str	r3, [r7, #16]
 8002e4c:	e00a      	b.n	8002e64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2b80      	cmp	r3, #128	; 0x80
 8002e52:	d102      	bne.n	8002e5a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e54:	2302      	movs	r3, #2
 8002e56:	613b      	str	r3, [r7, #16]
 8002e58:	e004      	b.n	8002e64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2b70      	cmp	r3, #112	; 0x70
 8002e5e:	d101      	bne.n	8002e64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e60:	2301      	movs	r3, #1
 8002e62:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e64:	4b0b      	ldr	r3, [pc, #44]	; (8002e94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f023 0207 	bic.w	r2, r3, #7
 8002e6c:	4909      	ldr	r1, [pc, #36]	; (8002e94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e74:	4b07      	ldr	r3, [pc, #28]	; (8002e94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0307 	and.w	r3, r3, #7
 8002e7c:	693a      	ldr	r2, [r7, #16]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d001      	beq.n	8002e86 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e000      	b.n	8002e88 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002e86:	2300      	movs	r3, #0
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3718      	adds	r7, #24
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	40021000 	.word	0x40021000
 8002e94:	40022000 	.word	0x40022000

08002e98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b086      	sub	sp, #24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d041      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002eb8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ebc:	d02a      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002ebe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ec2:	d824      	bhi.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ec4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ec8:	d008      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002eca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ece:	d81e      	bhi.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d00a      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002ed4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ed8:	d010      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002eda:	e018      	b.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002edc:	4b86      	ldr	r3, [pc, #536]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	4a85      	ldr	r2, [pc, #532]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ee2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ee6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ee8:	e015      	b.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	3304      	adds	r3, #4
 8002eee:	2100      	movs	r1, #0
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f000 fabb 	bl	800346c <RCCEx_PLLSAI1_Config>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002efa:	e00c      	b.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	3320      	adds	r3, #32
 8002f00:	2100      	movs	r1, #0
 8002f02:	4618      	mov	r0, r3
 8002f04:	f000 fba6 	bl	8003654 <RCCEx_PLLSAI2_Config>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f0c:	e003      	b.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	74fb      	strb	r3, [r7, #19]
      break;
 8002f12:	e000      	b.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002f14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f16:	7cfb      	ldrb	r3, [r7, #19]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d10b      	bne.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f1c:	4b76      	ldr	r3, [pc, #472]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f22:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f2a:	4973      	ldr	r1, [pc, #460]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002f32:	e001      	b.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f34:	7cfb      	ldrb	r3, [r7, #19]
 8002f36:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d041      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f48:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f4c:	d02a      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002f4e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f52:	d824      	bhi.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002f54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f58:	d008      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002f5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f5e:	d81e      	bhi.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d00a      	beq.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002f64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f68:	d010      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002f6a:	e018      	b.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f6c:	4b62      	ldr	r3, [pc, #392]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	4a61      	ldr	r2, [pc, #388]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f76:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f78:	e015      	b.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	3304      	adds	r3, #4
 8002f7e:	2100      	movs	r1, #0
 8002f80:	4618      	mov	r0, r3
 8002f82:	f000 fa73 	bl	800346c <RCCEx_PLLSAI1_Config>
 8002f86:	4603      	mov	r3, r0
 8002f88:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f8a:	e00c      	b.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	3320      	adds	r3, #32
 8002f90:	2100      	movs	r1, #0
 8002f92:	4618      	mov	r0, r3
 8002f94:	f000 fb5e 	bl	8003654 <RCCEx_PLLSAI2_Config>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f9c:	e003      	b.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	74fb      	strb	r3, [r7, #19]
      break;
 8002fa2:	e000      	b.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002fa4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fa6:	7cfb      	ldrb	r3, [r7, #19]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d10b      	bne.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002fac:	4b52      	ldr	r3, [pc, #328]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fb2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fba:	494f      	ldr	r1, [pc, #316]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002fc2:	e001      	b.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fc4:	7cfb      	ldrb	r3, [r7, #19]
 8002fc6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f000 80a0 	beq.w	8003116 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002fda:	4b47      	ldr	r3, [pc, #284]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e000      	b.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002fea:	2300      	movs	r3, #0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d00d      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ff0:	4b41      	ldr	r3, [pc, #260]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff4:	4a40      	ldr	r2, [pc, #256]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ff6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ffa:	6593      	str	r3, [r2, #88]	; 0x58
 8002ffc:	4b3e      	ldr	r3, [pc, #248]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003000:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003004:	60bb      	str	r3, [r7, #8]
 8003006:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003008:	2301      	movs	r3, #1
 800300a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800300c:	4b3b      	ldr	r3, [pc, #236]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a3a      	ldr	r2, [pc, #232]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003012:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003016:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003018:	f7fe f856 	bl	80010c8 <HAL_GetTick>
 800301c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800301e:	e009      	b.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003020:	f7fe f852 	bl	80010c8 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b02      	cmp	r3, #2
 800302c:	d902      	bls.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	74fb      	strb	r3, [r7, #19]
        break;
 8003032:	e005      	b.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003034:	4b31      	ldr	r3, [pc, #196]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800303c:	2b00      	cmp	r3, #0
 800303e:	d0ef      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003040:	7cfb      	ldrb	r3, [r7, #19]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d15c      	bne.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003046:	4b2c      	ldr	r3, [pc, #176]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800304c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003050:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d01f      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800305e:	697a      	ldr	r2, [r7, #20]
 8003060:	429a      	cmp	r2, r3
 8003062:	d019      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003064:	4b24      	ldr	r3, [pc, #144]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800306a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800306e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003070:	4b21      	ldr	r3, [pc, #132]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003076:	4a20      	ldr	r2, [pc, #128]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800307c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003080:	4b1d      	ldr	r3, [pc, #116]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003086:	4a1c      	ldr	r2, [pc, #112]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003088:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800308c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003090:	4a19      	ldr	r2, [pc, #100]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d016      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a2:	f7fe f811 	bl	80010c8 <HAL_GetTick>
 80030a6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030a8:	e00b      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030aa:	f7fe f80d 	bl	80010c8 <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d902      	bls.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	74fb      	strb	r3, [r7, #19]
            break;
 80030c0:	e006      	b.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030c2:	4b0d      	ldr	r3, [pc, #52]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030c8:	f003 0302 	and.w	r3, r3, #2
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d0ec      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80030d0:	7cfb      	ldrb	r3, [r7, #19]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10c      	bne.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030d6:	4b08      	ldr	r3, [pc, #32]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030e6:	4904      	ldr	r1, [pc, #16]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80030ee:	e009      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030f0:	7cfb      	ldrb	r3, [r7, #19]
 80030f2:	74bb      	strb	r3, [r7, #18]
 80030f4:	e006      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80030f6:	bf00      	nop
 80030f8:	40021000 	.word	0x40021000
 80030fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003100:	7cfb      	ldrb	r3, [r7, #19]
 8003102:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003104:	7c7b      	ldrb	r3, [r7, #17]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d105      	bne.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800310a:	4b9e      	ldr	r3, [pc, #632]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800310c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800310e:	4a9d      	ldr	r2, [pc, #628]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003110:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003114:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00a      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003122:	4b98      	ldr	r3, [pc, #608]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003128:	f023 0203 	bic.w	r2, r3, #3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003130:	4994      	ldr	r1, [pc, #592]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003132:	4313      	orrs	r3, r2
 8003134:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0302 	and.w	r3, r3, #2
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00a      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003144:	4b8f      	ldr	r3, [pc, #572]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800314a:	f023 020c 	bic.w	r2, r3, #12
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003152:	498c      	ldr	r1, [pc, #560]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003154:	4313      	orrs	r3, r2
 8003156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0304 	and.w	r3, r3, #4
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00a      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003166:	4b87      	ldr	r3, [pc, #540]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800316c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003174:	4983      	ldr	r1, [pc, #524]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003176:	4313      	orrs	r3, r2
 8003178:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0308 	and.w	r3, r3, #8
 8003184:	2b00      	cmp	r3, #0
 8003186:	d00a      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003188:	4b7e      	ldr	r3, [pc, #504]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800318a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800318e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003196:	497b      	ldr	r1, [pc, #492]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003198:	4313      	orrs	r3, r2
 800319a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0310 	and.w	r3, r3, #16
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00a      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80031aa:	4b76      	ldr	r3, [pc, #472]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031b8:	4972      	ldr	r1, [pc, #456]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0320 	and.w	r3, r3, #32
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d00a      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80031cc:	4b6d      	ldr	r3, [pc, #436]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031da:	496a      	ldr	r1, [pc, #424]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00a      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031ee:	4b65      	ldr	r3, [pc, #404]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031fc:	4961      	ldr	r1, [pc, #388]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00a      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003210:	4b5c      	ldr	r3, [pc, #368]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003216:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800321e:	4959      	ldr	r1, [pc, #356]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003220:	4313      	orrs	r3, r2
 8003222:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00a      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003232:	4b54      	ldr	r3, [pc, #336]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003238:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003240:	4950      	ldr	r1, [pc, #320]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003242:	4313      	orrs	r3, r2
 8003244:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003250:	2b00      	cmp	r3, #0
 8003252:	d00a      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003254:	4b4b      	ldr	r3, [pc, #300]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800325a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003262:	4948      	ldr	r1, [pc, #288]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003264:	4313      	orrs	r3, r2
 8003266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00a      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003276:	4b43      	ldr	r3, [pc, #268]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800327c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003284:	493f      	ldr	r1, [pc, #252]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003286:	4313      	orrs	r3, r2
 8003288:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d028      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003298:	4b3a      	ldr	r3, [pc, #232]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800329a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800329e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032a6:	4937      	ldr	r1, [pc, #220]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032b6:	d106      	bne.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032b8:	4b32      	ldr	r3, [pc, #200]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	4a31      	ldr	r2, [pc, #196]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032c2:	60d3      	str	r3, [r2, #12]
 80032c4:	e011      	b.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032ce:	d10c      	bne.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	3304      	adds	r3, #4
 80032d4:	2101      	movs	r1, #1
 80032d6:	4618      	mov	r0, r3
 80032d8:	f000 f8c8 	bl	800346c <RCCEx_PLLSAI1_Config>
 80032dc:	4603      	mov	r3, r0
 80032de:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80032e0:	7cfb      	ldrb	r3, [r7, #19]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80032e6:	7cfb      	ldrb	r3, [r7, #19]
 80032e8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d028      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80032f6:	4b23      	ldr	r3, [pc, #140]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032fc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003304:	491f      	ldr	r1, [pc, #124]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003306:	4313      	orrs	r3, r2
 8003308:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003310:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003314:	d106      	bne.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003316:	4b1b      	ldr	r3, [pc, #108]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	4a1a      	ldr	r2, [pc, #104]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800331c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003320:	60d3      	str	r3, [r2, #12]
 8003322:	e011      	b.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003328:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800332c:	d10c      	bne.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	3304      	adds	r3, #4
 8003332:	2101      	movs	r1, #1
 8003334:	4618      	mov	r0, r3
 8003336:	f000 f899 	bl	800346c <RCCEx_PLLSAI1_Config>
 800333a:	4603      	mov	r3, r0
 800333c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800333e:	7cfb      	ldrb	r3, [r7, #19]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d001      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003344:	7cfb      	ldrb	r3, [r7, #19]
 8003346:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d02b      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003354:	4b0b      	ldr	r3, [pc, #44]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800335a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003362:	4908      	ldr	r1, [pc, #32]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003364:	4313      	orrs	r3, r2
 8003366:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800336e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003372:	d109      	bne.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003374:	4b03      	ldr	r3, [pc, #12]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	4a02      	ldr	r2, [pc, #8]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800337a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800337e:	60d3      	str	r3, [r2, #12]
 8003380:	e014      	b.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003382:	bf00      	nop
 8003384:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800338c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003390:	d10c      	bne.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	3304      	adds	r3, #4
 8003396:	2101      	movs	r1, #1
 8003398:	4618      	mov	r0, r3
 800339a:	f000 f867 	bl	800346c <RCCEx_PLLSAI1_Config>
 800339e:	4603      	mov	r3, r0
 80033a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033a2:	7cfb      	ldrb	r3, [r7, #19]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d001      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80033a8:	7cfb      	ldrb	r3, [r7, #19]
 80033aa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d02f      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033b8:	4b2b      	ldr	r3, [pc, #172]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033be:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033c6:	4928      	ldr	r1, [pc, #160]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033d6:	d10d      	bne.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	3304      	adds	r3, #4
 80033dc:	2102      	movs	r1, #2
 80033de:	4618      	mov	r0, r3
 80033e0:	f000 f844 	bl	800346c <RCCEx_PLLSAI1_Config>
 80033e4:	4603      	mov	r3, r0
 80033e6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033e8:	7cfb      	ldrb	r3, [r7, #19]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d014      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80033ee:	7cfb      	ldrb	r3, [r7, #19]
 80033f0:	74bb      	strb	r3, [r7, #18]
 80033f2:	e011      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033fc:	d10c      	bne.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	3320      	adds	r3, #32
 8003402:	2102      	movs	r1, #2
 8003404:	4618      	mov	r0, r3
 8003406:	f000 f925 	bl	8003654 <RCCEx_PLLSAI2_Config>
 800340a:	4603      	mov	r3, r0
 800340c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800340e:	7cfb      	ldrb	r3, [r7, #19]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d001      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003414:	7cfb      	ldrb	r3, [r7, #19]
 8003416:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d00a      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003424:	4b10      	ldr	r3, [pc, #64]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800342a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003432:	490d      	ldr	r1, [pc, #52]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003434:	4313      	orrs	r3, r2
 8003436:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00b      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003446:	4b08      	ldr	r3, [pc, #32]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800344c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003456:	4904      	ldr	r1, [pc, #16]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003458:	4313      	orrs	r3, r2
 800345a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800345e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003460:	4618      	mov	r0, r3
 8003462:	3718      	adds	r7, #24
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	40021000 	.word	0x40021000

0800346c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003476:	2300      	movs	r3, #0
 8003478:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800347a:	4b75      	ldr	r3, [pc, #468]	; (8003650 <RCCEx_PLLSAI1_Config+0x1e4>)
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	f003 0303 	and.w	r3, r3, #3
 8003482:	2b00      	cmp	r3, #0
 8003484:	d018      	beq.n	80034b8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003486:	4b72      	ldr	r3, [pc, #456]	; (8003650 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	f003 0203 	and.w	r2, r3, #3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	429a      	cmp	r2, r3
 8003494:	d10d      	bne.n	80034b2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
       ||
 800349a:	2b00      	cmp	r3, #0
 800349c:	d009      	beq.n	80034b2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800349e:	4b6c      	ldr	r3, [pc, #432]	; (8003650 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	091b      	lsrs	r3, r3, #4
 80034a4:	f003 0307 	and.w	r3, r3, #7
 80034a8:	1c5a      	adds	r2, r3, #1
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
       ||
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d047      	beq.n	8003542 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	73fb      	strb	r3, [r7, #15]
 80034b6:	e044      	b.n	8003542 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2b03      	cmp	r3, #3
 80034be:	d018      	beq.n	80034f2 <RCCEx_PLLSAI1_Config+0x86>
 80034c0:	2b03      	cmp	r3, #3
 80034c2:	d825      	bhi.n	8003510 <RCCEx_PLLSAI1_Config+0xa4>
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d002      	beq.n	80034ce <RCCEx_PLLSAI1_Config+0x62>
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d009      	beq.n	80034e0 <RCCEx_PLLSAI1_Config+0x74>
 80034cc:	e020      	b.n	8003510 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80034ce:	4b60      	ldr	r3, [pc, #384]	; (8003650 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d11d      	bne.n	8003516 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034de:	e01a      	b.n	8003516 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80034e0:	4b5b      	ldr	r3, [pc, #364]	; (8003650 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d116      	bne.n	800351a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034f0:	e013      	b.n	800351a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80034f2:	4b57      	ldr	r3, [pc, #348]	; (8003650 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d10f      	bne.n	800351e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80034fe:	4b54      	ldr	r3, [pc, #336]	; (8003650 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d109      	bne.n	800351e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800350e:	e006      	b.n	800351e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	73fb      	strb	r3, [r7, #15]
      break;
 8003514:	e004      	b.n	8003520 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003516:	bf00      	nop
 8003518:	e002      	b.n	8003520 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800351a:	bf00      	nop
 800351c:	e000      	b.n	8003520 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800351e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003520:	7bfb      	ldrb	r3, [r7, #15]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d10d      	bne.n	8003542 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003526:	4b4a      	ldr	r3, [pc, #296]	; (8003650 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6819      	ldr	r1, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	3b01      	subs	r3, #1
 8003538:	011b      	lsls	r3, r3, #4
 800353a:	430b      	orrs	r3, r1
 800353c:	4944      	ldr	r1, [pc, #272]	; (8003650 <RCCEx_PLLSAI1_Config+0x1e4>)
 800353e:	4313      	orrs	r3, r2
 8003540:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003542:	7bfb      	ldrb	r3, [r7, #15]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d17d      	bne.n	8003644 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003548:	4b41      	ldr	r3, [pc, #260]	; (8003650 <RCCEx_PLLSAI1_Config+0x1e4>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a40      	ldr	r2, [pc, #256]	; (8003650 <RCCEx_PLLSAI1_Config+0x1e4>)
 800354e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003552:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003554:	f7fd fdb8 	bl	80010c8 <HAL_GetTick>
 8003558:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800355a:	e009      	b.n	8003570 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800355c:	f7fd fdb4 	bl	80010c8 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b02      	cmp	r3, #2
 8003568:	d902      	bls.n	8003570 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	73fb      	strb	r3, [r7, #15]
        break;
 800356e:	e005      	b.n	800357c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003570:	4b37      	ldr	r3, [pc, #220]	; (8003650 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d1ef      	bne.n	800355c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800357c:	7bfb      	ldrb	r3, [r7, #15]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d160      	bne.n	8003644 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d111      	bne.n	80035ac <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003588:	4b31      	ldr	r3, [pc, #196]	; (8003650 <RCCEx_PLLSAI1_Config+0x1e4>)
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003590:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	6892      	ldr	r2, [r2, #8]
 8003598:	0211      	lsls	r1, r2, #8
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	68d2      	ldr	r2, [r2, #12]
 800359e:	0912      	lsrs	r2, r2, #4
 80035a0:	0452      	lsls	r2, r2, #17
 80035a2:	430a      	orrs	r2, r1
 80035a4:	492a      	ldr	r1, [pc, #168]	; (8003650 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	610b      	str	r3, [r1, #16]
 80035aa:	e027      	b.n	80035fc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d112      	bne.n	80035d8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035b2:	4b27      	ldr	r3, [pc, #156]	; (8003650 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80035ba:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	6892      	ldr	r2, [r2, #8]
 80035c2:	0211      	lsls	r1, r2, #8
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	6912      	ldr	r2, [r2, #16]
 80035c8:	0852      	lsrs	r2, r2, #1
 80035ca:	3a01      	subs	r2, #1
 80035cc:	0552      	lsls	r2, r2, #21
 80035ce:	430a      	orrs	r2, r1
 80035d0:	491f      	ldr	r1, [pc, #124]	; (8003650 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	610b      	str	r3, [r1, #16]
 80035d6:	e011      	b.n	80035fc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035d8:	4b1d      	ldr	r3, [pc, #116]	; (8003650 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035da:	691b      	ldr	r3, [r3, #16]
 80035dc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80035e0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	6892      	ldr	r2, [r2, #8]
 80035e8:	0211      	lsls	r1, r2, #8
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	6952      	ldr	r2, [r2, #20]
 80035ee:	0852      	lsrs	r2, r2, #1
 80035f0:	3a01      	subs	r2, #1
 80035f2:	0652      	lsls	r2, r2, #25
 80035f4:	430a      	orrs	r2, r1
 80035f6:	4916      	ldr	r1, [pc, #88]	; (8003650 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80035fc:	4b14      	ldr	r3, [pc, #80]	; (8003650 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a13      	ldr	r2, [pc, #76]	; (8003650 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003602:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003606:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003608:	f7fd fd5e 	bl	80010c8 <HAL_GetTick>
 800360c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800360e:	e009      	b.n	8003624 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003610:	f7fd fd5a 	bl	80010c8 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b02      	cmp	r3, #2
 800361c:	d902      	bls.n	8003624 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	73fb      	strb	r3, [r7, #15]
          break;
 8003622:	e005      	b.n	8003630 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003624:	4b0a      	ldr	r3, [pc, #40]	; (8003650 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d0ef      	beq.n	8003610 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003630:	7bfb      	ldrb	r3, [r7, #15]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d106      	bne.n	8003644 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003636:	4b06      	ldr	r3, [pc, #24]	; (8003650 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003638:	691a      	ldr	r2, [r3, #16]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	4904      	ldr	r1, [pc, #16]	; (8003650 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003640:	4313      	orrs	r3, r2
 8003642:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003644:	7bfb      	ldrb	r3, [r7, #15]
}
 8003646:	4618      	mov	r0, r3
 8003648:	3710      	adds	r7, #16
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	40021000 	.word	0x40021000

08003654 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800365e:	2300      	movs	r3, #0
 8003660:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003662:	4b6a      	ldr	r3, [pc, #424]	; (800380c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	f003 0303 	and.w	r3, r3, #3
 800366a:	2b00      	cmp	r3, #0
 800366c:	d018      	beq.n	80036a0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800366e:	4b67      	ldr	r3, [pc, #412]	; (800380c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	f003 0203 	and.w	r2, r3, #3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	429a      	cmp	r2, r3
 800367c:	d10d      	bne.n	800369a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
       ||
 8003682:	2b00      	cmp	r3, #0
 8003684:	d009      	beq.n	800369a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003686:	4b61      	ldr	r3, [pc, #388]	; (800380c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	091b      	lsrs	r3, r3, #4
 800368c:	f003 0307 	and.w	r3, r3, #7
 8003690:	1c5a      	adds	r2, r3, #1
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
       ||
 8003696:	429a      	cmp	r2, r3
 8003698:	d047      	beq.n	800372a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	73fb      	strb	r3, [r7, #15]
 800369e:	e044      	b.n	800372a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2b03      	cmp	r3, #3
 80036a6:	d018      	beq.n	80036da <RCCEx_PLLSAI2_Config+0x86>
 80036a8:	2b03      	cmp	r3, #3
 80036aa:	d825      	bhi.n	80036f8 <RCCEx_PLLSAI2_Config+0xa4>
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d002      	beq.n	80036b6 <RCCEx_PLLSAI2_Config+0x62>
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d009      	beq.n	80036c8 <RCCEx_PLLSAI2_Config+0x74>
 80036b4:	e020      	b.n	80036f8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80036b6:	4b55      	ldr	r3, [pc, #340]	; (800380c <RCCEx_PLLSAI2_Config+0x1b8>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d11d      	bne.n	80036fe <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036c6:	e01a      	b.n	80036fe <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80036c8:	4b50      	ldr	r3, [pc, #320]	; (800380c <RCCEx_PLLSAI2_Config+0x1b8>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d116      	bne.n	8003702 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036d8:	e013      	b.n	8003702 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80036da:	4b4c      	ldr	r3, [pc, #304]	; (800380c <RCCEx_PLLSAI2_Config+0x1b8>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d10f      	bne.n	8003706 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80036e6:	4b49      	ldr	r3, [pc, #292]	; (800380c <RCCEx_PLLSAI2_Config+0x1b8>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d109      	bne.n	8003706 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80036f6:	e006      	b.n	8003706 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	73fb      	strb	r3, [r7, #15]
      break;
 80036fc:	e004      	b.n	8003708 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80036fe:	bf00      	nop
 8003700:	e002      	b.n	8003708 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003702:	bf00      	nop
 8003704:	e000      	b.n	8003708 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003706:	bf00      	nop
    }

    if(status == HAL_OK)
 8003708:	7bfb      	ldrb	r3, [r7, #15]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10d      	bne.n	800372a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800370e:	4b3f      	ldr	r3, [pc, #252]	; (800380c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6819      	ldr	r1, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	3b01      	subs	r3, #1
 8003720:	011b      	lsls	r3, r3, #4
 8003722:	430b      	orrs	r3, r1
 8003724:	4939      	ldr	r1, [pc, #228]	; (800380c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003726:	4313      	orrs	r3, r2
 8003728:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800372a:	7bfb      	ldrb	r3, [r7, #15]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d167      	bne.n	8003800 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003730:	4b36      	ldr	r3, [pc, #216]	; (800380c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a35      	ldr	r2, [pc, #212]	; (800380c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003736:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800373a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800373c:	f7fd fcc4 	bl	80010c8 <HAL_GetTick>
 8003740:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003742:	e009      	b.n	8003758 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003744:	f7fd fcc0 	bl	80010c8 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b02      	cmp	r3, #2
 8003750:	d902      	bls.n	8003758 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	73fb      	strb	r3, [r7, #15]
        break;
 8003756:	e005      	b.n	8003764 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003758:	4b2c      	ldr	r3, [pc, #176]	; (800380c <RCCEx_PLLSAI2_Config+0x1b8>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d1ef      	bne.n	8003744 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003764:	7bfb      	ldrb	r3, [r7, #15]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d14a      	bne.n	8003800 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d111      	bne.n	8003794 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003770:	4b26      	ldr	r3, [pc, #152]	; (800380c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003772:	695b      	ldr	r3, [r3, #20]
 8003774:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003778:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	6892      	ldr	r2, [r2, #8]
 8003780:	0211      	lsls	r1, r2, #8
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	68d2      	ldr	r2, [r2, #12]
 8003786:	0912      	lsrs	r2, r2, #4
 8003788:	0452      	lsls	r2, r2, #17
 800378a:	430a      	orrs	r2, r1
 800378c:	491f      	ldr	r1, [pc, #124]	; (800380c <RCCEx_PLLSAI2_Config+0x1b8>)
 800378e:	4313      	orrs	r3, r2
 8003790:	614b      	str	r3, [r1, #20]
 8003792:	e011      	b.n	80037b8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003794:	4b1d      	ldr	r3, [pc, #116]	; (800380c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003796:	695b      	ldr	r3, [r3, #20]
 8003798:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800379c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	6892      	ldr	r2, [r2, #8]
 80037a4:	0211      	lsls	r1, r2, #8
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	6912      	ldr	r2, [r2, #16]
 80037aa:	0852      	lsrs	r2, r2, #1
 80037ac:	3a01      	subs	r2, #1
 80037ae:	0652      	lsls	r2, r2, #25
 80037b0:	430a      	orrs	r2, r1
 80037b2:	4916      	ldr	r1, [pc, #88]	; (800380c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80037b8:	4b14      	ldr	r3, [pc, #80]	; (800380c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a13      	ldr	r2, [pc, #76]	; (800380c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c4:	f7fd fc80 	bl	80010c8 <HAL_GetTick>
 80037c8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80037ca:	e009      	b.n	80037e0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80037cc:	f7fd fc7c 	bl	80010c8 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d902      	bls.n	80037e0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	73fb      	strb	r3, [r7, #15]
          break;
 80037de:	e005      	b.n	80037ec <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80037e0:	4b0a      	ldr	r3, [pc, #40]	; (800380c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d0ef      	beq.n	80037cc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80037ec:	7bfb      	ldrb	r3, [r7, #15]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d106      	bne.n	8003800 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80037f2:	4b06      	ldr	r3, [pc, #24]	; (800380c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037f4:	695a      	ldr	r2, [r3, #20]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	4904      	ldr	r1, [pc, #16]	; (800380c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003800:	7bfb      	ldrb	r3, [r7, #15]
}
 8003802:	4618      	mov	r0, r3
 8003804:	3710      	adds	r7, #16
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	40021000 	.word	0x40021000

08003810 <memset>:
 8003810:	4402      	add	r2, r0
 8003812:	4603      	mov	r3, r0
 8003814:	4293      	cmp	r3, r2
 8003816:	d100      	bne.n	800381a <memset+0xa>
 8003818:	4770      	bx	lr
 800381a:	f803 1b01 	strb.w	r1, [r3], #1
 800381e:	e7f9      	b.n	8003814 <memset+0x4>

08003820 <__libc_init_array>:
 8003820:	b570      	push	{r4, r5, r6, lr}
 8003822:	4d0d      	ldr	r5, [pc, #52]	; (8003858 <__libc_init_array+0x38>)
 8003824:	4c0d      	ldr	r4, [pc, #52]	; (800385c <__libc_init_array+0x3c>)
 8003826:	1b64      	subs	r4, r4, r5
 8003828:	10a4      	asrs	r4, r4, #2
 800382a:	2600      	movs	r6, #0
 800382c:	42a6      	cmp	r6, r4
 800382e:	d109      	bne.n	8003844 <__libc_init_array+0x24>
 8003830:	4d0b      	ldr	r5, [pc, #44]	; (8003860 <__libc_init_array+0x40>)
 8003832:	4c0c      	ldr	r4, [pc, #48]	; (8003864 <__libc_init_array+0x44>)
 8003834:	f000 f818 	bl	8003868 <_init>
 8003838:	1b64      	subs	r4, r4, r5
 800383a:	10a4      	asrs	r4, r4, #2
 800383c:	2600      	movs	r6, #0
 800383e:	42a6      	cmp	r6, r4
 8003840:	d105      	bne.n	800384e <__libc_init_array+0x2e>
 8003842:	bd70      	pop	{r4, r5, r6, pc}
 8003844:	f855 3b04 	ldr.w	r3, [r5], #4
 8003848:	4798      	blx	r3
 800384a:	3601      	adds	r6, #1
 800384c:	e7ee      	b.n	800382c <__libc_init_array+0xc>
 800384e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003852:	4798      	blx	r3
 8003854:	3601      	adds	r6, #1
 8003856:	e7f2      	b.n	800383e <__libc_init_array+0x1e>
 8003858:	080038c0 	.word	0x080038c0
 800385c:	080038c0 	.word	0x080038c0
 8003860:	080038c0 	.word	0x080038c0
 8003864:	080038c4 	.word	0x080038c4

08003868 <_init>:
 8003868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800386a:	bf00      	nop
 800386c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800386e:	bc08      	pop	{r3}
 8003870:	469e      	mov	lr, r3
 8003872:	4770      	bx	lr

08003874 <_fini>:
 8003874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003876:	bf00      	nop
 8003878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800387a:	bc08      	pop	{r3}
 800387c:	469e      	mov	lr, r3
 800387e:	4770      	bx	lr
