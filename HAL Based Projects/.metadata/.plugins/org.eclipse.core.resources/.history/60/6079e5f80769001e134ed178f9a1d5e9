/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */


/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

//PIN DU Code BCD
#define Bit_A GPIO_Pin_0
#define Bit_B GPIO_Pin_1
#define Bit_C GPIO_Pin_2
#define Bit_D GPIO_Pin_3

#define SEGMENT_A_U GPIO_PIN_0
#define SEGMENT_B_U GPIO_PIN_1
#define SEGMENT_C_U GPIO_PIN_2
#define SEGMENT_D_U GPIO_PIN_3
#define SEGMENT_E_U GPIO_PIN_4
#define SEGMENT_F_U GPIO_PIN_5
#define SEGMENT_G_U GPIO_PIN_6

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

//uint16_t count;

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
/* USER CODE BEGIN PFP */

void BCD(GPIO_TypeDef* GPIOx, uint16_t chiffre);
void SegDisplay_U(uint16_t chiffre);
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin);

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      for (i=0; i<=16; i++){
        BCD(GPIOA, i);
        for (j=0; j<=16; j++){
          SegDisplay(GPIOC, j);
          Delay(0xAFFFF);
	//SegDisplay_U(count);
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */


void BCD(GPIO_TypeDef* GPIOx, uint16_t chiffre)
{
  switch (chiffre){
  case 0: GPIO_ResetBits(GPIOx, Bit_A|Bit_B|Bit_C|Bit_D);
    break;
  case 1: GPIO_SetBits(GPIOx, Bit_A);
    GPIO_ResetBits(GPIOx, Bit_B|Bit_C|Bit_D);
    break;
  case 2: GPIO_SetBits(GPIOx, Bit_B);
    GPIO_ResetBits(GPIOx, Bit_A|Bit_C|Bit_D);
    break;
  case 3: GPIO_SetBits(GPIOx, Bit_A|Bit_B);
    GPIO_ResetBits(GPIOx, Bit_C|Bit_D);
    break;
  case 4: GPIO_SetBits(GPIOx, Bit_C);
    GPIO_ResetBits(GPIOx, Bit_A|Bit_B|Bit_D);
    break;
  case 5: GPIO_SetBits(GPIOx, Bit_A|Bit_C);
    GPIO_ResetBits(GPIOx, Bit_B|Bit_D);
    break;
  case 6: GPIO_SetBits(GPIOx, Bit_B|Bit_C);
    GPIO_ResetBits(GPIOx, Bit_A|Bit_D);
    break;
  case 7: GPIO_SetBits(GPIOx, Bit_A|Bit_B|Bit_C);
    GPIO_ResetBits(GPIOx, Bit_D);
    break;
  case 8: GPIO_SetBits(GPIOx, Bit_D);
    GPIO_ResetBits(GPIOx, Bit_A|Bit_B|Bit_C);
    break;
  case 9: GPIO_SetBits(GPIOx, Bit_A|Bit_D);
    GPIO_ResetBits(GPIOx, Bit_B|Bit_C);
    break;
  case 10: GPIO_SetBits(GPIOx, Bit_B|Bit_D);
    GPIO_ResetBits(GPIOx, Bit_A|Bit_C);
    break;
  case 11: GPIO_SetBits(GPIOx,Bit_A|Bit_B|Bit_D);
    GPIO_ResetBits(GPIOx, Bit_C);
    break;
  case 12: GPIO_SetBits(GPIOx, Bit_C|Bit_D);
    GPIO_ResetBits(GPIOx, Bit_A|Bit_B);
    break;
  case 13: GPIO_SetBits(GPIOx, Bit_A|Bit_C|Bit_D);
    GPIO_ResetBits(GPIOx, Bit_B);
    break;
  case 14: GPIO_SetBits(GPIOx, Bit_B|Bit_C|Bit_D);
    GPIO_ResetBits(GPIOx, Bit_A);
    break;
  case 15: GPIO_SetBits(GPIOx, Bit_A|Bit_B|Bit_C|Bit_D);

  default: GPIO_ResetBits(GPIOx, Bit_A|Bit_B|Bit_C|Bit_D);
  }
}


void SegDisplay(GPIO_TypeDef* GPIOx, uint16_t chiffre)
{
  switch (chiffre){
  case 0: GPIO_SetBits(GPIOx, SEGMENT_A|SEGMENT_B|SEGMENT_C|SEGMENT_D | SEGMENT_E |SEGMENT_F);
          GPIO_ResetBits(GPIOx,SEGMENT_G);
    break;
  case 1: GPIO_SetBits(GPIOx, SEGMENT_B|SEGMENT_C);
    GPIO_ResetBits(GPIOx, SEGMENT_A|SEGMENT_D | SEGMENT_E |SEGMENT_F|SEGMENT_G);
    break;
  case 2: GPIO_SetBits(GPIOx,SEGMENT_A|SEGMENT_B|SEGMENT_G|SEGMENT_D | SEGMENT_E );
    GPIO_ResetBits(GPIOx, SEGMENT_C|SEGMENT_F);
    break;
  case 3: GPIO_SetBits(GPIOx, SEGMENT_A|SEGMENT_B|SEGMENT_C|SEGMENT_D |SEGMENT_G);
    GPIO_ResetBits(GPIOx,  SEGMENT_E |SEGMENT_F);
    break;
  case 4: GPIO_SetBits(GPIOx,SEGMENT_B|SEGMENT_C|SEGMENT_F|SEGMENT_G);
    GPIO_ResetBits(GPIOx, SEGMENT_A|SEGMENT_D | SEGMENT_E);
    break;
  case 5: GPIO_SetBits(GPIOx,SEGMENT_A|SEGMENT_C|SEGMENT_D|SEGMENT_F|SEGMENT_G);
    GPIO_ResetBits(GPIOx, SEGMENT_B|SEGMENT_E);
    break;
  case 6: GPIO_SetBits(GPIOx, SEGMENT_A |SEGMENT_C |SEGMENT_D |SEGMENT_E | SEGMENT_F | SEGMENT_G);
    GPIO_ResetBits(GPIOx, SEGMENT_B);
    break;
  case 7: GPIO_SetBits(GPIOx, SEGMENT_A|SEGMENT_B|SEGMENT_C);
    GPIO_ResetBits(GPIOx, SEGMENT_D |SEGMENT_E | SEGMENT_F | SEGMENT_G);
    break;
  case 8: GPIO_SetBits(GPIOx, SEGMENT_A|SEGMENT_B|SEGMENT_C|SEGMENT_D |SEGMENT_E | SEGMENT_F | SEGMENT_G);

    break;
  case 9: GPIO_SetBits(GPIOx,SEGMENT_A|SEGMENT_B|SEGMENT_C|SEGMENT_D | SEGMENT_F | SEGMENT_G);
    GPIO_ResetBits(GPIOx,SEGMENT_E );
    break;
  case 10: GPIO_SetBits(GPIOx, SEGMENT_A|SEGMENT_B|SEGMENT_C |SEGMENT_E | SEGMENT_F | SEGMENT_G);
    GPIO_ResetBits(GPIOx, SEGMENT_D);
    break;
  case 11: GPIO_SetBits(GPIOx,SEGMENT_C|SEGMENT_D |SEGMENT_E | SEGMENT_F | SEGMENT_G);
    GPIO_ResetBits(GPIOx, SEGMENT_A|SEGMENT_B);
    break;
  case 12: GPIO_SetBits(GPIOx, SEGMENT_D |SEGMENT_E |  SEGMENT_G);
    GPIO_ResetBits(GPIOx, SEGMENT_A|SEGMENT_B|SEGMENT_C|SEGMENT_F);
    break;
  case 13: GPIO_SetBits(GPIOx, SEGMENT_B|SEGMENT_C|SEGMENT_D |SEGMENT_E | SEGMENT_G);
    GPIO_ResetBits(GPIOx, SEGMENT_A| SEGMENT_F );
    break;
  case 14: GPIO_SetBits(GPIOx, SEGMENT_A|SEGMENT_F|SEGMENT_D |SEGMENT_E | SEGMENT_G);
    GPIO_ResetBits(GPIOx,SEGMENT_B|SEGMENT_C );
    break;
  case 15: GPIO_SetBits(GPIOx,SEGMENT_A|SEGMENT_F|SEGMENT_E | SEGMENT_G);
            GPIO_ResetBits(GPIOx,SEGMENT_B|SEGMENT_C |SEGMENT_D);

  default: GPIO_SetBits(GPIOx,  SEGMENT_G);
         GPIO_ResetBits(GPIOx,SEGMENT_A|SEGMENT_B|SEGMENT_C|SEGMENT_D |SEGMENT_E | SEGMENT_F  );
  }
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	count++;
	if (count==9){
		count=0;
	}
}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
