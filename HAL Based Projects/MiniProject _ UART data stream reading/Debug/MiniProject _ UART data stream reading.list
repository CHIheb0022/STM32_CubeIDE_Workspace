
MiniProject _ UART data stream reading.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c58  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08005de0  08005de0  00015de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e3c  08005e3c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005e3c  08005e3c  00015e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e44  08005e44  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e44  08005e44  00015e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e48  08005e48  00015e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005e4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000000c  08005e58  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  08005e58  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011fe8  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000270e  00000000  00000000  00032067  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001010  00000000  00000000  00034778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c74  00000000  00000000  00035788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000268fe  00000000  00000000  000363fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000139bc  00000000  00000000  0005ccfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eecbf  00000000  00000000  000706b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000042c0  00000000  00000000  0015f378  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000096  00000000  00000000  00163638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005dc8 	.word	0x08005dc8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005dc8 	.word	0x08005dc8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80004ca:	2300      	movs	r3, #0
 80004cc:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004ce:	2003      	movs	r0, #3
 80004d0:	f000 f960 	bl	8000794 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004d4:	200f      	movs	r0, #15
 80004d6:	f000 f80d 	bl	80004f4 <HAL_InitTick>
 80004da:	4603      	mov	r3, r0
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d002      	beq.n	80004e6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80004e0:	2301      	movs	r3, #1
 80004e2:	71fb      	strb	r3, [r7, #7]
 80004e4:	e001      	b.n	80004ea <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80004e6:	f005 fa87 	bl	80059f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80004ea:	79fb      	ldrb	r3, [r7, #7]
}
 80004ec:	4618      	mov	r0, r3
 80004ee:	3708      	adds	r7, #8
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}

080004f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80004fc:	2300      	movs	r3, #0
 80004fe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000500:	4b17      	ldr	r3, [pc, #92]	; (8000560 <HAL_InitTick+0x6c>)
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d023      	beq.n	8000550 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000508:	4b16      	ldr	r3, [pc, #88]	; (8000564 <HAL_InitTick+0x70>)
 800050a:	681a      	ldr	r2, [r3, #0]
 800050c:	4b14      	ldr	r3, [pc, #80]	; (8000560 <HAL_InitTick+0x6c>)
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	4619      	mov	r1, r3
 8000512:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000516:	fbb3 f3f1 	udiv	r3, r3, r1
 800051a:	fbb2 f3f3 	udiv	r3, r2, r3
 800051e:	4618      	mov	r0, r3
 8000520:	f000 f96d 	bl	80007fe <HAL_SYSTICK_Config>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d10f      	bne.n	800054a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	2b0f      	cmp	r3, #15
 800052e:	d809      	bhi.n	8000544 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000530:	2200      	movs	r2, #0
 8000532:	6879      	ldr	r1, [r7, #4]
 8000534:	f04f 30ff 	mov.w	r0, #4294967295
 8000538:	f000 f937 	bl	80007aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800053c:	4a0a      	ldr	r2, [pc, #40]	; (8000568 <HAL_InitTick+0x74>)
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	6013      	str	r3, [r2, #0]
 8000542:	e007      	b.n	8000554 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000544:	2301      	movs	r3, #1
 8000546:	73fb      	strb	r3, [r7, #15]
 8000548:	e004      	b.n	8000554 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800054a:	2301      	movs	r3, #1
 800054c:	73fb      	strb	r3, [r7, #15]
 800054e:	e001      	b.n	8000554 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000550:	2301      	movs	r3, #1
 8000552:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000554:	7bfb      	ldrb	r3, [r7, #15]
}
 8000556:	4618      	mov	r0, r3
 8000558:	3710      	adds	r7, #16
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	20000004 	.word	0x20000004
 8000564:	20000008 	.word	0x20000008
 8000568:	20000000 	.word	0x20000000

0800056c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <HAL_IncTick+0x20>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	461a      	mov	r2, r3
 8000576:	4b06      	ldr	r3, [pc, #24]	; (8000590 <HAL_IncTick+0x24>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4413      	add	r3, r2
 800057c:	4a04      	ldr	r2, [pc, #16]	; (8000590 <HAL_IncTick+0x24>)
 800057e:	6013      	str	r3, [r2, #0]
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000004 	.word	0x20000004
 8000590:	20000028 	.word	0x20000028

08000594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  return uwTick;
 8000598:	4b03      	ldr	r3, [pc, #12]	; (80005a8 <HAL_GetTick+0x14>)
 800059a:	681b      	ldr	r3, [r3, #0]
}
 800059c:	4618      	mov	r0, r3
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	20000028 	.word	0x20000028

080005ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005b4:	f7ff ffee 	bl	8000594 <HAL_GetTick>
 80005b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005c4:	d005      	beq.n	80005d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80005c6:	4b0a      	ldr	r3, [pc, #40]	; (80005f0 <HAL_Delay+0x44>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	461a      	mov	r2, r3
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	4413      	add	r3, r2
 80005d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005d2:	bf00      	nop
 80005d4:	f7ff ffde 	bl	8000594 <HAL_GetTick>
 80005d8:	4602      	mov	r2, r0
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	1ad3      	subs	r3, r2, r3
 80005de:	68fa      	ldr	r2, [r7, #12]
 80005e0:	429a      	cmp	r2, r3
 80005e2:	d8f7      	bhi.n	80005d4 <HAL_Delay+0x28>
  {
  }
}
 80005e4:	bf00      	nop
 80005e6:	bf00      	nop
 80005e8:	3710      	adds	r7, #16
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	20000004 	.word	0x20000004

080005f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	f003 0307 	and.w	r3, r3, #7
 8000602:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000604:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <__NVIC_SetPriorityGrouping+0x44>)
 8000606:	68db      	ldr	r3, [r3, #12]
 8000608:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800060a:	68ba      	ldr	r2, [r7, #8]
 800060c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000610:	4013      	ands	r3, r2
 8000612:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800061c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000624:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000626:	4a04      	ldr	r2, [pc, #16]	; (8000638 <__NVIC_SetPriorityGrouping+0x44>)
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	60d3      	str	r3, [r2, #12]
}
 800062c:	bf00      	nop
 800062e:	3714      	adds	r7, #20
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr
 8000638:	e000ed00 	.word	0xe000ed00

0800063c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000640:	4b04      	ldr	r3, [pc, #16]	; (8000654 <__NVIC_GetPriorityGrouping+0x18>)
 8000642:	68db      	ldr	r3, [r3, #12]
 8000644:	0a1b      	lsrs	r3, r3, #8
 8000646:	f003 0307 	and.w	r3, r3, #7
}
 800064a:	4618      	mov	r0, r3
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr
 8000654:	e000ed00 	.word	0xe000ed00

08000658 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000666:	2b00      	cmp	r3, #0
 8000668:	db0b      	blt.n	8000682 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	f003 021f 	and.w	r2, r3, #31
 8000670:	4907      	ldr	r1, [pc, #28]	; (8000690 <__NVIC_EnableIRQ+0x38>)
 8000672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000676:	095b      	lsrs	r3, r3, #5
 8000678:	2001      	movs	r0, #1
 800067a:	fa00 f202 	lsl.w	r2, r0, r2
 800067e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000682:	bf00      	nop
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	e000e100 	.word	0xe000e100

08000694 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	6039      	str	r1, [r7, #0]
 800069e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	db0a      	blt.n	80006be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	b2da      	uxtb	r2, r3
 80006ac:	490c      	ldr	r1, [pc, #48]	; (80006e0 <__NVIC_SetPriority+0x4c>)
 80006ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b2:	0112      	lsls	r2, r2, #4
 80006b4:	b2d2      	uxtb	r2, r2
 80006b6:	440b      	add	r3, r1
 80006b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006bc:	e00a      	b.n	80006d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	b2da      	uxtb	r2, r3
 80006c2:	4908      	ldr	r1, [pc, #32]	; (80006e4 <__NVIC_SetPriority+0x50>)
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	f003 030f 	and.w	r3, r3, #15
 80006ca:	3b04      	subs	r3, #4
 80006cc:	0112      	lsls	r2, r2, #4
 80006ce:	b2d2      	uxtb	r2, r2
 80006d0:	440b      	add	r3, r1
 80006d2:	761a      	strb	r2, [r3, #24]
}
 80006d4:	bf00      	nop
 80006d6:	370c      	adds	r7, #12
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr
 80006e0:	e000e100 	.word	0xe000e100
 80006e4:	e000ed00 	.word	0xe000ed00

080006e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b089      	sub	sp, #36	; 0x24
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	60f8      	str	r0, [r7, #12]
 80006f0:	60b9      	str	r1, [r7, #8]
 80006f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	f003 0307 	and.w	r3, r3, #7
 80006fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006fc:	69fb      	ldr	r3, [r7, #28]
 80006fe:	f1c3 0307 	rsb	r3, r3, #7
 8000702:	2b04      	cmp	r3, #4
 8000704:	bf28      	it	cs
 8000706:	2304      	movcs	r3, #4
 8000708:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800070a:	69fb      	ldr	r3, [r7, #28]
 800070c:	3304      	adds	r3, #4
 800070e:	2b06      	cmp	r3, #6
 8000710:	d902      	bls.n	8000718 <NVIC_EncodePriority+0x30>
 8000712:	69fb      	ldr	r3, [r7, #28]
 8000714:	3b03      	subs	r3, #3
 8000716:	e000      	b.n	800071a <NVIC_EncodePriority+0x32>
 8000718:	2300      	movs	r3, #0
 800071a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800071c:	f04f 32ff 	mov.w	r2, #4294967295
 8000720:	69bb      	ldr	r3, [r7, #24]
 8000722:	fa02 f303 	lsl.w	r3, r2, r3
 8000726:	43da      	mvns	r2, r3
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	401a      	ands	r2, r3
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000730:	f04f 31ff 	mov.w	r1, #4294967295
 8000734:	697b      	ldr	r3, [r7, #20]
 8000736:	fa01 f303 	lsl.w	r3, r1, r3
 800073a:	43d9      	mvns	r1, r3
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000740:	4313      	orrs	r3, r2
         );
}
 8000742:	4618      	mov	r0, r3
 8000744:	3724      	adds	r7, #36	; 0x24
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
	...

08000750 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	3b01      	subs	r3, #1
 800075c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000760:	d301      	bcc.n	8000766 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000762:	2301      	movs	r3, #1
 8000764:	e00f      	b.n	8000786 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000766:	4a0a      	ldr	r2, [pc, #40]	; (8000790 <SysTick_Config+0x40>)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	3b01      	subs	r3, #1
 800076c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800076e:	210f      	movs	r1, #15
 8000770:	f04f 30ff 	mov.w	r0, #4294967295
 8000774:	f7ff ff8e 	bl	8000694 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000778:	4b05      	ldr	r3, [pc, #20]	; (8000790 <SysTick_Config+0x40>)
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800077e:	4b04      	ldr	r3, [pc, #16]	; (8000790 <SysTick_Config+0x40>)
 8000780:	2207      	movs	r2, #7
 8000782:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000784:	2300      	movs	r3, #0
}
 8000786:	4618      	mov	r0, r3
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	e000e010 	.word	0xe000e010

08000794 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800079c:	6878      	ldr	r0, [r7, #4]
 800079e:	f7ff ff29 	bl	80005f4 <__NVIC_SetPriorityGrouping>
}
 80007a2:	bf00      	nop
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}

080007aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b086      	sub	sp, #24
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	4603      	mov	r3, r0
 80007b2:	60b9      	str	r1, [r7, #8]
 80007b4:	607a      	str	r2, [r7, #4]
 80007b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80007bc:	f7ff ff3e 	bl	800063c <__NVIC_GetPriorityGrouping>
 80007c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007c2:	687a      	ldr	r2, [r7, #4]
 80007c4:	68b9      	ldr	r1, [r7, #8]
 80007c6:	6978      	ldr	r0, [r7, #20]
 80007c8:	f7ff ff8e 	bl	80006e8 <NVIC_EncodePriority>
 80007cc:	4602      	mov	r2, r0
 80007ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007d2:	4611      	mov	r1, r2
 80007d4:	4618      	mov	r0, r3
 80007d6:	f7ff ff5d 	bl	8000694 <__NVIC_SetPriority>
}
 80007da:	bf00      	nop
 80007dc:	3718      	adds	r7, #24
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007e2:	b580      	push	{r7, lr}
 80007e4:	b082      	sub	sp, #8
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	4603      	mov	r3, r0
 80007ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff ff31 	bl	8000658 <__NVIC_EnableIRQ>
}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}

080007fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	b082      	sub	sp, #8
 8000802:	af00      	add	r7, sp, #0
 8000804:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000806:	6878      	ldr	r0, [r7, #4]
 8000808:	f7ff ffa2 	bl	8000750 <SysTick_Config>
 800080c:	4603      	mov	r3, r0
}
 800080e:	4618      	mov	r0, r3
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000816:	b480      	push	{r7}
 8000818:	b085      	sub	sp, #20
 800081a:	af00      	add	r7, sp, #0
 800081c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800081e:	2300      	movs	r3, #0
 8000820:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000828:	b2db      	uxtb	r3, r3
 800082a:	2b02      	cmp	r3, #2
 800082c:	d008      	beq.n	8000840 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	2204      	movs	r2, #4
 8000832:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	2200      	movs	r2, #0
 8000838:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800083c:	2301      	movs	r3, #1
 800083e:	e022      	b.n	8000886 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	681a      	ldr	r2, [r3, #0]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	f022 020e 	bic.w	r2, r2, #14
 800084e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	681a      	ldr	r2, [r3, #0]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	f022 0201 	bic.w	r2, r2, #1
 800085e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000864:	f003 021c 	and.w	r2, r3, #28
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086c:	2101      	movs	r1, #1
 800086e:	fa01 f202 	lsl.w	r2, r1, r2
 8000872:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	2201      	movs	r2, #1
 8000878:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2200      	movs	r2, #0
 8000880:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8000884:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000886:	4618      	mov	r0, r3
 8000888:	3714      	adds	r7, #20
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr

08000892 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000892:	b580      	push	{r7, lr}
 8000894:	b084      	sub	sp, #16
 8000896:	af00      	add	r7, sp, #0
 8000898:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800089a:	2300      	movs	r3, #0
 800089c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	2b02      	cmp	r3, #2
 80008a8:	d005      	beq.n	80008b6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	2204      	movs	r2, #4
 80008ae:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80008b0:	2301      	movs	r3, #1
 80008b2:	73fb      	strb	r3, [r7, #15]
 80008b4:	e029      	b.n	800090a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f022 020e 	bic.w	r2, r2, #14
 80008c4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	681a      	ldr	r2, [r3, #0]
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	f022 0201 	bic.w	r2, r2, #1
 80008d4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008da:	f003 021c 	and.w	r2, r3, #28
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e2:	2101      	movs	r1, #1
 80008e4:	fa01 f202 	lsl.w	r2, r1, r2
 80008e8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	2201      	movs	r2, #1
 80008ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2200      	movs	r2, #0
 80008f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d003      	beq.n	800090a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000906:	6878      	ldr	r0, [r7, #4]
 8000908:	4798      	blx	r3
    }
  }
  return status;
 800090a:	7bfb      	ldrb	r3, [r7, #15]
}
 800090c:	4618      	mov	r0, r3
 800090e:	3710      	adds	r7, #16
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}

08000914 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000914:	b480      	push	{r7}
 8000916:	b087      	sub	sp, #28
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
 800091c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800091e:	2300      	movs	r3, #0
 8000920:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000922:	e17f      	b.n	8000c24 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	681a      	ldr	r2, [r3, #0]
 8000928:	2101      	movs	r1, #1
 800092a:	697b      	ldr	r3, [r7, #20]
 800092c:	fa01 f303 	lsl.w	r3, r1, r3
 8000930:	4013      	ands	r3, r2
 8000932:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	2b00      	cmp	r3, #0
 8000938:	f000 8171 	beq.w	8000c1e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	f003 0303 	and.w	r3, r3, #3
 8000944:	2b01      	cmp	r3, #1
 8000946:	d005      	beq.n	8000954 <HAL_GPIO_Init+0x40>
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	f003 0303 	and.w	r3, r3, #3
 8000950:	2b02      	cmp	r3, #2
 8000952:	d130      	bne.n	80009b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	689b      	ldr	r3, [r3, #8]
 8000958:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800095a:	697b      	ldr	r3, [r7, #20]
 800095c:	005b      	lsls	r3, r3, #1
 800095e:	2203      	movs	r2, #3
 8000960:	fa02 f303 	lsl.w	r3, r2, r3
 8000964:	43db      	mvns	r3, r3
 8000966:	693a      	ldr	r2, [r7, #16]
 8000968:	4013      	ands	r3, r2
 800096a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	68da      	ldr	r2, [r3, #12]
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	005b      	lsls	r3, r3, #1
 8000974:	fa02 f303 	lsl.w	r3, r2, r3
 8000978:	693a      	ldr	r2, [r7, #16]
 800097a:	4313      	orrs	r3, r2
 800097c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	693a      	ldr	r2, [r7, #16]
 8000982:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800098a:	2201      	movs	r2, #1
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	fa02 f303 	lsl.w	r3, r2, r3
 8000992:	43db      	mvns	r3, r3
 8000994:	693a      	ldr	r2, [r7, #16]
 8000996:	4013      	ands	r3, r2
 8000998:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	685b      	ldr	r3, [r3, #4]
 800099e:	091b      	lsrs	r3, r3, #4
 80009a0:	f003 0201 	and.w	r2, r3, #1
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	fa02 f303 	lsl.w	r3, r2, r3
 80009aa:	693a      	ldr	r2, [r7, #16]
 80009ac:	4313      	orrs	r3, r2
 80009ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	693a      	ldr	r2, [r7, #16]
 80009b4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	685b      	ldr	r3, [r3, #4]
 80009ba:	f003 0303 	and.w	r3, r3, #3
 80009be:	2b03      	cmp	r3, #3
 80009c0:	d118      	bne.n	80009f4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80009c8:	2201      	movs	r2, #1
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	fa02 f303 	lsl.w	r3, r2, r3
 80009d0:	43db      	mvns	r3, r3
 80009d2:	693a      	ldr	r2, [r7, #16]
 80009d4:	4013      	ands	r3, r2
 80009d6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	08db      	lsrs	r3, r3, #3
 80009de:	f003 0201 	and.w	r2, r3, #1
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	fa02 f303 	lsl.w	r3, r2, r3
 80009e8:	693a      	ldr	r2, [r7, #16]
 80009ea:	4313      	orrs	r3, r2
 80009ec:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	693a      	ldr	r2, [r7, #16]
 80009f2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	f003 0303 	and.w	r3, r3, #3
 80009fc:	2b03      	cmp	r3, #3
 80009fe:	d017      	beq.n	8000a30 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	68db      	ldr	r3, [r3, #12]
 8000a04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000a06:	697b      	ldr	r3, [r7, #20]
 8000a08:	005b      	lsls	r3, r3, #1
 8000a0a:	2203      	movs	r2, #3
 8000a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a10:	43db      	mvns	r3, r3
 8000a12:	693a      	ldr	r2, [r7, #16]
 8000a14:	4013      	ands	r3, r2
 8000a16:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	689a      	ldr	r2, [r3, #8]
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	005b      	lsls	r3, r3, #1
 8000a20:	fa02 f303 	lsl.w	r3, r2, r3
 8000a24:	693a      	ldr	r2, [r7, #16]
 8000a26:	4313      	orrs	r3, r2
 8000a28:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	693a      	ldr	r2, [r7, #16]
 8000a2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	f003 0303 	and.w	r3, r3, #3
 8000a38:	2b02      	cmp	r3, #2
 8000a3a:	d123      	bne.n	8000a84 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	08da      	lsrs	r2, r3, #3
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	3208      	adds	r2, #8
 8000a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a48:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	f003 0307 	and.w	r3, r3, #7
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	220f      	movs	r2, #15
 8000a54:	fa02 f303 	lsl.w	r3, r2, r3
 8000a58:	43db      	mvns	r3, r3
 8000a5a:	693a      	ldr	r2, [r7, #16]
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	691a      	ldr	r2, [r3, #16]
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	f003 0307 	and.w	r3, r3, #7
 8000a6a:	009b      	lsls	r3, r3, #2
 8000a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a70:	693a      	ldr	r2, [r7, #16]
 8000a72:	4313      	orrs	r3, r2
 8000a74:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	08da      	lsrs	r2, r3, #3
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	3208      	adds	r2, #8
 8000a7e:	6939      	ldr	r1, [r7, #16]
 8000a80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	005b      	lsls	r3, r3, #1
 8000a8e:	2203      	movs	r2, #3
 8000a90:	fa02 f303 	lsl.w	r3, r2, r3
 8000a94:	43db      	mvns	r3, r3
 8000a96:	693a      	ldr	r2, [r7, #16]
 8000a98:	4013      	ands	r3, r2
 8000a9a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	f003 0203 	and.w	r2, r3, #3
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aac:	693a      	ldr	r2, [r7, #16]
 8000aae:	4313      	orrs	r3, r2
 8000ab0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	693a      	ldr	r2, [r7, #16]
 8000ab6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	f000 80ac 	beq.w	8000c1e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac6:	4b5f      	ldr	r3, [pc, #380]	; (8000c44 <HAL_GPIO_Init+0x330>)
 8000ac8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aca:	4a5e      	ldr	r2, [pc, #376]	; (8000c44 <HAL_GPIO_Init+0x330>)
 8000acc:	f043 0301 	orr.w	r3, r3, #1
 8000ad0:	6613      	str	r3, [r2, #96]	; 0x60
 8000ad2:	4b5c      	ldr	r3, [pc, #368]	; (8000c44 <HAL_GPIO_Init+0x330>)
 8000ad4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ad6:	f003 0301 	and.w	r3, r3, #1
 8000ada:	60bb      	str	r3, [r7, #8]
 8000adc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ade:	4a5a      	ldr	r2, [pc, #360]	; (8000c48 <HAL_GPIO_Init+0x334>)
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	089b      	lsrs	r3, r3, #2
 8000ae4:	3302      	adds	r3, #2
 8000ae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aea:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	f003 0303 	and.w	r3, r3, #3
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	220f      	movs	r2, #15
 8000af6:	fa02 f303 	lsl.w	r3, r2, r3
 8000afa:	43db      	mvns	r3, r3
 8000afc:	693a      	ldr	r2, [r7, #16]
 8000afe:	4013      	ands	r3, r2
 8000b00:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b08:	d025      	beq.n	8000b56 <HAL_GPIO_Init+0x242>
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4a4f      	ldr	r2, [pc, #316]	; (8000c4c <HAL_GPIO_Init+0x338>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d01f      	beq.n	8000b52 <HAL_GPIO_Init+0x23e>
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4a4e      	ldr	r2, [pc, #312]	; (8000c50 <HAL_GPIO_Init+0x33c>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d019      	beq.n	8000b4e <HAL_GPIO_Init+0x23a>
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4a4d      	ldr	r2, [pc, #308]	; (8000c54 <HAL_GPIO_Init+0x340>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d013      	beq.n	8000b4a <HAL_GPIO_Init+0x236>
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	4a4c      	ldr	r2, [pc, #304]	; (8000c58 <HAL_GPIO_Init+0x344>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d00d      	beq.n	8000b46 <HAL_GPIO_Init+0x232>
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4a4b      	ldr	r2, [pc, #300]	; (8000c5c <HAL_GPIO_Init+0x348>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d007      	beq.n	8000b42 <HAL_GPIO_Init+0x22e>
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4a4a      	ldr	r2, [pc, #296]	; (8000c60 <HAL_GPIO_Init+0x34c>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d101      	bne.n	8000b3e <HAL_GPIO_Init+0x22a>
 8000b3a:	2306      	movs	r3, #6
 8000b3c:	e00c      	b.n	8000b58 <HAL_GPIO_Init+0x244>
 8000b3e:	2307      	movs	r3, #7
 8000b40:	e00a      	b.n	8000b58 <HAL_GPIO_Init+0x244>
 8000b42:	2305      	movs	r3, #5
 8000b44:	e008      	b.n	8000b58 <HAL_GPIO_Init+0x244>
 8000b46:	2304      	movs	r3, #4
 8000b48:	e006      	b.n	8000b58 <HAL_GPIO_Init+0x244>
 8000b4a:	2303      	movs	r3, #3
 8000b4c:	e004      	b.n	8000b58 <HAL_GPIO_Init+0x244>
 8000b4e:	2302      	movs	r3, #2
 8000b50:	e002      	b.n	8000b58 <HAL_GPIO_Init+0x244>
 8000b52:	2301      	movs	r3, #1
 8000b54:	e000      	b.n	8000b58 <HAL_GPIO_Init+0x244>
 8000b56:	2300      	movs	r3, #0
 8000b58:	697a      	ldr	r2, [r7, #20]
 8000b5a:	f002 0203 	and.w	r2, r2, #3
 8000b5e:	0092      	lsls	r2, r2, #2
 8000b60:	4093      	lsls	r3, r2
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b68:	4937      	ldr	r1, [pc, #220]	; (8000c48 <HAL_GPIO_Init+0x334>)
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	089b      	lsrs	r3, r3, #2
 8000b6e:	3302      	adds	r3, #2
 8000b70:	693a      	ldr	r2, [r7, #16]
 8000b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b76:	4b3b      	ldr	r3, [pc, #236]	; (8000c64 <HAL_GPIO_Init+0x350>)
 8000b78:	689b      	ldr	r3, [r3, #8]
 8000b7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	43db      	mvns	r3, r3
 8000b80:	693a      	ldr	r2, [r7, #16]
 8000b82:	4013      	ands	r3, r2
 8000b84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d003      	beq.n	8000b9a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	4313      	orrs	r3, r2
 8000b98:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b9a:	4a32      	ldr	r2, [pc, #200]	; (8000c64 <HAL_GPIO_Init+0x350>)
 8000b9c:	693b      	ldr	r3, [r7, #16]
 8000b9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000ba0:	4b30      	ldr	r3, [pc, #192]	; (8000c64 <HAL_GPIO_Init+0x350>)
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	43db      	mvns	r3, r3
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	4013      	ands	r3, r2
 8000bae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d003      	beq.n	8000bc4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000bbc:	693a      	ldr	r2, [r7, #16]
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000bc4:	4a27      	ldr	r2, [pc, #156]	; (8000c64 <HAL_GPIO_Init+0x350>)
 8000bc6:	693b      	ldr	r3, [r7, #16]
 8000bc8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000bca:	4b26      	ldr	r3, [pc, #152]	; (8000c64 <HAL_GPIO_Init+0x350>)
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	43db      	mvns	r3, r3
 8000bd4:	693a      	ldr	r2, [r7, #16]
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d003      	beq.n	8000bee <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000be6:	693a      	ldr	r2, [r7, #16]
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	4313      	orrs	r3, r2
 8000bec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000bee:	4a1d      	ldr	r2, [pc, #116]	; (8000c64 <HAL_GPIO_Init+0x350>)
 8000bf0:	693b      	ldr	r3, [r7, #16]
 8000bf2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000bf4:	4b1b      	ldr	r3, [pc, #108]	; (8000c64 <HAL_GPIO_Init+0x350>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	43db      	mvns	r3, r3
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	4013      	ands	r3, r2
 8000c02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d003      	beq.n	8000c18 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000c10:	693a      	ldr	r2, [r7, #16]
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	4313      	orrs	r3, r2
 8000c16:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000c18:	4a12      	ldr	r2, [pc, #72]	; (8000c64 <HAL_GPIO_Init+0x350>)
 8000c1a:	693b      	ldr	r3, [r7, #16]
 8000c1c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	3301      	adds	r3, #1
 8000c22:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	f47f ae78 	bne.w	8000924 <HAL_GPIO_Init+0x10>
  }
}
 8000c34:	bf00      	nop
 8000c36:	bf00      	nop
 8000c38:	371c      	adds	r7, #28
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	40021000 	.word	0x40021000
 8000c48:	40010000 	.word	0x40010000
 8000c4c:	48000400 	.word	0x48000400
 8000c50:	48000800 	.word	0x48000800
 8000c54:	48000c00 	.word	0x48000c00
 8000c58:	48001000 	.word	0x48001000
 8000c5c:	48001400 	.word	0x48001400
 8000c60:	48001800 	.word	0x48001800
 8000c64:	40010400 	.word	0x40010400

08000c68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	460b      	mov	r3, r1
 8000c72:	807b      	strh	r3, [r7, #2]
 8000c74:	4613      	mov	r3, r2
 8000c76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c78:	787b      	ldrb	r3, [r7, #1]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d003      	beq.n	8000c86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c7e:	887a      	ldrh	r2, [r7, #2]
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c84:	e002      	b.n	8000c8c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c86:	887a      	ldrh	r2, [r7, #2]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c8c:	bf00      	nop
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	460b      	mov	r3, r1
 8000ca2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	695b      	ldr	r3, [r3, #20]
 8000ca8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000caa:	887a      	ldrh	r2, [r7, #2]
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	4013      	ands	r3, r2
 8000cb0:	041a      	lsls	r2, r3, #16
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	43d9      	mvns	r1, r3
 8000cb6:	887b      	ldrh	r3, [r7, #2]
 8000cb8:	400b      	ands	r3, r1
 8000cba:	431a      	orrs	r2, r3
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	619a      	str	r2, [r3, #24]
}
 8000cc0:	bf00      	nop
 8000cc2:	3714      	adds	r7, #20
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000cd0:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <HAL_PWREx_GetVoltageRange+0x18>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	40007000 	.word	0x40007000

08000ce8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000cf6:	d130      	bne.n	8000d5a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000cf8:	4b23      	ldr	r3, [pc, #140]	; (8000d88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000d00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d04:	d038      	beq.n	8000d78 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d06:	4b20      	ldr	r3, [pc, #128]	; (8000d88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000d0e:	4a1e      	ldr	r2, [pc, #120]	; (8000d88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d14:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000d16:	4b1d      	ldr	r3, [pc, #116]	; (8000d8c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	2232      	movs	r2, #50	; 0x32
 8000d1c:	fb02 f303 	mul.w	r3, r2, r3
 8000d20:	4a1b      	ldr	r2, [pc, #108]	; (8000d90 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000d22:	fba2 2303 	umull	r2, r3, r2, r3
 8000d26:	0c9b      	lsrs	r3, r3, #18
 8000d28:	3301      	adds	r3, #1
 8000d2a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d2c:	e002      	b.n	8000d34 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	3b01      	subs	r3, #1
 8000d32:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d34:	4b14      	ldr	r3, [pc, #80]	; (8000d88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d36:	695b      	ldr	r3, [r3, #20]
 8000d38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d40:	d102      	bne.n	8000d48 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d1f2      	bne.n	8000d2e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000d48:	4b0f      	ldr	r3, [pc, #60]	; (8000d88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d4a:	695b      	ldr	r3, [r3, #20]
 8000d4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d54:	d110      	bne.n	8000d78 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000d56:	2303      	movs	r3, #3
 8000d58:	e00f      	b.n	8000d7a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000d5a:	4b0b      	ldr	r3, [pc, #44]	; (8000d88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000d62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d66:	d007      	beq.n	8000d78 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d68:	4b07      	ldr	r3, [pc, #28]	; (8000d88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000d70:	4a05      	ldr	r2, [pc, #20]	; (8000d88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d76:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000d78:	2300      	movs	r3, #0
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3714      	adds	r7, #20
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	40007000 	.word	0x40007000
 8000d8c:	20000008 	.word	0x20000008
 8000d90:	431bde83 	.word	0x431bde83

08000d94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b088      	sub	sp, #32
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d101      	bne.n	8000da6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
 8000da4:	e3ca      	b.n	800153c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000da6:	4b97      	ldr	r3, [pc, #604]	; (8001004 <HAL_RCC_OscConfig+0x270>)
 8000da8:	689b      	ldr	r3, [r3, #8]
 8000daa:	f003 030c 	and.w	r3, r3, #12
 8000dae:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000db0:	4b94      	ldr	r3, [pc, #592]	; (8001004 <HAL_RCC_OscConfig+0x270>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	f003 0303 	and.w	r3, r3, #3
 8000db8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f003 0310 	and.w	r3, r3, #16
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	f000 80e4 	beq.w	8000f90 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d007      	beq.n	8000dde <HAL_RCC_OscConfig+0x4a>
 8000dce:	69bb      	ldr	r3, [r7, #24]
 8000dd0:	2b0c      	cmp	r3, #12
 8000dd2:	f040 808b 	bne.w	8000eec <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	f040 8087 	bne.w	8000eec <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000dde:	4b89      	ldr	r3, [pc, #548]	; (8001004 <HAL_RCC_OscConfig+0x270>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f003 0302 	and.w	r3, r3, #2
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d005      	beq.n	8000df6 <HAL_RCC_OscConfig+0x62>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	699b      	ldr	r3, [r3, #24]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d101      	bne.n	8000df6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	e3a2      	b.n	800153c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6a1a      	ldr	r2, [r3, #32]
 8000dfa:	4b82      	ldr	r3, [pc, #520]	; (8001004 <HAL_RCC_OscConfig+0x270>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f003 0308 	and.w	r3, r3, #8
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d004      	beq.n	8000e10 <HAL_RCC_OscConfig+0x7c>
 8000e06:	4b7f      	ldr	r3, [pc, #508]	; (8001004 <HAL_RCC_OscConfig+0x270>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000e0e:	e005      	b.n	8000e1c <HAL_RCC_OscConfig+0x88>
 8000e10:	4b7c      	ldr	r3, [pc, #496]	; (8001004 <HAL_RCC_OscConfig+0x270>)
 8000e12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e16:	091b      	lsrs	r3, r3, #4
 8000e18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d223      	bcs.n	8000e68 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6a1b      	ldr	r3, [r3, #32]
 8000e24:	4618      	mov	r0, r3
 8000e26:	f000 fd55 	bl	80018d4 <RCC_SetFlashLatencyFromMSIRange>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000e30:	2301      	movs	r3, #1
 8000e32:	e383      	b.n	800153c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e34:	4b73      	ldr	r3, [pc, #460]	; (8001004 <HAL_RCC_OscConfig+0x270>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a72      	ldr	r2, [pc, #456]	; (8001004 <HAL_RCC_OscConfig+0x270>)
 8000e3a:	f043 0308 	orr.w	r3, r3, #8
 8000e3e:	6013      	str	r3, [r2, #0]
 8000e40:	4b70      	ldr	r3, [pc, #448]	; (8001004 <HAL_RCC_OscConfig+0x270>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6a1b      	ldr	r3, [r3, #32]
 8000e4c:	496d      	ldr	r1, [pc, #436]	; (8001004 <HAL_RCC_OscConfig+0x270>)
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e52:	4b6c      	ldr	r3, [pc, #432]	; (8001004 <HAL_RCC_OscConfig+0x270>)
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	69db      	ldr	r3, [r3, #28]
 8000e5e:	021b      	lsls	r3, r3, #8
 8000e60:	4968      	ldr	r1, [pc, #416]	; (8001004 <HAL_RCC_OscConfig+0x270>)
 8000e62:	4313      	orrs	r3, r2
 8000e64:	604b      	str	r3, [r1, #4]
 8000e66:	e025      	b.n	8000eb4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e68:	4b66      	ldr	r3, [pc, #408]	; (8001004 <HAL_RCC_OscConfig+0x270>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a65      	ldr	r2, [pc, #404]	; (8001004 <HAL_RCC_OscConfig+0x270>)
 8000e6e:	f043 0308 	orr.w	r3, r3, #8
 8000e72:	6013      	str	r3, [r2, #0]
 8000e74:	4b63      	ldr	r3, [pc, #396]	; (8001004 <HAL_RCC_OscConfig+0x270>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6a1b      	ldr	r3, [r3, #32]
 8000e80:	4960      	ldr	r1, [pc, #384]	; (8001004 <HAL_RCC_OscConfig+0x270>)
 8000e82:	4313      	orrs	r3, r2
 8000e84:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e86:	4b5f      	ldr	r3, [pc, #380]	; (8001004 <HAL_RCC_OscConfig+0x270>)
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	69db      	ldr	r3, [r3, #28]
 8000e92:	021b      	lsls	r3, r3, #8
 8000e94:	495b      	ldr	r1, [pc, #364]	; (8001004 <HAL_RCC_OscConfig+0x270>)
 8000e96:	4313      	orrs	r3, r2
 8000e98:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d109      	bne.n	8000eb4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6a1b      	ldr	r3, [r3, #32]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f000 fd15 	bl	80018d4 <RCC_SetFlashLatencyFromMSIRange>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	e343      	b.n	800153c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000eb4:	f000 fc4a 	bl	800174c <HAL_RCC_GetSysClockFreq>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	4b52      	ldr	r3, [pc, #328]	; (8001004 <HAL_RCC_OscConfig+0x270>)
 8000ebc:	689b      	ldr	r3, [r3, #8]
 8000ebe:	091b      	lsrs	r3, r3, #4
 8000ec0:	f003 030f 	and.w	r3, r3, #15
 8000ec4:	4950      	ldr	r1, [pc, #320]	; (8001008 <HAL_RCC_OscConfig+0x274>)
 8000ec6:	5ccb      	ldrb	r3, [r1, r3]
 8000ec8:	f003 031f 	and.w	r3, r3, #31
 8000ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8000ed0:	4a4e      	ldr	r2, [pc, #312]	; (800100c <HAL_RCC_OscConfig+0x278>)
 8000ed2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000ed4:	4b4e      	ldr	r3, [pc, #312]	; (8001010 <HAL_RCC_OscConfig+0x27c>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff fb0b 	bl	80004f4 <HAL_InitTick>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000ee2:	7bfb      	ldrb	r3, [r7, #15]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d052      	beq.n	8000f8e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000ee8:	7bfb      	ldrb	r3, [r7, #15]
 8000eea:	e327      	b.n	800153c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d032      	beq.n	8000f5a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000ef4:	4b43      	ldr	r3, [pc, #268]	; (8001004 <HAL_RCC_OscConfig+0x270>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a42      	ldr	r2, [pc, #264]	; (8001004 <HAL_RCC_OscConfig+0x270>)
 8000efa:	f043 0301 	orr.w	r3, r3, #1
 8000efe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000f00:	f7ff fb48 	bl	8000594 <HAL_GetTick>
 8000f04:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000f06:	e008      	b.n	8000f1a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f08:	f7ff fb44 	bl	8000594 <HAL_GetTick>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	2b02      	cmp	r3, #2
 8000f14:	d901      	bls.n	8000f1a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000f16:	2303      	movs	r3, #3
 8000f18:	e310      	b.n	800153c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000f1a:	4b3a      	ldr	r3, [pc, #232]	; (8001004 <HAL_RCC_OscConfig+0x270>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f003 0302 	and.w	r3, r3, #2
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d0f0      	beq.n	8000f08 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f26:	4b37      	ldr	r3, [pc, #220]	; (8001004 <HAL_RCC_OscConfig+0x270>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a36      	ldr	r2, [pc, #216]	; (8001004 <HAL_RCC_OscConfig+0x270>)
 8000f2c:	f043 0308 	orr.w	r3, r3, #8
 8000f30:	6013      	str	r3, [r2, #0]
 8000f32:	4b34      	ldr	r3, [pc, #208]	; (8001004 <HAL_RCC_OscConfig+0x270>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6a1b      	ldr	r3, [r3, #32]
 8000f3e:	4931      	ldr	r1, [pc, #196]	; (8001004 <HAL_RCC_OscConfig+0x270>)
 8000f40:	4313      	orrs	r3, r2
 8000f42:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f44:	4b2f      	ldr	r3, [pc, #188]	; (8001004 <HAL_RCC_OscConfig+0x270>)
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	69db      	ldr	r3, [r3, #28]
 8000f50:	021b      	lsls	r3, r3, #8
 8000f52:	492c      	ldr	r1, [pc, #176]	; (8001004 <HAL_RCC_OscConfig+0x270>)
 8000f54:	4313      	orrs	r3, r2
 8000f56:	604b      	str	r3, [r1, #4]
 8000f58:	e01a      	b.n	8000f90 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000f5a:	4b2a      	ldr	r3, [pc, #168]	; (8001004 <HAL_RCC_OscConfig+0x270>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a29      	ldr	r2, [pc, #164]	; (8001004 <HAL_RCC_OscConfig+0x270>)
 8000f60:	f023 0301 	bic.w	r3, r3, #1
 8000f64:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000f66:	f7ff fb15 	bl	8000594 <HAL_GetTick>
 8000f6a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f6c:	e008      	b.n	8000f80 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f6e:	f7ff fb11 	bl	8000594 <HAL_GetTick>
 8000f72:	4602      	mov	r2, r0
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	1ad3      	subs	r3, r2, r3
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	d901      	bls.n	8000f80 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	e2dd      	b.n	800153c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f80:	4b20      	ldr	r3, [pc, #128]	; (8001004 <HAL_RCC_OscConfig+0x270>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f003 0302 	and.w	r3, r3, #2
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d1f0      	bne.n	8000f6e <HAL_RCC_OscConfig+0x1da>
 8000f8c:	e000      	b.n	8000f90 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f8e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f003 0301 	and.w	r3, r3, #1
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d074      	beq.n	8001086 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	2b08      	cmp	r3, #8
 8000fa0:	d005      	beq.n	8000fae <HAL_RCC_OscConfig+0x21a>
 8000fa2:	69bb      	ldr	r3, [r7, #24]
 8000fa4:	2b0c      	cmp	r3, #12
 8000fa6:	d10e      	bne.n	8000fc6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	2b03      	cmp	r3, #3
 8000fac:	d10b      	bne.n	8000fc6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fae:	4b15      	ldr	r3, [pc, #84]	; (8001004 <HAL_RCC_OscConfig+0x270>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d064      	beq.n	8001084 <HAL_RCC_OscConfig+0x2f0>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d160      	bne.n	8001084 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e2ba      	b.n	800153c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fce:	d106      	bne.n	8000fde <HAL_RCC_OscConfig+0x24a>
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <HAL_RCC_OscConfig+0x270>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a0b      	ldr	r2, [pc, #44]	; (8001004 <HAL_RCC_OscConfig+0x270>)
 8000fd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fda:	6013      	str	r3, [r2, #0]
 8000fdc:	e026      	b.n	800102c <HAL_RCC_OscConfig+0x298>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fe6:	d115      	bne.n	8001014 <HAL_RCC_OscConfig+0x280>
 8000fe8:	4b06      	ldr	r3, [pc, #24]	; (8001004 <HAL_RCC_OscConfig+0x270>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a05      	ldr	r2, [pc, #20]	; (8001004 <HAL_RCC_OscConfig+0x270>)
 8000fee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ff2:	6013      	str	r3, [r2, #0]
 8000ff4:	4b03      	ldr	r3, [pc, #12]	; (8001004 <HAL_RCC_OscConfig+0x270>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a02      	ldr	r2, [pc, #8]	; (8001004 <HAL_RCC_OscConfig+0x270>)
 8000ffa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ffe:	6013      	str	r3, [r2, #0]
 8001000:	e014      	b.n	800102c <HAL_RCC_OscConfig+0x298>
 8001002:	bf00      	nop
 8001004:	40021000 	.word	0x40021000
 8001008:	08005df4 	.word	0x08005df4
 800100c:	20000008 	.word	0x20000008
 8001010:	20000000 	.word	0x20000000
 8001014:	4ba0      	ldr	r3, [pc, #640]	; (8001298 <HAL_RCC_OscConfig+0x504>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a9f      	ldr	r2, [pc, #636]	; (8001298 <HAL_RCC_OscConfig+0x504>)
 800101a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800101e:	6013      	str	r3, [r2, #0]
 8001020:	4b9d      	ldr	r3, [pc, #628]	; (8001298 <HAL_RCC_OscConfig+0x504>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a9c      	ldr	r2, [pc, #624]	; (8001298 <HAL_RCC_OscConfig+0x504>)
 8001026:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800102a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d013      	beq.n	800105c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001034:	f7ff faae 	bl	8000594 <HAL_GetTick>
 8001038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800103a:	e008      	b.n	800104e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800103c:	f7ff faaa 	bl	8000594 <HAL_GetTick>
 8001040:	4602      	mov	r2, r0
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	2b64      	cmp	r3, #100	; 0x64
 8001048:	d901      	bls.n	800104e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800104a:	2303      	movs	r3, #3
 800104c:	e276      	b.n	800153c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800104e:	4b92      	ldr	r3, [pc, #584]	; (8001298 <HAL_RCC_OscConfig+0x504>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001056:	2b00      	cmp	r3, #0
 8001058:	d0f0      	beq.n	800103c <HAL_RCC_OscConfig+0x2a8>
 800105a:	e014      	b.n	8001086 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800105c:	f7ff fa9a 	bl	8000594 <HAL_GetTick>
 8001060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001062:	e008      	b.n	8001076 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001064:	f7ff fa96 	bl	8000594 <HAL_GetTick>
 8001068:	4602      	mov	r2, r0
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	2b64      	cmp	r3, #100	; 0x64
 8001070:	d901      	bls.n	8001076 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001072:	2303      	movs	r3, #3
 8001074:	e262      	b.n	800153c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001076:	4b88      	ldr	r3, [pc, #544]	; (8001298 <HAL_RCC_OscConfig+0x504>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d1f0      	bne.n	8001064 <HAL_RCC_OscConfig+0x2d0>
 8001082:	e000      	b.n	8001086 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001084:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f003 0302 	and.w	r3, r3, #2
 800108e:	2b00      	cmp	r3, #0
 8001090:	d060      	beq.n	8001154 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001092:	69bb      	ldr	r3, [r7, #24]
 8001094:	2b04      	cmp	r3, #4
 8001096:	d005      	beq.n	80010a4 <HAL_RCC_OscConfig+0x310>
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	2b0c      	cmp	r3, #12
 800109c:	d119      	bne.n	80010d2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d116      	bne.n	80010d2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80010a4:	4b7c      	ldr	r3, [pc, #496]	; (8001298 <HAL_RCC_OscConfig+0x504>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d005      	beq.n	80010bc <HAL_RCC_OscConfig+0x328>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d101      	bne.n	80010bc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80010b8:	2301      	movs	r3, #1
 80010ba:	e23f      	b.n	800153c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010bc:	4b76      	ldr	r3, [pc, #472]	; (8001298 <HAL_RCC_OscConfig+0x504>)
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	691b      	ldr	r3, [r3, #16]
 80010c8:	061b      	lsls	r3, r3, #24
 80010ca:	4973      	ldr	r1, [pc, #460]	; (8001298 <HAL_RCC_OscConfig+0x504>)
 80010cc:	4313      	orrs	r3, r2
 80010ce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80010d0:	e040      	b.n	8001154 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	68db      	ldr	r3, [r3, #12]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d023      	beq.n	8001122 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010da:	4b6f      	ldr	r3, [pc, #444]	; (8001298 <HAL_RCC_OscConfig+0x504>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a6e      	ldr	r2, [pc, #440]	; (8001298 <HAL_RCC_OscConfig+0x504>)
 80010e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010e6:	f7ff fa55 	bl	8000594 <HAL_GetTick>
 80010ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010ec:	e008      	b.n	8001100 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010ee:	f7ff fa51 	bl	8000594 <HAL_GetTick>
 80010f2:	4602      	mov	r2, r0
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	2b02      	cmp	r3, #2
 80010fa:	d901      	bls.n	8001100 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80010fc:	2303      	movs	r3, #3
 80010fe:	e21d      	b.n	800153c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001100:	4b65      	ldr	r3, [pc, #404]	; (8001298 <HAL_RCC_OscConfig+0x504>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001108:	2b00      	cmp	r3, #0
 800110a:	d0f0      	beq.n	80010ee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800110c:	4b62      	ldr	r3, [pc, #392]	; (8001298 <HAL_RCC_OscConfig+0x504>)
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	691b      	ldr	r3, [r3, #16]
 8001118:	061b      	lsls	r3, r3, #24
 800111a:	495f      	ldr	r1, [pc, #380]	; (8001298 <HAL_RCC_OscConfig+0x504>)
 800111c:	4313      	orrs	r3, r2
 800111e:	604b      	str	r3, [r1, #4]
 8001120:	e018      	b.n	8001154 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001122:	4b5d      	ldr	r3, [pc, #372]	; (8001298 <HAL_RCC_OscConfig+0x504>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a5c      	ldr	r2, [pc, #368]	; (8001298 <HAL_RCC_OscConfig+0x504>)
 8001128:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800112c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800112e:	f7ff fa31 	bl	8000594 <HAL_GetTick>
 8001132:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001134:	e008      	b.n	8001148 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001136:	f7ff fa2d 	bl	8000594 <HAL_GetTick>
 800113a:	4602      	mov	r2, r0
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	2b02      	cmp	r3, #2
 8001142:	d901      	bls.n	8001148 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001144:	2303      	movs	r3, #3
 8001146:	e1f9      	b.n	800153c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001148:	4b53      	ldr	r3, [pc, #332]	; (8001298 <HAL_RCC_OscConfig+0x504>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001150:	2b00      	cmp	r3, #0
 8001152:	d1f0      	bne.n	8001136 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f003 0308 	and.w	r3, r3, #8
 800115c:	2b00      	cmp	r3, #0
 800115e:	d03c      	beq.n	80011da <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	695b      	ldr	r3, [r3, #20]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d01c      	beq.n	80011a2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001168:	4b4b      	ldr	r3, [pc, #300]	; (8001298 <HAL_RCC_OscConfig+0x504>)
 800116a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800116e:	4a4a      	ldr	r2, [pc, #296]	; (8001298 <HAL_RCC_OscConfig+0x504>)
 8001170:	f043 0301 	orr.w	r3, r3, #1
 8001174:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001178:	f7ff fa0c 	bl	8000594 <HAL_GetTick>
 800117c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800117e:	e008      	b.n	8001192 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001180:	f7ff fa08 	bl	8000594 <HAL_GetTick>
 8001184:	4602      	mov	r2, r0
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	2b02      	cmp	r3, #2
 800118c:	d901      	bls.n	8001192 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800118e:	2303      	movs	r3, #3
 8001190:	e1d4      	b.n	800153c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001192:	4b41      	ldr	r3, [pc, #260]	; (8001298 <HAL_RCC_OscConfig+0x504>)
 8001194:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001198:	f003 0302 	and.w	r3, r3, #2
 800119c:	2b00      	cmp	r3, #0
 800119e:	d0ef      	beq.n	8001180 <HAL_RCC_OscConfig+0x3ec>
 80011a0:	e01b      	b.n	80011da <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011a2:	4b3d      	ldr	r3, [pc, #244]	; (8001298 <HAL_RCC_OscConfig+0x504>)
 80011a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011a8:	4a3b      	ldr	r2, [pc, #236]	; (8001298 <HAL_RCC_OscConfig+0x504>)
 80011aa:	f023 0301 	bic.w	r3, r3, #1
 80011ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011b2:	f7ff f9ef 	bl	8000594 <HAL_GetTick>
 80011b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80011b8:	e008      	b.n	80011cc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011ba:	f7ff f9eb 	bl	8000594 <HAL_GetTick>
 80011be:	4602      	mov	r2, r0
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	d901      	bls.n	80011cc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80011c8:	2303      	movs	r3, #3
 80011ca:	e1b7      	b.n	800153c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80011cc:	4b32      	ldr	r3, [pc, #200]	; (8001298 <HAL_RCC_OscConfig+0x504>)
 80011ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d1ef      	bne.n	80011ba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 0304 	and.w	r3, r3, #4
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	f000 80a6 	beq.w	8001334 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011e8:	2300      	movs	r3, #0
 80011ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80011ec:	4b2a      	ldr	r3, [pc, #168]	; (8001298 <HAL_RCC_OscConfig+0x504>)
 80011ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d10d      	bne.n	8001214 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011f8:	4b27      	ldr	r3, [pc, #156]	; (8001298 <HAL_RCC_OscConfig+0x504>)
 80011fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011fc:	4a26      	ldr	r2, [pc, #152]	; (8001298 <HAL_RCC_OscConfig+0x504>)
 80011fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001202:	6593      	str	r3, [r2, #88]	; 0x58
 8001204:	4b24      	ldr	r3, [pc, #144]	; (8001298 <HAL_RCC_OscConfig+0x504>)
 8001206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800120c:	60bb      	str	r3, [r7, #8]
 800120e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001210:	2301      	movs	r3, #1
 8001212:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001214:	4b21      	ldr	r3, [pc, #132]	; (800129c <HAL_RCC_OscConfig+0x508>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800121c:	2b00      	cmp	r3, #0
 800121e:	d118      	bne.n	8001252 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001220:	4b1e      	ldr	r3, [pc, #120]	; (800129c <HAL_RCC_OscConfig+0x508>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a1d      	ldr	r2, [pc, #116]	; (800129c <HAL_RCC_OscConfig+0x508>)
 8001226:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800122a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800122c:	f7ff f9b2 	bl	8000594 <HAL_GetTick>
 8001230:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001232:	e008      	b.n	8001246 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001234:	f7ff f9ae 	bl	8000594 <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	2b02      	cmp	r3, #2
 8001240:	d901      	bls.n	8001246 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e17a      	b.n	800153c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001246:	4b15      	ldr	r3, [pc, #84]	; (800129c <HAL_RCC_OscConfig+0x508>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800124e:	2b00      	cmp	r3, #0
 8001250:	d0f0      	beq.n	8001234 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	2b01      	cmp	r3, #1
 8001258:	d108      	bne.n	800126c <HAL_RCC_OscConfig+0x4d8>
 800125a:	4b0f      	ldr	r3, [pc, #60]	; (8001298 <HAL_RCC_OscConfig+0x504>)
 800125c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001260:	4a0d      	ldr	r2, [pc, #52]	; (8001298 <HAL_RCC_OscConfig+0x504>)
 8001262:	f043 0301 	orr.w	r3, r3, #1
 8001266:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800126a:	e029      	b.n	80012c0 <HAL_RCC_OscConfig+0x52c>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	2b05      	cmp	r3, #5
 8001272:	d115      	bne.n	80012a0 <HAL_RCC_OscConfig+0x50c>
 8001274:	4b08      	ldr	r3, [pc, #32]	; (8001298 <HAL_RCC_OscConfig+0x504>)
 8001276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800127a:	4a07      	ldr	r2, [pc, #28]	; (8001298 <HAL_RCC_OscConfig+0x504>)
 800127c:	f043 0304 	orr.w	r3, r3, #4
 8001280:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001284:	4b04      	ldr	r3, [pc, #16]	; (8001298 <HAL_RCC_OscConfig+0x504>)
 8001286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800128a:	4a03      	ldr	r2, [pc, #12]	; (8001298 <HAL_RCC_OscConfig+0x504>)
 800128c:	f043 0301 	orr.w	r3, r3, #1
 8001290:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001294:	e014      	b.n	80012c0 <HAL_RCC_OscConfig+0x52c>
 8001296:	bf00      	nop
 8001298:	40021000 	.word	0x40021000
 800129c:	40007000 	.word	0x40007000
 80012a0:	4b9c      	ldr	r3, [pc, #624]	; (8001514 <HAL_RCC_OscConfig+0x780>)
 80012a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012a6:	4a9b      	ldr	r2, [pc, #620]	; (8001514 <HAL_RCC_OscConfig+0x780>)
 80012a8:	f023 0301 	bic.w	r3, r3, #1
 80012ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012b0:	4b98      	ldr	r3, [pc, #608]	; (8001514 <HAL_RCC_OscConfig+0x780>)
 80012b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012b6:	4a97      	ldr	r2, [pc, #604]	; (8001514 <HAL_RCC_OscConfig+0x780>)
 80012b8:	f023 0304 	bic.w	r3, r3, #4
 80012bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d016      	beq.n	80012f6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012c8:	f7ff f964 	bl	8000594 <HAL_GetTick>
 80012cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012ce:	e00a      	b.n	80012e6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012d0:	f7ff f960 	bl	8000594 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	f241 3288 	movw	r2, #5000	; 0x1388
 80012de:	4293      	cmp	r3, r2
 80012e0:	d901      	bls.n	80012e6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	e12a      	b.n	800153c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012e6:	4b8b      	ldr	r3, [pc, #556]	; (8001514 <HAL_RCC_OscConfig+0x780>)
 80012e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012ec:	f003 0302 	and.w	r3, r3, #2
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d0ed      	beq.n	80012d0 <HAL_RCC_OscConfig+0x53c>
 80012f4:	e015      	b.n	8001322 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012f6:	f7ff f94d 	bl	8000594 <HAL_GetTick>
 80012fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012fc:	e00a      	b.n	8001314 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012fe:	f7ff f949 	bl	8000594 <HAL_GetTick>
 8001302:	4602      	mov	r2, r0
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	f241 3288 	movw	r2, #5000	; 0x1388
 800130c:	4293      	cmp	r3, r2
 800130e:	d901      	bls.n	8001314 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001310:	2303      	movs	r3, #3
 8001312:	e113      	b.n	800153c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001314:	4b7f      	ldr	r3, [pc, #508]	; (8001514 <HAL_RCC_OscConfig+0x780>)
 8001316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	2b00      	cmp	r3, #0
 8001320:	d1ed      	bne.n	80012fe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001322:	7ffb      	ldrb	r3, [r7, #31]
 8001324:	2b01      	cmp	r3, #1
 8001326:	d105      	bne.n	8001334 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001328:	4b7a      	ldr	r3, [pc, #488]	; (8001514 <HAL_RCC_OscConfig+0x780>)
 800132a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800132c:	4a79      	ldr	r2, [pc, #484]	; (8001514 <HAL_RCC_OscConfig+0x780>)
 800132e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001332:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001338:	2b00      	cmp	r3, #0
 800133a:	f000 80fe 	beq.w	800153a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001342:	2b02      	cmp	r3, #2
 8001344:	f040 80d0 	bne.w	80014e8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001348:	4b72      	ldr	r3, [pc, #456]	; (8001514 <HAL_RCC_OscConfig+0x780>)
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	f003 0203 	and.w	r2, r3, #3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001358:	429a      	cmp	r2, r3
 800135a:	d130      	bne.n	80013be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	3b01      	subs	r3, #1
 8001368:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800136a:	429a      	cmp	r2, r3
 800136c:	d127      	bne.n	80013be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001378:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800137a:	429a      	cmp	r2, r3
 800137c:	d11f      	bne.n	80013be <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001388:	2a07      	cmp	r2, #7
 800138a:	bf14      	ite	ne
 800138c:	2201      	movne	r2, #1
 800138e:	2200      	moveq	r2, #0
 8001390:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001392:	4293      	cmp	r3, r2
 8001394:	d113      	bne.n	80013be <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013a0:	085b      	lsrs	r3, r3, #1
 80013a2:	3b01      	subs	r3, #1
 80013a4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d109      	bne.n	80013be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b4:	085b      	lsrs	r3, r3, #1
 80013b6:	3b01      	subs	r3, #1
 80013b8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d06e      	beq.n	800149c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	2b0c      	cmp	r3, #12
 80013c2:	d069      	beq.n	8001498 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80013c4:	4b53      	ldr	r3, [pc, #332]	; (8001514 <HAL_RCC_OscConfig+0x780>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d105      	bne.n	80013dc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80013d0:	4b50      	ldr	r3, [pc, #320]	; (8001514 <HAL_RCC_OscConfig+0x780>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	e0ad      	b.n	800153c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80013e0:	4b4c      	ldr	r3, [pc, #304]	; (8001514 <HAL_RCC_OscConfig+0x780>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a4b      	ldr	r2, [pc, #300]	; (8001514 <HAL_RCC_OscConfig+0x780>)
 80013e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013ea:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80013ec:	f7ff f8d2 	bl	8000594 <HAL_GetTick>
 80013f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013f2:	e008      	b.n	8001406 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013f4:	f7ff f8ce 	bl	8000594 <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d901      	bls.n	8001406 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e09a      	b.n	800153c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001406:	4b43      	ldr	r3, [pc, #268]	; (8001514 <HAL_RCC_OscConfig+0x780>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d1f0      	bne.n	80013f4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001412:	4b40      	ldr	r3, [pc, #256]	; (8001514 <HAL_RCC_OscConfig+0x780>)
 8001414:	68da      	ldr	r2, [r3, #12]
 8001416:	4b40      	ldr	r3, [pc, #256]	; (8001518 <HAL_RCC_OscConfig+0x784>)
 8001418:	4013      	ands	r3, r2
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001422:	3a01      	subs	r2, #1
 8001424:	0112      	lsls	r2, r2, #4
 8001426:	4311      	orrs	r1, r2
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800142c:	0212      	lsls	r2, r2, #8
 800142e:	4311      	orrs	r1, r2
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001434:	0852      	lsrs	r2, r2, #1
 8001436:	3a01      	subs	r2, #1
 8001438:	0552      	lsls	r2, r2, #21
 800143a:	4311      	orrs	r1, r2
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001440:	0852      	lsrs	r2, r2, #1
 8001442:	3a01      	subs	r2, #1
 8001444:	0652      	lsls	r2, r2, #25
 8001446:	4311      	orrs	r1, r2
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800144c:	0912      	lsrs	r2, r2, #4
 800144e:	0452      	lsls	r2, r2, #17
 8001450:	430a      	orrs	r2, r1
 8001452:	4930      	ldr	r1, [pc, #192]	; (8001514 <HAL_RCC_OscConfig+0x780>)
 8001454:	4313      	orrs	r3, r2
 8001456:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001458:	4b2e      	ldr	r3, [pc, #184]	; (8001514 <HAL_RCC_OscConfig+0x780>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a2d      	ldr	r2, [pc, #180]	; (8001514 <HAL_RCC_OscConfig+0x780>)
 800145e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001462:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001464:	4b2b      	ldr	r3, [pc, #172]	; (8001514 <HAL_RCC_OscConfig+0x780>)
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	4a2a      	ldr	r2, [pc, #168]	; (8001514 <HAL_RCC_OscConfig+0x780>)
 800146a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800146e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001470:	f7ff f890 	bl	8000594 <HAL_GetTick>
 8001474:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001476:	e008      	b.n	800148a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001478:	f7ff f88c 	bl	8000594 <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b02      	cmp	r3, #2
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e058      	b.n	800153c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800148a:	4b22      	ldr	r3, [pc, #136]	; (8001514 <HAL_RCC_OscConfig+0x780>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d0f0      	beq.n	8001478 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001496:	e050      	b.n	800153a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e04f      	b.n	800153c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800149c:	4b1d      	ldr	r3, [pc, #116]	; (8001514 <HAL_RCC_OscConfig+0x780>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d148      	bne.n	800153a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80014a8:	4b1a      	ldr	r3, [pc, #104]	; (8001514 <HAL_RCC_OscConfig+0x780>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a19      	ldr	r2, [pc, #100]	; (8001514 <HAL_RCC_OscConfig+0x780>)
 80014ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014b2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80014b4:	4b17      	ldr	r3, [pc, #92]	; (8001514 <HAL_RCC_OscConfig+0x780>)
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	4a16      	ldr	r2, [pc, #88]	; (8001514 <HAL_RCC_OscConfig+0x780>)
 80014ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014be:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80014c0:	f7ff f868 	bl	8000594 <HAL_GetTick>
 80014c4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014c6:	e008      	b.n	80014da <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014c8:	f7ff f864 	bl	8000594 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e030      	b.n	800153c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014da:	4b0e      	ldr	r3, [pc, #56]	; (8001514 <HAL_RCC_OscConfig+0x780>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d0f0      	beq.n	80014c8 <HAL_RCC_OscConfig+0x734>
 80014e6:	e028      	b.n	800153a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	2b0c      	cmp	r3, #12
 80014ec:	d023      	beq.n	8001536 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014ee:	4b09      	ldr	r3, [pc, #36]	; (8001514 <HAL_RCC_OscConfig+0x780>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a08      	ldr	r2, [pc, #32]	; (8001514 <HAL_RCC_OscConfig+0x780>)
 80014f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014fa:	f7ff f84b 	bl	8000594 <HAL_GetTick>
 80014fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001500:	e00c      	b.n	800151c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001502:	f7ff f847 	bl	8000594 <HAL_GetTick>
 8001506:	4602      	mov	r2, r0
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	2b02      	cmp	r3, #2
 800150e:	d905      	bls.n	800151c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e013      	b.n	800153c <HAL_RCC_OscConfig+0x7a8>
 8001514:	40021000 	.word	0x40021000
 8001518:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800151c:	4b09      	ldr	r3, [pc, #36]	; (8001544 <HAL_RCC_OscConfig+0x7b0>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d1ec      	bne.n	8001502 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001528:	4b06      	ldr	r3, [pc, #24]	; (8001544 <HAL_RCC_OscConfig+0x7b0>)
 800152a:	68da      	ldr	r2, [r3, #12]
 800152c:	4905      	ldr	r1, [pc, #20]	; (8001544 <HAL_RCC_OscConfig+0x7b0>)
 800152e:	4b06      	ldr	r3, [pc, #24]	; (8001548 <HAL_RCC_OscConfig+0x7b4>)
 8001530:	4013      	ands	r3, r2
 8001532:	60cb      	str	r3, [r1, #12]
 8001534:	e001      	b.n	800153a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e000      	b.n	800153c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800153a:	2300      	movs	r3, #0
}
 800153c:	4618      	mov	r0, r3
 800153e:	3720      	adds	r7, #32
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40021000 	.word	0x40021000
 8001548:	feeefffc 	.word	0xfeeefffc

0800154c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d101      	bne.n	8001560 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e0e7      	b.n	8001730 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001560:	4b75      	ldr	r3, [pc, #468]	; (8001738 <HAL_RCC_ClockConfig+0x1ec>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0307 	and.w	r3, r3, #7
 8001568:	683a      	ldr	r2, [r7, #0]
 800156a:	429a      	cmp	r2, r3
 800156c:	d910      	bls.n	8001590 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800156e:	4b72      	ldr	r3, [pc, #456]	; (8001738 <HAL_RCC_ClockConfig+0x1ec>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f023 0207 	bic.w	r2, r3, #7
 8001576:	4970      	ldr	r1, [pc, #448]	; (8001738 <HAL_RCC_ClockConfig+0x1ec>)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	4313      	orrs	r3, r2
 800157c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800157e:	4b6e      	ldr	r3, [pc, #440]	; (8001738 <HAL_RCC_ClockConfig+0x1ec>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0307 	and.w	r3, r3, #7
 8001586:	683a      	ldr	r2, [r7, #0]
 8001588:	429a      	cmp	r2, r3
 800158a:	d001      	beq.n	8001590 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e0cf      	b.n	8001730 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0302 	and.w	r3, r3, #2
 8001598:	2b00      	cmp	r3, #0
 800159a:	d010      	beq.n	80015be <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689a      	ldr	r2, [r3, #8]
 80015a0:	4b66      	ldr	r3, [pc, #408]	; (800173c <HAL_RCC_ClockConfig+0x1f0>)
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d908      	bls.n	80015be <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015ac:	4b63      	ldr	r3, [pc, #396]	; (800173c <HAL_RCC_ClockConfig+0x1f0>)
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	4960      	ldr	r1, [pc, #384]	; (800173c <HAL_RCC_ClockConfig+0x1f0>)
 80015ba:	4313      	orrs	r3, r2
 80015bc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d04c      	beq.n	8001664 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	2b03      	cmp	r3, #3
 80015d0:	d107      	bne.n	80015e2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015d2:	4b5a      	ldr	r3, [pc, #360]	; (800173c <HAL_RCC_ClockConfig+0x1f0>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d121      	bne.n	8001622 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e0a6      	b.n	8001730 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d107      	bne.n	80015fa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015ea:	4b54      	ldr	r3, [pc, #336]	; (800173c <HAL_RCC_ClockConfig+0x1f0>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d115      	bne.n	8001622 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e09a      	b.n	8001730 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d107      	bne.n	8001612 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001602:	4b4e      	ldr	r3, [pc, #312]	; (800173c <HAL_RCC_ClockConfig+0x1f0>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d109      	bne.n	8001622 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e08e      	b.n	8001730 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001612:	4b4a      	ldr	r3, [pc, #296]	; (800173c <HAL_RCC_ClockConfig+0x1f0>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800161a:	2b00      	cmp	r3, #0
 800161c:	d101      	bne.n	8001622 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e086      	b.n	8001730 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001622:	4b46      	ldr	r3, [pc, #280]	; (800173c <HAL_RCC_ClockConfig+0x1f0>)
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	f023 0203 	bic.w	r2, r3, #3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	4943      	ldr	r1, [pc, #268]	; (800173c <HAL_RCC_ClockConfig+0x1f0>)
 8001630:	4313      	orrs	r3, r2
 8001632:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001634:	f7fe ffae 	bl	8000594 <HAL_GetTick>
 8001638:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800163a:	e00a      	b.n	8001652 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800163c:	f7fe ffaa 	bl	8000594 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	f241 3288 	movw	r2, #5000	; 0x1388
 800164a:	4293      	cmp	r3, r2
 800164c:	d901      	bls.n	8001652 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e06e      	b.n	8001730 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001652:	4b3a      	ldr	r3, [pc, #232]	; (800173c <HAL_RCC_ClockConfig+0x1f0>)
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f003 020c 	and.w	r2, r3, #12
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	429a      	cmp	r2, r3
 8001662:	d1eb      	bne.n	800163c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0302 	and.w	r3, r3, #2
 800166c:	2b00      	cmp	r3, #0
 800166e:	d010      	beq.n	8001692 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689a      	ldr	r2, [r3, #8]
 8001674:	4b31      	ldr	r3, [pc, #196]	; (800173c <HAL_RCC_ClockConfig+0x1f0>)
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800167c:	429a      	cmp	r2, r3
 800167e:	d208      	bcs.n	8001692 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001680:	4b2e      	ldr	r3, [pc, #184]	; (800173c <HAL_RCC_ClockConfig+0x1f0>)
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	492b      	ldr	r1, [pc, #172]	; (800173c <HAL_RCC_ClockConfig+0x1f0>)
 800168e:	4313      	orrs	r3, r2
 8001690:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001692:	4b29      	ldr	r3, [pc, #164]	; (8001738 <HAL_RCC_ClockConfig+0x1ec>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0307 	and.w	r3, r3, #7
 800169a:	683a      	ldr	r2, [r7, #0]
 800169c:	429a      	cmp	r2, r3
 800169e:	d210      	bcs.n	80016c2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016a0:	4b25      	ldr	r3, [pc, #148]	; (8001738 <HAL_RCC_ClockConfig+0x1ec>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f023 0207 	bic.w	r2, r3, #7
 80016a8:	4923      	ldr	r1, [pc, #140]	; (8001738 <HAL_RCC_ClockConfig+0x1ec>)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016b0:	4b21      	ldr	r3, [pc, #132]	; (8001738 <HAL_RCC_ClockConfig+0x1ec>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0307 	and.w	r3, r3, #7
 80016b8:	683a      	ldr	r2, [r7, #0]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d001      	beq.n	80016c2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e036      	b.n	8001730 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0304 	and.w	r3, r3, #4
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d008      	beq.n	80016e0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016ce:	4b1b      	ldr	r3, [pc, #108]	; (800173c <HAL_RCC_ClockConfig+0x1f0>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	4918      	ldr	r1, [pc, #96]	; (800173c <HAL_RCC_ClockConfig+0x1f0>)
 80016dc:	4313      	orrs	r3, r2
 80016de:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0308 	and.w	r3, r3, #8
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d009      	beq.n	8001700 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016ec:	4b13      	ldr	r3, [pc, #76]	; (800173c <HAL_RCC_ClockConfig+0x1f0>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	691b      	ldr	r3, [r3, #16]
 80016f8:	00db      	lsls	r3, r3, #3
 80016fa:	4910      	ldr	r1, [pc, #64]	; (800173c <HAL_RCC_ClockConfig+0x1f0>)
 80016fc:	4313      	orrs	r3, r2
 80016fe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001700:	f000 f824 	bl	800174c <HAL_RCC_GetSysClockFreq>
 8001704:	4602      	mov	r2, r0
 8001706:	4b0d      	ldr	r3, [pc, #52]	; (800173c <HAL_RCC_ClockConfig+0x1f0>)
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	091b      	lsrs	r3, r3, #4
 800170c:	f003 030f 	and.w	r3, r3, #15
 8001710:	490b      	ldr	r1, [pc, #44]	; (8001740 <HAL_RCC_ClockConfig+0x1f4>)
 8001712:	5ccb      	ldrb	r3, [r1, r3]
 8001714:	f003 031f 	and.w	r3, r3, #31
 8001718:	fa22 f303 	lsr.w	r3, r2, r3
 800171c:	4a09      	ldr	r2, [pc, #36]	; (8001744 <HAL_RCC_ClockConfig+0x1f8>)
 800171e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001720:	4b09      	ldr	r3, [pc, #36]	; (8001748 <HAL_RCC_ClockConfig+0x1fc>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4618      	mov	r0, r3
 8001726:	f7fe fee5 	bl	80004f4 <HAL_InitTick>
 800172a:	4603      	mov	r3, r0
 800172c:	72fb      	strb	r3, [r7, #11]

  return status;
 800172e:	7afb      	ldrb	r3, [r7, #11]
}
 8001730:	4618      	mov	r0, r3
 8001732:	3710      	adds	r7, #16
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40022000 	.word	0x40022000
 800173c:	40021000 	.word	0x40021000
 8001740:	08005df4 	.word	0x08005df4
 8001744:	20000008 	.word	0x20000008
 8001748:	20000000 	.word	0x20000000

0800174c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800174c:	b480      	push	{r7}
 800174e:	b089      	sub	sp, #36	; 0x24
 8001750:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001752:	2300      	movs	r3, #0
 8001754:	61fb      	str	r3, [r7, #28]
 8001756:	2300      	movs	r3, #0
 8001758:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800175a:	4b3e      	ldr	r3, [pc, #248]	; (8001854 <HAL_RCC_GetSysClockFreq+0x108>)
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	f003 030c 	and.w	r3, r3, #12
 8001762:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001764:	4b3b      	ldr	r3, [pc, #236]	; (8001854 <HAL_RCC_GetSysClockFreq+0x108>)
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	f003 0303 	and.w	r3, r3, #3
 800176c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d005      	beq.n	8001780 <HAL_RCC_GetSysClockFreq+0x34>
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	2b0c      	cmp	r3, #12
 8001778:	d121      	bne.n	80017be <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d11e      	bne.n	80017be <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001780:	4b34      	ldr	r3, [pc, #208]	; (8001854 <HAL_RCC_GetSysClockFreq+0x108>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0308 	and.w	r3, r3, #8
 8001788:	2b00      	cmp	r3, #0
 800178a:	d107      	bne.n	800179c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800178c:	4b31      	ldr	r3, [pc, #196]	; (8001854 <HAL_RCC_GetSysClockFreq+0x108>)
 800178e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001792:	0a1b      	lsrs	r3, r3, #8
 8001794:	f003 030f 	and.w	r3, r3, #15
 8001798:	61fb      	str	r3, [r7, #28]
 800179a:	e005      	b.n	80017a8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800179c:	4b2d      	ldr	r3, [pc, #180]	; (8001854 <HAL_RCC_GetSysClockFreq+0x108>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	091b      	lsrs	r3, r3, #4
 80017a2:	f003 030f 	and.w	r3, r3, #15
 80017a6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80017a8:	4a2b      	ldr	r2, [pc, #172]	; (8001858 <HAL_RCC_GetSysClockFreq+0x10c>)
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017b0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d10d      	bne.n	80017d4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017bc:	e00a      	b.n	80017d4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	2b04      	cmp	r3, #4
 80017c2:	d102      	bne.n	80017ca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80017c4:	4b25      	ldr	r3, [pc, #148]	; (800185c <HAL_RCC_GetSysClockFreq+0x110>)
 80017c6:	61bb      	str	r3, [r7, #24]
 80017c8:	e004      	b.n	80017d4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	2b08      	cmp	r3, #8
 80017ce:	d101      	bne.n	80017d4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80017d0:	4b23      	ldr	r3, [pc, #140]	; (8001860 <HAL_RCC_GetSysClockFreq+0x114>)
 80017d2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	2b0c      	cmp	r3, #12
 80017d8:	d134      	bne.n	8001844 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80017da:	4b1e      	ldr	r3, [pc, #120]	; (8001854 <HAL_RCC_GetSysClockFreq+0x108>)
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	f003 0303 	and.w	r3, r3, #3
 80017e2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d003      	beq.n	80017f2 <HAL_RCC_GetSysClockFreq+0xa6>
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	2b03      	cmp	r3, #3
 80017ee:	d003      	beq.n	80017f8 <HAL_RCC_GetSysClockFreq+0xac>
 80017f0:	e005      	b.n	80017fe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80017f2:	4b1a      	ldr	r3, [pc, #104]	; (800185c <HAL_RCC_GetSysClockFreq+0x110>)
 80017f4:	617b      	str	r3, [r7, #20]
      break;
 80017f6:	e005      	b.n	8001804 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80017f8:	4b19      	ldr	r3, [pc, #100]	; (8001860 <HAL_RCC_GetSysClockFreq+0x114>)
 80017fa:	617b      	str	r3, [r7, #20]
      break;
 80017fc:	e002      	b.n	8001804 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	617b      	str	r3, [r7, #20]
      break;
 8001802:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001804:	4b13      	ldr	r3, [pc, #76]	; (8001854 <HAL_RCC_GetSysClockFreq+0x108>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	091b      	lsrs	r3, r3, #4
 800180a:	f003 0307 	and.w	r3, r3, #7
 800180e:	3301      	adds	r3, #1
 8001810:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001812:	4b10      	ldr	r3, [pc, #64]	; (8001854 <HAL_RCC_GetSysClockFreq+0x108>)
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	0a1b      	lsrs	r3, r3, #8
 8001818:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800181c:	697a      	ldr	r2, [r7, #20]
 800181e:	fb03 f202 	mul.w	r2, r3, r2
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	fbb2 f3f3 	udiv	r3, r2, r3
 8001828:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800182a:	4b0a      	ldr	r3, [pc, #40]	; (8001854 <HAL_RCC_GetSysClockFreq+0x108>)
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	0e5b      	lsrs	r3, r3, #25
 8001830:	f003 0303 	and.w	r3, r3, #3
 8001834:	3301      	adds	r3, #1
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800183a:	697a      	ldr	r2, [r7, #20]
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001842:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001844:	69bb      	ldr	r3, [r7, #24]
}
 8001846:	4618      	mov	r0, r3
 8001848:	3724      	adds	r7, #36	; 0x24
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	40021000 	.word	0x40021000
 8001858:	08005e0c 	.word	0x08005e0c
 800185c:	00f42400 	.word	0x00f42400
 8001860:	007a1200 	.word	0x007a1200

08001864 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001868:	4b03      	ldr	r3, [pc, #12]	; (8001878 <HAL_RCC_GetHCLKFreq+0x14>)
 800186a:	681b      	ldr	r3, [r3, #0]
}
 800186c:	4618      	mov	r0, r3
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	20000008 	.word	0x20000008

0800187c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001880:	f7ff fff0 	bl	8001864 <HAL_RCC_GetHCLKFreq>
 8001884:	4602      	mov	r2, r0
 8001886:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	0a1b      	lsrs	r3, r3, #8
 800188c:	f003 0307 	and.w	r3, r3, #7
 8001890:	4904      	ldr	r1, [pc, #16]	; (80018a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001892:	5ccb      	ldrb	r3, [r1, r3]
 8001894:	f003 031f 	and.w	r3, r3, #31
 8001898:	fa22 f303 	lsr.w	r3, r2, r3
}
 800189c:	4618      	mov	r0, r3
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40021000 	.word	0x40021000
 80018a4:	08005e04 	.word	0x08005e04

080018a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80018ac:	f7ff ffda 	bl	8001864 <HAL_RCC_GetHCLKFreq>
 80018b0:	4602      	mov	r2, r0
 80018b2:	4b06      	ldr	r3, [pc, #24]	; (80018cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	0adb      	lsrs	r3, r3, #11
 80018b8:	f003 0307 	and.w	r3, r3, #7
 80018bc:	4904      	ldr	r1, [pc, #16]	; (80018d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80018be:	5ccb      	ldrb	r3, [r1, r3]
 80018c0:	f003 031f 	and.w	r3, r3, #31
 80018c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	40021000 	.word	0x40021000
 80018d0:	08005e04 	.word	0x08005e04

080018d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80018dc:	2300      	movs	r3, #0
 80018de:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80018e0:	4b2a      	ldr	r3, [pc, #168]	; (800198c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d003      	beq.n	80018f4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80018ec:	f7ff f9ee 	bl	8000ccc <HAL_PWREx_GetVoltageRange>
 80018f0:	6178      	str	r0, [r7, #20]
 80018f2:	e014      	b.n	800191e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80018f4:	4b25      	ldr	r3, [pc, #148]	; (800198c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f8:	4a24      	ldr	r2, [pc, #144]	; (800198c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018fe:	6593      	str	r3, [r2, #88]	; 0x58
 8001900:	4b22      	ldr	r3, [pc, #136]	; (800198c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800190c:	f7ff f9de 	bl	8000ccc <HAL_PWREx_GetVoltageRange>
 8001910:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001912:	4b1e      	ldr	r3, [pc, #120]	; (800198c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001916:	4a1d      	ldr	r2, [pc, #116]	; (800198c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001918:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800191c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001924:	d10b      	bne.n	800193e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2b80      	cmp	r3, #128	; 0x80
 800192a:	d919      	bls.n	8001960 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2ba0      	cmp	r3, #160	; 0xa0
 8001930:	d902      	bls.n	8001938 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001932:	2302      	movs	r3, #2
 8001934:	613b      	str	r3, [r7, #16]
 8001936:	e013      	b.n	8001960 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001938:	2301      	movs	r3, #1
 800193a:	613b      	str	r3, [r7, #16]
 800193c:	e010      	b.n	8001960 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2b80      	cmp	r3, #128	; 0x80
 8001942:	d902      	bls.n	800194a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001944:	2303      	movs	r3, #3
 8001946:	613b      	str	r3, [r7, #16]
 8001948:	e00a      	b.n	8001960 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2b80      	cmp	r3, #128	; 0x80
 800194e:	d102      	bne.n	8001956 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001950:	2302      	movs	r3, #2
 8001952:	613b      	str	r3, [r7, #16]
 8001954:	e004      	b.n	8001960 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2b70      	cmp	r3, #112	; 0x70
 800195a:	d101      	bne.n	8001960 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800195c:	2301      	movs	r3, #1
 800195e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001960:	4b0b      	ldr	r3, [pc, #44]	; (8001990 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f023 0207 	bic.w	r2, r3, #7
 8001968:	4909      	ldr	r1, [pc, #36]	; (8001990 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	4313      	orrs	r3, r2
 800196e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001970:	4b07      	ldr	r3, [pc, #28]	; (8001990 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0307 	and.w	r3, r3, #7
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	429a      	cmp	r2, r3
 800197c:	d001      	beq.n	8001982 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e000      	b.n	8001984 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001982:	2300      	movs	r3, #0
}
 8001984:	4618      	mov	r0, r3
 8001986:	3718      	adds	r7, #24
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	40021000 	.word	0x40021000
 8001990:	40022000 	.word	0x40022000

08001994 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b086      	sub	sp, #24
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800199c:	2300      	movs	r3, #0
 800199e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80019a0:	2300      	movs	r3, #0
 80019a2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d041      	beq.n	8001a34 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80019b4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80019b8:	d02a      	beq.n	8001a10 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80019ba:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80019be:	d824      	bhi.n	8001a0a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80019c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80019c4:	d008      	beq.n	80019d8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80019c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80019ca:	d81e      	bhi.n	8001a0a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d00a      	beq.n	80019e6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80019d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019d4:	d010      	beq.n	80019f8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80019d6:	e018      	b.n	8001a0a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80019d8:	4b86      	ldr	r3, [pc, #536]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	4a85      	ldr	r2, [pc, #532]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80019de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80019e4:	e015      	b.n	8001a12 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	3304      	adds	r3, #4
 80019ea:	2100      	movs	r1, #0
 80019ec:	4618      	mov	r0, r3
 80019ee:	f000 fabb 	bl	8001f68 <RCCEx_PLLSAI1_Config>
 80019f2:	4603      	mov	r3, r0
 80019f4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80019f6:	e00c      	b.n	8001a12 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	3320      	adds	r3, #32
 80019fc:	2100      	movs	r1, #0
 80019fe:	4618      	mov	r0, r3
 8001a00:	f000 fba6 	bl	8002150 <RCCEx_PLLSAI2_Config>
 8001a04:	4603      	mov	r3, r0
 8001a06:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001a08:	e003      	b.n	8001a12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	74fb      	strb	r3, [r7, #19]
      break;
 8001a0e:	e000      	b.n	8001a12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001a10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001a12:	7cfb      	ldrb	r3, [r7, #19]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d10b      	bne.n	8001a30 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001a18:	4b76      	ldr	r3, [pc, #472]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a1e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a26:	4973      	ldr	r1, [pc, #460]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001a2e:	e001      	b.n	8001a34 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001a30:	7cfb      	ldrb	r3, [r7, #19]
 8001a32:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d041      	beq.n	8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001a44:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001a48:	d02a      	beq.n	8001aa0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001a4a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001a4e:	d824      	bhi.n	8001a9a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001a50:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a54:	d008      	beq.n	8001a68 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001a56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a5a:	d81e      	bhi.n	8001a9a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d00a      	beq.n	8001a76 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001a60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a64:	d010      	beq.n	8001a88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001a66:	e018      	b.n	8001a9a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001a68:	4b62      	ldr	r3, [pc, #392]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	4a61      	ldr	r2, [pc, #388]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001a6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a72:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001a74:	e015      	b.n	8001aa2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	3304      	adds	r3, #4
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f000 fa73 	bl	8001f68 <RCCEx_PLLSAI1_Config>
 8001a82:	4603      	mov	r3, r0
 8001a84:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001a86:	e00c      	b.n	8001aa2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	3320      	adds	r3, #32
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f000 fb5e 	bl	8002150 <RCCEx_PLLSAI2_Config>
 8001a94:	4603      	mov	r3, r0
 8001a96:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001a98:	e003      	b.n	8001aa2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	74fb      	strb	r3, [r7, #19]
      break;
 8001a9e:	e000      	b.n	8001aa2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001aa0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001aa2:	7cfb      	ldrb	r3, [r7, #19]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d10b      	bne.n	8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001aa8:	4b52      	ldr	r3, [pc, #328]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aae:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ab6:	494f      	ldr	r1, [pc, #316]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001abe:	e001      	b.n	8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ac0:	7cfb      	ldrb	r3, [r7, #19]
 8001ac2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	f000 80a0 	beq.w	8001c12 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001ad6:	4b47      	ldr	r3, [pc, #284]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d101      	bne.n	8001ae6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e000      	b.n	8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d00d      	beq.n	8001b08 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aec:	4b41      	ldr	r3, [pc, #260]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af0:	4a40      	ldr	r2, [pc, #256]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001af2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001af6:	6593      	str	r3, [r2, #88]	; 0x58
 8001af8:	4b3e      	ldr	r3, [pc, #248]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b00:	60bb      	str	r3, [r7, #8]
 8001b02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b04:	2301      	movs	r3, #1
 8001b06:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b08:	4b3b      	ldr	r3, [pc, #236]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a3a      	ldr	r2, [pc, #232]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001b0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b12:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001b14:	f7fe fd3e 	bl	8000594 <HAL_GetTick>
 8001b18:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001b1a:	e009      	b.n	8001b30 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b1c:	f7fe fd3a 	bl	8000594 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d902      	bls.n	8001b30 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	74fb      	strb	r3, [r7, #19]
        break;
 8001b2e:	e005      	b.n	8001b3c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001b30:	4b31      	ldr	r3, [pc, #196]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d0ef      	beq.n	8001b1c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001b3c:	7cfb      	ldrb	r3, [r7, #19]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d15c      	bne.n	8001bfc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001b42:	4b2c      	ldr	r3, [pc, #176]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b4c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d01f      	beq.n	8001b94 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b5a:	697a      	ldr	r2, [r7, #20]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d019      	beq.n	8001b94 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001b60:	4b24      	ldr	r3, [pc, #144]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b6a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001b6c:	4b21      	ldr	r3, [pc, #132]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b72:	4a20      	ldr	r2, [pc, #128]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001b74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001b7c:	4b1d      	ldr	r3, [pc, #116]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b82:	4a1c      	ldr	r2, [pc, #112]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001b84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001b8c:	4a19      	ldr	r2, [pc, #100]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d016      	beq.n	8001bcc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b9e:	f7fe fcf9 	bl	8000594 <HAL_GetTick>
 8001ba2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ba4:	e00b      	b.n	8001bbe <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ba6:	f7fe fcf5 	bl	8000594 <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d902      	bls.n	8001bbe <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	74fb      	strb	r3, [r7, #19]
            break;
 8001bbc:	e006      	b.n	8001bcc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bbe:	4b0d      	ldr	r3, [pc, #52]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bc4:	f003 0302 	and.w	r3, r3, #2
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d0ec      	beq.n	8001ba6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001bcc:	7cfb      	ldrb	r3, [r7, #19]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d10c      	bne.n	8001bec <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001bd2:	4b08      	ldr	r3, [pc, #32]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bd8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001be2:	4904      	ldr	r1, [pc, #16]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001be4:	4313      	orrs	r3, r2
 8001be6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001bea:	e009      	b.n	8001c00 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001bec:	7cfb      	ldrb	r3, [r7, #19]
 8001bee:	74bb      	strb	r3, [r7, #18]
 8001bf0:	e006      	b.n	8001c00 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8001bf2:	bf00      	nop
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001bfc:	7cfb      	ldrb	r3, [r7, #19]
 8001bfe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c00:	7c7b      	ldrb	r3, [r7, #17]
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d105      	bne.n	8001c12 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c06:	4b9e      	ldr	r3, [pc, #632]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0a:	4a9d      	ldr	r2, [pc, #628]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c10:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d00a      	beq.n	8001c34 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001c1e:	4b98      	ldr	r3, [pc, #608]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c24:	f023 0203 	bic.w	r2, r3, #3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c2c:	4994      	ldr	r1, [pc, #592]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0302 	and.w	r3, r3, #2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d00a      	beq.n	8001c56 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001c40:	4b8f      	ldr	r3, [pc, #572]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c46:	f023 020c 	bic.w	r2, r3, #12
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c4e:	498c      	ldr	r1, [pc, #560]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c50:	4313      	orrs	r3, r2
 8001c52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0304 	and.w	r3, r3, #4
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d00a      	beq.n	8001c78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001c62:	4b87      	ldr	r3, [pc, #540]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c68:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c70:	4983      	ldr	r1, [pc, #524]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c72:	4313      	orrs	r3, r2
 8001c74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0308 	and.w	r3, r3, #8
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d00a      	beq.n	8001c9a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001c84:	4b7e      	ldr	r3, [pc, #504]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c8a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c92:	497b      	ldr	r1, [pc, #492]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c94:	4313      	orrs	r3, r2
 8001c96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0310 	and.w	r3, r3, #16
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d00a      	beq.n	8001cbc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001ca6:	4b76      	ldr	r3, [pc, #472]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cb4:	4972      	ldr	r1, [pc, #456]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0320 	and.w	r3, r3, #32
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d00a      	beq.n	8001cde <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001cc8:	4b6d      	ldr	r3, [pc, #436]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd6:	496a      	ldr	r1, [pc, #424]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d00a      	beq.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001cea:	4b65      	ldr	r3, [pc, #404]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cf0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf8:	4961      	ldr	r1, [pc, #388]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d00a      	beq.n	8001d22 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001d0c:	4b5c      	ldr	r3, [pc, #368]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d12:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d1a:	4959      	ldr	r1, [pc, #356]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d00a      	beq.n	8001d44 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d2e:	4b54      	ldr	r3, [pc, #336]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d34:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d3c:	4950      	ldr	r1, [pc, #320]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d00a      	beq.n	8001d66 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001d50:	4b4b      	ldr	r3, [pc, #300]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d56:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d5e:	4948      	ldr	r1, [pc, #288]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d60:	4313      	orrs	r3, r2
 8001d62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d00a      	beq.n	8001d88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001d72:	4b43      	ldr	r3, [pc, #268]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d78:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d80:	493f      	ldr	r1, [pc, #252]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d82:	4313      	orrs	r3, r2
 8001d84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d028      	beq.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001d94:	4b3a      	ldr	r3, [pc, #232]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d9a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001da2:	4937      	ldr	r1, [pc, #220]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001da4:	4313      	orrs	r3, r2
 8001da6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001dae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001db2:	d106      	bne.n	8001dc2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001db4:	4b32      	ldr	r3, [pc, #200]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	4a31      	ldr	r2, [pc, #196]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001dba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001dbe:	60d3      	str	r3, [r2, #12]
 8001dc0:	e011      	b.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001dc6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001dca:	d10c      	bne.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3304      	adds	r3, #4
 8001dd0:	2101      	movs	r1, #1
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f000 f8c8 	bl	8001f68 <RCCEx_PLLSAI1_Config>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8001ddc:	7cfb      	ldrb	r3, [r7, #19]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8001de2:	7cfb      	ldrb	r3, [r7, #19]
 8001de4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d028      	beq.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001df2:	4b23      	ldr	r3, [pc, #140]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001df8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e00:	491f      	ldr	r1, [pc, #124]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e02:	4313      	orrs	r3, r2
 8001e04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001e10:	d106      	bne.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001e12:	4b1b      	ldr	r3, [pc, #108]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	4a1a      	ldr	r2, [pc, #104]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e1c:	60d3      	str	r3, [r2, #12]
 8001e1e:	e011      	b.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001e28:	d10c      	bne.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	3304      	adds	r3, #4
 8001e2e:	2101      	movs	r1, #1
 8001e30:	4618      	mov	r0, r3
 8001e32:	f000 f899 	bl	8001f68 <RCCEx_PLLSAI1_Config>
 8001e36:	4603      	mov	r3, r0
 8001e38:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001e3a:	7cfb      	ldrb	r3, [r7, #19]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8001e40:	7cfb      	ldrb	r3, [r7, #19]
 8001e42:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d02b      	beq.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001e50:	4b0b      	ldr	r3, [pc, #44]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e56:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e5e:	4908      	ldr	r1, [pc, #32]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e60:	4313      	orrs	r3, r2
 8001e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001e6e:	d109      	bne.n	8001e84 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001e70:	4b03      	ldr	r3, [pc, #12]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	4a02      	ldr	r2, [pc, #8]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e7a:	60d3      	str	r3, [r2, #12]
 8001e7c:	e014      	b.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8001e7e:	bf00      	nop
 8001e80:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e88:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001e8c:	d10c      	bne.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	3304      	adds	r3, #4
 8001e92:	2101      	movs	r1, #1
 8001e94:	4618      	mov	r0, r3
 8001e96:	f000 f867 	bl	8001f68 <RCCEx_PLLSAI1_Config>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001e9e:	7cfb      	ldrb	r3, [r7, #19]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8001ea4:	7cfb      	ldrb	r3, [r7, #19]
 8001ea6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d02f      	beq.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001eb4:	4b2b      	ldr	r3, [pc, #172]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8001eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001ec2:	4928      	ldr	r1, [pc, #160]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001ece:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001ed2:	d10d      	bne.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	3304      	adds	r3, #4
 8001ed8:	2102      	movs	r1, #2
 8001eda:	4618      	mov	r0, r3
 8001edc:	f000 f844 	bl	8001f68 <RCCEx_PLLSAI1_Config>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001ee4:	7cfb      	ldrb	r3, [r7, #19]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d014      	beq.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8001eea:	7cfb      	ldrb	r3, [r7, #19]
 8001eec:	74bb      	strb	r3, [r7, #18]
 8001eee:	e011      	b.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001ef4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ef8:	d10c      	bne.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	3320      	adds	r3, #32
 8001efe:	2102      	movs	r1, #2
 8001f00:	4618      	mov	r0, r3
 8001f02:	f000 f925 	bl	8002150 <RCCEx_PLLSAI2_Config>
 8001f06:	4603      	mov	r3, r0
 8001f08:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001f0a:	7cfb      	ldrb	r3, [r7, #19]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8001f10:	7cfb      	ldrb	r3, [r7, #19]
 8001f12:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d00a      	beq.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001f20:	4b10      	ldr	r3, [pc, #64]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8001f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f26:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001f2e:	490d      	ldr	r1, [pc, #52]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d00b      	beq.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001f42:	4b08      	ldr	r3, [pc, #32]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8001f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f48:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f52:	4904      	ldr	r1, [pc, #16]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8001f54:	4313      	orrs	r3, r2
 8001f56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8001f5a:	7cbb      	ldrb	r3, [r7, #18]
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3718      	adds	r7, #24
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40021000 	.word	0x40021000

08001f68 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8001f72:	2300      	movs	r3, #0
 8001f74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001f76:	4b75      	ldr	r3, [pc, #468]	; (800214c <RCCEx_PLLSAI1_Config+0x1e4>)
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	f003 0303 	and.w	r3, r3, #3
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d018      	beq.n	8001fb4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001f82:	4b72      	ldr	r3, [pc, #456]	; (800214c <RCCEx_PLLSAI1_Config+0x1e4>)
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	f003 0203 	and.w	r2, r3, #3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d10d      	bne.n	8001fae <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
       ||
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d009      	beq.n	8001fae <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001f9a:	4b6c      	ldr	r3, [pc, #432]	; (800214c <RCCEx_PLLSAI1_Config+0x1e4>)
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	091b      	lsrs	r3, r3, #4
 8001fa0:	f003 0307 	and.w	r3, r3, #7
 8001fa4:	1c5a      	adds	r2, r3, #1
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
       ||
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d047      	beq.n	800203e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	73fb      	strb	r3, [r7, #15]
 8001fb2:	e044      	b.n	800203e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2b03      	cmp	r3, #3
 8001fba:	d018      	beq.n	8001fee <RCCEx_PLLSAI1_Config+0x86>
 8001fbc:	2b03      	cmp	r3, #3
 8001fbe:	d825      	bhi.n	800200c <RCCEx_PLLSAI1_Config+0xa4>
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d002      	beq.n	8001fca <RCCEx_PLLSAI1_Config+0x62>
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d009      	beq.n	8001fdc <RCCEx_PLLSAI1_Config+0x74>
 8001fc8:	e020      	b.n	800200c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001fca:	4b60      	ldr	r3, [pc, #384]	; (800214c <RCCEx_PLLSAI1_Config+0x1e4>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d11d      	bne.n	8002012 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fda:	e01a      	b.n	8002012 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001fdc:	4b5b      	ldr	r3, [pc, #364]	; (800214c <RCCEx_PLLSAI1_Config+0x1e4>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d116      	bne.n	8002016 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fec:	e013      	b.n	8002016 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001fee:	4b57      	ldr	r3, [pc, #348]	; (800214c <RCCEx_PLLSAI1_Config+0x1e4>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d10f      	bne.n	800201a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001ffa:	4b54      	ldr	r3, [pc, #336]	; (800214c <RCCEx_PLLSAI1_Config+0x1e4>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d109      	bne.n	800201a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800200a:	e006      	b.n	800201a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	73fb      	strb	r3, [r7, #15]
      break;
 8002010:	e004      	b.n	800201c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002012:	bf00      	nop
 8002014:	e002      	b.n	800201c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002016:	bf00      	nop
 8002018:	e000      	b.n	800201c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800201a:	bf00      	nop
    }

    if(status == HAL_OK)
 800201c:	7bfb      	ldrb	r3, [r7, #15]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d10d      	bne.n	800203e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002022:	4b4a      	ldr	r3, [pc, #296]	; (800214c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6819      	ldr	r1, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	3b01      	subs	r3, #1
 8002034:	011b      	lsls	r3, r3, #4
 8002036:	430b      	orrs	r3, r1
 8002038:	4944      	ldr	r1, [pc, #272]	; (800214c <RCCEx_PLLSAI1_Config+0x1e4>)
 800203a:	4313      	orrs	r3, r2
 800203c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800203e:	7bfb      	ldrb	r3, [r7, #15]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d17d      	bne.n	8002140 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002044:	4b41      	ldr	r3, [pc, #260]	; (800214c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a40      	ldr	r2, [pc, #256]	; (800214c <RCCEx_PLLSAI1_Config+0x1e4>)
 800204a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800204e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002050:	f7fe faa0 	bl	8000594 <HAL_GetTick>
 8002054:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002056:	e009      	b.n	800206c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002058:	f7fe fa9c 	bl	8000594 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b02      	cmp	r3, #2
 8002064:	d902      	bls.n	800206c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	73fb      	strb	r3, [r7, #15]
        break;
 800206a:	e005      	b.n	8002078 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800206c:	4b37      	ldr	r3, [pc, #220]	; (800214c <RCCEx_PLLSAI1_Config+0x1e4>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d1ef      	bne.n	8002058 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002078:	7bfb      	ldrb	r3, [r7, #15]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d160      	bne.n	8002140 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d111      	bne.n	80020a8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002084:	4b31      	ldr	r3, [pc, #196]	; (800214c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002086:	691b      	ldr	r3, [r3, #16]
 8002088:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800208c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	6892      	ldr	r2, [r2, #8]
 8002094:	0211      	lsls	r1, r2, #8
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	68d2      	ldr	r2, [r2, #12]
 800209a:	0912      	lsrs	r2, r2, #4
 800209c:	0452      	lsls	r2, r2, #17
 800209e:	430a      	orrs	r2, r1
 80020a0:	492a      	ldr	r1, [pc, #168]	; (800214c <RCCEx_PLLSAI1_Config+0x1e4>)
 80020a2:	4313      	orrs	r3, r2
 80020a4:	610b      	str	r3, [r1, #16]
 80020a6:	e027      	b.n	80020f8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d112      	bne.n	80020d4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80020ae:	4b27      	ldr	r3, [pc, #156]	; (800214c <RCCEx_PLLSAI1_Config+0x1e4>)
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80020b6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	6892      	ldr	r2, [r2, #8]
 80020be:	0211      	lsls	r1, r2, #8
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	6912      	ldr	r2, [r2, #16]
 80020c4:	0852      	lsrs	r2, r2, #1
 80020c6:	3a01      	subs	r2, #1
 80020c8:	0552      	lsls	r2, r2, #21
 80020ca:	430a      	orrs	r2, r1
 80020cc:	491f      	ldr	r1, [pc, #124]	; (800214c <RCCEx_PLLSAI1_Config+0x1e4>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	610b      	str	r3, [r1, #16]
 80020d2:	e011      	b.n	80020f8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80020d4:	4b1d      	ldr	r3, [pc, #116]	; (800214c <RCCEx_PLLSAI1_Config+0x1e4>)
 80020d6:	691b      	ldr	r3, [r3, #16]
 80020d8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80020dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	6892      	ldr	r2, [r2, #8]
 80020e4:	0211      	lsls	r1, r2, #8
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	6952      	ldr	r2, [r2, #20]
 80020ea:	0852      	lsrs	r2, r2, #1
 80020ec:	3a01      	subs	r2, #1
 80020ee:	0652      	lsls	r2, r2, #25
 80020f0:	430a      	orrs	r2, r1
 80020f2:	4916      	ldr	r1, [pc, #88]	; (800214c <RCCEx_PLLSAI1_Config+0x1e4>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80020f8:	4b14      	ldr	r3, [pc, #80]	; (800214c <RCCEx_PLLSAI1_Config+0x1e4>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a13      	ldr	r2, [pc, #76]	; (800214c <RCCEx_PLLSAI1_Config+0x1e4>)
 80020fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002102:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002104:	f7fe fa46 	bl	8000594 <HAL_GetTick>
 8002108:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800210a:	e009      	b.n	8002120 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800210c:	f7fe fa42 	bl	8000594 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b02      	cmp	r3, #2
 8002118:	d902      	bls.n	8002120 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	73fb      	strb	r3, [r7, #15]
          break;
 800211e:	e005      	b.n	800212c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002120:	4b0a      	ldr	r3, [pc, #40]	; (800214c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d0ef      	beq.n	800210c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800212c:	7bfb      	ldrb	r3, [r7, #15]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d106      	bne.n	8002140 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002132:	4b06      	ldr	r3, [pc, #24]	; (800214c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002134:	691a      	ldr	r2, [r3, #16]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	4904      	ldr	r1, [pc, #16]	; (800214c <RCCEx_PLLSAI1_Config+0x1e4>)
 800213c:	4313      	orrs	r3, r2
 800213e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002140:	7bfb      	ldrb	r3, [r7, #15]
}
 8002142:	4618      	mov	r0, r3
 8002144:	3710      	adds	r7, #16
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	40021000 	.word	0x40021000

08002150 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800215a:	2300      	movs	r3, #0
 800215c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800215e:	4b6a      	ldr	r3, [pc, #424]	; (8002308 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	f003 0303 	and.w	r3, r3, #3
 8002166:	2b00      	cmp	r3, #0
 8002168:	d018      	beq.n	800219c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800216a:	4b67      	ldr	r3, [pc, #412]	; (8002308 <RCCEx_PLLSAI2_Config+0x1b8>)
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	f003 0203 	and.w	r2, r3, #3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	429a      	cmp	r2, r3
 8002178:	d10d      	bne.n	8002196 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
       ||
 800217e:	2b00      	cmp	r3, #0
 8002180:	d009      	beq.n	8002196 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002182:	4b61      	ldr	r3, [pc, #388]	; (8002308 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	091b      	lsrs	r3, r3, #4
 8002188:	f003 0307 	and.w	r3, r3, #7
 800218c:	1c5a      	adds	r2, r3, #1
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
       ||
 8002192:	429a      	cmp	r2, r3
 8002194:	d047      	beq.n	8002226 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	73fb      	strb	r3, [r7, #15]
 800219a:	e044      	b.n	8002226 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2b03      	cmp	r3, #3
 80021a2:	d018      	beq.n	80021d6 <RCCEx_PLLSAI2_Config+0x86>
 80021a4:	2b03      	cmp	r3, #3
 80021a6:	d825      	bhi.n	80021f4 <RCCEx_PLLSAI2_Config+0xa4>
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d002      	beq.n	80021b2 <RCCEx_PLLSAI2_Config+0x62>
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d009      	beq.n	80021c4 <RCCEx_PLLSAI2_Config+0x74>
 80021b0:	e020      	b.n	80021f4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80021b2:	4b55      	ldr	r3, [pc, #340]	; (8002308 <RCCEx_PLLSAI2_Config+0x1b8>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d11d      	bne.n	80021fa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021c2:	e01a      	b.n	80021fa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80021c4:	4b50      	ldr	r3, [pc, #320]	; (8002308 <RCCEx_PLLSAI2_Config+0x1b8>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d116      	bne.n	80021fe <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021d4:	e013      	b.n	80021fe <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80021d6:	4b4c      	ldr	r3, [pc, #304]	; (8002308 <RCCEx_PLLSAI2_Config+0x1b8>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d10f      	bne.n	8002202 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80021e2:	4b49      	ldr	r3, [pc, #292]	; (8002308 <RCCEx_PLLSAI2_Config+0x1b8>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d109      	bne.n	8002202 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80021f2:	e006      	b.n	8002202 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	73fb      	strb	r3, [r7, #15]
      break;
 80021f8:	e004      	b.n	8002204 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80021fa:	bf00      	nop
 80021fc:	e002      	b.n	8002204 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80021fe:	bf00      	nop
 8002200:	e000      	b.n	8002204 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002202:	bf00      	nop
    }

    if(status == HAL_OK)
 8002204:	7bfb      	ldrb	r3, [r7, #15]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d10d      	bne.n	8002226 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800220a:	4b3f      	ldr	r3, [pc, #252]	; (8002308 <RCCEx_PLLSAI2_Config+0x1b8>)
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6819      	ldr	r1, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	3b01      	subs	r3, #1
 800221c:	011b      	lsls	r3, r3, #4
 800221e:	430b      	orrs	r3, r1
 8002220:	4939      	ldr	r1, [pc, #228]	; (8002308 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002222:	4313      	orrs	r3, r2
 8002224:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002226:	7bfb      	ldrb	r3, [r7, #15]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d167      	bne.n	80022fc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800222c:	4b36      	ldr	r3, [pc, #216]	; (8002308 <RCCEx_PLLSAI2_Config+0x1b8>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a35      	ldr	r2, [pc, #212]	; (8002308 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002232:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002236:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002238:	f7fe f9ac 	bl	8000594 <HAL_GetTick>
 800223c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800223e:	e009      	b.n	8002254 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002240:	f7fe f9a8 	bl	8000594 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d902      	bls.n	8002254 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	73fb      	strb	r3, [r7, #15]
        break;
 8002252:	e005      	b.n	8002260 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002254:	4b2c      	ldr	r3, [pc, #176]	; (8002308 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d1ef      	bne.n	8002240 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002260:	7bfb      	ldrb	r3, [r7, #15]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d14a      	bne.n	80022fc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d111      	bne.n	8002290 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800226c:	4b26      	ldr	r3, [pc, #152]	; (8002308 <RCCEx_PLLSAI2_Config+0x1b8>)
 800226e:	695b      	ldr	r3, [r3, #20]
 8002270:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002274:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	6892      	ldr	r2, [r2, #8]
 800227c:	0211      	lsls	r1, r2, #8
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	68d2      	ldr	r2, [r2, #12]
 8002282:	0912      	lsrs	r2, r2, #4
 8002284:	0452      	lsls	r2, r2, #17
 8002286:	430a      	orrs	r2, r1
 8002288:	491f      	ldr	r1, [pc, #124]	; (8002308 <RCCEx_PLLSAI2_Config+0x1b8>)
 800228a:	4313      	orrs	r3, r2
 800228c:	614b      	str	r3, [r1, #20]
 800228e:	e011      	b.n	80022b4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002290:	4b1d      	ldr	r3, [pc, #116]	; (8002308 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002292:	695b      	ldr	r3, [r3, #20]
 8002294:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002298:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	6892      	ldr	r2, [r2, #8]
 80022a0:	0211      	lsls	r1, r2, #8
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	6912      	ldr	r2, [r2, #16]
 80022a6:	0852      	lsrs	r2, r2, #1
 80022a8:	3a01      	subs	r2, #1
 80022aa:	0652      	lsls	r2, r2, #25
 80022ac:	430a      	orrs	r2, r1
 80022ae:	4916      	ldr	r1, [pc, #88]	; (8002308 <RCCEx_PLLSAI2_Config+0x1b8>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80022b4:	4b14      	ldr	r3, [pc, #80]	; (8002308 <RCCEx_PLLSAI2_Config+0x1b8>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a13      	ldr	r2, [pc, #76]	; (8002308 <RCCEx_PLLSAI2_Config+0x1b8>)
 80022ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022be:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022c0:	f7fe f968 	bl	8000594 <HAL_GetTick>
 80022c4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80022c6:	e009      	b.n	80022dc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80022c8:	f7fe f964 	bl	8000594 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d902      	bls.n	80022dc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	73fb      	strb	r3, [r7, #15]
          break;
 80022da:	e005      	b.n	80022e8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80022dc:	4b0a      	ldr	r3, [pc, #40]	; (8002308 <RCCEx_PLLSAI2_Config+0x1b8>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d0ef      	beq.n	80022c8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80022e8:	7bfb      	ldrb	r3, [r7, #15]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d106      	bne.n	80022fc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80022ee:	4b06      	ldr	r3, [pc, #24]	; (8002308 <RCCEx_PLLSAI2_Config+0x1b8>)
 80022f0:	695a      	ldr	r2, [r3, #20]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	695b      	ldr	r3, [r3, #20]
 80022f6:	4904      	ldr	r1, [pc, #16]	; (8002308 <RCCEx_PLLSAI2_Config+0x1b8>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80022fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3710      	adds	r7, #16
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	40021000 	.word	0x40021000

0800230c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d101      	bne.n	800231e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e049      	b.n	80023b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b00      	cmp	r3, #0
 8002328:	d106      	bne.n	8002338 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 f841 	bl	80023ba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2202      	movs	r2, #2
 800233c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	3304      	adds	r3, #4
 8002348:	4619      	mov	r1, r3
 800234a:	4610      	mov	r0, r2
 800234c:	f000 fd22 	bl	8002d94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80023ba:	b480      	push	{r7}
 80023bc:	b083      	sub	sp, #12
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80023c2:	bf00      	nop
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
	...

080023d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d001      	beq.n	80023e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e04f      	b.n	8002488 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2202      	movs	r2, #2
 80023ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68da      	ldr	r2, [r3, #12]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f042 0201 	orr.w	r2, r2, #1
 80023fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a23      	ldr	r2, [pc, #140]	; (8002494 <HAL_TIM_Base_Start_IT+0xc4>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d01d      	beq.n	8002446 <HAL_TIM_Base_Start_IT+0x76>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002412:	d018      	beq.n	8002446 <HAL_TIM_Base_Start_IT+0x76>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a1f      	ldr	r2, [pc, #124]	; (8002498 <HAL_TIM_Base_Start_IT+0xc8>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d013      	beq.n	8002446 <HAL_TIM_Base_Start_IT+0x76>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a1e      	ldr	r2, [pc, #120]	; (800249c <HAL_TIM_Base_Start_IT+0xcc>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d00e      	beq.n	8002446 <HAL_TIM_Base_Start_IT+0x76>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a1c      	ldr	r2, [pc, #112]	; (80024a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d009      	beq.n	8002446 <HAL_TIM_Base_Start_IT+0x76>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a1b      	ldr	r2, [pc, #108]	; (80024a4 <HAL_TIM_Base_Start_IT+0xd4>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d004      	beq.n	8002446 <HAL_TIM_Base_Start_IT+0x76>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a19      	ldr	r2, [pc, #100]	; (80024a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d115      	bne.n	8002472 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	689a      	ldr	r2, [r3, #8]
 800244c:	4b17      	ldr	r3, [pc, #92]	; (80024ac <HAL_TIM_Base_Start_IT+0xdc>)
 800244e:	4013      	ands	r3, r2
 8002450:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2b06      	cmp	r3, #6
 8002456:	d015      	beq.n	8002484 <HAL_TIM_Base_Start_IT+0xb4>
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800245e:	d011      	beq.n	8002484 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f042 0201 	orr.w	r2, r2, #1
 800246e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002470:	e008      	b.n	8002484 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f042 0201 	orr.w	r2, r2, #1
 8002480:	601a      	str	r2, [r3, #0]
 8002482:	e000      	b.n	8002486 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002484:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002486:	2300      	movs	r3, #0
}
 8002488:	4618      	mov	r0, r3
 800248a:	3714      	adds	r7, #20
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	40012c00 	.word	0x40012c00
 8002498:	40000400 	.word	0x40000400
 800249c:	40000800 	.word	0x40000800
 80024a0:	40000c00 	.word	0x40000c00
 80024a4:	40013400 	.word	0x40013400
 80024a8:	40014000 	.word	0x40014000
 80024ac:	00010007 	.word	0x00010007

080024b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d101      	bne.n	80024c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e049      	b.n	8002556 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d106      	bne.n	80024dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f003 fab2 	bl	8005a40 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2202      	movs	r2, #2
 80024e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	3304      	adds	r3, #4
 80024ec:	4619      	mov	r1, r3
 80024ee:	4610      	mov	r0, r2
 80024f0:	f000 fc50 	bl	8002d94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800255e:	b580      	push	{r7, lr}
 8002560:	b082      	sub	sp, #8
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d101      	bne.n	8002570 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e049      	b.n	8002604 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002576:	b2db      	uxtb	r3, r3
 8002578:	2b00      	cmp	r3, #0
 800257a:	d106      	bne.n	800258a <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f003 fa79 	bl	8005a7c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2202      	movs	r2, #2
 800258e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	3304      	adds	r3, #4
 800259a:	4619      	mov	r1, r3
 800259c:	4610      	mov	r0, r2
 800259e:	f000 fbf9 	bl	8002d94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2201      	movs	r2, #1
 80025a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2201      	movs	r2, #1
 80025ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2201      	movs	r2, #1
 80025b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2201      	movs	r2, #1
 80025be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2201      	movs	r2, #1
 80025ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2201      	movs	r2, #1
 80025d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2201      	movs	r2, #1
 80025de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2201      	movs	r2, #1
 80025e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2201      	movs	r2, #1
 80025ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2201      	movs	r2, #1
 80025f6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2201      	movs	r2, #1
 80025fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002602:	2300      	movs	r3, #0
}
 8002604:	4618      	mov	r0, r3
 8002606:	3708      	adds	r7, #8
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002616:	2300      	movs	r3, #0
 8002618:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d104      	bne.n	800262a <HAL_TIM_IC_Start_IT+0x1e>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002626:	b2db      	uxtb	r3, r3
 8002628:	e023      	b.n	8002672 <HAL_TIM_IC_Start_IT+0x66>
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	2b04      	cmp	r3, #4
 800262e:	d104      	bne.n	800263a <HAL_TIM_IC_Start_IT+0x2e>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002636:	b2db      	uxtb	r3, r3
 8002638:	e01b      	b.n	8002672 <HAL_TIM_IC_Start_IT+0x66>
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	2b08      	cmp	r3, #8
 800263e:	d104      	bne.n	800264a <HAL_TIM_IC_Start_IT+0x3e>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002646:	b2db      	uxtb	r3, r3
 8002648:	e013      	b.n	8002672 <HAL_TIM_IC_Start_IT+0x66>
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	2b0c      	cmp	r3, #12
 800264e:	d104      	bne.n	800265a <HAL_TIM_IC_Start_IT+0x4e>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002656:	b2db      	uxtb	r3, r3
 8002658:	e00b      	b.n	8002672 <HAL_TIM_IC_Start_IT+0x66>
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	2b10      	cmp	r3, #16
 800265e:	d104      	bne.n	800266a <HAL_TIM_IC_Start_IT+0x5e>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002666:	b2db      	uxtb	r3, r3
 8002668:	e003      	b.n	8002672 <HAL_TIM_IC_Start_IT+0x66>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002670:	b2db      	uxtb	r3, r3
 8002672:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d104      	bne.n	8002684 <HAL_TIM_IC_Start_IT+0x78>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002680:	b2db      	uxtb	r3, r3
 8002682:	e013      	b.n	80026ac <HAL_TIM_IC_Start_IT+0xa0>
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	2b04      	cmp	r3, #4
 8002688:	d104      	bne.n	8002694 <HAL_TIM_IC_Start_IT+0x88>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002690:	b2db      	uxtb	r3, r3
 8002692:	e00b      	b.n	80026ac <HAL_TIM_IC_Start_IT+0xa0>
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	2b08      	cmp	r3, #8
 8002698:	d104      	bne.n	80026a4 <HAL_TIM_IC_Start_IT+0x98>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	e003      	b.n	80026ac <HAL_TIM_IC_Start_IT+0xa0>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80026ae:	7bbb      	ldrb	r3, [r7, #14]
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d102      	bne.n	80026ba <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80026b4:	7b7b      	ldrb	r3, [r7, #13]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d001      	beq.n	80026be <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e0dd      	b.n	800287a <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d104      	bne.n	80026ce <HAL_TIM_IC_Start_IT+0xc2>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2202      	movs	r2, #2
 80026c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026cc:	e023      	b.n	8002716 <HAL_TIM_IC_Start_IT+0x10a>
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	2b04      	cmp	r3, #4
 80026d2:	d104      	bne.n	80026de <HAL_TIM_IC_Start_IT+0xd2>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2202      	movs	r2, #2
 80026d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026dc:	e01b      	b.n	8002716 <HAL_TIM_IC_Start_IT+0x10a>
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	2b08      	cmp	r3, #8
 80026e2:	d104      	bne.n	80026ee <HAL_TIM_IC_Start_IT+0xe2>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2202      	movs	r2, #2
 80026e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026ec:	e013      	b.n	8002716 <HAL_TIM_IC_Start_IT+0x10a>
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	2b0c      	cmp	r3, #12
 80026f2:	d104      	bne.n	80026fe <HAL_TIM_IC_Start_IT+0xf2>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2202      	movs	r2, #2
 80026f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80026fc:	e00b      	b.n	8002716 <HAL_TIM_IC_Start_IT+0x10a>
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	2b10      	cmp	r3, #16
 8002702:	d104      	bne.n	800270e <HAL_TIM_IC_Start_IT+0x102>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2202      	movs	r2, #2
 8002708:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800270c:	e003      	b.n	8002716 <HAL_TIM_IC_Start_IT+0x10a>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2202      	movs	r2, #2
 8002712:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d104      	bne.n	8002726 <HAL_TIM_IC_Start_IT+0x11a>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2202      	movs	r2, #2
 8002720:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002724:	e013      	b.n	800274e <HAL_TIM_IC_Start_IT+0x142>
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	2b04      	cmp	r3, #4
 800272a:	d104      	bne.n	8002736 <HAL_TIM_IC_Start_IT+0x12a>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2202      	movs	r2, #2
 8002730:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002734:	e00b      	b.n	800274e <HAL_TIM_IC_Start_IT+0x142>
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	2b08      	cmp	r3, #8
 800273a:	d104      	bne.n	8002746 <HAL_TIM_IC_Start_IT+0x13a>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2202      	movs	r2, #2
 8002740:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002744:	e003      	b.n	800274e <HAL_TIM_IC_Start_IT+0x142>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2202      	movs	r2, #2
 800274a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	2b0c      	cmp	r3, #12
 8002752:	d841      	bhi.n	80027d8 <HAL_TIM_IC_Start_IT+0x1cc>
 8002754:	a201      	add	r2, pc, #4	; (adr r2, 800275c <HAL_TIM_IC_Start_IT+0x150>)
 8002756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800275a:	bf00      	nop
 800275c:	08002791 	.word	0x08002791
 8002760:	080027d9 	.word	0x080027d9
 8002764:	080027d9 	.word	0x080027d9
 8002768:	080027d9 	.word	0x080027d9
 800276c:	080027a3 	.word	0x080027a3
 8002770:	080027d9 	.word	0x080027d9
 8002774:	080027d9 	.word	0x080027d9
 8002778:	080027d9 	.word	0x080027d9
 800277c:	080027b5 	.word	0x080027b5
 8002780:	080027d9 	.word	0x080027d9
 8002784:	080027d9 	.word	0x080027d9
 8002788:	080027d9 	.word	0x080027d9
 800278c:	080027c7 	.word	0x080027c7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68da      	ldr	r2, [r3, #12]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f042 0202 	orr.w	r2, r2, #2
 800279e:	60da      	str	r2, [r3, #12]
      break;
 80027a0:	e01d      	b.n	80027de <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68da      	ldr	r2, [r3, #12]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f042 0204 	orr.w	r2, r2, #4
 80027b0:	60da      	str	r2, [r3, #12]
      break;
 80027b2:	e014      	b.n	80027de <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	68da      	ldr	r2, [r3, #12]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f042 0208 	orr.w	r2, r2, #8
 80027c2:	60da      	str	r2, [r3, #12]
      break;
 80027c4:	e00b      	b.n	80027de <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68da      	ldr	r2, [r3, #12]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f042 0210 	orr.w	r2, r2, #16
 80027d4:	60da      	str	r2, [r3, #12]
      break;
 80027d6:	e002      	b.n	80027de <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	73fb      	strb	r3, [r7, #15]
      break;
 80027dc:	bf00      	nop
  }

  if (status == HAL_OK)
 80027de:	7bfb      	ldrb	r3, [r7, #15]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d149      	bne.n	8002878 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2201      	movs	r2, #1
 80027ea:	6839      	ldr	r1, [r7, #0]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f000 ffff 	bl	80037f0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a23      	ldr	r2, [pc, #140]	; (8002884 <HAL_TIM_IC_Start_IT+0x278>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d01d      	beq.n	8002838 <HAL_TIM_IC_Start_IT+0x22c>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002804:	d018      	beq.n	8002838 <HAL_TIM_IC_Start_IT+0x22c>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a1f      	ldr	r2, [pc, #124]	; (8002888 <HAL_TIM_IC_Start_IT+0x27c>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d013      	beq.n	8002838 <HAL_TIM_IC_Start_IT+0x22c>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a1d      	ldr	r2, [pc, #116]	; (800288c <HAL_TIM_IC_Start_IT+0x280>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d00e      	beq.n	8002838 <HAL_TIM_IC_Start_IT+0x22c>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a1c      	ldr	r2, [pc, #112]	; (8002890 <HAL_TIM_IC_Start_IT+0x284>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d009      	beq.n	8002838 <HAL_TIM_IC_Start_IT+0x22c>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a1a      	ldr	r2, [pc, #104]	; (8002894 <HAL_TIM_IC_Start_IT+0x288>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d004      	beq.n	8002838 <HAL_TIM_IC_Start_IT+0x22c>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a19      	ldr	r2, [pc, #100]	; (8002898 <HAL_TIM_IC_Start_IT+0x28c>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d115      	bne.n	8002864 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	689a      	ldr	r2, [r3, #8]
 800283e:	4b17      	ldr	r3, [pc, #92]	; (800289c <HAL_TIM_IC_Start_IT+0x290>)
 8002840:	4013      	ands	r3, r2
 8002842:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	2b06      	cmp	r3, #6
 8002848:	d015      	beq.n	8002876 <HAL_TIM_IC_Start_IT+0x26a>
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002850:	d011      	beq.n	8002876 <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f042 0201 	orr.w	r2, r2, #1
 8002860:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002862:	e008      	b.n	8002876 <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f042 0201 	orr.w	r2, r2, #1
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	e000      	b.n	8002878 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002876:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8002878:	7bfb      	ldrb	r3, [r7, #15]
}
 800287a:	4618      	mov	r0, r3
 800287c:	3710      	adds	r7, #16
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	40012c00 	.word	0x40012c00
 8002888:	40000400 	.word	0x40000400
 800288c:	40000800 	.word	0x40000800
 8002890:	40000c00 	.word	0x40000c00
 8002894:	40013400 	.word	0x40013400
 8002898:	40014000 	.word	0x40014000
 800289c:	00010007 	.word	0x00010007

080028a0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b086      	sub	sp, #24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028ac:	2300      	movs	r3, #0
 80028ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d101      	bne.n	80028be <HAL_TIM_IC_ConfigChannel+0x1e>
 80028ba:	2302      	movs	r3, #2
 80028bc:	e088      	b.n	80029d0 <HAL_TIM_IC_ConfigChannel+0x130>
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2201      	movs	r2, #1
 80028c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d11b      	bne.n	8002904 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80028dc:	f000 fdca 	bl	8003474 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	699a      	ldr	r2, [r3, #24]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f022 020c 	bic.w	r2, r2, #12
 80028ee:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6999      	ldr	r1, [r3, #24]
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	689a      	ldr	r2, [r3, #8]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	430a      	orrs	r2, r1
 8002900:	619a      	str	r2, [r3, #24]
 8002902:	e060      	b.n	80029c6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2b04      	cmp	r3, #4
 8002908:	d11c      	bne.n	8002944 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800291a:	f000 fe48 	bl	80035ae <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	699a      	ldr	r2, [r3, #24]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800292c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	6999      	ldr	r1, [r3, #24]
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	021a      	lsls	r2, r3, #8
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	430a      	orrs	r2, r1
 8002940:	619a      	str	r2, [r3, #24]
 8002942:	e040      	b.n	80029c6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b08      	cmp	r3, #8
 8002948:	d11b      	bne.n	8002982 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800295a:	f000 fe95 	bl	8003688 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	69da      	ldr	r2, [r3, #28]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 020c 	bic.w	r2, r2, #12
 800296c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	69d9      	ldr	r1, [r3, #28]
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	689a      	ldr	r2, [r3, #8]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	430a      	orrs	r2, r1
 800297e:	61da      	str	r2, [r3, #28]
 8002980:	e021      	b.n	80029c6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2b0c      	cmp	r3, #12
 8002986:	d11c      	bne.n	80029c2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002998:	f000 feb2 	bl	8003700 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	69da      	ldr	r2, [r3, #28]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80029aa:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	69d9      	ldr	r1, [r3, #28]
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	021a      	lsls	r2, r3, #8
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	430a      	orrs	r2, r1
 80029be:	61da      	str	r2, [r3, #28]
 80029c0:	e001      	b.n	80029c6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80029ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3718      	adds	r7, #24
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b086      	sub	sp, #24
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029e4:	2300      	movs	r3, #0
 80029e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d101      	bne.n	80029f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80029f2:	2302      	movs	r3, #2
 80029f4:	e0ff      	b.n	8002bf6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2b14      	cmp	r3, #20
 8002a02:	f200 80f0 	bhi.w	8002be6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002a06:	a201      	add	r2, pc, #4	; (adr r2, 8002a0c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a0c:	08002a61 	.word	0x08002a61
 8002a10:	08002be7 	.word	0x08002be7
 8002a14:	08002be7 	.word	0x08002be7
 8002a18:	08002be7 	.word	0x08002be7
 8002a1c:	08002aa1 	.word	0x08002aa1
 8002a20:	08002be7 	.word	0x08002be7
 8002a24:	08002be7 	.word	0x08002be7
 8002a28:	08002be7 	.word	0x08002be7
 8002a2c:	08002ae3 	.word	0x08002ae3
 8002a30:	08002be7 	.word	0x08002be7
 8002a34:	08002be7 	.word	0x08002be7
 8002a38:	08002be7 	.word	0x08002be7
 8002a3c:	08002b23 	.word	0x08002b23
 8002a40:	08002be7 	.word	0x08002be7
 8002a44:	08002be7 	.word	0x08002be7
 8002a48:	08002be7 	.word	0x08002be7
 8002a4c:	08002b65 	.word	0x08002b65
 8002a50:	08002be7 	.word	0x08002be7
 8002a54:	08002be7 	.word	0x08002be7
 8002a58:	08002be7 	.word	0x08002be7
 8002a5c:	08002ba5 	.word	0x08002ba5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68b9      	ldr	r1, [r7, #8]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f000 fa2e 	bl	8002ec8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	699a      	ldr	r2, [r3, #24]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f042 0208 	orr.w	r2, r2, #8
 8002a7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	699a      	ldr	r2, [r3, #24]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f022 0204 	bic.w	r2, r2, #4
 8002a8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	6999      	ldr	r1, [r3, #24]
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	691a      	ldr	r2, [r3, #16]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	619a      	str	r2, [r3, #24]
      break;
 8002a9e:	e0a5      	b.n	8002bec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68b9      	ldr	r1, [r7, #8]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f000 fa9e 	bl	8002fe8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	699a      	ldr	r2, [r3, #24]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002aba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	699a      	ldr	r2, [r3, #24]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002aca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6999      	ldr	r1, [r3, #24]
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	021a      	lsls	r2, r3, #8
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	430a      	orrs	r2, r1
 8002ade:	619a      	str	r2, [r3, #24]
      break;
 8002ae0:	e084      	b.n	8002bec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68b9      	ldr	r1, [r7, #8]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f000 fb07 	bl	80030fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	69da      	ldr	r2, [r3, #28]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f042 0208 	orr.w	r2, r2, #8
 8002afc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	69da      	ldr	r2, [r3, #28]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 0204 	bic.w	r2, r2, #4
 8002b0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	69d9      	ldr	r1, [r3, #28]
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	691a      	ldr	r2, [r3, #16]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	61da      	str	r2, [r3, #28]
      break;
 8002b20:	e064      	b.n	8002bec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68b9      	ldr	r1, [r7, #8]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f000 fb6f 	bl	800320c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	69da      	ldr	r2, [r3, #28]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	69da      	ldr	r2, [r3, #28]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	69d9      	ldr	r1, [r3, #28]
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	021a      	lsls	r2, r3, #8
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	61da      	str	r2, [r3, #28]
      break;
 8002b62:	e043      	b.n	8002bec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68b9      	ldr	r1, [r7, #8]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f000 fbb8 	bl	80032e0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f042 0208 	orr.w	r2, r2, #8
 8002b7e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f022 0204 	bic.w	r2, r2, #4
 8002b8e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	691a      	ldr	r2, [r3, #16]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002ba2:	e023      	b.n	8002bec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68b9      	ldr	r1, [r7, #8]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f000 fbfc 	bl	80033a8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bbe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	021a      	lsls	r2, r3, #8
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	430a      	orrs	r2, r1
 8002be2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002be4:	e002      	b.n	8002bec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	75fb      	strb	r3, [r7, #23]
      break;
 8002bea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002bf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3718      	adds	r7, #24
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop

08002c00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d101      	bne.n	8002c1c <HAL_TIM_ConfigClockSource+0x1c>
 8002c18:	2302      	movs	r3, #2
 8002c1a:	e0b6      	b.n	8002d8a <HAL_TIM_ConfigClockSource+0x18a>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2202      	movs	r2, #2
 8002c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c3a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68ba      	ldr	r2, [r7, #8]
 8002c4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c58:	d03e      	beq.n	8002cd8 <HAL_TIM_ConfigClockSource+0xd8>
 8002c5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c5e:	f200 8087 	bhi.w	8002d70 <HAL_TIM_ConfigClockSource+0x170>
 8002c62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c66:	f000 8086 	beq.w	8002d76 <HAL_TIM_ConfigClockSource+0x176>
 8002c6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c6e:	d87f      	bhi.n	8002d70 <HAL_TIM_ConfigClockSource+0x170>
 8002c70:	2b70      	cmp	r3, #112	; 0x70
 8002c72:	d01a      	beq.n	8002caa <HAL_TIM_ConfigClockSource+0xaa>
 8002c74:	2b70      	cmp	r3, #112	; 0x70
 8002c76:	d87b      	bhi.n	8002d70 <HAL_TIM_ConfigClockSource+0x170>
 8002c78:	2b60      	cmp	r3, #96	; 0x60
 8002c7a:	d050      	beq.n	8002d1e <HAL_TIM_ConfigClockSource+0x11e>
 8002c7c:	2b60      	cmp	r3, #96	; 0x60
 8002c7e:	d877      	bhi.n	8002d70 <HAL_TIM_ConfigClockSource+0x170>
 8002c80:	2b50      	cmp	r3, #80	; 0x50
 8002c82:	d03c      	beq.n	8002cfe <HAL_TIM_ConfigClockSource+0xfe>
 8002c84:	2b50      	cmp	r3, #80	; 0x50
 8002c86:	d873      	bhi.n	8002d70 <HAL_TIM_ConfigClockSource+0x170>
 8002c88:	2b40      	cmp	r3, #64	; 0x40
 8002c8a:	d058      	beq.n	8002d3e <HAL_TIM_ConfigClockSource+0x13e>
 8002c8c:	2b40      	cmp	r3, #64	; 0x40
 8002c8e:	d86f      	bhi.n	8002d70 <HAL_TIM_ConfigClockSource+0x170>
 8002c90:	2b30      	cmp	r3, #48	; 0x30
 8002c92:	d064      	beq.n	8002d5e <HAL_TIM_ConfigClockSource+0x15e>
 8002c94:	2b30      	cmp	r3, #48	; 0x30
 8002c96:	d86b      	bhi.n	8002d70 <HAL_TIM_ConfigClockSource+0x170>
 8002c98:	2b20      	cmp	r3, #32
 8002c9a:	d060      	beq.n	8002d5e <HAL_TIM_ConfigClockSource+0x15e>
 8002c9c:	2b20      	cmp	r3, #32
 8002c9e:	d867      	bhi.n	8002d70 <HAL_TIM_ConfigClockSource+0x170>
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d05c      	beq.n	8002d5e <HAL_TIM_ConfigClockSource+0x15e>
 8002ca4:	2b10      	cmp	r3, #16
 8002ca6:	d05a      	beq.n	8002d5e <HAL_TIM_ConfigClockSource+0x15e>
 8002ca8:	e062      	b.n	8002d70 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002cba:	f000 fd79 	bl	80037b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ccc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68ba      	ldr	r2, [r7, #8]
 8002cd4:	609a      	str	r2, [r3, #8]
      break;
 8002cd6:	e04f      	b.n	8002d78 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ce8:	f000 fd62 	bl	80037b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	689a      	ldr	r2, [r3, #8]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cfa:	609a      	str	r2, [r3, #8]
      break;
 8002cfc:	e03c      	b.n	8002d78 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	f000 fc20 	bl	8003550 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2150      	movs	r1, #80	; 0x50
 8002d16:	4618      	mov	r0, r3
 8002d18:	f000 fd2f 	bl	800377a <TIM_ITRx_SetConfig>
      break;
 8002d1c:	e02c      	b.n	8002d78 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	f000 fc7c 	bl	8003628 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2160      	movs	r1, #96	; 0x60
 8002d36:	4618      	mov	r0, r3
 8002d38:	f000 fd1f 	bl	800377a <TIM_ITRx_SetConfig>
      break;
 8002d3c:	e01c      	b.n	8002d78 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	f000 fc00 	bl	8003550 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2140      	movs	r1, #64	; 0x40
 8002d56:	4618      	mov	r0, r3
 8002d58:	f000 fd0f 	bl	800377a <TIM_ITRx_SetConfig>
      break;
 8002d5c:	e00c      	b.n	8002d78 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4619      	mov	r1, r3
 8002d68:	4610      	mov	r0, r2
 8002d6a:	f000 fd06 	bl	800377a <TIM_ITRx_SetConfig>
      break;
 8002d6e:	e003      	b.n	8002d78 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	73fb      	strb	r3, [r7, #15]
      break;
 8002d74:	e000      	b.n	8002d78 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002d76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3710      	adds	r7, #16
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
	...

08002d94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4a40      	ldr	r2, [pc, #256]	; (8002ea8 <TIM_Base_SetConfig+0x114>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d013      	beq.n	8002dd4 <TIM_Base_SetConfig+0x40>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002db2:	d00f      	beq.n	8002dd4 <TIM_Base_SetConfig+0x40>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4a3d      	ldr	r2, [pc, #244]	; (8002eac <TIM_Base_SetConfig+0x118>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d00b      	beq.n	8002dd4 <TIM_Base_SetConfig+0x40>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a3c      	ldr	r2, [pc, #240]	; (8002eb0 <TIM_Base_SetConfig+0x11c>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d007      	beq.n	8002dd4 <TIM_Base_SetConfig+0x40>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4a3b      	ldr	r2, [pc, #236]	; (8002eb4 <TIM_Base_SetConfig+0x120>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d003      	beq.n	8002dd4 <TIM_Base_SetConfig+0x40>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4a3a      	ldr	r2, [pc, #232]	; (8002eb8 <TIM_Base_SetConfig+0x124>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d108      	bne.n	8002de6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	68fa      	ldr	r2, [r7, #12]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a2f      	ldr	r2, [pc, #188]	; (8002ea8 <TIM_Base_SetConfig+0x114>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d01f      	beq.n	8002e2e <TIM_Base_SetConfig+0x9a>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002df4:	d01b      	beq.n	8002e2e <TIM_Base_SetConfig+0x9a>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a2c      	ldr	r2, [pc, #176]	; (8002eac <TIM_Base_SetConfig+0x118>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d017      	beq.n	8002e2e <TIM_Base_SetConfig+0x9a>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a2b      	ldr	r2, [pc, #172]	; (8002eb0 <TIM_Base_SetConfig+0x11c>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d013      	beq.n	8002e2e <TIM_Base_SetConfig+0x9a>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a2a      	ldr	r2, [pc, #168]	; (8002eb4 <TIM_Base_SetConfig+0x120>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d00f      	beq.n	8002e2e <TIM_Base_SetConfig+0x9a>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a29      	ldr	r2, [pc, #164]	; (8002eb8 <TIM_Base_SetConfig+0x124>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d00b      	beq.n	8002e2e <TIM_Base_SetConfig+0x9a>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a28      	ldr	r2, [pc, #160]	; (8002ebc <TIM_Base_SetConfig+0x128>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d007      	beq.n	8002e2e <TIM_Base_SetConfig+0x9a>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a27      	ldr	r2, [pc, #156]	; (8002ec0 <TIM_Base_SetConfig+0x12c>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d003      	beq.n	8002e2e <TIM_Base_SetConfig+0x9a>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a26      	ldr	r2, [pc, #152]	; (8002ec4 <TIM_Base_SetConfig+0x130>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d108      	bne.n	8002e40 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	689a      	ldr	r2, [r3, #8]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a10      	ldr	r2, [pc, #64]	; (8002ea8 <TIM_Base_SetConfig+0x114>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d00f      	beq.n	8002e8c <TIM_Base_SetConfig+0xf8>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a12      	ldr	r2, [pc, #72]	; (8002eb8 <TIM_Base_SetConfig+0x124>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d00b      	beq.n	8002e8c <TIM_Base_SetConfig+0xf8>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4a11      	ldr	r2, [pc, #68]	; (8002ebc <TIM_Base_SetConfig+0x128>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d007      	beq.n	8002e8c <TIM_Base_SetConfig+0xf8>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4a10      	ldr	r2, [pc, #64]	; (8002ec0 <TIM_Base_SetConfig+0x12c>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d003      	beq.n	8002e8c <TIM_Base_SetConfig+0xf8>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4a0f      	ldr	r2, [pc, #60]	; (8002ec4 <TIM_Base_SetConfig+0x130>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d103      	bne.n	8002e94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	691a      	ldr	r2, [r3, #16]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	615a      	str	r2, [r3, #20]
}
 8002e9a:	bf00      	nop
 8002e9c:	3714      	adds	r7, #20
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	40012c00 	.word	0x40012c00
 8002eac:	40000400 	.word	0x40000400
 8002eb0:	40000800 	.word	0x40000800
 8002eb4:	40000c00 	.word	0x40000c00
 8002eb8:	40013400 	.word	0x40013400
 8002ebc:	40014000 	.word	0x40014000
 8002ec0:	40014400 	.word	0x40014400
 8002ec4:	40014800 	.word	0x40014800

08002ec8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b087      	sub	sp, #28
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
 8002ed6:	f023 0201 	bic.w	r2, r3, #1
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002efa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f023 0303 	bic.w	r3, r3, #3
 8002f02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	f023 0302 	bic.w	r3, r3, #2
 8002f14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	4a2c      	ldr	r2, [pc, #176]	; (8002fd4 <TIM_OC1_SetConfig+0x10c>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d00f      	beq.n	8002f48 <TIM_OC1_SetConfig+0x80>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4a2b      	ldr	r2, [pc, #172]	; (8002fd8 <TIM_OC1_SetConfig+0x110>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d00b      	beq.n	8002f48 <TIM_OC1_SetConfig+0x80>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4a2a      	ldr	r2, [pc, #168]	; (8002fdc <TIM_OC1_SetConfig+0x114>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d007      	beq.n	8002f48 <TIM_OC1_SetConfig+0x80>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4a29      	ldr	r2, [pc, #164]	; (8002fe0 <TIM_OC1_SetConfig+0x118>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d003      	beq.n	8002f48 <TIM_OC1_SetConfig+0x80>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4a28      	ldr	r2, [pc, #160]	; (8002fe4 <TIM_OC1_SetConfig+0x11c>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d10c      	bne.n	8002f62 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	f023 0308 	bic.w	r3, r3, #8
 8002f4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	697a      	ldr	r2, [r7, #20]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	f023 0304 	bic.w	r3, r3, #4
 8002f60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a1b      	ldr	r2, [pc, #108]	; (8002fd4 <TIM_OC1_SetConfig+0x10c>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d00f      	beq.n	8002f8a <TIM_OC1_SetConfig+0xc2>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a1a      	ldr	r2, [pc, #104]	; (8002fd8 <TIM_OC1_SetConfig+0x110>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d00b      	beq.n	8002f8a <TIM_OC1_SetConfig+0xc2>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a19      	ldr	r2, [pc, #100]	; (8002fdc <TIM_OC1_SetConfig+0x114>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d007      	beq.n	8002f8a <TIM_OC1_SetConfig+0xc2>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a18      	ldr	r2, [pc, #96]	; (8002fe0 <TIM_OC1_SetConfig+0x118>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d003      	beq.n	8002f8a <TIM_OC1_SetConfig+0xc2>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a17      	ldr	r2, [pc, #92]	; (8002fe4 <TIM_OC1_SetConfig+0x11c>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d111      	bne.n	8002fae <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	693a      	ldr	r2, [r7, #16]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	693a      	ldr	r2, [r7, #16]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	693a      	ldr	r2, [r7, #16]
 8002fb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	685a      	ldr	r2, [r3, #4]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	697a      	ldr	r2, [r7, #20]
 8002fc6:	621a      	str	r2, [r3, #32]
}
 8002fc8:	bf00      	nop
 8002fca:	371c      	adds	r7, #28
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr
 8002fd4:	40012c00 	.word	0x40012c00
 8002fd8:	40013400 	.word	0x40013400
 8002fdc:	40014000 	.word	0x40014000
 8002fe0:	40014400 	.word	0x40014400
 8002fe4:	40014800 	.word	0x40014800

08002fe8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b087      	sub	sp, #28
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a1b      	ldr	r3, [r3, #32]
 8002ff6:	f023 0210 	bic.w	r2, r3, #16
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a1b      	ldr	r3, [r3, #32]
 8003002:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003016:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800301a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003022:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	021b      	lsls	r3, r3, #8
 800302a:	68fa      	ldr	r2, [r7, #12]
 800302c:	4313      	orrs	r3, r2
 800302e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	f023 0320 	bic.w	r3, r3, #32
 8003036:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	011b      	lsls	r3, r3, #4
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	4313      	orrs	r3, r2
 8003042:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4a28      	ldr	r2, [pc, #160]	; (80030e8 <TIM_OC2_SetConfig+0x100>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d003      	beq.n	8003054 <TIM_OC2_SetConfig+0x6c>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a27      	ldr	r2, [pc, #156]	; (80030ec <TIM_OC2_SetConfig+0x104>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d10d      	bne.n	8003070 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800305a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	011b      	lsls	r3, r3, #4
 8003062:	697a      	ldr	r2, [r7, #20]
 8003064:	4313      	orrs	r3, r2
 8003066:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800306e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a1d      	ldr	r2, [pc, #116]	; (80030e8 <TIM_OC2_SetConfig+0x100>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d00f      	beq.n	8003098 <TIM_OC2_SetConfig+0xb0>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a1c      	ldr	r2, [pc, #112]	; (80030ec <TIM_OC2_SetConfig+0x104>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d00b      	beq.n	8003098 <TIM_OC2_SetConfig+0xb0>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4a1b      	ldr	r2, [pc, #108]	; (80030f0 <TIM_OC2_SetConfig+0x108>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d007      	beq.n	8003098 <TIM_OC2_SetConfig+0xb0>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4a1a      	ldr	r2, [pc, #104]	; (80030f4 <TIM_OC2_SetConfig+0x10c>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d003      	beq.n	8003098 <TIM_OC2_SetConfig+0xb0>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4a19      	ldr	r2, [pc, #100]	; (80030f8 <TIM_OC2_SetConfig+0x110>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d113      	bne.n	80030c0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800309e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	695b      	ldr	r3, [r3, #20]
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	693a      	ldr	r2, [r7, #16]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	693a      	ldr	r2, [r7, #16]
 80030bc:	4313      	orrs	r3, r2
 80030be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	68fa      	ldr	r2, [r7, #12]
 80030ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685a      	ldr	r2, [r3, #4]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	697a      	ldr	r2, [r7, #20]
 80030d8:	621a      	str	r2, [r3, #32]
}
 80030da:	bf00      	nop
 80030dc:	371c      	adds	r7, #28
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	40012c00 	.word	0x40012c00
 80030ec:	40013400 	.word	0x40013400
 80030f0:	40014000 	.word	0x40014000
 80030f4:	40014400 	.word	0x40014400
 80030f8:	40014800 	.word	0x40014800

080030fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b087      	sub	sp, #28
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a1b      	ldr	r3, [r3, #32]
 8003116:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	69db      	ldr	r3, [r3, #28]
 8003122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800312a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800312e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f023 0303 	bic.w	r3, r3, #3
 8003136:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	4313      	orrs	r3, r2
 8003140:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003148:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	021b      	lsls	r3, r3, #8
 8003150:	697a      	ldr	r2, [r7, #20]
 8003152:	4313      	orrs	r3, r2
 8003154:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a27      	ldr	r2, [pc, #156]	; (80031f8 <TIM_OC3_SetConfig+0xfc>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d003      	beq.n	8003166 <TIM_OC3_SetConfig+0x6a>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a26      	ldr	r2, [pc, #152]	; (80031fc <TIM_OC3_SetConfig+0x100>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d10d      	bne.n	8003182 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800316c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	021b      	lsls	r3, r3, #8
 8003174:	697a      	ldr	r2, [r7, #20]
 8003176:	4313      	orrs	r3, r2
 8003178:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003180:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a1c      	ldr	r2, [pc, #112]	; (80031f8 <TIM_OC3_SetConfig+0xfc>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d00f      	beq.n	80031aa <TIM_OC3_SetConfig+0xae>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a1b      	ldr	r2, [pc, #108]	; (80031fc <TIM_OC3_SetConfig+0x100>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d00b      	beq.n	80031aa <TIM_OC3_SetConfig+0xae>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a1a      	ldr	r2, [pc, #104]	; (8003200 <TIM_OC3_SetConfig+0x104>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d007      	beq.n	80031aa <TIM_OC3_SetConfig+0xae>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a19      	ldr	r2, [pc, #100]	; (8003204 <TIM_OC3_SetConfig+0x108>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d003      	beq.n	80031aa <TIM_OC3_SetConfig+0xae>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a18      	ldr	r2, [pc, #96]	; (8003208 <TIM_OC3_SetConfig+0x10c>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d113      	bne.n	80031d2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80031b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80031b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	011b      	lsls	r3, r3, #4
 80031c0:	693a      	ldr	r2, [r7, #16]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	011b      	lsls	r3, r3, #4
 80031cc:	693a      	ldr	r2, [r7, #16]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	693a      	ldr	r2, [r7, #16]
 80031d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	68fa      	ldr	r2, [r7, #12]
 80031dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685a      	ldr	r2, [r3, #4]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	697a      	ldr	r2, [r7, #20]
 80031ea:	621a      	str	r2, [r3, #32]
}
 80031ec:	bf00      	nop
 80031ee:	371c      	adds	r7, #28
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr
 80031f8:	40012c00 	.word	0x40012c00
 80031fc:	40013400 	.word	0x40013400
 8003200:	40014000 	.word	0x40014000
 8003204:	40014400 	.word	0x40014400
 8003208:	40014800 	.word	0x40014800

0800320c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800320c:	b480      	push	{r7}
 800320e:	b087      	sub	sp, #28
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	69db      	ldr	r3, [r3, #28]
 8003232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800323a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800323e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003246:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	021b      	lsls	r3, r3, #8
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	4313      	orrs	r3, r2
 8003252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800325a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	031b      	lsls	r3, r3, #12
 8003262:	693a      	ldr	r2, [r7, #16]
 8003264:	4313      	orrs	r3, r2
 8003266:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a18      	ldr	r2, [pc, #96]	; (80032cc <TIM_OC4_SetConfig+0xc0>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d00f      	beq.n	8003290 <TIM_OC4_SetConfig+0x84>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a17      	ldr	r2, [pc, #92]	; (80032d0 <TIM_OC4_SetConfig+0xc4>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d00b      	beq.n	8003290 <TIM_OC4_SetConfig+0x84>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a16      	ldr	r2, [pc, #88]	; (80032d4 <TIM_OC4_SetConfig+0xc8>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d007      	beq.n	8003290 <TIM_OC4_SetConfig+0x84>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a15      	ldr	r2, [pc, #84]	; (80032d8 <TIM_OC4_SetConfig+0xcc>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d003      	beq.n	8003290 <TIM_OC4_SetConfig+0x84>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a14      	ldr	r2, [pc, #80]	; (80032dc <TIM_OC4_SetConfig+0xd0>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d109      	bne.n	80032a4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003296:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	019b      	lsls	r3, r3, #6
 800329e:	697a      	ldr	r2, [r7, #20]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	697a      	ldr	r2, [r7, #20]
 80032a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685a      	ldr	r2, [r3, #4]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	621a      	str	r2, [r3, #32]
}
 80032be:	bf00      	nop
 80032c0:	371c      	adds	r7, #28
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	40012c00 	.word	0x40012c00
 80032d0:	40013400 	.word	0x40013400
 80032d4:	40014000 	.word	0x40014000
 80032d8:	40014400 	.word	0x40014400
 80032dc:	40014800 	.word	0x40014800

080032e0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b087      	sub	sp, #28
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a1b      	ldr	r3, [r3, #32]
 80032ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a1b      	ldr	r3, [r3, #32]
 80032fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800330e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003312:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	4313      	orrs	r3, r2
 800331c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003324:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	041b      	lsls	r3, r3, #16
 800332c:	693a      	ldr	r2, [r7, #16]
 800332e:	4313      	orrs	r3, r2
 8003330:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a17      	ldr	r2, [pc, #92]	; (8003394 <TIM_OC5_SetConfig+0xb4>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d00f      	beq.n	800335a <TIM_OC5_SetConfig+0x7a>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a16      	ldr	r2, [pc, #88]	; (8003398 <TIM_OC5_SetConfig+0xb8>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d00b      	beq.n	800335a <TIM_OC5_SetConfig+0x7a>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a15      	ldr	r2, [pc, #84]	; (800339c <TIM_OC5_SetConfig+0xbc>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d007      	beq.n	800335a <TIM_OC5_SetConfig+0x7a>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a14      	ldr	r2, [pc, #80]	; (80033a0 <TIM_OC5_SetConfig+0xc0>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d003      	beq.n	800335a <TIM_OC5_SetConfig+0x7a>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a13      	ldr	r2, [pc, #76]	; (80033a4 <TIM_OC5_SetConfig+0xc4>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d109      	bne.n	800336e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003360:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	021b      	lsls	r3, r3, #8
 8003368:	697a      	ldr	r2, [r7, #20]
 800336a:	4313      	orrs	r3, r2
 800336c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	697a      	ldr	r2, [r7, #20]
 8003372:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	685a      	ldr	r2, [r3, #4]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	621a      	str	r2, [r3, #32]
}
 8003388:	bf00      	nop
 800338a:	371c      	adds	r7, #28
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr
 8003394:	40012c00 	.word	0x40012c00
 8003398:	40013400 	.word	0x40013400
 800339c:	40014000 	.word	0x40014000
 80033a0:	40014400 	.word	0x40014400
 80033a4:	40014800 	.word	0x40014800

080033a8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b087      	sub	sp, #28
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a1b      	ldr	r3, [r3, #32]
 80033b6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a1b      	ldr	r3, [r3, #32]
 80033c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	021b      	lsls	r3, r3, #8
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80033ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	051b      	lsls	r3, r3, #20
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4a18      	ldr	r2, [pc, #96]	; (8003460 <TIM_OC6_SetConfig+0xb8>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d00f      	beq.n	8003424 <TIM_OC6_SetConfig+0x7c>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a17      	ldr	r2, [pc, #92]	; (8003464 <TIM_OC6_SetConfig+0xbc>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d00b      	beq.n	8003424 <TIM_OC6_SetConfig+0x7c>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a16      	ldr	r2, [pc, #88]	; (8003468 <TIM_OC6_SetConfig+0xc0>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d007      	beq.n	8003424 <TIM_OC6_SetConfig+0x7c>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4a15      	ldr	r2, [pc, #84]	; (800346c <TIM_OC6_SetConfig+0xc4>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d003      	beq.n	8003424 <TIM_OC6_SetConfig+0x7c>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a14      	ldr	r2, [pc, #80]	; (8003470 <TIM_OC6_SetConfig+0xc8>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d109      	bne.n	8003438 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800342a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	695b      	ldr	r3, [r3, #20]
 8003430:	029b      	lsls	r3, r3, #10
 8003432:	697a      	ldr	r2, [r7, #20]
 8003434:	4313      	orrs	r3, r2
 8003436:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	697a      	ldr	r2, [r7, #20]
 800343c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	685a      	ldr	r2, [r3, #4]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	621a      	str	r2, [r3, #32]
}
 8003452:	bf00      	nop
 8003454:	371c      	adds	r7, #28
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	40012c00 	.word	0x40012c00
 8003464:	40013400 	.word	0x40013400
 8003468:	40014000 	.word	0x40014000
 800346c:	40014400 	.word	0x40014400
 8003470:	40014800 	.word	0x40014800

08003474 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003474:	b480      	push	{r7}
 8003476:	b087      	sub	sp, #28
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
 8003480:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	f023 0201 	bic.w	r2, r3, #1
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6a1b      	ldr	r3, [r3, #32]
 8003498:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	4a26      	ldr	r2, [pc, #152]	; (8003538 <TIM_TI1_SetConfig+0xc4>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d017      	beq.n	80034d2 <TIM_TI1_SetConfig+0x5e>
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034a8:	d013      	beq.n	80034d2 <TIM_TI1_SetConfig+0x5e>
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	4a23      	ldr	r2, [pc, #140]	; (800353c <TIM_TI1_SetConfig+0xc8>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d00f      	beq.n	80034d2 <TIM_TI1_SetConfig+0x5e>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	4a22      	ldr	r2, [pc, #136]	; (8003540 <TIM_TI1_SetConfig+0xcc>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d00b      	beq.n	80034d2 <TIM_TI1_SetConfig+0x5e>
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	4a21      	ldr	r2, [pc, #132]	; (8003544 <TIM_TI1_SetConfig+0xd0>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d007      	beq.n	80034d2 <TIM_TI1_SetConfig+0x5e>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	4a20      	ldr	r2, [pc, #128]	; (8003548 <TIM_TI1_SetConfig+0xd4>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d003      	beq.n	80034d2 <TIM_TI1_SetConfig+0x5e>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	4a1f      	ldr	r2, [pc, #124]	; (800354c <TIM_TI1_SetConfig+0xd8>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d101      	bne.n	80034d6 <TIM_TI1_SetConfig+0x62>
 80034d2:	2301      	movs	r3, #1
 80034d4:	e000      	b.n	80034d8 <TIM_TI1_SetConfig+0x64>
 80034d6:	2300      	movs	r3, #0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d008      	beq.n	80034ee <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	f023 0303 	bic.w	r3, r3, #3
 80034e2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80034e4:	697a      	ldr	r2, [r7, #20]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	617b      	str	r3, [r7, #20]
 80034ec:	e003      	b.n	80034f6 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	f043 0301 	orr.w	r3, r3, #1
 80034f4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	011b      	lsls	r3, r3, #4
 8003502:	b2db      	uxtb	r3, r3
 8003504:	697a      	ldr	r2, [r7, #20]
 8003506:	4313      	orrs	r3, r2
 8003508:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	f023 030a 	bic.w	r3, r3, #10
 8003510:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	f003 030a 	and.w	r3, r3, #10
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	4313      	orrs	r3, r2
 800351c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	693a      	ldr	r2, [r7, #16]
 8003528:	621a      	str	r2, [r3, #32]
}
 800352a:	bf00      	nop
 800352c:	371c      	adds	r7, #28
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	40012c00 	.word	0x40012c00
 800353c:	40000400 	.word	0x40000400
 8003540:	40000800 	.word	0x40000800
 8003544:	40000c00 	.word	0x40000c00
 8003548:	40013400 	.word	0x40013400
 800354c:	40014000 	.word	0x40014000

08003550 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003550:	b480      	push	{r7}
 8003552:	b087      	sub	sp, #28
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6a1b      	ldr	r3, [r3, #32]
 8003566:	f023 0201 	bic.w	r2, r3, #1
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800357a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	011b      	lsls	r3, r3, #4
 8003580:	693a      	ldr	r2, [r7, #16]
 8003582:	4313      	orrs	r3, r2
 8003584:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	f023 030a 	bic.w	r3, r3, #10
 800358c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	4313      	orrs	r3, r2
 8003594:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	693a      	ldr	r2, [r7, #16]
 800359a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	621a      	str	r2, [r3, #32]
}
 80035a2:	bf00      	nop
 80035a4:	371c      	adds	r7, #28
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr

080035ae <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80035ae:	b480      	push	{r7}
 80035b0:	b087      	sub	sp, #28
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	60f8      	str	r0, [r7, #12]
 80035b6:	60b9      	str	r1, [r7, #8]
 80035b8:	607a      	str	r2, [r7, #4]
 80035ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6a1b      	ldr	r3, [r3, #32]
 80035c0:	f023 0210 	bic.w	r2, r3, #16
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	699b      	ldr	r3, [r3, #24]
 80035cc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6a1b      	ldr	r3, [r3, #32]
 80035d2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035da:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	021b      	lsls	r3, r3, #8
 80035e0:	697a      	ldr	r2, [r7, #20]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80035ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	031b      	lsls	r3, r3, #12
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	697a      	ldr	r2, [r7, #20]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003600:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	011b      	lsls	r3, r3, #4
 8003606:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	4313      	orrs	r3, r2
 800360e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	697a      	ldr	r2, [r7, #20]
 8003614:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	693a      	ldr	r2, [r7, #16]
 800361a:	621a      	str	r2, [r3, #32]
}
 800361c:	bf00      	nop
 800361e:	371c      	adds	r7, #28
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003628:	b480      	push	{r7}
 800362a:	b087      	sub	sp, #28
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6a1b      	ldr	r3, [r3, #32]
 8003638:	f023 0210 	bic.w	r2, r3, #16
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	699b      	ldr	r3, [r3, #24]
 8003644:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6a1b      	ldr	r3, [r3, #32]
 800364a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003652:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	031b      	lsls	r3, r3, #12
 8003658:	697a      	ldr	r2, [r7, #20]
 800365a:	4313      	orrs	r3, r2
 800365c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003664:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	011b      	lsls	r3, r3, #4
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	4313      	orrs	r3, r2
 800366e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	697a      	ldr	r2, [r7, #20]
 8003674:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	693a      	ldr	r2, [r7, #16]
 800367a:	621a      	str	r2, [r3, #32]
}
 800367c:	bf00      	nop
 800367e:	371c      	adds	r7, #28
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003688:	b480      	push	{r7}
 800368a:	b087      	sub	sp, #28
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	607a      	str	r2, [r7, #4]
 8003694:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6a1b      	ldr	r3, [r3, #32]
 800369a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	69db      	ldr	r3, [r3, #28]
 80036a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6a1b      	ldr	r3, [r3, #32]
 80036ac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	f023 0303 	bic.w	r3, r3, #3
 80036b4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80036b6:	697a      	ldr	r2, [r7, #20]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036c4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	011b      	lsls	r3, r3, #4
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	697a      	ldr	r2, [r7, #20]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80036d8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	021b      	lsls	r3, r3, #8
 80036de:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	697a      	ldr	r2, [r7, #20]
 80036ec:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	693a      	ldr	r2, [r7, #16]
 80036f2:	621a      	str	r2, [r3, #32]
}
 80036f4:	bf00      	nop
 80036f6:	371c      	adds	r7, #28
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003700:	b480      	push	{r7}
 8003702:	b087      	sub	sp, #28
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	607a      	str	r2, [r7, #4]
 800370c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6a1b      	ldr	r3, [r3, #32]
 8003712:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	69db      	ldr	r3, [r3, #28]
 800371e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6a1b      	ldr	r3, [r3, #32]
 8003724:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800372c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	021b      	lsls	r3, r3, #8
 8003732:	697a      	ldr	r2, [r7, #20]
 8003734:	4313      	orrs	r3, r2
 8003736:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800373e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	031b      	lsls	r3, r3, #12
 8003744:	b29b      	uxth	r3, r3
 8003746:	697a      	ldr	r2, [r7, #20]
 8003748:	4313      	orrs	r3, r2
 800374a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003752:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	031b      	lsls	r3, r3, #12
 8003758:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800375c:	693a      	ldr	r2, [r7, #16]
 800375e:	4313      	orrs	r3, r2
 8003760:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	697a      	ldr	r2, [r7, #20]
 8003766:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	621a      	str	r2, [r3, #32]
}
 800376e:	bf00      	nop
 8003770:	371c      	adds	r7, #28
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr

0800377a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800377a:	b480      	push	{r7}
 800377c:	b085      	sub	sp, #20
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
 8003782:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003790:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003792:	683a      	ldr	r2, [r7, #0]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	4313      	orrs	r3, r2
 8003798:	f043 0307 	orr.w	r3, r3, #7
 800379c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	68fa      	ldr	r2, [r7, #12]
 80037a2:	609a      	str	r2, [r3, #8]
}
 80037a4:	bf00      	nop
 80037a6:	3714      	adds	r7, #20
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b087      	sub	sp, #28
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	607a      	str	r2, [r7, #4]
 80037bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	021a      	lsls	r2, r3, #8
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	431a      	orrs	r2, r3
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	697a      	ldr	r2, [r7, #20]
 80037da:	4313      	orrs	r3, r2
 80037dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	697a      	ldr	r2, [r7, #20]
 80037e2:	609a      	str	r2, [r3, #8]
}
 80037e4:	bf00      	nop
 80037e6:	371c      	adds	r7, #28
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b087      	sub	sp, #28
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	f003 031f 	and.w	r3, r3, #31
 8003802:	2201      	movs	r2, #1
 8003804:	fa02 f303 	lsl.w	r3, r2, r3
 8003808:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6a1a      	ldr	r2, [r3, #32]
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	43db      	mvns	r3, r3
 8003812:	401a      	ands	r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6a1a      	ldr	r2, [r3, #32]
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	f003 031f 	and.w	r3, r3, #31
 8003822:	6879      	ldr	r1, [r7, #4]
 8003824:	fa01 f303 	lsl.w	r3, r1, r3
 8003828:	431a      	orrs	r2, r3
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	621a      	str	r2, [r3, #32]
}
 800382e:	bf00      	nop
 8003830:	371c      	adds	r7, #28
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
	...

0800383c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d109      	bne.n	8003860 <HAL_TIMEx_PWMN_Start+0x24>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003852:	b2db      	uxtb	r3, r3
 8003854:	2b01      	cmp	r3, #1
 8003856:	bf14      	ite	ne
 8003858:	2301      	movne	r3, #1
 800385a:	2300      	moveq	r3, #0
 800385c:	b2db      	uxtb	r3, r3
 800385e:	e022      	b.n	80038a6 <HAL_TIMEx_PWMN_Start+0x6a>
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	2b04      	cmp	r3, #4
 8003864:	d109      	bne.n	800387a <HAL_TIMEx_PWMN_Start+0x3e>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800386c:	b2db      	uxtb	r3, r3
 800386e:	2b01      	cmp	r3, #1
 8003870:	bf14      	ite	ne
 8003872:	2301      	movne	r3, #1
 8003874:	2300      	moveq	r3, #0
 8003876:	b2db      	uxtb	r3, r3
 8003878:	e015      	b.n	80038a6 <HAL_TIMEx_PWMN_Start+0x6a>
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	2b08      	cmp	r3, #8
 800387e:	d109      	bne.n	8003894 <HAL_TIMEx_PWMN_Start+0x58>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003886:	b2db      	uxtb	r3, r3
 8003888:	2b01      	cmp	r3, #1
 800388a:	bf14      	ite	ne
 800388c:	2301      	movne	r3, #1
 800388e:	2300      	moveq	r3, #0
 8003890:	b2db      	uxtb	r3, r3
 8003892:	e008      	b.n	80038a6 <HAL_TIMEx_PWMN_Start+0x6a>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800389a:	b2db      	uxtb	r3, r3
 800389c:	2b01      	cmp	r3, #1
 800389e:	bf14      	ite	ne
 80038a0:	2301      	movne	r3, #1
 80038a2:	2300      	moveq	r3, #0
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d001      	beq.n	80038ae <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e06e      	b.n	800398c <HAL_TIMEx_PWMN_Start+0x150>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d104      	bne.n	80038be <HAL_TIMEx_PWMN_Start+0x82>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2202      	movs	r2, #2
 80038b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038bc:	e013      	b.n	80038e6 <HAL_TIMEx_PWMN_Start+0xaa>
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	2b04      	cmp	r3, #4
 80038c2:	d104      	bne.n	80038ce <HAL_TIMEx_PWMN_Start+0x92>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2202      	movs	r2, #2
 80038c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038cc:	e00b      	b.n	80038e6 <HAL_TIMEx_PWMN_Start+0xaa>
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	2b08      	cmp	r3, #8
 80038d2:	d104      	bne.n	80038de <HAL_TIMEx_PWMN_Start+0xa2>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2202      	movs	r2, #2
 80038d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80038dc:	e003      	b.n	80038e6 <HAL_TIMEx_PWMN_Start+0xaa>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2202      	movs	r2, #2
 80038e2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2204      	movs	r2, #4
 80038ec:	6839      	ldr	r1, [r7, #0]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f000 f8e6 	bl	8003ac0 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003902:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a22      	ldr	r2, [pc, #136]	; (8003994 <HAL_TIMEx_PWMN_Start+0x158>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d01d      	beq.n	800394a <HAL_TIMEx_PWMN_Start+0x10e>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003916:	d018      	beq.n	800394a <HAL_TIMEx_PWMN_Start+0x10e>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a1e      	ldr	r2, [pc, #120]	; (8003998 <HAL_TIMEx_PWMN_Start+0x15c>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d013      	beq.n	800394a <HAL_TIMEx_PWMN_Start+0x10e>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a1d      	ldr	r2, [pc, #116]	; (800399c <HAL_TIMEx_PWMN_Start+0x160>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d00e      	beq.n	800394a <HAL_TIMEx_PWMN_Start+0x10e>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a1b      	ldr	r2, [pc, #108]	; (80039a0 <HAL_TIMEx_PWMN_Start+0x164>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d009      	beq.n	800394a <HAL_TIMEx_PWMN_Start+0x10e>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a1a      	ldr	r2, [pc, #104]	; (80039a4 <HAL_TIMEx_PWMN_Start+0x168>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d004      	beq.n	800394a <HAL_TIMEx_PWMN_Start+0x10e>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a18      	ldr	r2, [pc, #96]	; (80039a8 <HAL_TIMEx_PWMN_Start+0x16c>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d115      	bne.n	8003976 <HAL_TIMEx_PWMN_Start+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	689a      	ldr	r2, [r3, #8]
 8003950:	4b16      	ldr	r3, [pc, #88]	; (80039ac <HAL_TIMEx_PWMN_Start+0x170>)
 8003952:	4013      	ands	r3, r2
 8003954:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2b06      	cmp	r3, #6
 800395a:	d015      	beq.n	8003988 <HAL_TIMEx_PWMN_Start+0x14c>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003962:	d011      	beq.n	8003988 <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f042 0201 	orr.w	r2, r2, #1
 8003972:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003974:	e008      	b.n	8003988 <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f042 0201 	orr.w	r2, r2, #1
 8003984:	601a      	str	r2, [r3, #0]
 8003986:	e000      	b.n	800398a <HAL_TIMEx_PWMN_Start+0x14e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003988:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	3710      	adds	r7, #16
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	40012c00 	.word	0x40012c00
 8003998:	40000400 	.word	0x40000400
 800399c:	40000800 	.word	0x40000800
 80039a0:	40000c00 	.word	0x40000c00
 80039a4:	40013400 	.word	0x40013400
 80039a8:	40014000 	.word	0x40014000
 80039ac:	00010007 	.word	0x00010007

080039b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b085      	sub	sp, #20
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d101      	bne.n	80039c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039c4:	2302      	movs	r3, #2
 80039c6:	e068      	b.n	8003a9a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2202      	movs	r2, #2
 80039d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a2e      	ldr	r2, [pc, #184]	; (8003aa8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d004      	beq.n	80039fc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a2d      	ldr	r2, [pc, #180]	; (8003aac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d108      	bne.n	8003a0e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003a02:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a14:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68fa      	ldr	r2, [r7, #12]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68fa      	ldr	r2, [r7, #12]
 8003a26:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a1e      	ldr	r2, [pc, #120]	; (8003aa8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d01d      	beq.n	8003a6e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a3a:	d018      	beq.n	8003a6e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a1b      	ldr	r2, [pc, #108]	; (8003ab0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d013      	beq.n	8003a6e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a1a      	ldr	r2, [pc, #104]	; (8003ab4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d00e      	beq.n	8003a6e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a18      	ldr	r2, [pc, #96]	; (8003ab8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d009      	beq.n	8003a6e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a13      	ldr	r2, [pc, #76]	; (8003aac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d004      	beq.n	8003a6e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a14      	ldr	r2, [pc, #80]	; (8003abc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d10c      	bne.n	8003a88 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	68ba      	ldr	r2, [r7, #8]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68ba      	ldr	r2, [r7, #8]
 8003a86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3714      	adds	r7, #20
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	40012c00 	.word	0x40012c00
 8003aac:	40013400 	.word	0x40013400
 8003ab0:	40000400 	.word	0x40000400
 8003ab4:	40000800 	.word	0x40000800
 8003ab8:	40000c00 	.word	0x40000c00
 8003abc:	40014000 	.word	0x40014000

08003ac0 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b087      	sub	sp, #28
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	f003 031f 	and.w	r3, r3, #31
 8003ad2:	2204      	movs	r2, #4
 8003ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6a1a      	ldr	r2, [r3, #32]
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	43db      	mvns	r3, r3
 8003ae2:	401a      	ands	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6a1a      	ldr	r2, [r3, #32]
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	f003 031f 	and.w	r3, r3, #31
 8003af2:	6879      	ldr	r1, [r7, #4]
 8003af4:	fa01 f303 	lsl.w	r3, r1, r3
 8003af8:	431a      	orrs	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	621a      	str	r2, [r3, #32]
}
 8003afe:	bf00      	nop
 8003b00:	371c      	adds	r7, #28
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr

08003b0a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	b082      	sub	sp, #8
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d101      	bne.n	8003b1c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e040      	b.n	8003b9e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d106      	bne.n	8003b32 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f002 f81b 	bl	8005b68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2224      	movs	r2, #36	; 0x24
 8003b36:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f022 0201 	bic.w	r2, r2, #1
 8003b46:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f000 fb85 	bl	8004258 <UART_SetConfig>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d101      	bne.n	8003b58 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e022      	b.n	8003b9e <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d002      	beq.n	8003b66 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f000 fe31 	bl	80047c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	685a      	ldr	r2, [r3, #4]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b74:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	689a      	ldr	r2, [r3, #8]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b84:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f042 0201 	orr.w	r2, r2, #1
 8003b94:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 feb8 	bl	800490c <UART_CheckIdleState>
 8003b9c:	4603      	mov	r3, r0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3708      	adds	r7, #8
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
	...

08003ba8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b08a      	sub	sp, #40	; 0x28
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bba:	2b20      	cmp	r3, #32
 8003bbc:	d142      	bne.n	8003c44 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d002      	beq.n	8003bca <HAL_UART_Receive_IT+0x22>
 8003bc4:	88fb      	ldrh	r3, [r7, #6]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d101      	bne.n	8003bce <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e03b      	b.n	8003c46 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d101      	bne.n	8003bdc <HAL_UART_Receive_IT+0x34>
 8003bd8:	2302      	movs	r3, #2
 8003bda:	e034      	b.n	8003c46 <HAL_UART_Receive_IT+0x9e>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2200      	movs	r2, #0
 8003be8:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a18      	ldr	r2, [pc, #96]	; (8003c50 <HAL_UART_Receive_IT+0xa8>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d01f      	beq.n	8003c34 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d018      	beq.n	8003c34 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	e853 3f00 	ldrex	r3, [r3]
 8003c0e:	613b      	str	r3, [r7, #16]
   return(result);
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c16:	627b      	str	r3, [r7, #36]	; 0x24
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c20:	623b      	str	r3, [r7, #32]
 8003c22:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c24:	69f9      	ldr	r1, [r7, #28]
 8003c26:	6a3a      	ldr	r2, [r7, #32]
 8003c28:	e841 2300 	strex	r3, r2, [r1]
 8003c2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d1e6      	bne.n	8003c02 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003c34:	88fb      	ldrh	r3, [r7, #6]
 8003c36:	461a      	mov	r2, r3
 8003c38:	68b9      	ldr	r1, [r7, #8]
 8003c3a:	68f8      	ldr	r0, [r7, #12]
 8003c3c:	f000 ff74 	bl	8004b28 <UART_Start_Receive_IT>
 8003c40:	4603      	mov	r3, r0
 8003c42:	e000      	b.n	8003c46 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003c44:	2302      	movs	r3, #2
  }
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3728      	adds	r7, #40	; 0x28
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	40008000 	.word	0x40008000

08003c54 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b0ba      	sub	sp, #232	; 0xe8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	69db      	ldr	r3, [r3, #28]
 8003c62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003c7a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003c7e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003c82:	4013      	ands	r3, r2
 8003c84:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003c88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d115      	bne.n	8003cbc <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003c90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c94:	f003 0320 	and.w	r3, r3, #32
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00f      	beq.n	8003cbc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003c9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ca0:	f003 0320 	and.w	r3, r3, #32
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d009      	beq.n	8003cbc <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	f000 82a6 	beq.w	80041fe <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	4798      	blx	r3
      }
      return;
 8003cba:	e2a0      	b.n	80041fe <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003cbc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	f000 8117 	beq.w	8003ef4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003cc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d106      	bne.n	8003ce0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003cd2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003cd6:	4b85      	ldr	r3, [pc, #532]	; (8003eec <HAL_UART_IRQHandler+0x298>)
 8003cd8:	4013      	ands	r3, r2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	f000 810a 	beq.w	8003ef4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003ce0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ce4:	f003 0301 	and.w	r3, r3, #1
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d011      	beq.n	8003d10 <HAL_UART_IRQHandler+0xbc>
 8003cec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00b      	beq.n	8003d10 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d06:	f043 0201 	orr.w	r2, r3, #1
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d14:	f003 0302 	and.w	r3, r3, #2
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d011      	beq.n	8003d40 <HAL_UART_IRQHandler+0xec>
 8003d1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d20:	f003 0301 	and.w	r3, r3, #1
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d00b      	beq.n	8003d40 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2202      	movs	r2, #2
 8003d2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d36:	f043 0204 	orr.w	r2, r3, #4
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d44:	f003 0304 	and.w	r3, r3, #4
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d011      	beq.n	8003d70 <HAL_UART_IRQHandler+0x11c>
 8003d4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d50:	f003 0301 	and.w	r3, r3, #1
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d00b      	beq.n	8003d70 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2204      	movs	r2, #4
 8003d5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d66:	f043 0202 	orr.w	r2, r3, #2
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003d70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d74:	f003 0308 	and.w	r3, r3, #8
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d017      	beq.n	8003dac <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003d7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d80:	f003 0320 	and.w	r3, r3, #32
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d105      	bne.n	8003d94 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003d88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d8c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00b      	beq.n	8003dac <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2208      	movs	r2, #8
 8003d9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003da2:	f043 0208 	orr.w	r2, r3, #8
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003dac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003db0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d012      	beq.n	8003dde <HAL_UART_IRQHandler+0x18a>
 8003db8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dbc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00c      	beq.n	8003dde <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003dcc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dd4:	f043 0220 	orr.w	r2, r3, #32
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	f000 820c 	beq.w	8004202 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003dea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dee:	f003 0320 	and.w	r3, r3, #32
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00d      	beq.n	8003e12 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003df6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dfa:	f003 0320 	and.w	r3, r3, #32
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d007      	beq.n	8003e12 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d003      	beq.n	8003e12 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e18:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e26:	2b40      	cmp	r3, #64	; 0x40
 8003e28:	d005      	beq.n	8003e36 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003e2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003e2e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d04f      	beq.n	8003ed6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 ff40 	bl	8004cbc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e46:	2b40      	cmp	r3, #64	; 0x40
 8003e48:	d141      	bne.n	8003ece <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	3308      	adds	r3, #8
 8003e50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e58:	e853 3f00 	ldrex	r3, [r3]
 8003e5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003e60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	3308      	adds	r3, #8
 8003e72:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003e76:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003e7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e7e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003e82:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003e86:	e841 2300 	strex	r3, r2, [r1]
 8003e8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003e8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1d9      	bne.n	8003e4a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d013      	beq.n	8003ec6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea2:	4a13      	ldr	r2, [pc, #76]	; (8003ef0 <HAL_UART_IRQHandler+0x29c>)
 8003ea4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f7fc fcf1 	bl	8000892 <HAL_DMA_Abort_IT>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d017      	beq.n	8003ee6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003ec0:	4610      	mov	r0, r2
 8003ec2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ec4:	e00f      	b.n	8003ee6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 f9b0 	bl	800422c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ecc:	e00b      	b.n	8003ee6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 f9ac 	bl	800422c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ed4:	e007      	b.n	8003ee6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 f9a8 	bl	800422c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003ee4:	e18d      	b.n	8004202 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ee6:	bf00      	nop
    return;
 8003ee8:	e18b      	b.n	8004202 <HAL_UART_IRQHandler+0x5ae>
 8003eea:	bf00      	nop
 8003eec:	04000120 	.word	0x04000120
 8003ef0:	08004d83 	.word	0x08004d83

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	f040 8146 	bne.w	800418a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003efe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f02:	f003 0310 	and.w	r3, r3, #16
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	f000 813f 	beq.w	800418a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003f0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f10:	f003 0310 	and.w	r3, r3, #16
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f000 8138 	beq.w	800418a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2210      	movs	r2, #16
 8003f20:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f2c:	2b40      	cmp	r3, #64	; 0x40
 8003f2e:	f040 80b4 	bne.w	800409a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003f3e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	f000 815f 	beq.w	8004206 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003f4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f52:	429a      	cmp	r2, r3
 8003f54:	f080 8157 	bcs.w	8004206 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f5e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0320 	and.w	r3, r3, #32
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	f040 8085 	bne.w	800407e <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f80:	e853 3f00 	ldrex	r3, [r3]
 8003f84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003f88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	461a      	mov	r2, r3
 8003f9a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003f9e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003fa2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003faa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003fae:	e841 2300 	strex	r3, r2, [r1]
 8003fb2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003fb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d1da      	bne.n	8003f74 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	3308      	adds	r3, #8
 8003fc4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fc8:	e853 3f00 	ldrex	r3, [r3]
 8003fcc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003fce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fd0:	f023 0301 	bic.w	r3, r3, #1
 8003fd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	3308      	adds	r3, #8
 8003fde:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003fe2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003fe6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003fea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003fee:	e841 2300 	strex	r3, r2, [r1]
 8003ff2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003ff4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1e1      	bne.n	8003fbe <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	3308      	adds	r3, #8
 8004000:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004002:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004004:	e853 3f00 	ldrex	r3, [r3]
 8004008:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800400a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800400c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004010:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	3308      	adds	r3, #8
 800401a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800401e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004020:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004022:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004024:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004026:	e841 2300 	strex	r3, r2, [r1]
 800402a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800402c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1e3      	bne.n	8003ffa <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2220      	movs	r2, #32
 8004036:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004044:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004046:	e853 3f00 	ldrex	r3, [r3]
 800404a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800404c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800404e:	f023 0310 	bic.w	r3, r3, #16
 8004052:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	461a      	mov	r2, r3
 800405c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004060:	65bb      	str	r3, [r7, #88]	; 0x58
 8004062:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004064:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004066:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004068:	e841 2300 	strex	r3, r2, [r1]
 800406c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800406e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004070:	2b00      	cmp	r3, #0
 8004072:	d1e4      	bne.n	800403e <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004078:	4618      	mov	r0, r3
 800407a:	f7fc fbcc 	bl	8000816 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800408a:	b29b      	uxth	r3, r3
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	b29b      	uxth	r3, r3
 8004090:	4619      	mov	r1, r3
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 f8d4 	bl	8004240 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004098:	e0b5      	b.n	8004206 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	f000 80a7 	beq.w	800420a <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80040bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	f000 80a2 	beq.w	800420a <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ce:	e853 3f00 	ldrex	r3, [r3]
 80040d2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80040d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	461a      	mov	r2, r3
 80040e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80040e8:	647b      	str	r3, [r7, #68]	; 0x44
 80040ea:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80040ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040f0:	e841 2300 	strex	r3, r2, [r1]
 80040f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80040f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d1e4      	bne.n	80040c6 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	3308      	adds	r3, #8
 8004102:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004106:	e853 3f00 	ldrex	r3, [r3]
 800410a:	623b      	str	r3, [r7, #32]
   return(result);
 800410c:	6a3b      	ldr	r3, [r7, #32]
 800410e:	f023 0301 	bic.w	r3, r3, #1
 8004112:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	3308      	adds	r3, #8
 800411c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004120:	633a      	str	r2, [r7, #48]	; 0x30
 8004122:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004124:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004126:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004128:	e841 2300 	strex	r3, r2, [r1]
 800412c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800412e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004130:	2b00      	cmp	r3, #0
 8004132:	d1e3      	bne.n	80040fc <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2220      	movs	r2, #32
 8004138:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	e853 3f00 	ldrex	r3, [r3]
 8004152:	60fb      	str	r3, [r7, #12]
   return(result);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f023 0310 	bic.w	r3, r3, #16
 800415a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	461a      	mov	r2, r3
 8004164:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004168:	61fb      	str	r3, [r7, #28]
 800416a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800416c:	69b9      	ldr	r1, [r7, #24]
 800416e:	69fa      	ldr	r2, [r7, #28]
 8004170:	e841 2300 	strex	r3, r2, [r1]
 8004174:	617b      	str	r3, [r7, #20]
   return(result);
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d1e4      	bne.n	8004146 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800417c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004180:	4619      	mov	r1, r3
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f000 f85c 	bl	8004240 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004188:	e03f      	b.n	800420a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800418a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800418e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00e      	beq.n	80041b4 <HAL_UART_IRQHandler+0x560>
 8004196:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800419a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d008      	beq.n	80041b4 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80041aa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f000 ff88 	bl	80050c2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80041b2:	e02d      	b.n	8004210 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80041b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00e      	beq.n	80041de <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80041c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d008      	beq.n	80041de <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d01c      	beq.n	800420e <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	4798      	blx	r3
    }
    return;
 80041dc:	e017      	b.n	800420e <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80041de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d012      	beq.n	8004210 <HAL_UART_IRQHandler+0x5bc>
 80041ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d00c      	beq.n	8004210 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 fdd9 	bl	8004dae <UART_EndTransmit_IT>
    return;
 80041fc:	e008      	b.n	8004210 <HAL_UART_IRQHandler+0x5bc>
      return;
 80041fe:	bf00      	nop
 8004200:	e006      	b.n	8004210 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004202:	bf00      	nop
 8004204:	e004      	b.n	8004210 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004206:	bf00      	nop
 8004208:	e002      	b.n	8004210 <HAL_UART_IRQHandler+0x5bc>
      return;
 800420a:	bf00      	nop
 800420c:	e000      	b.n	8004210 <HAL_UART_IRQHandler+0x5bc>
    return;
 800420e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004210:	37e8      	adds	r7, #232	; 0xe8
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop

08004218 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004220:	bf00      	nop
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004234:	bf00      	nop
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	460b      	mov	r3, r1
 800424a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800424c:	bf00      	nop
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004258:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800425c:	b08a      	sub	sp, #40	; 0x28
 800425e:	af00      	add	r7, sp, #0
 8004260:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004262:	2300      	movs	r3, #0
 8004264:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	689a      	ldr	r2, [r3, #8]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	691b      	ldr	r3, [r3, #16]
 8004270:	431a      	orrs	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	695b      	ldr	r3, [r3, #20]
 8004276:	431a      	orrs	r2, r3
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	69db      	ldr	r3, [r3, #28]
 800427c:	4313      	orrs	r3, r2
 800427e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	4ba4      	ldr	r3, [pc, #656]	; (8004518 <UART_SetConfig+0x2c0>)
 8004288:	4013      	ands	r3, r2
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	6812      	ldr	r2, [r2, #0]
 800428e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004290:	430b      	orrs	r3, r1
 8004292:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	68da      	ldr	r2, [r3, #12]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	430a      	orrs	r2, r1
 80042a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	699b      	ldr	r3, [r3, #24]
 80042ae:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a99      	ldr	r2, [pc, #612]	; (800451c <UART_SetConfig+0x2c4>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d004      	beq.n	80042c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6a1b      	ldr	r3, [r3, #32]
 80042be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042c0:	4313      	orrs	r3, r2
 80042c2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042d4:	430a      	orrs	r2, r1
 80042d6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a90      	ldr	r2, [pc, #576]	; (8004520 <UART_SetConfig+0x2c8>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d126      	bne.n	8004330 <UART_SetConfig+0xd8>
 80042e2:	4b90      	ldr	r3, [pc, #576]	; (8004524 <UART_SetConfig+0x2cc>)
 80042e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e8:	f003 0303 	and.w	r3, r3, #3
 80042ec:	2b03      	cmp	r3, #3
 80042ee:	d81b      	bhi.n	8004328 <UART_SetConfig+0xd0>
 80042f0:	a201      	add	r2, pc, #4	; (adr r2, 80042f8 <UART_SetConfig+0xa0>)
 80042f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042f6:	bf00      	nop
 80042f8:	08004309 	.word	0x08004309
 80042fc:	08004319 	.word	0x08004319
 8004300:	08004311 	.word	0x08004311
 8004304:	08004321 	.word	0x08004321
 8004308:	2301      	movs	r3, #1
 800430a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800430e:	e116      	b.n	800453e <UART_SetConfig+0x2e6>
 8004310:	2302      	movs	r3, #2
 8004312:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004316:	e112      	b.n	800453e <UART_SetConfig+0x2e6>
 8004318:	2304      	movs	r3, #4
 800431a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800431e:	e10e      	b.n	800453e <UART_SetConfig+0x2e6>
 8004320:	2308      	movs	r3, #8
 8004322:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004326:	e10a      	b.n	800453e <UART_SetConfig+0x2e6>
 8004328:	2310      	movs	r3, #16
 800432a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800432e:	e106      	b.n	800453e <UART_SetConfig+0x2e6>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a7c      	ldr	r2, [pc, #496]	; (8004528 <UART_SetConfig+0x2d0>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d138      	bne.n	80043ac <UART_SetConfig+0x154>
 800433a:	4b7a      	ldr	r3, [pc, #488]	; (8004524 <UART_SetConfig+0x2cc>)
 800433c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004340:	f003 030c 	and.w	r3, r3, #12
 8004344:	2b0c      	cmp	r3, #12
 8004346:	d82d      	bhi.n	80043a4 <UART_SetConfig+0x14c>
 8004348:	a201      	add	r2, pc, #4	; (adr r2, 8004350 <UART_SetConfig+0xf8>)
 800434a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800434e:	bf00      	nop
 8004350:	08004385 	.word	0x08004385
 8004354:	080043a5 	.word	0x080043a5
 8004358:	080043a5 	.word	0x080043a5
 800435c:	080043a5 	.word	0x080043a5
 8004360:	08004395 	.word	0x08004395
 8004364:	080043a5 	.word	0x080043a5
 8004368:	080043a5 	.word	0x080043a5
 800436c:	080043a5 	.word	0x080043a5
 8004370:	0800438d 	.word	0x0800438d
 8004374:	080043a5 	.word	0x080043a5
 8004378:	080043a5 	.word	0x080043a5
 800437c:	080043a5 	.word	0x080043a5
 8004380:	0800439d 	.word	0x0800439d
 8004384:	2300      	movs	r3, #0
 8004386:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800438a:	e0d8      	b.n	800453e <UART_SetConfig+0x2e6>
 800438c:	2302      	movs	r3, #2
 800438e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004392:	e0d4      	b.n	800453e <UART_SetConfig+0x2e6>
 8004394:	2304      	movs	r3, #4
 8004396:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800439a:	e0d0      	b.n	800453e <UART_SetConfig+0x2e6>
 800439c:	2308      	movs	r3, #8
 800439e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043a2:	e0cc      	b.n	800453e <UART_SetConfig+0x2e6>
 80043a4:	2310      	movs	r3, #16
 80043a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043aa:	e0c8      	b.n	800453e <UART_SetConfig+0x2e6>
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a5e      	ldr	r2, [pc, #376]	; (800452c <UART_SetConfig+0x2d4>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d125      	bne.n	8004402 <UART_SetConfig+0x1aa>
 80043b6:	4b5b      	ldr	r3, [pc, #364]	; (8004524 <UART_SetConfig+0x2cc>)
 80043b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043bc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80043c0:	2b30      	cmp	r3, #48	; 0x30
 80043c2:	d016      	beq.n	80043f2 <UART_SetConfig+0x19a>
 80043c4:	2b30      	cmp	r3, #48	; 0x30
 80043c6:	d818      	bhi.n	80043fa <UART_SetConfig+0x1a2>
 80043c8:	2b20      	cmp	r3, #32
 80043ca:	d00a      	beq.n	80043e2 <UART_SetConfig+0x18a>
 80043cc:	2b20      	cmp	r3, #32
 80043ce:	d814      	bhi.n	80043fa <UART_SetConfig+0x1a2>
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d002      	beq.n	80043da <UART_SetConfig+0x182>
 80043d4:	2b10      	cmp	r3, #16
 80043d6:	d008      	beq.n	80043ea <UART_SetConfig+0x192>
 80043d8:	e00f      	b.n	80043fa <UART_SetConfig+0x1a2>
 80043da:	2300      	movs	r3, #0
 80043dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043e0:	e0ad      	b.n	800453e <UART_SetConfig+0x2e6>
 80043e2:	2302      	movs	r3, #2
 80043e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043e8:	e0a9      	b.n	800453e <UART_SetConfig+0x2e6>
 80043ea:	2304      	movs	r3, #4
 80043ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043f0:	e0a5      	b.n	800453e <UART_SetConfig+0x2e6>
 80043f2:	2308      	movs	r3, #8
 80043f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043f8:	e0a1      	b.n	800453e <UART_SetConfig+0x2e6>
 80043fa:	2310      	movs	r3, #16
 80043fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004400:	e09d      	b.n	800453e <UART_SetConfig+0x2e6>
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a4a      	ldr	r2, [pc, #296]	; (8004530 <UART_SetConfig+0x2d8>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d125      	bne.n	8004458 <UART_SetConfig+0x200>
 800440c:	4b45      	ldr	r3, [pc, #276]	; (8004524 <UART_SetConfig+0x2cc>)
 800440e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004412:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004416:	2bc0      	cmp	r3, #192	; 0xc0
 8004418:	d016      	beq.n	8004448 <UART_SetConfig+0x1f0>
 800441a:	2bc0      	cmp	r3, #192	; 0xc0
 800441c:	d818      	bhi.n	8004450 <UART_SetConfig+0x1f8>
 800441e:	2b80      	cmp	r3, #128	; 0x80
 8004420:	d00a      	beq.n	8004438 <UART_SetConfig+0x1e0>
 8004422:	2b80      	cmp	r3, #128	; 0x80
 8004424:	d814      	bhi.n	8004450 <UART_SetConfig+0x1f8>
 8004426:	2b00      	cmp	r3, #0
 8004428:	d002      	beq.n	8004430 <UART_SetConfig+0x1d8>
 800442a:	2b40      	cmp	r3, #64	; 0x40
 800442c:	d008      	beq.n	8004440 <UART_SetConfig+0x1e8>
 800442e:	e00f      	b.n	8004450 <UART_SetConfig+0x1f8>
 8004430:	2300      	movs	r3, #0
 8004432:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004436:	e082      	b.n	800453e <UART_SetConfig+0x2e6>
 8004438:	2302      	movs	r3, #2
 800443a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800443e:	e07e      	b.n	800453e <UART_SetConfig+0x2e6>
 8004440:	2304      	movs	r3, #4
 8004442:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004446:	e07a      	b.n	800453e <UART_SetConfig+0x2e6>
 8004448:	2308      	movs	r3, #8
 800444a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800444e:	e076      	b.n	800453e <UART_SetConfig+0x2e6>
 8004450:	2310      	movs	r3, #16
 8004452:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004456:	e072      	b.n	800453e <UART_SetConfig+0x2e6>
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a35      	ldr	r2, [pc, #212]	; (8004534 <UART_SetConfig+0x2dc>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d12a      	bne.n	80044b8 <UART_SetConfig+0x260>
 8004462:	4b30      	ldr	r3, [pc, #192]	; (8004524 <UART_SetConfig+0x2cc>)
 8004464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004468:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800446c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004470:	d01a      	beq.n	80044a8 <UART_SetConfig+0x250>
 8004472:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004476:	d81b      	bhi.n	80044b0 <UART_SetConfig+0x258>
 8004478:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800447c:	d00c      	beq.n	8004498 <UART_SetConfig+0x240>
 800447e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004482:	d815      	bhi.n	80044b0 <UART_SetConfig+0x258>
 8004484:	2b00      	cmp	r3, #0
 8004486:	d003      	beq.n	8004490 <UART_SetConfig+0x238>
 8004488:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800448c:	d008      	beq.n	80044a0 <UART_SetConfig+0x248>
 800448e:	e00f      	b.n	80044b0 <UART_SetConfig+0x258>
 8004490:	2300      	movs	r3, #0
 8004492:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004496:	e052      	b.n	800453e <UART_SetConfig+0x2e6>
 8004498:	2302      	movs	r3, #2
 800449a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800449e:	e04e      	b.n	800453e <UART_SetConfig+0x2e6>
 80044a0:	2304      	movs	r3, #4
 80044a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044a6:	e04a      	b.n	800453e <UART_SetConfig+0x2e6>
 80044a8:	2308      	movs	r3, #8
 80044aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044ae:	e046      	b.n	800453e <UART_SetConfig+0x2e6>
 80044b0:	2310      	movs	r3, #16
 80044b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044b6:	e042      	b.n	800453e <UART_SetConfig+0x2e6>
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a17      	ldr	r2, [pc, #92]	; (800451c <UART_SetConfig+0x2c4>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d13a      	bne.n	8004538 <UART_SetConfig+0x2e0>
 80044c2:	4b18      	ldr	r3, [pc, #96]	; (8004524 <UART_SetConfig+0x2cc>)
 80044c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80044cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80044d0:	d01a      	beq.n	8004508 <UART_SetConfig+0x2b0>
 80044d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80044d6:	d81b      	bhi.n	8004510 <UART_SetConfig+0x2b8>
 80044d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044dc:	d00c      	beq.n	80044f8 <UART_SetConfig+0x2a0>
 80044de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044e2:	d815      	bhi.n	8004510 <UART_SetConfig+0x2b8>
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d003      	beq.n	80044f0 <UART_SetConfig+0x298>
 80044e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044ec:	d008      	beq.n	8004500 <UART_SetConfig+0x2a8>
 80044ee:	e00f      	b.n	8004510 <UART_SetConfig+0x2b8>
 80044f0:	2300      	movs	r3, #0
 80044f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044f6:	e022      	b.n	800453e <UART_SetConfig+0x2e6>
 80044f8:	2302      	movs	r3, #2
 80044fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044fe:	e01e      	b.n	800453e <UART_SetConfig+0x2e6>
 8004500:	2304      	movs	r3, #4
 8004502:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004506:	e01a      	b.n	800453e <UART_SetConfig+0x2e6>
 8004508:	2308      	movs	r3, #8
 800450a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800450e:	e016      	b.n	800453e <UART_SetConfig+0x2e6>
 8004510:	2310      	movs	r3, #16
 8004512:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004516:	e012      	b.n	800453e <UART_SetConfig+0x2e6>
 8004518:	efff69f3 	.word	0xefff69f3
 800451c:	40008000 	.word	0x40008000
 8004520:	40013800 	.word	0x40013800
 8004524:	40021000 	.word	0x40021000
 8004528:	40004400 	.word	0x40004400
 800452c:	40004800 	.word	0x40004800
 8004530:	40004c00 	.word	0x40004c00
 8004534:	40005000 	.word	0x40005000
 8004538:	2310      	movs	r3, #16
 800453a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a9f      	ldr	r2, [pc, #636]	; (80047c0 <UART_SetConfig+0x568>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d17a      	bne.n	800463e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004548:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800454c:	2b08      	cmp	r3, #8
 800454e:	d824      	bhi.n	800459a <UART_SetConfig+0x342>
 8004550:	a201      	add	r2, pc, #4	; (adr r2, 8004558 <UART_SetConfig+0x300>)
 8004552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004556:	bf00      	nop
 8004558:	0800457d 	.word	0x0800457d
 800455c:	0800459b 	.word	0x0800459b
 8004560:	08004585 	.word	0x08004585
 8004564:	0800459b 	.word	0x0800459b
 8004568:	0800458b 	.word	0x0800458b
 800456c:	0800459b 	.word	0x0800459b
 8004570:	0800459b 	.word	0x0800459b
 8004574:	0800459b 	.word	0x0800459b
 8004578:	08004593 	.word	0x08004593
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800457c:	f7fd f97e 	bl	800187c <HAL_RCC_GetPCLK1Freq>
 8004580:	61f8      	str	r0, [r7, #28]
        break;
 8004582:	e010      	b.n	80045a6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004584:	4b8f      	ldr	r3, [pc, #572]	; (80047c4 <UART_SetConfig+0x56c>)
 8004586:	61fb      	str	r3, [r7, #28]
        break;
 8004588:	e00d      	b.n	80045a6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800458a:	f7fd f8df 	bl	800174c <HAL_RCC_GetSysClockFreq>
 800458e:	61f8      	str	r0, [r7, #28]
        break;
 8004590:	e009      	b.n	80045a6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004592:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004596:	61fb      	str	r3, [r7, #28]
        break;
 8004598:	e005      	b.n	80045a6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800459a:	2300      	movs	r3, #0
 800459c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80045a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	f000 80fb 	beq.w	80047a4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	685a      	ldr	r2, [r3, #4]
 80045b2:	4613      	mov	r3, r2
 80045b4:	005b      	lsls	r3, r3, #1
 80045b6:	4413      	add	r3, r2
 80045b8:	69fa      	ldr	r2, [r7, #28]
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d305      	bcc.n	80045ca <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80045c4:	69fa      	ldr	r2, [r7, #28]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d903      	bls.n	80045d2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80045d0:	e0e8      	b.n	80047a4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	2200      	movs	r2, #0
 80045d6:	461c      	mov	r4, r3
 80045d8:	4615      	mov	r5, r2
 80045da:	f04f 0200 	mov.w	r2, #0
 80045de:	f04f 0300 	mov.w	r3, #0
 80045e2:	022b      	lsls	r3, r5, #8
 80045e4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80045e8:	0222      	lsls	r2, r4, #8
 80045ea:	68f9      	ldr	r1, [r7, #12]
 80045ec:	6849      	ldr	r1, [r1, #4]
 80045ee:	0849      	lsrs	r1, r1, #1
 80045f0:	2000      	movs	r0, #0
 80045f2:	4688      	mov	r8, r1
 80045f4:	4681      	mov	r9, r0
 80045f6:	eb12 0a08 	adds.w	sl, r2, r8
 80045fa:	eb43 0b09 	adc.w	fp, r3, r9
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	603b      	str	r3, [r7, #0]
 8004606:	607a      	str	r2, [r7, #4]
 8004608:	e9d7 2300 	ldrd	r2, r3, [r7]
 800460c:	4650      	mov	r0, sl
 800460e:	4659      	mov	r1, fp
 8004610:	f7fb fdda 	bl	80001c8 <__aeabi_uldivmod>
 8004614:	4602      	mov	r2, r0
 8004616:	460b      	mov	r3, r1
 8004618:	4613      	mov	r3, r2
 800461a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004622:	d308      	bcc.n	8004636 <UART_SetConfig+0x3de>
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800462a:	d204      	bcs.n	8004636 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	69ba      	ldr	r2, [r7, #24]
 8004632:	60da      	str	r2, [r3, #12]
 8004634:	e0b6      	b.n	80047a4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800463c:	e0b2      	b.n	80047a4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	69db      	ldr	r3, [r3, #28]
 8004642:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004646:	d15e      	bne.n	8004706 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004648:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800464c:	2b08      	cmp	r3, #8
 800464e:	d828      	bhi.n	80046a2 <UART_SetConfig+0x44a>
 8004650:	a201      	add	r2, pc, #4	; (adr r2, 8004658 <UART_SetConfig+0x400>)
 8004652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004656:	bf00      	nop
 8004658:	0800467d 	.word	0x0800467d
 800465c:	08004685 	.word	0x08004685
 8004660:	0800468d 	.word	0x0800468d
 8004664:	080046a3 	.word	0x080046a3
 8004668:	08004693 	.word	0x08004693
 800466c:	080046a3 	.word	0x080046a3
 8004670:	080046a3 	.word	0x080046a3
 8004674:	080046a3 	.word	0x080046a3
 8004678:	0800469b 	.word	0x0800469b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800467c:	f7fd f8fe 	bl	800187c <HAL_RCC_GetPCLK1Freq>
 8004680:	61f8      	str	r0, [r7, #28]
        break;
 8004682:	e014      	b.n	80046ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004684:	f7fd f910 	bl	80018a8 <HAL_RCC_GetPCLK2Freq>
 8004688:	61f8      	str	r0, [r7, #28]
        break;
 800468a:	e010      	b.n	80046ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800468c:	4b4d      	ldr	r3, [pc, #308]	; (80047c4 <UART_SetConfig+0x56c>)
 800468e:	61fb      	str	r3, [r7, #28]
        break;
 8004690:	e00d      	b.n	80046ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004692:	f7fd f85b 	bl	800174c <HAL_RCC_GetSysClockFreq>
 8004696:	61f8      	str	r0, [r7, #28]
        break;
 8004698:	e009      	b.n	80046ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800469a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800469e:	61fb      	str	r3, [r7, #28]
        break;
 80046a0:	e005      	b.n	80046ae <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80046a2:	2300      	movs	r3, #0
 80046a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80046ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d077      	beq.n	80047a4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	005a      	lsls	r2, r3, #1
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	085b      	lsrs	r3, r3, #1
 80046be:	441a      	add	r2, r3
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	2b0f      	cmp	r3, #15
 80046ce:	d916      	bls.n	80046fe <UART_SetConfig+0x4a6>
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046d6:	d212      	bcs.n	80046fe <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	b29b      	uxth	r3, r3
 80046dc:	f023 030f 	bic.w	r3, r3, #15
 80046e0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	085b      	lsrs	r3, r3, #1
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	f003 0307 	and.w	r3, r3, #7
 80046ec:	b29a      	uxth	r2, r3
 80046ee:	8afb      	ldrh	r3, [r7, #22]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	8afa      	ldrh	r2, [r7, #22]
 80046fa:	60da      	str	r2, [r3, #12]
 80046fc:	e052      	b.n	80047a4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004704:	e04e      	b.n	80047a4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004706:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800470a:	2b08      	cmp	r3, #8
 800470c:	d827      	bhi.n	800475e <UART_SetConfig+0x506>
 800470e:	a201      	add	r2, pc, #4	; (adr r2, 8004714 <UART_SetConfig+0x4bc>)
 8004710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004714:	08004739 	.word	0x08004739
 8004718:	08004741 	.word	0x08004741
 800471c:	08004749 	.word	0x08004749
 8004720:	0800475f 	.word	0x0800475f
 8004724:	0800474f 	.word	0x0800474f
 8004728:	0800475f 	.word	0x0800475f
 800472c:	0800475f 	.word	0x0800475f
 8004730:	0800475f 	.word	0x0800475f
 8004734:	08004757 	.word	0x08004757
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004738:	f7fd f8a0 	bl	800187c <HAL_RCC_GetPCLK1Freq>
 800473c:	61f8      	str	r0, [r7, #28]
        break;
 800473e:	e014      	b.n	800476a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004740:	f7fd f8b2 	bl	80018a8 <HAL_RCC_GetPCLK2Freq>
 8004744:	61f8      	str	r0, [r7, #28]
        break;
 8004746:	e010      	b.n	800476a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004748:	4b1e      	ldr	r3, [pc, #120]	; (80047c4 <UART_SetConfig+0x56c>)
 800474a:	61fb      	str	r3, [r7, #28]
        break;
 800474c:	e00d      	b.n	800476a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800474e:	f7fc fffd 	bl	800174c <HAL_RCC_GetSysClockFreq>
 8004752:	61f8      	str	r0, [r7, #28]
        break;
 8004754:	e009      	b.n	800476a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004756:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800475a:	61fb      	str	r3, [r7, #28]
        break;
 800475c:	e005      	b.n	800476a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800475e:	2300      	movs	r3, #0
 8004760:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004768:	bf00      	nop
    }

    if (pclk != 0U)
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d019      	beq.n	80047a4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	085a      	lsrs	r2, r3, #1
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	441a      	add	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004782:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	2b0f      	cmp	r3, #15
 8004788:	d909      	bls.n	800479e <UART_SetConfig+0x546>
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004790:	d205      	bcs.n	800479e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004792:	69bb      	ldr	r3, [r7, #24]
 8004794:	b29a      	uxth	r2, r3
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	60da      	str	r2, [r3, #12]
 800479c:	e002      	b.n	80047a4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2200      	movs	r2, #0
 80047a8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2200      	movs	r2, #0
 80047ae:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80047b0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3728      	adds	r7, #40	; 0x28
 80047b8:	46bd      	mov	sp, r7
 80047ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047be:	bf00      	nop
 80047c0:	40008000 	.word	0x40008000
 80047c4:	00f42400 	.word	0x00f42400

080047c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d4:	f003 0301 	and.w	r3, r3, #1
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d00a      	beq.n	80047f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	430a      	orrs	r2, r1
 80047f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f6:	f003 0302 	and.w	r3, r3, #2
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d00a      	beq.n	8004814 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	430a      	orrs	r2, r1
 8004812:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004818:	f003 0304 	and.w	r3, r3, #4
 800481c:	2b00      	cmp	r3, #0
 800481e:	d00a      	beq.n	8004836 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	430a      	orrs	r2, r1
 8004834:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483a:	f003 0308 	and.w	r3, r3, #8
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00a      	beq.n	8004858 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	430a      	orrs	r2, r1
 8004856:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485c:	f003 0310 	and.w	r3, r3, #16
 8004860:	2b00      	cmp	r3, #0
 8004862:	d00a      	beq.n	800487a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	430a      	orrs	r2, r1
 8004878:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487e:	f003 0320 	and.w	r3, r3, #32
 8004882:	2b00      	cmp	r3, #0
 8004884:	d00a      	beq.n	800489c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	430a      	orrs	r2, r1
 800489a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d01a      	beq.n	80048de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	430a      	orrs	r2, r1
 80048bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048c6:	d10a      	bne.n	80048de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	430a      	orrs	r2, r1
 80048dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00a      	beq.n	8004900 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	430a      	orrs	r2, r1
 80048fe:	605a      	str	r2, [r3, #4]
  }
}
 8004900:	bf00      	nop
 8004902:	370c      	adds	r7, #12
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b086      	sub	sp, #24
 8004910:	af02      	add	r7, sp, #8
 8004912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800491c:	f7fb fe3a 	bl	8000594 <HAL_GetTick>
 8004920:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 0308 	and.w	r3, r3, #8
 800492c:	2b08      	cmp	r3, #8
 800492e:	d10e      	bne.n	800494e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004930:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004934:	9300      	str	r3, [sp, #0]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2200      	movs	r2, #0
 800493a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 f82d 	bl	800499e <UART_WaitOnFlagUntilTimeout>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d001      	beq.n	800494e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e023      	b.n	8004996 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0304 	and.w	r3, r3, #4
 8004958:	2b04      	cmp	r3, #4
 800495a:	d10e      	bne.n	800497a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800495c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004960:	9300      	str	r3, [sp, #0]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2200      	movs	r2, #0
 8004966:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 f817 	bl	800499e <UART_WaitOnFlagUntilTimeout>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d001      	beq.n	800497a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e00d      	b.n	8004996 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2220      	movs	r2, #32
 800497e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2220      	movs	r2, #32
 8004984:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3710      	adds	r7, #16
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}

0800499e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800499e:	b580      	push	{r7, lr}
 80049a0:	b09c      	sub	sp, #112	; 0x70
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	60f8      	str	r0, [r7, #12]
 80049a6:	60b9      	str	r1, [r7, #8]
 80049a8:	603b      	str	r3, [r7, #0]
 80049aa:	4613      	mov	r3, r2
 80049ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049ae:	e0a5      	b.n	8004afc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b6:	f000 80a1 	beq.w	8004afc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049ba:	f7fb fdeb 	bl	8000594 <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d302      	bcc.n	80049d0 <UART_WaitOnFlagUntilTimeout+0x32>
 80049ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d13e      	bne.n	8004a4e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049d8:	e853 3f00 	ldrex	r3, [r3]
 80049dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80049de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80049e4:	667b      	str	r3, [r7, #100]	; 0x64
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	461a      	mov	r2, r3
 80049ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049f0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80049f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80049f6:	e841 2300 	strex	r3, r2, [r1]
 80049fa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80049fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d1e6      	bne.n	80049d0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	3308      	adds	r3, #8
 8004a08:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a0c:	e853 3f00 	ldrex	r3, [r3]
 8004a10:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a14:	f023 0301 	bic.w	r3, r3, #1
 8004a18:	663b      	str	r3, [r7, #96]	; 0x60
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	3308      	adds	r3, #8
 8004a20:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004a22:	64ba      	str	r2, [r7, #72]	; 0x48
 8004a24:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a26:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004a28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a2a:	e841 2300 	strex	r3, r2, [r1]
 8004a2e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004a30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d1e5      	bne.n	8004a02 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2220      	movs	r2, #32
 8004a3a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2220      	movs	r2, #32
 8004a40:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e067      	b.n	8004b1e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0304 	and.w	r3, r3, #4
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d04f      	beq.n	8004afc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	69db      	ldr	r3, [r3, #28]
 8004a62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a6a:	d147      	bne.n	8004afc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a74:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a7e:	e853 3f00 	ldrex	r3, [r3]
 8004a82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a86:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a8a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	461a      	mov	r2, r3
 8004a92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a94:	637b      	str	r3, [r7, #52]	; 0x34
 8004a96:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a9c:	e841 2300 	strex	r3, r2, [r1]
 8004aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d1e6      	bne.n	8004a76 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	3308      	adds	r3, #8
 8004aae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	e853 3f00 	ldrex	r3, [r3]
 8004ab6:	613b      	str	r3, [r7, #16]
   return(result);
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	f023 0301 	bic.w	r3, r3, #1
 8004abe:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	3308      	adds	r3, #8
 8004ac6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004ac8:	623a      	str	r2, [r7, #32]
 8004aca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004acc:	69f9      	ldr	r1, [r7, #28]
 8004ace:	6a3a      	ldr	r2, [r7, #32]
 8004ad0:	e841 2300 	strex	r3, r2, [r1]
 8004ad4:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d1e5      	bne.n	8004aa8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2220      	movs	r2, #32
 8004ae0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2220      	movs	r2, #32
 8004ae6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2220      	movs	r2, #32
 8004aec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004af8:	2303      	movs	r3, #3
 8004afa:	e010      	b.n	8004b1e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	69da      	ldr	r2, [r3, #28]
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	4013      	ands	r3, r2
 8004b06:	68ba      	ldr	r2, [r7, #8]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	bf0c      	ite	eq
 8004b0c:	2301      	moveq	r3, #1
 8004b0e:	2300      	movne	r3, #0
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	461a      	mov	r2, r3
 8004b14:	79fb      	ldrb	r3, [r7, #7]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	f43f af4a 	beq.w	80049b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3770      	adds	r7, #112	; 0x70
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
	...

08004b28 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b097      	sub	sp, #92	; 0x5c
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	4613      	mov	r3, r2
 8004b34:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	68ba      	ldr	r2, [r7, #8]
 8004b3a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	88fa      	ldrh	r2, [r7, #6]
 8004b40:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	88fa      	ldrh	r2, [r7, #6]
 8004b48:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b5a:	d10e      	bne.n	8004b7a <UART_Start_Receive_IT+0x52>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d105      	bne.n	8004b70 <UART_Start_Receive_IT+0x48>
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004b6a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b6e:	e02d      	b.n	8004bcc <UART_Start_Receive_IT+0xa4>
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	22ff      	movs	r2, #255	; 0xff
 8004b74:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b78:	e028      	b.n	8004bcc <UART_Start_Receive_IT+0xa4>
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d10d      	bne.n	8004b9e <UART_Start_Receive_IT+0x76>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d104      	bne.n	8004b94 <UART_Start_Receive_IT+0x6c>
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	22ff      	movs	r2, #255	; 0xff
 8004b8e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b92:	e01b      	b.n	8004bcc <UART_Start_Receive_IT+0xa4>
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	227f      	movs	r2, #127	; 0x7f
 8004b98:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b9c:	e016      	b.n	8004bcc <UART_Start_Receive_IT+0xa4>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ba6:	d10d      	bne.n	8004bc4 <UART_Start_Receive_IT+0x9c>
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	691b      	ldr	r3, [r3, #16]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d104      	bne.n	8004bba <UART_Start_Receive_IT+0x92>
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	227f      	movs	r2, #127	; 0x7f
 8004bb4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004bb8:	e008      	b.n	8004bcc <UART_Start_Receive_IT+0xa4>
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	223f      	movs	r2, #63	; 0x3f
 8004bbe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004bc2:	e003      	b.n	8004bcc <UART_Start_Receive_IT+0xa4>
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2222      	movs	r2, #34	; 0x22
 8004bd8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	3308      	adds	r3, #8
 8004be0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004be4:	e853 3f00 	ldrex	r3, [r3]
 8004be8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bec:	f043 0301 	orr.w	r3, r3, #1
 8004bf0:	657b      	str	r3, [r7, #84]	; 0x54
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	3308      	adds	r3, #8
 8004bf8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004bfa:	64ba      	str	r2, [r7, #72]	; 0x48
 8004bfc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bfe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004c00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c02:	e841 2300 	strex	r3, r2, [r1]
 8004c06:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004c08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d1e5      	bne.n	8004bda <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c16:	d107      	bne.n	8004c28 <UART_Start_Receive_IT+0x100>
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d103      	bne.n	8004c28 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	4a24      	ldr	r2, [pc, #144]	; (8004cb4 <UART_Start_Receive_IT+0x18c>)
 8004c24:	665a      	str	r2, [r3, #100]	; 0x64
 8004c26:	e002      	b.n	8004c2e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	4a23      	ldr	r2, [pc, #140]	; (8004cb8 <UART_Start_Receive_IT+0x190>)
 8004c2c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d019      	beq.n	8004c72 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c46:	e853 3f00 	ldrex	r3, [r3]
 8004c4a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004c52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	461a      	mov	r2, r3
 8004c5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c5c:	637b      	str	r3, [r7, #52]	; 0x34
 8004c5e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c64:	e841 2300 	strex	r3, r2, [r1]
 8004c68:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d1e6      	bne.n	8004c3e <UART_Start_Receive_IT+0x116>
 8004c70:	e018      	b.n	8004ca4 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	e853 3f00 	ldrex	r3, [r3]
 8004c7e:	613b      	str	r3, [r7, #16]
   return(result);
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	f043 0320 	orr.w	r3, r3, #32
 8004c86:	653b      	str	r3, [r7, #80]	; 0x50
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c90:	623b      	str	r3, [r7, #32]
 8004c92:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c94:	69f9      	ldr	r1, [r7, #28]
 8004c96:	6a3a      	ldr	r2, [r7, #32]
 8004c98:	e841 2300 	strex	r3, r2, [r1]
 8004c9c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1e6      	bne.n	8004c72 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	375c      	adds	r7, #92	; 0x5c
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	08004f63 	.word	0x08004f63
 8004cb8:	08004e03 	.word	0x08004e03

08004cbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b095      	sub	sp, #84	; 0x54
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ccc:	e853 3f00 	ldrex	r3, [r3]
 8004cd0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004cd8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	461a      	mov	r2, r3
 8004ce0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ce2:	643b      	str	r3, [r7, #64]	; 0x40
 8004ce4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004ce8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004cea:	e841 2300 	strex	r3, r2, [r1]
 8004cee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d1e6      	bne.n	8004cc4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	3308      	adds	r3, #8
 8004cfc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cfe:	6a3b      	ldr	r3, [r7, #32]
 8004d00:	e853 3f00 	ldrex	r3, [r3]
 8004d04:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	f023 0301 	bic.w	r3, r3, #1
 8004d0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	3308      	adds	r3, #8
 8004d14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d18:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d1e:	e841 2300 	strex	r3, r2, [r1]
 8004d22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d1e5      	bne.n	8004cf6 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d118      	bne.n	8004d64 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	e853 3f00 	ldrex	r3, [r3]
 8004d3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	f023 0310 	bic.w	r3, r3, #16
 8004d46:	647b      	str	r3, [r7, #68]	; 0x44
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d50:	61bb      	str	r3, [r7, #24]
 8004d52:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d54:	6979      	ldr	r1, [r7, #20]
 8004d56:	69ba      	ldr	r2, [r7, #24]
 8004d58:	e841 2300 	strex	r3, r2, [r1]
 8004d5c:	613b      	str	r3, [r7, #16]
   return(result);
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d1e6      	bne.n	8004d32 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2220      	movs	r2, #32
 8004d68:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004d76:	bf00      	nop
 8004d78:	3754      	adds	r7, #84	; 0x54
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr

08004d82 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b084      	sub	sp, #16
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d8e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004da0:	68f8      	ldr	r0, [r7, #12]
 8004da2:	f7ff fa43 	bl	800422c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004da6:	bf00      	nop
 8004da8:	3710      	adds	r7, #16
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}

08004dae <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004dae:	b580      	push	{r7, lr}
 8004db0:	b088      	sub	sp, #32
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	e853 3f00 	ldrex	r3, [r3]
 8004dc2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dca:	61fb      	str	r3, [r7, #28]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	61bb      	str	r3, [r7, #24]
 8004dd6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd8:	6979      	ldr	r1, [r7, #20]
 8004dda:	69ba      	ldr	r2, [r7, #24]
 8004ddc:	e841 2300 	strex	r3, r2, [r1]
 8004de0:	613b      	str	r3, [r7, #16]
   return(result);
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d1e6      	bne.n	8004db6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2220      	movs	r2, #32
 8004dec:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f7ff fa0f 	bl	8004218 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004dfa:	bf00      	nop
 8004dfc:	3720      	adds	r7, #32
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}

08004e02 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004e02:	b580      	push	{r7, lr}
 8004e04:	b096      	sub	sp, #88	; 0x58
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004e10:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e18:	2b22      	cmp	r3, #34	; 0x22
 8004e1a:	f040 8094 	bne.w	8004f46 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004e24:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004e28:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004e2c:	b2d9      	uxtb	r1, r3
 8004e2e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004e32:	b2da      	uxtb	r2, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e38:	400a      	ands	r2, r1
 8004e3a:	b2d2      	uxtb	r2, r2
 8004e3c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e42:	1c5a      	adds	r2, r3, #1
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	3b01      	subs	r3, #1
 8004e52:	b29a      	uxth	r2, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d179      	bne.n	8004f5a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e6e:	e853 3f00 	ldrex	r3, [r3]
 8004e72:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e76:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e7a:	653b      	str	r3, [r7, #80]	; 0x50
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	461a      	mov	r2, r3
 8004e82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e84:	647b      	str	r3, [r7, #68]	; 0x44
 8004e86:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e88:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e8c:	e841 2300 	strex	r3, r2, [r1]
 8004e90:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d1e6      	bne.n	8004e66 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	3308      	adds	r3, #8
 8004e9e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea2:	e853 3f00 	ldrex	r3, [r3]
 8004ea6:	623b      	str	r3, [r7, #32]
   return(result);
 8004ea8:	6a3b      	ldr	r3, [r7, #32]
 8004eaa:	f023 0301 	bic.w	r3, r3, #1
 8004eae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	3308      	adds	r3, #8
 8004eb6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004eb8:	633a      	str	r2, [r7, #48]	; 0x30
 8004eba:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ebc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ebe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ec0:	e841 2300 	strex	r3, r2, [r1]
 8004ec4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d1e5      	bne.n	8004e98 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2220      	movs	r2, #32
 8004ed0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d12e      	bne.n	8004f3e <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	e853 3f00 	ldrex	r3, [r3]
 8004ef2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f023 0310 	bic.w	r3, r3, #16
 8004efa:	64bb      	str	r3, [r7, #72]	; 0x48
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	461a      	mov	r2, r3
 8004f02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f04:	61fb      	str	r3, [r7, #28]
 8004f06:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f08:	69b9      	ldr	r1, [r7, #24]
 8004f0a:	69fa      	ldr	r2, [r7, #28]
 8004f0c:	e841 2300 	strex	r3, r2, [r1]
 8004f10:	617b      	str	r3, [r7, #20]
   return(result);
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d1e6      	bne.n	8004ee6 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	69db      	ldr	r3, [r3, #28]
 8004f1e:	f003 0310 	and.w	r3, r3, #16
 8004f22:	2b10      	cmp	r3, #16
 8004f24:	d103      	bne.n	8004f2e <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	2210      	movs	r2, #16
 8004f2c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004f34:	4619      	mov	r1, r3
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f7ff f982 	bl	8004240 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004f3c:	e00d      	b.n	8004f5a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f000 fc56 	bl	80057f0 <HAL_UART_RxCpltCallback>
}
 8004f44:	e009      	b.n	8004f5a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	8b1b      	ldrh	r3, [r3, #24]
 8004f4c:	b29a      	uxth	r2, r3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f042 0208 	orr.w	r2, r2, #8
 8004f56:	b292      	uxth	r2, r2
 8004f58:	831a      	strh	r2, [r3, #24]
}
 8004f5a:	bf00      	nop
 8004f5c:	3758      	adds	r7, #88	; 0x58
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}

08004f62 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004f62:	b580      	push	{r7, lr}
 8004f64:	b096      	sub	sp, #88	; 0x58
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004f70:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f78:	2b22      	cmp	r3, #34	; 0x22
 8004f7a:	f040 8094 	bne.w	80050a6 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004f84:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f8c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8004f8e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004f92:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004f96:	4013      	ands	r3, r2
 8004f98:	b29a      	uxth	r2, r3
 8004f9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f9c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fa2:	1c9a      	adds	r2, r3, #2
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	3b01      	subs	r3, #1
 8004fb2:	b29a      	uxth	r2, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d179      	bne.n	80050ba <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fce:	e853 3f00 	ldrex	r3, [r3]
 8004fd2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004fda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fe4:	643b      	str	r3, [r7, #64]	; 0x40
 8004fe6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004fea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004fec:	e841 2300 	strex	r3, r2, [r1]
 8004ff0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d1e6      	bne.n	8004fc6 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	3308      	adds	r3, #8
 8004ffe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005000:	6a3b      	ldr	r3, [r7, #32]
 8005002:	e853 3f00 	ldrex	r3, [r3]
 8005006:	61fb      	str	r3, [r7, #28]
   return(result);
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	f023 0301 	bic.w	r3, r3, #1
 800500e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	3308      	adds	r3, #8
 8005016:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005018:	62fa      	str	r2, [r7, #44]	; 0x2c
 800501a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800501c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800501e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005020:	e841 2300 	strex	r3, r2, [r1]
 8005024:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005028:	2b00      	cmp	r3, #0
 800502a:	d1e5      	bne.n	8004ff8 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2220      	movs	r2, #32
 8005030:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800503c:	2b01      	cmp	r3, #1
 800503e:	d12e      	bne.n	800509e <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	e853 3f00 	ldrex	r3, [r3]
 8005052:	60bb      	str	r3, [r7, #8]
   return(result);
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	f023 0310 	bic.w	r3, r3, #16
 800505a:	647b      	str	r3, [r7, #68]	; 0x44
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	461a      	mov	r2, r3
 8005062:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005064:	61bb      	str	r3, [r7, #24]
 8005066:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005068:	6979      	ldr	r1, [r7, #20]
 800506a:	69ba      	ldr	r2, [r7, #24]
 800506c:	e841 2300 	strex	r3, r2, [r1]
 8005070:	613b      	str	r3, [r7, #16]
   return(result);
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d1e6      	bne.n	8005046 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	69db      	ldr	r3, [r3, #28]
 800507e:	f003 0310 	and.w	r3, r3, #16
 8005082:	2b10      	cmp	r3, #16
 8005084:	d103      	bne.n	800508e <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2210      	movs	r2, #16
 800508c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005094:	4619      	mov	r1, r3
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f7ff f8d2 	bl	8004240 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800509c:	e00d      	b.n	80050ba <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 fba6 	bl	80057f0 <HAL_UART_RxCpltCallback>
}
 80050a4:	e009      	b.n	80050ba <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	8b1b      	ldrh	r3, [r3, #24]
 80050ac:	b29a      	uxth	r2, r3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f042 0208 	orr.w	r2, r2, #8
 80050b6:	b292      	uxth	r2, r2
 80050b8:	831a      	strh	r2, [r3, #24]
}
 80050ba:	bf00      	nop
 80050bc:	3758      	adds	r7, #88	; 0x58
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}

080050c2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80050c2:	b480      	push	{r7}
 80050c4:	b083      	sub	sp, #12
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80050ca:	bf00      	nop
 80050cc:	370c      	adds	r7, #12
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr
	...

080050d8 <HCSR04_Init>:
static HCSR04_info gs_HCSR04_info[HCSR04_UNITS] = {0};



void HCSR04_Init(uint8_t au8_HCSR04_Instance, TIM_HandleTypeDef* TMR_Handle)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b098      	sub	sp, #96	; 0x60
 80050dc:	af00      	add	r7, sp, #0
 80050de:	4603      	mov	r3, r0
 80050e0:	6039      	str	r1, [r7, #0]
 80050e2:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef TRIG_GPIO_InitStruct = {0};
 80050e4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80050e8:	2200      	movs	r2, #0
 80050ea:	601a      	str	r2, [r3, #0]
 80050ec:	605a      	str	r2, [r3, #4]
 80050ee:	609a      	str	r2, [r3, #8]
 80050f0:	60da      	str	r2, [r3, #12]
 80050f2:	611a      	str	r2, [r3, #16]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80050f4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80050f8:	2200      	movs	r2, #0
 80050fa:	601a      	str	r2, [r3, #0]
 80050fc:	605a      	str	r2, [r3, #4]
 80050fe:	609a      	str	r2, [r3, #8]
 8005100:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005102:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005106:	2200      	movs	r2, #0
 8005108:	601a      	str	r2, [r3, #0]
 800510a:	605a      	str	r2, [r3, #4]
 800510c:	609a      	str	r2, [r3, #8]
	TIM_IC_InitTypeDef sConfigIC = {0};
 800510e:	f107 0320 	add.w	r3, r7, #32
 8005112:	2200      	movs	r2, #0
 8005114:	601a      	str	r2, [r3, #0]
 8005116:	605a      	str	r2, [r3, #4]
 8005118:	609a      	str	r2, [r3, #8]
 800511a:	60da      	str	r2, [r3, #12]

    DWT_Delay_Init();
 800511c:	f000 fdf8 	bl	8005d10 <DWT_Delay_Init>

	/*--------[ Configure The HCSR04 TRIGGER GPIO Pin ]-------*/

    if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOA)
 8005120:	79fa      	ldrb	r2, [r7, #7]
 8005122:	4993      	ldr	r1, [pc, #588]	; (8005370 <HCSR04_Init+0x298>)
 8005124:	4613      	mov	r3, r2
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	4413      	add	r3, r2
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	440b      	add	r3, r1
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005134:	d10c      	bne.n	8005150 <HCSR04_Init+0x78>
    {
    	__HAL_RCC_GPIOA_CLK_ENABLE();
 8005136:	4b8f      	ldr	r3, [pc, #572]	; (8005374 <HCSR04_Init+0x29c>)
 8005138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800513a:	4a8e      	ldr	r2, [pc, #568]	; (8005374 <HCSR04_Init+0x29c>)
 800513c:	f043 0301 	orr.w	r3, r3, #1
 8005140:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005142:	4b8c      	ldr	r3, [pc, #560]	; (8005374 <HCSR04_Init+0x29c>)
 8005144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005146:	f003 0301 	and.w	r3, r3, #1
 800514a:	61fb      	str	r3, [r7, #28]
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	e05e      	b.n	800520e <HCSR04_Init+0x136>
    }
    else if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOB)
 8005150:	79fa      	ldrb	r2, [r7, #7]
 8005152:	4987      	ldr	r1, [pc, #540]	; (8005370 <HCSR04_Init+0x298>)
 8005154:	4613      	mov	r3, r2
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	4413      	add	r3, r2
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	440b      	add	r3, r1
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a85      	ldr	r2, [pc, #532]	; (8005378 <HCSR04_Init+0x2a0>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d10c      	bne.n	8005180 <HCSR04_Init+0xa8>
    {
    	__HAL_RCC_GPIOB_CLK_ENABLE();
 8005166:	4b83      	ldr	r3, [pc, #524]	; (8005374 <HCSR04_Init+0x29c>)
 8005168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800516a:	4a82      	ldr	r2, [pc, #520]	; (8005374 <HCSR04_Init+0x29c>)
 800516c:	f043 0302 	orr.w	r3, r3, #2
 8005170:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005172:	4b80      	ldr	r3, [pc, #512]	; (8005374 <HCSR04_Init+0x29c>)
 8005174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005176:	f003 0302 	and.w	r3, r3, #2
 800517a:	61bb      	str	r3, [r7, #24]
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	e046      	b.n	800520e <HCSR04_Init+0x136>
    }
    else if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOC)
 8005180:	79fa      	ldrb	r2, [r7, #7]
 8005182:	497b      	ldr	r1, [pc, #492]	; (8005370 <HCSR04_Init+0x298>)
 8005184:	4613      	mov	r3, r2
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	4413      	add	r3, r2
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	440b      	add	r3, r1
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a7a      	ldr	r2, [pc, #488]	; (800537c <HCSR04_Init+0x2a4>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d10c      	bne.n	80051b0 <HCSR04_Init+0xd8>
    {
        __HAL_RCC_GPIOC_CLK_ENABLE();
 8005196:	4b77      	ldr	r3, [pc, #476]	; (8005374 <HCSR04_Init+0x29c>)
 8005198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800519a:	4a76      	ldr	r2, [pc, #472]	; (8005374 <HCSR04_Init+0x29c>)
 800519c:	f043 0304 	orr.w	r3, r3, #4
 80051a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80051a2:	4b74      	ldr	r3, [pc, #464]	; (8005374 <HCSR04_Init+0x29c>)
 80051a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051a6:	f003 0304 	and.w	r3, r3, #4
 80051aa:	617b      	str	r3, [r7, #20]
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	e02e      	b.n	800520e <HCSR04_Init+0x136>
    }
    else if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOD)
 80051b0:	79fa      	ldrb	r2, [r7, #7]
 80051b2:	496f      	ldr	r1, [pc, #444]	; (8005370 <HCSR04_Init+0x298>)
 80051b4:	4613      	mov	r3, r2
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	4413      	add	r3, r2
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	440b      	add	r3, r1
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a6f      	ldr	r2, [pc, #444]	; (8005380 <HCSR04_Init+0x2a8>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d10c      	bne.n	80051e0 <HCSR04_Init+0x108>
    {
        __HAL_RCC_GPIOD_CLK_ENABLE();
 80051c6:	4b6b      	ldr	r3, [pc, #428]	; (8005374 <HCSR04_Init+0x29c>)
 80051c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051ca:	4a6a      	ldr	r2, [pc, #424]	; (8005374 <HCSR04_Init+0x29c>)
 80051cc:	f043 0308 	orr.w	r3, r3, #8
 80051d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80051d2:	4b68      	ldr	r3, [pc, #416]	; (8005374 <HCSR04_Init+0x29c>)
 80051d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051d6:	f003 0308 	and.w	r3, r3, #8
 80051da:	613b      	str	r3, [r7, #16]
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	e016      	b.n	800520e <HCSR04_Init+0x136>
    }
    else if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOE)
 80051e0:	79fa      	ldrb	r2, [r7, #7]
 80051e2:	4963      	ldr	r1, [pc, #396]	; (8005370 <HCSR04_Init+0x298>)
 80051e4:	4613      	mov	r3, r2
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	4413      	add	r3, r2
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	440b      	add	r3, r1
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a64      	ldr	r2, [pc, #400]	; (8005384 <HCSR04_Init+0x2ac>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d10b      	bne.n	800520e <HCSR04_Init+0x136>
    {
        __HAL_RCC_GPIOE_CLK_ENABLE();
 80051f6:	4b5f      	ldr	r3, [pc, #380]	; (8005374 <HCSR04_Init+0x29c>)
 80051f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051fa:	4a5e      	ldr	r2, [pc, #376]	; (8005374 <HCSR04_Init+0x29c>)
 80051fc:	f043 0310 	orr.w	r3, r3, #16
 8005200:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005202:	4b5c      	ldr	r3, [pc, #368]	; (8005374 <HCSR04_Init+0x29c>)
 8005204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005206:	f003 0310 	and.w	r3, r3, #16
 800520a:	60fb      	str	r3, [r7, #12]
 800520c:	68fb      	ldr	r3, [r7, #12]
    }
    TRIG_GPIO_InitStruct.Pin = HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_PIN;
 800520e:	79fa      	ldrb	r2, [r7, #7]
 8005210:	4957      	ldr	r1, [pc, #348]	; (8005370 <HCSR04_Init+0x298>)
 8005212:	4613      	mov	r3, r2
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	4413      	add	r3, r2
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	440b      	add	r3, r1
 800521c:	3304      	adds	r3, #4
 800521e:	881b      	ldrh	r3, [r3, #0]
 8005220:	64fb      	str	r3, [r7, #76]	; 0x4c
    TRIG_GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005222:	2301      	movs	r3, #1
 8005224:	653b      	str	r3, [r7, #80]	; 0x50
    TRIG_GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005226:	2300      	movs	r3, #0
 8005228:	657b      	str	r3, [r7, #84]	; 0x54
    TRIG_GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800522a:	2300      	movs	r3, #0
 800522c:	65bb      	str	r3, [r7, #88]	; 0x58
	HAL_GPIO_Init(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO, &TRIG_GPIO_InitStruct);
 800522e:	79fa      	ldrb	r2, [r7, #7]
 8005230:	494f      	ldr	r1, [pc, #316]	; (8005370 <HCSR04_Init+0x298>)
 8005232:	4613      	mov	r3, r2
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	4413      	add	r3, r2
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	440b      	add	r3, r1
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8005242:	4611      	mov	r1, r2
 8005244:	4618      	mov	r0, r3
 8005246:	f7fb fb65 	bl	8000914 <HAL_GPIO_Init>

	/*--------[ Initialize The HCSR04 Static Global Info ]-------*/

	gs_HCSR04_info[au8_HCSR04_Instance].TMR_PSC = HCSR04_CfgParam[au8_HCSR04_Instance].TIM_Instance->PSC;
 800524a:	79fa      	ldrb	r2, [r7, #7]
 800524c:	4948      	ldr	r1, [pc, #288]	; (8005370 <HCSR04_Init+0x298>)
 800524e:	4613      	mov	r3, r2
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	4413      	add	r3, r2
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	440b      	add	r3, r1
 8005258:	3308      	adds	r3, #8
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	79fa      	ldrb	r2, [r7, #7]
 800525e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8005260:	4849      	ldr	r0, [pc, #292]	; (8005388 <HCSR04_Init+0x2b0>)
 8005262:	4613      	mov	r3, r2
 8005264:	00db      	lsls	r3, r3, #3
 8005266:	4413      	add	r3, r2
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	4403      	add	r3, r0
 800526c:	3304      	adds	r3, #4
 800526e:	6019      	str	r1, [r3, #0]
	gs_HCSR04_info[au8_HCSR04_Instance].TMR_ARR = HCSR04_CfgParam[au8_HCSR04_Instance].TIM_Instance->ARR;
 8005270:	79fa      	ldrb	r2, [r7, #7]
 8005272:	493f      	ldr	r1, [pc, #252]	; (8005370 <HCSR04_Init+0x298>)
 8005274:	4613      	mov	r3, r2
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	4413      	add	r3, r2
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	440b      	add	r3, r1
 800527e:	3308      	adds	r3, #8
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	79fa      	ldrb	r2, [r7, #7]
 8005284:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005286:	4840      	ldr	r0, [pc, #256]	; (8005388 <HCSR04_Init+0x2b0>)
 8005288:	4613      	mov	r3, r2
 800528a:	00db      	lsls	r3, r3, #3
 800528c:	4413      	add	r3, r2
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	4403      	add	r3, r0
 8005292:	3308      	adds	r3, #8
 8005294:	6019      	str	r1, [r3, #0]
	gs_HCSR04_info[au8_HCSR04_Instance].TMR_OVC = 0;
 8005296:	79fa      	ldrb	r2, [r7, #7]
 8005298:	493b      	ldr	r1, [pc, #236]	; (8005388 <HCSR04_Init+0x2b0>)
 800529a:	4613      	mov	r3, r2
 800529c:	00db      	lsls	r3, r3, #3
 800529e:	4413      	add	r3, r2
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	440b      	add	r3, r1
 80052a4:	3302      	adds	r3, #2
 80052a6:	2200      	movs	r2, #0
 80052a8:	801a      	strh	r2, [r3, #0]
		gs_HCSR04_info[au8_HCSR04_Instance].HTIM = TMR_Handle;
 80052aa:	79fa      	ldrb	r2, [r7, #7]
 80052ac:	4936      	ldr	r1, [pc, #216]	; (8005388 <HCSR04_Init+0x2b0>)
 80052ae:	4613      	mov	r3, r2
 80052b0:	00db      	lsls	r3, r3, #3
 80052b2:	4413      	add	r3, r2
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	440b      	add	r3, r1
 80052b8:	331c      	adds	r3, #28
 80052ba:	683a      	ldr	r2, [r7, #0]
 80052bc:	601a      	str	r2, [r3, #0]
	if(gs_HCSR04_info[au8_HCSR04_Instance].TMR_ARR == 0)
 80052be:	79fa      	ldrb	r2, [r7, #7]
 80052c0:	4931      	ldr	r1, [pc, #196]	; (8005388 <HCSR04_Init+0x2b0>)
 80052c2:	4613      	mov	r3, r2
 80052c4:	00db      	lsls	r3, r3, #3
 80052c6:	4413      	add	r3, r2
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	440b      	add	r3, r1
 80052cc:	3308      	adds	r3, #8
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d10a      	bne.n	80052ea <HCSR04_Init+0x212>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].TMR_ARR = 65535;
 80052d4:	79fa      	ldrb	r2, [r7, #7]
 80052d6:	492c      	ldr	r1, [pc, #176]	; (8005388 <HCSR04_Init+0x2b0>)
 80052d8:	4613      	mov	r3, r2
 80052da:	00db      	lsls	r3, r3, #3
 80052dc:	4413      	add	r3, r2
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	440b      	add	r3, r1
 80052e2:	3308      	adds	r3, #8
 80052e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80052e8:	601a      	str	r2, [r3, #0]
	}
	if(HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH == TIM_CHANNEL_1)
 80052ea:	79fa      	ldrb	r2, [r7, #7]
 80052ec:	4920      	ldr	r1, [pc, #128]	; (8005370 <HCSR04_Init+0x298>)
 80052ee:	4613      	mov	r3, r2
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	4413      	add	r3, r2
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	440b      	add	r3, r1
 80052f8:	330c      	adds	r3, #12
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d10a      	bne.n	8005316 <HCSR04_Init+0x23e>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_1;
 8005300:	79fa      	ldrb	r2, [r7, #7]
 8005302:	4921      	ldr	r1, [pc, #132]	; (8005388 <HCSR04_Init+0x2b0>)
 8005304:	4613      	mov	r3, r2
 8005306:	00db      	lsls	r3, r3, #3
 8005308:	4413      	add	r3, r2
 800530a:	009b      	lsls	r3, r3, #2
 800530c:	440b      	add	r3, r1
 800530e:	3320      	adds	r3, #32
 8005310:	2201      	movs	r2, #1
 8005312:	701a      	strb	r2, [r3, #0]
 8005314:	e04f      	b.n	80053b6 <HCSR04_Init+0x2de>
	}
	else if(HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH == TIM_CHANNEL_2)
 8005316:	79fa      	ldrb	r2, [r7, #7]
 8005318:	4915      	ldr	r1, [pc, #84]	; (8005370 <HCSR04_Init+0x298>)
 800531a:	4613      	mov	r3, r2
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	4413      	add	r3, r2
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	440b      	add	r3, r1
 8005324:	330c      	adds	r3, #12
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2b04      	cmp	r3, #4
 800532a:	d10a      	bne.n	8005342 <HCSR04_Init+0x26a>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_2;
 800532c:	79fa      	ldrb	r2, [r7, #7]
 800532e:	4916      	ldr	r1, [pc, #88]	; (8005388 <HCSR04_Init+0x2b0>)
 8005330:	4613      	mov	r3, r2
 8005332:	00db      	lsls	r3, r3, #3
 8005334:	4413      	add	r3, r2
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	440b      	add	r3, r1
 800533a:	3320      	adds	r3, #32
 800533c:	2202      	movs	r2, #2
 800533e:	701a      	strb	r2, [r3, #0]
 8005340:	e039      	b.n	80053b6 <HCSR04_Init+0x2de>
	}
	else if(HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH == TIM_CHANNEL_3)
 8005342:	79fa      	ldrb	r2, [r7, #7]
 8005344:	490a      	ldr	r1, [pc, #40]	; (8005370 <HCSR04_Init+0x298>)
 8005346:	4613      	mov	r3, r2
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	4413      	add	r3, r2
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	440b      	add	r3, r1
 8005350:	330c      	adds	r3, #12
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2b08      	cmp	r3, #8
 8005356:	d119      	bne.n	800538c <HCSR04_Init+0x2b4>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_3;
 8005358:	79fa      	ldrb	r2, [r7, #7]
 800535a:	490b      	ldr	r1, [pc, #44]	; (8005388 <HCSR04_Init+0x2b0>)
 800535c:	4613      	mov	r3, r2
 800535e:	00db      	lsls	r3, r3, #3
 8005360:	4413      	add	r3, r2
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	440b      	add	r3, r1
 8005366:	3320      	adds	r3, #32
 8005368:	2204      	movs	r2, #4
 800536a:	701a      	strb	r2, [r3, #0]
 800536c:	e023      	b.n	80053b6 <HCSR04_Init+0x2de>
 800536e:	bf00      	nop
 8005370:	08005de0 	.word	0x08005de0
 8005374:	40021000 	.word	0x40021000
 8005378:	48000400 	.word	0x48000400
 800537c:	48000800 	.word	0x48000800
 8005380:	48000c00 	.word	0x48000c00
 8005384:	48001000 	.word	0x48001000
 8005388:	2000002c 	.word	0x2000002c
	}
	else if(HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH == TIM_CHANNEL_4)
 800538c:	79fa      	ldrb	r2, [r7, #7]
 800538e:	4941      	ldr	r1, [pc, #260]	; (8005494 <HCSR04_Init+0x3bc>)
 8005390:	4613      	mov	r3, r2
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	4413      	add	r3, r2
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	440b      	add	r3, r1
 800539a:	330c      	adds	r3, #12
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2b0c      	cmp	r3, #12
 80053a0:	d109      	bne.n	80053b6 <HCSR04_Init+0x2de>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_4;
 80053a2:	79fa      	ldrb	r2, [r7, #7]
 80053a4:	493c      	ldr	r1, [pc, #240]	; (8005498 <HCSR04_Init+0x3c0>)
 80053a6:	4613      	mov	r3, r2
 80053a8:	00db      	lsls	r3, r3, #3
 80053aa:	4413      	add	r3, r2
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	440b      	add	r3, r1
 80053b0:	3320      	adds	r3, #32
 80053b2:	2208      	movs	r2, #8
 80053b4:	701a      	strb	r2, [r3, #0]
	}

	/*--------[ Configure The HCSR04 IC Timer Channel ]-------*/

	TMR_Handle->Instance = HCSR04_CfgParam[au8_HCSR04_Instance].TIM_Instance;
 80053b6:	79fa      	ldrb	r2, [r7, #7]
 80053b8:	4936      	ldr	r1, [pc, #216]	; (8005494 <HCSR04_Init+0x3bc>)
 80053ba:	4613      	mov	r3, r2
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	4413      	add	r3, r2
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	440b      	add	r3, r1
 80053c4:	3308      	adds	r3, #8
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	601a      	str	r2, [r3, #0]
	TMR_Handle->Init.Prescaler = gs_HCSR04_info[au8_HCSR04_Instance].TMR_PSC;
 80053cc:	79fa      	ldrb	r2, [r7, #7]
 80053ce:	4932      	ldr	r1, [pc, #200]	; (8005498 <HCSR04_Init+0x3c0>)
 80053d0:	4613      	mov	r3, r2
 80053d2:	00db      	lsls	r3, r3, #3
 80053d4:	4413      	add	r3, r2
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	440b      	add	r3, r1
 80053da:	3304      	adds	r3, #4
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	605a      	str	r2, [r3, #4]
	TMR_Handle->Init.CounterMode = TIM_COUNTERMODE_UP;
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	2200      	movs	r2, #0
 80053e6:	609a      	str	r2, [r3, #8]
	TMR_Handle->Init.Period = gs_HCSR04_info[au8_HCSR04_Instance].TMR_ARR;
 80053e8:	79fa      	ldrb	r2, [r7, #7]
 80053ea:	492b      	ldr	r1, [pc, #172]	; (8005498 <HCSR04_Init+0x3c0>)
 80053ec:	4613      	mov	r3, r2
 80053ee:	00db      	lsls	r3, r3, #3
 80053f0:	4413      	add	r3, r2
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	440b      	add	r3, r1
 80053f6:	3308      	adds	r3, #8
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	60da      	str	r2, [r3, #12]
	TMR_Handle->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	2200      	movs	r2, #0
 8005402:	611a      	str	r2, [r3, #16]
	TMR_Handle->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	2280      	movs	r2, #128	; 0x80
 8005408:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(TMR_Handle);
 800540a:	6838      	ldr	r0, [r7, #0]
 800540c:	f7fc ff7e 	bl	800230c <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005410:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005414:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_TIM_ConfigClockSource(TMR_Handle, &sClockSourceConfig);
 8005416:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800541a:	4619      	mov	r1, r3
 800541c:	6838      	ldr	r0, [r7, #0]
 800541e:	f7fd fbef 	bl	8002c00 <HAL_TIM_ConfigClockSource>
	HAL_TIM_IC_Init(TMR_Handle);
 8005422:	6838      	ldr	r0, [r7, #0]
 8005424:	f7fd f89b 	bl	800255e <HAL_TIM_IC_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005428:	2300      	movs	r3, #0
 800542a:	633b      	str	r3, [r7, #48]	; 0x30
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800542c:	2300      	movs	r3, #0
 800542e:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_TIMEx_MasterConfigSynchronization(TMR_Handle, &sMasterConfig);
 8005430:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005434:	4619      	mov	r1, r3
 8005436:	6838      	ldr	r0, [r7, #0]
 8005438:	f7fe faba 	bl	80039b0 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800543c:	2300      	movs	r3, #0
 800543e:	623b      	str	r3, [r7, #32]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8005440:	2301      	movs	r3, #1
 8005442:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8005444:	2300      	movs	r3, #0
 8005446:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigIC.ICFilter = 0;
 8005448:	2300      	movs	r3, #0
 800544a:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_TIM_IC_ConfigChannel(TMR_Handle, &sConfigIC, HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH);
 800544c:	79fa      	ldrb	r2, [r7, #7]
 800544e:	4911      	ldr	r1, [pc, #68]	; (8005494 <HCSR04_Init+0x3bc>)
 8005450:	4613      	mov	r3, r2
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	4413      	add	r3, r2
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	440b      	add	r3, r1
 800545a:	330c      	adds	r3, #12
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	f107 0320 	add.w	r3, r7, #32
 8005462:	4619      	mov	r1, r3
 8005464:	6838      	ldr	r0, [r7, #0]
 8005466:	f7fd fa1b 	bl	80028a0 <HAL_TIM_IC_ConfigChannel>

	/*--------[ Start The ICU Channel ]-------*/

	HAL_TIM_Base_Start_IT(TMR_Handle);
 800546a:	6838      	ldr	r0, [r7, #0]
 800546c:	f7fc ffb0 	bl	80023d0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(TMR_Handle, HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH);
 8005470:	79fa      	ldrb	r2, [r7, #7]
 8005472:	4908      	ldr	r1, [pc, #32]	; (8005494 <HCSR04_Init+0x3bc>)
 8005474:	4613      	mov	r3, r2
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	4413      	add	r3, r2
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	440b      	add	r3, r1
 800547e:	330c      	adds	r3, #12
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4619      	mov	r1, r3
 8005484:	6838      	ldr	r0, [r7, #0]
 8005486:	f7fd f8c1 	bl	800260c <HAL_TIM_IC_Start_IT>
}
 800548a:	bf00      	nop
 800548c:	3760      	adds	r7, #96	; 0x60
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop
 8005494:	08005de0 	.word	0x08005de0
 8005498:	2000002c 	.word	0x2000002c

0800549c <HCSR04_Read>:
		}
	}
}

float HCSR04_Read(uint8_t au8_HCSR04_Instance)
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	4603      	mov	r3, r0
 80054a4:	71fb      	strb	r3, [r7, #7]
	return gs_HCSR04_info[au8_HCSR04_Instance].DISTANCE;
 80054a6:	79fa      	ldrb	r2, [r7, #7]
 80054a8:	4908      	ldr	r1, [pc, #32]	; (80054cc <HCSR04_Read+0x30>)
 80054aa:	4613      	mov	r3, r2
 80054ac:	00db      	lsls	r3, r3, #3
 80054ae:	4413      	add	r3, r2
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	440b      	add	r3, r1
 80054b4:	3318      	adds	r3, #24
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	ee07 3a90 	vmov	s15, r3
}
 80054bc:	eeb0 0a67 	vmov.f32	s0, s15
 80054c0:	370c      	adds	r7, #12
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr
 80054ca:	bf00      	nop
 80054cc:	2000002c 	.word	0x2000002c

080054d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80054d4:	f7fa fff6 	bl	80004c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80054d8:	f000 f82e 	bl	8005538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80054dc:	f000 f912 	bl	8005704 <MX_GPIO_Init>
  MX_TIM2_Init();
 80054e0:	f000 f87c 	bl	80055dc <MX_TIM2_Init>

  MX_USART2_UART_Init();
 80054e4:	f000 f8de 	bl	80056a4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //MX_TIM3_Init();

  //Start the PWM mode on the channel of timer1
  HAL_TIMEx_PWMN_Start(&htim2, TIM_CHANNEL_1);
 80054e8:	2100      	movs	r1, #0
 80054ea:	480e      	ldr	r0, [pc, #56]	; (8005524 <main+0x54>)
 80054ec:	f7fe f9a6 	bl	800383c <HAL_TIMEx_PWMN_Start>

  //Start the PWM mode on the channel of timer2
  HAL_TIMEx_PWMN_Start(&htim2, TIM_CHANNEL_2);
 80054f0:	2104      	movs	r1, #4
 80054f2:	480c      	ldr	r0, [pc, #48]	; (8005524 <main+0x54>)
 80054f4:	f7fe f9a2 	bl	800383c <HAL_TIMEx_PWMN_Start>

  //Setup the trigger for the first reading from the UART.
  HAL_UART_Receive_IT(&huart2, RX_BUFFER, Buffer_len);
 80054f8:	2203      	movs	r2, #3
 80054fa:	490b      	ldr	r1, [pc, #44]	; (8005528 <main+0x58>)
 80054fc:	480b      	ldr	r0, [pc, #44]	; (800552c <main+0x5c>)
 80054fe:	f7fe fb53 	bl	8003ba8 <HAL_UART_Receive_IT>

  //Initializing the HCSR04 with the ID HCSR04_SENSOR1 attached to Timer 2.
  HCSR04_Init(HCSR04_SENSOR1, &htim3); // Am using Timer 3 to capture signal events (rising, falling) for the HCSR04 sensor.
 8005502:	490b      	ldr	r1, [pc, #44]	; (8005530 <main+0x60>)
 8005504:	2000      	movs	r0, #0
 8005506:	f7ff fde7 	bl	80050d8 <HCSR04_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	//Until this stage we will be using the range function to return the distance an monitoring it using the Live expression.
	Distance = Range_to_obstacle(HCSR04_SENSOR1);
 800550a:	2000      	movs	r0, #0
 800550c:	f000 fa4c 	bl	80059a8 <Range_to_obstacle>
 8005510:	eef0 7a40 	vmov.f32	s15, s0
 8005514:	4b07      	ldr	r3, [pc, #28]	; (8005534 <main+0x64>)
 8005516:	edc3 7a00 	vstr	s15, [r3]
	HAL_Delay(100);
 800551a:	2064      	movs	r0, #100	; 0x64
 800551c:	f7fb f846 	bl	80005ac <HAL_Delay>
	Distance = Range_to_obstacle(HCSR04_SENSOR1);
 8005520:	e7f3      	b.n	800550a <main+0x3a>
 8005522:	bf00      	nop
 8005524:	20000050 	.word	0x20000050
 8005528:	2000016c 	.word	0x2000016c
 800552c:	200000e8 	.word	0x200000e8
 8005530:	2000009c 	.word	0x2000009c
 8005534:	20000170 	.word	0x20000170

08005538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b096      	sub	sp, #88	; 0x58
 800553c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800553e:	f107 0314 	add.w	r3, r7, #20
 8005542:	2244      	movs	r2, #68	; 0x44
 8005544:	2100      	movs	r1, #0
 8005546:	4618      	mov	r0, r3
 8005548:	f000 fc12 	bl	8005d70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800554c:	463b      	mov	r3, r7
 800554e:	2200      	movs	r2, #0
 8005550:	601a      	str	r2, [r3, #0]
 8005552:	605a      	str	r2, [r3, #4]
 8005554:	609a      	str	r2, [r3, #8]
 8005556:	60da      	str	r2, [r3, #12]
 8005558:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800555a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800555e:	f7fb fbc3 	bl	8000ce8 <HAL_PWREx_ControlVoltageScaling>
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d001      	beq.n	800556c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8005568:	f000 fa41 	bl	80059ee <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800556c:	2310      	movs	r3, #16
 800556e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8005570:	2301      	movs	r3, #1
 8005572:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8005574:	2300      	movs	r3, #0
 8005576:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8005578:	2360      	movs	r3, #96	; 0x60
 800557a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800557c:	2302      	movs	r3, #2
 800557e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8005580:	2301      	movs	r3, #1
 8005582:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8005584:	2301      	movs	r3, #1
 8005586:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8005588:	2314      	movs	r3, #20
 800558a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800558c:	2307      	movs	r3, #7
 800558e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8005590:	2302      	movs	r3, #2
 8005592:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005594:	2302      	movs	r3, #2
 8005596:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005598:	f107 0314 	add.w	r3, r7, #20
 800559c:	4618      	mov	r0, r3
 800559e:	f7fb fbf9 	bl	8000d94 <HAL_RCC_OscConfig>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d001      	beq.n	80055ac <SystemClock_Config+0x74>
  {
    Error_Handler();
 80055a8:	f000 fa21 	bl	80059ee <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80055ac:	230f      	movs	r3, #15
 80055ae:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80055b0:	2303      	movs	r3, #3
 80055b2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80055b4:	2380      	movs	r3, #128	; 0x80
 80055b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80055b8:	2300      	movs	r3, #0
 80055ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80055bc:	2300      	movs	r3, #0
 80055be:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80055c0:	463b      	mov	r3, r7
 80055c2:	2101      	movs	r1, #1
 80055c4:	4618      	mov	r0, r3
 80055c6:	f7fb ffc1 	bl	800154c <HAL_RCC_ClockConfig>
 80055ca:	4603      	mov	r3, r0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d001      	beq.n	80055d4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80055d0:	f000 fa0d 	bl	80059ee <Error_Handler>
  }
}
 80055d4:	bf00      	nop
 80055d6:	3758      	adds	r7, #88	; 0x58
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b08a      	sub	sp, #40	; 0x28
 80055e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80055e2:	f107 031c 	add.w	r3, r7, #28
 80055e6:	2200      	movs	r2, #0
 80055e8:	601a      	str	r2, [r3, #0]
 80055ea:	605a      	str	r2, [r3, #4]
 80055ec:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80055ee:	463b      	mov	r3, r7
 80055f0:	2200      	movs	r2, #0
 80055f2:	601a      	str	r2, [r3, #0]
 80055f4:	605a      	str	r2, [r3, #4]
 80055f6:	609a      	str	r2, [r3, #8]
 80055f8:	60da      	str	r2, [r3, #12]
 80055fa:	611a      	str	r2, [r3, #16]
 80055fc:	615a      	str	r2, [r3, #20]
 80055fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005600:	4b27      	ldr	r3, [pc, #156]	; (80056a0 <MX_TIM2_Init+0xc4>)
 8005602:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005606:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8005608:	4b25      	ldr	r3, [pc, #148]	; (80056a0 <MX_TIM2_Init+0xc4>)
 800560a:	2200      	movs	r2, #0
 800560c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800560e:	4b24      	ldr	r3, [pc, #144]	; (80056a0 <MX_TIM2_Init+0xc4>)
 8005610:	2200      	movs	r2, #0
 8005612:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8005614:	4b22      	ldr	r3, [pc, #136]	; (80056a0 <MX_TIM2_Init+0xc4>)
 8005616:	f04f 32ff 	mov.w	r2, #4294967295
 800561a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800561c:	4b20      	ldr	r3, [pc, #128]	; (80056a0 <MX_TIM2_Init+0xc4>)
 800561e:	2200      	movs	r2, #0
 8005620:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005622:	4b1f      	ldr	r3, [pc, #124]	; (80056a0 <MX_TIM2_Init+0xc4>)
 8005624:	2200      	movs	r2, #0
 8005626:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8005628:	481d      	ldr	r0, [pc, #116]	; (80056a0 <MX_TIM2_Init+0xc4>)
 800562a:	f7fc ff41 	bl	80024b0 <HAL_TIM_PWM_Init>
 800562e:	4603      	mov	r3, r0
 8005630:	2b00      	cmp	r3, #0
 8005632:	d001      	beq.n	8005638 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8005634:	f000 f9db 	bl	80059ee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005638:	2300      	movs	r3, #0
 800563a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800563c:	2300      	movs	r3, #0
 800563e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005640:	f107 031c 	add.w	r3, r7, #28
 8005644:	4619      	mov	r1, r3
 8005646:	4816      	ldr	r0, [pc, #88]	; (80056a0 <MX_TIM2_Init+0xc4>)
 8005648:	f7fe f9b2 	bl	80039b0 <HAL_TIMEx_MasterConfigSynchronization>
 800564c:	4603      	mov	r3, r0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d001      	beq.n	8005656 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8005652:	f000 f9cc 	bl	80059ee <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005656:	2360      	movs	r3, #96	; 0x60
 8005658:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800565a:	2300      	movs	r3, #0
 800565c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800565e:	2300      	movs	r3, #0
 8005660:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005662:	2300      	movs	r3, #0
 8005664:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005666:	463b      	mov	r3, r7
 8005668:	2200      	movs	r2, #0
 800566a:	4619      	mov	r1, r3
 800566c:	480c      	ldr	r0, [pc, #48]	; (80056a0 <MX_TIM2_Init+0xc4>)
 800566e:	f7fd f9b3 	bl	80029d8 <HAL_TIM_PWM_ConfigChannel>
 8005672:	4603      	mov	r3, r0
 8005674:	2b00      	cmp	r3, #0
 8005676:	d001      	beq.n	800567c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8005678:	f000 f9b9 	bl	80059ee <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800567c:	463b      	mov	r3, r7
 800567e:	2204      	movs	r2, #4
 8005680:	4619      	mov	r1, r3
 8005682:	4807      	ldr	r0, [pc, #28]	; (80056a0 <MX_TIM2_Init+0xc4>)
 8005684:	f7fd f9a8 	bl	80029d8 <HAL_TIM_PWM_ConfigChannel>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d001      	beq.n	8005692 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800568e:	f000 f9ae 	bl	80059ee <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8005692:	4803      	ldr	r0, [pc, #12]	; (80056a0 <MX_TIM2_Init+0xc4>)
 8005694:	f000 fa34 	bl	8005b00 <HAL_TIM_MspPostInit>

}
 8005698:	bf00      	nop
 800569a:	3728      	adds	r7, #40	; 0x28
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	20000050 	.word	0x20000050

080056a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80056a8:	4b14      	ldr	r3, [pc, #80]	; (80056fc <MX_USART2_UART_Init+0x58>)
 80056aa:	4a15      	ldr	r2, [pc, #84]	; (8005700 <MX_USART2_UART_Init+0x5c>)
 80056ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80056ae:	4b13      	ldr	r3, [pc, #76]	; (80056fc <MX_USART2_UART_Init+0x58>)
 80056b0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80056b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80056b6:	4b11      	ldr	r3, [pc, #68]	; (80056fc <MX_USART2_UART_Init+0x58>)
 80056b8:	2200      	movs	r2, #0
 80056ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80056bc:	4b0f      	ldr	r3, [pc, #60]	; (80056fc <MX_USART2_UART_Init+0x58>)
 80056be:	2200      	movs	r2, #0
 80056c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80056c2:	4b0e      	ldr	r3, [pc, #56]	; (80056fc <MX_USART2_UART_Init+0x58>)
 80056c4:	2200      	movs	r2, #0
 80056c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80056c8:	4b0c      	ldr	r3, [pc, #48]	; (80056fc <MX_USART2_UART_Init+0x58>)
 80056ca:	220c      	movs	r2, #12
 80056cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80056ce:	4b0b      	ldr	r3, [pc, #44]	; (80056fc <MX_USART2_UART_Init+0x58>)
 80056d0:	2200      	movs	r2, #0
 80056d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80056d4:	4b09      	ldr	r3, [pc, #36]	; (80056fc <MX_USART2_UART_Init+0x58>)
 80056d6:	2200      	movs	r2, #0
 80056d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80056da:	4b08      	ldr	r3, [pc, #32]	; (80056fc <MX_USART2_UART_Init+0x58>)
 80056dc:	2200      	movs	r2, #0
 80056de:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80056e0:	4b06      	ldr	r3, [pc, #24]	; (80056fc <MX_USART2_UART_Init+0x58>)
 80056e2:	2200      	movs	r2, #0
 80056e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80056e6:	4805      	ldr	r0, [pc, #20]	; (80056fc <MX_USART2_UART_Init+0x58>)
 80056e8:	f7fe fa0f 	bl	8003b0a <HAL_UART_Init>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d001      	beq.n	80056f6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80056f2:	f000 f97c 	bl	80059ee <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80056f6:	bf00      	nop
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	200000e8 	.word	0x200000e8
 8005700:	40004400 	.word	0x40004400

08005704 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b088      	sub	sp, #32
 8005708:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800570a:	f107 030c 	add.w	r3, r7, #12
 800570e:	2200      	movs	r2, #0
 8005710:	601a      	str	r2, [r3, #0]
 8005712:	605a      	str	r2, [r3, #4]
 8005714:	609a      	str	r2, [r3, #8]
 8005716:	60da      	str	r2, [r3, #12]
 8005718:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800571a:	4b32      	ldr	r3, [pc, #200]	; (80057e4 <MX_GPIO_Init+0xe0>)
 800571c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800571e:	4a31      	ldr	r2, [pc, #196]	; (80057e4 <MX_GPIO_Init+0xe0>)
 8005720:	f043 0304 	orr.w	r3, r3, #4
 8005724:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005726:	4b2f      	ldr	r3, [pc, #188]	; (80057e4 <MX_GPIO_Init+0xe0>)
 8005728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800572a:	f003 0304 	and.w	r3, r3, #4
 800572e:	60bb      	str	r3, [r7, #8]
 8005730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005732:	4b2c      	ldr	r3, [pc, #176]	; (80057e4 <MX_GPIO_Init+0xe0>)
 8005734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005736:	4a2b      	ldr	r2, [pc, #172]	; (80057e4 <MX_GPIO_Init+0xe0>)
 8005738:	f043 0301 	orr.w	r3, r3, #1
 800573c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800573e:	4b29      	ldr	r3, [pc, #164]	; (80057e4 <MX_GPIO_Init+0xe0>)
 8005740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005742:	f003 0301 	and.w	r3, r3, #1
 8005746:	607b      	str	r3, [r7, #4]
 8005748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800574a:	4b26      	ldr	r3, [pc, #152]	; (80057e4 <MX_GPIO_Init+0xe0>)
 800574c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800574e:	4a25      	ldr	r2, [pc, #148]	; (80057e4 <MX_GPIO_Init+0xe0>)
 8005750:	f043 0302 	orr.w	r3, r3, #2
 8005754:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005756:	4b23      	ldr	r3, [pc, #140]	; (80057e4 <MX_GPIO_Init+0xe0>)
 8005758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800575a:	f003 0302 	and.w	r3, r3, #2
 800575e:	603b      	str	r3, [r7, #0]
 8005760:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8005762:	2200      	movs	r2, #0
 8005764:	2101      	movs	r1, #1
 8005766:	4820      	ldr	r0, [pc, #128]	; (80057e8 <MX_GPIO_Init+0xe4>)
 8005768:	f7fb fa7e 	bl	8000c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800576c:	2200      	movs	r2, #0
 800576e:	2120      	movs	r1, #32
 8005770:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005774:	f7fb fa78 	bl	8000c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8005778:	2200      	movs	r2, #0
 800577a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800577e:	481b      	ldr	r0, [pc, #108]	; (80057ec <MX_GPIO_Init+0xe8>)
 8005780:	f7fb fa72 	bl	8000c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005784:	2301      	movs	r3, #1
 8005786:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005788:	2301      	movs	r3, #1
 800578a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800578c:	2300      	movs	r3, #0
 800578e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005790:	2300      	movs	r3, #0
 8005792:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005794:	f107 030c 	add.w	r3, r7, #12
 8005798:	4619      	mov	r1, r3
 800579a:	4813      	ldr	r0, [pc, #76]	; (80057e8 <MX_GPIO_Init+0xe4>)
 800579c:	f7fb f8ba 	bl	8000914 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80057a0:	2320      	movs	r3, #32
 80057a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80057a4:	2301      	movs	r3, #1
 80057a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057a8:	2300      	movs	r3, #0
 80057aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057ac:	2300      	movs	r3, #0
 80057ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057b0:	f107 030c 	add.w	r3, r7, #12
 80057b4:	4619      	mov	r1, r3
 80057b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80057ba:	f7fb f8ab 	bl	8000914 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80057be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80057c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80057c4:	2301      	movs	r3, #1
 80057c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057c8:	2300      	movs	r3, #0
 80057ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057cc:	2300      	movs	r3, #0
 80057ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057d0:	f107 030c 	add.w	r3, r7, #12
 80057d4:	4619      	mov	r1, r3
 80057d6:	4805      	ldr	r0, [pc, #20]	; (80057ec <MX_GPIO_Init+0xe8>)
 80057d8:	f7fb f89c 	bl	8000914 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80057dc:	bf00      	nop
 80057de:	3720      	adds	r7, #32
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}
 80057e4:	40021000 	.word	0x40021000
 80057e8:	48000800 	.word	0x48000800
 80057ec:	48000400 	.word	0x48000400

080057f0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]

	uint16_t Speed = 0;
 80057f8:	2300      	movs	r3, #0
 80057fa:	81fb      	strh	r3, [r7, #14]
	x_speed = Speed;
 80057fc:	4a2d      	ldr	r2, [pc, #180]	; (80058b4 <HAL_UART_RxCpltCallback+0xc4>)
 80057fe:	89fb      	ldrh	r3, [r7, #14]
 8005800:	8013      	strh	r3, [r2, #0]
	//Check the Cplt callback function call belongs to the UART1 instance.
	if (huart == &huart2) {
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a2c      	ldr	r2, [pc, #176]	; (80058b8 <HAL_UART_RxCpltCallback+0xc8>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d14f      	bne.n	80058aa <HAL_UART_RxCpltCallback+0xba>
    // Commande reçue, effectuez des actions en fonction de RX_BUFFER[0]

    switch (RX_BUFFER[0]){
 800580a:	4b2c      	ldr	r3, [pc, #176]	; (80058bc <HAL_UART_RxCpltCallback+0xcc>)
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	3b42      	subs	r3, #66	; 0x42
 8005810:	2b09      	cmp	r3, #9
 8005812:	d844      	bhi.n	800589e <HAL_UART_RxCpltCallback+0xae>
 8005814:	a201      	add	r2, pc, #4	; (adr r2, 800581c <HAL_UART_RxCpltCallback+0x2c>)
 8005816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800581a:	bf00      	nop
 800581c:	08005845 	.word	0x08005845
 8005820:	0800584b 	.word	0x0800584b
 8005824:	08005851 	.word	0x08005851
 8005828:	08005857 	.word	0x08005857
 800582c:	0800585d 	.word	0x0800585d
 8005830:	0800589f 	.word	0x0800589f
 8005834:	0800589f 	.word	0x0800589f
 8005838:	0800589f 	.word	0x0800589f
 800583c:	08005863 	.word	0x08005863
 8005840:	08005881 	.word	0x08005881

      case 'B':
    	  Front_Light_Toggle();
 8005844:	f000 f83c 	bl	80058c0 <Front_Light_Toggle>
		  break;
 8005848:	e02a      	b.n	80058a0 <HAL_UART_RxCpltCallback+0xb0>

      case 'C':
    	  Back_Light_Toggle();
 800584a:	f000 f843 	bl	80058d4 <Back_Light_Toggle>
    	  break;
 800584e:	e027      	b.n	80058a0 <HAL_UART_RxCpltCallback+0xb0>

      case 'D':
    	  Turn_Left();
 8005850:	f000 f896 	bl	8005980 <Turn_Left>
    	  break;
 8005854:	e024      	b.n	80058a0 <HAL_UART_RxCpltCallback+0xb0>

      case 'E':
    	  Turn_Right();
 8005856:	f000 f89d 	bl	8005994 <Turn_Right>
    	  break;
 800585a:	e021      	b.n	80058a0 <HAL_UART_RxCpltCallback+0xb0>

      case 'F':
    	  Stop();
 800585c:	f000 f844 	bl	80058e8 <Stop>
    	  break;
 8005860:	e01e      	b.n	80058a0 <HAL_UART_RxCpltCallback+0xb0>
    	 //Dispaly the distance from the obstacle on an LCD. using the Range_to_obstacle() function
    	  break;

      case 'J':

    	Speed = (uint16_t) (RX_BUFFER[1]<<8 | RX_BUFFER[2]);
 8005862:	4b16      	ldr	r3, [pc, #88]	; (80058bc <HAL_UART_RxCpltCallback+0xcc>)
 8005864:	785b      	ldrb	r3, [r3, #1]
 8005866:	021b      	lsls	r3, r3, #8
 8005868:	b21a      	sxth	r2, r3
 800586a:	4b14      	ldr	r3, [pc, #80]	; (80058bc <HAL_UART_RxCpltCallback+0xcc>)
 800586c:	789b      	ldrb	r3, [r3, #2]
 800586e:	b21b      	sxth	r3, r3
 8005870:	4313      	orrs	r3, r2
 8005872:	b21b      	sxth	r3, r3
 8005874:	81fb      	strh	r3, [r7, #14]
    	ServoA_Speed_Calibration(Speed);
 8005876:	89fb      	ldrh	r3, [r7, #14]
 8005878:	4618      	mov	r0, r3
 800587a:	f000 f845 	bl	8005908 <ServoA_Speed_Calibration>
    	break;
 800587e:	e00f      	b.n	80058a0 <HAL_UART_RxCpltCallback+0xb0>

      case 'K':

      	Speed = (uint16_t) (RX_BUFFER[1]<<8 | RX_BUFFER[2]);
 8005880:	4b0e      	ldr	r3, [pc, #56]	; (80058bc <HAL_UART_RxCpltCallback+0xcc>)
 8005882:	785b      	ldrb	r3, [r3, #1]
 8005884:	021b      	lsls	r3, r3, #8
 8005886:	b21a      	sxth	r2, r3
 8005888:	4b0c      	ldr	r3, [pc, #48]	; (80058bc <HAL_UART_RxCpltCallback+0xcc>)
 800588a:	789b      	ldrb	r3, [r3, #2]
 800588c:	b21b      	sxth	r3, r3
 800588e:	4313      	orrs	r3, r2
 8005890:	b21b      	sxth	r3, r3
 8005892:	81fb      	strh	r3, [r7, #14]
    	ServoB_Speed_Calibration(Speed);
 8005894:	89fb      	ldrh	r3, [r7, #14]
 8005896:	4618      	mov	r0, r3
 8005898:	f000 f854 	bl	8005944 <ServoB_Speed_Calibration>
        break;
 800589c:	e000      	b.n	80058a0 <HAL_UART_RxCpltCallback+0xb0>

      default :
    	  //Print a message on the LCD to mention no action is specified.
    	break;
 800589e:	bf00      	nop
    }

    // Réactivez la réception UART pour la prochaine commande
    HAL_UART_Receive_IT(&huart2, RX_BUFFER, Buffer_len);
 80058a0:	2203      	movs	r2, #3
 80058a2:	4906      	ldr	r1, [pc, #24]	; (80058bc <HAL_UART_RxCpltCallback+0xcc>)
 80058a4:	4804      	ldr	r0, [pc, #16]	; (80058b8 <HAL_UART_RxCpltCallback+0xc8>)
 80058a6:	f7fe f97f 	bl	8003ba8 <HAL_UART_Receive_IT>
  }

}
 80058aa:	bf00      	nop
 80058ac:	3710      	adds	r7, #16
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	20000174 	.word	0x20000174
 80058b8:	200000e8 	.word	0x200000e8
 80058bc:	2000016c 	.word	0x2000016c

080058c0 <Front_Light_Toggle>:

void Front_Light_Toggle(){
 80058c0:	b580      	push	{r7, lr}
 80058c2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA,FL);
 80058c4:	2120      	movs	r1, #32
 80058c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80058ca:	f7fb f9e5 	bl	8000c98 <HAL_GPIO_TogglePin>
}
 80058ce:	bf00      	nop
 80058d0:	bd80      	pop	{r7, pc}
	...

080058d4 <Back_Light_Toggle>:

void Back_Light_Toggle(){
 80058d4:	b580      	push	{r7, lr}
 80058d6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOC,BL);
 80058d8:	2101      	movs	r1, #1
 80058da:	4802      	ldr	r0, [pc, #8]	; (80058e4 <Back_Light_Toggle+0x10>)
 80058dc:	f7fb f9dc 	bl	8000c98 <HAL_GPIO_TogglePin>
}
 80058e0:	bf00      	nop
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	48000800 	.word	0x48000800

080058e8 <Stop>:

void Stop(){
 80058e8:	b580      	push	{r7, lr}
 80058ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, MA, GPIO_PIN_RESET);
 80058ec:	2200      	movs	r2, #0
 80058ee:	2101      	movs	r1, #1
 80058f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80058f4:	f7fb f9b8 	bl	8000c68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, MB, GPIO_PIN_RESET);
 80058f8:	2200      	movs	r2, #0
 80058fa:	2102      	movs	r1, #2
 80058fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005900:	f7fb f9b2 	bl	8000c68 <HAL_GPIO_WritePin>
}
 8005904:	bf00      	nop
 8005906:	bd80      	pop	{r7, pc}

08005908 <ServoA_Speed_Calibration>:

// Code to calibrate the speed of Servo A based on the received speed parameter
void ServoA_Speed_Calibration(uint16_t speed) {
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	4603      	mov	r3, r0
 8005910:	80fb      	strh	r3, [r7, #6]

	uint32_t OCC_Value = 0;
 8005912:	2300      	movs	r3, #0
 8005914:	60fb      	str	r3, [r7, #12]
    // Use the received speed value to set the PWM duty cycle or pulse width
    // on the pin controlling Servo A (PB1 in this example)
    // Note: You may need to use a PWM library or HAL functions for precise control

	OCC_Value = MAP((uint32_t)speed, ARR_value, 180);
 8005916:	88fb      	ldrh	r3, [r7, #6]
 8005918:	22b4      	movs	r2, #180	; 0xb4
 800591a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800591e:	4618      	mov	r0, r3
 8005920:	f000 f852 	bl	80059c8 <MAP>
 8005924:	60f8      	str	r0, [r7, #12]
	x_OCC = OCC_Value;
 8005926:	4a05      	ldr	r2, [pc, #20]	; (800593c <ServoA_Speed_Calibration+0x34>)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, OCC_Value); // Channel 1 to control MA.
 800592c:	4b04      	ldr	r3, [pc, #16]	; (8005940 <ServoA_Speed_Calibration+0x38>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	68fa      	ldr	r2, [r7, #12]
 8005932:	635a      	str	r2, [r3, #52]	; 0x34
}
 8005934:	bf00      	nop
 8005936:	3710      	adds	r7, #16
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	20000178 	.word	0x20000178
 8005940:	20000050 	.word	0x20000050

08005944 <ServoB_Speed_Calibration>:

// Similar to ServoA_Speed_Calibration, adjust the logic for Servo B (PB2 in this example)
void ServoB_Speed_Calibration(uint16_t speed) {
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	4603      	mov	r3, r0
 800594c:	80fb      	strh	r3, [r7, #6]

	uint32_t OCC_Value = 0;
 800594e:	2300      	movs	r3, #0
 8005950:	60fb      	str	r3, [r7, #12]
    // Use the received speed value to set the PWM duty cycle or pulse width
    // on the pin controlling Servo B
	// MAp the speed with the available CCR1 range. (This step is crucial to cover the output capture/compare full range).

	OCC_Value = MAP((uint32_t)speed, ARR_value, 180);
 8005952:	88fb      	ldrh	r3, [r7, #6]
 8005954:	22b4      	movs	r2, #180	; 0xb4
 8005956:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800595a:	4618      	mov	r0, r3
 800595c:	f000 f834 	bl	80059c8 <MAP>
 8005960:	60f8      	str	r0, [r7, #12]
	x_OCC = OCC_Value;
 8005962:	4a05      	ldr	r2, [pc, #20]	; (8005978 <ServoB_Speed_Calibration+0x34>)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2, OCC_Value); // Channel 1 to control MA.
 8005968:	4b04      	ldr	r3, [pc, #16]	; (800597c <ServoB_Speed_Calibration+0x38>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8005970:	bf00      	nop
 8005972:	3710      	adds	r7, #16
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}
 8005978:	20000178 	.word	0x20000178
 800597c:	20000050 	.word	0x20000050

08005980 <Turn_Left>:

// Servo-Motor A is attached to the left side.
// Servo-Motor B is attached to the right side.

//Turning left: SPEED_SERVO_B > SPEED_SERVO_A
void Turn_Left(){
 8005980:	b580      	push	{r7, lr}
 8005982:	af00      	add	r7, sp, #0
	// Set ServoA to Turning_Speed1 and ServoB to Turning_Speed2
	ServoA_Speed_Calibration(Turning_Speed1);
 8005984:	203c      	movs	r0, #60	; 0x3c
 8005986:	f7ff ffbf 	bl	8005908 <ServoA_Speed_Calibration>
	ServoB_Speed_Calibration(Turning_Speed2);
 800598a:	2064      	movs	r0, #100	; 0x64
 800598c:	f7ff ffda 	bl	8005944 <ServoB_Speed_Calibration>
}
 8005990:	bf00      	nop
 8005992:	bd80      	pop	{r7, pc}

08005994 <Turn_Right>:

//Turning left: SPEED_SERVO_A > SPEED_SERVO_B
void Turn_Right(){
 8005994:	b580      	push	{r7, lr}
 8005996:	af00      	add	r7, sp, #0
	// Set ServoB to Turning_Speed1 and ServoA to Turning_Speed2
	ServoB_Speed_Calibration(Turning_Speed1);
 8005998:	203c      	movs	r0, #60	; 0x3c
 800599a:	f7ff ffd3 	bl	8005944 <ServoB_Speed_Calibration>
	ServoA_Speed_Calibration(Turning_Speed2);
 800599e:	2064      	movs	r0, #100	; 0x64
 80059a0:	f7ff ffb2 	bl	8005908 <ServoA_Speed_Calibration>
}
 80059a4:	bf00      	nop
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <Range_to_obstacle>:


float Range_to_obstacle(uint8_t au8_HCSR04_Instance){
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b082      	sub	sp, #8
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	4603      	mov	r3, r0
 80059b0:	71fb      	strb	r3, [r7, #7]
	return HCSR04_Read(au8_HCSR04_Instance);
 80059b2:	79fb      	ldrb	r3, [r7, #7]
 80059b4:	4618      	mov	r0, r3
 80059b6:	f7ff fd71 	bl	800549c <HCSR04_Read>
 80059ba:	eef0 7a40 	vmov.f32	s15, s0
}
 80059be:	eeb0 0a67 	vmov.f32	s0, s15
 80059c2:	3708      	adds	r7, #8
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}

080059c8 <MAP>:

//MAP function to Scale the giving results in order to match CCR Full range.
uint32_t MAP(uint32_t au32_IN, uint32_t au32_INmax, uint32_t au32_OUTmax)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b085      	sub	sp, #20
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	60b9      	str	r1, [r7, #8]
 80059d2:	607a      	str	r2, [r7, #4]
    return au32_IN * (au32_OUTmax/au32_INmax);
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059dc:	68fa      	ldr	r2, [r7, #12]
 80059de:	fb02 f303 	mul.w	r3, r2, r3
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3714      	adds	r7, #20
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr

080059ee <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80059ee:	b480      	push	{r7}
 80059f0:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80059f2:	b672      	cpsid	i
}
 80059f4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80059f6:	e7fe      	b.n	80059f6 <Error_Handler+0x8>

080059f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059fe:	4b0f      	ldr	r3, [pc, #60]	; (8005a3c <HAL_MspInit+0x44>)
 8005a00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a02:	4a0e      	ldr	r2, [pc, #56]	; (8005a3c <HAL_MspInit+0x44>)
 8005a04:	f043 0301 	orr.w	r3, r3, #1
 8005a08:	6613      	str	r3, [r2, #96]	; 0x60
 8005a0a:	4b0c      	ldr	r3, [pc, #48]	; (8005a3c <HAL_MspInit+0x44>)
 8005a0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a0e:	f003 0301 	and.w	r3, r3, #1
 8005a12:	607b      	str	r3, [r7, #4]
 8005a14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005a16:	4b09      	ldr	r3, [pc, #36]	; (8005a3c <HAL_MspInit+0x44>)
 8005a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a1a:	4a08      	ldr	r2, [pc, #32]	; (8005a3c <HAL_MspInit+0x44>)
 8005a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a20:	6593      	str	r3, [r2, #88]	; 0x58
 8005a22:	4b06      	ldr	r3, [pc, #24]	; (8005a3c <HAL_MspInit+0x44>)
 8005a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a2a:	603b      	str	r3, [r7, #0]
 8005a2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005a2e:	bf00      	nop
 8005a30:	370c      	adds	r7, #12
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr
 8005a3a:	bf00      	nop
 8005a3c:	40021000 	.word	0x40021000

08005a40 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b085      	sub	sp, #20
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a50:	d10b      	bne.n	8005a6a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005a52:	4b09      	ldr	r3, [pc, #36]	; (8005a78 <HAL_TIM_PWM_MspInit+0x38>)
 8005a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a56:	4a08      	ldr	r2, [pc, #32]	; (8005a78 <HAL_TIM_PWM_MspInit+0x38>)
 8005a58:	f043 0301 	orr.w	r3, r3, #1
 8005a5c:	6593      	str	r3, [r2, #88]	; 0x58
 8005a5e:	4b06      	ldr	r3, [pc, #24]	; (8005a78 <HAL_TIM_PWM_MspInit+0x38>)
 8005a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a62:	f003 0301 	and.w	r3, r3, #1
 8005a66:	60fb      	str	r3, [r7, #12]
 8005a68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8005a6a:	bf00      	nop
 8005a6c:	3714      	adds	r7, #20
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr
 8005a76:	bf00      	nop
 8005a78:	40021000 	.word	0x40021000

08005a7c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b08a      	sub	sp, #40	; 0x28
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a84:	f107 0314 	add.w	r3, r7, #20
 8005a88:	2200      	movs	r2, #0
 8005a8a:	601a      	str	r2, [r3, #0]
 8005a8c:	605a      	str	r2, [r3, #4]
 8005a8e:	609a      	str	r2, [r3, #8]
 8005a90:	60da      	str	r2, [r3, #12]
 8005a92:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a17      	ldr	r2, [pc, #92]	; (8005af8 <HAL_TIM_IC_MspInit+0x7c>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d128      	bne.n	8005af0 <HAL_TIM_IC_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005a9e:	4b17      	ldr	r3, [pc, #92]	; (8005afc <HAL_TIM_IC_MspInit+0x80>)
 8005aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aa2:	4a16      	ldr	r2, [pc, #88]	; (8005afc <HAL_TIM_IC_MspInit+0x80>)
 8005aa4:	f043 0302 	orr.w	r3, r3, #2
 8005aa8:	6593      	str	r3, [r2, #88]	; 0x58
 8005aaa:	4b14      	ldr	r3, [pc, #80]	; (8005afc <HAL_TIM_IC_MspInit+0x80>)
 8005aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aae:	f003 0302 	and.w	r3, r3, #2
 8005ab2:	613b      	str	r3, [r7, #16]
 8005ab4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ab6:	4b11      	ldr	r3, [pc, #68]	; (8005afc <HAL_TIM_IC_MspInit+0x80>)
 8005ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005aba:	4a10      	ldr	r2, [pc, #64]	; (8005afc <HAL_TIM_IC_MspInit+0x80>)
 8005abc:	f043 0301 	orr.w	r3, r3, #1
 8005ac0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005ac2:	4b0e      	ldr	r3, [pc, #56]	; (8005afc <HAL_TIM_IC_MspInit+0x80>)
 8005ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ac6:	f003 0301 	and.w	r3, r3, #1
 8005aca:	60fb      	str	r3, [r7, #12]
 8005acc:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005ace:	2340      	movs	r3, #64	; 0x40
 8005ad0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ad2:	2302      	movs	r3, #2
 8005ad4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ada:	2300      	movs	r3, #0
 8005adc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005ade:	2302      	movs	r3, #2
 8005ae0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ae2:	f107 0314 	add.w	r3, r7, #20
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005aec:	f7fa ff12 	bl	8000914 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8005af0:	bf00      	nop
 8005af2:	3728      	adds	r7, #40	; 0x28
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	40000400 	.word	0x40000400
 8005afc:	40021000 	.word	0x40021000

08005b00 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b088      	sub	sp, #32
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b08:	f107 030c 	add.w	r3, r7, #12
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	601a      	str	r2, [r3, #0]
 8005b10:	605a      	str	r2, [r3, #4]
 8005b12:	609a      	str	r2, [r3, #8]
 8005b14:	60da      	str	r2, [r3, #12]
 8005b16:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b20:	d11c      	bne.n	8005b5c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b22:	4b10      	ldr	r3, [pc, #64]	; (8005b64 <HAL_TIM_MspPostInit+0x64>)
 8005b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b26:	4a0f      	ldr	r2, [pc, #60]	; (8005b64 <HAL_TIM_MspPostInit+0x64>)
 8005b28:	f043 0301 	orr.w	r3, r3, #1
 8005b2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005b2e:	4b0d      	ldr	r3, [pc, #52]	; (8005b64 <HAL_TIM_MspPostInit+0x64>)
 8005b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b32:	f003 0301 	and.w	r3, r3, #1
 8005b36:	60bb      	str	r3, [r7, #8]
 8005b38:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005b3a:	2303      	movs	r3, #3
 8005b3c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b3e:	2302      	movs	r3, #2
 8005b40:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b42:	2300      	movs	r3, #0
 8005b44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b46:	2300      	movs	r3, #0
 8005b48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b4e:	f107 030c 	add.w	r3, r7, #12
 8005b52:	4619      	mov	r1, r3
 8005b54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005b58:	f7fa fedc 	bl	8000914 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8005b5c:	bf00      	nop
 8005b5e:	3720      	adds	r7, #32
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}
 8005b64:	40021000 	.word	0x40021000

08005b68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b0ac      	sub	sp, #176	; 0xb0
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b70:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005b74:	2200      	movs	r2, #0
 8005b76:	601a      	str	r2, [r3, #0]
 8005b78:	605a      	str	r2, [r3, #4]
 8005b7a:	609a      	str	r2, [r3, #8]
 8005b7c:	60da      	str	r2, [r3, #12]
 8005b7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005b80:	f107 0314 	add.w	r3, r7, #20
 8005b84:	2288      	movs	r2, #136	; 0x88
 8005b86:	2100      	movs	r1, #0
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f000 f8f1 	bl	8005d70 <memset>
  if(huart->Instance==USART2)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a25      	ldr	r2, [pc, #148]	; (8005c28 <HAL_UART_MspInit+0xc0>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d143      	bne.n	8005c20 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005b98:	2302      	movs	r3, #2
 8005b9a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005ba0:	f107 0314 	add.w	r3, r7, #20
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f7fb fef5 	bl	8001994 <HAL_RCCEx_PeriphCLKConfig>
 8005baa:	4603      	mov	r3, r0
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d001      	beq.n	8005bb4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8005bb0:	f7ff ff1d 	bl	80059ee <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005bb4:	4b1d      	ldr	r3, [pc, #116]	; (8005c2c <HAL_UART_MspInit+0xc4>)
 8005bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bb8:	4a1c      	ldr	r2, [pc, #112]	; (8005c2c <HAL_UART_MspInit+0xc4>)
 8005bba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bbe:	6593      	str	r3, [r2, #88]	; 0x58
 8005bc0:	4b1a      	ldr	r3, [pc, #104]	; (8005c2c <HAL_UART_MspInit+0xc4>)
 8005bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bc8:	613b      	str	r3, [r7, #16]
 8005bca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005bcc:	4b17      	ldr	r3, [pc, #92]	; (8005c2c <HAL_UART_MspInit+0xc4>)
 8005bce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bd0:	4a16      	ldr	r2, [pc, #88]	; (8005c2c <HAL_UART_MspInit+0xc4>)
 8005bd2:	f043 0301 	orr.w	r3, r3, #1
 8005bd6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005bd8:	4b14      	ldr	r3, [pc, #80]	; (8005c2c <HAL_UART_MspInit+0xc4>)
 8005bda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bdc:	f003 0301 	and.w	r3, r3, #1
 8005be0:	60fb      	str	r3, [r7, #12]
 8005be2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005be4:	230c      	movs	r3, #12
 8005be6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bea:	2302      	movs	r3, #2
 8005bec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005bfc:	2307      	movs	r3, #7
 8005bfe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c02:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005c06:	4619      	mov	r1, r3
 8005c08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005c0c:	f7fa fe82 	bl	8000914 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005c10:	2200      	movs	r2, #0
 8005c12:	2100      	movs	r1, #0
 8005c14:	2026      	movs	r0, #38	; 0x26
 8005c16:	f7fa fdc8 	bl	80007aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005c1a:	2026      	movs	r0, #38	; 0x26
 8005c1c:	f7fa fde1 	bl	80007e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005c20:	bf00      	nop
 8005c22:	37b0      	adds	r7, #176	; 0xb0
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	40004400 	.word	0x40004400
 8005c2c:	40021000 	.word	0x40021000

08005c30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005c30:	b480      	push	{r7}
 8005c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005c34:	e7fe      	b.n	8005c34 <NMI_Handler+0x4>

08005c36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005c36:	b480      	push	{r7}
 8005c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005c3a:	e7fe      	b.n	8005c3a <HardFault_Handler+0x4>

08005c3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005c40:	e7fe      	b.n	8005c40 <MemManage_Handler+0x4>

08005c42 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005c42:	b480      	push	{r7}
 8005c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005c46:	e7fe      	b.n	8005c46 <BusFault_Handler+0x4>

08005c48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005c4c:	e7fe      	b.n	8005c4c <UsageFault_Handler+0x4>

08005c4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005c4e:	b480      	push	{r7}
 8005c50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005c52:	bf00      	nop
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005c60:	bf00      	nop
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr

08005c6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005c6a:	b480      	push	{r7}
 8005c6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005c6e:	bf00      	nop
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005c7c:	f7fa fc76 	bl	800056c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005c80:	bf00      	nop
 8005c82:	bd80      	pop	{r7, pc}

08005c84 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005c88:	4802      	ldr	r0, [pc, #8]	; (8005c94 <USART2_IRQHandler+0x10>)
 8005c8a:	f7fd ffe3 	bl	8003c54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005c8e:	bf00      	nop
 8005c90:	bd80      	pop	{r7, pc}
 8005c92:	bf00      	nop
 8005c94:	200000e8 	.word	0x200000e8

08005c98 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8005c9c:	4b06      	ldr	r3, [pc, #24]	; (8005cb8 <SystemInit+0x20>)
 8005c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ca2:	4a05      	ldr	r2, [pc, #20]	; (8005cb8 <SystemInit+0x20>)
 8005ca4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005ca8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8005cac:	bf00      	nop
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr
 8005cb6:	bf00      	nop
 8005cb8:	e000ed00 	.word	0xe000ed00

08005cbc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8005cbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005cf4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005cc0:	f7ff ffea 	bl	8005c98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005cc4:	480c      	ldr	r0, [pc, #48]	; (8005cf8 <LoopForever+0x6>)
  ldr r1, =_edata
 8005cc6:	490d      	ldr	r1, [pc, #52]	; (8005cfc <LoopForever+0xa>)
  ldr r2, =_sidata
 8005cc8:	4a0d      	ldr	r2, [pc, #52]	; (8005d00 <LoopForever+0xe>)
  movs r3, #0
 8005cca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005ccc:	e002      	b.n	8005cd4 <LoopCopyDataInit>

08005cce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005cce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005cd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005cd2:	3304      	adds	r3, #4

08005cd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005cd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005cd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005cd8:	d3f9      	bcc.n	8005cce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005cda:	4a0a      	ldr	r2, [pc, #40]	; (8005d04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005cdc:	4c0a      	ldr	r4, [pc, #40]	; (8005d08 <LoopForever+0x16>)
  movs r3, #0
 8005cde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005ce0:	e001      	b.n	8005ce6 <LoopFillZerobss>

08005ce2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005ce2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005ce4:	3204      	adds	r2, #4

08005ce6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005ce6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005ce8:	d3fb      	bcc.n	8005ce2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005cea:	f000 f849 	bl	8005d80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005cee:	f7ff fbef 	bl	80054d0 <main>

08005cf2 <LoopForever>:

LoopForever:
    b LoopForever
 8005cf2:	e7fe      	b.n	8005cf2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8005cf4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8005cf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005cfc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8005d00:	08005e4c 	.word	0x08005e4c
  ldr r2, =_sbss
 8005d04:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8005d08:	2000017c 	.word	0x2000017c

08005d0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005d0c:	e7fe      	b.n	8005d0c <ADC1_2_IRQHandler>
	...

08005d10 <DWT_Delay_Init>:

#include "DWT_Delay.h"


uint32_t DWT_Delay_Init(void)
{
 8005d10:	b480      	push	{r7}
 8005d12:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8005d14:	4b14      	ldr	r3, [pc, #80]	; (8005d68 <DWT_Delay_Init+0x58>)
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	4a13      	ldr	r2, [pc, #76]	; (8005d68 <DWT_Delay_Init+0x58>)
 8005d1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d1e:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8005d20:	4b11      	ldr	r3, [pc, #68]	; (8005d68 <DWT_Delay_Init+0x58>)
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	4a10      	ldr	r2, [pc, #64]	; (8005d68 <DWT_Delay_Init+0x58>)
 8005d26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d2a:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8005d2c:	4b0f      	ldr	r3, [pc, #60]	; (8005d6c <DWT_Delay_Init+0x5c>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a0e      	ldr	r2, [pc, #56]	; (8005d6c <DWT_Delay_Init+0x5c>)
 8005d32:	f023 0301 	bic.w	r3, r3, #1
 8005d36:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8005d38:	4b0c      	ldr	r3, [pc, #48]	; (8005d6c <DWT_Delay_Init+0x5c>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a0b      	ldr	r2, [pc, #44]	; (8005d6c <DWT_Delay_Init+0x5c>)
 8005d3e:	f043 0301 	orr.w	r3, r3, #1
 8005d42:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8005d44:	4b09      	ldr	r3, [pc, #36]	; (8005d6c <DWT_Delay_Init+0x5c>)
 8005d46:	2200      	movs	r2, #0
 8005d48:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8005d4a:	bf00      	nop
    __ASM volatile ("NOP");
 8005d4c:	bf00      	nop
    __ASM volatile ("NOP");
 8005d4e:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8005d50:	4b06      	ldr	r3, [pc, #24]	; (8005d6c <DWT_Delay_Init+0x5c>)
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d001      	beq.n	8005d5c <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 8005d58:	2300      	movs	r3, #0
 8005d5a:	e000      	b.n	8005d5e <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8005d5c:	2301      	movs	r3, #1
    }
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr
 8005d68:	e000edf0 	.word	0xe000edf0
 8005d6c:	e0001000 	.word	0xe0001000

08005d70 <memset>:
 8005d70:	4402      	add	r2, r0
 8005d72:	4603      	mov	r3, r0
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d100      	bne.n	8005d7a <memset+0xa>
 8005d78:	4770      	bx	lr
 8005d7a:	f803 1b01 	strb.w	r1, [r3], #1
 8005d7e:	e7f9      	b.n	8005d74 <memset+0x4>

08005d80 <__libc_init_array>:
 8005d80:	b570      	push	{r4, r5, r6, lr}
 8005d82:	4d0d      	ldr	r5, [pc, #52]	; (8005db8 <__libc_init_array+0x38>)
 8005d84:	4c0d      	ldr	r4, [pc, #52]	; (8005dbc <__libc_init_array+0x3c>)
 8005d86:	1b64      	subs	r4, r4, r5
 8005d88:	10a4      	asrs	r4, r4, #2
 8005d8a:	2600      	movs	r6, #0
 8005d8c:	42a6      	cmp	r6, r4
 8005d8e:	d109      	bne.n	8005da4 <__libc_init_array+0x24>
 8005d90:	4d0b      	ldr	r5, [pc, #44]	; (8005dc0 <__libc_init_array+0x40>)
 8005d92:	4c0c      	ldr	r4, [pc, #48]	; (8005dc4 <__libc_init_array+0x44>)
 8005d94:	f000 f818 	bl	8005dc8 <_init>
 8005d98:	1b64      	subs	r4, r4, r5
 8005d9a:	10a4      	asrs	r4, r4, #2
 8005d9c:	2600      	movs	r6, #0
 8005d9e:	42a6      	cmp	r6, r4
 8005da0:	d105      	bne.n	8005dae <__libc_init_array+0x2e>
 8005da2:	bd70      	pop	{r4, r5, r6, pc}
 8005da4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005da8:	4798      	blx	r3
 8005daa:	3601      	adds	r6, #1
 8005dac:	e7ee      	b.n	8005d8c <__libc_init_array+0xc>
 8005dae:	f855 3b04 	ldr.w	r3, [r5], #4
 8005db2:	4798      	blx	r3
 8005db4:	3601      	adds	r6, #1
 8005db6:	e7f2      	b.n	8005d9e <__libc_init_array+0x1e>
 8005db8:	08005e44 	.word	0x08005e44
 8005dbc:	08005e44 	.word	0x08005e44
 8005dc0:	08005e44 	.word	0x08005e44
 8005dc4:	08005e48 	.word	0x08005e48

08005dc8 <_init>:
 8005dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dca:	bf00      	nop
 8005dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dce:	bc08      	pop	{r3}
 8005dd0:	469e      	mov	lr, r3
 8005dd2:	4770      	bx	lr

08005dd4 <_fini>:
 8005dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dd6:	bf00      	nop
 8005dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dda:	bc08      	pop	{r3}
 8005ddc:	469e      	mov	lr, r3
 8005dde:	4770      	bx	lr
