
MiniProject _ UART data stream reading.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009530  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c4  080096c0  080096c0  000196c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a84  08009a84  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08009a84  08009a84  00019a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a8c  08009a8c  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a8c  08009a8c  00019a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a90  08009a90  00019a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08009a94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000398  200001d4  08009c68  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000056c  08009c68  0002056c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011835  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002595  00000000  00000000  00031a7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001098  00000000  00000000  00034018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cec  00000000  00000000  000350b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000279bd  00000000  00000000  00035d9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012fb2  00000000  00000000  0005d759  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f45d8  00000000  00000000  0007070b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005724  00000000  00000000  00164ce4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000096  00000000  00000000  0016a408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080096a8 	.word	0x080096a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	080096a8 	.word	0x080096a8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f4e:	2003      	movs	r0, #3
 8000f50:	f000 f960 	bl	8001214 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f54:	200f      	movs	r0, #15
 8000f56:	f000 f80d 	bl	8000f74 <HAL_InitTick>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d002      	beq.n	8000f66 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f60:	2301      	movs	r3, #1
 8000f62:	71fb      	strb	r3, [r7, #7]
 8000f64:	e001      	b.n	8000f6a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f66:	f005 fa3f 	bl	80063e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f80:	4b17      	ldr	r3, [pc, #92]	; (8000fe0 <HAL_InitTick+0x6c>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d023      	beq.n	8000fd0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f88:	4b16      	ldr	r3, [pc, #88]	; (8000fe4 <HAL_InitTick+0x70>)
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	4b14      	ldr	r3, [pc, #80]	; (8000fe0 <HAL_InitTick+0x6c>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	4619      	mov	r1, r3
 8000f92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f000 f96d 	bl	800127e <HAL_SYSTICK_Config>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d10f      	bne.n	8000fca <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2b0f      	cmp	r3, #15
 8000fae:	d809      	bhi.n	8000fc4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	6879      	ldr	r1, [r7, #4]
 8000fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb8:	f000 f937 	bl	800122a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fbc:	4a0a      	ldr	r2, [pc, #40]	; (8000fe8 <HAL_InitTick+0x74>)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6013      	str	r3, [r2, #0]
 8000fc2:	e007      	b.n	8000fd4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	73fb      	strb	r3, [r7, #15]
 8000fc8:	e004      	b.n	8000fd4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	73fb      	strb	r3, [r7, #15]
 8000fce:	e001      	b.n	8000fd4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000004 	.word	0x20000004
 8000fe4:	20000008 	.word	0x20000008
 8000fe8:	20000000 	.word	0x20000000

08000fec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ff0:	4b06      	ldr	r3, [pc, #24]	; (800100c <HAL_IncTick+0x20>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	4b06      	ldr	r3, [pc, #24]	; (8001010 <HAL_IncTick+0x24>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	4a04      	ldr	r2, [pc, #16]	; (8001010 <HAL_IncTick+0x24>)
 8000ffe:	6013      	str	r3, [r2, #0]
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	20000004 	.word	0x20000004
 8001010:	200001f0 	.word	0x200001f0

08001014 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  return uwTick;
 8001018:	4b03      	ldr	r3, [pc, #12]	; (8001028 <HAL_GetTick+0x14>)
 800101a:	681b      	ldr	r3, [r3, #0]
}
 800101c:	4618      	mov	r0, r3
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	200001f0 	.word	0x200001f0

0800102c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001034:	f7ff ffee 	bl	8001014 <HAL_GetTick>
 8001038:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001044:	d005      	beq.n	8001052 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001046:	4b0a      	ldr	r3, [pc, #40]	; (8001070 <HAL_Delay+0x44>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	461a      	mov	r2, r3
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	4413      	add	r3, r2
 8001050:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001052:	bf00      	nop
 8001054:	f7ff ffde 	bl	8001014 <HAL_GetTick>
 8001058:	4602      	mov	r2, r0
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	68fa      	ldr	r2, [r7, #12]
 8001060:	429a      	cmp	r2, r3
 8001062:	d8f7      	bhi.n	8001054 <HAL_Delay+0x28>
  {
  }
}
 8001064:	bf00      	nop
 8001066:	bf00      	nop
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20000004 	.word	0x20000004

08001074 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f003 0307 	and.w	r3, r3, #7
 8001082:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001084:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800108a:	68ba      	ldr	r2, [r7, #8]
 800108c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001090:	4013      	ands	r3, r2
 8001092:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800109c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010a6:	4a04      	ldr	r2, [pc, #16]	; (80010b8 <__NVIC_SetPriorityGrouping+0x44>)
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	60d3      	str	r3, [r2, #12]
}
 80010ac:	bf00      	nop
 80010ae:	3714      	adds	r7, #20
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c0:	4b04      	ldr	r3, [pc, #16]	; (80010d4 <__NVIC_GetPriorityGrouping+0x18>)
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	0a1b      	lsrs	r3, r3, #8
 80010c6:	f003 0307 	and.w	r3, r3, #7
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	db0b      	blt.n	8001102 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	f003 021f 	and.w	r2, r3, #31
 80010f0:	4907      	ldr	r1, [pc, #28]	; (8001110 <__NVIC_EnableIRQ+0x38>)
 80010f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f6:	095b      	lsrs	r3, r3, #5
 80010f8:	2001      	movs	r0, #1
 80010fa:	fa00 f202 	lsl.w	r2, r0, r2
 80010fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001102:	bf00      	nop
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	e000e100 	.word	0xe000e100

08001114 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	6039      	str	r1, [r7, #0]
 800111e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001124:	2b00      	cmp	r3, #0
 8001126:	db0a      	blt.n	800113e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	b2da      	uxtb	r2, r3
 800112c:	490c      	ldr	r1, [pc, #48]	; (8001160 <__NVIC_SetPriority+0x4c>)
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	0112      	lsls	r2, r2, #4
 8001134:	b2d2      	uxtb	r2, r2
 8001136:	440b      	add	r3, r1
 8001138:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800113c:	e00a      	b.n	8001154 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	b2da      	uxtb	r2, r3
 8001142:	4908      	ldr	r1, [pc, #32]	; (8001164 <__NVIC_SetPriority+0x50>)
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	f003 030f 	and.w	r3, r3, #15
 800114a:	3b04      	subs	r3, #4
 800114c:	0112      	lsls	r2, r2, #4
 800114e:	b2d2      	uxtb	r2, r2
 8001150:	440b      	add	r3, r1
 8001152:	761a      	strb	r2, [r3, #24]
}
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	e000e100 	.word	0xe000e100
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001168:	b480      	push	{r7}
 800116a:	b089      	sub	sp, #36	; 0x24
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	f003 0307 	and.w	r3, r3, #7
 800117a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	f1c3 0307 	rsb	r3, r3, #7
 8001182:	2b04      	cmp	r3, #4
 8001184:	bf28      	it	cs
 8001186:	2304      	movcs	r3, #4
 8001188:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	3304      	adds	r3, #4
 800118e:	2b06      	cmp	r3, #6
 8001190:	d902      	bls.n	8001198 <NVIC_EncodePriority+0x30>
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	3b03      	subs	r3, #3
 8001196:	e000      	b.n	800119a <NVIC_EncodePriority+0x32>
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800119c:	f04f 32ff 	mov.w	r2, #4294967295
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	43da      	mvns	r2, r3
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	401a      	ands	r2, r3
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011b0:	f04f 31ff 	mov.w	r1, #4294967295
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ba:	43d9      	mvns	r1, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c0:	4313      	orrs	r3, r2
         );
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3724      	adds	r7, #36	; 0x24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
	...

080011d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3b01      	subs	r3, #1
 80011dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011e0:	d301      	bcc.n	80011e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011e2:	2301      	movs	r3, #1
 80011e4:	e00f      	b.n	8001206 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011e6:	4a0a      	ldr	r2, [pc, #40]	; (8001210 <SysTick_Config+0x40>)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3b01      	subs	r3, #1
 80011ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ee:	210f      	movs	r1, #15
 80011f0:	f04f 30ff 	mov.w	r0, #4294967295
 80011f4:	f7ff ff8e 	bl	8001114 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011f8:	4b05      	ldr	r3, [pc, #20]	; (8001210 <SysTick_Config+0x40>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011fe:	4b04      	ldr	r3, [pc, #16]	; (8001210 <SysTick_Config+0x40>)
 8001200:	2207      	movs	r2, #7
 8001202:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	e000e010 	.word	0xe000e010

08001214 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f7ff ff29 	bl	8001074 <__NVIC_SetPriorityGrouping>
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	b086      	sub	sp, #24
 800122e:	af00      	add	r7, sp, #0
 8001230:	4603      	mov	r3, r0
 8001232:	60b9      	str	r1, [r7, #8]
 8001234:	607a      	str	r2, [r7, #4]
 8001236:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800123c:	f7ff ff3e 	bl	80010bc <__NVIC_GetPriorityGrouping>
 8001240:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	68b9      	ldr	r1, [r7, #8]
 8001246:	6978      	ldr	r0, [r7, #20]
 8001248:	f7ff ff8e 	bl	8001168 <NVIC_EncodePriority>
 800124c:	4602      	mov	r2, r0
 800124e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001252:	4611      	mov	r1, r2
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff ff5d 	bl	8001114 <__NVIC_SetPriority>
}
 800125a:	bf00      	nop
 800125c:	3718      	adds	r7, #24
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b082      	sub	sp, #8
 8001266:	af00      	add	r7, sp, #0
 8001268:	4603      	mov	r3, r0
 800126a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800126c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ff31 	bl	80010d8 <__NVIC_EnableIRQ>
}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f7ff ffa2 	bl	80011d0 <SysTick_Config>
 800128c:	4603      	mov	r3, r0
}
 800128e:	4618      	mov	r0, r3
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001296:	b480      	push	{r7}
 8001298:	b085      	sub	sp, #20
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800129e:	2300      	movs	r3, #0
 80012a0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d008      	beq.n	80012c0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2204      	movs	r2, #4
 80012b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	e022      	b.n	8001306 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f022 020e 	bic.w	r2, r2, #14
 80012ce:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f022 0201 	bic.w	r2, r2, #1
 80012de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e4:	f003 021c 	and.w	r2, r3, #28
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ec:	2101      	movs	r1, #1
 80012ee:	fa01 f202 	lsl.w	r2, r1, r2
 80012f2:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2201      	movs	r2, #1
 80012f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2200      	movs	r2, #0
 8001300:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001304:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001306:	4618      	mov	r0, r3
 8001308:	3714      	adds	r7, #20
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr

08001312 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b084      	sub	sp, #16
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800131a:	2300      	movs	r3, #0
 800131c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001324:	b2db      	uxtb	r3, r3
 8001326:	2b02      	cmp	r3, #2
 8001328:	d005      	beq.n	8001336 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2204      	movs	r2, #4
 800132e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	73fb      	strb	r3, [r7, #15]
 8001334:	e029      	b.n	800138a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f022 020e 	bic.w	r2, r2, #14
 8001344:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f022 0201 	bic.w	r2, r2, #1
 8001354:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135a:	f003 021c 	and.w	r2, r3, #28
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	2101      	movs	r1, #1
 8001364:	fa01 f202 	lsl.w	r2, r1, r2
 8001368:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2201      	movs	r2, #1
 800136e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2200      	movs	r2, #0
 8001376:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800137e:	2b00      	cmp	r3, #0
 8001380:	d003      	beq.n	800138a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	4798      	blx	r3
    }
  }
  return status;
 800138a:	7bfb      	ldrb	r3, [r7, #15]
}
 800138c:	4618      	mov	r0, r3
 800138e:	3710      	adds	r7, #16
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001394:	b480      	push	{r7}
 8001396:	b087      	sub	sp, #28
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800139e:	2300      	movs	r3, #0
 80013a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013a2:	e17f      	b.n	80016a4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	2101      	movs	r1, #1
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	fa01 f303 	lsl.w	r3, r1, r3
 80013b0:	4013      	ands	r3, r2
 80013b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	f000 8171 	beq.w	800169e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f003 0303 	and.w	r3, r3, #3
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d005      	beq.n	80013d4 <HAL_GPIO_Init+0x40>
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f003 0303 	and.w	r3, r3, #3
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d130      	bne.n	8001436 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	2203      	movs	r2, #3
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	43db      	mvns	r3, r3
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	4013      	ands	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	68da      	ldr	r2, [r3, #12]
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	693a      	ldr	r2, [r7, #16]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	693a      	ldr	r2, [r7, #16]
 8001402:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800140a:	2201      	movs	r2, #1
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	fa02 f303 	lsl.w	r3, r2, r3
 8001412:	43db      	mvns	r3, r3
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	4013      	ands	r3, r2
 8001418:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	091b      	lsrs	r3, r3, #4
 8001420:	f003 0201 	and.w	r2, r3, #1
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	4313      	orrs	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f003 0303 	and.w	r3, r3, #3
 800143e:	2b03      	cmp	r3, #3
 8001440:	d118      	bne.n	8001474 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001446:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001448:	2201      	movs	r2, #1
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	43db      	mvns	r3, r3
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	4013      	ands	r3, r2
 8001456:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	08db      	lsrs	r3, r3, #3
 800145e:	f003 0201 	and.w	r2, r3, #1
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	4313      	orrs	r3, r2
 800146c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f003 0303 	and.w	r3, r3, #3
 800147c:	2b03      	cmp	r3, #3
 800147e:	d017      	beq.n	80014b0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	2203      	movs	r2, #3
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	43db      	mvns	r3, r3
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	4013      	ands	r3, r2
 8001496:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	689a      	ldr	r2, [r3, #8]
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f003 0303 	and.w	r3, r3, #3
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d123      	bne.n	8001504 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	08da      	lsrs	r2, r3, #3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	3208      	adds	r2, #8
 80014c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	f003 0307 	and.w	r3, r3, #7
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	220f      	movs	r2, #15
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	43db      	mvns	r3, r3
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	4013      	ands	r3, r2
 80014de:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	691a      	ldr	r2, [r3, #16]
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	f003 0307 	and.w	r3, r3, #7
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	08da      	lsrs	r2, r3, #3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	3208      	adds	r2, #8
 80014fe:	6939      	ldr	r1, [r7, #16]
 8001500:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	2203      	movs	r2, #3
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	43db      	mvns	r3, r3
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	4013      	ands	r3, r2
 800151a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f003 0203 	and.w	r2, r3, #3
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	4313      	orrs	r3, r2
 8001530:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	693a      	ldr	r2, [r7, #16]
 8001536:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001540:	2b00      	cmp	r3, #0
 8001542:	f000 80ac 	beq.w	800169e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001546:	4b5f      	ldr	r3, [pc, #380]	; (80016c4 <HAL_GPIO_Init+0x330>)
 8001548:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800154a:	4a5e      	ldr	r2, [pc, #376]	; (80016c4 <HAL_GPIO_Init+0x330>)
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	6613      	str	r3, [r2, #96]	; 0x60
 8001552:	4b5c      	ldr	r3, [pc, #368]	; (80016c4 <HAL_GPIO_Init+0x330>)
 8001554:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	60bb      	str	r3, [r7, #8]
 800155c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800155e:	4a5a      	ldr	r2, [pc, #360]	; (80016c8 <HAL_GPIO_Init+0x334>)
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	089b      	lsrs	r3, r3, #2
 8001564:	3302      	adds	r3, #2
 8001566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800156a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	f003 0303 	and.w	r3, r3, #3
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	220f      	movs	r2, #15
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	43db      	mvns	r3, r3
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	4013      	ands	r3, r2
 8001580:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001588:	d025      	beq.n	80015d6 <HAL_GPIO_Init+0x242>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a4f      	ldr	r2, [pc, #316]	; (80016cc <HAL_GPIO_Init+0x338>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d01f      	beq.n	80015d2 <HAL_GPIO_Init+0x23e>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a4e      	ldr	r2, [pc, #312]	; (80016d0 <HAL_GPIO_Init+0x33c>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d019      	beq.n	80015ce <HAL_GPIO_Init+0x23a>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a4d      	ldr	r2, [pc, #308]	; (80016d4 <HAL_GPIO_Init+0x340>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d013      	beq.n	80015ca <HAL_GPIO_Init+0x236>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a4c      	ldr	r2, [pc, #304]	; (80016d8 <HAL_GPIO_Init+0x344>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d00d      	beq.n	80015c6 <HAL_GPIO_Init+0x232>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a4b      	ldr	r2, [pc, #300]	; (80016dc <HAL_GPIO_Init+0x348>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d007      	beq.n	80015c2 <HAL_GPIO_Init+0x22e>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a4a      	ldr	r2, [pc, #296]	; (80016e0 <HAL_GPIO_Init+0x34c>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d101      	bne.n	80015be <HAL_GPIO_Init+0x22a>
 80015ba:	2306      	movs	r3, #6
 80015bc:	e00c      	b.n	80015d8 <HAL_GPIO_Init+0x244>
 80015be:	2307      	movs	r3, #7
 80015c0:	e00a      	b.n	80015d8 <HAL_GPIO_Init+0x244>
 80015c2:	2305      	movs	r3, #5
 80015c4:	e008      	b.n	80015d8 <HAL_GPIO_Init+0x244>
 80015c6:	2304      	movs	r3, #4
 80015c8:	e006      	b.n	80015d8 <HAL_GPIO_Init+0x244>
 80015ca:	2303      	movs	r3, #3
 80015cc:	e004      	b.n	80015d8 <HAL_GPIO_Init+0x244>
 80015ce:	2302      	movs	r3, #2
 80015d0:	e002      	b.n	80015d8 <HAL_GPIO_Init+0x244>
 80015d2:	2301      	movs	r3, #1
 80015d4:	e000      	b.n	80015d8 <HAL_GPIO_Init+0x244>
 80015d6:	2300      	movs	r3, #0
 80015d8:	697a      	ldr	r2, [r7, #20]
 80015da:	f002 0203 	and.w	r2, r2, #3
 80015de:	0092      	lsls	r2, r2, #2
 80015e0:	4093      	lsls	r3, r2
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015e8:	4937      	ldr	r1, [pc, #220]	; (80016c8 <HAL_GPIO_Init+0x334>)
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	089b      	lsrs	r3, r3, #2
 80015ee:	3302      	adds	r3, #2
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015f6:	4b3b      	ldr	r3, [pc, #236]	; (80016e4 <HAL_GPIO_Init+0x350>)
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	43db      	mvns	r3, r3
 8001600:	693a      	ldr	r2, [r7, #16]
 8001602:	4013      	ands	r3, r2
 8001604:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d003      	beq.n	800161a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	4313      	orrs	r3, r2
 8001618:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800161a:	4a32      	ldr	r2, [pc, #200]	; (80016e4 <HAL_GPIO_Init+0x350>)
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001620:	4b30      	ldr	r3, [pc, #192]	; (80016e4 <HAL_GPIO_Init+0x350>)
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	43db      	mvns	r3, r3
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	4013      	ands	r3, r2
 800162e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d003      	beq.n	8001644 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	4313      	orrs	r3, r2
 8001642:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001644:	4a27      	ldr	r2, [pc, #156]	; (80016e4 <HAL_GPIO_Init+0x350>)
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800164a:	4b26      	ldr	r3, [pc, #152]	; (80016e4 <HAL_GPIO_Init+0x350>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	43db      	mvns	r3, r3
 8001654:	693a      	ldr	r2, [r7, #16]
 8001656:	4013      	ands	r3, r2
 8001658:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d003      	beq.n	800166e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	4313      	orrs	r3, r2
 800166c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800166e:	4a1d      	ldr	r2, [pc, #116]	; (80016e4 <HAL_GPIO_Init+0x350>)
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001674:	4b1b      	ldr	r3, [pc, #108]	; (80016e4 <HAL_GPIO_Init+0x350>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	43db      	mvns	r3, r3
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	4013      	ands	r3, r2
 8001682:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d003      	beq.n	8001698 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001690:	693a      	ldr	r2, [r7, #16]
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	4313      	orrs	r3, r2
 8001696:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001698:	4a12      	ldr	r2, [pc, #72]	; (80016e4 <HAL_GPIO_Init+0x350>)
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	3301      	adds	r3, #1
 80016a2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	fa22 f303 	lsr.w	r3, r2, r3
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	f47f ae78 	bne.w	80013a4 <HAL_GPIO_Init+0x10>
  }
}
 80016b4:	bf00      	nop
 80016b6:	bf00      	nop
 80016b8:	371c      	adds	r7, #28
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	40021000 	.word	0x40021000
 80016c8:	40010000 	.word	0x40010000
 80016cc:	48000400 	.word	0x48000400
 80016d0:	48000800 	.word	0x48000800
 80016d4:	48000c00 	.word	0x48000c00
 80016d8:	48001000 	.word	0x48001000
 80016dc:	48001400 	.word	0x48001400
 80016e0:	48001800 	.word	0x48001800
 80016e4:	40010400 	.word	0x40010400

080016e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	460b      	mov	r3, r1
 80016f2:	807b      	strh	r3, [r7, #2]
 80016f4:	4613      	mov	r3, r2
 80016f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016f8:	787b      	ldrb	r3, [r7, #1]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d003      	beq.n	8001706 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016fe:	887a      	ldrh	r2, [r7, #2]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001704:	e002      	b.n	800170c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001706:	887a      	ldrh	r2, [r7, #2]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800170c:	bf00      	nop
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800171c:	4b04      	ldr	r3, [pc, #16]	; (8001730 <HAL_PWREx_GetVoltageRange+0x18>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001724:	4618      	mov	r0, r3
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	40007000 	.word	0x40007000

08001734 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001742:	d130      	bne.n	80017a6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001744:	4b23      	ldr	r3, [pc, #140]	; (80017d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800174c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001750:	d038      	beq.n	80017c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001752:	4b20      	ldr	r3, [pc, #128]	; (80017d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800175a:	4a1e      	ldr	r2, [pc, #120]	; (80017d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800175c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001760:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001762:	4b1d      	ldr	r3, [pc, #116]	; (80017d8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2232      	movs	r2, #50	; 0x32
 8001768:	fb02 f303 	mul.w	r3, r2, r3
 800176c:	4a1b      	ldr	r2, [pc, #108]	; (80017dc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800176e:	fba2 2303 	umull	r2, r3, r2, r3
 8001772:	0c9b      	lsrs	r3, r3, #18
 8001774:	3301      	adds	r3, #1
 8001776:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001778:	e002      	b.n	8001780 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	3b01      	subs	r3, #1
 800177e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001780:	4b14      	ldr	r3, [pc, #80]	; (80017d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001782:	695b      	ldr	r3, [r3, #20]
 8001784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001788:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800178c:	d102      	bne.n	8001794 <HAL_PWREx_ControlVoltageScaling+0x60>
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d1f2      	bne.n	800177a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001794:	4b0f      	ldr	r3, [pc, #60]	; (80017d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001796:	695b      	ldr	r3, [r3, #20]
 8001798:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800179c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017a0:	d110      	bne.n	80017c4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e00f      	b.n	80017c6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80017a6:	4b0b      	ldr	r3, [pc, #44]	; (80017d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017b2:	d007      	beq.n	80017c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80017b4:	4b07      	ldr	r3, [pc, #28]	; (80017d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017bc:	4a05      	ldr	r2, [pc, #20]	; (80017d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017c2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3714      	adds	r7, #20
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	40007000 	.word	0x40007000
 80017d8:	20000008 	.word	0x20000008
 80017dc:	431bde83 	.word	0x431bde83

080017e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b088      	sub	sp, #32
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d101      	bne.n	80017f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e3ca      	b.n	8001f88 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017f2:	4b97      	ldr	r3, [pc, #604]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f003 030c 	and.w	r3, r3, #12
 80017fa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017fc:	4b94      	ldr	r3, [pc, #592]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	f003 0303 	and.w	r3, r3, #3
 8001804:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0310 	and.w	r3, r3, #16
 800180e:	2b00      	cmp	r3, #0
 8001810:	f000 80e4 	beq.w	80019dc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d007      	beq.n	800182a <HAL_RCC_OscConfig+0x4a>
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	2b0c      	cmp	r3, #12
 800181e:	f040 808b 	bne.w	8001938 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	2b01      	cmp	r3, #1
 8001826:	f040 8087 	bne.w	8001938 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800182a:	4b89      	ldr	r3, [pc, #548]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	2b00      	cmp	r3, #0
 8001834:	d005      	beq.n	8001842 <HAL_RCC_OscConfig+0x62>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	699b      	ldr	r3, [r3, #24]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d101      	bne.n	8001842 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e3a2      	b.n	8001f88 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a1a      	ldr	r2, [r3, #32]
 8001846:	4b82      	ldr	r3, [pc, #520]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0308 	and.w	r3, r3, #8
 800184e:	2b00      	cmp	r3, #0
 8001850:	d004      	beq.n	800185c <HAL_RCC_OscConfig+0x7c>
 8001852:	4b7f      	ldr	r3, [pc, #508]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800185a:	e005      	b.n	8001868 <HAL_RCC_OscConfig+0x88>
 800185c:	4b7c      	ldr	r3, [pc, #496]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 800185e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001862:	091b      	lsrs	r3, r3, #4
 8001864:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001868:	4293      	cmp	r3, r2
 800186a:	d223      	bcs.n	80018b4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a1b      	ldr	r3, [r3, #32]
 8001870:	4618      	mov	r0, r3
 8001872:	f000 fd55 	bl	8002320 <RCC_SetFlashLatencyFromMSIRange>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e383      	b.n	8001f88 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001880:	4b73      	ldr	r3, [pc, #460]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a72      	ldr	r2, [pc, #456]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 8001886:	f043 0308 	orr.w	r3, r3, #8
 800188a:	6013      	str	r3, [r2, #0]
 800188c:	4b70      	ldr	r3, [pc, #448]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a1b      	ldr	r3, [r3, #32]
 8001898:	496d      	ldr	r1, [pc, #436]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 800189a:	4313      	orrs	r3, r2
 800189c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800189e:	4b6c      	ldr	r3, [pc, #432]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	69db      	ldr	r3, [r3, #28]
 80018aa:	021b      	lsls	r3, r3, #8
 80018ac:	4968      	ldr	r1, [pc, #416]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 80018ae:	4313      	orrs	r3, r2
 80018b0:	604b      	str	r3, [r1, #4]
 80018b2:	e025      	b.n	8001900 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018b4:	4b66      	ldr	r3, [pc, #408]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a65      	ldr	r2, [pc, #404]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 80018ba:	f043 0308 	orr.w	r3, r3, #8
 80018be:	6013      	str	r3, [r2, #0]
 80018c0:	4b63      	ldr	r3, [pc, #396]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6a1b      	ldr	r3, [r3, #32]
 80018cc:	4960      	ldr	r1, [pc, #384]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 80018ce:	4313      	orrs	r3, r2
 80018d0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018d2:	4b5f      	ldr	r3, [pc, #380]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	69db      	ldr	r3, [r3, #28]
 80018de:	021b      	lsls	r3, r3, #8
 80018e0:	495b      	ldr	r1, [pc, #364]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 80018e2:	4313      	orrs	r3, r2
 80018e4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d109      	bne.n	8001900 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a1b      	ldr	r3, [r3, #32]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f000 fd15 	bl	8002320 <RCC_SetFlashLatencyFromMSIRange>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e343      	b.n	8001f88 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001900:	f000 fc4a 	bl	8002198 <HAL_RCC_GetSysClockFreq>
 8001904:	4602      	mov	r2, r0
 8001906:	4b52      	ldr	r3, [pc, #328]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	091b      	lsrs	r3, r3, #4
 800190c:	f003 030f 	and.w	r3, r3, #15
 8001910:	4950      	ldr	r1, [pc, #320]	; (8001a54 <HAL_RCC_OscConfig+0x274>)
 8001912:	5ccb      	ldrb	r3, [r1, r3]
 8001914:	f003 031f 	and.w	r3, r3, #31
 8001918:	fa22 f303 	lsr.w	r3, r2, r3
 800191c:	4a4e      	ldr	r2, [pc, #312]	; (8001a58 <HAL_RCC_OscConfig+0x278>)
 800191e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001920:	4b4e      	ldr	r3, [pc, #312]	; (8001a5c <HAL_RCC_OscConfig+0x27c>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff fb25 	bl	8000f74 <HAL_InitTick>
 800192a:	4603      	mov	r3, r0
 800192c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800192e:	7bfb      	ldrb	r3, [r7, #15]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d052      	beq.n	80019da <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001934:	7bfb      	ldrb	r3, [r7, #15]
 8001936:	e327      	b.n	8001f88 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d032      	beq.n	80019a6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001940:	4b43      	ldr	r3, [pc, #268]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a42      	ldr	r2, [pc, #264]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 8001946:	f043 0301 	orr.w	r3, r3, #1
 800194a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800194c:	f7ff fb62 	bl	8001014 <HAL_GetTick>
 8001950:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001952:	e008      	b.n	8001966 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001954:	f7ff fb5e 	bl	8001014 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b02      	cmp	r3, #2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e310      	b.n	8001f88 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001966:	4b3a      	ldr	r3, [pc, #232]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	2b00      	cmp	r3, #0
 8001970:	d0f0      	beq.n	8001954 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001972:	4b37      	ldr	r3, [pc, #220]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a36      	ldr	r2, [pc, #216]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 8001978:	f043 0308 	orr.w	r3, r3, #8
 800197c:	6013      	str	r3, [r2, #0]
 800197e:	4b34      	ldr	r3, [pc, #208]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a1b      	ldr	r3, [r3, #32]
 800198a:	4931      	ldr	r1, [pc, #196]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 800198c:	4313      	orrs	r3, r2
 800198e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001990:	4b2f      	ldr	r3, [pc, #188]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	69db      	ldr	r3, [r3, #28]
 800199c:	021b      	lsls	r3, r3, #8
 800199e:	492c      	ldr	r1, [pc, #176]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 80019a0:	4313      	orrs	r3, r2
 80019a2:	604b      	str	r3, [r1, #4]
 80019a4:	e01a      	b.n	80019dc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80019a6:	4b2a      	ldr	r3, [pc, #168]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a29      	ldr	r2, [pc, #164]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 80019ac:	f023 0301 	bic.w	r3, r3, #1
 80019b0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80019b2:	f7ff fb2f 	bl	8001014 <HAL_GetTick>
 80019b6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80019b8:	e008      	b.n	80019cc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019ba:	f7ff fb2b 	bl	8001014 <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e2dd      	b.n	8001f88 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80019cc:	4b20      	ldr	r3, [pc, #128]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d1f0      	bne.n	80019ba <HAL_RCC_OscConfig+0x1da>
 80019d8:	e000      	b.n	80019dc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019da:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0301 	and.w	r3, r3, #1
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d074      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	2b08      	cmp	r3, #8
 80019ec:	d005      	beq.n	80019fa <HAL_RCC_OscConfig+0x21a>
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	2b0c      	cmp	r3, #12
 80019f2:	d10e      	bne.n	8001a12 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	2b03      	cmp	r3, #3
 80019f8:	d10b      	bne.n	8001a12 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019fa:	4b15      	ldr	r3, [pc, #84]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d064      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x2f0>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d160      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e2ba      	b.n	8001f88 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a1a:	d106      	bne.n	8001a2a <HAL_RCC_OscConfig+0x24a>
 8001a1c:	4b0c      	ldr	r3, [pc, #48]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a0b      	ldr	r2, [pc, #44]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 8001a22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a26:	6013      	str	r3, [r2, #0]
 8001a28:	e026      	b.n	8001a78 <HAL_RCC_OscConfig+0x298>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a32:	d115      	bne.n	8001a60 <HAL_RCC_OscConfig+0x280>
 8001a34:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a05      	ldr	r2, [pc, #20]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 8001a3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a3e:	6013      	str	r3, [r2, #0]
 8001a40:	4b03      	ldr	r3, [pc, #12]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a02      	ldr	r2, [pc, #8]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 8001a46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a4a:	6013      	str	r3, [r2, #0]
 8001a4c:	e014      	b.n	8001a78 <HAL_RCC_OscConfig+0x298>
 8001a4e:	bf00      	nop
 8001a50:	40021000 	.word	0x40021000
 8001a54:	080096c8 	.word	0x080096c8
 8001a58:	20000008 	.word	0x20000008
 8001a5c:	20000000 	.word	0x20000000
 8001a60:	4ba0      	ldr	r3, [pc, #640]	; (8001ce4 <HAL_RCC_OscConfig+0x504>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a9f      	ldr	r2, [pc, #636]	; (8001ce4 <HAL_RCC_OscConfig+0x504>)
 8001a66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a6a:	6013      	str	r3, [r2, #0]
 8001a6c:	4b9d      	ldr	r3, [pc, #628]	; (8001ce4 <HAL_RCC_OscConfig+0x504>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a9c      	ldr	r2, [pc, #624]	; (8001ce4 <HAL_RCC_OscConfig+0x504>)
 8001a72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d013      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a80:	f7ff fac8 	bl	8001014 <HAL_GetTick>
 8001a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a86:	e008      	b.n	8001a9a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a88:	f7ff fac4 	bl	8001014 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b64      	cmp	r3, #100	; 0x64
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e276      	b.n	8001f88 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a9a:	4b92      	ldr	r3, [pc, #584]	; (8001ce4 <HAL_RCC_OscConfig+0x504>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d0f0      	beq.n	8001a88 <HAL_RCC_OscConfig+0x2a8>
 8001aa6:	e014      	b.n	8001ad2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa8:	f7ff fab4 	bl	8001014 <HAL_GetTick>
 8001aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001aae:	e008      	b.n	8001ac2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ab0:	f7ff fab0 	bl	8001014 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b64      	cmp	r3, #100	; 0x64
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e262      	b.n	8001f88 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ac2:	4b88      	ldr	r3, [pc, #544]	; (8001ce4 <HAL_RCC_OscConfig+0x504>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1f0      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x2d0>
 8001ace:	e000      	b.n	8001ad2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ad0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d060      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	2b04      	cmp	r3, #4
 8001ae2:	d005      	beq.n	8001af0 <HAL_RCC_OscConfig+0x310>
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	2b0c      	cmp	r3, #12
 8001ae8:	d119      	bne.n	8001b1e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d116      	bne.n	8001b1e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001af0:	4b7c      	ldr	r3, [pc, #496]	; (8001ce4 <HAL_RCC_OscConfig+0x504>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d005      	beq.n	8001b08 <HAL_RCC_OscConfig+0x328>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d101      	bne.n	8001b08 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e23f      	b.n	8001f88 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b08:	4b76      	ldr	r3, [pc, #472]	; (8001ce4 <HAL_RCC_OscConfig+0x504>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	691b      	ldr	r3, [r3, #16]
 8001b14:	061b      	lsls	r3, r3, #24
 8001b16:	4973      	ldr	r1, [pc, #460]	; (8001ce4 <HAL_RCC_OscConfig+0x504>)
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b1c:	e040      	b.n	8001ba0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d023      	beq.n	8001b6e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b26:	4b6f      	ldr	r3, [pc, #444]	; (8001ce4 <HAL_RCC_OscConfig+0x504>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a6e      	ldr	r2, [pc, #440]	; (8001ce4 <HAL_RCC_OscConfig+0x504>)
 8001b2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b32:	f7ff fa6f 	bl	8001014 <HAL_GetTick>
 8001b36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b38:	e008      	b.n	8001b4c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b3a:	f7ff fa6b 	bl	8001014 <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d901      	bls.n	8001b4c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e21d      	b.n	8001f88 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b4c:	4b65      	ldr	r3, [pc, #404]	; (8001ce4 <HAL_RCC_OscConfig+0x504>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d0f0      	beq.n	8001b3a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b58:	4b62      	ldr	r3, [pc, #392]	; (8001ce4 <HAL_RCC_OscConfig+0x504>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	691b      	ldr	r3, [r3, #16]
 8001b64:	061b      	lsls	r3, r3, #24
 8001b66:	495f      	ldr	r1, [pc, #380]	; (8001ce4 <HAL_RCC_OscConfig+0x504>)
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	604b      	str	r3, [r1, #4]
 8001b6c:	e018      	b.n	8001ba0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b6e:	4b5d      	ldr	r3, [pc, #372]	; (8001ce4 <HAL_RCC_OscConfig+0x504>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a5c      	ldr	r2, [pc, #368]	; (8001ce4 <HAL_RCC_OscConfig+0x504>)
 8001b74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b7a:	f7ff fa4b 	bl	8001014 <HAL_GetTick>
 8001b7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b80:	e008      	b.n	8001b94 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b82:	f7ff fa47 	bl	8001014 <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d901      	bls.n	8001b94 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e1f9      	b.n	8001f88 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b94:	4b53      	ldr	r3, [pc, #332]	; (8001ce4 <HAL_RCC_OscConfig+0x504>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d1f0      	bne.n	8001b82 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0308 	and.w	r3, r3, #8
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d03c      	beq.n	8001c26 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	695b      	ldr	r3, [r3, #20]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d01c      	beq.n	8001bee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bb4:	4b4b      	ldr	r3, [pc, #300]	; (8001ce4 <HAL_RCC_OscConfig+0x504>)
 8001bb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bba:	4a4a      	ldr	r2, [pc, #296]	; (8001ce4 <HAL_RCC_OscConfig+0x504>)
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc4:	f7ff fa26 	bl	8001014 <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bcc:	f7ff fa22 	bl	8001014 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e1d4      	b.n	8001f88 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bde:	4b41      	ldr	r3, [pc, #260]	; (8001ce4 <HAL_RCC_OscConfig+0x504>)
 8001be0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001be4:	f003 0302 	and.w	r3, r3, #2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d0ef      	beq.n	8001bcc <HAL_RCC_OscConfig+0x3ec>
 8001bec:	e01b      	b.n	8001c26 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bee:	4b3d      	ldr	r3, [pc, #244]	; (8001ce4 <HAL_RCC_OscConfig+0x504>)
 8001bf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bf4:	4a3b      	ldr	r2, [pc, #236]	; (8001ce4 <HAL_RCC_OscConfig+0x504>)
 8001bf6:	f023 0301 	bic.w	r3, r3, #1
 8001bfa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bfe:	f7ff fa09 	bl	8001014 <HAL_GetTick>
 8001c02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c04:	e008      	b.n	8001c18 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c06:	f7ff fa05 	bl	8001014 <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e1b7      	b.n	8001f88 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c18:	4b32      	ldr	r3, [pc, #200]	; (8001ce4 <HAL_RCC_OscConfig+0x504>)
 8001c1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d1ef      	bne.n	8001c06 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0304 	and.w	r3, r3, #4
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f000 80a6 	beq.w	8001d80 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c34:	2300      	movs	r3, #0
 8001c36:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001c38:	4b2a      	ldr	r3, [pc, #168]	; (8001ce4 <HAL_RCC_OscConfig+0x504>)
 8001c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d10d      	bne.n	8001c60 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c44:	4b27      	ldr	r3, [pc, #156]	; (8001ce4 <HAL_RCC_OscConfig+0x504>)
 8001c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c48:	4a26      	ldr	r2, [pc, #152]	; (8001ce4 <HAL_RCC_OscConfig+0x504>)
 8001c4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c4e:	6593      	str	r3, [r2, #88]	; 0x58
 8001c50:	4b24      	ldr	r3, [pc, #144]	; (8001ce4 <HAL_RCC_OscConfig+0x504>)
 8001c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c58:	60bb      	str	r3, [r7, #8]
 8001c5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c60:	4b21      	ldr	r3, [pc, #132]	; (8001ce8 <HAL_RCC_OscConfig+0x508>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d118      	bne.n	8001c9e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c6c:	4b1e      	ldr	r3, [pc, #120]	; (8001ce8 <HAL_RCC_OscConfig+0x508>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a1d      	ldr	r2, [pc, #116]	; (8001ce8 <HAL_RCC_OscConfig+0x508>)
 8001c72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c76:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c78:	f7ff f9cc 	bl	8001014 <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c80:	f7ff f9c8 	bl	8001014 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e17a      	b.n	8001f88 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c92:	4b15      	ldr	r3, [pc, #84]	; (8001ce8 <HAL_RCC_OscConfig+0x508>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d0f0      	beq.n	8001c80 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d108      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x4d8>
 8001ca6:	4b0f      	ldr	r3, [pc, #60]	; (8001ce4 <HAL_RCC_OscConfig+0x504>)
 8001ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cac:	4a0d      	ldr	r2, [pc, #52]	; (8001ce4 <HAL_RCC_OscConfig+0x504>)
 8001cae:	f043 0301 	orr.w	r3, r3, #1
 8001cb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cb6:	e029      	b.n	8001d0c <HAL_RCC_OscConfig+0x52c>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	2b05      	cmp	r3, #5
 8001cbe:	d115      	bne.n	8001cec <HAL_RCC_OscConfig+0x50c>
 8001cc0:	4b08      	ldr	r3, [pc, #32]	; (8001ce4 <HAL_RCC_OscConfig+0x504>)
 8001cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cc6:	4a07      	ldr	r2, [pc, #28]	; (8001ce4 <HAL_RCC_OscConfig+0x504>)
 8001cc8:	f043 0304 	orr.w	r3, r3, #4
 8001ccc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cd0:	4b04      	ldr	r3, [pc, #16]	; (8001ce4 <HAL_RCC_OscConfig+0x504>)
 8001cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cd6:	4a03      	ldr	r2, [pc, #12]	; (8001ce4 <HAL_RCC_OscConfig+0x504>)
 8001cd8:	f043 0301 	orr.w	r3, r3, #1
 8001cdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ce0:	e014      	b.n	8001d0c <HAL_RCC_OscConfig+0x52c>
 8001ce2:	bf00      	nop
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	40007000 	.word	0x40007000
 8001cec:	4b9c      	ldr	r3, [pc, #624]	; (8001f60 <HAL_RCC_OscConfig+0x780>)
 8001cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cf2:	4a9b      	ldr	r2, [pc, #620]	; (8001f60 <HAL_RCC_OscConfig+0x780>)
 8001cf4:	f023 0301 	bic.w	r3, r3, #1
 8001cf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cfc:	4b98      	ldr	r3, [pc, #608]	; (8001f60 <HAL_RCC_OscConfig+0x780>)
 8001cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d02:	4a97      	ldr	r2, [pc, #604]	; (8001f60 <HAL_RCC_OscConfig+0x780>)
 8001d04:	f023 0304 	bic.w	r3, r3, #4
 8001d08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d016      	beq.n	8001d42 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d14:	f7ff f97e 	bl	8001014 <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d1a:	e00a      	b.n	8001d32 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d1c:	f7ff f97a 	bl	8001014 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e12a      	b.n	8001f88 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d32:	4b8b      	ldr	r3, [pc, #556]	; (8001f60 <HAL_RCC_OscConfig+0x780>)
 8001d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d38:	f003 0302 	and.w	r3, r3, #2
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d0ed      	beq.n	8001d1c <HAL_RCC_OscConfig+0x53c>
 8001d40:	e015      	b.n	8001d6e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d42:	f7ff f967 	bl	8001014 <HAL_GetTick>
 8001d46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d48:	e00a      	b.n	8001d60 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d4a:	f7ff f963 	bl	8001014 <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d901      	bls.n	8001d60 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e113      	b.n	8001f88 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d60:	4b7f      	ldr	r3, [pc, #508]	; (8001f60 <HAL_RCC_OscConfig+0x780>)
 8001d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d1ed      	bne.n	8001d4a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d6e:	7ffb      	ldrb	r3, [r7, #31]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d105      	bne.n	8001d80 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d74:	4b7a      	ldr	r3, [pc, #488]	; (8001f60 <HAL_RCC_OscConfig+0x780>)
 8001d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d78:	4a79      	ldr	r2, [pc, #484]	; (8001f60 <HAL_RCC_OscConfig+0x780>)
 8001d7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d7e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	f000 80fe 	beq.w	8001f86 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	f040 80d0 	bne.w	8001f34 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d94:	4b72      	ldr	r3, [pc, #456]	; (8001f60 <HAL_RCC_OscConfig+0x780>)
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	f003 0203 	and.w	r2, r3, #3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d130      	bne.n	8001e0a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	3b01      	subs	r3, #1
 8001db4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d127      	bne.n	8001e0a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dc4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d11f      	bne.n	8001e0a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001dd4:	2a07      	cmp	r2, #7
 8001dd6:	bf14      	ite	ne
 8001dd8:	2201      	movne	r2, #1
 8001dda:	2200      	moveq	r2, #0
 8001ddc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d113      	bne.n	8001e0a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dec:	085b      	lsrs	r3, r3, #1
 8001dee:	3b01      	subs	r3, #1
 8001df0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d109      	bne.n	8001e0a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e00:	085b      	lsrs	r3, r3, #1
 8001e02:	3b01      	subs	r3, #1
 8001e04:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d06e      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	2b0c      	cmp	r3, #12
 8001e0e:	d069      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001e10:	4b53      	ldr	r3, [pc, #332]	; (8001f60 <HAL_RCC_OscConfig+0x780>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d105      	bne.n	8001e28 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001e1c:	4b50      	ldr	r3, [pc, #320]	; (8001f60 <HAL_RCC_OscConfig+0x780>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e0ad      	b.n	8001f88 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001e2c:	4b4c      	ldr	r3, [pc, #304]	; (8001f60 <HAL_RCC_OscConfig+0x780>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a4b      	ldr	r2, [pc, #300]	; (8001f60 <HAL_RCC_OscConfig+0x780>)
 8001e32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e36:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e38:	f7ff f8ec 	bl	8001014 <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e40:	f7ff f8e8 	bl	8001014 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e09a      	b.n	8001f88 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e52:	4b43      	ldr	r3, [pc, #268]	; (8001f60 <HAL_RCC_OscConfig+0x780>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1f0      	bne.n	8001e40 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e5e:	4b40      	ldr	r3, [pc, #256]	; (8001f60 <HAL_RCC_OscConfig+0x780>)
 8001e60:	68da      	ldr	r2, [r3, #12]
 8001e62:	4b40      	ldr	r3, [pc, #256]	; (8001f64 <HAL_RCC_OscConfig+0x784>)
 8001e64:	4013      	ands	r3, r2
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e6e:	3a01      	subs	r2, #1
 8001e70:	0112      	lsls	r2, r2, #4
 8001e72:	4311      	orrs	r1, r2
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e78:	0212      	lsls	r2, r2, #8
 8001e7a:	4311      	orrs	r1, r2
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e80:	0852      	lsrs	r2, r2, #1
 8001e82:	3a01      	subs	r2, #1
 8001e84:	0552      	lsls	r2, r2, #21
 8001e86:	4311      	orrs	r1, r2
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e8c:	0852      	lsrs	r2, r2, #1
 8001e8e:	3a01      	subs	r2, #1
 8001e90:	0652      	lsls	r2, r2, #25
 8001e92:	4311      	orrs	r1, r2
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e98:	0912      	lsrs	r2, r2, #4
 8001e9a:	0452      	lsls	r2, r2, #17
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	4930      	ldr	r1, [pc, #192]	; (8001f60 <HAL_RCC_OscConfig+0x780>)
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ea4:	4b2e      	ldr	r3, [pc, #184]	; (8001f60 <HAL_RCC_OscConfig+0x780>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a2d      	ldr	r2, [pc, #180]	; (8001f60 <HAL_RCC_OscConfig+0x780>)
 8001eaa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001eae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001eb0:	4b2b      	ldr	r3, [pc, #172]	; (8001f60 <HAL_RCC_OscConfig+0x780>)
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	4a2a      	ldr	r2, [pc, #168]	; (8001f60 <HAL_RCC_OscConfig+0x780>)
 8001eb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001eba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ebc:	f7ff f8aa 	bl	8001014 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ec2:	e008      	b.n	8001ed6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ec4:	f7ff f8a6 	bl	8001014 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e058      	b.n	8001f88 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ed6:	4b22      	ldr	r3, [pc, #136]	; (8001f60 <HAL_RCC_OscConfig+0x780>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d0f0      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ee2:	e050      	b.n	8001f86 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e04f      	b.n	8001f88 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ee8:	4b1d      	ldr	r3, [pc, #116]	; (8001f60 <HAL_RCC_OscConfig+0x780>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d148      	bne.n	8001f86 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ef4:	4b1a      	ldr	r3, [pc, #104]	; (8001f60 <HAL_RCC_OscConfig+0x780>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a19      	ldr	r2, [pc, #100]	; (8001f60 <HAL_RCC_OscConfig+0x780>)
 8001efa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001efe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f00:	4b17      	ldr	r3, [pc, #92]	; (8001f60 <HAL_RCC_OscConfig+0x780>)
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	4a16      	ldr	r2, [pc, #88]	; (8001f60 <HAL_RCC_OscConfig+0x780>)
 8001f06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f0a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f0c:	f7ff f882 	bl	8001014 <HAL_GetTick>
 8001f10:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f12:	e008      	b.n	8001f26 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f14:	f7ff f87e 	bl	8001014 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e030      	b.n	8001f88 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f26:	4b0e      	ldr	r3, [pc, #56]	; (8001f60 <HAL_RCC_OscConfig+0x780>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d0f0      	beq.n	8001f14 <HAL_RCC_OscConfig+0x734>
 8001f32:	e028      	b.n	8001f86 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	2b0c      	cmp	r3, #12
 8001f38:	d023      	beq.n	8001f82 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f3a:	4b09      	ldr	r3, [pc, #36]	; (8001f60 <HAL_RCC_OscConfig+0x780>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a08      	ldr	r2, [pc, #32]	; (8001f60 <HAL_RCC_OscConfig+0x780>)
 8001f40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f46:	f7ff f865 	bl	8001014 <HAL_GetTick>
 8001f4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f4c:	e00c      	b.n	8001f68 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f4e:	f7ff f861 	bl	8001014 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d905      	bls.n	8001f68 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e013      	b.n	8001f88 <HAL_RCC_OscConfig+0x7a8>
 8001f60:	40021000 	.word	0x40021000
 8001f64:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f68:	4b09      	ldr	r3, [pc, #36]	; (8001f90 <HAL_RCC_OscConfig+0x7b0>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d1ec      	bne.n	8001f4e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001f74:	4b06      	ldr	r3, [pc, #24]	; (8001f90 <HAL_RCC_OscConfig+0x7b0>)
 8001f76:	68da      	ldr	r2, [r3, #12]
 8001f78:	4905      	ldr	r1, [pc, #20]	; (8001f90 <HAL_RCC_OscConfig+0x7b0>)
 8001f7a:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <HAL_RCC_OscConfig+0x7b4>)
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	60cb      	str	r3, [r1, #12]
 8001f80:	e001      	b.n	8001f86 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e000      	b.n	8001f88 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001f86:	2300      	movs	r3, #0
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3720      	adds	r7, #32
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	40021000 	.word	0x40021000
 8001f94:	feeefffc 	.word	0xfeeefffc

08001f98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d101      	bne.n	8001fac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e0e7      	b.n	800217c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fac:	4b75      	ldr	r3, [pc, #468]	; (8002184 <HAL_RCC_ClockConfig+0x1ec>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0307 	and.w	r3, r3, #7
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d910      	bls.n	8001fdc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fba:	4b72      	ldr	r3, [pc, #456]	; (8002184 <HAL_RCC_ClockConfig+0x1ec>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f023 0207 	bic.w	r2, r3, #7
 8001fc2:	4970      	ldr	r1, [pc, #448]	; (8002184 <HAL_RCC_ClockConfig+0x1ec>)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fca:	4b6e      	ldr	r3, [pc, #440]	; (8002184 <HAL_RCC_ClockConfig+0x1ec>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	683a      	ldr	r2, [r7, #0]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d001      	beq.n	8001fdc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e0cf      	b.n	800217c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d010      	beq.n	800200a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689a      	ldr	r2, [r3, #8]
 8001fec:	4b66      	ldr	r3, [pc, #408]	; (8002188 <HAL_RCC_ClockConfig+0x1f0>)
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d908      	bls.n	800200a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ff8:	4b63      	ldr	r3, [pc, #396]	; (8002188 <HAL_RCC_ClockConfig+0x1f0>)
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	4960      	ldr	r1, [pc, #384]	; (8002188 <HAL_RCC_ClockConfig+0x1f0>)
 8002006:	4313      	orrs	r3, r2
 8002008:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	2b00      	cmp	r3, #0
 8002014:	d04c      	beq.n	80020b0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	2b03      	cmp	r3, #3
 800201c:	d107      	bne.n	800202e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800201e:	4b5a      	ldr	r3, [pc, #360]	; (8002188 <HAL_RCC_ClockConfig+0x1f0>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d121      	bne.n	800206e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e0a6      	b.n	800217c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	2b02      	cmp	r3, #2
 8002034:	d107      	bne.n	8002046 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002036:	4b54      	ldr	r3, [pc, #336]	; (8002188 <HAL_RCC_ClockConfig+0x1f0>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d115      	bne.n	800206e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e09a      	b.n	800217c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d107      	bne.n	800205e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800204e:	4b4e      	ldr	r3, [pc, #312]	; (8002188 <HAL_RCC_ClockConfig+0x1f0>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d109      	bne.n	800206e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e08e      	b.n	800217c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800205e:	4b4a      	ldr	r3, [pc, #296]	; (8002188 <HAL_RCC_ClockConfig+0x1f0>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e086      	b.n	800217c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800206e:	4b46      	ldr	r3, [pc, #280]	; (8002188 <HAL_RCC_ClockConfig+0x1f0>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f023 0203 	bic.w	r2, r3, #3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	4943      	ldr	r1, [pc, #268]	; (8002188 <HAL_RCC_ClockConfig+0x1f0>)
 800207c:	4313      	orrs	r3, r2
 800207e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002080:	f7fe ffc8 	bl	8001014 <HAL_GetTick>
 8002084:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002086:	e00a      	b.n	800209e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002088:	f7fe ffc4 	bl	8001014 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	f241 3288 	movw	r2, #5000	; 0x1388
 8002096:	4293      	cmp	r3, r2
 8002098:	d901      	bls.n	800209e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e06e      	b.n	800217c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800209e:	4b3a      	ldr	r3, [pc, #232]	; (8002188 <HAL_RCC_ClockConfig+0x1f0>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f003 020c 	and.w	r2, r3, #12
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d1eb      	bne.n	8002088 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d010      	beq.n	80020de <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689a      	ldr	r2, [r3, #8]
 80020c0:	4b31      	ldr	r3, [pc, #196]	; (8002188 <HAL_RCC_ClockConfig+0x1f0>)
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d208      	bcs.n	80020de <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020cc:	4b2e      	ldr	r3, [pc, #184]	; (8002188 <HAL_RCC_ClockConfig+0x1f0>)
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	492b      	ldr	r1, [pc, #172]	; (8002188 <HAL_RCC_ClockConfig+0x1f0>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020de:	4b29      	ldr	r3, [pc, #164]	; (8002184 <HAL_RCC_ClockConfig+0x1ec>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0307 	and.w	r3, r3, #7
 80020e6:	683a      	ldr	r2, [r7, #0]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d210      	bcs.n	800210e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ec:	4b25      	ldr	r3, [pc, #148]	; (8002184 <HAL_RCC_ClockConfig+0x1ec>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f023 0207 	bic.w	r2, r3, #7
 80020f4:	4923      	ldr	r1, [pc, #140]	; (8002184 <HAL_RCC_ClockConfig+0x1ec>)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020fc:	4b21      	ldr	r3, [pc, #132]	; (8002184 <HAL_RCC_ClockConfig+0x1ec>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0307 	and.w	r3, r3, #7
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	429a      	cmp	r2, r3
 8002108:	d001      	beq.n	800210e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e036      	b.n	800217c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0304 	and.w	r3, r3, #4
 8002116:	2b00      	cmp	r3, #0
 8002118:	d008      	beq.n	800212c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800211a:	4b1b      	ldr	r3, [pc, #108]	; (8002188 <HAL_RCC_ClockConfig+0x1f0>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	4918      	ldr	r1, [pc, #96]	; (8002188 <HAL_RCC_ClockConfig+0x1f0>)
 8002128:	4313      	orrs	r3, r2
 800212a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0308 	and.w	r3, r3, #8
 8002134:	2b00      	cmp	r3, #0
 8002136:	d009      	beq.n	800214c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002138:	4b13      	ldr	r3, [pc, #76]	; (8002188 <HAL_RCC_ClockConfig+0x1f0>)
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	00db      	lsls	r3, r3, #3
 8002146:	4910      	ldr	r1, [pc, #64]	; (8002188 <HAL_RCC_ClockConfig+0x1f0>)
 8002148:	4313      	orrs	r3, r2
 800214a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800214c:	f000 f824 	bl	8002198 <HAL_RCC_GetSysClockFreq>
 8002150:	4602      	mov	r2, r0
 8002152:	4b0d      	ldr	r3, [pc, #52]	; (8002188 <HAL_RCC_ClockConfig+0x1f0>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	091b      	lsrs	r3, r3, #4
 8002158:	f003 030f 	and.w	r3, r3, #15
 800215c:	490b      	ldr	r1, [pc, #44]	; (800218c <HAL_RCC_ClockConfig+0x1f4>)
 800215e:	5ccb      	ldrb	r3, [r1, r3]
 8002160:	f003 031f 	and.w	r3, r3, #31
 8002164:	fa22 f303 	lsr.w	r3, r2, r3
 8002168:	4a09      	ldr	r2, [pc, #36]	; (8002190 <HAL_RCC_ClockConfig+0x1f8>)
 800216a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800216c:	4b09      	ldr	r3, [pc, #36]	; (8002194 <HAL_RCC_ClockConfig+0x1fc>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4618      	mov	r0, r3
 8002172:	f7fe feff 	bl	8000f74 <HAL_InitTick>
 8002176:	4603      	mov	r3, r0
 8002178:	72fb      	strb	r3, [r7, #11]

  return status;
 800217a:	7afb      	ldrb	r3, [r7, #11]
}
 800217c:	4618      	mov	r0, r3
 800217e:	3710      	adds	r7, #16
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40022000 	.word	0x40022000
 8002188:	40021000 	.word	0x40021000
 800218c:	080096c8 	.word	0x080096c8
 8002190:	20000008 	.word	0x20000008
 8002194:	20000000 	.word	0x20000000

08002198 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002198:	b480      	push	{r7}
 800219a:	b089      	sub	sp, #36	; 0x24
 800219c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800219e:	2300      	movs	r3, #0
 80021a0:	61fb      	str	r3, [r7, #28]
 80021a2:	2300      	movs	r3, #0
 80021a4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021a6:	4b3e      	ldr	r3, [pc, #248]	; (80022a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f003 030c 	and.w	r3, r3, #12
 80021ae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021b0:	4b3b      	ldr	r3, [pc, #236]	; (80022a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	f003 0303 	and.w	r3, r3, #3
 80021b8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d005      	beq.n	80021cc <HAL_RCC_GetSysClockFreq+0x34>
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	2b0c      	cmp	r3, #12
 80021c4:	d121      	bne.n	800220a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d11e      	bne.n	800220a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80021cc:	4b34      	ldr	r3, [pc, #208]	; (80022a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0308 	and.w	r3, r3, #8
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d107      	bne.n	80021e8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80021d8:	4b31      	ldr	r3, [pc, #196]	; (80022a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80021da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021de:	0a1b      	lsrs	r3, r3, #8
 80021e0:	f003 030f 	and.w	r3, r3, #15
 80021e4:	61fb      	str	r3, [r7, #28]
 80021e6:	e005      	b.n	80021f4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80021e8:	4b2d      	ldr	r3, [pc, #180]	; (80022a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	091b      	lsrs	r3, r3, #4
 80021ee:	f003 030f 	and.w	r3, r3, #15
 80021f2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80021f4:	4a2b      	ldr	r2, [pc, #172]	; (80022a4 <HAL_RCC_GetSysClockFreq+0x10c>)
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021fc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d10d      	bne.n	8002220 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002208:	e00a      	b.n	8002220 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	2b04      	cmp	r3, #4
 800220e:	d102      	bne.n	8002216 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002210:	4b25      	ldr	r3, [pc, #148]	; (80022a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002212:	61bb      	str	r3, [r7, #24]
 8002214:	e004      	b.n	8002220 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	2b08      	cmp	r3, #8
 800221a:	d101      	bne.n	8002220 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800221c:	4b23      	ldr	r3, [pc, #140]	; (80022ac <HAL_RCC_GetSysClockFreq+0x114>)
 800221e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	2b0c      	cmp	r3, #12
 8002224:	d134      	bne.n	8002290 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002226:	4b1e      	ldr	r3, [pc, #120]	; (80022a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	f003 0303 	and.w	r3, r3, #3
 800222e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	2b02      	cmp	r3, #2
 8002234:	d003      	beq.n	800223e <HAL_RCC_GetSysClockFreq+0xa6>
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	2b03      	cmp	r3, #3
 800223a:	d003      	beq.n	8002244 <HAL_RCC_GetSysClockFreq+0xac>
 800223c:	e005      	b.n	800224a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800223e:	4b1a      	ldr	r3, [pc, #104]	; (80022a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002240:	617b      	str	r3, [r7, #20]
      break;
 8002242:	e005      	b.n	8002250 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002244:	4b19      	ldr	r3, [pc, #100]	; (80022ac <HAL_RCC_GetSysClockFreq+0x114>)
 8002246:	617b      	str	r3, [r7, #20]
      break;
 8002248:	e002      	b.n	8002250 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	617b      	str	r3, [r7, #20]
      break;
 800224e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002250:	4b13      	ldr	r3, [pc, #76]	; (80022a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	091b      	lsrs	r3, r3, #4
 8002256:	f003 0307 	and.w	r3, r3, #7
 800225a:	3301      	adds	r3, #1
 800225c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800225e:	4b10      	ldr	r3, [pc, #64]	; (80022a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	0a1b      	lsrs	r3, r3, #8
 8002264:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002268:	697a      	ldr	r2, [r7, #20]
 800226a:	fb03 f202 	mul.w	r2, r3, r2
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	fbb2 f3f3 	udiv	r3, r2, r3
 8002274:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002276:	4b0a      	ldr	r3, [pc, #40]	; (80022a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	0e5b      	lsrs	r3, r3, #25
 800227c:	f003 0303 	and.w	r3, r3, #3
 8002280:	3301      	adds	r3, #1
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002286:	697a      	ldr	r2, [r7, #20]
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	fbb2 f3f3 	udiv	r3, r2, r3
 800228e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002290:	69bb      	ldr	r3, [r7, #24]
}
 8002292:	4618      	mov	r0, r3
 8002294:	3724      	adds	r7, #36	; 0x24
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	40021000 	.word	0x40021000
 80022a4:	080096e0 	.word	0x080096e0
 80022a8:	00f42400 	.word	0x00f42400
 80022ac:	007a1200 	.word	0x007a1200

080022b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022b4:	4b03      	ldr	r3, [pc, #12]	; (80022c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80022b6:	681b      	ldr	r3, [r3, #0]
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	20000008 	.word	0x20000008

080022c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80022cc:	f7ff fff0 	bl	80022b0 <HAL_RCC_GetHCLKFreq>
 80022d0:	4602      	mov	r2, r0
 80022d2:	4b06      	ldr	r3, [pc, #24]	; (80022ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	0a1b      	lsrs	r3, r3, #8
 80022d8:	f003 0307 	and.w	r3, r3, #7
 80022dc:	4904      	ldr	r1, [pc, #16]	; (80022f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80022de:	5ccb      	ldrb	r3, [r1, r3]
 80022e0:	f003 031f 	and.w	r3, r3, #31
 80022e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	40021000 	.word	0x40021000
 80022f0:	080096d8 	.word	0x080096d8

080022f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80022f8:	f7ff ffda 	bl	80022b0 <HAL_RCC_GetHCLKFreq>
 80022fc:	4602      	mov	r2, r0
 80022fe:	4b06      	ldr	r3, [pc, #24]	; (8002318 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	0adb      	lsrs	r3, r3, #11
 8002304:	f003 0307 	and.w	r3, r3, #7
 8002308:	4904      	ldr	r1, [pc, #16]	; (800231c <HAL_RCC_GetPCLK2Freq+0x28>)
 800230a:	5ccb      	ldrb	r3, [r1, r3]
 800230c:	f003 031f 	and.w	r3, r3, #31
 8002310:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002314:	4618      	mov	r0, r3
 8002316:	bd80      	pop	{r7, pc}
 8002318:	40021000 	.word	0x40021000
 800231c:	080096d8 	.word	0x080096d8

08002320 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002328:	2300      	movs	r3, #0
 800232a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800232c:	4b2a      	ldr	r3, [pc, #168]	; (80023d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800232e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002330:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d003      	beq.n	8002340 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002338:	f7ff f9ee 	bl	8001718 <HAL_PWREx_GetVoltageRange>
 800233c:	6178      	str	r0, [r7, #20]
 800233e:	e014      	b.n	800236a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002340:	4b25      	ldr	r3, [pc, #148]	; (80023d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002344:	4a24      	ldr	r2, [pc, #144]	; (80023d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002346:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800234a:	6593      	str	r3, [r2, #88]	; 0x58
 800234c:	4b22      	ldr	r3, [pc, #136]	; (80023d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800234e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002350:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002354:	60fb      	str	r3, [r7, #12]
 8002356:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002358:	f7ff f9de 	bl	8001718 <HAL_PWREx_GetVoltageRange>
 800235c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800235e:	4b1e      	ldr	r3, [pc, #120]	; (80023d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002362:	4a1d      	ldr	r2, [pc, #116]	; (80023d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002364:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002368:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002370:	d10b      	bne.n	800238a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2b80      	cmp	r3, #128	; 0x80
 8002376:	d919      	bls.n	80023ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2ba0      	cmp	r3, #160	; 0xa0
 800237c:	d902      	bls.n	8002384 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800237e:	2302      	movs	r3, #2
 8002380:	613b      	str	r3, [r7, #16]
 8002382:	e013      	b.n	80023ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002384:	2301      	movs	r3, #1
 8002386:	613b      	str	r3, [r7, #16]
 8002388:	e010      	b.n	80023ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2b80      	cmp	r3, #128	; 0x80
 800238e:	d902      	bls.n	8002396 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002390:	2303      	movs	r3, #3
 8002392:	613b      	str	r3, [r7, #16]
 8002394:	e00a      	b.n	80023ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2b80      	cmp	r3, #128	; 0x80
 800239a:	d102      	bne.n	80023a2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800239c:	2302      	movs	r3, #2
 800239e:	613b      	str	r3, [r7, #16]
 80023a0:	e004      	b.n	80023ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2b70      	cmp	r3, #112	; 0x70
 80023a6:	d101      	bne.n	80023ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023a8:	2301      	movs	r3, #1
 80023aa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80023ac:	4b0b      	ldr	r3, [pc, #44]	; (80023dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f023 0207 	bic.w	r2, r3, #7
 80023b4:	4909      	ldr	r1, [pc, #36]	; (80023dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80023bc:	4b07      	ldr	r3, [pc, #28]	; (80023dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0307 	and.w	r3, r3, #7
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d001      	beq.n	80023ce <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e000      	b.n	80023d0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3718      	adds	r7, #24
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40021000 	.word	0x40021000
 80023dc:	40022000 	.word	0x40022000

080023e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023e8:	2300      	movs	r3, #0
 80023ea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023ec:	2300      	movs	r3, #0
 80023ee:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d041      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002400:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002404:	d02a      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002406:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800240a:	d824      	bhi.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800240c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002410:	d008      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002412:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002416:	d81e      	bhi.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002418:	2b00      	cmp	r3, #0
 800241a:	d00a      	beq.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800241c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002420:	d010      	beq.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002422:	e018      	b.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002424:	4b86      	ldr	r3, [pc, #536]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	4a85      	ldr	r2, [pc, #532]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800242a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800242e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002430:	e015      	b.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	3304      	adds	r3, #4
 8002436:	2100      	movs	r1, #0
 8002438:	4618      	mov	r0, r3
 800243a:	f000 fabb 	bl	80029b4 <RCCEx_PLLSAI1_Config>
 800243e:	4603      	mov	r3, r0
 8002440:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002442:	e00c      	b.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	3320      	adds	r3, #32
 8002448:	2100      	movs	r1, #0
 800244a:	4618      	mov	r0, r3
 800244c:	f000 fba6 	bl	8002b9c <RCCEx_PLLSAI2_Config>
 8002450:	4603      	mov	r3, r0
 8002452:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002454:	e003      	b.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	74fb      	strb	r3, [r7, #19]
      break;
 800245a:	e000      	b.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800245c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800245e:	7cfb      	ldrb	r3, [r7, #19]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d10b      	bne.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002464:	4b76      	ldr	r3, [pc, #472]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800246a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002472:	4973      	ldr	r1, [pc, #460]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002474:	4313      	orrs	r3, r2
 8002476:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800247a:	e001      	b.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800247c:	7cfb      	ldrb	r3, [r7, #19]
 800247e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d041      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002490:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002494:	d02a      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002496:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800249a:	d824      	bhi.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800249c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80024a0:	d008      	beq.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80024a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80024a6:	d81e      	bhi.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00a      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80024ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024b0:	d010      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80024b2:	e018      	b.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80024b4:	4b62      	ldr	r3, [pc, #392]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	4a61      	ldr	r2, [pc, #388]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024be:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80024c0:	e015      	b.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	3304      	adds	r3, #4
 80024c6:	2100      	movs	r1, #0
 80024c8:	4618      	mov	r0, r3
 80024ca:	f000 fa73 	bl	80029b4 <RCCEx_PLLSAI1_Config>
 80024ce:	4603      	mov	r3, r0
 80024d0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80024d2:	e00c      	b.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	3320      	adds	r3, #32
 80024d8:	2100      	movs	r1, #0
 80024da:	4618      	mov	r0, r3
 80024dc:	f000 fb5e 	bl	8002b9c <RCCEx_PLLSAI2_Config>
 80024e0:	4603      	mov	r3, r0
 80024e2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80024e4:	e003      	b.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	74fb      	strb	r3, [r7, #19]
      break;
 80024ea:	e000      	b.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80024ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024ee:	7cfb      	ldrb	r3, [r7, #19]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d10b      	bne.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80024f4:	4b52      	ldr	r3, [pc, #328]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024fa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002502:	494f      	ldr	r1, [pc, #316]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002504:	4313      	orrs	r3, r2
 8002506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800250a:	e001      	b.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800250c:	7cfb      	ldrb	r3, [r7, #19]
 800250e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002518:	2b00      	cmp	r3, #0
 800251a:	f000 80a0 	beq.w	800265e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800251e:	2300      	movs	r3, #0
 8002520:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002522:	4b47      	ldr	r3, [pc, #284]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800252e:	2301      	movs	r3, #1
 8002530:	e000      	b.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002532:	2300      	movs	r3, #0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d00d      	beq.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002538:	4b41      	ldr	r3, [pc, #260]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800253a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800253c:	4a40      	ldr	r2, [pc, #256]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800253e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002542:	6593      	str	r3, [r2, #88]	; 0x58
 8002544:	4b3e      	ldr	r3, [pc, #248]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800254c:	60bb      	str	r3, [r7, #8]
 800254e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002550:	2301      	movs	r3, #1
 8002552:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002554:	4b3b      	ldr	r3, [pc, #236]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a3a      	ldr	r2, [pc, #232]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800255a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800255e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002560:	f7fe fd58 	bl	8001014 <HAL_GetTick>
 8002564:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002566:	e009      	b.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002568:	f7fe fd54 	bl	8001014 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d902      	bls.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	74fb      	strb	r3, [r7, #19]
        break;
 800257a:	e005      	b.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800257c:	4b31      	ldr	r3, [pc, #196]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002584:	2b00      	cmp	r3, #0
 8002586:	d0ef      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002588:	7cfb      	ldrb	r3, [r7, #19]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d15c      	bne.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800258e:	4b2c      	ldr	r3, [pc, #176]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002594:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002598:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d01f      	beq.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025a6:	697a      	ldr	r2, [r7, #20]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d019      	beq.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80025ac:	4b24      	ldr	r3, [pc, #144]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025b6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80025b8:	4b21      	ldr	r3, [pc, #132]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025be:	4a20      	ldr	r2, [pc, #128]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80025c8:	4b1d      	ldr	r3, [pc, #116]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ce:	4a1c      	ldr	r2, [pc, #112]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80025d8:	4a19      	ldr	r2, [pc, #100]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d016      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ea:	f7fe fd13 	bl	8001014 <HAL_GetTick>
 80025ee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025f0:	e00b      	b.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025f2:	f7fe fd0f 	bl	8001014 <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002600:	4293      	cmp	r3, r2
 8002602:	d902      	bls.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	74fb      	strb	r3, [r7, #19]
            break;
 8002608:	e006      	b.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800260a:	4b0d      	ldr	r3, [pc, #52]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800260c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d0ec      	beq.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002618:	7cfb      	ldrb	r3, [r7, #19]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10c      	bne.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800261e:	4b08      	ldr	r3, [pc, #32]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002624:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800262e:	4904      	ldr	r1, [pc, #16]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002630:	4313      	orrs	r3, r2
 8002632:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002636:	e009      	b.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002638:	7cfb      	ldrb	r3, [r7, #19]
 800263a:	74bb      	strb	r3, [r7, #18]
 800263c:	e006      	b.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800263e:	bf00      	nop
 8002640:	40021000 	.word	0x40021000
 8002644:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002648:	7cfb      	ldrb	r3, [r7, #19]
 800264a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800264c:	7c7b      	ldrb	r3, [r7, #17]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d105      	bne.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002652:	4b9e      	ldr	r3, [pc, #632]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002656:	4a9d      	ldr	r2, [pc, #628]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002658:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800265c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00a      	beq.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800266a:	4b98      	ldr	r3, [pc, #608]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800266c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002670:	f023 0203 	bic.w	r2, r3, #3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002678:	4994      	ldr	r1, [pc, #592]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800267a:	4313      	orrs	r3, r2
 800267c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0302 	and.w	r3, r3, #2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d00a      	beq.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800268c:	4b8f      	ldr	r3, [pc, #572]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800268e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002692:	f023 020c 	bic.w	r2, r3, #12
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800269a:	498c      	ldr	r1, [pc, #560]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800269c:	4313      	orrs	r3, r2
 800269e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0304 	and.w	r3, r3, #4
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d00a      	beq.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80026ae:	4b87      	ldr	r3, [pc, #540]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026bc:	4983      	ldr	r1, [pc, #524]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0308 	and.w	r3, r3, #8
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d00a      	beq.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80026d0:	4b7e      	ldr	r3, [pc, #504]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026de:	497b      	ldr	r1, [pc, #492]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0310 	and.w	r3, r3, #16
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00a      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80026f2:	4b76      	ldr	r3, [pc, #472]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002700:	4972      	ldr	r1, [pc, #456]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002702:	4313      	orrs	r3, r2
 8002704:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0320 	and.w	r3, r3, #32
 8002710:	2b00      	cmp	r3, #0
 8002712:	d00a      	beq.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002714:	4b6d      	ldr	r3, [pc, #436]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800271a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002722:	496a      	ldr	r1, [pc, #424]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002724:	4313      	orrs	r3, r2
 8002726:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00a      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002736:	4b65      	ldr	r3, [pc, #404]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800273c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002744:	4961      	ldr	r1, [pc, #388]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002746:	4313      	orrs	r3, r2
 8002748:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002754:	2b00      	cmp	r3, #0
 8002756:	d00a      	beq.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002758:	4b5c      	ldr	r3, [pc, #368]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800275a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800275e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002766:	4959      	ldr	r1, [pc, #356]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002768:	4313      	orrs	r3, r2
 800276a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002776:	2b00      	cmp	r3, #0
 8002778:	d00a      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800277a:	4b54      	ldr	r3, [pc, #336]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800277c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002780:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002788:	4950      	ldr	r1, [pc, #320]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800278a:	4313      	orrs	r3, r2
 800278c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002798:	2b00      	cmp	r3, #0
 800279a:	d00a      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800279c:	4b4b      	ldr	r3, [pc, #300]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800279e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027aa:	4948      	ldr	r1, [pc, #288]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d00a      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027be:	4b43      	ldr	r3, [pc, #268]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027cc:	493f      	ldr	r1, [pc, #252]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d028      	beq.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80027e0:	4b3a      	ldr	r3, [pc, #232]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027ee:	4937      	ldr	r1, [pc, #220]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027fe:	d106      	bne.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002800:	4b32      	ldr	r3, [pc, #200]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	4a31      	ldr	r2, [pc, #196]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002806:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800280a:	60d3      	str	r3, [r2, #12]
 800280c:	e011      	b.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002812:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002816:	d10c      	bne.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	3304      	adds	r3, #4
 800281c:	2101      	movs	r1, #1
 800281e:	4618      	mov	r0, r3
 8002820:	f000 f8c8 	bl	80029b4 <RCCEx_PLLSAI1_Config>
 8002824:	4603      	mov	r3, r0
 8002826:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002828:	7cfb      	ldrb	r3, [r7, #19]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800282e:	7cfb      	ldrb	r3, [r7, #19]
 8002830:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d028      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800283e:	4b23      	ldr	r3, [pc, #140]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002844:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800284c:	491f      	ldr	r1, [pc, #124]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800284e:	4313      	orrs	r3, r2
 8002850:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002858:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800285c:	d106      	bne.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800285e:	4b1b      	ldr	r3, [pc, #108]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	4a1a      	ldr	r2, [pc, #104]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002864:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002868:	60d3      	str	r3, [r2, #12]
 800286a:	e011      	b.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002870:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002874:	d10c      	bne.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	3304      	adds	r3, #4
 800287a:	2101      	movs	r1, #1
 800287c:	4618      	mov	r0, r3
 800287e:	f000 f899 	bl	80029b4 <RCCEx_PLLSAI1_Config>
 8002882:	4603      	mov	r3, r0
 8002884:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002886:	7cfb      	ldrb	r3, [r7, #19]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d001      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800288c:	7cfb      	ldrb	r3, [r7, #19]
 800288e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d02b      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800289c:	4b0b      	ldr	r3, [pc, #44]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800289e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028aa:	4908      	ldr	r1, [pc, #32]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028ba:	d109      	bne.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028bc:	4b03      	ldr	r3, [pc, #12]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	4a02      	ldr	r2, [pc, #8]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028c6:	60d3      	str	r3, [r2, #12]
 80028c8:	e014      	b.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80028ca:	bf00      	nop
 80028cc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028d8:	d10c      	bne.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	3304      	adds	r3, #4
 80028de:	2101      	movs	r1, #1
 80028e0:	4618      	mov	r0, r3
 80028e2:	f000 f867 	bl	80029b4 <RCCEx_PLLSAI1_Config>
 80028e6:	4603      	mov	r3, r0
 80028e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028ea:	7cfb      	ldrb	r3, [r7, #19]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d001      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80028f0:	7cfb      	ldrb	r3, [r7, #19]
 80028f2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d02f      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002900:	4b2b      	ldr	r3, [pc, #172]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002906:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800290e:	4928      	ldr	r1, [pc, #160]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002910:	4313      	orrs	r3, r2
 8002912:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800291a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800291e:	d10d      	bne.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	3304      	adds	r3, #4
 8002924:	2102      	movs	r1, #2
 8002926:	4618      	mov	r0, r3
 8002928:	f000 f844 	bl	80029b4 <RCCEx_PLLSAI1_Config>
 800292c:	4603      	mov	r3, r0
 800292e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002930:	7cfb      	ldrb	r3, [r7, #19]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d014      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002936:	7cfb      	ldrb	r3, [r7, #19]
 8002938:	74bb      	strb	r3, [r7, #18]
 800293a:	e011      	b.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002940:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002944:	d10c      	bne.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	3320      	adds	r3, #32
 800294a:	2102      	movs	r1, #2
 800294c:	4618      	mov	r0, r3
 800294e:	f000 f925 	bl	8002b9c <RCCEx_PLLSAI2_Config>
 8002952:	4603      	mov	r3, r0
 8002954:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002956:	7cfb      	ldrb	r3, [r7, #19]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800295c:	7cfb      	ldrb	r3, [r7, #19]
 800295e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d00a      	beq.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800296c:	4b10      	ldr	r3, [pc, #64]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800296e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002972:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800297a:	490d      	ldr	r1, [pc, #52]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800297c:	4313      	orrs	r3, r2
 800297e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d00b      	beq.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800298e:	4b08      	ldr	r3, [pc, #32]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002994:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800299e:	4904      	ldr	r1, [pc, #16]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80029a6:	7cbb      	ldrb	r3, [r7, #18]
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3718      	adds	r7, #24
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	40021000 	.word	0x40021000

080029b4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80029be:	2300      	movs	r3, #0
 80029c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80029c2:	4b75      	ldr	r3, [pc, #468]	; (8002b98 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	f003 0303 	and.w	r3, r3, #3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d018      	beq.n	8002a00 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80029ce:	4b72      	ldr	r3, [pc, #456]	; (8002b98 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	f003 0203 	and.w	r2, r3, #3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	429a      	cmp	r2, r3
 80029dc:	d10d      	bne.n	80029fa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
       ||
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d009      	beq.n	80029fa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80029e6:	4b6c      	ldr	r3, [pc, #432]	; (8002b98 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	091b      	lsrs	r3, r3, #4
 80029ec:	f003 0307 	and.w	r3, r3, #7
 80029f0:	1c5a      	adds	r2, r3, #1
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
       ||
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d047      	beq.n	8002a8a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	73fb      	strb	r3, [r7, #15]
 80029fe:	e044      	b.n	8002a8a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2b03      	cmp	r3, #3
 8002a06:	d018      	beq.n	8002a3a <RCCEx_PLLSAI1_Config+0x86>
 8002a08:	2b03      	cmp	r3, #3
 8002a0a:	d825      	bhi.n	8002a58 <RCCEx_PLLSAI1_Config+0xa4>
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d002      	beq.n	8002a16 <RCCEx_PLLSAI1_Config+0x62>
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d009      	beq.n	8002a28 <RCCEx_PLLSAI1_Config+0x74>
 8002a14:	e020      	b.n	8002a58 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a16:	4b60      	ldr	r3, [pc, #384]	; (8002b98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d11d      	bne.n	8002a5e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a26:	e01a      	b.n	8002a5e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a28:	4b5b      	ldr	r3, [pc, #364]	; (8002b98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d116      	bne.n	8002a62 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a38:	e013      	b.n	8002a62 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a3a:	4b57      	ldr	r3, [pc, #348]	; (8002b98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d10f      	bne.n	8002a66 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a46:	4b54      	ldr	r3, [pc, #336]	; (8002b98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d109      	bne.n	8002a66 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a56:	e006      	b.n	8002a66 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a5c:	e004      	b.n	8002a68 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a5e:	bf00      	nop
 8002a60:	e002      	b.n	8002a68 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a62:	bf00      	nop
 8002a64:	e000      	b.n	8002a68 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a66:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a68:	7bfb      	ldrb	r3, [r7, #15]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d10d      	bne.n	8002a8a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a6e:	4b4a      	ldr	r3, [pc, #296]	; (8002b98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6819      	ldr	r1, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	011b      	lsls	r3, r3, #4
 8002a82:	430b      	orrs	r3, r1
 8002a84:	4944      	ldr	r1, [pc, #272]	; (8002b98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a8a:	7bfb      	ldrb	r3, [r7, #15]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d17d      	bne.n	8002b8c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002a90:	4b41      	ldr	r3, [pc, #260]	; (8002b98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a40      	ldr	r2, [pc, #256]	; (8002b98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a96:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002a9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a9c:	f7fe faba 	bl	8001014 <HAL_GetTick>
 8002aa0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002aa2:	e009      	b.n	8002ab8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002aa4:	f7fe fab6 	bl	8001014 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d902      	bls.n	8002ab8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	73fb      	strb	r3, [r7, #15]
        break;
 8002ab6:	e005      	b.n	8002ac4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ab8:	4b37      	ldr	r3, [pc, #220]	; (8002b98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d1ef      	bne.n	8002aa4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002ac4:	7bfb      	ldrb	r3, [r7, #15]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d160      	bne.n	8002b8c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d111      	bne.n	8002af4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ad0:	4b31      	ldr	r3, [pc, #196]	; (8002b98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002ad8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	6892      	ldr	r2, [r2, #8]
 8002ae0:	0211      	lsls	r1, r2, #8
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	68d2      	ldr	r2, [r2, #12]
 8002ae6:	0912      	lsrs	r2, r2, #4
 8002ae8:	0452      	lsls	r2, r2, #17
 8002aea:	430a      	orrs	r2, r1
 8002aec:	492a      	ldr	r1, [pc, #168]	; (8002b98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	610b      	str	r3, [r1, #16]
 8002af2:	e027      	b.n	8002b44 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d112      	bne.n	8002b20 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002afa:	4b27      	ldr	r3, [pc, #156]	; (8002b98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002b02:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	6892      	ldr	r2, [r2, #8]
 8002b0a:	0211      	lsls	r1, r2, #8
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	6912      	ldr	r2, [r2, #16]
 8002b10:	0852      	lsrs	r2, r2, #1
 8002b12:	3a01      	subs	r2, #1
 8002b14:	0552      	lsls	r2, r2, #21
 8002b16:	430a      	orrs	r2, r1
 8002b18:	491f      	ldr	r1, [pc, #124]	; (8002b98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	610b      	str	r3, [r1, #16]
 8002b1e:	e011      	b.n	8002b44 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b20:	4b1d      	ldr	r3, [pc, #116]	; (8002b98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002b28:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	6892      	ldr	r2, [r2, #8]
 8002b30:	0211      	lsls	r1, r2, #8
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	6952      	ldr	r2, [r2, #20]
 8002b36:	0852      	lsrs	r2, r2, #1
 8002b38:	3a01      	subs	r2, #1
 8002b3a:	0652      	lsls	r2, r2, #25
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	4916      	ldr	r1, [pc, #88]	; (8002b98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002b44:	4b14      	ldr	r3, [pc, #80]	; (8002b98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a13      	ldr	r2, [pc, #76]	; (8002b98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b4a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b4e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b50:	f7fe fa60 	bl	8001014 <HAL_GetTick>
 8002b54:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b56:	e009      	b.n	8002b6c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b58:	f7fe fa5c 	bl	8001014 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d902      	bls.n	8002b6c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	73fb      	strb	r3, [r7, #15]
          break;
 8002b6a:	e005      	b.n	8002b78 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b6c:	4b0a      	ldr	r3, [pc, #40]	; (8002b98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d0ef      	beq.n	8002b58 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002b78:	7bfb      	ldrb	r3, [r7, #15]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d106      	bne.n	8002b8c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002b7e:	4b06      	ldr	r3, [pc, #24]	; (8002b98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b80:	691a      	ldr	r2, [r3, #16]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	4904      	ldr	r1, [pc, #16]	; (8002b98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	40021000 	.word	0x40021000

08002b9c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002baa:	4b6a      	ldr	r3, [pc, #424]	; (8002d54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	f003 0303 	and.w	r3, r3, #3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d018      	beq.n	8002be8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002bb6:	4b67      	ldr	r3, [pc, #412]	; (8002d54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	f003 0203 	and.w	r2, r3, #3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d10d      	bne.n	8002be2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
       ||
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d009      	beq.n	8002be2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002bce:	4b61      	ldr	r3, [pc, #388]	; (8002d54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	091b      	lsrs	r3, r3, #4
 8002bd4:	f003 0307 	and.w	r3, r3, #7
 8002bd8:	1c5a      	adds	r2, r3, #1
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
       ||
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d047      	beq.n	8002c72 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	73fb      	strb	r3, [r7, #15]
 8002be6:	e044      	b.n	8002c72 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2b03      	cmp	r3, #3
 8002bee:	d018      	beq.n	8002c22 <RCCEx_PLLSAI2_Config+0x86>
 8002bf0:	2b03      	cmp	r3, #3
 8002bf2:	d825      	bhi.n	8002c40 <RCCEx_PLLSAI2_Config+0xa4>
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d002      	beq.n	8002bfe <RCCEx_PLLSAI2_Config+0x62>
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d009      	beq.n	8002c10 <RCCEx_PLLSAI2_Config+0x74>
 8002bfc:	e020      	b.n	8002c40 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002bfe:	4b55      	ldr	r3, [pc, #340]	; (8002d54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d11d      	bne.n	8002c46 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c0e:	e01a      	b.n	8002c46 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c10:	4b50      	ldr	r3, [pc, #320]	; (8002d54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d116      	bne.n	8002c4a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c20:	e013      	b.n	8002c4a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c22:	4b4c      	ldr	r3, [pc, #304]	; (8002d54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d10f      	bne.n	8002c4e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c2e:	4b49      	ldr	r3, [pc, #292]	; (8002d54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d109      	bne.n	8002c4e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c3e:	e006      	b.n	8002c4e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	73fb      	strb	r3, [r7, #15]
      break;
 8002c44:	e004      	b.n	8002c50 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c46:	bf00      	nop
 8002c48:	e002      	b.n	8002c50 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c4a:	bf00      	nop
 8002c4c:	e000      	b.n	8002c50 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c4e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c50:	7bfb      	ldrb	r3, [r7, #15]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d10d      	bne.n	8002c72 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c56:	4b3f      	ldr	r3, [pc, #252]	; (8002d54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6819      	ldr	r1, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	3b01      	subs	r3, #1
 8002c68:	011b      	lsls	r3, r3, #4
 8002c6a:	430b      	orrs	r3, r1
 8002c6c:	4939      	ldr	r1, [pc, #228]	; (8002d54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c72:	7bfb      	ldrb	r3, [r7, #15]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d167      	bne.n	8002d48 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002c78:	4b36      	ldr	r3, [pc, #216]	; (8002d54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a35      	ldr	r2, [pc, #212]	; (8002d54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c84:	f7fe f9c6 	bl	8001014 <HAL_GetTick>
 8002c88:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c8a:	e009      	b.n	8002ca0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c8c:	f7fe f9c2 	bl	8001014 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d902      	bls.n	8002ca0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	73fb      	strb	r3, [r7, #15]
        break;
 8002c9e:	e005      	b.n	8002cac <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002ca0:	4b2c      	ldr	r3, [pc, #176]	; (8002d54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d1ef      	bne.n	8002c8c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002cac:	7bfb      	ldrb	r3, [r7, #15]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d14a      	bne.n	8002d48 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d111      	bne.n	8002cdc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002cb8:	4b26      	ldr	r3, [pc, #152]	; (8002d54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cba:	695b      	ldr	r3, [r3, #20]
 8002cbc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002cc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	6892      	ldr	r2, [r2, #8]
 8002cc8:	0211      	lsls	r1, r2, #8
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	68d2      	ldr	r2, [r2, #12]
 8002cce:	0912      	lsrs	r2, r2, #4
 8002cd0:	0452      	lsls	r2, r2, #17
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	491f      	ldr	r1, [pc, #124]	; (8002d54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	614b      	str	r3, [r1, #20]
 8002cda:	e011      	b.n	8002d00 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002cdc:	4b1d      	ldr	r3, [pc, #116]	; (8002d54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cde:	695b      	ldr	r3, [r3, #20]
 8002ce0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002ce4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	6892      	ldr	r2, [r2, #8]
 8002cec:	0211      	lsls	r1, r2, #8
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	6912      	ldr	r2, [r2, #16]
 8002cf2:	0852      	lsrs	r2, r2, #1
 8002cf4:	3a01      	subs	r2, #1
 8002cf6:	0652      	lsls	r2, r2, #25
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	4916      	ldr	r1, [pc, #88]	; (8002d54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002d00:	4b14      	ldr	r3, [pc, #80]	; (8002d54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a13      	ldr	r2, [pc, #76]	; (8002d54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d0a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d0c:	f7fe f982 	bl	8001014 <HAL_GetTick>
 8002d10:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002d12:	e009      	b.n	8002d28 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d14:	f7fe f97e 	bl	8001014 <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d902      	bls.n	8002d28 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	73fb      	strb	r3, [r7, #15]
          break;
 8002d26:	e005      	b.n	8002d34 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002d28:	4b0a      	ldr	r3, [pc, #40]	; (8002d54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d0ef      	beq.n	8002d14 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002d34:	7bfb      	ldrb	r3, [r7, #15]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d106      	bne.n	8002d48 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002d3a:	4b06      	ldr	r3, [pc, #24]	; (8002d54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d3c:	695a      	ldr	r2, [r3, #20]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	695b      	ldr	r3, [r3, #20]
 8002d42:	4904      	ldr	r1, [pc, #16]	; (8002d54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3710      	adds	r7, #16
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	40021000 	.word	0x40021000

08002d58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d101      	bne.n	8002d6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e049      	b.n	8002dfe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d106      	bne.n	8002d84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f003 fbbe 	bl	8006500 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2202      	movs	r2, #2
 8002d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	3304      	adds	r3, #4
 8002d94:	4619      	mov	r1, r3
 8002d96:	4610      	mov	r0, r2
 8002d98:	f000 feda 	bl	8003b50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
	...

08002e08 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b085      	sub	sp, #20
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d001      	beq.n	8002e20 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e047      	b.n	8002eb0 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2202      	movs	r2, #2
 8002e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a23      	ldr	r2, [pc, #140]	; (8002ebc <HAL_TIM_Base_Start+0xb4>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d01d      	beq.n	8002e6e <HAL_TIM_Base_Start+0x66>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e3a:	d018      	beq.n	8002e6e <HAL_TIM_Base_Start+0x66>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a1f      	ldr	r2, [pc, #124]	; (8002ec0 <HAL_TIM_Base_Start+0xb8>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d013      	beq.n	8002e6e <HAL_TIM_Base_Start+0x66>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a1e      	ldr	r2, [pc, #120]	; (8002ec4 <HAL_TIM_Base_Start+0xbc>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d00e      	beq.n	8002e6e <HAL_TIM_Base_Start+0x66>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a1c      	ldr	r2, [pc, #112]	; (8002ec8 <HAL_TIM_Base_Start+0xc0>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d009      	beq.n	8002e6e <HAL_TIM_Base_Start+0x66>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a1b      	ldr	r2, [pc, #108]	; (8002ecc <HAL_TIM_Base_Start+0xc4>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d004      	beq.n	8002e6e <HAL_TIM_Base_Start+0x66>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a19      	ldr	r2, [pc, #100]	; (8002ed0 <HAL_TIM_Base_Start+0xc8>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d115      	bne.n	8002e9a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	689a      	ldr	r2, [r3, #8]
 8002e74:	4b17      	ldr	r3, [pc, #92]	; (8002ed4 <HAL_TIM_Base_Start+0xcc>)
 8002e76:	4013      	ands	r3, r2
 8002e78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2b06      	cmp	r3, #6
 8002e7e:	d015      	beq.n	8002eac <HAL_TIM_Base_Start+0xa4>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e86:	d011      	beq.n	8002eac <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f042 0201 	orr.w	r2, r2, #1
 8002e96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e98:	e008      	b.n	8002eac <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f042 0201 	orr.w	r2, r2, #1
 8002ea8:	601a      	str	r2, [r3, #0]
 8002eaa:	e000      	b.n	8002eae <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3714      	adds	r7, #20
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr
 8002ebc:	40012c00 	.word	0x40012c00
 8002ec0:	40000400 	.word	0x40000400
 8002ec4:	40000800 	.word	0x40000800
 8002ec8:	40000c00 	.word	0x40000c00
 8002ecc:	40013400 	.word	0x40013400
 8002ed0:	40014000 	.word	0x40014000
 8002ed4:	00010007 	.word	0x00010007

08002ed8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e049      	b.n	8002f7e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d106      	bne.n	8002f04 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f003 fa96 	bl	8006430 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2202      	movs	r2, #2
 8002f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	3304      	adds	r3, #4
 8002f14:	4619      	mov	r1, r3
 8002f16:	4610      	mov	r0, r2
 8002f18:	f000 fe1a 	bl	8003b50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3708      	adds	r7, #8
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
	...

08002f88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d109      	bne.n	8002fac <HAL_TIM_PWM_Start+0x24>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	bf14      	ite	ne
 8002fa4:	2301      	movne	r3, #1
 8002fa6:	2300      	moveq	r3, #0
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	e03c      	b.n	8003026 <HAL_TIM_PWM_Start+0x9e>
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	2b04      	cmp	r3, #4
 8002fb0:	d109      	bne.n	8002fc6 <HAL_TIM_PWM_Start+0x3e>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	bf14      	ite	ne
 8002fbe:	2301      	movne	r3, #1
 8002fc0:	2300      	moveq	r3, #0
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	e02f      	b.n	8003026 <HAL_TIM_PWM_Start+0x9e>
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	2b08      	cmp	r3, #8
 8002fca:	d109      	bne.n	8002fe0 <HAL_TIM_PWM_Start+0x58>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	bf14      	ite	ne
 8002fd8:	2301      	movne	r3, #1
 8002fda:	2300      	moveq	r3, #0
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	e022      	b.n	8003026 <HAL_TIM_PWM_Start+0x9e>
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	2b0c      	cmp	r3, #12
 8002fe4:	d109      	bne.n	8002ffa <HAL_TIM_PWM_Start+0x72>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	bf14      	ite	ne
 8002ff2:	2301      	movne	r3, #1
 8002ff4:	2300      	moveq	r3, #0
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	e015      	b.n	8003026 <HAL_TIM_PWM_Start+0x9e>
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	2b10      	cmp	r3, #16
 8002ffe:	d109      	bne.n	8003014 <HAL_TIM_PWM_Start+0x8c>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003006:	b2db      	uxtb	r3, r3
 8003008:	2b01      	cmp	r3, #1
 800300a:	bf14      	ite	ne
 800300c:	2301      	movne	r3, #1
 800300e:	2300      	moveq	r3, #0
 8003010:	b2db      	uxtb	r3, r3
 8003012:	e008      	b.n	8003026 <HAL_TIM_PWM_Start+0x9e>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800301a:	b2db      	uxtb	r3, r3
 800301c:	2b01      	cmp	r3, #1
 800301e:	bf14      	ite	ne
 8003020:	2301      	movne	r3, #1
 8003022:	2300      	moveq	r3, #0
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e09c      	b.n	8003168 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d104      	bne.n	800303e <HAL_TIM_PWM_Start+0xb6>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2202      	movs	r2, #2
 8003038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800303c:	e023      	b.n	8003086 <HAL_TIM_PWM_Start+0xfe>
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	2b04      	cmp	r3, #4
 8003042:	d104      	bne.n	800304e <HAL_TIM_PWM_Start+0xc6>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2202      	movs	r2, #2
 8003048:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800304c:	e01b      	b.n	8003086 <HAL_TIM_PWM_Start+0xfe>
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	2b08      	cmp	r3, #8
 8003052:	d104      	bne.n	800305e <HAL_TIM_PWM_Start+0xd6>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2202      	movs	r2, #2
 8003058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800305c:	e013      	b.n	8003086 <HAL_TIM_PWM_Start+0xfe>
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	2b0c      	cmp	r3, #12
 8003062:	d104      	bne.n	800306e <HAL_TIM_PWM_Start+0xe6>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2202      	movs	r2, #2
 8003068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800306c:	e00b      	b.n	8003086 <HAL_TIM_PWM_Start+0xfe>
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	2b10      	cmp	r3, #16
 8003072:	d104      	bne.n	800307e <HAL_TIM_PWM_Start+0xf6>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2202      	movs	r2, #2
 8003078:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800307c:	e003      	b.n	8003086 <HAL_TIM_PWM_Start+0xfe>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2202      	movs	r2, #2
 8003082:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2201      	movs	r2, #1
 800308c:	6839      	ldr	r1, [r7, #0]
 800308e:	4618      	mov	r0, r3
 8003090:	f001 f9f2 	bl	8004478 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a35      	ldr	r2, [pc, #212]	; (8003170 <HAL_TIM_PWM_Start+0x1e8>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d013      	beq.n	80030c6 <HAL_TIM_PWM_Start+0x13e>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a34      	ldr	r2, [pc, #208]	; (8003174 <HAL_TIM_PWM_Start+0x1ec>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d00e      	beq.n	80030c6 <HAL_TIM_PWM_Start+0x13e>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a32      	ldr	r2, [pc, #200]	; (8003178 <HAL_TIM_PWM_Start+0x1f0>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d009      	beq.n	80030c6 <HAL_TIM_PWM_Start+0x13e>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a31      	ldr	r2, [pc, #196]	; (800317c <HAL_TIM_PWM_Start+0x1f4>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d004      	beq.n	80030c6 <HAL_TIM_PWM_Start+0x13e>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a2f      	ldr	r2, [pc, #188]	; (8003180 <HAL_TIM_PWM_Start+0x1f8>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d101      	bne.n	80030ca <HAL_TIM_PWM_Start+0x142>
 80030c6:	2301      	movs	r3, #1
 80030c8:	e000      	b.n	80030cc <HAL_TIM_PWM_Start+0x144>
 80030ca:	2300      	movs	r3, #0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d007      	beq.n	80030e0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030de:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a22      	ldr	r2, [pc, #136]	; (8003170 <HAL_TIM_PWM_Start+0x1e8>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d01d      	beq.n	8003126 <HAL_TIM_PWM_Start+0x19e>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030f2:	d018      	beq.n	8003126 <HAL_TIM_PWM_Start+0x19e>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a22      	ldr	r2, [pc, #136]	; (8003184 <HAL_TIM_PWM_Start+0x1fc>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d013      	beq.n	8003126 <HAL_TIM_PWM_Start+0x19e>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a21      	ldr	r2, [pc, #132]	; (8003188 <HAL_TIM_PWM_Start+0x200>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d00e      	beq.n	8003126 <HAL_TIM_PWM_Start+0x19e>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a1f      	ldr	r2, [pc, #124]	; (800318c <HAL_TIM_PWM_Start+0x204>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d009      	beq.n	8003126 <HAL_TIM_PWM_Start+0x19e>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a17      	ldr	r2, [pc, #92]	; (8003174 <HAL_TIM_PWM_Start+0x1ec>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d004      	beq.n	8003126 <HAL_TIM_PWM_Start+0x19e>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a15      	ldr	r2, [pc, #84]	; (8003178 <HAL_TIM_PWM_Start+0x1f0>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d115      	bne.n	8003152 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	689a      	ldr	r2, [r3, #8]
 800312c:	4b18      	ldr	r3, [pc, #96]	; (8003190 <HAL_TIM_PWM_Start+0x208>)
 800312e:	4013      	ands	r3, r2
 8003130:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2b06      	cmp	r3, #6
 8003136:	d015      	beq.n	8003164 <HAL_TIM_PWM_Start+0x1dc>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800313e:	d011      	beq.n	8003164 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f042 0201 	orr.w	r2, r2, #1
 800314e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003150:	e008      	b.n	8003164 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f042 0201 	orr.w	r2, r2, #1
 8003160:	601a      	str	r2, [r3, #0]
 8003162:	e000      	b.n	8003166 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003164:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003166:	2300      	movs	r3, #0
}
 8003168:	4618      	mov	r0, r3
 800316a:	3710      	adds	r7, #16
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	40012c00 	.word	0x40012c00
 8003174:	40013400 	.word	0x40013400
 8003178:	40014000 	.word	0x40014000
 800317c:	40014400 	.word	0x40014400
 8003180:	40014800 	.word	0x40014800
 8003184:	40000400 	.word	0x40000400
 8003188:	40000800 	.word	0x40000800
 800318c:	40000c00 	.word	0x40000c00
 8003190:	00010007 	.word	0x00010007

08003194 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e049      	b.n	800323a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d106      	bne.n	80031c0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f003 f956 	bl	800646c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2202      	movs	r2, #2
 80031c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	3304      	adds	r3, #4
 80031d0:	4619      	mov	r1, r3
 80031d2:	4610      	mov	r0, r2
 80031d4:	f000 fcbc 	bl	8003b50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
	...

08003244 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800324e:	2300      	movs	r3, #0
 8003250:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d104      	bne.n	8003262 <HAL_TIM_IC_Start_IT+0x1e>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800325e:	b2db      	uxtb	r3, r3
 8003260:	e023      	b.n	80032aa <HAL_TIM_IC_Start_IT+0x66>
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	2b04      	cmp	r3, #4
 8003266:	d104      	bne.n	8003272 <HAL_TIM_IC_Start_IT+0x2e>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800326e:	b2db      	uxtb	r3, r3
 8003270:	e01b      	b.n	80032aa <HAL_TIM_IC_Start_IT+0x66>
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	2b08      	cmp	r3, #8
 8003276:	d104      	bne.n	8003282 <HAL_TIM_IC_Start_IT+0x3e>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800327e:	b2db      	uxtb	r3, r3
 8003280:	e013      	b.n	80032aa <HAL_TIM_IC_Start_IT+0x66>
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	2b0c      	cmp	r3, #12
 8003286:	d104      	bne.n	8003292 <HAL_TIM_IC_Start_IT+0x4e>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800328e:	b2db      	uxtb	r3, r3
 8003290:	e00b      	b.n	80032aa <HAL_TIM_IC_Start_IT+0x66>
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	2b10      	cmp	r3, #16
 8003296:	d104      	bne.n	80032a2 <HAL_TIM_IC_Start_IT+0x5e>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	e003      	b.n	80032aa <HAL_TIM_IC_Start_IT+0x66>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d104      	bne.n	80032bc <HAL_TIM_IC_Start_IT+0x78>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	e013      	b.n	80032e4 <HAL_TIM_IC_Start_IT+0xa0>
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	2b04      	cmp	r3, #4
 80032c0:	d104      	bne.n	80032cc <HAL_TIM_IC_Start_IT+0x88>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	e00b      	b.n	80032e4 <HAL_TIM_IC_Start_IT+0xa0>
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	2b08      	cmp	r3, #8
 80032d0:	d104      	bne.n	80032dc <HAL_TIM_IC_Start_IT+0x98>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	e003      	b.n	80032e4 <HAL_TIM_IC_Start_IT+0xa0>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80032e6:	7bbb      	ldrb	r3, [r7, #14]
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d102      	bne.n	80032f2 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80032ec:	7b7b      	ldrb	r3, [r7, #13]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d001      	beq.n	80032f6 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e0dd      	b.n	80034b2 <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d104      	bne.n	8003306 <HAL_TIM_IC_Start_IT+0xc2>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2202      	movs	r2, #2
 8003300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003304:	e023      	b.n	800334e <HAL_TIM_IC_Start_IT+0x10a>
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	2b04      	cmp	r3, #4
 800330a:	d104      	bne.n	8003316 <HAL_TIM_IC_Start_IT+0xd2>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2202      	movs	r2, #2
 8003310:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003314:	e01b      	b.n	800334e <HAL_TIM_IC_Start_IT+0x10a>
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	2b08      	cmp	r3, #8
 800331a:	d104      	bne.n	8003326 <HAL_TIM_IC_Start_IT+0xe2>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2202      	movs	r2, #2
 8003320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003324:	e013      	b.n	800334e <HAL_TIM_IC_Start_IT+0x10a>
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	2b0c      	cmp	r3, #12
 800332a:	d104      	bne.n	8003336 <HAL_TIM_IC_Start_IT+0xf2>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2202      	movs	r2, #2
 8003330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003334:	e00b      	b.n	800334e <HAL_TIM_IC_Start_IT+0x10a>
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	2b10      	cmp	r3, #16
 800333a:	d104      	bne.n	8003346 <HAL_TIM_IC_Start_IT+0x102>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2202      	movs	r2, #2
 8003340:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003344:	e003      	b.n	800334e <HAL_TIM_IC_Start_IT+0x10a>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2202      	movs	r2, #2
 800334a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d104      	bne.n	800335e <HAL_TIM_IC_Start_IT+0x11a>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2202      	movs	r2, #2
 8003358:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800335c:	e013      	b.n	8003386 <HAL_TIM_IC_Start_IT+0x142>
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	2b04      	cmp	r3, #4
 8003362:	d104      	bne.n	800336e <HAL_TIM_IC_Start_IT+0x12a>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2202      	movs	r2, #2
 8003368:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800336c:	e00b      	b.n	8003386 <HAL_TIM_IC_Start_IT+0x142>
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	2b08      	cmp	r3, #8
 8003372:	d104      	bne.n	800337e <HAL_TIM_IC_Start_IT+0x13a>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2202      	movs	r2, #2
 8003378:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800337c:	e003      	b.n	8003386 <HAL_TIM_IC_Start_IT+0x142>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2202      	movs	r2, #2
 8003382:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	2b0c      	cmp	r3, #12
 800338a:	d841      	bhi.n	8003410 <HAL_TIM_IC_Start_IT+0x1cc>
 800338c:	a201      	add	r2, pc, #4	; (adr r2, 8003394 <HAL_TIM_IC_Start_IT+0x150>)
 800338e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003392:	bf00      	nop
 8003394:	080033c9 	.word	0x080033c9
 8003398:	08003411 	.word	0x08003411
 800339c:	08003411 	.word	0x08003411
 80033a0:	08003411 	.word	0x08003411
 80033a4:	080033db 	.word	0x080033db
 80033a8:	08003411 	.word	0x08003411
 80033ac:	08003411 	.word	0x08003411
 80033b0:	08003411 	.word	0x08003411
 80033b4:	080033ed 	.word	0x080033ed
 80033b8:	08003411 	.word	0x08003411
 80033bc:	08003411 	.word	0x08003411
 80033c0:	08003411 	.word	0x08003411
 80033c4:	080033ff 	.word	0x080033ff
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68da      	ldr	r2, [r3, #12]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f042 0202 	orr.w	r2, r2, #2
 80033d6:	60da      	str	r2, [r3, #12]
      break;
 80033d8:	e01d      	b.n	8003416 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68da      	ldr	r2, [r3, #12]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f042 0204 	orr.w	r2, r2, #4
 80033e8:	60da      	str	r2, [r3, #12]
      break;
 80033ea:	e014      	b.n	8003416 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68da      	ldr	r2, [r3, #12]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f042 0208 	orr.w	r2, r2, #8
 80033fa:	60da      	str	r2, [r3, #12]
      break;
 80033fc:	e00b      	b.n	8003416 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68da      	ldr	r2, [r3, #12]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f042 0210 	orr.w	r2, r2, #16
 800340c:	60da      	str	r2, [r3, #12]
      break;
 800340e:	e002      	b.n	8003416 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	73fb      	strb	r3, [r7, #15]
      break;
 8003414:	bf00      	nop
  }

  if (status == HAL_OK)
 8003416:	7bfb      	ldrb	r3, [r7, #15]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d149      	bne.n	80034b0 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2201      	movs	r2, #1
 8003422:	6839      	ldr	r1, [r7, #0]
 8003424:	4618      	mov	r0, r3
 8003426:	f001 f827 	bl	8004478 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a23      	ldr	r2, [pc, #140]	; (80034bc <HAL_TIM_IC_Start_IT+0x278>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d01d      	beq.n	8003470 <HAL_TIM_IC_Start_IT+0x22c>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800343c:	d018      	beq.n	8003470 <HAL_TIM_IC_Start_IT+0x22c>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a1f      	ldr	r2, [pc, #124]	; (80034c0 <HAL_TIM_IC_Start_IT+0x27c>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d013      	beq.n	8003470 <HAL_TIM_IC_Start_IT+0x22c>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a1d      	ldr	r2, [pc, #116]	; (80034c4 <HAL_TIM_IC_Start_IT+0x280>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d00e      	beq.n	8003470 <HAL_TIM_IC_Start_IT+0x22c>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a1c      	ldr	r2, [pc, #112]	; (80034c8 <HAL_TIM_IC_Start_IT+0x284>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d009      	beq.n	8003470 <HAL_TIM_IC_Start_IT+0x22c>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a1a      	ldr	r2, [pc, #104]	; (80034cc <HAL_TIM_IC_Start_IT+0x288>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d004      	beq.n	8003470 <HAL_TIM_IC_Start_IT+0x22c>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a19      	ldr	r2, [pc, #100]	; (80034d0 <HAL_TIM_IC_Start_IT+0x28c>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d115      	bne.n	800349c <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	689a      	ldr	r2, [r3, #8]
 8003476:	4b17      	ldr	r3, [pc, #92]	; (80034d4 <HAL_TIM_IC_Start_IT+0x290>)
 8003478:	4013      	ands	r3, r2
 800347a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	2b06      	cmp	r3, #6
 8003480:	d015      	beq.n	80034ae <HAL_TIM_IC_Start_IT+0x26a>
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003488:	d011      	beq.n	80034ae <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f042 0201 	orr.w	r2, r2, #1
 8003498:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800349a:	e008      	b.n	80034ae <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f042 0201 	orr.w	r2, r2, #1
 80034aa:	601a      	str	r2, [r3, #0]
 80034ac:	e000      	b.n	80034b0 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034ae:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80034b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3710      	adds	r7, #16
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	40012c00 	.word	0x40012c00
 80034c0:	40000400 	.word	0x40000400
 80034c4:	40000800 	.word	0x40000800
 80034c8:	40000c00 	.word	0x40000c00
 80034cc:	40013400 	.word	0x40013400
 80034d0:	40014000 	.word	0x40014000
 80034d4:	00010007 	.word	0x00010007

080034d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d122      	bne.n	8003534 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	f003 0302 	and.w	r3, r3, #2
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d11b      	bne.n	8003534 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f06f 0202 	mvn.w	r2, #2
 8003504:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2201      	movs	r2, #1
 800350a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	f003 0303 	and.w	r3, r3, #3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d003      	beq.n	8003522 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f002 fe88 	bl	8006230 <HAL_TIM_IC_CaptureCallback>
 8003520:	e005      	b.n	800352e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 faf6 	bl	8003b14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 fafd 	bl	8003b28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	f003 0304 	and.w	r3, r3, #4
 800353e:	2b04      	cmp	r3, #4
 8003540:	d122      	bne.n	8003588 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	f003 0304 	and.w	r3, r3, #4
 800354c:	2b04      	cmp	r3, #4
 800354e:	d11b      	bne.n	8003588 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f06f 0204 	mvn.w	r2, #4
 8003558:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2202      	movs	r2, #2
 800355e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800356a:	2b00      	cmp	r3, #0
 800356c:	d003      	beq.n	8003576 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f002 fe5e 	bl	8006230 <HAL_TIM_IC_CaptureCallback>
 8003574:	e005      	b.n	8003582 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 facc 	bl	8003b14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f000 fad3 	bl	8003b28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	f003 0308 	and.w	r3, r3, #8
 8003592:	2b08      	cmp	r3, #8
 8003594:	d122      	bne.n	80035dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	f003 0308 	and.w	r3, r3, #8
 80035a0:	2b08      	cmp	r3, #8
 80035a2:	d11b      	bne.n	80035dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f06f 0208 	mvn.w	r2, #8
 80035ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2204      	movs	r2, #4
 80035b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	69db      	ldr	r3, [r3, #28]
 80035ba:	f003 0303 	and.w	r3, r3, #3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d003      	beq.n	80035ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f002 fe34 	bl	8006230 <HAL_TIM_IC_CaptureCallback>
 80035c8:	e005      	b.n	80035d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 faa2 	bl	8003b14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f000 faa9 	bl	8003b28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	f003 0310 	and.w	r3, r3, #16
 80035e6:	2b10      	cmp	r3, #16
 80035e8:	d122      	bne.n	8003630 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	f003 0310 	and.w	r3, r3, #16
 80035f4:	2b10      	cmp	r3, #16
 80035f6:	d11b      	bne.n	8003630 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f06f 0210 	mvn.w	r2, #16
 8003600:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2208      	movs	r2, #8
 8003606:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	69db      	ldr	r3, [r3, #28]
 800360e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003612:	2b00      	cmp	r3, #0
 8003614:	d003      	beq.n	800361e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f002 fe0a 	bl	8006230 <HAL_TIM_IC_CaptureCallback>
 800361c:	e005      	b.n	800362a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 fa78 	bl	8003b14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 fa7f 	bl	8003b28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b01      	cmp	r3, #1
 800363c:	d10e      	bne.n	800365c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	f003 0301 	and.w	r3, r3, #1
 8003648:	2b01      	cmp	r3, #1
 800364a:	d107      	bne.n	800365c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f06f 0201 	mvn.w	r2, #1
 8003654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 fa52 	bl	8003b00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003666:	2b80      	cmp	r3, #128	; 0x80
 8003668:	d10e      	bne.n	8003688 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003674:	2b80      	cmp	r3, #128	; 0x80
 8003676:	d107      	bne.n	8003688 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 ffb0 	bl	80045e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003692:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003696:	d10e      	bne.n	80036b6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036a2:	2b80      	cmp	r3, #128	; 0x80
 80036a4:	d107      	bne.n	80036b6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80036ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f000 ffa3 	bl	80045fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c0:	2b40      	cmp	r3, #64	; 0x40
 80036c2:	d10e      	bne.n	80036e2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ce:	2b40      	cmp	r3, #64	; 0x40
 80036d0:	d107      	bne.n	80036e2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80036da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 fa2d 	bl	8003b3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	f003 0320 	and.w	r3, r3, #32
 80036ec:	2b20      	cmp	r3, #32
 80036ee:	d10e      	bne.n	800370e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	f003 0320 	and.w	r3, r3, #32
 80036fa:	2b20      	cmp	r3, #32
 80036fc:	d107      	bne.n	800370e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f06f 0220 	mvn.w	r2, #32
 8003706:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f000 ff63 	bl	80045d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800370e:	bf00      	nop
 8003710:	3708      	adds	r7, #8
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003716:	b580      	push	{r7, lr}
 8003718:	b086      	sub	sp, #24
 800371a:	af00      	add	r7, sp, #0
 800371c:	60f8      	str	r0, [r7, #12]
 800371e:	60b9      	str	r1, [r7, #8]
 8003720:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003722:	2300      	movs	r3, #0
 8003724:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800372c:	2b01      	cmp	r3, #1
 800372e:	d101      	bne.n	8003734 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003730:	2302      	movs	r3, #2
 8003732:	e088      	b.n	8003846 <HAL_TIM_IC_ConfigChannel+0x130>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d11b      	bne.n	800377a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003752:	f000 fd6d 	bl	8004230 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	699a      	ldr	r2, [r3, #24]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f022 020c 	bic.w	r2, r2, #12
 8003764:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	6999      	ldr	r1, [r3, #24]
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	689a      	ldr	r2, [r3, #8]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	430a      	orrs	r2, r1
 8003776:	619a      	str	r2, [r3, #24]
 8003778:	e060      	b.n	800383c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2b04      	cmp	r3, #4
 800377e:	d11c      	bne.n	80037ba <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003790:	f000 fdbc 	bl	800430c <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	699a      	ldr	r2, [r3, #24]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80037a2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	6999      	ldr	r1, [r3, #24]
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	021a      	lsls	r2, r3, #8
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	430a      	orrs	r2, r1
 80037b6:	619a      	str	r2, [r3, #24]
 80037b8:	e040      	b.n	800383c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2b08      	cmp	r3, #8
 80037be:	d11b      	bne.n	80037f8 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80037d0:	f000 fdd9 	bl	8004386 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	69da      	ldr	r2, [r3, #28]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f022 020c 	bic.w	r2, r2, #12
 80037e2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	69d9      	ldr	r1, [r3, #28]
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	689a      	ldr	r2, [r3, #8]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	430a      	orrs	r2, r1
 80037f4:	61da      	str	r2, [r3, #28]
 80037f6:	e021      	b.n	800383c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2b0c      	cmp	r3, #12
 80037fc:	d11c      	bne.n	8003838 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800380e:	f000 fdf6 	bl	80043fe <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	69da      	ldr	r2, [r3, #28]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003820:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	69d9      	ldr	r1, [r3, #28]
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	021a      	lsls	r2, r3, #8
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	430a      	orrs	r2, r1
 8003834:	61da      	str	r2, [r3, #28]
 8003836:	e001      	b.n	800383c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003844:	7dfb      	ldrb	r3, [r7, #23]
}
 8003846:	4618      	mov	r0, r3
 8003848:	3718      	adds	r7, #24
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
	...

08003850 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b086      	sub	sp, #24
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800385c:	2300      	movs	r3, #0
 800385e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003866:	2b01      	cmp	r3, #1
 8003868:	d101      	bne.n	800386e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800386a:	2302      	movs	r3, #2
 800386c:	e0ff      	b.n	8003a6e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2201      	movs	r2, #1
 8003872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2b14      	cmp	r3, #20
 800387a:	f200 80f0 	bhi.w	8003a5e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800387e:	a201      	add	r2, pc, #4	; (adr r2, 8003884 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003884:	080038d9 	.word	0x080038d9
 8003888:	08003a5f 	.word	0x08003a5f
 800388c:	08003a5f 	.word	0x08003a5f
 8003890:	08003a5f 	.word	0x08003a5f
 8003894:	08003919 	.word	0x08003919
 8003898:	08003a5f 	.word	0x08003a5f
 800389c:	08003a5f 	.word	0x08003a5f
 80038a0:	08003a5f 	.word	0x08003a5f
 80038a4:	0800395b 	.word	0x0800395b
 80038a8:	08003a5f 	.word	0x08003a5f
 80038ac:	08003a5f 	.word	0x08003a5f
 80038b0:	08003a5f 	.word	0x08003a5f
 80038b4:	0800399b 	.word	0x0800399b
 80038b8:	08003a5f 	.word	0x08003a5f
 80038bc:	08003a5f 	.word	0x08003a5f
 80038c0:	08003a5f 	.word	0x08003a5f
 80038c4:	080039dd 	.word	0x080039dd
 80038c8:	08003a5f 	.word	0x08003a5f
 80038cc:	08003a5f 	.word	0x08003a5f
 80038d0:	08003a5f 	.word	0x08003a5f
 80038d4:	08003a1d 	.word	0x08003a1d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68b9      	ldr	r1, [r7, #8]
 80038de:	4618      	mov	r0, r3
 80038e0:	f000 f9d0 	bl	8003c84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	699a      	ldr	r2, [r3, #24]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f042 0208 	orr.w	r2, r2, #8
 80038f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	699a      	ldr	r2, [r3, #24]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f022 0204 	bic.w	r2, r2, #4
 8003902:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	6999      	ldr	r1, [r3, #24]
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	691a      	ldr	r2, [r3, #16]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	430a      	orrs	r2, r1
 8003914:	619a      	str	r2, [r3, #24]
      break;
 8003916:	e0a5      	b.n	8003a64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68b9      	ldr	r1, [r7, #8]
 800391e:	4618      	mov	r0, r3
 8003920:	f000 fa40 	bl	8003da4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	699a      	ldr	r2, [r3, #24]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003932:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	699a      	ldr	r2, [r3, #24]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003942:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	6999      	ldr	r1, [r3, #24]
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	021a      	lsls	r2, r3, #8
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	430a      	orrs	r2, r1
 8003956:	619a      	str	r2, [r3, #24]
      break;
 8003958:	e084      	b.n	8003a64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68b9      	ldr	r1, [r7, #8]
 8003960:	4618      	mov	r0, r3
 8003962:	f000 faa9 	bl	8003eb8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	69da      	ldr	r2, [r3, #28]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f042 0208 	orr.w	r2, r2, #8
 8003974:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	69da      	ldr	r2, [r3, #28]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f022 0204 	bic.w	r2, r2, #4
 8003984:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	69d9      	ldr	r1, [r3, #28]
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	691a      	ldr	r2, [r3, #16]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	430a      	orrs	r2, r1
 8003996:	61da      	str	r2, [r3, #28]
      break;
 8003998:	e064      	b.n	8003a64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68b9      	ldr	r1, [r7, #8]
 80039a0:	4618      	mov	r0, r3
 80039a2:	f000 fb11 	bl	8003fc8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	69da      	ldr	r2, [r3, #28]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	69da      	ldr	r2, [r3, #28]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	69d9      	ldr	r1, [r3, #28]
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	021a      	lsls	r2, r3, #8
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	430a      	orrs	r2, r1
 80039d8:	61da      	str	r2, [r3, #28]
      break;
 80039da:	e043      	b.n	8003a64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68b9      	ldr	r1, [r7, #8]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f000 fb5a 	bl	800409c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f042 0208 	orr.w	r2, r2, #8
 80039f6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f022 0204 	bic.w	r2, r2, #4
 8003a06:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	691a      	ldr	r2, [r3, #16]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	430a      	orrs	r2, r1
 8003a18:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003a1a:	e023      	b.n	8003a64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68b9      	ldr	r1, [r7, #8]
 8003a22:	4618      	mov	r0, r3
 8003a24:	f000 fb9e 	bl	8004164 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a36:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a46:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	021a      	lsls	r2, r3, #8
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	430a      	orrs	r2, r1
 8003a5a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003a5c:	e002      	b.n	8003a64 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	75fb      	strb	r3, [r7, #23]
      break;
 8003a62:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3718      	adds	r7, #24
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop

08003a78 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003a82:	2300      	movs	r3, #0
 8003a84:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	2b0c      	cmp	r3, #12
 8003a8a:	d831      	bhi.n	8003af0 <HAL_TIM_ReadCapturedValue+0x78>
 8003a8c:	a201      	add	r2, pc, #4	; (adr r2, 8003a94 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a92:	bf00      	nop
 8003a94:	08003ac9 	.word	0x08003ac9
 8003a98:	08003af1 	.word	0x08003af1
 8003a9c:	08003af1 	.word	0x08003af1
 8003aa0:	08003af1 	.word	0x08003af1
 8003aa4:	08003ad3 	.word	0x08003ad3
 8003aa8:	08003af1 	.word	0x08003af1
 8003aac:	08003af1 	.word	0x08003af1
 8003ab0:	08003af1 	.word	0x08003af1
 8003ab4:	08003add 	.word	0x08003add
 8003ab8:	08003af1 	.word	0x08003af1
 8003abc:	08003af1 	.word	0x08003af1
 8003ac0:	08003af1 	.word	0x08003af1
 8003ac4:	08003ae7 	.word	0x08003ae7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ace:	60fb      	str	r3, [r7, #12]

      break;
 8003ad0:	e00f      	b.n	8003af2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad8:	60fb      	str	r3, [r7, #12]

      break;
 8003ada:	e00a      	b.n	8003af2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae2:	60fb      	str	r3, [r7, #12]

      break;
 8003ae4:	e005      	b.n	8003af2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aec:	60fb      	str	r3, [r7, #12]

      break;
 8003aee:	e000      	b.n	8003af2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003af0:	bf00      	nop
  }

  return tmpreg;
 8003af2:	68fb      	ldr	r3, [r7, #12]
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3714      	adds	r7, #20
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003b08:	bf00      	nop
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b1c:	bf00      	nop
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b30:	bf00      	nop
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b44:	bf00      	nop
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b085      	sub	sp, #20
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a40      	ldr	r2, [pc, #256]	; (8003c64 <TIM_Base_SetConfig+0x114>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d013      	beq.n	8003b90 <TIM_Base_SetConfig+0x40>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b6e:	d00f      	beq.n	8003b90 <TIM_Base_SetConfig+0x40>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a3d      	ldr	r2, [pc, #244]	; (8003c68 <TIM_Base_SetConfig+0x118>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d00b      	beq.n	8003b90 <TIM_Base_SetConfig+0x40>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4a3c      	ldr	r2, [pc, #240]	; (8003c6c <TIM_Base_SetConfig+0x11c>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d007      	beq.n	8003b90 <TIM_Base_SetConfig+0x40>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4a3b      	ldr	r2, [pc, #236]	; (8003c70 <TIM_Base_SetConfig+0x120>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d003      	beq.n	8003b90 <TIM_Base_SetConfig+0x40>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4a3a      	ldr	r2, [pc, #232]	; (8003c74 <TIM_Base_SetConfig+0x124>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d108      	bne.n	8003ba2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	68fa      	ldr	r2, [r7, #12]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a2f      	ldr	r2, [pc, #188]	; (8003c64 <TIM_Base_SetConfig+0x114>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d01f      	beq.n	8003bea <TIM_Base_SetConfig+0x9a>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bb0:	d01b      	beq.n	8003bea <TIM_Base_SetConfig+0x9a>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a2c      	ldr	r2, [pc, #176]	; (8003c68 <TIM_Base_SetConfig+0x118>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d017      	beq.n	8003bea <TIM_Base_SetConfig+0x9a>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a2b      	ldr	r2, [pc, #172]	; (8003c6c <TIM_Base_SetConfig+0x11c>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d013      	beq.n	8003bea <TIM_Base_SetConfig+0x9a>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a2a      	ldr	r2, [pc, #168]	; (8003c70 <TIM_Base_SetConfig+0x120>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d00f      	beq.n	8003bea <TIM_Base_SetConfig+0x9a>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a29      	ldr	r2, [pc, #164]	; (8003c74 <TIM_Base_SetConfig+0x124>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d00b      	beq.n	8003bea <TIM_Base_SetConfig+0x9a>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a28      	ldr	r2, [pc, #160]	; (8003c78 <TIM_Base_SetConfig+0x128>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d007      	beq.n	8003bea <TIM_Base_SetConfig+0x9a>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a27      	ldr	r2, [pc, #156]	; (8003c7c <TIM_Base_SetConfig+0x12c>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d003      	beq.n	8003bea <TIM_Base_SetConfig+0x9a>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a26      	ldr	r2, [pc, #152]	; (8003c80 <TIM_Base_SetConfig+0x130>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d108      	bne.n	8003bfc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	68fa      	ldr	r2, [r7, #12]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	68fa      	ldr	r2, [r7, #12]
 8003c0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	689a      	ldr	r2, [r3, #8]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a10      	ldr	r2, [pc, #64]	; (8003c64 <TIM_Base_SetConfig+0x114>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d00f      	beq.n	8003c48 <TIM_Base_SetConfig+0xf8>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a12      	ldr	r2, [pc, #72]	; (8003c74 <TIM_Base_SetConfig+0x124>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d00b      	beq.n	8003c48 <TIM_Base_SetConfig+0xf8>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a11      	ldr	r2, [pc, #68]	; (8003c78 <TIM_Base_SetConfig+0x128>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d007      	beq.n	8003c48 <TIM_Base_SetConfig+0xf8>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4a10      	ldr	r2, [pc, #64]	; (8003c7c <TIM_Base_SetConfig+0x12c>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d003      	beq.n	8003c48 <TIM_Base_SetConfig+0xf8>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4a0f      	ldr	r2, [pc, #60]	; (8003c80 <TIM_Base_SetConfig+0x130>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d103      	bne.n	8003c50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	691a      	ldr	r2, [r3, #16]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	615a      	str	r2, [r3, #20]
}
 8003c56:	bf00      	nop
 8003c58:	3714      	adds	r7, #20
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	40012c00 	.word	0x40012c00
 8003c68:	40000400 	.word	0x40000400
 8003c6c:	40000800 	.word	0x40000800
 8003c70:	40000c00 	.word	0x40000c00
 8003c74:	40013400 	.word	0x40013400
 8003c78:	40014000 	.word	0x40014000
 8003c7c:	40014400 	.word	0x40014400
 8003c80:	40014800 	.word	0x40014800

08003c84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b087      	sub	sp, #28
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	f023 0201 	bic.w	r2, r3, #1
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a1b      	ldr	r3, [r3, #32]
 8003c9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f023 0303 	bic.w	r3, r3, #3
 8003cbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68fa      	ldr	r2, [r7, #12]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	f023 0302 	bic.w	r3, r3, #2
 8003cd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	697a      	ldr	r2, [r7, #20]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4a2c      	ldr	r2, [pc, #176]	; (8003d90 <TIM_OC1_SetConfig+0x10c>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d00f      	beq.n	8003d04 <TIM_OC1_SetConfig+0x80>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4a2b      	ldr	r2, [pc, #172]	; (8003d94 <TIM_OC1_SetConfig+0x110>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d00b      	beq.n	8003d04 <TIM_OC1_SetConfig+0x80>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4a2a      	ldr	r2, [pc, #168]	; (8003d98 <TIM_OC1_SetConfig+0x114>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d007      	beq.n	8003d04 <TIM_OC1_SetConfig+0x80>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4a29      	ldr	r2, [pc, #164]	; (8003d9c <TIM_OC1_SetConfig+0x118>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d003      	beq.n	8003d04 <TIM_OC1_SetConfig+0x80>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a28      	ldr	r2, [pc, #160]	; (8003da0 <TIM_OC1_SetConfig+0x11c>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d10c      	bne.n	8003d1e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	f023 0308 	bic.w	r3, r3, #8
 8003d0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	697a      	ldr	r2, [r7, #20]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	f023 0304 	bic.w	r3, r3, #4
 8003d1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a1b      	ldr	r2, [pc, #108]	; (8003d90 <TIM_OC1_SetConfig+0x10c>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d00f      	beq.n	8003d46 <TIM_OC1_SetConfig+0xc2>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a1a      	ldr	r2, [pc, #104]	; (8003d94 <TIM_OC1_SetConfig+0x110>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d00b      	beq.n	8003d46 <TIM_OC1_SetConfig+0xc2>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a19      	ldr	r2, [pc, #100]	; (8003d98 <TIM_OC1_SetConfig+0x114>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d007      	beq.n	8003d46 <TIM_OC1_SetConfig+0xc2>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a18      	ldr	r2, [pc, #96]	; (8003d9c <TIM_OC1_SetConfig+0x118>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d003      	beq.n	8003d46 <TIM_OC1_SetConfig+0xc2>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a17      	ldr	r2, [pc, #92]	; (8003da0 <TIM_OC1_SetConfig+0x11c>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d111      	bne.n	8003d6a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	693a      	ldr	r2, [r7, #16]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	693a      	ldr	r2, [r7, #16]
 8003d6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	685a      	ldr	r2, [r3, #4]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	697a      	ldr	r2, [r7, #20]
 8003d82:	621a      	str	r2, [r3, #32]
}
 8003d84:	bf00      	nop
 8003d86:	371c      	adds	r7, #28
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr
 8003d90:	40012c00 	.word	0x40012c00
 8003d94:	40013400 	.word	0x40013400
 8003d98:	40014000 	.word	0x40014000
 8003d9c:	40014400 	.word	0x40014400
 8003da0:	40014800 	.word	0x40014800

08003da4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b087      	sub	sp, #28
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a1b      	ldr	r3, [r3, #32]
 8003db2:	f023 0210 	bic.w	r2, r3, #16
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a1b      	ldr	r3, [r3, #32]
 8003dbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	699b      	ldr	r3, [r3, #24]
 8003dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003dd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	021b      	lsls	r3, r3, #8
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	f023 0320 	bic.w	r3, r3, #32
 8003df2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	011b      	lsls	r3, r3, #4
 8003dfa:	697a      	ldr	r2, [r7, #20]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a28      	ldr	r2, [pc, #160]	; (8003ea4 <TIM_OC2_SetConfig+0x100>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d003      	beq.n	8003e10 <TIM_OC2_SetConfig+0x6c>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a27      	ldr	r2, [pc, #156]	; (8003ea8 <TIM_OC2_SetConfig+0x104>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d10d      	bne.n	8003e2c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	011b      	lsls	r3, r3, #4
 8003e1e:	697a      	ldr	r2, [r7, #20]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e2a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4a1d      	ldr	r2, [pc, #116]	; (8003ea4 <TIM_OC2_SetConfig+0x100>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d00f      	beq.n	8003e54 <TIM_OC2_SetConfig+0xb0>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4a1c      	ldr	r2, [pc, #112]	; (8003ea8 <TIM_OC2_SetConfig+0x104>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d00b      	beq.n	8003e54 <TIM_OC2_SetConfig+0xb0>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4a1b      	ldr	r2, [pc, #108]	; (8003eac <TIM_OC2_SetConfig+0x108>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d007      	beq.n	8003e54 <TIM_OC2_SetConfig+0xb0>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a1a      	ldr	r2, [pc, #104]	; (8003eb0 <TIM_OC2_SetConfig+0x10c>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d003      	beq.n	8003e54 <TIM_OC2_SetConfig+0xb0>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a19      	ldr	r2, [pc, #100]	; (8003eb4 <TIM_OC2_SetConfig+0x110>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d113      	bne.n	8003e7c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	695b      	ldr	r3, [r3, #20]
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	693a      	ldr	r2, [r7, #16]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	699b      	ldr	r3, [r3, #24]
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	693a      	ldr	r2, [r7, #16]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	693a      	ldr	r2, [r7, #16]
 8003e80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	685a      	ldr	r2, [r3, #4]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	621a      	str	r2, [r3, #32]
}
 8003e96:	bf00      	nop
 8003e98:	371c      	adds	r7, #28
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	40012c00 	.word	0x40012c00
 8003ea8:	40013400 	.word	0x40013400
 8003eac:	40014000 	.word	0x40014000
 8003eb0:	40014400 	.word	0x40014400
 8003eb4:	40014800 	.word	0x40014800

08003eb8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b087      	sub	sp, #28
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
 8003ec6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a1b      	ldr	r3, [r3, #32]
 8003ed2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	69db      	ldr	r3, [r3, #28]
 8003ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f023 0303 	bic.w	r3, r3, #3
 8003ef2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68fa      	ldr	r2, [r7, #12]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	021b      	lsls	r3, r3, #8
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a27      	ldr	r2, [pc, #156]	; (8003fb4 <TIM_OC3_SetConfig+0xfc>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d003      	beq.n	8003f22 <TIM_OC3_SetConfig+0x6a>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a26      	ldr	r2, [pc, #152]	; (8003fb8 <TIM_OC3_SetConfig+0x100>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d10d      	bne.n	8003f3e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	021b      	lsls	r3, r3, #8
 8003f30:	697a      	ldr	r2, [r7, #20]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a1c      	ldr	r2, [pc, #112]	; (8003fb4 <TIM_OC3_SetConfig+0xfc>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d00f      	beq.n	8003f66 <TIM_OC3_SetConfig+0xae>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a1b      	ldr	r2, [pc, #108]	; (8003fb8 <TIM_OC3_SetConfig+0x100>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d00b      	beq.n	8003f66 <TIM_OC3_SetConfig+0xae>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a1a      	ldr	r2, [pc, #104]	; (8003fbc <TIM_OC3_SetConfig+0x104>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d007      	beq.n	8003f66 <TIM_OC3_SetConfig+0xae>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a19      	ldr	r2, [pc, #100]	; (8003fc0 <TIM_OC3_SetConfig+0x108>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d003      	beq.n	8003f66 <TIM_OC3_SetConfig+0xae>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a18      	ldr	r2, [pc, #96]	; (8003fc4 <TIM_OC3_SetConfig+0x10c>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d113      	bne.n	8003f8e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	695b      	ldr	r3, [r3, #20]
 8003f7a:	011b      	lsls	r3, r3, #4
 8003f7c:	693a      	ldr	r2, [r7, #16]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	011b      	lsls	r3, r3, #4
 8003f88:	693a      	ldr	r2, [r7, #16]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	68fa      	ldr	r2, [r7, #12]
 8003f98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	685a      	ldr	r2, [r3, #4]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	697a      	ldr	r2, [r7, #20]
 8003fa6:	621a      	str	r2, [r3, #32]
}
 8003fa8:	bf00      	nop
 8003faa:	371c      	adds	r7, #28
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr
 8003fb4:	40012c00 	.word	0x40012c00
 8003fb8:	40013400 	.word	0x40013400
 8003fbc:	40014000 	.word	0x40014000
 8003fc0:	40014400 	.word	0x40014400
 8003fc4:	40014800 	.word	0x40014800

08003fc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b087      	sub	sp, #28
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a1b      	ldr	r3, [r3, #32]
 8003fd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a1b      	ldr	r3, [r3, #32]
 8003fe2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	69db      	ldr	r3, [r3, #28]
 8003fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ff6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ffa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004002:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	021b      	lsls	r3, r3, #8
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	4313      	orrs	r3, r2
 800400e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004016:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	031b      	lsls	r3, r3, #12
 800401e:	693a      	ldr	r2, [r7, #16]
 8004020:	4313      	orrs	r3, r2
 8004022:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	4a18      	ldr	r2, [pc, #96]	; (8004088 <TIM_OC4_SetConfig+0xc0>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d00f      	beq.n	800404c <TIM_OC4_SetConfig+0x84>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a17      	ldr	r2, [pc, #92]	; (800408c <TIM_OC4_SetConfig+0xc4>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d00b      	beq.n	800404c <TIM_OC4_SetConfig+0x84>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4a16      	ldr	r2, [pc, #88]	; (8004090 <TIM_OC4_SetConfig+0xc8>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d007      	beq.n	800404c <TIM_OC4_SetConfig+0x84>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	4a15      	ldr	r2, [pc, #84]	; (8004094 <TIM_OC4_SetConfig+0xcc>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d003      	beq.n	800404c <TIM_OC4_SetConfig+0x84>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4a14      	ldr	r2, [pc, #80]	; (8004098 <TIM_OC4_SetConfig+0xd0>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d109      	bne.n	8004060 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004052:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	695b      	ldr	r3, [r3, #20]
 8004058:	019b      	lsls	r3, r3, #6
 800405a:	697a      	ldr	r2, [r7, #20]
 800405c:	4313      	orrs	r3, r2
 800405e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	697a      	ldr	r2, [r7, #20]
 8004064:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	685a      	ldr	r2, [r3, #4]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	693a      	ldr	r2, [r7, #16]
 8004078:	621a      	str	r2, [r3, #32]
}
 800407a:	bf00      	nop
 800407c:	371c      	adds	r7, #28
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr
 8004086:	bf00      	nop
 8004088:	40012c00 	.word	0x40012c00
 800408c:	40013400 	.word	0x40013400
 8004090:	40014000 	.word	0x40014000
 8004094:	40014400 	.word	0x40014400
 8004098:	40014800 	.word	0x40014800

0800409c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800409c:	b480      	push	{r7}
 800409e:	b087      	sub	sp, #28
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80040e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	041b      	lsls	r3, r3, #16
 80040e8:	693a      	ldr	r2, [r7, #16]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a17      	ldr	r2, [pc, #92]	; (8004150 <TIM_OC5_SetConfig+0xb4>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d00f      	beq.n	8004116 <TIM_OC5_SetConfig+0x7a>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a16      	ldr	r2, [pc, #88]	; (8004154 <TIM_OC5_SetConfig+0xb8>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d00b      	beq.n	8004116 <TIM_OC5_SetConfig+0x7a>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a15      	ldr	r2, [pc, #84]	; (8004158 <TIM_OC5_SetConfig+0xbc>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d007      	beq.n	8004116 <TIM_OC5_SetConfig+0x7a>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a14      	ldr	r2, [pc, #80]	; (800415c <TIM_OC5_SetConfig+0xc0>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d003      	beq.n	8004116 <TIM_OC5_SetConfig+0x7a>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a13      	ldr	r2, [pc, #76]	; (8004160 <TIM_OC5_SetConfig+0xc4>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d109      	bne.n	800412a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800411c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	021b      	lsls	r3, r3, #8
 8004124:	697a      	ldr	r2, [r7, #20]
 8004126:	4313      	orrs	r3, r2
 8004128:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	697a      	ldr	r2, [r7, #20]
 800412e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	685a      	ldr	r2, [r3, #4]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	693a      	ldr	r2, [r7, #16]
 8004142:	621a      	str	r2, [r3, #32]
}
 8004144:	bf00      	nop
 8004146:	371c      	adds	r7, #28
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr
 8004150:	40012c00 	.word	0x40012c00
 8004154:	40013400 	.word	0x40013400
 8004158:	40014000 	.word	0x40014000
 800415c:	40014400 	.word	0x40014400
 8004160:	40014800 	.word	0x40014800

08004164 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004164:	b480      	push	{r7}
 8004166:	b087      	sub	sp, #28
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a1b      	ldr	r3, [r3, #32]
 8004172:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800418a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004192:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004196:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	021b      	lsls	r3, r3, #8
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80041aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	051b      	lsls	r3, r3, #20
 80041b2:	693a      	ldr	r2, [r7, #16]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a18      	ldr	r2, [pc, #96]	; (800421c <TIM_OC6_SetConfig+0xb8>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d00f      	beq.n	80041e0 <TIM_OC6_SetConfig+0x7c>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4a17      	ldr	r2, [pc, #92]	; (8004220 <TIM_OC6_SetConfig+0xbc>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d00b      	beq.n	80041e0 <TIM_OC6_SetConfig+0x7c>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4a16      	ldr	r2, [pc, #88]	; (8004224 <TIM_OC6_SetConfig+0xc0>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d007      	beq.n	80041e0 <TIM_OC6_SetConfig+0x7c>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4a15      	ldr	r2, [pc, #84]	; (8004228 <TIM_OC6_SetConfig+0xc4>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d003      	beq.n	80041e0 <TIM_OC6_SetConfig+0x7c>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	4a14      	ldr	r2, [pc, #80]	; (800422c <TIM_OC6_SetConfig+0xc8>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d109      	bne.n	80041f4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	695b      	ldr	r3, [r3, #20]
 80041ec:	029b      	lsls	r3, r3, #10
 80041ee:	697a      	ldr	r2, [r7, #20]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	697a      	ldr	r2, [r7, #20]
 80041f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	68fa      	ldr	r2, [r7, #12]
 80041fe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	685a      	ldr	r2, [r3, #4]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	693a      	ldr	r2, [r7, #16]
 800420c:	621a      	str	r2, [r3, #32]
}
 800420e:	bf00      	nop
 8004210:	371c      	adds	r7, #28
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	40012c00 	.word	0x40012c00
 8004220:	40013400 	.word	0x40013400
 8004224:	40014000 	.word	0x40014000
 8004228:	40014400 	.word	0x40014400
 800422c:	40014800 	.word	0x40014800

08004230 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004230:	b480      	push	{r7}
 8004232:	b087      	sub	sp, #28
 8004234:	af00      	add	r7, sp, #0
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	607a      	str	r2, [r7, #4]
 800423c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6a1b      	ldr	r3, [r3, #32]
 8004242:	f023 0201 	bic.w	r2, r3, #1
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6a1b      	ldr	r3, [r3, #32]
 8004254:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	4a26      	ldr	r2, [pc, #152]	; (80042f4 <TIM_TI1_SetConfig+0xc4>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d017      	beq.n	800428e <TIM_TI1_SetConfig+0x5e>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004264:	d013      	beq.n	800428e <TIM_TI1_SetConfig+0x5e>
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	4a23      	ldr	r2, [pc, #140]	; (80042f8 <TIM_TI1_SetConfig+0xc8>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d00f      	beq.n	800428e <TIM_TI1_SetConfig+0x5e>
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	4a22      	ldr	r2, [pc, #136]	; (80042fc <TIM_TI1_SetConfig+0xcc>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d00b      	beq.n	800428e <TIM_TI1_SetConfig+0x5e>
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	4a21      	ldr	r2, [pc, #132]	; (8004300 <TIM_TI1_SetConfig+0xd0>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d007      	beq.n	800428e <TIM_TI1_SetConfig+0x5e>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	4a20      	ldr	r2, [pc, #128]	; (8004304 <TIM_TI1_SetConfig+0xd4>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d003      	beq.n	800428e <TIM_TI1_SetConfig+0x5e>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	4a1f      	ldr	r2, [pc, #124]	; (8004308 <TIM_TI1_SetConfig+0xd8>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d101      	bne.n	8004292 <TIM_TI1_SetConfig+0x62>
 800428e:	2301      	movs	r3, #1
 8004290:	e000      	b.n	8004294 <TIM_TI1_SetConfig+0x64>
 8004292:	2300      	movs	r3, #0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d008      	beq.n	80042aa <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	f023 0303 	bic.w	r3, r3, #3
 800429e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80042a0:	697a      	ldr	r2, [r7, #20]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	617b      	str	r3, [r7, #20]
 80042a8:	e003      	b.n	80042b2 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	f043 0301 	orr.w	r3, r3, #1
 80042b0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	011b      	lsls	r3, r3, #4
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	697a      	ldr	r2, [r7, #20]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	f023 030a 	bic.w	r3, r3, #10
 80042cc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	f003 030a 	and.w	r3, r3, #10
 80042d4:	693a      	ldr	r2, [r7, #16]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	697a      	ldr	r2, [r7, #20]
 80042de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	621a      	str	r2, [r3, #32]
}
 80042e6:	bf00      	nop
 80042e8:	371c      	adds	r7, #28
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	40012c00 	.word	0x40012c00
 80042f8:	40000400 	.word	0x40000400
 80042fc:	40000800 	.word	0x40000800
 8004300:	40000c00 	.word	0x40000c00
 8004304:	40013400 	.word	0x40013400
 8004308:	40014000 	.word	0x40014000

0800430c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800430c:	b480      	push	{r7}
 800430e:	b087      	sub	sp, #28
 8004310:	af00      	add	r7, sp, #0
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	60b9      	str	r1, [r7, #8]
 8004316:	607a      	str	r2, [r7, #4]
 8004318:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6a1b      	ldr	r3, [r3, #32]
 800431e:	f023 0210 	bic.w	r2, r3, #16
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6a1b      	ldr	r3, [r3, #32]
 8004330:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004338:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	021b      	lsls	r3, r3, #8
 800433e:	697a      	ldr	r2, [r7, #20]
 8004340:	4313      	orrs	r3, r2
 8004342:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800434a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	031b      	lsls	r3, r3, #12
 8004350:	b29b      	uxth	r3, r3
 8004352:	697a      	ldr	r2, [r7, #20]
 8004354:	4313      	orrs	r3, r2
 8004356:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800435e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	011b      	lsls	r3, r3, #4
 8004364:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004368:	693a      	ldr	r2, [r7, #16]
 800436a:	4313      	orrs	r3, r2
 800436c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	697a      	ldr	r2, [r7, #20]
 8004372:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	621a      	str	r2, [r3, #32]
}
 800437a:	bf00      	nop
 800437c:	371c      	adds	r7, #28
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr

08004386 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004386:	b480      	push	{r7}
 8004388:	b087      	sub	sp, #28
 800438a:	af00      	add	r7, sp, #0
 800438c:	60f8      	str	r0, [r7, #12]
 800438e:	60b9      	str	r1, [r7, #8]
 8004390:	607a      	str	r2, [r7, #4]
 8004392:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6a1b      	ldr	r3, [r3, #32]
 8004398:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	69db      	ldr	r3, [r3, #28]
 80043a4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6a1b      	ldr	r3, [r3, #32]
 80043aa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	f023 0303 	bic.w	r3, r3, #3
 80043b2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80043b4:	697a      	ldr	r2, [r7, #20]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043c2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	011b      	lsls	r3, r3, #4
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	697a      	ldr	r2, [r7, #20]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80043d6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	021b      	lsls	r3, r3, #8
 80043dc:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80043e0:	693a      	ldr	r2, [r7, #16]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	693a      	ldr	r2, [r7, #16]
 80043f0:	621a      	str	r2, [r3, #32]
}
 80043f2:	bf00      	nop
 80043f4:	371c      	adds	r7, #28
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr

080043fe <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80043fe:	b480      	push	{r7}
 8004400:	b087      	sub	sp, #28
 8004402:	af00      	add	r7, sp, #0
 8004404:	60f8      	str	r0, [r7, #12]
 8004406:	60b9      	str	r1, [r7, #8]
 8004408:	607a      	str	r2, [r7, #4]
 800440a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6a1b      	ldr	r3, [r3, #32]
 8004410:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	69db      	ldr	r3, [r3, #28]
 800441c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6a1b      	ldr	r3, [r3, #32]
 8004422:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800442a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	021b      	lsls	r3, r3, #8
 8004430:	697a      	ldr	r2, [r7, #20]
 8004432:	4313      	orrs	r3, r2
 8004434:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800443c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	031b      	lsls	r3, r3, #12
 8004442:	b29b      	uxth	r3, r3
 8004444:	697a      	ldr	r2, [r7, #20]
 8004446:	4313      	orrs	r3, r2
 8004448:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004450:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	031b      	lsls	r3, r3, #12
 8004456:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800445a:	693a      	ldr	r2, [r7, #16]
 800445c:	4313      	orrs	r3, r2
 800445e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	697a      	ldr	r2, [r7, #20]
 8004464:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	693a      	ldr	r2, [r7, #16]
 800446a:	621a      	str	r2, [r3, #32]
}
 800446c:	bf00      	nop
 800446e:	371c      	adds	r7, #28
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004478:	b480      	push	{r7}
 800447a:	b087      	sub	sp, #28
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	f003 031f 	and.w	r3, r3, #31
 800448a:	2201      	movs	r2, #1
 800448c:	fa02 f303 	lsl.w	r3, r2, r3
 8004490:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6a1a      	ldr	r2, [r3, #32]
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	43db      	mvns	r3, r3
 800449a:	401a      	ands	r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6a1a      	ldr	r2, [r3, #32]
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	f003 031f 	and.w	r3, r3, #31
 80044aa:	6879      	ldr	r1, [r7, #4]
 80044ac:	fa01 f303 	lsl.w	r3, r1, r3
 80044b0:	431a      	orrs	r2, r3
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	621a      	str	r2, [r3, #32]
}
 80044b6:	bf00      	nop
 80044b8:	371c      	adds	r7, #28
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr
	...

080044c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b085      	sub	sp, #20
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d101      	bne.n	80044dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044d8:	2302      	movs	r3, #2
 80044da:	e068      	b.n	80045ae <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2202      	movs	r2, #2
 80044e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a2e      	ldr	r2, [pc, #184]	; (80045bc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d004      	beq.n	8004510 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a2d      	ldr	r2, [pc, #180]	; (80045c0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d108      	bne.n	8004522 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004516:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	68fa      	ldr	r2, [r7, #12]
 800451e:	4313      	orrs	r3, r2
 8004520:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004528:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	4313      	orrs	r3, r2
 8004532:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a1e      	ldr	r2, [pc, #120]	; (80045bc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d01d      	beq.n	8004582 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800454e:	d018      	beq.n	8004582 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a1b      	ldr	r2, [pc, #108]	; (80045c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d013      	beq.n	8004582 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a1a      	ldr	r2, [pc, #104]	; (80045c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d00e      	beq.n	8004582 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a18      	ldr	r2, [pc, #96]	; (80045cc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d009      	beq.n	8004582 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a13      	ldr	r2, [pc, #76]	; (80045c0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d004      	beq.n	8004582 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a14      	ldr	r2, [pc, #80]	; (80045d0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d10c      	bne.n	800459c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004588:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	68ba      	ldr	r2, [r7, #8]
 8004590:	4313      	orrs	r3, r2
 8004592:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	68ba      	ldr	r2, [r7, #8]
 800459a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3714      	adds	r7, #20
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	40012c00 	.word	0x40012c00
 80045c0:	40013400 	.word	0x40013400
 80045c4:	40000400 	.word	0x40000400
 80045c8:	40000800 	.word	0x40000800
 80045cc:	40000c00 	.word	0x40000c00
 80045d0:	40014000 	.word	0x40014000

080045d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045dc:	bf00      	nop
 80045de:	370c      	adds	r7, #12
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045f0:	bf00      	nop
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004604:	bf00      	nop
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d101      	bne.n	8004622 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e040      	b.n	80046a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004626:	2b00      	cmp	r3, #0
 8004628:	d106      	bne.n	8004638 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f001 ffb8 	bl	80065a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2224      	movs	r2, #36	; 0x24
 800463c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f022 0201 	bic.w	r2, r2, #1
 800464c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 fc18 	bl	8004e84 <UART_SetConfig>
 8004654:	4603      	mov	r3, r0
 8004656:	2b01      	cmp	r3, #1
 8004658:	d101      	bne.n	800465e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e022      	b.n	80046a4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004662:	2b00      	cmp	r3, #0
 8004664:	d002      	beq.n	800466c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 fec4 	bl	80053f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	685a      	ldr	r2, [r3, #4]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800467a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	689a      	ldr	r2, [r3, #8]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800468a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f042 0201 	orr.w	r2, r2, #1
 800469a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f000 ff4b 	bl	8005538 <UART_CheckIdleState>
 80046a2:	4603      	mov	r3, r0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3708      	adds	r7, #8
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b08a      	sub	sp, #40	; 0x28
 80046b0:	af02      	add	r7, sp, #8
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	603b      	str	r3, [r7, #0]
 80046b8:	4613      	mov	r3, r2
 80046ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046c0:	2b20      	cmp	r3, #32
 80046c2:	f040 8082 	bne.w	80047ca <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d002      	beq.n	80046d2 <HAL_UART_Transmit+0x26>
 80046cc:	88fb      	ldrh	r3, [r7, #6]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d101      	bne.n	80046d6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e07a      	b.n	80047cc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d101      	bne.n	80046e4 <HAL_UART_Transmit+0x38>
 80046e0:	2302      	movs	r3, #2
 80046e2:	e073      	b.n	80047cc <HAL_UART_Transmit+0x120>
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2221      	movs	r2, #33	; 0x21
 80046f8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046fa:	f7fc fc8b 	bl	8001014 <HAL_GetTick>
 80046fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	88fa      	ldrh	r2, [r7, #6]
 8004704:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	88fa      	ldrh	r2, [r7, #6]
 800470c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004718:	d108      	bne.n	800472c <HAL_UART_Transmit+0x80>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d104      	bne.n	800472c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004722:	2300      	movs	r3, #0
 8004724:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	61bb      	str	r3, [r7, #24]
 800472a:	e003      	b.n	8004734 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004730:	2300      	movs	r3, #0
 8004732:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800473c:	e02d      	b.n	800479a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	9300      	str	r3, [sp, #0]
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	2200      	movs	r2, #0
 8004746:	2180      	movs	r1, #128	; 0x80
 8004748:	68f8      	ldr	r0, [r7, #12]
 800474a:	f000 ff3e 	bl	80055ca <UART_WaitOnFlagUntilTimeout>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d001      	beq.n	8004758 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	e039      	b.n	80047cc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d10b      	bne.n	8004776 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	881a      	ldrh	r2, [r3, #0]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800476a:	b292      	uxth	r2, r2
 800476c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	3302      	adds	r3, #2
 8004772:	61bb      	str	r3, [r7, #24]
 8004774:	e008      	b.n	8004788 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	781a      	ldrb	r2, [r3, #0]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	b292      	uxth	r2, r2
 8004780:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	3301      	adds	r3, #1
 8004786:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800478e:	b29b      	uxth	r3, r3
 8004790:	3b01      	subs	r3, #1
 8004792:	b29a      	uxth	r2, r3
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d1cb      	bne.n	800473e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	9300      	str	r3, [sp, #0]
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	2200      	movs	r2, #0
 80047ae:	2140      	movs	r1, #64	; 0x40
 80047b0:	68f8      	ldr	r0, [r7, #12]
 80047b2:	f000 ff0a 	bl	80055ca <UART_WaitOnFlagUntilTimeout>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d001      	beq.n	80047c0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	e005      	b.n	80047cc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2220      	movs	r2, #32
 80047c4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80047c6:	2300      	movs	r3, #0
 80047c8:	e000      	b.n	80047cc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80047ca:	2302      	movs	r3, #2
  }
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3720      	adds	r7, #32
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b08a      	sub	sp, #40	; 0x28
 80047d8:	af00      	add	r7, sp, #0
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	4613      	mov	r3, r2
 80047e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047e6:	2b20      	cmp	r3, #32
 80047e8:	d142      	bne.n	8004870 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d002      	beq.n	80047f6 <HAL_UART_Receive_IT+0x22>
 80047f0:	88fb      	ldrh	r3, [r7, #6]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d101      	bne.n	80047fa <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e03b      	b.n	8004872 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004800:	2b01      	cmp	r3, #1
 8004802:	d101      	bne.n	8004808 <HAL_UART_Receive_IT+0x34>
 8004804:	2302      	movs	r3, #2
 8004806:	e034      	b.n	8004872 <HAL_UART_Receive_IT+0x9e>
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2200      	movs	r2, #0
 8004814:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a18      	ldr	r2, [pc, #96]	; (800487c <HAL_UART_Receive_IT+0xa8>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d01f      	beq.n	8004860 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d018      	beq.n	8004860 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	e853 3f00 	ldrex	r3, [r3]
 800483a:	613b      	str	r3, [r7, #16]
   return(result);
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004842:	627b      	str	r3, [r7, #36]	; 0x24
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	461a      	mov	r2, r3
 800484a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484c:	623b      	str	r3, [r7, #32]
 800484e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004850:	69f9      	ldr	r1, [r7, #28]
 8004852:	6a3a      	ldr	r2, [r7, #32]
 8004854:	e841 2300 	strex	r3, r2, [r1]
 8004858:	61bb      	str	r3, [r7, #24]
   return(result);
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d1e6      	bne.n	800482e <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004860:	88fb      	ldrh	r3, [r7, #6]
 8004862:	461a      	mov	r2, r3
 8004864:	68b9      	ldr	r1, [r7, #8]
 8004866:	68f8      	ldr	r0, [r7, #12]
 8004868:	f000 ff74 	bl	8005754 <UART_Start_Receive_IT>
 800486c:	4603      	mov	r3, r0
 800486e:	e000      	b.n	8004872 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004870:	2302      	movs	r3, #2
  }
}
 8004872:	4618      	mov	r0, r3
 8004874:	3728      	adds	r7, #40	; 0x28
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	40008000 	.word	0x40008000

08004880 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b0ba      	sub	sp, #232	; 0xe8
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	69db      	ldr	r3, [r3, #28]
 800488e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80048a6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80048aa:	f640 030f 	movw	r3, #2063	; 0x80f
 80048ae:	4013      	ands	r3, r2
 80048b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80048b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d115      	bne.n	80048e8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80048bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048c0:	f003 0320 	and.w	r3, r3, #32
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00f      	beq.n	80048e8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80048c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048cc:	f003 0320 	and.w	r3, r3, #32
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d009      	beq.n	80048e8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048d8:	2b00      	cmp	r3, #0
 80048da:	f000 82a6 	beq.w	8004e2a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	4798      	blx	r3
      }
      return;
 80048e6:	e2a0      	b.n	8004e2a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80048e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	f000 8117 	beq.w	8004b20 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80048f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048f6:	f003 0301 	and.w	r3, r3, #1
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d106      	bne.n	800490c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80048fe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004902:	4b85      	ldr	r3, [pc, #532]	; (8004b18 <HAL_UART_IRQHandler+0x298>)
 8004904:	4013      	ands	r3, r2
 8004906:	2b00      	cmp	r3, #0
 8004908:	f000 810a 	beq.w	8004b20 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800490c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004910:	f003 0301 	and.w	r3, r3, #1
 8004914:	2b00      	cmp	r3, #0
 8004916:	d011      	beq.n	800493c <HAL_UART_IRQHandler+0xbc>
 8004918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800491c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004920:	2b00      	cmp	r3, #0
 8004922:	d00b      	beq.n	800493c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	2201      	movs	r2, #1
 800492a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004932:	f043 0201 	orr.w	r2, r3, #1
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800493c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004940:	f003 0302 	and.w	r3, r3, #2
 8004944:	2b00      	cmp	r3, #0
 8004946:	d011      	beq.n	800496c <HAL_UART_IRQHandler+0xec>
 8004948:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800494c:	f003 0301 	and.w	r3, r3, #1
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00b      	beq.n	800496c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2202      	movs	r2, #2
 800495a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004962:	f043 0204 	orr.w	r2, r3, #4
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800496c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004970:	f003 0304 	and.w	r3, r3, #4
 8004974:	2b00      	cmp	r3, #0
 8004976:	d011      	beq.n	800499c <HAL_UART_IRQHandler+0x11c>
 8004978:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800497c:	f003 0301 	and.w	r3, r3, #1
 8004980:	2b00      	cmp	r3, #0
 8004982:	d00b      	beq.n	800499c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2204      	movs	r2, #4
 800498a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004992:	f043 0202 	orr.w	r2, r3, #2
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800499c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049a0:	f003 0308 	and.w	r3, r3, #8
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d017      	beq.n	80049d8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80049a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049ac:	f003 0320 	and.w	r3, r3, #32
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d105      	bne.n	80049c0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80049b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049b8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d00b      	beq.n	80049d8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2208      	movs	r2, #8
 80049c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049ce:	f043 0208 	orr.w	r2, r3, #8
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80049d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d012      	beq.n	8004a0a <HAL_UART_IRQHandler+0x18a>
 80049e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00c      	beq.n	8004a0a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a00:	f043 0220 	orr.w	r2, r3, #32
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f000 820c 	beq.w	8004e2e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004a16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a1a:	f003 0320 	and.w	r3, r3, #32
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d00d      	beq.n	8004a3e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004a22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a26:	f003 0320 	and.w	r3, r3, #32
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d007      	beq.n	8004a3e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d003      	beq.n	8004a3e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a44:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a52:	2b40      	cmp	r3, #64	; 0x40
 8004a54:	d005      	beq.n	8004a62 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004a56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a5a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d04f      	beq.n	8004b02 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 ff40 	bl	80058e8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a72:	2b40      	cmp	r3, #64	; 0x40
 8004a74:	d141      	bne.n	8004afa <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	3308      	adds	r3, #8
 8004a7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a80:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004a84:	e853 3f00 	ldrex	r3, [r3]
 8004a88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004a8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	3308      	adds	r3, #8
 8004a9e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004aa2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004aa6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aaa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004aae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004ab2:	e841 2300 	strex	r3, r2, [r1]
 8004ab6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004aba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d1d9      	bne.n	8004a76 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d013      	beq.n	8004af2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ace:	4a13      	ldr	r2, [pc, #76]	; (8004b1c <HAL_UART_IRQHandler+0x29c>)
 8004ad0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f7fc fc1b 	bl	8001312 <HAL_DMA_Abort_IT>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d017      	beq.n	8004b12 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004aec:	4610      	mov	r0, r2
 8004aee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004af0:	e00f      	b.n	8004b12 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 f9b0 	bl	8004e58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004af8:	e00b      	b.n	8004b12 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f000 f9ac 	bl	8004e58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b00:	e007      	b.n	8004b12 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 f9a8 	bl	8004e58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004b10:	e18d      	b.n	8004e2e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b12:	bf00      	nop
    return;
 8004b14:	e18b      	b.n	8004e2e <HAL_UART_IRQHandler+0x5ae>
 8004b16:	bf00      	nop
 8004b18:	04000120 	.word	0x04000120
 8004b1c:	080059af 	.word	0x080059af

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	f040 8146 	bne.w	8004db6 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b2e:	f003 0310 	and.w	r3, r3, #16
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	f000 813f 	beq.w	8004db6 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004b38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b3c:	f003 0310 	and.w	r3, r3, #16
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	f000 8138 	beq.w	8004db6 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2210      	movs	r2, #16
 8004b4c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b58:	2b40      	cmp	r3, #64	; 0x40
 8004b5a:	f040 80b4 	bne.w	8004cc6 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004b6a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	f000 815f 	beq.w	8004e32 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004b7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	f080 8157 	bcs.w	8004e32 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b8a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0320 	and.w	r3, r3, #32
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	f040 8085 	bne.w	8004caa <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004bac:	e853 3f00 	ldrex	r3, [r3]
 8004bb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004bb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004bb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bbc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004bca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004bce:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004bd6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004bda:	e841 2300 	strex	r3, r2, [r1]
 8004bde:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004be2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d1da      	bne.n	8004ba0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	3308      	adds	r3, #8
 8004bf0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bf4:	e853 3f00 	ldrex	r3, [r3]
 8004bf8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004bfa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004bfc:	f023 0301 	bic.w	r3, r3, #1
 8004c00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	3308      	adds	r3, #8
 8004c0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004c0e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004c12:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c14:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004c16:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004c1a:	e841 2300 	strex	r3, r2, [r1]
 8004c1e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004c20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d1e1      	bne.n	8004bea <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	3308      	adds	r3, #8
 8004c2c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c30:	e853 3f00 	ldrex	r3, [r3]
 8004c34:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004c36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	3308      	adds	r3, #8
 8004c46:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004c4a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004c4c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c4e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004c50:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004c52:	e841 2300 	strex	r3, r2, [r1]
 8004c56:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004c58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d1e3      	bne.n	8004c26 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2220      	movs	r2, #32
 8004c62:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c72:	e853 3f00 	ldrex	r3, [r3]
 8004c76:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004c78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c7a:	f023 0310 	bic.w	r3, r3, #16
 8004c7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	461a      	mov	r2, r3
 8004c88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004c8c:	65bb      	str	r3, [r7, #88]	; 0x58
 8004c8e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c90:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004c92:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c94:	e841 2300 	strex	r3, r2, [r1]
 8004c98:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004c9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d1e4      	bne.n	8004c6a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f7fc faf6 	bl	8001296 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 f8d4 	bl	8004e6c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004cc4:	e0b5      	b.n	8004e32 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	f000 80a7 	beq.w	8004e36 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8004ce8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	f000 80a2 	beq.w	8004e36 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cfa:	e853 3f00 	ldrex	r3, [r3]
 8004cfe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d02:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d06:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	461a      	mov	r2, r3
 8004d10:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004d14:	647b      	str	r3, [r7, #68]	; 0x44
 8004d16:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d18:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d1c:	e841 2300 	strex	r3, r2, [r1]
 8004d20:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004d22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d1e4      	bne.n	8004cf2 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	3308      	adds	r3, #8
 8004d2e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d32:	e853 3f00 	ldrex	r3, [r3]
 8004d36:	623b      	str	r3, [r7, #32]
   return(result);
 8004d38:	6a3b      	ldr	r3, [r7, #32]
 8004d3a:	f023 0301 	bic.w	r3, r3, #1
 8004d3e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	3308      	adds	r3, #8
 8004d48:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004d4c:	633a      	str	r2, [r7, #48]	; 0x30
 8004d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d50:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d54:	e841 2300 	strex	r3, r2, [r1]
 8004d58:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d1e3      	bne.n	8004d28 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2220      	movs	r2, #32
 8004d64:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	e853 3f00 	ldrex	r3, [r3]
 8004d7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f023 0310 	bic.w	r3, r3, #16
 8004d86:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	461a      	mov	r2, r3
 8004d90:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004d94:	61fb      	str	r3, [r7, #28]
 8004d96:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d98:	69b9      	ldr	r1, [r7, #24]
 8004d9a:	69fa      	ldr	r2, [r7, #28]
 8004d9c:	e841 2300 	strex	r3, r2, [r1]
 8004da0:	617b      	str	r3, [r7, #20]
   return(result);
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d1e4      	bne.n	8004d72 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004da8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004dac:	4619      	mov	r1, r3
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 f85c 	bl	8004e6c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004db4:	e03f      	b.n	8004e36 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004db6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00e      	beq.n	8004de0 <HAL_UART_IRQHandler+0x560>
 8004dc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004dc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d008      	beq.n	8004de0 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004dd6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f000 ff88 	bl	8005cee <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004dde:	e02d      	b.n	8004e3c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004de0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004de4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d00e      	beq.n	8004e0a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004dec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004df0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d008      	beq.n	8004e0a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d01c      	beq.n	8004e3a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	4798      	blx	r3
    }
    return;
 8004e08:	e017      	b.n	8004e3a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004e0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d012      	beq.n	8004e3c <HAL_UART_IRQHandler+0x5bc>
 8004e16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00c      	beq.n	8004e3c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 fdd9 	bl	80059da <UART_EndTransmit_IT>
    return;
 8004e28:	e008      	b.n	8004e3c <HAL_UART_IRQHandler+0x5bc>
      return;
 8004e2a:	bf00      	nop
 8004e2c:	e006      	b.n	8004e3c <HAL_UART_IRQHandler+0x5bc>
    return;
 8004e2e:	bf00      	nop
 8004e30:	e004      	b.n	8004e3c <HAL_UART_IRQHandler+0x5bc>
      return;
 8004e32:	bf00      	nop
 8004e34:	e002      	b.n	8004e3c <HAL_UART_IRQHandler+0x5bc>
      return;
 8004e36:	bf00      	nop
 8004e38:	e000      	b.n	8004e3c <HAL_UART_IRQHandler+0x5bc>
    return;
 8004e3a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004e3c:	37e8      	adds	r7, #232	; 0xe8
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop

08004e44 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004e4c:	bf00      	nop
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004e60:	bf00      	nop
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr

08004e6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	460b      	mov	r3, r1
 8004e76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004e78:	bf00      	nop
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e88:	b08a      	sub	sp, #40	; 0x28
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	689a      	ldr	r2, [r3, #8]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	431a      	orrs	r2, r3
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	695b      	ldr	r3, [r3, #20]
 8004ea2:	431a      	orrs	r2, r3
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	69db      	ldr	r3, [r3, #28]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	4ba4      	ldr	r3, [pc, #656]	; (8005144 <UART_SetConfig+0x2c0>)
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	6812      	ldr	r2, [r2, #0]
 8004eba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ebc:	430b      	orrs	r3, r1
 8004ebe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	68da      	ldr	r2, [r3, #12]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	699b      	ldr	r3, [r3, #24]
 8004eda:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a99      	ldr	r2, [pc, #612]	; (8005148 <UART_SetConfig+0x2c4>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d004      	beq.n	8004ef0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6a1b      	ldr	r3, [r3, #32]
 8004eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eec:	4313      	orrs	r3, r2
 8004eee:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f00:	430a      	orrs	r2, r1
 8004f02:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a90      	ldr	r2, [pc, #576]	; (800514c <UART_SetConfig+0x2c8>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d126      	bne.n	8004f5c <UART_SetConfig+0xd8>
 8004f0e:	4b90      	ldr	r3, [pc, #576]	; (8005150 <UART_SetConfig+0x2cc>)
 8004f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f14:	f003 0303 	and.w	r3, r3, #3
 8004f18:	2b03      	cmp	r3, #3
 8004f1a:	d81b      	bhi.n	8004f54 <UART_SetConfig+0xd0>
 8004f1c:	a201      	add	r2, pc, #4	; (adr r2, 8004f24 <UART_SetConfig+0xa0>)
 8004f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f22:	bf00      	nop
 8004f24:	08004f35 	.word	0x08004f35
 8004f28:	08004f45 	.word	0x08004f45
 8004f2c:	08004f3d 	.word	0x08004f3d
 8004f30:	08004f4d 	.word	0x08004f4d
 8004f34:	2301      	movs	r3, #1
 8004f36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f3a:	e116      	b.n	800516a <UART_SetConfig+0x2e6>
 8004f3c:	2302      	movs	r3, #2
 8004f3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f42:	e112      	b.n	800516a <UART_SetConfig+0x2e6>
 8004f44:	2304      	movs	r3, #4
 8004f46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f4a:	e10e      	b.n	800516a <UART_SetConfig+0x2e6>
 8004f4c:	2308      	movs	r3, #8
 8004f4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f52:	e10a      	b.n	800516a <UART_SetConfig+0x2e6>
 8004f54:	2310      	movs	r3, #16
 8004f56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f5a:	e106      	b.n	800516a <UART_SetConfig+0x2e6>
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a7c      	ldr	r2, [pc, #496]	; (8005154 <UART_SetConfig+0x2d0>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d138      	bne.n	8004fd8 <UART_SetConfig+0x154>
 8004f66:	4b7a      	ldr	r3, [pc, #488]	; (8005150 <UART_SetConfig+0x2cc>)
 8004f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f6c:	f003 030c 	and.w	r3, r3, #12
 8004f70:	2b0c      	cmp	r3, #12
 8004f72:	d82d      	bhi.n	8004fd0 <UART_SetConfig+0x14c>
 8004f74:	a201      	add	r2, pc, #4	; (adr r2, 8004f7c <UART_SetConfig+0xf8>)
 8004f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f7a:	bf00      	nop
 8004f7c:	08004fb1 	.word	0x08004fb1
 8004f80:	08004fd1 	.word	0x08004fd1
 8004f84:	08004fd1 	.word	0x08004fd1
 8004f88:	08004fd1 	.word	0x08004fd1
 8004f8c:	08004fc1 	.word	0x08004fc1
 8004f90:	08004fd1 	.word	0x08004fd1
 8004f94:	08004fd1 	.word	0x08004fd1
 8004f98:	08004fd1 	.word	0x08004fd1
 8004f9c:	08004fb9 	.word	0x08004fb9
 8004fa0:	08004fd1 	.word	0x08004fd1
 8004fa4:	08004fd1 	.word	0x08004fd1
 8004fa8:	08004fd1 	.word	0x08004fd1
 8004fac:	08004fc9 	.word	0x08004fc9
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fb6:	e0d8      	b.n	800516a <UART_SetConfig+0x2e6>
 8004fb8:	2302      	movs	r3, #2
 8004fba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fbe:	e0d4      	b.n	800516a <UART_SetConfig+0x2e6>
 8004fc0:	2304      	movs	r3, #4
 8004fc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fc6:	e0d0      	b.n	800516a <UART_SetConfig+0x2e6>
 8004fc8:	2308      	movs	r3, #8
 8004fca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fce:	e0cc      	b.n	800516a <UART_SetConfig+0x2e6>
 8004fd0:	2310      	movs	r3, #16
 8004fd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fd6:	e0c8      	b.n	800516a <UART_SetConfig+0x2e6>
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a5e      	ldr	r2, [pc, #376]	; (8005158 <UART_SetConfig+0x2d4>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d125      	bne.n	800502e <UART_SetConfig+0x1aa>
 8004fe2:	4b5b      	ldr	r3, [pc, #364]	; (8005150 <UART_SetConfig+0x2cc>)
 8004fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fe8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004fec:	2b30      	cmp	r3, #48	; 0x30
 8004fee:	d016      	beq.n	800501e <UART_SetConfig+0x19a>
 8004ff0:	2b30      	cmp	r3, #48	; 0x30
 8004ff2:	d818      	bhi.n	8005026 <UART_SetConfig+0x1a2>
 8004ff4:	2b20      	cmp	r3, #32
 8004ff6:	d00a      	beq.n	800500e <UART_SetConfig+0x18a>
 8004ff8:	2b20      	cmp	r3, #32
 8004ffa:	d814      	bhi.n	8005026 <UART_SetConfig+0x1a2>
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d002      	beq.n	8005006 <UART_SetConfig+0x182>
 8005000:	2b10      	cmp	r3, #16
 8005002:	d008      	beq.n	8005016 <UART_SetConfig+0x192>
 8005004:	e00f      	b.n	8005026 <UART_SetConfig+0x1a2>
 8005006:	2300      	movs	r3, #0
 8005008:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800500c:	e0ad      	b.n	800516a <UART_SetConfig+0x2e6>
 800500e:	2302      	movs	r3, #2
 8005010:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005014:	e0a9      	b.n	800516a <UART_SetConfig+0x2e6>
 8005016:	2304      	movs	r3, #4
 8005018:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800501c:	e0a5      	b.n	800516a <UART_SetConfig+0x2e6>
 800501e:	2308      	movs	r3, #8
 8005020:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005024:	e0a1      	b.n	800516a <UART_SetConfig+0x2e6>
 8005026:	2310      	movs	r3, #16
 8005028:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800502c:	e09d      	b.n	800516a <UART_SetConfig+0x2e6>
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a4a      	ldr	r2, [pc, #296]	; (800515c <UART_SetConfig+0x2d8>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d125      	bne.n	8005084 <UART_SetConfig+0x200>
 8005038:	4b45      	ldr	r3, [pc, #276]	; (8005150 <UART_SetConfig+0x2cc>)
 800503a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800503e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005042:	2bc0      	cmp	r3, #192	; 0xc0
 8005044:	d016      	beq.n	8005074 <UART_SetConfig+0x1f0>
 8005046:	2bc0      	cmp	r3, #192	; 0xc0
 8005048:	d818      	bhi.n	800507c <UART_SetConfig+0x1f8>
 800504a:	2b80      	cmp	r3, #128	; 0x80
 800504c:	d00a      	beq.n	8005064 <UART_SetConfig+0x1e0>
 800504e:	2b80      	cmp	r3, #128	; 0x80
 8005050:	d814      	bhi.n	800507c <UART_SetConfig+0x1f8>
 8005052:	2b00      	cmp	r3, #0
 8005054:	d002      	beq.n	800505c <UART_SetConfig+0x1d8>
 8005056:	2b40      	cmp	r3, #64	; 0x40
 8005058:	d008      	beq.n	800506c <UART_SetConfig+0x1e8>
 800505a:	e00f      	b.n	800507c <UART_SetConfig+0x1f8>
 800505c:	2300      	movs	r3, #0
 800505e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005062:	e082      	b.n	800516a <UART_SetConfig+0x2e6>
 8005064:	2302      	movs	r3, #2
 8005066:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800506a:	e07e      	b.n	800516a <UART_SetConfig+0x2e6>
 800506c:	2304      	movs	r3, #4
 800506e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005072:	e07a      	b.n	800516a <UART_SetConfig+0x2e6>
 8005074:	2308      	movs	r3, #8
 8005076:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800507a:	e076      	b.n	800516a <UART_SetConfig+0x2e6>
 800507c:	2310      	movs	r3, #16
 800507e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005082:	e072      	b.n	800516a <UART_SetConfig+0x2e6>
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a35      	ldr	r2, [pc, #212]	; (8005160 <UART_SetConfig+0x2dc>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d12a      	bne.n	80050e4 <UART_SetConfig+0x260>
 800508e:	4b30      	ldr	r3, [pc, #192]	; (8005150 <UART_SetConfig+0x2cc>)
 8005090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005094:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005098:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800509c:	d01a      	beq.n	80050d4 <UART_SetConfig+0x250>
 800509e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050a2:	d81b      	bhi.n	80050dc <UART_SetConfig+0x258>
 80050a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050a8:	d00c      	beq.n	80050c4 <UART_SetConfig+0x240>
 80050aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050ae:	d815      	bhi.n	80050dc <UART_SetConfig+0x258>
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d003      	beq.n	80050bc <UART_SetConfig+0x238>
 80050b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050b8:	d008      	beq.n	80050cc <UART_SetConfig+0x248>
 80050ba:	e00f      	b.n	80050dc <UART_SetConfig+0x258>
 80050bc:	2300      	movs	r3, #0
 80050be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050c2:	e052      	b.n	800516a <UART_SetConfig+0x2e6>
 80050c4:	2302      	movs	r3, #2
 80050c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050ca:	e04e      	b.n	800516a <UART_SetConfig+0x2e6>
 80050cc:	2304      	movs	r3, #4
 80050ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050d2:	e04a      	b.n	800516a <UART_SetConfig+0x2e6>
 80050d4:	2308      	movs	r3, #8
 80050d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050da:	e046      	b.n	800516a <UART_SetConfig+0x2e6>
 80050dc:	2310      	movs	r3, #16
 80050de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050e2:	e042      	b.n	800516a <UART_SetConfig+0x2e6>
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a17      	ldr	r2, [pc, #92]	; (8005148 <UART_SetConfig+0x2c4>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d13a      	bne.n	8005164 <UART_SetConfig+0x2e0>
 80050ee:	4b18      	ldr	r3, [pc, #96]	; (8005150 <UART_SetConfig+0x2cc>)
 80050f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80050f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80050fc:	d01a      	beq.n	8005134 <UART_SetConfig+0x2b0>
 80050fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005102:	d81b      	bhi.n	800513c <UART_SetConfig+0x2b8>
 8005104:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005108:	d00c      	beq.n	8005124 <UART_SetConfig+0x2a0>
 800510a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800510e:	d815      	bhi.n	800513c <UART_SetConfig+0x2b8>
 8005110:	2b00      	cmp	r3, #0
 8005112:	d003      	beq.n	800511c <UART_SetConfig+0x298>
 8005114:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005118:	d008      	beq.n	800512c <UART_SetConfig+0x2a8>
 800511a:	e00f      	b.n	800513c <UART_SetConfig+0x2b8>
 800511c:	2300      	movs	r3, #0
 800511e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005122:	e022      	b.n	800516a <UART_SetConfig+0x2e6>
 8005124:	2302      	movs	r3, #2
 8005126:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800512a:	e01e      	b.n	800516a <UART_SetConfig+0x2e6>
 800512c:	2304      	movs	r3, #4
 800512e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005132:	e01a      	b.n	800516a <UART_SetConfig+0x2e6>
 8005134:	2308      	movs	r3, #8
 8005136:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800513a:	e016      	b.n	800516a <UART_SetConfig+0x2e6>
 800513c:	2310      	movs	r3, #16
 800513e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005142:	e012      	b.n	800516a <UART_SetConfig+0x2e6>
 8005144:	efff69f3 	.word	0xefff69f3
 8005148:	40008000 	.word	0x40008000
 800514c:	40013800 	.word	0x40013800
 8005150:	40021000 	.word	0x40021000
 8005154:	40004400 	.word	0x40004400
 8005158:	40004800 	.word	0x40004800
 800515c:	40004c00 	.word	0x40004c00
 8005160:	40005000 	.word	0x40005000
 8005164:	2310      	movs	r3, #16
 8005166:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a9f      	ldr	r2, [pc, #636]	; (80053ec <UART_SetConfig+0x568>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d17a      	bne.n	800526a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005174:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005178:	2b08      	cmp	r3, #8
 800517a:	d824      	bhi.n	80051c6 <UART_SetConfig+0x342>
 800517c:	a201      	add	r2, pc, #4	; (adr r2, 8005184 <UART_SetConfig+0x300>)
 800517e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005182:	bf00      	nop
 8005184:	080051a9 	.word	0x080051a9
 8005188:	080051c7 	.word	0x080051c7
 800518c:	080051b1 	.word	0x080051b1
 8005190:	080051c7 	.word	0x080051c7
 8005194:	080051b7 	.word	0x080051b7
 8005198:	080051c7 	.word	0x080051c7
 800519c:	080051c7 	.word	0x080051c7
 80051a0:	080051c7 	.word	0x080051c7
 80051a4:	080051bf 	.word	0x080051bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051a8:	f7fd f88e 	bl	80022c8 <HAL_RCC_GetPCLK1Freq>
 80051ac:	61f8      	str	r0, [r7, #28]
        break;
 80051ae:	e010      	b.n	80051d2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051b0:	4b8f      	ldr	r3, [pc, #572]	; (80053f0 <UART_SetConfig+0x56c>)
 80051b2:	61fb      	str	r3, [r7, #28]
        break;
 80051b4:	e00d      	b.n	80051d2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051b6:	f7fc ffef 	bl	8002198 <HAL_RCC_GetSysClockFreq>
 80051ba:	61f8      	str	r0, [r7, #28]
        break;
 80051bc:	e009      	b.n	80051d2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051c2:	61fb      	str	r3, [r7, #28]
        break;
 80051c4:	e005      	b.n	80051d2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80051c6:	2300      	movs	r3, #0
 80051c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80051d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	f000 80fb 	beq.w	80053d0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	685a      	ldr	r2, [r3, #4]
 80051de:	4613      	mov	r3, r2
 80051e0:	005b      	lsls	r3, r3, #1
 80051e2:	4413      	add	r3, r2
 80051e4:	69fa      	ldr	r2, [r7, #28]
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d305      	bcc.n	80051f6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80051f0:	69fa      	ldr	r2, [r7, #28]
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d903      	bls.n	80051fe <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80051fc:	e0e8      	b.n	80053d0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	2200      	movs	r2, #0
 8005202:	461c      	mov	r4, r3
 8005204:	4615      	mov	r5, r2
 8005206:	f04f 0200 	mov.w	r2, #0
 800520a:	f04f 0300 	mov.w	r3, #0
 800520e:	022b      	lsls	r3, r5, #8
 8005210:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005214:	0222      	lsls	r2, r4, #8
 8005216:	68f9      	ldr	r1, [r7, #12]
 8005218:	6849      	ldr	r1, [r1, #4]
 800521a:	0849      	lsrs	r1, r1, #1
 800521c:	2000      	movs	r0, #0
 800521e:	4688      	mov	r8, r1
 8005220:	4681      	mov	r9, r0
 8005222:	eb12 0a08 	adds.w	sl, r2, r8
 8005226:	eb43 0b09 	adc.w	fp, r3, r9
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	603b      	str	r3, [r7, #0]
 8005232:	607a      	str	r2, [r7, #4]
 8005234:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005238:	4650      	mov	r0, sl
 800523a:	4659      	mov	r1, fp
 800523c:	f7fb fd04 	bl	8000c48 <__aeabi_uldivmod>
 8005240:	4602      	mov	r2, r0
 8005242:	460b      	mov	r3, r1
 8005244:	4613      	mov	r3, r2
 8005246:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800524e:	d308      	bcc.n	8005262 <UART_SetConfig+0x3de>
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005256:	d204      	bcs.n	8005262 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	69ba      	ldr	r2, [r7, #24]
 800525e:	60da      	str	r2, [r3, #12]
 8005260:	e0b6      	b.n	80053d0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005268:	e0b2      	b.n	80053d0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	69db      	ldr	r3, [r3, #28]
 800526e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005272:	d15e      	bne.n	8005332 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005274:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005278:	2b08      	cmp	r3, #8
 800527a:	d828      	bhi.n	80052ce <UART_SetConfig+0x44a>
 800527c:	a201      	add	r2, pc, #4	; (adr r2, 8005284 <UART_SetConfig+0x400>)
 800527e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005282:	bf00      	nop
 8005284:	080052a9 	.word	0x080052a9
 8005288:	080052b1 	.word	0x080052b1
 800528c:	080052b9 	.word	0x080052b9
 8005290:	080052cf 	.word	0x080052cf
 8005294:	080052bf 	.word	0x080052bf
 8005298:	080052cf 	.word	0x080052cf
 800529c:	080052cf 	.word	0x080052cf
 80052a0:	080052cf 	.word	0x080052cf
 80052a4:	080052c7 	.word	0x080052c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052a8:	f7fd f80e 	bl	80022c8 <HAL_RCC_GetPCLK1Freq>
 80052ac:	61f8      	str	r0, [r7, #28]
        break;
 80052ae:	e014      	b.n	80052da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052b0:	f7fd f820 	bl	80022f4 <HAL_RCC_GetPCLK2Freq>
 80052b4:	61f8      	str	r0, [r7, #28]
        break;
 80052b6:	e010      	b.n	80052da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052b8:	4b4d      	ldr	r3, [pc, #308]	; (80053f0 <UART_SetConfig+0x56c>)
 80052ba:	61fb      	str	r3, [r7, #28]
        break;
 80052bc:	e00d      	b.n	80052da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052be:	f7fc ff6b 	bl	8002198 <HAL_RCC_GetSysClockFreq>
 80052c2:	61f8      	str	r0, [r7, #28]
        break;
 80052c4:	e009      	b.n	80052da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052ca:	61fb      	str	r3, [r7, #28]
        break;
 80052cc:	e005      	b.n	80052da <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80052ce:	2300      	movs	r3, #0
 80052d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80052d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d077      	beq.n	80053d0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80052e0:	69fb      	ldr	r3, [r7, #28]
 80052e2:	005a      	lsls	r2, r3, #1
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	085b      	lsrs	r3, r3, #1
 80052ea:	441a      	add	r2, r3
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	2b0f      	cmp	r3, #15
 80052fa:	d916      	bls.n	800532a <UART_SetConfig+0x4a6>
 80052fc:	69bb      	ldr	r3, [r7, #24]
 80052fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005302:	d212      	bcs.n	800532a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	b29b      	uxth	r3, r3
 8005308:	f023 030f 	bic.w	r3, r3, #15
 800530c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	085b      	lsrs	r3, r3, #1
 8005312:	b29b      	uxth	r3, r3
 8005314:	f003 0307 	and.w	r3, r3, #7
 8005318:	b29a      	uxth	r2, r3
 800531a:	8afb      	ldrh	r3, [r7, #22]
 800531c:	4313      	orrs	r3, r2
 800531e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	8afa      	ldrh	r2, [r7, #22]
 8005326:	60da      	str	r2, [r3, #12]
 8005328:	e052      	b.n	80053d0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005330:	e04e      	b.n	80053d0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005332:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005336:	2b08      	cmp	r3, #8
 8005338:	d827      	bhi.n	800538a <UART_SetConfig+0x506>
 800533a:	a201      	add	r2, pc, #4	; (adr r2, 8005340 <UART_SetConfig+0x4bc>)
 800533c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005340:	08005365 	.word	0x08005365
 8005344:	0800536d 	.word	0x0800536d
 8005348:	08005375 	.word	0x08005375
 800534c:	0800538b 	.word	0x0800538b
 8005350:	0800537b 	.word	0x0800537b
 8005354:	0800538b 	.word	0x0800538b
 8005358:	0800538b 	.word	0x0800538b
 800535c:	0800538b 	.word	0x0800538b
 8005360:	08005383 	.word	0x08005383
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005364:	f7fc ffb0 	bl	80022c8 <HAL_RCC_GetPCLK1Freq>
 8005368:	61f8      	str	r0, [r7, #28]
        break;
 800536a:	e014      	b.n	8005396 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800536c:	f7fc ffc2 	bl	80022f4 <HAL_RCC_GetPCLK2Freq>
 8005370:	61f8      	str	r0, [r7, #28]
        break;
 8005372:	e010      	b.n	8005396 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005374:	4b1e      	ldr	r3, [pc, #120]	; (80053f0 <UART_SetConfig+0x56c>)
 8005376:	61fb      	str	r3, [r7, #28]
        break;
 8005378:	e00d      	b.n	8005396 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800537a:	f7fc ff0d 	bl	8002198 <HAL_RCC_GetSysClockFreq>
 800537e:	61f8      	str	r0, [r7, #28]
        break;
 8005380:	e009      	b.n	8005396 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005382:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005386:	61fb      	str	r3, [r7, #28]
        break;
 8005388:	e005      	b.n	8005396 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800538a:	2300      	movs	r3, #0
 800538c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005394:	bf00      	nop
    }

    if (pclk != 0U)
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d019      	beq.n	80053d0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	085a      	lsrs	r2, r3, #1
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	441a      	add	r2, r3
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ae:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053b0:	69bb      	ldr	r3, [r7, #24]
 80053b2:	2b0f      	cmp	r3, #15
 80053b4:	d909      	bls.n	80053ca <UART_SetConfig+0x546>
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053bc:	d205      	bcs.n	80053ca <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	b29a      	uxth	r2, r3
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	60da      	str	r2, [r3, #12]
 80053c8:	e002      	b.n	80053d0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2200      	movs	r2, #0
 80053d4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2200      	movs	r2, #0
 80053da:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80053dc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3728      	adds	r7, #40	; 0x28
 80053e4:	46bd      	mov	sp, r7
 80053e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053ea:	bf00      	nop
 80053ec:	40008000 	.word	0x40008000
 80053f0:	00f42400 	.word	0x00f42400

080053f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005400:	f003 0301 	and.w	r3, r3, #1
 8005404:	2b00      	cmp	r3, #0
 8005406:	d00a      	beq.n	800541e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	430a      	orrs	r2, r1
 800541c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005422:	f003 0302 	and.w	r3, r3, #2
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00a      	beq.n	8005440 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	430a      	orrs	r2, r1
 800543e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005444:	f003 0304 	and.w	r3, r3, #4
 8005448:	2b00      	cmp	r3, #0
 800544a:	d00a      	beq.n	8005462 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	430a      	orrs	r2, r1
 8005460:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005466:	f003 0308 	and.w	r3, r3, #8
 800546a:	2b00      	cmp	r3, #0
 800546c:	d00a      	beq.n	8005484 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	430a      	orrs	r2, r1
 8005482:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005488:	f003 0310 	and.w	r3, r3, #16
 800548c:	2b00      	cmp	r3, #0
 800548e:	d00a      	beq.n	80054a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	430a      	orrs	r2, r1
 80054a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054aa:	f003 0320 	and.w	r3, r3, #32
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d00a      	beq.n	80054c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	430a      	orrs	r2, r1
 80054c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d01a      	beq.n	800550a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	430a      	orrs	r2, r1
 80054e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054f2:	d10a      	bne.n	800550a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	430a      	orrs	r2, r1
 8005508:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005512:	2b00      	cmp	r3, #0
 8005514:	d00a      	beq.n	800552c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	430a      	orrs	r2, r1
 800552a:	605a      	str	r2, [r3, #4]
  }
}
 800552c:	bf00      	nop
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b086      	sub	sp, #24
 800553c:	af02      	add	r7, sp, #8
 800553e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005548:	f7fb fd64 	bl	8001014 <HAL_GetTick>
 800554c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0308 	and.w	r3, r3, #8
 8005558:	2b08      	cmp	r3, #8
 800555a:	d10e      	bne.n	800557a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800555c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005560:	9300      	str	r3, [sp, #0]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2200      	movs	r2, #0
 8005566:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 f82d 	bl	80055ca <UART_WaitOnFlagUntilTimeout>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d001      	beq.n	800557a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005576:	2303      	movs	r3, #3
 8005578:	e023      	b.n	80055c2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 0304 	and.w	r3, r3, #4
 8005584:	2b04      	cmp	r3, #4
 8005586:	d10e      	bne.n	80055a6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005588:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800558c:	9300      	str	r3, [sp, #0]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2200      	movs	r2, #0
 8005592:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 f817 	bl	80055ca <UART_WaitOnFlagUntilTimeout>
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d001      	beq.n	80055a6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e00d      	b.n	80055c2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2220      	movs	r2, #32
 80055aa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2220      	movs	r2, #32
 80055b0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80055c0:	2300      	movs	r3, #0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3710      	adds	r7, #16
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}

080055ca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055ca:	b580      	push	{r7, lr}
 80055cc:	b09c      	sub	sp, #112	; 0x70
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	60f8      	str	r0, [r7, #12]
 80055d2:	60b9      	str	r1, [r7, #8]
 80055d4:	603b      	str	r3, [r7, #0]
 80055d6:	4613      	mov	r3, r2
 80055d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055da:	e0a5      	b.n	8005728 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055e2:	f000 80a1 	beq.w	8005728 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055e6:	f7fb fd15 	bl	8001014 <HAL_GetTick>
 80055ea:	4602      	mov	r2, r0
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d302      	bcc.n	80055fc <UART_WaitOnFlagUntilTimeout+0x32>
 80055f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d13e      	bne.n	800567a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005602:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005604:	e853 3f00 	ldrex	r3, [r3]
 8005608:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800560a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800560c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005610:	667b      	str	r3, [r7, #100]	; 0x64
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	461a      	mov	r2, r3
 8005618:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800561a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800561c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800561e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005620:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005622:	e841 2300 	strex	r3, r2, [r1]
 8005626:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005628:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800562a:	2b00      	cmp	r3, #0
 800562c:	d1e6      	bne.n	80055fc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	3308      	adds	r3, #8
 8005634:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005638:	e853 3f00 	ldrex	r3, [r3]
 800563c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800563e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005640:	f023 0301 	bic.w	r3, r3, #1
 8005644:	663b      	str	r3, [r7, #96]	; 0x60
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	3308      	adds	r3, #8
 800564c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800564e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005650:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005652:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005654:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005656:	e841 2300 	strex	r3, r2, [r1]
 800565a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800565c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800565e:	2b00      	cmp	r3, #0
 8005660:	d1e5      	bne.n	800562e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2220      	movs	r2, #32
 8005666:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2220      	movs	r2, #32
 800566c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	e067      	b.n	800574a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 0304 	and.w	r3, r3, #4
 8005684:	2b00      	cmp	r3, #0
 8005686:	d04f      	beq.n	8005728 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	69db      	ldr	r3, [r3, #28]
 800568e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005692:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005696:	d147      	bne.n	8005728 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056a0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056aa:	e853 3f00 	ldrex	r3, [r3]
 80056ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80056b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	461a      	mov	r2, r3
 80056be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056c0:	637b      	str	r3, [r7, #52]	; 0x34
 80056c2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80056c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056c8:	e841 2300 	strex	r3, r2, [r1]
 80056cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80056ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d1e6      	bne.n	80056a2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	3308      	adds	r3, #8
 80056da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	e853 3f00 	ldrex	r3, [r3]
 80056e2:	613b      	str	r3, [r7, #16]
   return(result);
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	f023 0301 	bic.w	r3, r3, #1
 80056ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	3308      	adds	r3, #8
 80056f2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80056f4:	623a      	str	r2, [r7, #32]
 80056f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f8:	69f9      	ldr	r1, [r7, #28]
 80056fa:	6a3a      	ldr	r2, [r7, #32]
 80056fc:	e841 2300 	strex	r3, r2, [r1]
 8005700:	61bb      	str	r3, [r7, #24]
   return(result);
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d1e5      	bne.n	80056d4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2220      	movs	r2, #32
 800570c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2220      	movs	r2, #32
 8005712:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2220      	movs	r2, #32
 8005718:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2200      	movs	r2, #0
 8005720:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005724:	2303      	movs	r3, #3
 8005726:	e010      	b.n	800574a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	69da      	ldr	r2, [r3, #28]
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	4013      	ands	r3, r2
 8005732:	68ba      	ldr	r2, [r7, #8]
 8005734:	429a      	cmp	r2, r3
 8005736:	bf0c      	ite	eq
 8005738:	2301      	moveq	r3, #1
 800573a:	2300      	movne	r3, #0
 800573c:	b2db      	uxtb	r3, r3
 800573e:	461a      	mov	r2, r3
 8005740:	79fb      	ldrb	r3, [r7, #7]
 8005742:	429a      	cmp	r2, r3
 8005744:	f43f af4a 	beq.w	80055dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	3770      	adds	r7, #112	; 0x70
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
	...

08005754 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005754:	b480      	push	{r7}
 8005756:	b097      	sub	sp, #92	; 0x5c
 8005758:	af00      	add	r7, sp, #0
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	4613      	mov	r3, r2
 8005760:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	68ba      	ldr	r2, [r7, #8]
 8005766:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	88fa      	ldrh	r2, [r7, #6]
 800576c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	88fa      	ldrh	r2, [r7, #6]
 8005774:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2200      	movs	r2, #0
 800577c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005786:	d10e      	bne.n	80057a6 <UART_Start_Receive_IT+0x52>
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	691b      	ldr	r3, [r3, #16]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d105      	bne.n	800579c <UART_Start_Receive_IT+0x48>
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005796:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800579a:	e02d      	b.n	80057f8 <UART_Start_Receive_IT+0xa4>
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	22ff      	movs	r2, #255	; 0xff
 80057a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80057a4:	e028      	b.n	80057f8 <UART_Start_Receive_IT+0xa4>
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d10d      	bne.n	80057ca <UART_Start_Receive_IT+0x76>
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d104      	bne.n	80057c0 <UART_Start_Receive_IT+0x6c>
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	22ff      	movs	r2, #255	; 0xff
 80057ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80057be:	e01b      	b.n	80057f8 <UART_Start_Receive_IT+0xa4>
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	227f      	movs	r2, #127	; 0x7f
 80057c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80057c8:	e016      	b.n	80057f8 <UART_Start_Receive_IT+0xa4>
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057d2:	d10d      	bne.n	80057f0 <UART_Start_Receive_IT+0x9c>
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	691b      	ldr	r3, [r3, #16]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d104      	bne.n	80057e6 <UART_Start_Receive_IT+0x92>
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	227f      	movs	r2, #127	; 0x7f
 80057e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80057e4:	e008      	b.n	80057f8 <UART_Start_Receive_IT+0xa4>
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	223f      	movs	r2, #63	; 0x3f
 80057ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80057ee:	e003      	b.n	80057f8 <UART_Start_Receive_IT+0xa4>
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2200      	movs	r2, #0
 80057fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2222      	movs	r2, #34	; 0x22
 8005804:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	3308      	adds	r3, #8
 800580c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800580e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005810:	e853 3f00 	ldrex	r3, [r3]
 8005814:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005818:	f043 0301 	orr.w	r3, r3, #1
 800581c:	657b      	str	r3, [r7, #84]	; 0x54
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	3308      	adds	r3, #8
 8005824:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005826:	64ba      	str	r2, [r7, #72]	; 0x48
 8005828:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800582a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800582c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800582e:	e841 2300 	strex	r3, r2, [r1]
 8005832:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005834:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005836:	2b00      	cmp	r3, #0
 8005838:	d1e5      	bne.n	8005806 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005842:	d107      	bne.n	8005854 <UART_Start_Receive_IT+0x100>
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	691b      	ldr	r3, [r3, #16]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d103      	bne.n	8005854 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	4a24      	ldr	r2, [pc, #144]	; (80058e0 <UART_Start_Receive_IT+0x18c>)
 8005850:	665a      	str	r2, [r3, #100]	; 0x64
 8005852:	e002      	b.n	800585a <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	4a23      	ldr	r2, [pc, #140]	; (80058e4 <UART_Start_Receive_IT+0x190>)
 8005858:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2200      	movs	r2, #0
 800585e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d019      	beq.n	800589e <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005872:	e853 3f00 	ldrex	r3, [r3]
 8005876:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800587e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	461a      	mov	r2, r3
 8005886:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005888:	637b      	str	r3, [r7, #52]	; 0x34
 800588a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800588c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800588e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005890:	e841 2300 	strex	r3, r2, [r1]
 8005894:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005898:	2b00      	cmp	r3, #0
 800589a:	d1e6      	bne.n	800586a <UART_Start_Receive_IT+0x116>
 800589c:	e018      	b.n	80058d0 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	e853 3f00 	ldrex	r3, [r3]
 80058aa:	613b      	str	r3, [r7, #16]
   return(result);
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	f043 0320 	orr.w	r3, r3, #32
 80058b2:	653b      	str	r3, [r7, #80]	; 0x50
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	461a      	mov	r2, r3
 80058ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058bc:	623b      	str	r3, [r7, #32]
 80058be:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c0:	69f9      	ldr	r1, [r7, #28]
 80058c2:	6a3a      	ldr	r2, [r7, #32]
 80058c4:	e841 2300 	strex	r3, r2, [r1]
 80058c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d1e6      	bne.n	800589e <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80058d0:	2300      	movs	r3, #0
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	375c      	adds	r7, #92	; 0x5c
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr
 80058de:	bf00      	nop
 80058e0:	08005b8f 	.word	0x08005b8f
 80058e4:	08005a2f 	.word	0x08005a2f

080058e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b095      	sub	sp, #84	; 0x54
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058f8:	e853 3f00 	ldrex	r3, [r3]
 80058fc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80058fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005900:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005904:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	461a      	mov	r2, r3
 800590c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800590e:	643b      	str	r3, [r7, #64]	; 0x40
 8005910:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005912:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005914:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005916:	e841 2300 	strex	r3, r2, [r1]
 800591a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800591c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800591e:	2b00      	cmp	r3, #0
 8005920:	d1e6      	bne.n	80058f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	3308      	adds	r3, #8
 8005928:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800592a:	6a3b      	ldr	r3, [r7, #32]
 800592c:	e853 3f00 	ldrex	r3, [r3]
 8005930:	61fb      	str	r3, [r7, #28]
   return(result);
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	f023 0301 	bic.w	r3, r3, #1
 8005938:	64bb      	str	r3, [r7, #72]	; 0x48
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	3308      	adds	r3, #8
 8005940:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005942:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005944:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005946:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005948:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800594a:	e841 2300 	strex	r3, r2, [r1]
 800594e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005952:	2b00      	cmp	r3, #0
 8005954:	d1e5      	bne.n	8005922 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800595a:	2b01      	cmp	r3, #1
 800595c:	d118      	bne.n	8005990 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	e853 3f00 	ldrex	r3, [r3]
 800596a:	60bb      	str	r3, [r7, #8]
   return(result);
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	f023 0310 	bic.w	r3, r3, #16
 8005972:	647b      	str	r3, [r7, #68]	; 0x44
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	461a      	mov	r2, r3
 800597a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800597c:	61bb      	str	r3, [r7, #24]
 800597e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005980:	6979      	ldr	r1, [r7, #20]
 8005982:	69ba      	ldr	r2, [r7, #24]
 8005984:	e841 2300 	strex	r3, r2, [r1]
 8005988:	613b      	str	r3, [r7, #16]
   return(result);
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d1e6      	bne.n	800595e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2220      	movs	r2, #32
 8005994:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	665a      	str	r2, [r3, #100]	; 0x64
}
 80059a2:	bf00      	nop
 80059a4:	3754      	adds	r7, #84	; 0x54
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr

080059ae <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80059ae:	b580      	push	{r7, lr}
 80059b0:	b084      	sub	sp, #16
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2200      	movs	r2, #0
 80059c0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2200      	movs	r2, #0
 80059c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059cc:	68f8      	ldr	r0, [r7, #12]
 80059ce:	f7ff fa43 	bl	8004e58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059d2:	bf00      	nop
 80059d4:	3710      	adds	r7, #16
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}

080059da <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80059da:	b580      	push	{r7, lr}
 80059dc:	b088      	sub	sp, #32
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	e853 3f00 	ldrex	r3, [r3]
 80059ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059f6:	61fb      	str	r3, [r7, #28]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	461a      	mov	r2, r3
 80059fe:	69fb      	ldr	r3, [r7, #28]
 8005a00:	61bb      	str	r3, [r7, #24]
 8005a02:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a04:	6979      	ldr	r1, [r7, #20]
 8005a06:	69ba      	ldr	r2, [r7, #24]
 8005a08:	e841 2300 	strex	r3, r2, [r1]
 8005a0c:	613b      	str	r3, [r7, #16]
   return(result);
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d1e6      	bne.n	80059e2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2220      	movs	r2, #32
 8005a18:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f7ff fa0f 	bl	8004e44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a26:	bf00      	nop
 8005a28:	3720      	adds	r7, #32
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}

08005a2e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005a2e:	b580      	push	{r7, lr}
 8005a30:	b096      	sub	sp, #88	; 0x58
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005a3c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a44:	2b22      	cmp	r3, #34	; 0x22
 8005a46:	f040 8094 	bne.w	8005b72 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005a50:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005a54:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005a58:	b2d9      	uxtb	r1, r3
 8005a5a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005a5e:	b2da      	uxtb	r2, r3
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a64:	400a      	ands	r2, r1
 8005a66:	b2d2      	uxtb	r2, r2
 8005a68:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a6e:	1c5a      	adds	r2, r3, #1
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	3b01      	subs	r3, #1
 8005a7e:	b29a      	uxth	r2, r3
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d179      	bne.n	8005b86 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a9a:	e853 3f00 	ldrex	r3, [r3]
 8005a9e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aa2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005aa6:	653b      	str	r3, [r7, #80]	; 0x50
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	461a      	mov	r2, r3
 8005aae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ab0:	647b      	str	r3, [r7, #68]	; 0x44
 8005ab2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ab6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ab8:	e841 2300 	strex	r3, r2, [r1]
 8005abc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005abe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d1e6      	bne.n	8005a92 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	3308      	adds	r3, #8
 8005aca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ace:	e853 3f00 	ldrex	r3, [r3]
 8005ad2:	623b      	str	r3, [r7, #32]
   return(result);
 8005ad4:	6a3b      	ldr	r3, [r7, #32]
 8005ad6:	f023 0301 	bic.w	r3, r3, #1
 8005ada:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	3308      	adds	r3, #8
 8005ae2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ae4:	633a      	str	r2, [r7, #48]	; 0x30
 8005ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005aea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005aec:	e841 2300 	strex	r3, r2, [r1]
 8005af0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d1e5      	bne.n	8005ac4 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2220      	movs	r2, #32
 8005afc:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d12e      	bne.n	8005b6a <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	e853 3f00 	ldrex	r3, [r3]
 8005b1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f023 0310 	bic.w	r3, r3, #16
 8005b26:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b30:	61fb      	str	r3, [r7, #28]
 8005b32:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b34:	69b9      	ldr	r1, [r7, #24]
 8005b36:	69fa      	ldr	r2, [r7, #28]
 8005b38:	e841 2300 	strex	r3, r2, [r1]
 8005b3c:	617b      	str	r3, [r7, #20]
   return(result);
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d1e6      	bne.n	8005b12 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	69db      	ldr	r3, [r3, #28]
 8005b4a:	f003 0310 	and.w	r3, r3, #16
 8005b4e:	2b10      	cmp	r3, #16
 8005b50:	d103      	bne.n	8005b5a <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	2210      	movs	r2, #16
 8005b58:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005b60:	4619      	mov	r1, r3
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f7ff f982 	bl	8004e6c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005b68:	e00d      	b.n	8005b86 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 fb48 	bl	8006200 <HAL_UART_RxCpltCallback>
}
 8005b70:	e009      	b.n	8005b86 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	8b1b      	ldrh	r3, [r3, #24]
 8005b78:	b29a      	uxth	r2, r3
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f042 0208 	orr.w	r2, r2, #8
 8005b82:	b292      	uxth	r2, r2
 8005b84:	831a      	strh	r2, [r3, #24]
}
 8005b86:	bf00      	nop
 8005b88:	3758      	adds	r7, #88	; 0x58
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}

08005b8e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005b8e:	b580      	push	{r7, lr}
 8005b90:	b096      	sub	sp, #88	; 0x58
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005b9c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ba4:	2b22      	cmp	r3, #34	; 0x22
 8005ba6:	f040 8094 	bne.w	8005cd2 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005bb0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bb8:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005bba:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005bbe:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	b29a      	uxth	r2, r3
 8005bc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bc8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bce:	1c9a      	adds	r2, r3, #2
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	3b01      	subs	r3, #1
 8005bde:	b29a      	uxth	r2, r3
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d179      	bne.n	8005ce6 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bfa:	e853 3f00 	ldrex	r3, [r3]
 8005bfe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c02:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c10:	643b      	str	r3, [r7, #64]	; 0x40
 8005c12:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c14:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005c16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c18:	e841 2300 	strex	r3, r2, [r1]
 8005c1c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d1e6      	bne.n	8005bf2 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	3308      	adds	r3, #8
 8005c2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c2c:	6a3b      	ldr	r3, [r7, #32]
 8005c2e:	e853 3f00 	ldrex	r3, [r3]
 8005c32:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	f023 0301 	bic.w	r3, r3, #1
 8005c3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	3308      	adds	r3, #8
 8005c42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c44:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c4c:	e841 2300 	strex	r3, r2, [r1]
 8005c50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d1e5      	bne.n	8005c24 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2220      	movs	r2, #32
 8005c5c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d12e      	bne.n	8005cca <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	e853 3f00 	ldrex	r3, [r3]
 8005c7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	f023 0310 	bic.w	r3, r3, #16
 8005c86:	647b      	str	r3, [r7, #68]	; 0x44
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c90:	61bb      	str	r3, [r7, #24]
 8005c92:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c94:	6979      	ldr	r1, [r7, #20]
 8005c96:	69ba      	ldr	r2, [r7, #24]
 8005c98:	e841 2300 	strex	r3, r2, [r1]
 8005c9c:	613b      	str	r3, [r7, #16]
   return(result);
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d1e6      	bne.n	8005c72 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	69db      	ldr	r3, [r3, #28]
 8005caa:	f003 0310 	and.w	r3, r3, #16
 8005cae:	2b10      	cmp	r3, #16
 8005cb0:	d103      	bne.n	8005cba <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	2210      	movs	r2, #16
 8005cb8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f7ff f8d2 	bl	8004e6c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005cc8:	e00d      	b.n	8005ce6 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 fa98 	bl	8006200 <HAL_UART_RxCpltCallback>
}
 8005cd0:	e009      	b.n	8005ce6 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	8b1b      	ldrh	r3, [r3, #24]
 8005cd8:	b29a      	uxth	r2, r3
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f042 0208 	orr.w	r2, r2, #8
 8005ce2:	b292      	uxth	r2, r2
 8005ce4:	831a      	strh	r2, [r3, #24]
}
 8005ce6:	bf00      	nop
 8005ce8:	3758      	adds	r7, #88	; 0x58
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}

08005cee <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005cee:	b480      	push	{r7}
 8005cf0:	b083      	sub	sp, #12
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005cf6:	bf00      	nop
 8005cf8:	370c      	adds	r7, #12
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr
	...

08005d04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005d08:	f7fb f91c 	bl	8000f44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005d0c:	f000 f862 	bl	8005dd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005d10:	f000 fa00 	bl	8006114 <MX_GPIO_Init>
  MX_TIM2_Init();
 8005d14:	f000 f8b0 	bl	8005e78 <MX_TIM2_Init>
  MX_TIM3_Init();
 8005d18:	f000 f912 	bl	8005f40 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8005d1c:	f000 f9ca 	bl	80060b4 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8005d20:	f000 f998 	bl	8006054 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 8005d24:	f000 f960 	bl	8005fe8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim6);
 8005d28:	481f      	ldr	r0, [pc, #124]	; (8005da8 <main+0xa4>)
 8005d2a:	f7fd f86d 	bl	8002e08 <HAL_TIM_Base_Start>

  //Start the PWM mode on the channel of timer1
  HAL_TIM_PWM_Start(&htim2, enA);
 8005d2e:	2104      	movs	r1, #4
 8005d30:	481e      	ldr	r0, [pc, #120]	; (8005dac <main+0xa8>)
 8005d32:	f7fd f929 	bl	8002f88 <HAL_TIM_PWM_Start>

  //Start the PWM mode on the channel of timer2
  HAL_TIM_PWM_Start(&htim2, enB);
 8005d36:	2100      	movs	r1, #0
 8005d38:	481c      	ldr	r0, [pc, #112]	; (8005dac <main+0xa8>)
 8005d3a:	f7fd f925 	bl	8002f88 <HAL_TIM_PWM_Start>

  //Start timer 3 in input capture mode
  HAL_TIM_IC_Start_IT(&htim3, ECHO);
 8005d3e:	2100      	movs	r1, #0
 8005d40:	481b      	ldr	r0, [pc, #108]	; (8005db0 <main+0xac>)
 8005d42:	f7fd fa7f 	bl	8003244 <HAL_TIM_IC_Start_IT>

  //Setup the trigger for the first reading from the UART.
  HAL_UART_Receive_IT(&huart1, RX_BUFFER, Buffer_len);
 8005d46:	2202      	movs	r2, #2
 8005d48:	491a      	ldr	r1, [pc, #104]	; (8005db4 <main+0xb0>)
 8005d4a:	481b      	ldr	r0, [pc, #108]	; (8005db8 <main+0xb4>)
 8005d4c:	f7fe fd42 	bl	80047d4 <HAL_UART_Receive_IT>

  //Initialize Right motors direction to forward
  HAL_GPIO_WritePin(RM_GPIO, in3, GPIO_PIN_SET);
 8005d50:	2201      	movs	r2, #1
 8005d52:	2102      	movs	r1, #2
 8005d54:	4819      	ldr	r0, [pc, #100]	; (8005dbc <main+0xb8>)
 8005d56:	f7fb fcc7 	bl	80016e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RM_GPIO, in4, GPIO_PIN_RESET);
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	2104      	movs	r1, #4
 8005d5e:	4817      	ldr	r0, [pc, #92]	; (8005dbc <main+0xb8>)
 8005d60:	f7fb fcc2 	bl	80016e8 <HAL_GPIO_WritePin>

  //Initialize Left motors direction to forward
  HAL_GPIO_WritePin(LM_GPIO, in1, GPIO_PIN_SET);
 8005d64:	2201      	movs	r2, #1
 8005d66:	2102      	movs	r1, #2
 8005d68:	4815      	ldr	r0, [pc, #84]	; (8005dc0 <main+0xbc>)
 8005d6a:	f7fb fcbd 	bl	80016e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LM_GPIO, in2, GPIO_PIN_RESET);
 8005d6e:	2200      	movs	r2, #0
 8005d70:	2104      	movs	r1, #4
 8005d72:	4813      	ldr	r0, [pc, #76]	; (8005dc0 <main+0xbc>)
 8005d74:	f7fb fcb8 	bl	80016e8 <HAL_GPIO_WritePin>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	HCSR04_Read();
 8005d78:	f000 fafa 	bl	8006370 <HCSR04_Read>

	sprintf(MSG, "%f cm\r\n", Distance);
 8005d7c:	4b11      	ldr	r3, [pc, #68]	; (8005dc4 <main+0xc0>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4618      	mov	r0, r3
 8005d82:	f7fa fbe1 	bl	8000548 <__aeabi_f2d>
 8005d86:	4602      	mov	r2, r0
 8005d88:	460b      	mov	r3, r1
 8005d8a:	490f      	ldr	r1, [pc, #60]	; (8005dc8 <main+0xc4>)
 8005d8c:	480f      	ldr	r0, [pc, #60]	; (8005dcc <main+0xc8>)
 8005d8e:	f001 fb2f 	bl	80073f0 <siprintf>

	HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);
 8005d92:	2364      	movs	r3, #100	; 0x64
 8005d94:	2223      	movs	r2, #35	; 0x23
 8005d96:	490d      	ldr	r1, [pc, #52]	; (8005dcc <main+0xc8>)
 8005d98:	480d      	ldr	r0, [pc, #52]	; (8005dd0 <main+0xcc>)
 8005d9a:	f7fe fc87 	bl	80046ac <HAL_UART_Transmit>

	HAL_Delay(20);
 8005d9e:	2014      	movs	r0, #20
 8005da0:	f7fb f944 	bl	800102c <HAL_Delay>
  {
 8005da4:	e7e8      	b.n	8005d78 <main+0x74>
 8005da6:	bf00      	nop
 8005da8:	2000028c 	.word	0x2000028c
 8005dac:	200001f4 	.word	0x200001f4
 8005db0:	20000240 	.word	0x20000240
 8005db4:	200003e0 	.word	0x200003e0
 8005db8:	200002d8 	.word	0x200002d8
 8005dbc:	48000800 	.word	0x48000800
 8005dc0:	48000400 	.word	0x48000400
 8005dc4:	200003f4 	.word	0x200003f4
 8005dc8:	080096c0 	.word	0x080096c0
 8005dcc:	200003f8 	.word	0x200003f8
 8005dd0:	2000035c 	.word	0x2000035c

08005dd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b096      	sub	sp, #88	; 0x58
 8005dd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005dda:	f107 0314 	add.w	r3, r7, #20
 8005dde:	2244      	movs	r2, #68	; 0x44
 8005de0:	2100      	movs	r1, #0
 8005de2:	4618      	mov	r0, r3
 8005de4:	f001 fb67 	bl	80074b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005de8:	463b      	mov	r3, r7
 8005dea:	2200      	movs	r2, #0
 8005dec:	601a      	str	r2, [r3, #0]
 8005dee:	605a      	str	r2, [r3, #4]
 8005df0:	609a      	str	r2, [r3, #8]
 8005df2:	60da      	str	r2, [r3, #12]
 8005df4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8005df6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005dfa:	f7fb fc9b 	bl	8001734 <HAL_PWREx_ControlVoltageScaling>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d001      	beq.n	8005e08 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8005e04:	f000 faea 	bl	80063dc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8005e08:	2310      	movs	r3, #16
 8005e0a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8005e10:	2300      	movs	r3, #0
 8005e12:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8005e14:	2360      	movs	r3, #96	; 0x60
 8005e16:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005e18:	2302      	movs	r3, #2
 8005e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8005e20:	2301      	movs	r3, #1
 8005e22:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 36;
 8005e24:	2324      	movs	r3, #36	; 0x24
 8005e26:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8005e28:	2307      	movs	r3, #7
 8005e2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8005e2c:	2302      	movs	r3, #2
 8005e2e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005e30:	2302      	movs	r3, #2
 8005e32:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005e34:	f107 0314 	add.w	r3, r7, #20
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f7fb fcd1 	bl	80017e0 <HAL_RCC_OscConfig>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d001      	beq.n	8005e48 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8005e44:	f000 faca 	bl	80063dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005e48:	230f      	movs	r3, #15
 8005e4a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005e4c:	2303      	movs	r3, #3
 8005e4e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005e50:	2300      	movs	r3, #0
 8005e52:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005e54:	2300      	movs	r3, #0
 8005e56:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8005e5c:	463b      	mov	r3, r7
 8005e5e:	2104      	movs	r1, #4
 8005e60:	4618      	mov	r0, r3
 8005e62:	f7fc f899 	bl	8001f98 <HAL_RCC_ClockConfig>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d001      	beq.n	8005e70 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8005e6c:	f000 fab6 	bl	80063dc <Error_Handler>
  }
}
 8005e70:	bf00      	nop
 8005e72:	3758      	adds	r7, #88	; 0x58
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b08a      	sub	sp, #40	; 0x28
 8005e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005e7e:	f107 031c 	add.w	r3, r7, #28
 8005e82:	2200      	movs	r2, #0
 8005e84:	601a      	str	r2, [r3, #0]
 8005e86:	605a      	str	r2, [r3, #4]
 8005e88:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005e8a:	463b      	mov	r3, r7
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	601a      	str	r2, [r3, #0]
 8005e90:	605a      	str	r2, [r3, #4]
 8005e92:	609a      	str	r2, [r3, #8]
 8005e94:	60da      	str	r2, [r3, #12]
 8005e96:	611a      	str	r2, [r3, #16]
 8005e98:	615a      	str	r2, [r3, #20]
 8005e9a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005e9c:	4b27      	ldr	r3, [pc, #156]	; (8005f3c <MX_TIM2_Init+0xc4>)
 8005e9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005ea2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 881 ;
 8005ea4:	4b25      	ldr	r3, [pc, #148]	; (8005f3c <MX_TIM2_Init+0xc4>)
 8005ea6:	f240 3271 	movw	r2, #881	; 0x371
 8005eaa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005eac:	4b23      	ldr	r3, [pc, #140]	; (8005f3c <MX_TIM2_Init+0xc4>)
 8005eae:	2200      	movs	r2, #0
 8005eb0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8005eb2:	4b22      	ldr	r3, [pc, #136]	; (8005f3c <MX_TIM2_Init+0xc4>)
 8005eb4:	22ff      	movs	r2, #255	; 0xff
 8005eb6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005eb8:	4b20      	ldr	r3, [pc, #128]	; (8005f3c <MX_TIM2_Init+0xc4>)
 8005eba:	2200      	movs	r2, #0
 8005ebc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005ebe:	4b1f      	ldr	r3, [pc, #124]	; (8005f3c <MX_TIM2_Init+0xc4>)
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8005ec4:	481d      	ldr	r0, [pc, #116]	; (8005f3c <MX_TIM2_Init+0xc4>)
 8005ec6:	f7fd f807 	bl	8002ed8 <HAL_TIM_PWM_Init>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d001      	beq.n	8005ed4 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8005ed0:	f000 fa84 	bl	80063dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005edc:	f107 031c 	add.w	r3, r7, #28
 8005ee0:	4619      	mov	r1, r3
 8005ee2:	4816      	ldr	r0, [pc, #88]	; (8005f3c <MX_TIM2_Init+0xc4>)
 8005ee4:	f7fe faee 	bl	80044c4 <HAL_TIMEx_MasterConfigSynchronization>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d001      	beq.n	8005ef2 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8005eee:	f000 fa75 	bl	80063dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005ef2:	2360      	movs	r3, #96	; 0x60
 8005ef4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005efa:	2300      	movs	r3, #0
 8005efc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005efe:	2300      	movs	r3, #0
 8005f00:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005f02:	463b      	mov	r3, r7
 8005f04:	2200      	movs	r2, #0
 8005f06:	4619      	mov	r1, r3
 8005f08:	480c      	ldr	r0, [pc, #48]	; (8005f3c <MX_TIM2_Init+0xc4>)
 8005f0a:	f7fd fca1 	bl	8003850 <HAL_TIM_PWM_ConfigChannel>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d001      	beq.n	8005f18 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8005f14:	f000 fa62 	bl	80063dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005f18:	463b      	mov	r3, r7
 8005f1a:	2204      	movs	r2, #4
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	4807      	ldr	r0, [pc, #28]	; (8005f3c <MX_TIM2_Init+0xc4>)
 8005f20:	f7fd fc96 	bl	8003850 <HAL_TIM_PWM_ConfigChannel>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d001      	beq.n	8005f2e <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8005f2a:	f000 fa57 	bl	80063dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8005f2e:	4803      	ldr	r0, [pc, #12]	; (8005f3c <MX_TIM2_Init+0xc4>)
 8005f30:	f000 fb06 	bl	8006540 <HAL_TIM_MspPostInit>

}
 8005f34:	bf00      	nop
 8005f36:	3728      	adds	r7, #40	; 0x28
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}
 8005f3c:	200001f4 	.word	0x200001f4

08005f40 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b088      	sub	sp, #32
 8005f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005f46:	f107 0314 	add.w	r3, r7, #20
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	601a      	str	r2, [r3, #0]
 8005f4e:	605a      	str	r2, [r3, #4]
 8005f50:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8005f52:	1d3b      	adds	r3, r7, #4
 8005f54:	2200      	movs	r2, #0
 8005f56:	601a      	str	r2, [r3, #0]
 8005f58:	605a      	str	r2, [r3, #4]
 8005f5a:	609a      	str	r2, [r3, #8]
 8005f5c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005f5e:	4b20      	ldr	r3, [pc, #128]	; (8005fe0 <MX_TIM3_Init+0xa0>)
 8005f60:	4a20      	ldr	r2, [pc, #128]	; (8005fe4 <MX_TIM3_Init+0xa4>)
 8005f62:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8005f64:	4b1e      	ldr	r3, [pc, #120]	; (8005fe0 <MX_TIM3_Init+0xa0>)
 8005f66:	2247      	movs	r2, #71	; 0x47
 8005f68:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005f6a:	4b1d      	ldr	r3, [pc, #116]	; (8005fe0 <MX_TIM3_Init+0xa0>)
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8005f70:	4b1b      	ldr	r3, [pc, #108]	; (8005fe0 <MX_TIM3_Init+0xa0>)
 8005f72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f76:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005f78:	4b19      	ldr	r3, [pc, #100]	; (8005fe0 <MX_TIM3_Init+0xa0>)
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005f7e:	4b18      	ldr	r3, [pc, #96]	; (8005fe0 <MX_TIM3_Init+0xa0>)
 8005f80:	2200      	movs	r2, #0
 8005f82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8005f84:	4816      	ldr	r0, [pc, #88]	; (8005fe0 <MX_TIM3_Init+0xa0>)
 8005f86:	f7fd f905 	bl	8003194 <HAL_TIM_IC_Init>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d001      	beq.n	8005f94 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8005f90:	f000 fa24 	bl	80063dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005f94:	2300      	movs	r3, #0
 8005f96:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005f9c:	f107 0314 	add.w	r3, r7, #20
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	480f      	ldr	r0, [pc, #60]	; (8005fe0 <MX_TIM3_Init+0xa0>)
 8005fa4:	f7fe fa8e 	bl	80044c4 <HAL_TIMEx_MasterConfigSynchronization>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d001      	beq.n	8005fb2 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8005fae:	f000 fa15 	bl	80063dc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8005fc2:	1d3b      	adds	r3, r7, #4
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	4805      	ldr	r0, [pc, #20]	; (8005fe0 <MX_TIM3_Init+0xa0>)
 8005fca:	f7fd fba4 	bl	8003716 <HAL_TIM_IC_ConfigChannel>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d001      	beq.n	8005fd8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8005fd4:	f000 fa02 	bl	80063dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8005fd8:	bf00      	nop
 8005fda:	3720      	adds	r7, #32
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	20000240 	.word	0x20000240
 8005fe4:	40000400 	.word	0x40000400

08005fe8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005fee:	1d3b      	adds	r3, r7, #4
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	601a      	str	r2, [r3, #0]
 8005ff4:	605a      	str	r2, [r3, #4]
 8005ff6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8005ff8:	4b14      	ldr	r3, [pc, #80]	; (800604c <MX_TIM6_Init+0x64>)
 8005ffa:	4a15      	ldr	r2, [pc, #84]	; (8006050 <MX_TIM6_Init+0x68>)
 8005ffc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 72-1;
 8005ffe:	4b13      	ldr	r3, [pc, #76]	; (800604c <MX_TIM6_Init+0x64>)
 8006000:	2247      	movs	r2, #71	; 0x47
 8006002:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006004:	4b11      	ldr	r3, [pc, #68]	; (800604c <MX_TIM6_Init+0x64>)
 8006006:	2200      	movs	r2, #0
 8006008:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800600a:	4b10      	ldr	r3, [pc, #64]	; (800604c <MX_TIM6_Init+0x64>)
 800600c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006010:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006012:	4b0e      	ldr	r3, [pc, #56]	; (800604c <MX_TIM6_Init+0x64>)
 8006014:	2200      	movs	r2, #0
 8006016:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8006018:	480c      	ldr	r0, [pc, #48]	; (800604c <MX_TIM6_Init+0x64>)
 800601a:	f7fc fe9d 	bl	8002d58 <HAL_TIM_Base_Init>
 800601e:	4603      	mov	r3, r0
 8006020:	2b00      	cmp	r3, #0
 8006022:	d001      	beq.n	8006028 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8006024:	f000 f9da 	bl	80063dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006028:	2300      	movs	r3, #0
 800602a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800602c:	2300      	movs	r3, #0
 800602e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8006030:	1d3b      	adds	r3, r7, #4
 8006032:	4619      	mov	r1, r3
 8006034:	4805      	ldr	r0, [pc, #20]	; (800604c <MX_TIM6_Init+0x64>)
 8006036:	f7fe fa45 	bl	80044c4 <HAL_TIMEx_MasterConfigSynchronization>
 800603a:	4603      	mov	r3, r0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d001      	beq.n	8006044 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8006040:	f000 f9cc 	bl	80063dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8006044:	bf00      	nop
 8006046:	3710      	adds	r7, #16
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}
 800604c:	2000028c 	.word	0x2000028c
 8006050:	40001000 	.word	0x40001000

08006054 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006058:	4b14      	ldr	r3, [pc, #80]	; (80060ac <MX_USART1_UART_Init+0x58>)
 800605a:	4a15      	ldr	r2, [pc, #84]	; (80060b0 <MX_USART1_UART_Init+0x5c>)
 800605c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800605e:	4b13      	ldr	r3, [pc, #76]	; (80060ac <MX_USART1_UART_Init+0x58>)
 8006060:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006064:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006066:	4b11      	ldr	r3, [pc, #68]	; (80060ac <MX_USART1_UART_Init+0x58>)
 8006068:	2200      	movs	r2, #0
 800606a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800606c:	4b0f      	ldr	r3, [pc, #60]	; (80060ac <MX_USART1_UART_Init+0x58>)
 800606e:	2200      	movs	r2, #0
 8006070:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006072:	4b0e      	ldr	r3, [pc, #56]	; (80060ac <MX_USART1_UART_Init+0x58>)
 8006074:	2200      	movs	r2, #0
 8006076:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006078:	4b0c      	ldr	r3, [pc, #48]	; (80060ac <MX_USART1_UART_Init+0x58>)
 800607a:	220c      	movs	r2, #12
 800607c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800607e:	4b0b      	ldr	r3, [pc, #44]	; (80060ac <MX_USART1_UART_Init+0x58>)
 8006080:	2200      	movs	r2, #0
 8006082:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006084:	4b09      	ldr	r3, [pc, #36]	; (80060ac <MX_USART1_UART_Init+0x58>)
 8006086:	2200      	movs	r2, #0
 8006088:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800608a:	4b08      	ldr	r3, [pc, #32]	; (80060ac <MX_USART1_UART_Init+0x58>)
 800608c:	2200      	movs	r2, #0
 800608e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006090:	4b06      	ldr	r3, [pc, #24]	; (80060ac <MX_USART1_UART_Init+0x58>)
 8006092:	2200      	movs	r2, #0
 8006094:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006096:	4805      	ldr	r0, [pc, #20]	; (80060ac <MX_USART1_UART_Init+0x58>)
 8006098:	f7fe faba 	bl	8004610 <HAL_UART_Init>
 800609c:	4603      	mov	r3, r0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d001      	beq.n	80060a6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80060a2:	f000 f99b 	bl	80063dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80060a6:	bf00      	nop
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop
 80060ac:	200002d8 	.word	0x200002d8
 80060b0:	40013800 	.word	0x40013800

080060b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80060b8:	4b14      	ldr	r3, [pc, #80]	; (800610c <MX_USART2_UART_Init+0x58>)
 80060ba:	4a15      	ldr	r2, [pc, #84]	; (8006110 <MX_USART2_UART_Init+0x5c>)
 80060bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80060be:	4b13      	ldr	r3, [pc, #76]	; (800610c <MX_USART2_UART_Init+0x58>)
 80060c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80060c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80060c6:	4b11      	ldr	r3, [pc, #68]	; (800610c <MX_USART2_UART_Init+0x58>)
 80060c8:	2200      	movs	r2, #0
 80060ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80060cc:	4b0f      	ldr	r3, [pc, #60]	; (800610c <MX_USART2_UART_Init+0x58>)
 80060ce:	2200      	movs	r2, #0
 80060d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80060d2:	4b0e      	ldr	r3, [pc, #56]	; (800610c <MX_USART2_UART_Init+0x58>)
 80060d4:	2200      	movs	r2, #0
 80060d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80060d8:	4b0c      	ldr	r3, [pc, #48]	; (800610c <MX_USART2_UART_Init+0x58>)
 80060da:	220c      	movs	r2, #12
 80060dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80060de:	4b0b      	ldr	r3, [pc, #44]	; (800610c <MX_USART2_UART_Init+0x58>)
 80060e0:	2200      	movs	r2, #0
 80060e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80060e4:	4b09      	ldr	r3, [pc, #36]	; (800610c <MX_USART2_UART_Init+0x58>)
 80060e6:	2200      	movs	r2, #0
 80060e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80060ea:	4b08      	ldr	r3, [pc, #32]	; (800610c <MX_USART2_UART_Init+0x58>)
 80060ec:	2200      	movs	r2, #0
 80060ee:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80060f0:	4b06      	ldr	r3, [pc, #24]	; (800610c <MX_USART2_UART_Init+0x58>)
 80060f2:	2200      	movs	r2, #0
 80060f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80060f6:	4805      	ldr	r0, [pc, #20]	; (800610c <MX_USART2_UART_Init+0x58>)
 80060f8:	f7fe fa8a 	bl	8004610 <HAL_UART_Init>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d001      	beq.n	8006106 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8006102:	f000 f96b 	bl	80063dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006106:	bf00      	nop
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop
 800610c:	2000035c 	.word	0x2000035c
 8006110:	40004400 	.word	0x40004400

08006114 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b088      	sub	sp, #32
 8006118:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800611a:	f107 030c 	add.w	r3, r7, #12
 800611e:	2200      	movs	r2, #0
 8006120:	601a      	str	r2, [r3, #0]
 8006122:	605a      	str	r2, [r3, #4]
 8006124:	609a      	str	r2, [r3, #8]
 8006126:	60da      	str	r2, [r3, #12]
 8006128:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800612a:	4b32      	ldr	r3, [pc, #200]	; (80061f4 <MX_GPIO_Init+0xe0>)
 800612c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800612e:	4a31      	ldr	r2, [pc, #196]	; (80061f4 <MX_GPIO_Init+0xe0>)
 8006130:	f043 0304 	orr.w	r3, r3, #4
 8006134:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006136:	4b2f      	ldr	r3, [pc, #188]	; (80061f4 <MX_GPIO_Init+0xe0>)
 8006138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800613a:	f003 0304 	and.w	r3, r3, #4
 800613e:	60bb      	str	r3, [r7, #8]
 8006140:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006142:	4b2c      	ldr	r3, [pc, #176]	; (80061f4 <MX_GPIO_Init+0xe0>)
 8006144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006146:	4a2b      	ldr	r2, [pc, #172]	; (80061f4 <MX_GPIO_Init+0xe0>)
 8006148:	f043 0301 	orr.w	r3, r3, #1
 800614c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800614e:	4b29      	ldr	r3, [pc, #164]	; (80061f4 <MX_GPIO_Init+0xe0>)
 8006150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006152:	f003 0301 	and.w	r3, r3, #1
 8006156:	607b      	str	r3, [r7, #4]
 8006158:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800615a:	4b26      	ldr	r3, [pc, #152]	; (80061f4 <MX_GPIO_Init+0xe0>)
 800615c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800615e:	4a25      	ldr	r2, [pc, #148]	; (80061f4 <MX_GPIO_Init+0xe0>)
 8006160:	f043 0302 	orr.w	r3, r3, #2
 8006164:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006166:	4b23      	ldr	r3, [pc, #140]	; (80061f4 <MX_GPIO_Init+0xe0>)
 8006168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800616a:	f003 0302 	and.w	r3, r3, #2
 800616e:	603b      	str	r3, [r7, #0]
 8006170:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TRIG_Pin|IN3_Pin|IN4_Pin, GPIO_PIN_RESET);
 8006172:	2200      	movs	r2, #0
 8006174:	2107      	movs	r1, #7
 8006176:	4820      	ldr	r0, [pc, #128]	; (80061f8 <MX_GPIO_Init+0xe4>)
 8006178:	f7fb fab6 	bl	80016e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BL_Pin|FL_Pin, GPIO_PIN_RESET);
 800617c:	2200      	movs	r2, #0
 800617e:	2130      	movs	r1, #48	; 0x30
 8006180:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006184:	f7fb fab0 	bl	80016e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IN1_Pin|IN2_Pin|ALERT_Pin, GPIO_PIN_RESET);
 8006188:	2200      	movs	r2, #0
 800618a:	f241 0106 	movw	r1, #4102	; 0x1006
 800618e:	481b      	ldr	r0, [pc, #108]	; (80061fc <MX_GPIO_Init+0xe8>)
 8006190:	f7fb faaa 	bl	80016e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TRIG_Pin IN3_Pin IN4_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin|IN3_Pin|IN4_Pin;
 8006194:	2307      	movs	r3, #7
 8006196:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006198:	2301      	movs	r3, #1
 800619a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800619c:	2300      	movs	r3, #0
 800619e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061a0:	2300      	movs	r3, #0
 80061a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80061a4:	f107 030c 	add.w	r3, r7, #12
 80061a8:	4619      	mov	r1, r3
 80061aa:	4813      	ldr	r0, [pc, #76]	; (80061f8 <MX_GPIO_Init+0xe4>)
 80061ac:	f7fb f8f2 	bl	8001394 <HAL_GPIO_Init>

  /*Configure GPIO pins : BL_Pin FL_Pin */
  GPIO_InitStruct.Pin = BL_Pin|FL_Pin;
 80061b0:	2330      	movs	r3, #48	; 0x30
 80061b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80061b4:	2301      	movs	r3, #1
 80061b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061b8:	2300      	movs	r3, #0
 80061ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061bc:	2300      	movs	r3, #0
 80061be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80061c0:	f107 030c 	add.w	r3, r7, #12
 80061c4:	4619      	mov	r1, r3
 80061c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80061ca:	f7fb f8e3 	bl	8001394 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN1_Pin IN2_Pin ALERT_Pin */
  GPIO_InitStruct.Pin = IN1_Pin|IN2_Pin|ALERT_Pin;
 80061ce:	f241 0306 	movw	r3, #4102	; 0x1006
 80061d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80061d4:	2301      	movs	r3, #1
 80061d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061d8:	2300      	movs	r3, #0
 80061da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061dc:	2300      	movs	r3, #0
 80061de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80061e0:	f107 030c 	add.w	r3, r7, #12
 80061e4:	4619      	mov	r1, r3
 80061e6:	4805      	ldr	r0, [pc, #20]	; (80061fc <MX_GPIO_Init+0xe8>)
 80061e8:	f7fb f8d4 	bl	8001394 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80061ec:	bf00      	nop
 80061ee:	3720      	adds	r7, #32
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}
 80061f4:	40021000 	.word	0x40021000
 80061f8:	48000800 	.word	0x48000800
 80061fc:	48000400 	.word	0x48000400

08006200 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8006200:	b580      	push	{r7, lr}
 8006202:	b082      	sub	sp, #8
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]

	// Check the Cplt callback function call belongs to the UART1 instance.
    if (huart == &huart1) {
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	4a06      	ldr	r2, [pc, #24]	; (8006224 <HAL_UART_RxCpltCallback+0x24>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d104      	bne.n	800621a <HAL_UART_RxCpltCallback+0x1a>
    	HAL_UART_Receive_IT(&huart1, RX_BUFFER, Buffer_len);
 8006210:	2202      	movs	r2, #2
 8006212:	4905      	ldr	r1, [pc, #20]	; (8006228 <HAL_UART_RxCpltCallback+0x28>)
 8006214:	4803      	ldr	r0, [pc, #12]	; (8006224 <HAL_UART_RxCpltCallback+0x24>)
 8006216:	f7fe fadd 	bl	80047d4 <HAL_UART_Receive_IT>
    }
}
 800621a:	bf00      	nop
 800621c:	3708      	adds	r7, #8
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
 8006222:	bf00      	nop
 8006224:	200002d8 	.word	0x200002d8
 8006228:	200003e0 	.word	0x200003e0
 800622c:	00000000 	.word	0x00000000

08006230 <HAL_TIM_IC_CaptureCallback>:
{
    return au32_IN * (au32_OUTmax/au32_INmax);
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b082      	sub	sp, #8
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	7f1b      	ldrb	r3, [r3, #28]
 800623c:	2b01      	cmp	r3, #1
 800623e:	f040 8082 	bne.w	8006346 <HAL_TIM_IC_CaptureCallback+0x116>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 8006242:	4b45      	ldr	r3, [pc, #276]	; (8006358 <HAL_TIM_IC_CaptureCallback+0x128>)
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d11a      	bne.n	8006280 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 800624a:	2100      	movs	r1, #0
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f7fd fc13 	bl	8003a78 <HAL_TIM_ReadCapturedValue>
 8006252:	4603      	mov	r3, r0
 8006254:	4a41      	ldr	r2, [pc, #260]	; (800635c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8006256:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8006258:	4b3f      	ldr	r3, [pc, #252]	; (8006358 <HAL_TIM_IC_CaptureCallback+0x128>)
 800625a:	2201      	movs	r2, #1
 800625c:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	6a1a      	ldr	r2, [r3, #32]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f022 020a 	bic.w	r2, r2, #10
 800626c:	621a      	str	r2, [r3, #32]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	6a1a      	ldr	r2, [r3, #32]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f042 0202 	orr.w	r2, r2, #2
 800627c:	621a      	str	r2, [r3, #32]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			// To avoid reading next echos (this routine will be executed ones we need an update): refer to HCSR04_Read()
			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC1);
		}
	}
}
 800627e:	e062      	b.n	8006346 <HAL_TIM_IC_CaptureCallback+0x116>
		else if (Is_First_Captured==1)   // if the first is already captured
 8006280:	4b35      	ldr	r3, [pc, #212]	; (8006358 <HAL_TIM_IC_CaptureCallback+0x128>)
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	2b01      	cmp	r3, #1
 8006286:	d15e      	bne.n	8006346 <HAL_TIM_IC_CaptureCallback+0x116>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8006288:	2100      	movs	r1, #0
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f7fd fbf4 	bl	8003a78 <HAL_TIM_ReadCapturedValue>
 8006290:	4603      	mov	r3, r0
 8006292:	4a33      	ldr	r2, [pc, #204]	; (8006360 <HAL_TIM_IC_CaptureCallback+0x130>)
 8006294:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	2200      	movs	r2, #0
 800629c:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)
 800629e:	4b30      	ldr	r3, [pc, #192]	; (8006360 <HAL_TIM_IC_CaptureCallback+0x130>)
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	4b2e      	ldr	r3, [pc, #184]	; (800635c <HAL_TIM_IC_CaptureCallback+0x12c>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d907      	bls.n	80062ba <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2-IC_Val1;
 80062aa:	4b2d      	ldr	r3, [pc, #180]	; (8006360 <HAL_TIM_IC_CaptureCallback+0x130>)
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	4b2b      	ldr	r3, [pc, #172]	; (800635c <HAL_TIM_IC_CaptureCallback+0x12c>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	1ad3      	subs	r3, r2, r3
 80062b4:	4a2b      	ldr	r2, [pc, #172]	; (8006364 <HAL_TIM_IC_CaptureCallback+0x134>)
 80062b6:	6013      	str	r3, [r2, #0]
 80062b8:	e00f      	b.n	80062da <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2)
 80062ba:	4b28      	ldr	r3, [pc, #160]	; (800635c <HAL_TIM_IC_CaptureCallback+0x12c>)
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	4b28      	ldr	r3, [pc, #160]	; (8006360 <HAL_TIM_IC_CaptureCallback+0x130>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d909      	bls.n	80062da <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 80062c6:	4b26      	ldr	r3, [pc, #152]	; (8006360 <HAL_TIM_IC_CaptureCallback+0x130>)
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	4b24      	ldr	r3, [pc, #144]	; (800635c <HAL_TIM_IC_CaptureCallback+0x12c>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	1ad3      	subs	r3, r2, r3
 80062d0:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80062d4:	33ff      	adds	r3, #255	; 0xff
 80062d6:	4a23      	ldr	r2, [pc, #140]	; (8006364 <HAL_TIM_IC_CaptureCallback+0x134>)
 80062d8:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034/2;
 80062da:	4b22      	ldr	r3, [pc, #136]	; (8006364 <HAL_TIM_IC_CaptureCallback+0x134>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4618      	mov	r0, r3
 80062e0:	f7fa f910 	bl	8000504 <__aeabi_ui2d>
 80062e4:	a31a      	add	r3, pc, #104	; (adr r3, 8006350 <HAL_TIM_IC_CaptureCallback+0x120>)
 80062e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ea:	f7fa f985 	bl	80005f8 <__aeabi_dmul>
 80062ee:	4602      	mov	r2, r0
 80062f0:	460b      	mov	r3, r1
 80062f2:	4610      	mov	r0, r2
 80062f4:	4619      	mov	r1, r3
 80062f6:	f04f 0200 	mov.w	r2, #0
 80062fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80062fe:	f7fa faa5 	bl	800084c <__aeabi_ddiv>
 8006302:	4602      	mov	r2, r0
 8006304:	460b      	mov	r3, r1
 8006306:	4610      	mov	r0, r2
 8006308:	4619      	mov	r1, r3
 800630a:	f7fa fc4d 	bl	8000ba8 <__aeabi_d2f>
 800630e:	4603      	mov	r3, r0
 8006310:	4a15      	ldr	r2, [pc, #84]	; (8006368 <HAL_TIM_IC_CaptureCallback+0x138>)
 8006312:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 0; // set it back to false
 8006314:	4b10      	ldr	r3, [pc, #64]	; (8006358 <HAL_TIM_IC_CaptureCallback+0x128>)
 8006316:	2200      	movs	r2, #0
 8006318:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	6a1a      	ldr	r2, [r3, #32]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f022 020a 	bic.w	r2, r2, #10
 8006328:	621a      	str	r2, [r3, #32]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	6a12      	ldr	r2, [r2, #32]
 8006334:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC1);
 8006336:	4b0d      	ldr	r3, [pc, #52]	; (800636c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	68da      	ldr	r2, [r3, #12]
 800633c:	4b0b      	ldr	r3, [pc, #44]	; (800636c <HAL_TIM_IC_CaptureCallback+0x13c>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f022 0202 	bic.w	r2, r2, #2
 8006344:	60da      	str	r2, [r3, #12]
}
 8006346:	bf00      	nop
 8006348:	3708      	adds	r7, #8
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
 800634e:	bf00      	nop
 8006350:	b020c49c 	.word	0xb020c49c
 8006354:	3fa16872 	.word	0x3fa16872
 8006358:	200003f0 	.word	0x200003f0
 800635c:	200003e4 	.word	0x200003e4
 8006360:	200003e8 	.word	0x200003e8
 8006364:	200003ec 	.word	0x200003ec
 8006368:	200003f4 	.word	0x200003f4
 800636c:	20000240 	.word	0x20000240

08006370 <HCSR04_Read>:

/*the function responsible of reading HCSR04 (this function will set the HCSR04 trig pin high for 3 ms):
result will be stored in "distance" global variable handled within the IC callback function
*/
void HCSR04_Read(void)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8006374:	2201      	movs	r2, #1
 8006376:	2101      	movs	r1, #1
 8006378:	480a      	ldr	r0, [pc, #40]	; (80063a4 <HCSR04_Read+0x34>)
 800637a:	f7fb f9b5 	bl	80016e8 <HAL_GPIO_WritePin>
	delay_us(5);  // wait for 3s us (minimum trig pulse is 2us)
 800637e:	2005      	movs	r0, #5
 8006380:	f000 f814 	bl	80063ac <delay_us>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8006384:	2200      	movs	r2, #0
 8006386:	2101      	movs	r1, #1
 8006388:	4806      	ldr	r0, [pc, #24]	; (80063a4 <HCSR04_Read+0x34>)
 800638a:	f7fb f9ad 	bl	80016e8 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC1);
 800638e:	4b06      	ldr	r3, [pc, #24]	; (80063a8 <HCSR04_Read+0x38>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	68da      	ldr	r2, [r3, #12]
 8006394:	4b04      	ldr	r3, [pc, #16]	; (80063a8 <HCSR04_Read+0x38>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f042 0202 	orr.w	r2, r2, #2
 800639c:	60da      	str	r2, [r3, #12]
}
 800639e:	bf00      	nop
 80063a0:	bd80      	pop	{r7, pc}
 80063a2:	bf00      	nop
 80063a4:	48000800 	.word	0x48000800
 80063a8:	20000240 	.word	0x20000240

080063ac <delay_us>:
    }
}

*/

void delay_us(uint16_t delay){
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	4603      	mov	r3, r0
 80063b4:	80fb      	strh	r3, [r7, #6]

	TIM6->CNT = 0;
 80063b6:	4b08      	ldr	r3, [pc, #32]	; (80063d8 <delay_us+0x2c>)
 80063b8:	2200      	movs	r2, #0
 80063ba:	625a      	str	r2, [r3, #36]	; 0x24
	while (TIM6->CNT < delay);
 80063bc:	bf00      	nop
 80063be:	4b06      	ldr	r3, [pc, #24]	; (80063d8 <delay_us+0x2c>)
 80063c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80063c2:	88fb      	ldrh	r3, [r7, #6]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d3fa      	bcc.n	80063be <delay_us+0x12>
}
 80063c8:	bf00      	nop
 80063ca:	bf00      	nop
 80063cc:	370c      	adds	r7, #12
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr
 80063d6:	bf00      	nop
 80063d8:	40001000 	.word	0x40001000

080063dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80063dc:	b480      	push	{r7}
 80063de:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80063e0:	b672      	cpsid	i
}
 80063e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80063e4:	e7fe      	b.n	80063e4 <Error_Handler+0x8>
	...

080063e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80063ee:	4b0f      	ldr	r3, [pc, #60]	; (800642c <HAL_MspInit+0x44>)
 80063f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063f2:	4a0e      	ldr	r2, [pc, #56]	; (800642c <HAL_MspInit+0x44>)
 80063f4:	f043 0301 	orr.w	r3, r3, #1
 80063f8:	6613      	str	r3, [r2, #96]	; 0x60
 80063fa:	4b0c      	ldr	r3, [pc, #48]	; (800642c <HAL_MspInit+0x44>)
 80063fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063fe:	f003 0301 	and.w	r3, r3, #1
 8006402:	607b      	str	r3, [r7, #4]
 8006404:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006406:	4b09      	ldr	r3, [pc, #36]	; (800642c <HAL_MspInit+0x44>)
 8006408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800640a:	4a08      	ldr	r2, [pc, #32]	; (800642c <HAL_MspInit+0x44>)
 800640c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006410:	6593      	str	r3, [r2, #88]	; 0x58
 8006412:	4b06      	ldr	r3, [pc, #24]	; (800642c <HAL_MspInit+0x44>)
 8006414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800641a:	603b      	str	r3, [r7, #0]
 800641c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800641e:	bf00      	nop
 8006420:	370c      	adds	r7, #12
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr
 800642a:	bf00      	nop
 800642c:	40021000 	.word	0x40021000

08006430 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8006430:	b480      	push	{r7}
 8006432:	b085      	sub	sp, #20
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006440:	d10b      	bne.n	800645a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006442:	4b09      	ldr	r3, [pc, #36]	; (8006468 <HAL_TIM_PWM_MspInit+0x38>)
 8006444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006446:	4a08      	ldr	r2, [pc, #32]	; (8006468 <HAL_TIM_PWM_MspInit+0x38>)
 8006448:	f043 0301 	orr.w	r3, r3, #1
 800644c:	6593      	str	r3, [r2, #88]	; 0x58
 800644e:	4b06      	ldr	r3, [pc, #24]	; (8006468 <HAL_TIM_PWM_MspInit+0x38>)
 8006450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006452:	f003 0301 	and.w	r3, r3, #1
 8006456:	60fb      	str	r3, [r7, #12]
 8006458:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800645a:	bf00      	nop
 800645c:	3714      	adds	r7, #20
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr
 8006466:	bf00      	nop
 8006468:	40021000 	.word	0x40021000

0800646c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b08a      	sub	sp, #40	; 0x28
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006474:	f107 0314 	add.w	r3, r7, #20
 8006478:	2200      	movs	r2, #0
 800647a:	601a      	str	r2, [r3, #0]
 800647c:	605a      	str	r2, [r3, #4]
 800647e:	609a      	str	r2, [r3, #8]
 8006480:	60da      	str	r2, [r3, #12]
 8006482:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a1b      	ldr	r2, [pc, #108]	; (80064f8 <HAL_TIM_IC_MspInit+0x8c>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d130      	bne.n	80064f0 <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800648e:	4b1b      	ldr	r3, [pc, #108]	; (80064fc <HAL_TIM_IC_MspInit+0x90>)
 8006490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006492:	4a1a      	ldr	r2, [pc, #104]	; (80064fc <HAL_TIM_IC_MspInit+0x90>)
 8006494:	f043 0302 	orr.w	r3, r3, #2
 8006498:	6593      	str	r3, [r2, #88]	; 0x58
 800649a:	4b18      	ldr	r3, [pc, #96]	; (80064fc <HAL_TIM_IC_MspInit+0x90>)
 800649c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800649e:	f003 0302 	and.w	r3, r3, #2
 80064a2:	613b      	str	r3, [r7, #16]
 80064a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80064a6:	4b15      	ldr	r3, [pc, #84]	; (80064fc <HAL_TIM_IC_MspInit+0x90>)
 80064a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064aa:	4a14      	ldr	r2, [pc, #80]	; (80064fc <HAL_TIM_IC_MspInit+0x90>)
 80064ac:	f043 0301 	orr.w	r3, r3, #1
 80064b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80064b2:	4b12      	ldr	r3, [pc, #72]	; (80064fc <HAL_TIM_IC_MspInit+0x90>)
 80064b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064b6:	f003 0301 	and.w	r3, r3, #1
 80064ba:	60fb      	str	r3, [r7, #12]
 80064bc:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = ECHO_Pin;
 80064be:	2340      	movs	r3, #64	; 0x40
 80064c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064c2:	2302      	movs	r3, #2
 80064c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064c6:	2300      	movs	r3, #0
 80064c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80064ca:	2300      	movs	r3, #0
 80064cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80064ce:	2302      	movs	r3, #2
 80064d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 80064d2:	f107 0314 	add.w	r3, r7, #20
 80064d6:	4619      	mov	r1, r3
 80064d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80064dc:	f7fa ff5a 	bl	8001394 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80064e0:	2200      	movs	r2, #0
 80064e2:	2100      	movs	r1, #0
 80064e4:	201d      	movs	r0, #29
 80064e6:	f7fa fea0 	bl	800122a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80064ea:	201d      	movs	r0, #29
 80064ec:	f7fa feb9 	bl	8001262 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80064f0:	bf00      	nop
 80064f2:	3728      	adds	r7, #40	; 0x28
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}
 80064f8:	40000400 	.word	0x40000400
 80064fc:	40021000 	.word	0x40021000

08006500 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006500:	b480      	push	{r7}
 8006502:	b085      	sub	sp, #20
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a0a      	ldr	r2, [pc, #40]	; (8006538 <HAL_TIM_Base_MspInit+0x38>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d10b      	bne.n	800652a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8006512:	4b0a      	ldr	r3, [pc, #40]	; (800653c <HAL_TIM_Base_MspInit+0x3c>)
 8006514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006516:	4a09      	ldr	r2, [pc, #36]	; (800653c <HAL_TIM_Base_MspInit+0x3c>)
 8006518:	f043 0310 	orr.w	r3, r3, #16
 800651c:	6593      	str	r3, [r2, #88]	; 0x58
 800651e:	4b07      	ldr	r3, [pc, #28]	; (800653c <HAL_TIM_Base_MspInit+0x3c>)
 8006520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006522:	f003 0310 	and.w	r3, r3, #16
 8006526:	60fb      	str	r3, [r7, #12]
 8006528:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800652a:	bf00      	nop
 800652c:	3714      	adds	r7, #20
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr
 8006536:	bf00      	nop
 8006538:	40001000 	.word	0x40001000
 800653c:	40021000 	.word	0x40021000

08006540 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b088      	sub	sp, #32
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006548:	f107 030c 	add.w	r3, r7, #12
 800654c:	2200      	movs	r2, #0
 800654e:	601a      	str	r2, [r3, #0]
 8006550:	605a      	str	r2, [r3, #4]
 8006552:	609a      	str	r2, [r3, #8]
 8006554:	60da      	str	r2, [r3, #12]
 8006556:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006560:	d11c      	bne.n	800659c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006562:	4b10      	ldr	r3, [pc, #64]	; (80065a4 <HAL_TIM_MspPostInit+0x64>)
 8006564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006566:	4a0f      	ldr	r2, [pc, #60]	; (80065a4 <HAL_TIM_MspPostInit+0x64>)
 8006568:	f043 0301 	orr.w	r3, r3, #1
 800656c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800656e:	4b0d      	ldr	r3, [pc, #52]	; (80065a4 <HAL_TIM_MspPostInit+0x64>)
 8006570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006572:	f003 0301 	and.w	r3, r3, #1
 8006576:	60bb      	str	r3, [r7, #8]
 8006578:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENB_Pin|ENA_Pin;
 800657a:	2303      	movs	r3, #3
 800657c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800657e:	2302      	movs	r3, #2
 8006580:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006582:	2300      	movs	r3, #0
 8006584:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006586:	2300      	movs	r3, #0
 8006588:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800658a:	2301      	movs	r3, #1
 800658c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800658e:	f107 030c 	add.w	r3, r7, #12
 8006592:	4619      	mov	r1, r3
 8006594:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006598:	f7fa fefc 	bl	8001394 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800659c:	bf00      	nop
 800659e:	3720      	adds	r7, #32
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	40021000 	.word	0x40021000

080065a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b0ae      	sub	sp, #184	; 0xb8
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80065b0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80065b4:	2200      	movs	r2, #0
 80065b6:	601a      	str	r2, [r3, #0]
 80065b8:	605a      	str	r2, [r3, #4]
 80065ba:	609a      	str	r2, [r3, #8]
 80065bc:	60da      	str	r2, [r3, #12]
 80065be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80065c0:	f107 031c 	add.w	r3, r7, #28
 80065c4:	2288      	movs	r2, #136	; 0x88
 80065c6:	2100      	movs	r1, #0
 80065c8:	4618      	mov	r0, r3
 80065ca:	f000 ff74 	bl	80074b6 <memset>
  if(huart->Instance==USART1)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a4b      	ldr	r2, [pc, #300]	; (8006700 <HAL_UART_MspInit+0x158>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d145      	bne.n	8006664 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80065d8:	2301      	movs	r3, #1
 80065da:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80065dc:	2300      	movs	r3, #0
 80065de:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80065e0:	f107 031c 	add.w	r3, r7, #28
 80065e4:	4618      	mov	r0, r3
 80065e6:	f7fb fefb 	bl	80023e0 <HAL_RCCEx_PeriphCLKConfig>
 80065ea:	4603      	mov	r3, r0
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d001      	beq.n	80065f4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80065f0:	f7ff fef4 	bl	80063dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80065f4:	4b43      	ldr	r3, [pc, #268]	; (8006704 <HAL_UART_MspInit+0x15c>)
 80065f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065f8:	4a42      	ldr	r2, [pc, #264]	; (8006704 <HAL_UART_MspInit+0x15c>)
 80065fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80065fe:	6613      	str	r3, [r2, #96]	; 0x60
 8006600:	4b40      	ldr	r3, [pc, #256]	; (8006704 <HAL_UART_MspInit+0x15c>)
 8006602:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006604:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006608:	61bb      	str	r3, [r7, #24]
 800660a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800660c:	4b3d      	ldr	r3, [pc, #244]	; (8006704 <HAL_UART_MspInit+0x15c>)
 800660e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006610:	4a3c      	ldr	r2, [pc, #240]	; (8006704 <HAL_UART_MspInit+0x15c>)
 8006612:	f043 0301 	orr.w	r3, r3, #1
 8006616:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006618:	4b3a      	ldr	r3, [pc, #232]	; (8006704 <HAL_UART_MspInit+0x15c>)
 800661a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800661c:	f003 0301 	and.w	r3, r3, #1
 8006620:	617b      	str	r3, [r7, #20]
 8006622:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BLE_TX_Pin|BLE_RX_Pin;
 8006624:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8006628:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800662c:	2302      	movs	r3, #2
 800662e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006632:	2300      	movs	r3, #0
 8006634:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006638:	2303      	movs	r3, #3
 800663a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800663e:	2307      	movs	r3, #7
 8006640:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006644:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006648:	4619      	mov	r1, r3
 800664a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800664e:	f7fa fea1 	bl	8001394 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006652:	2200      	movs	r2, #0
 8006654:	2100      	movs	r1, #0
 8006656:	2025      	movs	r0, #37	; 0x25
 8006658:	f7fa fde7 	bl	800122a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800665c:	2025      	movs	r0, #37	; 0x25
 800665e:	f7fa fe00 	bl	8001262 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8006662:	e048      	b.n	80066f6 <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a27      	ldr	r2, [pc, #156]	; (8006708 <HAL_UART_MspInit+0x160>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d143      	bne.n	80066f6 <HAL_UART_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800666e:	2302      	movs	r3, #2
 8006670:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8006672:	2300      	movs	r3, #0
 8006674:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006676:	f107 031c 	add.w	r3, r7, #28
 800667a:	4618      	mov	r0, r3
 800667c:	f7fb feb0 	bl	80023e0 <HAL_RCCEx_PeriphCLKConfig>
 8006680:	4603      	mov	r3, r0
 8006682:	2b00      	cmp	r3, #0
 8006684:	d001      	beq.n	800668a <HAL_UART_MspInit+0xe2>
      Error_Handler();
 8006686:	f7ff fea9 	bl	80063dc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800668a:	4b1e      	ldr	r3, [pc, #120]	; (8006704 <HAL_UART_MspInit+0x15c>)
 800668c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800668e:	4a1d      	ldr	r2, [pc, #116]	; (8006704 <HAL_UART_MspInit+0x15c>)
 8006690:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006694:	6593      	str	r3, [r2, #88]	; 0x58
 8006696:	4b1b      	ldr	r3, [pc, #108]	; (8006704 <HAL_UART_MspInit+0x15c>)
 8006698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800669a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800669e:	613b      	str	r3, [r7, #16]
 80066a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80066a2:	4b18      	ldr	r3, [pc, #96]	; (8006704 <HAL_UART_MspInit+0x15c>)
 80066a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066a6:	4a17      	ldr	r2, [pc, #92]	; (8006704 <HAL_UART_MspInit+0x15c>)
 80066a8:	f043 0301 	orr.w	r3, r3, #1
 80066ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80066ae:	4b15      	ldr	r3, [pc, #84]	; (8006704 <HAL_UART_MspInit+0x15c>)
 80066b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066b2:	f003 0301 	and.w	r3, r3, #1
 80066b6:	60fb      	str	r3, [r7, #12]
 80066b8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80066ba:	230c      	movs	r3, #12
 80066bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066c0:	2302      	movs	r3, #2
 80066c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066c6:	2300      	movs	r3, #0
 80066c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80066cc:	2303      	movs	r3, #3
 80066ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80066d2:	2307      	movs	r3, #7
 80066d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80066d8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80066dc:	4619      	mov	r1, r3
 80066de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80066e2:	f7fa fe57 	bl	8001394 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80066e6:	2200      	movs	r2, #0
 80066e8:	2100      	movs	r1, #0
 80066ea:	2026      	movs	r0, #38	; 0x26
 80066ec:	f7fa fd9d 	bl	800122a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80066f0:	2026      	movs	r0, #38	; 0x26
 80066f2:	f7fa fdb6 	bl	8001262 <HAL_NVIC_EnableIRQ>
}
 80066f6:	bf00      	nop
 80066f8:	37b8      	adds	r7, #184	; 0xb8
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
 80066fe:	bf00      	nop
 8006700:	40013800 	.word	0x40013800
 8006704:	40021000 	.word	0x40021000
 8006708:	40004400 	.word	0x40004400

0800670c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800670c:	b480      	push	{r7}
 800670e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006710:	e7fe      	b.n	8006710 <NMI_Handler+0x4>

08006712 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006712:	b480      	push	{r7}
 8006714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006716:	e7fe      	b.n	8006716 <HardFault_Handler+0x4>

08006718 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006718:	b480      	push	{r7}
 800671a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800671c:	e7fe      	b.n	800671c <MemManage_Handler+0x4>

0800671e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800671e:	b480      	push	{r7}
 8006720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006722:	e7fe      	b.n	8006722 <BusFault_Handler+0x4>

08006724 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006724:	b480      	push	{r7}
 8006726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006728:	e7fe      	b.n	8006728 <UsageFault_Handler+0x4>

0800672a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800672a:	b480      	push	{r7}
 800672c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800672e:	bf00      	nop
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr

08006738 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006738:	b480      	push	{r7}
 800673a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800673c:	bf00      	nop
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr

08006746 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006746:	b480      	push	{r7}
 8006748:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800674a:	bf00      	nop
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr

08006754 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006758:	f7fa fc48 	bl	8000fec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800675c:	bf00      	nop
 800675e:	bd80      	pop	{r7, pc}

08006760 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006764:	4802      	ldr	r0, [pc, #8]	; (8006770 <TIM3_IRQHandler+0x10>)
 8006766:	f7fc feb7 	bl	80034d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800676a:	bf00      	nop
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop
 8006770:	20000240 	.word	0x20000240

08006774 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006778:	4802      	ldr	r0, [pc, #8]	; (8006784 <USART1_IRQHandler+0x10>)
 800677a:	f7fe f881 	bl	8004880 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800677e:	bf00      	nop
 8006780:	bd80      	pop	{r7, pc}
 8006782:	bf00      	nop
 8006784:	200002d8 	.word	0x200002d8

08006788 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800678c:	4802      	ldr	r0, [pc, #8]	; (8006798 <USART2_IRQHandler+0x10>)
 800678e:	f7fe f877 	bl	8004880 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8006792:	bf00      	nop
 8006794:	bd80      	pop	{r7, pc}
 8006796:	bf00      	nop
 8006798:	2000035c 	.word	0x2000035c

0800679c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800679c:	b480      	push	{r7}
 800679e:	af00      	add	r7, sp, #0
  return 1;
 80067a0:	2301      	movs	r3, #1
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr

080067ac <_kill>:

int _kill(int pid, int sig)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b082      	sub	sp, #8
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80067b6:	f000 fed1 	bl	800755c <__errno>
 80067ba:	4603      	mov	r3, r0
 80067bc:	2216      	movs	r2, #22
 80067be:	601a      	str	r2, [r3, #0]
  return -1;
 80067c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3708      	adds	r7, #8
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}

080067cc <_exit>:

void _exit (int status)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b082      	sub	sp, #8
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80067d4:	f04f 31ff 	mov.w	r1, #4294967295
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f7ff ffe7 	bl	80067ac <_kill>
  while (1) {}    /* Make sure we hang here */
 80067de:	e7fe      	b.n	80067de <_exit+0x12>

080067e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b086      	sub	sp, #24
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	60f8      	str	r0, [r7, #12]
 80067e8:	60b9      	str	r1, [r7, #8]
 80067ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80067ec:	2300      	movs	r3, #0
 80067ee:	617b      	str	r3, [r7, #20]
 80067f0:	e00a      	b.n	8006808 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80067f2:	f3af 8000 	nop.w
 80067f6:	4601      	mov	r1, r0
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	1c5a      	adds	r2, r3, #1
 80067fc:	60ba      	str	r2, [r7, #8]
 80067fe:	b2ca      	uxtb	r2, r1
 8006800:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	3301      	adds	r3, #1
 8006806:	617b      	str	r3, [r7, #20]
 8006808:	697a      	ldr	r2, [r7, #20]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	429a      	cmp	r2, r3
 800680e:	dbf0      	blt.n	80067f2 <_read+0x12>
  }

  return len;
 8006810:	687b      	ldr	r3, [r7, #4]
}
 8006812:	4618      	mov	r0, r3
 8006814:	3718      	adds	r7, #24
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}

0800681a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800681a:	b580      	push	{r7, lr}
 800681c:	b086      	sub	sp, #24
 800681e:	af00      	add	r7, sp, #0
 8006820:	60f8      	str	r0, [r7, #12]
 8006822:	60b9      	str	r1, [r7, #8]
 8006824:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006826:	2300      	movs	r3, #0
 8006828:	617b      	str	r3, [r7, #20]
 800682a:	e009      	b.n	8006840 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	1c5a      	adds	r2, r3, #1
 8006830:	60ba      	str	r2, [r7, #8]
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	4618      	mov	r0, r3
 8006836:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	3301      	adds	r3, #1
 800683e:	617b      	str	r3, [r7, #20]
 8006840:	697a      	ldr	r2, [r7, #20]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	429a      	cmp	r2, r3
 8006846:	dbf1      	blt.n	800682c <_write+0x12>
  }
  return len;
 8006848:	687b      	ldr	r3, [r7, #4]
}
 800684a:	4618      	mov	r0, r3
 800684c:	3718      	adds	r7, #24
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}

08006852 <_close>:

int _close(int file)
{
 8006852:	b480      	push	{r7}
 8006854:	b083      	sub	sp, #12
 8006856:	af00      	add	r7, sp, #0
 8006858:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800685a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800685e:	4618      	mov	r0, r3
 8006860:	370c      	adds	r7, #12
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr

0800686a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800686a:	b480      	push	{r7}
 800686c:	b083      	sub	sp, #12
 800686e:	af00      	add	r7, sp, #0
 8006870:	6078      	str	r0, [r7, #4]
 8006872:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800687a:	605a      	str	r2, [r3, #4]
  return 0;
 800687c:	2300      	movs	r3, #0
}
 800687e:	4618      	mov	r0, r3
 8006880:	370c      	adds	r7, #12
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr

0800688a <_isatty>:

int _isatty(int file)
{
 800688a:	b480      	push	{r7}
 800688c:	b083      	sub	sp, #12
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006892:	2301      	movs	r3, #1
}
 8006894:	4618      	mov	r0, r3
 8006896:	370c      	adds	r7, #12
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b085      	sub	sp, #20
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	60f8      	str	r0, [r7, #12]
 80068a8:	60b9      	str	r1, [r7, #8]
 80068aa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3714      	adds	r7, #20
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr
	...

080068bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b086      	sub	sp, #24
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80068c4:	4a14      	ldr	r2, [pc, #80]	; (8006918 <_sbrk+0x5c>)
 80068c6:	4b15      	ldr	r3, [pc, #84]	; (800691c <_sbrk+0x60>)
 80068c8:	1ad3      	subs	r3, r2, r3
 80068ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80068d0:	4b13      	ldr	r3, [pc, #76]	; (8006920 <_sbrk+0x64>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d102      	bne.n	80068de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80068d8:	4b11      	ldr	r3, [pc, #68]	; (8006920 <_sbrk+0x64>)
 80068da:	4a12      	ldr	r2, [pc, #72]	; (8006924 <_sbrk+0x68>)
 80068dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80068de:	4b10      	ldr	r3, [pc, #64]	; (8006920 <_sbrk+0x64>)
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	4413      	add	r3, r2
 80068e6:	693a      	ldr	r2, [r7, #16]
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d207      	bcs.n	80068fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80068ec:	f000 fe36 	bl	800755c <__errno>
 80068f0:	4603      	mov	r3, r0
 80068f2:	220c      	movs	r2, #12
 80068f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80068f6:	f04f 33ff 	mov.w	r3, #4294967295
 80068fa:	e009      	b.n	8006910 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80068fc:	4b08      	ldr	r3, [pc, #32]	; (8006920 <_sbrk+0x64>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006902:	4b07      	ldr	r3, [pc, #28]	; (8006920 <_sbrk+0x64>)
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	4413      	add	r3, r2
 800690a:	4a05      	ldr	r2, [pc, #20]	; (8006920 <_sbrk+0x64>)
 800690c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800690e:	68fb      	ldr	r3, [r7, #12]
}
 8006910:	4618      	mov	r0, r3
 8006912:	3718      	adds	r7, #24
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}
 8006918:	20018000 	.word	0x20018000
 800691c:	00000400 	.word	0x00000400
 8006920:	2000041c 	.word	0x2000041c
 8006924:	20000570 	.word	0x20000570

08006928 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8006928:	b480      	push	{r7}
 800692a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800692c:	4b06      	ldr	r3, [pc, #24]	; (8006948 <SystemInit+0x20>)
 800692e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006932:	4a05      	ldr	r2, [pc, #20]	; (8006948 <SystemInit+0x20>)
 8006934:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006938:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800693c:	bf00      	nop
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr
 8006946:	bf00      	nop
 8006948:	e000ed00 	.word	0xe000ed00

0800694c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800694c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006984 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006950:	f7ff ffea 	bl	8006928 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006954:	480c      	ldr	r0, [pc, #48]	; (8006988 <LoopForever+0x6>)
  ldr r1, =_edata
 8006956:	490d      	ldr	r1, [pc, #52]	; (800698c <LoopForever+0xa>)
  ldr r2, =_sidata
 8006958:	4a0d      	ldr	r2, [pc, #52]	; (8006990 <LoopForever+0xe>)
  movs r3, #0
 800695a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800695c:	e002      	b.n	8006964 <LoopCopyDataInit>

0800695e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800695e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006960:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006962:	3304      	adds	r3, #4

08006964 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006964:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006966:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006968:	d3f9      	bcc.n	800695e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800696a:	4a0a      	ldr	r2, [pc, #40]	; (8006994 <LoopForever+0x12>)
  ldr r4, =_ebss
 800696c:	4c0a      	ldr	r4, [pc, #40]	; (8006998 <LoopForever+0x16>)
  movs r3, #0
 800696e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006970:	e001      	b.n	8006976 <LoopFillZerobss>

08006972 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006972:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006974:	3204      	adds	r2, #4

08006976 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006976:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006978:	d3fb      	bcc.n	8006972 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800697a:	f000 fdf5 	bl	8007568 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800697e:	f7ff f9c1 	bl	8005d04 <main>

08006982 <LoopForever>:

LoopForever:
    b LoopForever
 8006982:	e7fe      	b.n	8006982 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8006984:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8006988:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800698c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8006990:	08009a94 	.word	0x08009a94
  ldr r2, =_sbss
 8006994:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8006998:	2000056c 	.word	0x2000056c

0800699c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800699c:	e7fe      	b.n	800699c <ADC1_2_IRQHandler>

0800699e <__cvt>:
 800699e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069a2:	ec55 4b10 	vmov	r4, r5, d0
 80069a6:	2d00      	cmp	r5, #0
 80069a8:	460e      	mov	r6, r1
 80069aa:	4619      	mov	r1, r3
 80069ac:	462b      	mov	r3, r5
 80069ae:	bfbb      	ittet	lt
 80069b0:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80069b4:	461d      	movlt	r5, r3
 80069b6:	2300      	movge	r3, #0
 80069b8:	232d      	movlt	r3, #45	; 0x2d
 80069ba:	700b      	strb	r3, [r1, #0]
 80069bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069be:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80069c2:	4691      	mov	r9, r2
 80069c4:	f023 0820 	bic.w	r8, r3, #32
 80069c8:	bfbc      	itt	lt
 80069ca:	4622      	movlt	r2, r4
 80069cc:	4614      	movlt	r4, r2
 80069ce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80069d2:	d005      	beq.n	80069e0 <__cvt+0x42>
 80069d4:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80069d8:	d100      	bne.n	80069dc <__cvt+0x3e>
 80069da:	3601      	adds	r6, #1
 80069dc:	2102      	movs	r1, #2
 80069de:	e000      	b.n	80069e2 <__cvt+0x44>
 80069e0:	2103      	movs	r1, #3
 80069e2:	ab03      	add	r3, sp, #12
 80069e4:	9301      	str	r3, [sp, #4]
 80069e6:	ab02      	add	r3, sp, #8
 80069e8:	9300      	str	r3, [sp, #0]
 80069ea:	ec45 4b10 	vmov	d0, r4, r5
 80069ee:	4653      	mov	r3, sl
 80069f0:	4632      	mov	r2, r6
 80069f2:	f000 fe69 	bl	80076c8 <_dtoa_r>
 80069f6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80069fa:	4607      	mov	r7, r0
 80069fc:	d102      	bne.n	8006a04 <__cvt+0x66>
 80069fe:	f019 0f01 	tst.w	r9, #1
 8006a02:	d022      	beq.n	8006a4a <__cvt+0xac>
 8006a04:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006a08:	eb07 0906 	add.w	r9, r7, r6
 8006a0c:	d110      	bne.n	8006a30 <__cvt+0x92>
 8006a0e:	783b      	ldrb	r3, [r7, #0]
 8006a10:	2b30      	cmp	r3, #48	; 0x30
 8006a12:	d10a      	bne.n	8006a2a <__cvt+0x8c>
 8006a14:	2200      	movs	r2, #0
 8006a16:	2300      	movs	r3, #0
 8006a18:	4620      	mov	r0, r4
 8006a1a:	4629      	mov	r1, r5
 8006a1c:	f7fa f854 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a20:	b918      	cbnz	r0, 8006a2a <__cvt+0x8c>
 8006a22:	f1c6 0601 	rsb	r6, r6, #1
 8006a26:	f8ca 6000 	str.w	r6, [sl]
 8006a2a:	f8da 3000 	ldr.w	r3, [sl]
 8006a2e:	4499      	add	r9, r3
 8006a30:	2200      	movs	r2, #0
 8006a32:	2300      	movs	r3, #0
 8006a34:	4620      	mov	r0, r4
 8006a36:	4629      	mov	r1, r5
 8006a38:	f7fa f846 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a3c:	b108      	cbz	r0, 8006a42 <__cvt+0xa4>
 8006a3e:	f8cd 900c 	str.w	r9, [sp, #12]
 8006a42:	2230      	movs	r2, #48	; 0x30
 8006a44:	9b03      	ldr	r3, [sp, #12]
 8006a46:	454b      	cmp	r3, r9
 8006a48:	d307      	bcc.n	8006a5a <__cvt+0xbc>
 8006a4a:	9b03      	ldr	r3, [sp, #12]
 8006a4c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a4e:	1bdb      	subs	r3, r3, r7
 8006a50:	4638      	mov	r0, r7
 8006a52:	6013      	str	r3, [r2, #0]
 8006a54:	b004      	add	sp, #16
 8006a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a5a:	1c59      	adds	r1, r3, #1
 8006a5c:	9103      	str	r1, [sp, #12]
 8006a5e:	701a      	strb	r2, [r3, #0]
 8006a60:	e7f0      	b.n	8006a44 <__cvt+0xa6>

08006a62 <__exponent>:
 8006a62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a64:	4603      	mov	r3, r0
 8006a66:	2900      	cmp	r1, #0
 8006a68:	bfb8      	it	lt
 8006a6a:	4249      	neglt	r1, r1
 8006a6c:	f803 2b02 	strb.w	r2, [r3], #2
 8006a70:	bfb4      	ite	lt
 8006a72:	222d      	movlt	r2, #45	; 0x2d
 8006a74:	222b      	movge	r2, #43	; 0x2b
 8006a76:	2909      	cmp	r1, #9
 8006a78:	7042      	strb	r2, [r0, #1]
 8006a7a:	dd2a      	ble.n	8006ad2 <__exponent+0x70>
 8006a7c:	f10d 0207 	add.w	r2, sp, #7
 8006a80:	4617      	mov	r7, r2
 8006a82:	260a      	movs	r6, #10
 8006a84:	4694      	mov	ip, r2
 8006a86:	fb91 f5f6 	sdiv	r5, r1, r6
 8006a8a:	fb06 1415 	mls	r4, r6, r5, r1
 8006a8e:	3430      	adds	r4, #48	; 0x30
 8006a90:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006a94:	460c      	mov	r4, r1
 8006a96:	2c63      	cmp	r4, #99	; 0x63
 8006a98:	f102 32ff 	add.w	r2, r2, #4294967295
 8006a9c:	4629      	mov	r1, r5
 8006a9e:	dcf1      	bgt.n	8006a84 <__exponent+0x22>
 8006aa0:	3130      	adds	r1, #48	; 0x30
 8006aa2:	f1ac 0402 	sub.w	r4, ip, #2
 8006aa6:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006aaa:	1c41      	adds	r1, r0, #1
 8006aac:	4622      	mov	r2, r4
 8006aae:	42ba      	cmp	r2, r7
 8006ab0:	d30a      	bcc.n	8006ac8 <__exponent+0x66>
 8006ab2:	f10d 0209 	add.w	r2, sp, #9
 8006ab6:	eba2 020c 	sub.w	r2, r2, ip
 8006aba:	42bc      	cmp	r4, r7
 8006abc:	bf88      	it	hi
 8006abe:	2200      	movhi	r2, #0
 8006ac0:	4413      	add	r3, r2
 8006ac2:	1a18      	subs	r0, r3, r0
 8006ac4:	b003      	add	sp, #12
 8006ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ac8:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006acc:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006ad0:	e7ed      	b.n	8006aae <__exponent+0x4c>
 8006ad2:	2330      	movs	r3, #48	; 0x30
 8006ad4:	3130      	adds	r1, #48	; 0x30
 8006ad6:	7083      	strb	r3, [r0, #2]
 8006ad8:	70c1      	strb	r1, [r0, #3]
 8006ada:	1d03      	adds	r3, r0, #4
 8006adc:	e7f1      	b.n	8006ac2 <__exponent+0x60>
	...

08006ae0 <_printf_float>:
 8006ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ae4:	ed2d 8b02 	vpush	{d8}
 8006ae8:	b08d      	sub	sp, #52	; 0x34
 8006aea:	460c      	mov	r4, r1
 8006aec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006af0:	4616      	mov	r6, r2
 8006af2:	461f      	mov	r7, r3
 8006af4:	4605      	mov	r5, r0
 8006af6:	f000 fce7 	bl	80074c8 <_localeconv_r>
 8006afa:	f8d0 a000 	ldr.w	sl, [r0]
 8006afe:	4650      	mov	r0, sl
 8006b00:	f7f9 fbb6 	bl	8000270 <strlen>
 8006b04:	2300      	movs	r3, #0
 8006b06:	930a      	str	r3, [sp, #40]	; 0x28
 8006b08:	6823      	ldr	r3, [r4, #0]
 8006b0a:	9305      	str	r3, [sp, #20]
 8006b0c:	f8d8 3000 	ldr.w	r3, [r8]
 8006b10:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006b14:	3307      	adds	r3, #7
 8006b16:	f023 0307 	bic.w	r3, r3, #7
 8006b1a:	f103 0208 	add.w	r2, r3, #8
 8006b1e:	f8c8 2000 	str.w	r2, [r8]
 8006b22:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006b26:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006b2a:	9307      	str	r3, [sp, #28]
 8006b2c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006b30:	ee08 0a10 	vmov	s16, r0
 8006b34:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006b38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b3c:	4b9e      	ldr	r3, [pc, #632]	; (8006db8 <_printf_float+0x2d8>)
 8006b3e:	f04f 32ff 	mov.w	r2, #4294967295
 8006b42:	f7f9 fff3 	bl	8000b2c <__aeabi_dcmpun>
 8006b46:	bb88      	cbnz	r0, 8006bac <_printf_float+0xcc>
 8006b48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b4c:	4b9a      	ldr	r3, [pc, #616]	; (8006db8 <_printf_float+0x2d8>)
 8006b4e:	f04f 32ff 	mov.w	r2, #4294967295
 8006b52:	f7f9 ffcd 	bl	8000af0 <__aeabi_dcmple>
 8006b56:	bb48      	cbnz	r0, 8006bac <_printf_float+0xcc>
 8006b58:	2200      	movs	r2, #0
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	4640      	mov	r0, r8
 8006b5e:	4649      	mov	r1, r9
 8006b60:	f7f9 ffbc 	bl	8000adc <__aeabi_dcmplt>
 8006b64:	b110      	cbz	r0, 8006b6c <_printf_float+0x8c>
 8006b66:	232d      	movs	r3, #45	; 0x2d
 8006b68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b6c:	4a93      	ldr	r2, [pc, #588]	; (8006dbc <_printf_float+0x2dc>)
 8006b6e:	4b94      	ldr	r3, [pc, #592]	; (8006dc0 <_printf_float+0x2e0>)
 8006b70:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006b74:	bf94      	ite	ls
 8006b76:	4690      	movls	r8, r2
 8006b78:	4698      	movhi	r8, r3
 8006b7a:	2303      	movs	r3, #3
 8006b7c:	6123      	str	r3, [r4, #16]
 8006b7e:	9b05      	ldr	r3, [sp, #20]
 8006b80:	f023 0304 	bic.w	r3, r3, #4
 8006b84:	6023      	str	r3, [r4, #0]
 8006b86:	f04f 0900 	mov.w	r9, #0
 8006b8a:	9700      	str	r7, [sp, #0]
 8006b8c:	4633      	mov	r3, r6
 8006b8e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006b90:	4621      	mov	r1, r4
 8006b92:	4628      	mov	r0, r5
 8006b94:	f000 f9da 	bl	8006f4c <_printf_common>
 8006b98:	3001      	adds	r0, #1
 8006b9a:	f040 8090 	bne.w	8006cbe <_printf_float+0x1de>
 8006b9e:	f04f 30ff 	mov.w	r0, #4294967295
 8006ba2:	b00d      	add	sp, #52	; 0x34
 8006ba4:	ecbd 8b02 	vpop	{d8}
 8006ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bac:	4642      	mov	r2, r8
 8006bae:	464b      	mov	r3, r9
 8006bb0:	4640      	mov	r0, r8
 8006bb2:	4649      	mov	r1, r9
 8006bb4:	f7f9 ffba 	bl	8000b2c <__aeabi_dcmpun>
 8006bb8:	b140      	cbz	r0, 8006bcc <_printf_float+0xec>
 8006bba:	464b      	mov	r3, r9
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	bfbc      	itt	lt
 8006bc0:	232d      	movlt	r3, #45	; 0x2d
 8006bc2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006bc6:	4a7f      	ldr	r2, [pc, #508]	; (8006dc4 <_printf_float+0x2e4>)
 8006bc8:	4b7f      	ldr	r3, [pc, #508]	; (8006dc8 <_printf_float+0x2e8>)
 8006bca:	e7d1      	b.n	8006b70 <_printf_float+0x90>
 8006bcc:	6863      	ldr	r3, [r4, #4]
 8006bce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006bd2:	9206      	str	r2, [sp, #24]
 8006bd4:	1c5a      	adds	r2, r3, #1
 8006bd6:	d13f      	bne.n	8006c58 <_printf_float+0x178>
 8006bd8:	2306      	movs	r3, #6
 8006bda:	6063      	str	r3, [r4, #4]
 8006bdc:	9b05      	ldr	r3, [sp, #20]
 8006bde:	6861      	ldr	r1, [r4, #4]
 8006be0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006be4:	2300      	movs	r3, #0
 8006be6:	9303      	str	r3, [sp, #12]
 8006be8:	ab0a      	add	r3, sp, #40	; 0x28
 8006bea:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006bee:	ab09      	add	r3, sp, #36	; 0x24
 8006bf0:	ec49 8b10 	vmov	d0, r8, r9
 8006bf4:	9300      	str	r3, [sp, #0]
 8006bf6:	6022      	str	r2, [r4, #0]
 8006bf8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006bfc:	4628      	mov	r0, r5
 8006bfe:	f7ff fece 	bl	800699e <__cvt>
 8006c02:	9b06      	ldr	r3, [sp, #24]
 8006c04:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c06:	2b47      	cmp	r3, #71	; 0x47
 8006c08:	4680      	mov	r8, r0
 8006c0a:	d108      	bne.n	8006c1e <_printf_float+0x13e>
 8006c0c:	1cc8      	adds	r0, r1, #3
 8006c0e:	db02      	blt.n	8006c16 <_printf_float+0x136>
 8006c10:	6863      	ldr	r3, [r4, #4]
 8006c12:	4299      	cmp	r1, r3
 8006c14:	dd41      	ble.n	8006c9a <_printf_float+0x1ba>
 8006c16:	f1ab 0302 	sub.w	r3, fp, #2
 8006c1a:	fa5f fb83 	uxtb.w	fp, r3
 8006c1e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006c22:	d820      	bhi.n	8006c66 <_printf_float+0x186>
 8006c24:	3901      	subs	r1, #1
 8006c26:	465a      	mov	r2, fp
 8006c28:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006c2c:	9109      	str	r1, [sp, #36]	; 0x24
 8006c2e:	f7ff ff18 	bl	8006a62 <__exponent>
 8006c32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c34:	1813      	adds	r3, r2, r0
 8006c36:	2a01      	cmp	r2, #1
 8006c38:	4681      	mov	r9, r0
 8006c3a:	6123      	str	r3, [r4, #16]
 8006c3c:	dc02      	bgt.n	8006c44 <_printf_float+0x164>
 8006c3e:	6822      	ldr	r2, [r4, #0]
 8006c40:	07d2      	lsls	r2, r2, #31
 8006c42:	d501      	bpl.n	8006c48 <_printf_float+0x168>
 8006c44:	3301      	adds	r3, #1
 8006c46:	6123      	str	r3, [r4, #16]
 8006c48:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d09c      	beq.n	8006b8a <_printf_float+0xaa>
 8006c50:	232d      	movs	r3, #45	; 0x2d
 8006c52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c56:	e798      	b.n	8006b8a <_printf_float+0xaa>
 8006c58:	9a06      	ldr	r2, [sp, #24]
 8006c5a:	2a47      	cmp	r2, #71	; 0x47
 8006c5c:	d1be      	bne.n	8006bdc <_printf_float+0xfc>
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d1bc      	bne.n	8006bdc <_printf_float+0xfc>
 8006c62:	2301      	movs	r3, #1
 8006c64:	e7b9      	b.n	8006bda <_printf_float+0xfa>
 8006c66:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006c6a:	d118      	bne.n	8006c9e <_printf_float+0x1be>
 8006c6c:	2900      	cmp	r1, #0
 8006c6e:	6863      	ldr	r3, [r4, #4]
 8006c70:	dd0b      	ble.n	8006c8a <_printf_float+0x1aa>
 8006c72:	6121      	str	r1, [r4, #16]
 8006c74:	b913      	cbnz	r3, 8006c7c <_printf_float+0x19c>
 8006c76:	6822      	ldr	r2, [r4, #0]
 8006c78:	07d0      	lsls	r0, r2, #31
 8006c7a:	d502      	bpl.n	8006c82 <_printf_float+0x1a2>
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	440b      	add	r3, r1
 8006c80:	6123      	str	r3, [r4, #16]
 8006c82:	65a1      	str	r1, [r4, #88]	; 0x58
 8006c84:	f04f 0900 	mov.w	r9, #0
 8006c88:	e7de      	b.n	8006c48 <_printf_float+0x168>
 8006c8a:	b913      	cbnz	r3, 8006c92 <_printf_float+0x1b2>
 8006c8c:	6822      	ldr	r2, [r4, #0]
 8006c8e:	07d2      	lsls	r2, r2, #31
 8006c90:	d501      	bpl.n	8006c96 <_printf_float+0x1b6>
 8006c92:	3302      	adds	r3, #2
 8006c94:	e7f4      	b.n	8006c80 <_printf_float+0x1a0>
 8006c96:	2301      	movs	r3, #1
 8006c98:	e7f2      	b.n	8006c80 <_printf_float+0x1a0>
 8006c9a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006c9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ca0:	4299      	cmp	r1, r3
 8006ca2:	db05      	blt.n	8006cb0 <_printf_float+0x1d0>
 8006ca4:	6823      	ldr	r3, [r4, #0]
 8006ca6:	6121      	str	r1, [r4, #16]
 8006ca8:	07d8      	lsls	r0, r3, #31
 8006caa:	d5ea      	bpl.n	8006c82 <_printf_float+0x1a2>
 8006cac:	1c4b      	adds	r3, r1, #1
 8006cae:	e7e7      	b.n	8006c80 <_printf_float+0x1a0>
 8006cb0:	2900      	cmp	r1, #0
 8006cb2:	bfd4      	ite	le
 8006cb4:	f1c1 0202 	rsble	r2, r1, #2
 8006cb8:	2201      	movgt	r2, #1
 8006cba:	4413      	add	r3, r2
 8006cbc:	e7e0      	b.n	8006c80 <_printf_float+0x1a0>
 8006cbe:	6823      	ldr	r3, [r4, #0]
 8006cc0:	055a      	lsls	r2, r3, #21
 8006cc2:	d407      	bmi.n	8006cd4 <_printf_float+0x1f4>
 8006cc4:	6923      	ldr	r3, [r4, #16]
 8006cc6:	4642      	mov	r2, r8
 8006cc8:	4631      	mov	r1, r6
 8006cca:	4628      	mov	r0, r5
 8006ccc:	47b8      	blx	r7
 8006cce:	3001      	adds	r0, #1
 8006cd0:	d12c      	bne.n	8006d2c <_printf_float+0x24c>
 8006cd2:	e764      	b.n	8006b9e <_printf_float+0xbe>
 8006cd4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006cd8:	f240 80e0 	bls.w	8006e9c <_printf_float+0x3bc>
 8006cdc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	f7f9 fef0 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ce8:	2800      	cmp	r0, #0
 8006cea:	d034      	beq.n	8006d56 <_printf_float+0x276>
 8006cec:	4a37      	ldr	r2, [pc, #220]	; (8006dcc <_printf_float+0x2ec>)
 8006cee:	2301      	movs	r3, #1
 8006cf0:	4631      	mov	r1, r6
 8006cf2:	4628      	mov	r0, r5
 8006cf4:	47b8      	blx	r7
 8006cf6:	3001      	adds	r0, #1
 8006cf8:	f43f af51 	beq.w	8006b9e <_printf_float+0xbe>
 8006cfc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d00:	429a      	cmp	r2, r3
 8006d02:	db02      	blt.n	8006d0a <_printf_float+0x22a>
 8006d04:	6823      	ldr	r3, [r4, #0]
 8006d06:	07d8      	lsls	r0, r3, #31
 8006d08:	d510      	bpl.n	8006d2c <_printf_float+0x24c>
 8006d0a:	ee18 3a10 	vmov	r3, s16
 8006d0e:	4652      	mov	r2, sl
 8006d10:	4631      	mov	r1, r6
 8006d12:	4628      	mov	r0, r5
 8006d14:	47b8      	blx	r7
 8006d16:	3001      	adds	r0, #1
 8006d18:	f43f af41 	beq.w	8006b9e <_printf_float+0xbe>
 8006d1c:	f04f 0800 	mov.w	r8, #0
 8006d20:	f104 091a 	add.w	r9, r4, #26
 8006d24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d26:	3b01      	subs	r3, #1
 8006d28:	4543      	cmp	r3, r8
 8006d2a:	dc09      	bgt.n	8006d40 <_printf_float+0x260>
 8006d2c:	6823      	ldr	r3, [r4, #0]
 8006d2e:	079b      	lsls	r3, r3, #30
 8006d30:	f100 8107 	bmi.w	8006f42 <_printf_float+0x462>
 8006d34:	68e0      	ldr	r0, [r4, #12]
 8006d36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d38:	4298      	cmp	r0, r3
 8006d3a:	bfb8      	it	lt
 8006d3c:	4618      	movlt	r0, r3
 8006d3e:	e730      	b.n	8006ba2 <_printf_float+0xc2>
 8006d40:	2301      	movs	r3, #1
 8006d42:	464a      	mov	r2, r9
 8006d44:	4631      	mov	r1, r6
 8006d46:	4628      	mov	r0, r5
 8006d48:	47b8      	blx	r7
 8006d4a:	3001      	adds	r0, #1
 8006d4c:	f43f af27 	beq.w	8006b9e <_printf_float+0xbe>
 8006d50:	f108 0801 	add.w	r8, r8, #1
 8006d54:	e7e6      	b.n	8006d24 <_printf_float+0x244>
 8006d56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	dc39      	bgt.n	8006dd0 <_printf_float+0x2f0>
 8006d5c:	4a1b      	ldr	r2, [pc, #108]	; (8006dcc <_printf_float+0x2ec>)
 8006d5e:	2301      	movs	r3, #1
 8006d60:	4631      	mov	r1, r6
 8006d62:	4628      	mov	r0, r5
 8006d64:	47b8      	blx	r7
 8006d66:	3001      	adds	r0, #1
 8006d68:	f43f af19 	beq.w	8006b9e <_printf_float+0xbe>
 8006d6c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006d70:	4313      	orrs	r3, r2
 8006d72:	d102      	bne.n	8006d7a <_printf_float+0x29a>
 8006d74:	6823      	ldr	r3, [r4, #0]
 8006d76:	07d9      	lsls	r1, r3, #31
 8006d78:	d5d8      	bpl.n	8006d2c <_printf_float+0x24c>
 8006d7a:	ee18 3a10 	vmov	r3, s16
 8006d7e:	4652      	mov	r2, sl
 8006d80:	4631      	mov	r1, r6
 8006d82:	4628      	mov	r0, r5
 8006d84:	47b8      	blx	r7
 8006d86:	3001      	adds	r0, #1
 8006d88:	f43f af09 	beq.w	8006b9e <_printf_float+0xbe>
 8006d8c:	f04f 0900 	mov.w	r9, #0
 8006d90:	f104 0a1a 	add.w	sl, r4, #26
 8006d94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d96:	425b      	negs	r3, r3
 8006d98:	454b      	cmp	r3, r9
 8006d9a:	dc01      	bgt.n	8006da0 <_printf_float+0x2c0>
 8006d9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d9e:	e792      	b.n	8006cc6 <_printf_float+0x1e6>
 8006da0:	2301      	movs	r3, #1
 8006da2:	4652      	mov	r2, sl
 8006da4:	4631      	mov	r1, r6
 8006da6:	4628      	mov	r0, r5
 8006da8:	47b8      	blx	r7
 8006daa:	3001      	adds	r0, #1
 8006dac:	f43f aef7 	beq.w	8006b9e <_printf_float+0xbe>
 8006db0:	f109 0901 	add.w	r9, r9, #1
 8006db4:	e7ee      	b.n	8006d94 <_printf_float+0x2b4>
 8006db6:	bf00      	nop
 8006db8:	7fefffff 	.word	0x7fefffff
 8006dbc:	08009710 	.word	0x08009710
 8006dc0:	08009714 	.word	0x08009714
 8006dc4:	08009718 	.word	0x08009718
 8006dc8:	0800971c 	.word	0x0800971c
 8006dcc:	08009720 	.word	0x08009720
 8006dd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006dd2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	bfa8      	it	ge
 8006dd8:	461a      	movge	r2, r3
 8006dda:	2a00      	cmp	r2, #0
 8006ddc:	4691      	mov	r9, r2
 8006dde:	dc37      	bgt.n	8006e50 <_printf_float+0x370>
 8006de0:	f04f 0b00 	mov.w	fp, #0
 8006de4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006de8:	f104 021a 	add.w	r2, r4, #26
 8006dec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006dee:	9305      	str	r3, [sp, #20]
 8006df0:	eba3 0309 	sub.w	r3, r3, r9
 8006df4:	455b      	cmp	r3, fp
 8006df6:	dc33      	bgt.n	8006e60 <_printf_float+0x380>
 8006df8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	db3b      	blt.n	8006e78 <_printf_float+0x398>
 8006e00:	6823      	ldr	r3, [r4, #0]
 8006e02:	07da      	lsls	r2, r3, #31
 8006e04:	d438      	bmi.n	8006e78 <_printf_float+0x398>
 8006e06:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006e0a:	eba2 0903 	sub.w	r9, r2, r3
 8006e0e:	9b05      	ldr	r3, [sp, #20]
 8006e10:	1ad2      	subs	r2, r2, r3
 8006e12:	4591      	cmp	r9, r2
 8006e14:	bfa8      	it	ge
 8006e16:	4691      	movge	r9, r2
 8006e18:	f1b9 0f00 	cmp.w	r9, #0
 8006e1c:	dc35      	bgt.n	8006e8a <_printf_float+0x3aa>
 8006e1e:	f04f 0800 	mov.w	r8, #0
 8006e22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e26:	f104 0a1a 	add.w	sl, r4, #26
 8006e2a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e2e:	1a9b      	subs	r3, r3, r2
 8006e30:	eba3 0309 	sub.w	r3, r3, r9
 8006e34:	4543      	cmp	r3, r8
 8006e36:	f77f af79 	ble.w	8006d2c <_printf_float+0x24c>
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	4652      	mov	r2, sl
 8006e3e:	4631      	mov	r1, r6
 8006e40:	4628      	mov	r0, r5
 8006e42:	47b8      	blx	r7
 8006e44:	3001      	adds	r0, #1
 8006e46:	f43f aeaa 	beq.w	8006b9e <_printf_float+0xbe>
 8006e4a:	f108 0801 	add.w	r8, r8, #1
 8006e4e:	e7ec      	b.n	8006e2a <_printf_float+0x34a>
 8006e50:	4613      	mov	r3, r2
 8006e52:	4631      	mov	r1, r6
 8006e54:	4642      	mov	r2, r8
 8006e56:	4628      	mov	r0, r5
 8006e58:	47b8      	blx	r7
 8006e5a:	3001      	adds	r0, #1
 8006e5c:	d1c0      	bne.n	8006de0 <_printf_float+0x300>
 8006e5e:	e69e      	b.n	8006b9e <_printf_float+0xbe>
 8006e60:	2301      	movs	r3, #1
 8006e62:	4631      	mov	r1, r6
 8006e64:	4628      	mov	r0, r5
 8006e66:	9205      	str	r2, [sp, #20]
 8006e68:	47b8      	blx	r7
 8006e6a:	3001      	adds	r0, #1
 8006e6c:	f43f ae97 	beq.w	8006b9e <_printf_float+0xbe>
 8006e70:	9a05      	ldr	r2, [sp, #20]
 8006e72:	f10b 0b01 	add.w	fp, fp, #1
 8006e76:	e7b9      	b.n	8006dec <_printf_float+0x30c>
 8006e78:	ee18 3a10 	vmov	r3, s16
 8006e7c:	4652      	mov	r2, sl
 8006e7e:	4631      	mov	r1, r6
 8006e80:	4628      	mov	r0, r5
 8006e82:	47b8      	blx	r7
 8006e84:	3001      	adds	r0, #1
 8006e86:	d1be      	bne.n	8006e06 <_printf_float+0x326>
 8006e88:	e689      	b.n	8006b9e <_printf_float+0xbe>
 8006e8a:	9a05      	ldr	r2, [sp, #20]
 8006e8c:	464b      	mov	r3, r9
 8006e8e:	4442      	add	r2, r8
 8006e90:	4631      	mov	r1, r6
 8006e92:	4628      	mov	r0, r5
 8006e94:	47b8      	blx	r7
 8006e96:	3001      	adds	r0, #1
 8006e98:	d1c1      	bne.n	8006e1e <_printf_float+0x33e>
 8006e9a:	e680      	b.n	8006b9e <_printf_float+0xbe>
 8006e9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e9e:	2a01      	cmp	r2, #1
 8006ea0:	dc01      	bgt.n	8006ea6 <_printf_float+0x3c6>
 8006ea2:	07db      	lsls	r3, r3, #31
 8006ea4:	d53a      	bpl.n	8006f1c <_printf_float+0x43c>
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	4642      	mov	r2, r8
 8006eaa:	4631      	mov	r1, r6
 8006eac:	4628      	mov	r0, r5
 8006eae:	47b8      	blx	r7
 8006eb0:	3001      	adds	r0, #1
 8006eb2:	f43f ae74 	beq.w	8006b9e <_printf_float+0xbe>
 8006eb6:	ee18 3a10 	vmov	r3, s16
 8006eba:	4652      	mov	r2, sl
 8006ebc:	4631      	mov	r1, r6
 8006ebe:	4628      	mov	r0, r5
 8006ec0:	47b8      	blx	r7
 8006ec2:	3001      	adds	r0, #1
 8006ec4:	f43f ae6b 	beq.w	8006b9e <_printf_float+0xbe>
 8006ec8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006ecc:	2200      	movs	r2, #0
 8006ece:	2300      	movs	r3, #0
 8006ed0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8006ed4:	f7f9 fdf8 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ed8:	b9d8      	cbnz	r0, 8006f12 <_printf_float+0x432>
 8006eda:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006ede:	f108 0201 	add.w	r2, r8, #1
 8006ee2:	4631      	mov	r1, r6
 8006ee4:	4628      	mov	r0, r5
 8006ee6:	47b8      	blx	r7
 8006ee8:	3001      	adds	r0, #1
 8006eea:	d10e      	bne.n	8006f0a <_printf_float+0x42a>
 8006eec:	e657      	b.n	8006b9e <_printf_float+0xbe>
 8006eee:	2301      	movs	r3, #1
 8006ef0:	4652      	mov	r2, sl
 8006ef2:	4631      	mov	r1, r6
 8006ef4:	4628      	mov	r0, r5
 8006ef6:	47b8      	blx	r7
 8006ef8:	3001      	adds	r0, #1
 8006efa:	f43f ae50 	beq.w	8006b9e <_printf_float+0xbe>
 8006efe:	f108 0801 	add.w	r8, r8, #1
 8006f02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f04:	3b01      	subs	r3, #1
 8006f06:	4543      	cmp	r3, r8
 8006f08:	dcf1      	bgt.n	8006eee <_printf_float+0x40e>
 8006f0a:	464b      	mov	r3, r9
 8006f0c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006f10:	e6da      	b.n	8006cc8 <_printf_float+0x1e8>
 8006f12:	f04f 0800 	mov.w	r8, #0
 8006f16:	f104 0a1a 	add.w	sl, r4, #26
 8006f1a:	e7f2      	b.n	8006f02 <_printf_float+0x422>
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	4642      	mov	r2, r8
 8006f20:	e7df      	b.n	8006ee2 <_printf_float+0x402>
 8006f22:	2301      	movs	r3, #1
 8006f24:	464a      	mov	r2, r9
 8006f26:	4631      	mov	r1, r6
 8006f28:	4628      	mov	r0, r5
 8006f2a:	47b8      	blx	r7
 8006f2c:	3001      	adds	r0, #1
 8006f2e:	f43f ae36 	beq.w	8006b9e <_printf_float+0xbe>
 8006f32:	f108 0801 	add.w	r8, r8, #1
 8006f36:	68e3      	ldr	r3, [r4, #12]
 8006f38:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006f3a:	1a5b      	subs	r3, r3, r1
 8006f3c:	4543      	cmp	r3, r8
 8006f3e:	dcf0      	bgt.n	8006f22 <_printf_float+0x442>
 8006f40:	e6f8      	b.n	8006d34 <_printf_float+0x254>
 8006f42:	f04f 0800 	mov.w	r8, #0
 8006f46:	f104 0919 	add.w	r9, r4, #25
 8006f4a:	e7f4      	b.n	8006f36 <_printf_float+0x456>

08006f4c <_printf_common>:
 8006f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f50:	4616      	mov	r6, r2
 8006f52:	4699      	mov	r9, r3
 8006f54:	688a      	ldr	r2, [r1, #8]
 8006f56:	690b      	ldr	r3, [r1, #16]
 8006f58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	bfb8      	it	lt
 8006f60:	4613      	movlt	r3, r2
 8006f62:	6033      	str	r3, [r6, #0]
 8006f64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006f68:	4607      	mov	r7, r0
 8006f6a:	460c      	mov	r4, r1
 8006f6c:	b10a      	cbz	r2, 8006f72 <_printf_common+0x26>
 8006f6e:	3301      	adds	r3, #1
 8006f70:	6033      	str	r3, [r6, #0]
 8006f72:	6823      	ldr	r3, [r4, #0]
 8006f74:	0699      	lsls	r1, r3, #26
 8006f76:	bf42      	ittt	mi
 8006f78:	6833      	ldrmi	r3, [r6, #0]
 8006f7a:	3302      	addmi	r3, #2
 8006f7c:	6033      	strmi	r3, [r6, #0]
 8006f7e:	6825      	ldr	r5, [r4, #0]
 8006f80:	f015 0506 	ands.w	r5, r5, #6
 8006f84:	d106      	bne.n	8006f94 <_printf_common+0x48>
 8006f86:	f104 0a19 	add.w	sl, r4, #25
 8006f8a:	68e3      	ldr	r3, [r4, #12]
 8006f8c:	6832      	ldr	r2, [r6, #0]
 8006f8e:	1a9b      	subs	r3, r3, r2
 8006f90:	42ab      	cmp	r3, r5
 8006f92:	dc26      	bgt.n	8006fe2 <_printf_common+0x96>
 8006f94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006f98:	1e13      	subs	r3, r2, #0
 8006f9a:	6822      	ldr	r2, [r4, #0]
 8006f9c:	bf18      	it	ne
 8006f9e:	2301      	movne	r3, #1
 8006fa0:	0692      	lsls	r2, r2, #26
 8006fa2:	d42b      	bmi.n	8006ffc <_printf_common+0xb0>
 8006fa4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006fa8:	4649      	mov	r1, r9
 8006faa:	4638      	mov	r0, r7
 8006fac:	47c0      	blx	r8
 8006fae:	3001      	adds	r0, #1
 8006fb0:	d01e      	beq.n	8006ff0 <_printf_common+0xa4>
 8006fb2:	6823      	ldr	r3, [r4, #0]
 8006fb4:	6922      	ldr	r2, [r4, #16]
 8006fb6:	f003 0306 	and.w	r3, r3, #6
 8006fba:	2b04      	cmp	r3, #4
 8006fbc:	bf02      	ittt	eq
 8006fbe:	68e5      	ldreq	r5, [r4, #12]
 8006fc0:	6833      	ldreq	r3, [r6, #0]
 8006fc2:	1aed      	subeq	r5, r5, r3
 8006fc4:	68a3      	ldr	r3, [r4, #8]
 8006fc6:	bf0c      	ite	eq
 8006fc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006fcc:	2500      	movne	r5, #0
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	bfc4      	itt	gt
 8006fd2:	1a9b      	subgt	r3, r3, r2
 8006fd4:	18ed      	addgt	r5, r5, r3
 8006fd6:	2600      	movs	r6, #0
 8006fd8:	341a      	adds	r4, #26
 8006fda:	42b5      	cmp	r5, r6
 8006fdc:	d11a      	bne.n	8007014 <_printf_common+0xc8>
 8006fde:	2000      	movs	r0, #0
 8006fe0:	e008      	b.n	8006ff4 <_printf_common+0xa8>
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	4652      	mov	r2, sl
 8006fe6:	4649      	mov	r1, r9
 8006fe8:	4638      	mov	r0, r7
 8006fea:	47c0      	blx	r8
 8006fec:	3001      	adds	r0, #1
 8006fee:	d103      	bne.n	8006ff8 <_printf_common+0xac>
 8006ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ff8:	3501      	adds	r5, #1
 8006ffa:	e7c6      	b.n	8006f8a <_printf_common+0x3e>
 8006ffc:	18e1      	adds	r1, r4, r3
 8006ffe:	1c5a      	adds	r2, r3, #1
 8007000:	2030      	movs	r0, #48	; 0x30
 8007002:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007006:	4422      	add	r2, r4
 8007008:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800700c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007010:	3302      	adds	r3, #2
 8007012:	e7c7      	b.n	8006fa4 <_printf_common+0x58>
 8007014:	2301      	movs	r3, #1
 8007016:	4622      	mov	r2, r4
 8007018:	4649      	mov	r1, r9
 800701a:	4638      	mov	r0, r7
 800701c:	47c0      	blx	r8
 800701e:	3001      	adds	r0, #1
 8007020:	d0e6      	beq.n	8006ff0 <_printf_common+0xa4>
 8007022:	3601      	adds	r6, #1
 8007024:	e7d9      	b.n	8006fda <_printf_common+0x8e>
	...

08007028 <_printf_i>:
 8007028:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800702c:	7e0f      	ldrb	r7, [r1, #24]
 800702e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007030:	2f78      	cmp	r7, #120	; 0x78
 8007032:	4691      	mov	r9, r2
 8007034:	4680      	mov	r8, r0
 8007036:	460c      	mov	r4, r1
 8007038:	469a      	mov	sl, r3
 800703a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800703e:	d807      	bhi.n	8007050 <_printf_i+0x28>
 8007040:	2f62      	cmp	r7, #98	; 0x62
 8007042:	d80a      	bhi.n	800705a <_printf_i+0x32>
 8007044:	2f00      	cmp	r7, #0
 8007046:	f000 80d4 	beq.w	80071f2 <_printf_i+0x1ca>
 800704a:	2f58      	cmp	r7, #88	; 0x58
 800704c:	f000 80c0 	beq.w	80071d0 <_printf_i+0x1a8>
 8007050:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007054:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007058:	e03a      	b.n	80070d0 <_printf_i+0xa8>
 800705a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800705e:	2b15      	cmp	r3, #21
 8007060:	d8f6      	bhi.n	8007050 <_printf_i+0x28>
 8007062:	a101      	add	r1, pc, #4	; (adr r1, 8007068 <_printf_i+0x40>)
 8007064:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007068:	080070c1 	.word	0x080070c1
 800706c:	080070d5 	.word	0x080070d5
 8007070:	08007051 	.word	0x08007051
 8007074:	08007051 	.word	0x08007051
 8007078:	08007051 	.word	0x08007051
 800707c:	08007051 	.word	0x08007051
 8007080:	080070d5 	.word	0x080070d5
 8007084:	08007051 	.word	0x08007051
 8007088:	08007051 	.word	0x08007051
 800708c:	08007051 	.word	0x08007051
 8007090:	08007051 	.word	0x08007051
 8007094:	080071d9 	.word	0x080071d9
 8007098:	08007101 	.word	0x08007101
 800709c:	08007193 	.word	0x08007193
 80070a0:	08007051 	.word	0x08007051
 80070a4:	08007051 	.word	0x08007051
 80070a8:	080071fb 	.word	0x080071fb
 80070ac:	08007051 	.word	0x08007051
 80070b0:	08007101 	.word	0x08007101
 80070b4:	08007051 	.word	0x08007051
 80070b8:	08007051 	.word	0x08007051
 80070bc:	0800719b 	.word	0x0800719b
 80070c0:	682b      	ldr	r3, [r5, #0]
 80070c2:	1d1a      	adds	r2, r3, #4
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	602a      	str	r2, [r5, #0]
 80070c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80070cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80070d0:	2301      	movs	r3, #1
 80070d2:	e09f      	b.n	8007214 <_printf_i+0x1ec>
 80070d4:	6820      	ldr	r0, [r4, #0]
 80070d6:	682b      	ldr	r3, [r5, #0]
 80070d8:	0607      	lsls	r7, r0, #24
 80070da:	f103 0104 	add.w	r1, r3, #4
 80070de:	6029      	str	r1, [r5, #0]
 80070e0:	d501      	bpl.n	80070e6 <_printf_i+0xbe>
 80070e2:	681e      	ldr	r6, [r3, #0]
 80070e4:	e003      	b.n	80070ee <_printf_i+0xc6>
 80070e6:	0646      	lsls	r6, r0, #25
 80070e8:	d5fb      	bpl.n	80070e2 <_printf_i+0xba>
 80070ea:	f9b3 6000 	ldrsh.w	r6, [r3]
 80070ee:	2e00      	cmp	r6, #0
 80070f0:	da03      	bge.n	80070fa <_printf_i+0xd2>
 80070f2:	232d      	movs	r3, #45	; 0x2d
 80070f4:	4276      	negs	r6, r6
 80070f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070fa:	485a      	ldr	r0, [pc, #360]	; (8007264 <_printf_i+0x23c>)
 80070fc:	230a      	movs	r3, #10
 80070fe:	e012      	b.n	8007126 <_printf_i+0xfe>
 8007100:	682b      	ldr	r3, [r5, #0]
 8007102:	6820      	ldr	r0, [r4, #0]
 8007104:	1d19      	adds	r1, r3, #4
 8007106:	6029      	str	r1, [r5, #0]
 8007108:	0605      	lsls	r5, r0, #24
 800710a:	d501      	bpl.n	8007110 <_printf_i+0xe8>
 800710c:	681e      	ldr	r6, [r3, #0]
 800710e:	e002      	b.n	8007116 <_printf_i+0xee>
 8007110:	0641      	lsls	r1, r0, #25
 8007112:	d5fb      	bpl.n	800710c <_printf_i+0xe4>
 8007114:	881e      	ldrh	r6, [r3, #0]
 8007116:	4853      	ldr	r0, [pc, #332]	; (8007264 <_printf_i+0x23c>)
 8007118:	2f6f      	cmp	r7, #111	; 0x6f
 800711a:	bf0c      	ite	eq
 800711c:	2308      	moveq	r3, #8
 800711e:	230a      	movne	r3, #10
 8007120:	2100      	movs	r1, #0
 8007122:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007126:	6865      	ldr	r5, [r4, #4]
 8007128:	60a5      	str	r5, [r4, #8]
 800712a:	2d00      	cmp	r5, #0
 800712c:	bfa2      	ittt	ge
 800712e:	6821      	ldrge	r1, [r4, #0]
 8007130:	f021 0104 	bicge.w	r1, r1, #4
 8007134:	6021      	strge	r1, [r4, #0]
 8007136:	b90e      	cbnz	r6, 800713c <_printf_i+0x114>
 8007138:	2d00      	cmp	r5, #0
 800713a:	d04b      	beq.n	80071d4 <_printf_i+0x1ac>
 800713c:	4615      	mov	r5, r2
 800713e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007142:	fb03 6711 	mls	r7, r3, r1, r6
 8007146:	5dc7      	ldrb	r7, [r0, r7]
 8007148:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800714c:	4637      	mov	r7, r6
 800714e:	42bb      	cmp	r3, r7
 8007150:	460e      	mov	r6, r1
 8007152:	d9f4      	bls.n	800713e <_printf_i+0x116>
 8007154:	2b08      	cmp	r3, #8
 8007156:	d10b      	bne.n	8007170 <_printf_i+0x148>
 8007158:	6823      	ldr	r3, [r4, #0]
 800715a:	07de      	lsls	r6, r3, #31
 800715c:	d508      	bpl.n	8007170 <_printf_i+0x148>
 800715e:	6923      	ldr	r3, [r4, #16]
 8007160:	6861      	ldr	r1, [r4, #4]
 8007162:	4299      	cmp	r1, r3
 8007164:	bfde      	ittt	le
 8007166:	2330      	movle	r3, #48	; 0x30
 8007168:	f805 3c01 	strble.w	r3, [r5, #-1]
 800716c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007170:	1b52      	subs	r2, r2, r5
 8007172:	6122      	str	r2, [r4, #16]
 8007174:	f8cd a000 	str.w	sl, [sp]
 8007178:	464b      	mov	r3, r9
 800717a:	aa03      	add	r2, sp, #12
 800717c:	4621      	mov	r1, r4
 800717e:	4640      	mov	r0, r8
 8007180:	f7ff fee4 	bl	8006f4c <_printf_common>
 8007184:	3001      	adds	r0, #1
 8007186:	d14a      	bne.n	800721e <_printf_i+0x1f6>
 8007188:	f04f 30ff 	mov.w	r0, #4294967295
 800718c:	b004      	add	sp, #16
 800718e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007192:	6823      	ldr	r3, [r4, #0]
 8007194:	f043 0320 	orr.w	r3, r3, #32
 8007198:	6023      	str	r3, [r4, #0]
 800719a:	4833      	ldr	r0, [pc, #204]	; (8007268 <_printf_i+0x240>)
 800719c:	2778      	movs	r7, #120	; 0x78
 800719e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80071a2:	6823      	ldr	r3, [r4, #0]
 80071a4:	6829      	ldr	r1, [r5, #0]
 80071a6:	061f      	lsls	r7, r3, #24
 80071a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80071ac:	d402      	bmi.n	80071b4 <_printf_i+0x18c>
 80071ae:	065f      	lsls	r7, r3, #25
 80071b0:	bf48      	it	mi
 80071b2:	b2b6      	uxthmi	r6, r6
 80071b4:	07df      	lsls	r7, r3, #31
 80071b6:	bf48      	it	mi
 80071b8:	f043 0320 	orrmi.w	r3, r3, #32
 80071bc:	6029      	str	r1, [r5, #0]
 80071be:	bf48      	it	mi
 80071c0:	6023      	strmi	r3, [r4, #0]
 80071c2:	b91e      	cbnz	r6, 80071cc <_printf_i+0x1a4>
 80071c4:	6823      	ldr	r3, [r4, #0]
 80071c6:	f023 0320 	bic.w	r3, r3, #32
 80071ca:	6023      	str	r3, [r4, #0]
 80071cc:	2310      	movs	r3, #16
 80071ce:	e7a7      	b.n	8007120 <_printf_i+0xf8>
 80071d0:	4824      	ldr	r0, [pc, #144]	; (8007264 <_printf_i+0x23c>)
 80071d2:	e7e4      	b.n	800719e <_printf_i+0x176>
 80071d4:	4615      	mov	r5, r2
 80071d6:	e7bd      	b.n	8007154 <_printf_i+0x12c>
 80071d8:	682b      	ldr	r3, [r5, #0]
 80071da:	6826      	ldr	r6, [r4, #0]
 80071dc:	6961      	ldr	r1, [r4, #20]
 80071de:	1d18      	adds	r0, r3, #4
 80071e0:	6028      	str	r0, [r5, #0]
 80071e2:	0635      	lsls	r5, r6, #24
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	d501      	bpl.n	80071ec <_printf_i+0x1c4>
 80071e8:	6019      	str	r1, [r3, #0]
 80071ea:	e002      	b.n	80071f2 <_printf_i+0x1ca>
 80071ec:	0670      	lsls	r0, r6, #25
 80071ee:	d5fb      	bpl.n	80071e8 <_printf_i+0x1c0>
 80071f0:	8019      	strh	r1, [r3, #0]
 80071f2:	2300      	movs	r3, #0
 80071f4:	6123      	str	r3, [r4, #16]
 80071f6:	4615      	mov	r5, r2
 80071f8:	e7bc      	b.n	8007174 <_printf_i+0x14c>
 80071fa:	682b      	ldr	r3, [r5, #0]
 80071fc:	1d1a      	adds	r2, r3, #4
 80071fe:	602a      	str	r2, [r5, #0]
 8007200:	681d      	ldr	r5, [r3, #0]
 8007202:	6862      	ldr	r2, [r4, #4]
 8007204:	2100      	movs	r1, #0
 8007206:	4628      	mov	r0, r5
 8007208:	f7f8 ffe2 	bl	80001d0 <memchr>
 800720c:	b108      	cbz	r0, 8007212 <_printf_i+0x1ea>
 800720e:	1b40      	subs	r0, r0, r5
 8007210:	6060      	str	r0, [r4, #4]
 8007212:	6863      	ldr	r3, [r4, #4]
 8007214:	6123      	str	r3, [r4, #16]
 8007216:	2300      	movs	r3, #0
 8007218:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800721c:	e7aa      	b.n	8007174 <_printf_i+0x14c>
 800721e:	6923      	ldr	r3, [r4, #16]
 8007220:	462a      	mov	r2, r5
 8007222:	4649      	mov	r1, r9
 8007224:	4640      	mov	r0, r8
 8007226:	47d0      	blx	sl
 8007228:	3001      	adds	r0, #1
 800722a:	d0ad      	beq.n	8007188 <_printf_i+0x160>
 800722c:	6823      	ldr	r3, [r4, #0]
 800722e:	079b      	lsls	r3, r3, #30
 8007230:	d413      	bmi.n	800725a <_printf_i+0x232>
 8007232:	68e0      	ldr	r0, [r4, #12]
 8007234:	9b03      	ldr	r3, [sp, #12]
 8007236:	4298      	cmp	r0, r3
 8007238:	bfb8      	it	lt
 800723a:	4618      	movlt	r0, r3
 800723c:	e7a6      	b.n	800718c <_printf_i+0x164>
 800723e:	2301      	movs	r3, #1
 8007240:	4632      	mov	r2, r6
 8007242:	4649      	mov	r1, r9
 8007244:	4640      	mov	r0, r8
 8007246:	47d0      	blx	sl
 8007248:	3001      	adds	r0, #1
 800724a:	d09d      	beq.n	8007188 <_printf_i+0x160>
 800724c:	3501      	adds	r5, #1
 800724e:	68e3      	ldr	r3, [r4, #12]
 8007250:	9903      	ldr	r1, [sp, #12]
 8007252:	1a5b      	subs	r3, r3, r1
 8007254:	42ab      	cmp	r3, r5
 8007256:	dcf2      	bgt.n	800723e <_printf_i+0x216>
 8007258:	e7eb      	b.n	8007232 <_printf_i+0x20a>
 800725a:	2500      	movs	r5, #0
 800725c:	f104 0619 	add.w	r6, r4, #25
 8007260:	e7f5      	b.n	800724e <_printf_i+0x226>
 8007262:	bf00      	nop
 8007264:	08009722 	.word	0x08009722
 8007268:	08009733 	.word	0x08009733

0800726c <std>:
 800726c:	2300      	movs	r3, #0
 800726e:	b510      	push	{r4, lr}
 8007270:	4604      	mov	r4, r0
 8007272:	e9c0 3300 	strd	r3, r3, [r0]
 8007276:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800727a:	6083      	str	r3, [r0, #8]
 800727c:	8181      	strh	r1, [r0, #12]
 800727e:	6643      	str	r3, [r0, #100]	; 0x64
 8007280:	81c2      	strh	r2, [r0, #14]
 8007282:	6183      	str	r3, [r0, #24]
 8007284:	4619      	mov	r1, r3
 8007286:	2208      	movs	r2, #8
 8007288:	305c      	adds	r0, #92	; 0x5c
 800728a:	f000 f914 	bl	80074b6 <memset>
 800728e:	4b0d      	ldr	r3, [pc, #52]	; (80072c4 <std+0x58>)
 8007290:	6263      	str	r3, [r4, #36]	; 0x24
 8007292:	4b0d      	ldr	r3, [pc, #52]	; (80072c8 <std+0x5c>)
 8007294:	62a3      	str	r3, [r4, #40]	; 0x28
 8007296:	4b0d      	ldr	r3, [pc, #52]	; (80072cc <std+0x60>)
 8007298:	62e3      	str	r3, [r4, #44]	; 0x2c
 800729a:	4b0d      	ldr	r3, [pc, #52]	; (80072d0 <std+0x64>)
 800729c:	6323      	str	r3, [r4, #48]	; 0x30
 800729e:	4b0d      	ldr	r3, [pc, #52]	; (80072d4 <std+0x68>)
 80072a0:	6224      	str	r4, [r4, #32]
 80072a2:	429c      	cmp	r4, r3
 80072a4:	d006      	beq.n	80072b4 <std+0x48>
 80072a6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80072aa:	4294      	cmp	r4, r2
 80072ac:	d002      	beq.n	80072b4 <std+0x48>
 80072ae:	33d0      	adds	r3, #208	; 0xd0
 80072b0:	429c      	cmp	r4, r3
 80072b2:	d105      	bne.n	80072c0 <std+0x54>
 80072b4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80072b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072bc:	f000 b978 	b.w	80075b0 <__retarget_lock_init_recursive>
 80072c0:	bd10      	pop	{r4, pc}
 80072c2:	bf00      	nop
 80072c4:	08007431 	.word	0x08007431
 80072c8:	08007453 	.word	0x08007453
 80072cc:	0800748b 	.word	0x0800748b
 80072d0:	080074af 	.word	0x080074af
 80072d4:	20000420 	.word	0x20000420

080072d8 <stdio_exit_handler>:
 80072d8:	4a02      	ldr	r2, [pc, #8]	; (80072e4 <stdio_exit_handler+0xc>)
 80072da:	4903      	ldr	r1, [pc, #12]	; (80072e8 <stdio_exit_handler+0x10>)
 80072dc:	4803      	ldr	r0, [pc, #12]	; (80072ec <stdio_exit_handler+0x14>)
 80072de:	f000 b869 	b.w	80073b4 <_fwalk_sglue>
 80072e2:	bf00      	nop
 80072e4:	2000000c 	.word	0x2000000c
 80072e8:	08008f61 	.word	0x08008f61
 80072ec:	20000018 	.word	0x20000018

080072f0 <cleanup_stdio>:
 80072f0:	6841      	ldr	r1, [r0, #4]
 80072f2:	4b0c      	ldr	r3, [pc, #48]	; (8007324 <cleanup_stdio+0x34>)
 80072f4:	4299      	cmp	r1, r3
 80072f6:	b510      	push	{r4, lr}
 80072f8:	4604      	mov	r4, r0
 80072fa:	d001      	beq.n	8007300 <cleanup_stdio+0x10>
 80072fc:	f001 fe30 	bl	8008f60 <_fflush_r>
 8007300:	68a1      	ldr	r1, [r4, #8]
 8007302:	4b09      	ldr	r3, [pc, #36]	; (8007328 <cleanup_stdio+0x38>)
 8007304:	4299      	cmp	r1, r3
 8007306:	d002      	beq.n	800730e <cleanup_stdio+0x1e>
 8007308:	4620      	mov	r0, r4
 800730a:	f001 fe29 	bl	8008f60 <_fflush_r>
 800730e:	68e1      	ldr	r1, [r4, #12]
 8007310:	4b06      	ldr	r3, [pc, #24]	; (800732c <cleanup_stdio+0x3c>)
 8007312:	4299      	cmp	r1, r3
 8007314:	d004      	beq.n	8007320 <cleanup_stdio+0x30>
 8007316:	4620      	mov	r0, r4
 8007318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800731c:	f001 be20 	b.w	8008f60 <_fflush_r>
 8007320:	bd10      	pop	{r4, pc}
 8007322:	bf00      	nop
 8007324:	20000420 	.word	0x20000420
 8007328:	20000488 	.word	0x20000488
 800732c:	200004f0 	.word	0x200004f0

08007330 <global_stdio_init.part.0>:
 8007330:	b510      	push	{r4, lr}
 8007332:	4b0b      	ldr	r3, [pc, #44]	; (8007360 <global_stdio_init.part.0+0x30>)
 8007334:	4c0b      	ldr	r4, [pc, #44]	; (8007364 <global_stdio_init.part.0+0x34>)
 8007336:	4a0c      	ldr	r2, [pc, #48]	; (8007368 <global_stdio_init.part.0+0x38>)
 8007338:	601a      	str	r2, [r3, #0]
 800733a:	4620      	mov	r0, r4
 800733c:	2200      	movs	r2, #0
 800733e:	2104      	movs	r1, #4
 8007340:	f7ff ff94 	bl	800726c <std>
 8007344:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007348:	2201      	movs	r2, #1
 800734a:	2109      	movs	r1, #9
 800734c:	f7ff ff8e 	bl	800726c <std>
 8007350:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007354:	2202      	movs	r2, #2
 8007356:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800735a:	2112      	movs	r1, #18
 800735c:	f7ff bf86 	b.w	800726c <std>
 8007360:	20000558 	.word	0x20000558
 8007364:	20000420 	.word	0x20000420
 8007368:	080072d9 	.word	0x080072d9

0800736c <__sfp_lock_acquire>:
 800736c:	4801      	ldr	r0, [pc, #4]	; (8007374 <__sfp_lock_acquire+0x8>)
 800736e:	f000 b920 	b.w	80075b2 <__retarget_lock_acquire_recursive>
 8007372:	bf00      	nop
 8007374:	20000561 	.word	0x20000561

08007378 <__sfp_lock_release>:
 8007378:	4801      	ldr	r0, [pc, #4]	; (8007380 <__sfp_lock_release+0x8>)
 800737a:	f000 b91b 	b.w	80075b4 <__retarget_lock_release_recursive>
 800737e:	bf00      	nop
 8007380:	20000561 	.word	0x20000561

08007384 <__sinit>:
 8007384:	b510      	push	{r4, lr}
 8007386:	4604      	mov	r4, r0
 8007388:	f7ff fff0 	bl	800736c <__sfp_lock_acquire>
 800738c:	6a23      	ldr	r3, [r4, #32]
 800738e:	b11b      	cbz	r3, 8007398 <__sinit+0x14>
 8007390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007394:	f7ff bff0 	b.w	8007378 <__sfp_lock_release>
 8007398:	4b04      	ldr	r3, [pc, #16]	; (80073ac <__sinit+0x28>)
 800739a:	6223      	str	r3, [r4, #32]
 800739c:	4b04      	ldr	r3, [pc, #16]	; (80073b0 <__sinit+0x2c>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d1f5      	bne.n	8007390 <__sinit+0xc>
 80073a4:	f7ff ffc4 	bl	8007330 <global_stdio_init.part.0>
 80073a8:	e7f2      	b.n	8007390 <__sinit+0xc>
 80073aa:	bf00      	nop
 80073ac:	080072f1 	.word	0x080072f1
 80073b0:	20000558 	.word	0x20000558

080073b4 <_fwalk_sglue>:
 80073b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073b8:	4607      	mov	r7, r0
 80073ba:	4688      	mov	r8, r1
 80073bc:	4614      	mov	r4, r2
 80073be:	2600      	movs	r6, #0
 80073c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80073c4:	f1b9 0901 	subs.w	r9, r9, #1
 80073c8:	d505      	bpl.n	80073d6 <_fwalk_sglue+0x22>
 80073ca:	6824      	ldr	r4, [r4, #0]
 80073cc:	2c00      	cmp	r4, #0
 80073ce:	d1f7      	bne.n	80073c0 <_fwalk_sglue+0xc>
 80073d0:	4630      	mov	r0, r6
 80073d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073d6:	89ab      	ldrh	r3, [r5, #12]
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d907      	bls.n	80073ec <_fwalk_sglue+0x38>
 80073dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80073e0:	3301      	adds	r3, #1
 80073e2:	d003      	beq.n	80073ec <_fwalk_sglue+0x38>
 80073e4:	4629      	mov	r1, r5
 80073e6:	4638      	mov	r0, r7
 80073e8:	47c0      	blx	r8
 80073ea:	4306      	orrs	r6, r0
 80073ec:	3568      	adds	r5, #104	; 0x68
 80073ee:	e7e9      	b.n	80073c4 <_fwalk_sglue+0x10>

080073f0 <siprintf>:
 80073f0:	b40e      	push	{r1, r2, r3}
 80073f2:	b500      	push	{lr}
 80073f4:	b09c      	sub	sp, #112	; 0x70
 80073f6:	ab1d      	add	r3, sp, #116	; 0x74
 80073f8:	9002      	str	r0, [sp, #8]
 80073fa:	9006      	str	r0, [sp, #24]
 80073fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007400:	4809      	ldr	r0, [pc, #36]	; (8007428 <siprintf+0x38>)
 8007402:	9107      	str	r1, [sp, #28]
 8007404:	9104      	str	r1, [sp, #16]
 8007406:	4909      	ldr	r1, [pc, #36]	; (800742c <siprintf+0x3c>)
 8007408:	f853 2b04 	ldr.w	r2, [r3], #4
 800740c:	9105      	str	r1, [sp, #20]
 800740e:	6800      	ldr	r0, [r0, #0]
 8007410:	9301      	str	r3, [sp, #4]
 8007412:	a902      	add	r1, sp, #8
 8007414:	f001 fc20 	bl	8008c58 <_svfiprintf_r>
 8007418:	9b02      	ldr	r3, [sp, #8]
 800741a:	2200      	movs	r2, #0
 800741c:	701a      	strb	r2, [r3, #0]
 800741e:	b01c      	add	sp, #112	; 0x70
 8007420:	f85d eb04 	ldr.w	lr, [sp], #4
 8007424:	b003      	add	sp, #12
 8007426:	4770      	bx	lr
 8007428:	20000064 	.word	0x20000064
 800742c:	ffff0208 	.word	0xffff0208

08007430 <__sread>:
 8007430:	b510      	push	{r4, lr}
 8007432:	460c      	mov	r4, r1
 8007434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007438:	f000 f86c 	bl	8007514 <_read_r>
 800743c:	2800      	cmp	r0, #0
 800743e:	bfab      	itete	ge
 8007440:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007442:	89a3      	ldrhlt	r3, [r4, #12]
 8007444:	181b      	addge	r3, r3, r0
 8007446:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800744a:	bfac      	ite	ge
 800744c:	6563      	strge	r3, [r4, #84]	; 0x54
 800744e:	81a3      	strhlt	r3, [r4, #12]
 8007450:	bd10      	pop	{r4, pc}

08007452 <__swrite>:
 8007452:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007456:	461f      	mov	r7, r3
 8007458:	898b      	ldrh	r3, [r1, #12]
 800745a:	05db      	lsls	r3, r3, #23
 800745c:	4605      	mov	r5, r0
 800745e:	460c      	mov	r4, r1
 8007460:	4616      	mov	r6, r2
 8007462:	d505      	bpl.n	8007470 <__swrite+0x1e>
 8007464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007468:	2302      	movs	r3, #2
 800746a:	2200      	movs	r2, #0
 800746c:	f000 f840 	bl	80074f0 <_lseek_r>
 8007470:	89a3      	ldrh	r3, [r4, #12]
 8007472:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007476:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800747a:	81a3      	strh	r3, [r4, #12]
 800747c:	4632      	mov	r2, r6
 800747e:	463b      	mov	r3, r7
 8007480:	4628      	mov	r0, r5
 8007482:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007486:	f000 b857 	b.w	8007538 <_write_r>

0800748a <__sseek>:
 800748a:	b510      	push	{r4, lr}
 800748c:	460c      	mov	r4, r1
 800748e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007492:	f000 f82d 	bl	80074f0 <_lseek_r>
 8007496:	1c43      	adds	r3, r0, #1
 8007498:	89a3      	ldrh	r3, [r4, #12]
 800749a:	bf15      	itete	ne
 800749c:	6560      	strne	r0, [r4, #84]	; 0x54
 800749e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80074a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80074a6:	81a3      	strheq	r3, [r4, #12]
 80074a8:	bf18      	it	ne
 80074aa:	81a3      	strhne	r3, [r4, #12]
 80074ac:	bd10      	pop	{r4, pc}

080074ae <__sclose>:
 80074ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074b2:	f000 b80d 	b.w	80074d0 <_close_r>

080074b6 <memset>:
 80074b6:	4402      	add	r2, r0
 80074b8:	4603      	mov	r3, r0
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d100      	bne.n	80074c0 <memset+0xa>
 80074be:	4770      	bx	lr
 80074c0:	f803 1b01 	strb.w	r1, [r3], #1
 80074c4:	e7f9      	b.n	80074ba <memset+0x4>
	...

080074c8 <_localeconv_r>:
 80074c8:	4800      	ldr	r0, [pc, #0]	; (80074cc <_localeconv_r+0x4>)
 80074ca:	4770      	bx	lr
 80074cc:	20000158 	.word	0x20000158

080074d0 <_close_r>:
 80074d0:	b538      	push	{r3, r4, r5, lr}
 80074d2:	4d06      	ldr	r5, [pc, #24]	; (80074ec <_close_r+0x1c>)
 80074d4:	2300      	movs	r3, #0
 80074d6:	4604      	mov	r4, r0
 80074d8:	4608      	mov	r0, r1
 80074da:	602b      	str	r3, [r5, #0]
 80074dc:	f7ff f9b9 	bl	8006852 <_close>
 80074e0:	1c43      	adds	r3, r0, #1
 80074e2:	d102      	bne.n	80074ea <_close_r+0x1a>
 80074e4:	682b      	ldr	r3, [r5, #0]
 80074e6:	b103      	cbz	r3, 80074ea <_close_r+0x1a>
 80074e8:	6023      	str	r3, [r4, #0]
 80074ea:	bd38      	pop	{r3, r4, r5, pc}
 80074ec:	2000055c 	.word	0x2000055c

080074f0 <_lseek_r>:
 80074f0:	b538      	push	{r3, r4, r5, lr}
 80074f2:	4d07      	ldr	r5, [pc, #28]	; (8007510 <_lseek_r+0x20>)
 80074f4:	4604      	mov	r4, r0
 80074f6:	4608      	mov	r0, r1
 80074f8:	4611      	mov	r1, r2
 80074fa:	2200      	movs	r2, #0
 80074fc:	602a      	str	r2, [r5, #0]
 80074fe:	461a      	mov	r2, r3
 8007500:	f7ff f9ce 	bl	80068a0 <_lseek>
 8007504:	1c43      	adds	r3, r0, #1
 8007506:	d102      	bne.n	800750e <_lseek_r+0x1e>
 8007508:	682b      	ldr	r3, [r5, #0]
 800750a:	b103      	cbz	r3, 800750e <_lseek_r+0x1e>
 800750c:	6023      	str	r3, [r4, #0]
 800750e:	bd38      	pop	{r3, r4, r5, pc}
 8007510:	2000055c 	.word	0x2000055c

08007514 <_read_r>:
 8007514:	b538      	push	{r3, r4, r5, lr}
 8007516:	4d07      	ldr	r5, [pc, #28]	; (8007534 <_read_r+0x20>)
 8007518:	4604      	mov	r4, r0
 800751a:	4608      	mov	r0, r1
 800751c:	4611      	mov	r1, r2
 800751e:	2200      	movs	r2, #0
 8007520:	602a      	str	r2, [r5, #0]
 8007522:	461a      	mov	r2, r3
 8007524:	f7ff f95c 	bl	80067e0 <_read>
 8007528:	1c43      	adds	r3, r0, #1
 800752a:	d102      	bne.n	8007532 <_read_r+0x1e>
 800752c:	682b      	ldr	r3, [r5, #0]
 800752e:	b103      	cbz	r3, 8007532 <_read_r+0x1e>
 8007530:	6023      	str	r3, [r4, #0]
 8007532:	bd38      	pop	{r3, r4, r5, pc}
 8007534:	2000055c 	.word	0x2000055c

08007538 <_write_r>:
 8007538:	b538      	push	{r3, r4, r5, lr}
 800753a:	4d07      	ldr	r5, [pc, #28]	; (8007558 <_write_r+0x20>)
 800753c:	4604      	mov	r4, r0
 800753e:	4608      	mov	r0, r1
 8007540:	4611      	mov	r1, r2
 8007542:	2200      	movs	r2, #0
 8007544:	602a      	str	r2, [r5, #0]
 8007546:	461a      	mov	r2, r3
 8007548:	f7ff f967 	bl	800681a <_write>
 800754c:	1c43      	adds	r3, r0, #1
 800754e:	d102      	bne.n	8007556 <_write_r+0x1e>
 8007550:	682b      	ldr	r3, [r5, #0]
 8007552:	b103      	cbz	r3, 8007556 <_write_r+0x1e>
 8007554:	6023      	str	r3, [r4, #0]
 8007556:	bd38      	pop	{r3, r4, r5, pc}
 8007558:	2000055c 	.word	0x2000055c

0800755c <__errno>:
 800755c:	4b01      	ldr	r3, [pc, #4]	; (8007564 <__errno+0x8>)
 800755e:	6818      	ldr	r0, [r3, #0]
 8007560:	4770      	bx	lr
 8007562:	bf00      	nop
 8007564:	20000064 	.word	0x20000064

08007568 <__libc_init_array>:
 8007568:	b570      	push	{r4, r5, r6, lr}
 800756a:	4d0d      	ldr	r5, [pc, #52]	; (80075a0 <__libc_init_array+0x38>)
 800756c:	4c0d      	ldr	r4, [pc, #52]	; (80075a4 <__libc_init_array+0x3c>)
 800756e:	1b64      	subs	r4, r4, r5
 8007570:	10a4      	asrs	r4, r4, #2
 8007572:	2600      	movs	r6, #0
 8007574:	42a6      	cmp	r6, r4
 8007576:	d109      	bne.n	800758c <__libc_init_array+0x24>
 8007578:	4d0b      	ldr	r5, [pc, #44]	; (80075a8 <__libc_init_array+0x40>)
 800757a:	4c0c      	ldr	r4, [pc, #48]	; (80075ac <__libc_init_array+0x44>)
 800757c:	f002 f894 	bl	80096a8 <_init>
 8007580:	1b64      	subs	r4, r4, r5
 8007582:	10a4      	asrs	r4, r4, #2
 8007584:	2600      	movs	r6, #0
 8007586:	42a6      	cmp	r6, r4
 8007588:	d105      	bne.n	8007596 <__libc_init_array+0x2e>
 800758a:	bd70      	pop	{r4, r5, r6, pc}
 800758c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007590:	4798      	blx	r3
 8007592:	3601      	adds	r6, #1
 8007594:	e7ee      	b.n	8007574 <__libc_init_array+0xc>
 8007596:	f855 3b04 	ldr.w	r3, [r5], #4
 800759a:	4798      	blx	r3
 800759c:	3601      	adds	r6, #1
 800759e:	e7f2      	b.n	8007586 <__libc_init_array+0x1e>
 80075a0:	08009a8c 	.word	0x08009a8c
 80075a4:	08009a8c 	.word	0x08009a8c
 80075a8:	08009a8c 	.word	0x08009a8c
 80075ac:	08009a90 	.word	0x08009a90

080075b0 <__retarget_lock_init_recursive>:
 80075b0:	4770      	bx	lr

080075b2 <__retarget_lock_acquire_recursive>:
 80075b2:	4770      	bx	lr

080075b4 <__retarget_lock_release_recursive>:
 80075b4:	4770      	bx	lr

080075b6 <quorem>:
 80075b6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075ba:	6903      	ldr	r3, [r0, #16]
 80075bc:	690c      	ldr	r4, [r1, #16]
 80075be:	42a3      	cmp	r3, r4
 80075c0:	4607      	mov	r7, r0
 80075c2:	db7e      	blt.n	80076c2 <quorem+0x10c>
 80075c4:	3c01      	subs	r4, #1
 80075c6:	f101 0814 	add.w	r8, r1, #20
 80075ca:	f100 0514 	add.w	r5, r0, #20
 80075ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80075d2:	9301      	str	r3, [sp, #4]
 80075d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80075d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80075dc:	3301      	adds	r3, #1
 80075de:	429a      	cmp	r2, r3
 80075e0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80075e4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80075e8:	fbb2 f6f3 	udiv	r6, r2, r3
 80075ec:	d331      	bcc.n	8007652 <quorem+0x9c>
 80075ee:	f04f 0e00 	mov.w	lr, #0
 80075f2:	4640      	mov	r0, r8
 80075f4:	46ac      	mov	ip, r5
 80075f6:	46f2      	mov	sl, lr
 80075f8:	f850 2b04 	ldr.w	r2, [r0], #4
 80075fc:	b293      	uxth	r3, r2
 80075fe:	fb06 e303 	mla	r3, r6, r3, lr
 8007602:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007606:	0c1a      	lsrs	r2, r3, #16
 8007608:	b29b      	uxth	r3, r3
 800760a:	ebaa 0303 	sub.w	r3, sl, r3
 800760e:	f8dc a000 	ldr.w	sl, [ip]
 8007612:	fa13 f38a 	uxtah	r3, r3, sl
 8007616:	fb06 220e 	mla	r2, r6, lr, r2
 800761a:	9300      	str	r3, [sp, #0]
 800761c:	9b00      	ldr	r3, [sp, #0]
 800761e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007622:	b292      	uxth	r2, r2
 8007624:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007628:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800762c:	f8bd 3000 	ldrh.w	r3, [sp]
 8007630:	4581      	cmp	r9, r0
 8007632:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007636:	f84c 3b04 	str.w	r3, [ip], #4
 800763a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800763e:	d2db      	bcs.n	80075f8 <quorem+0x42>
 8007640:	f855 300b 	ldr.w	r3, [r5, fp]
 8007644:	b92b      	cbnz	r3, 8007652 <quorem+0x9c>
 8007646:	9b01      	ldr	r3, [sp, #4]
 8007648:	3b04      	subs	r3, #4
 800764a:	429d      	cmp	r5, r3
 800764c:	461a      	mov	r2, r3
 800764e:	d32c      	bcc.n	80076aa <quorem+0xf4>
 8007650:	613c      	str	r4, [r7, #16]
 8007652:	4638      	mov	r0, r7
 8007654:	f001 f9a6 	bl	80089a4 <__mcmp>
 8007658:	2800      	cmp	r0, #0
 800765a:	db22      	blt.n	80076a2 <quorem+0xec>
 800765c:	3601      	adds	r6, #1
 800765e:	4629      	mov	r1, r5
 8007660:	2000      	movs	r0, #0
 8007662:	f858 2b04 	ldr.w	r2, [r8], #4
 8007666:	f8d1 c000 	ldr.w	ip, [r1]
 800766a:	b293      	uxth	r3, r2
 800766c:	1ac3      	subs	r3, r0, r3
 800766e:	0c12      	lsrs	r2, r2, #16
 8007670:	fa13 f38c 	uxtah	r3, r3, ip
 8007674:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007678:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800767c:	b29b      	uxth	r3, r3
 800767e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007682:	45c1      	cmp	r9, r8
 8007684:	f841 3b04 	str.w	r3, [r1], #4
 8007688:	ea4f 4022 	mov.w	r0, r2, asr #16
 800768c:	d2e9      	bcs.n	8007662 <quorem+0xac>
 800768e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007692:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007696:	b922      	cbnz	r2, 80076a2 <quorem+0xec>
 8007698:	3b04      	subs	r3, #4
 800769a:	429d      	cmp	r5, r3
 800769c:	461a      	mov	r2, r3
 800769e:	d30a      	bcc.n	80076b6 <quorem+0x100>
 80076a0:	613c      	str	r4, [r7, #16]
 80076a2:	4630      	mov	r0, r6
 80076a4:	b003      	add	sp, #12
 80076a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076aa:	6812      	ldr	r2, [r2, #0]
 80076ac:	3b04      	subs	r3, #4
 80076ae:	2a00      	cmp	r2, #0
 80076b0:	d1ce      	bne.n	8007650 <quorem+0x9a>
 80076b2:	3c01      	subs	r4, #1
 80076b4:	e7c9      	b.n	800764a <quorem+0x94>
 80076b6:	6812      	ldr	r2, [r2, #0]
 80076b8:	3b04      	subs	r3, #4
 80076ba:	2a00      	cmp	r2, #0
 80076bc:	d1f0      	bne.n	80076a0 <quorem+0xea>
 80076be:	3c01      	subs	r4, #1
 80076c0:	e7eb      	b.n	800769a <quorem+0xe4>
 80076c2:	2000      	movs	r0, #0
 80076c4:	e7ee      	b.n	80076a4 <quorem+0xee>
	...

080076c8 <_dtoa_r>:
 80076c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076cc:	ed2d 8b04 	vpush	{d8-d9}
 80076d0:	69c5      	ldr	r5, [r0, #28]
 80076d2:	b093      	sub	sp, #76	; 0x4c
 80076d4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80076d8:	ec57 6b10 	vmov	r6, r7, d0
 80076dc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80076e0:	9107      	str	r1, [sp, #28]
 80076e2:	4604      	mov	r4, r0
 80076e4:	920a      	str	r2, [sp, #40]	; 0x28
 80076e6:	930d      	str	r3, [sp, #52]	; 0x34
 80076e8:	b975      	cbnz	r5, 8007708 <_dtoa_r+0x40>
 80076ea:	2010      	movs	r0, #16
 80076ec:	f000 fe2a 	bl	8008344 <malloc>
 80076f0:	4602      	mov	r2, r0
 80076f2:	61e0      	str	r0, [r4, #28]
 80076f4:	b920      	cbnz	r0, 8007700 <_dtoa_r+0x38>
 80076f6:	4bae      	ldr	r3, [pc, #696]	; (80079b0 <_dtoa_r+0x2e8>)
 80076f8:	21ef      	movs	r1, #239	; 0xef
 80076fa:	48ae      	ldr	r0, [pc, #696]	; (80079b4 <_dtoa_r+0x2ec>)
 80076fc:	f001 fc90 	bl	8009020 <__assert_func>
 8007700:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007704:	6005      	str	r5, [r0, #0]
 8007706:	60c5      	str	r5, [r0, #12]
 8007708:	69e3      	ldr	r3, [r4, #28]
 800770a:	6819      	ldr	r1, [r3, #0]
 800770c:	b151      	cbz	r1, 8007724 <_dtoa_r+0x5c>
 800770e:	685a      	ldr	r2, [r3, #4]
 8007710:	604a      	str	r2, [r1, #4]
 8007712:	2301      	movs	r3, #1
 8007714:	4093      	lsls	r3, r2
 8007716:	608b      	str	r3, [r1, #8]
 8007718:	4620      	mov	r0, r4
 800771a:	f000 ff07 	bl	800852c <_Bfree>
 800771e:	69e3      	ldr	r3, [r4, #28]
 8007720:	2200      	movs	r2, #0
 8007722:	601a      	str	r2, [r3, #0]
 8007724:	1e3b      	subs	r3, r7, #0
 8007726:	bfbb      	ittet	lt
 8007728:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800772c:	9303      	strlt	r3, [sp, #12]
 800772e:	2300      	movge	r3, #0
 8007730:	2201      	movlt	r2, #1
 8007732:	bfac      	ite	ge
 8007734:	f8c8 3000 	strge.w	r3, [r8]
 8007738:	f8c8 2000 	strlt.w	r2, [r8]
 800773c:	4b9e      	ldr	r3, [pc, #632]	; (80079b8 <_dtoa_r+0x2f0>)
 800773e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007742:	ea33 0308 	bics.w	r3, r3, r8
 8007746:	d11b      	bne.n	8007780 <_dtoa_r+0xb8>
 8007748:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800774a:	f242 730f 	movw	r3, #9999	; 0x270f
 800774e:	6013      	str	r3, [r2, #0]
 8007750:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007754:	4333      	orrs	r3, r6
 8007756:	f000 8593 	beq.w	8008280 <_dtoa_r+0xbb8>
 800775a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800775c:	b963      	cbnz	r3, 8007778 <_dtoa_r+0xb0>
 800775e:	4b97      	ldr	r3, [pc, #604]	; (80079bc <_dtoa_r+0x2f4>)
 8007760:	e027      	b.n	80077b2 <_dtoa_r+0xea>
 8007762:	4b97      	ldr	r3, [pc, #604]	; (80079c0 <_dtoa_r+0x2f8>)
 8007764:	9300      	str	r3, [sp, #0]
 8007766:	3308      	adds	r3, #8
 8007768:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800776a:	6013      	str	r3, [r2, #0]
 800776c:	9800      	ldr	r0, [sp, #0]
 800776e:	b013      	add	sp, #76	; 0x4c
 8007770:	ecbd 8b04 	vpop	{d8-d9}
 8007774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007778:	4b90      	ldr	r3, [pc, #576]	; (80079bc <_dtoa_r+0x2f4>)
 800777a:	9300      	str	r3, [sp, #0]
 800777c:	3303      	adds	r3, #3
 800777e:	e7f3      	b.n	8007768 <_dtoa_r+0xa0>
 8007780:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007784:	2200      	movs	r2, #0
 8007786:	ec51 0b17 	vmov	r0, r1, d7
 800778a:	eeb0 8a47 	vmov.f32	s16, s14
 800778e:	eef0 8a67 	vmov.f32	s17, s15
 8007792:	2300      	movs	r3, #0
 8007794:	f7f9 f998 	bl	8000ac8 <__aeabi_dcmpeq>
 8007798:	4681      	mov	r9, r0
 800779a:	b160      	cbz	r0, 80077b6 <_dtoa_r+0xee>
 800779c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800779e:	2301      	movs	r3, #1
 80077a0:	6013      	str	r3, [r2, #0]
 80077a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	f000 8568 	beq.w	800827a <_dtoa_r+0xbb2>
 80077aa:	4b86      	ldr	r3, [pc, #536]	; (80079c4 <_dtoa_r+0x2fc>)
 80077ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80077ae:	6013      	str	r3, [r2, #0]
 80077b0:	3b01      	subs	r3, #1
 80077b2:	9300      	str	r3, [sp, #0]
 80077b4:	e7da      	b.n	800776c <_dtoa_r+0xa4>
 80077b6:	aa10      	add	r2, sp, #64	; 0x40
 80077b8:	a911      	add	r1, sp, #68	; 0x44
 80077ba:	4620      	mov	r0, r4
 80077bc:	eeb0 0a48 	vmov.f32	s0, s16
 80077c0:	eef0 0a68 	vmov.f32	s1, s17
 80077c4:	f001 f994 	bl	8008af0 <__d2b>
 80077c8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80077cc:	4682      	mov	sl, r0
 80077ce:	2d00      	cmp	r5, #0
 80077d0:	d07f      	beq.n	80078d2 <_dtoa_r+0x20a>
 80077d2:	ee18 3a90 	vmov	r3, s17
 80077d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80077da:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80077de:	ec51 0b18 	vmov	r0, r1, d8
 80077e2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80077e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80077ea:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80077ee:	4619      	mov	r1, r3
 80077f0:	2200      	movs	r2, #0
 80077f2:	4b75      	ldr	r3, [pc, #468]	; (80079c8 <_dtoa_r+0x300>)
 80077f4:	f7f8 fd48 	bl	8000288 <__aeabi_dsub>
 80077f8:	a367      	add	r3, pc, #412	; (adr r3, 8007998 <_dtoa_r+0x2d0>)
 80077fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077fe:	f7f8 fefb 	bl	80005f8 <__aeabi_dmul>
 8007802:	a367      	add	r3, pc, #412	; (adr r3, 80079a0 <_dtoa_r+0x2d8>)
 8007804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007808:	f7f8 fd40 	bl	800028c <__adddf3>
 800780c:	4606      	mov	r6, r0
 800780e:	4628      	mov	r0, r5
 8007810:	460f      	mov	r7, r1
 8007812:	f7f8 fe87 	bl	8000524 <__aeabi_i2d>
 8007816:	a364      	add	r3, pc, #400	; (adr r3, 80079a8 <_dtoa_r+0x2e0>)
 8007818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800781c:	f7f8 feec 	bl	80005f8 <__aeabi_dmul>
 8007820:	4602      	mov	r2, r0
 8007822:	460b      	mov	r3, r1
 8007824:	4630      	mov	r0, r6
 8007826:	4639      	mov	r1, r7
 8007828:	f7f8 fd30 	bl	800028c <__adddf3>
 800782c:	4606      	mov	r6, r0
 800782e:	460f      	mov	r7, r1
 8007830:	f7f9 f992 	bl	8000b58 <__aeabi_d2iz>
 8007834:	2200      	movs	r2, #0
 8007836:	4683      	mov	fp, r0
 8007838:	2300      	movs	r3, #0
 800783a:	4630      	mov	r0, r6
 800783c:	4639      	mov	r1, r7
 800783e:	f7f9 f94d 	bl	8000adc <__aeabi_dcmplt>
 8007842:	b148      	cbz	r0, 8007858 <_dtoa_r+0x190>
 8007844:	4658      	mov	r0, fp
 8007846:	f7f8 fe6d 	bl	8000524 <__aeabi_i2d>
 800784a:	4632      	mov	r2, r6
 800784c:	463b      	mov	r3, r7
 800784e:	f7f9 f93b 	bl	8000ac8 <__aeabi_dcmpeq>
 8007852:	b908      	cbnz	r0, 8007858 <_dtoa_r+0x190>
 8007854:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007858:	f1bb 0f16 	cmp.w	fp, #22
 800785c:	d857      	bhi.n	800790e <_dtoa_r+0x246>
 800785e:	4b5b      	ldr	r3, [pc, #364]	; (80079cc <_dtoa_r+0x304>)
 8007860:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007868:	ec51 0b18 	vmov	r0, r1, d8
 800786c:	f7f9 f936 	bl	8000adc <__aeabi_dcmplt>
 8007870:	2800      	cmp	r0, #0
 8007872:	d04e      	beq.n	8007912 <_dtoa_r+0x24a>
 8007874:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007878:	2300      	movs	r3, #0
 800787a:	930c      	str	r3, [sp, #48]	; 0x30
 800787c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800787e:	1b5b      	subs	r3, r3, r5
 8007880:	1e5a      	subs	r2, r3, #1
 8007882:	bf45      	ittet	mi
 8007884:	f1c3 0301 	rsbmi	r3, r3, #1
 8007888:	9305      	strmi	r3, [sp, #20]
 800788a:	2300      	movpl	r3, #0
 800788c:	2300      	movmi	r3, #0
 800788e:	9206      	str	r2, [sp, #24]
 8007890:	bf54      	ite	pl
 8007892:	9305      	strpl	r3, [sp, #20]
 8007894:	9306      	strmi	r3, [sp, #24]
 8007896:	f1bb 0f00 	cmp.w	fp, #0
 800789a:	db3c      	blt.n	8007916 <_dtoa_r+0x24e>
 800789c:	9b06      	ldr	r3, [sp, #24]
 800789e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80078a2:	445b      	add	r3, fp
 80078a4:	9306      	str	r3, [sp, #24]
 80078a6:	2300      	movs	r3, #0
 80078a8:	9308      	str	r3, [sp, #32]
 80078aa:	9b07      	ldr	r3, [sp, #28]
 80078ac:	2b09      	cmp	r3, #9
 80078ae:	d868      	bhi.n	8007982 <_dtoa_r+0x2ba>
 80078b0:	2b05      	cmp	r3, #5
 80078b2:	bfc4      	itt	gt
 80078b4:	3b04      	subgt	r3, #4
 80078b6:	9307      	strgt	r3, [sp, #28]
 80078b8:	9b07      	ldr	r3, [sp, #28]
 80078ba:	f1a3 0302 	sub.w	r3, r3, #2
 80078be:	bfcc      	ite	gt
 80078c0:	2500      	movgt	r5, #0
 80078c2:	2501      	movle	r5, #1
 80078c4:	2b03      	cmp	r3, #3
 80078c6:	f200 8085 	bhi.w	80079d4 <_dtoa_r+0x30c>
 80078ca:	e8df f003 	tbb	[pc, r3]
 80078ce:	3b2e      	.short	0x3b2e
 80078d0:	5839      	.short	0x5839
 80078d2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80078d6:	441d      	add	r5, r3
 80078d8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80078dc:	2b20      	cmp	r3, #32
 80078de:	bfc1      	itttt	gt
 80078e0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80078e4:	fa08 f803 	lslgt.w	r8, r8, r3
 80078e8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80078ec:	fa26 f303 	lsrgt.w	r3, r6, r3
 80078f0:	bfd6      	itet	le
 80078f2:	f1c3 0320 	rsble	r3, r3, #32
 80078f6:	ea48 0003 	orrgt.w	r0, r8, r3
 80078fa:	fa06 f003 	lslle.w	r0, r6, r3
 80078fe:	f7f8 fe01 	bl	8000504 <__aeabi_ui2d>
 8007902:	2201      	movs	r2, #1
 8007904:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007908:	3d01      	subs	r5, #1
 800790a:	920e      	str	r2, [sp, #56]	; 0x38
 800790c:	e76f      	b.n	80077ee <_dtoa_r+0x126>
 800790e:	2301      	movs	r3, #1
 8007910:	e7b3      	b.n	800787a <_dtoa_r+0x1b2>
 8007912:	900c      	str	r0, [sp, #48]	; 0x30
 8007914:	e7b2      	b.n	800787c <_dtoa_r+0x1b4>
 8007916:	9b05      	ldr	r3, [sp, #20]
 8007918:	eba3 030b 	sub.w	r3, r3, fp
 800791c:	9305      	str	r3, [sp, #20]
 800791e:	f1cb 0300 	rsb	r3, fp, #0
 8007922:	9308      	str	r3, [sp, #32]
 8007924:	2300      	movs	r3, #0
 8007926:	930b      	str	r3, [sp, #44]	; 0x2c
 8007928:	e7bf      	b.n	80078aa <_dtoa_r+0x1e2>
 800792a:	2300      	movs	r3, #0
 800792c:	9309      	str	r3, [sp, #36]	; 0x24
 800792e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007930:	2b00      	cmp	r3, #0
 8007932:	dc52      	bgt.n	80079da <_dtoa_r+0x312>
 8007934:	2301      	movs	r3, #1
 8007936:	9301      	str	r3, [sp, #4]
 8007938:	9304      	str	r3, [sp, #16]
 800793a:	461a      	mov	r2, r3
 800793c:	920a      	str	r2, [sp, #40]	; 0x28
 800793e:	e00b      	b.n	8007958 <_dtoa_r+0x290>
 8007940:	2301      	movs	r3, #1
 8007942:	e7f3      	b.n	800792c <_dtoa_r+0x264>
 8007944:	2300      	movs	r3, #0
 8007946:	9309      	str	r3, [sp, #36]	; 0x24
 8007948:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800794a:	445b      	add	r3, fp
 800794c:	9301      	str	r3, [sp, #4]
 800794e:	3301      	adds	r3, #1
 8007950:	2b01      	cmp	r3, #1
 8007952:	9304      	str	r3, [sp, #16]
 8007954:	bfb8      	it	lt
 8007956:	2301      	movlt	r3, #1
 8007958:	69e0      	ldr	r0, [r4, #28]
 800795a:	2100      	movs	r1, #0
 800795c:	2204      	movs	r2, #4
 800795e:	f102 0614 	add.w	r6, r2, #20
 8007962:	429e      	cmp	r6, r3
 8007964:	d93d      	bls.n	80079e2 <_dtoa_r+0x31a>
 8007966:	6041      	str	r1, [r0, #4]
 8007968:	4620      	mov	r0, r4
 800796a:	f000 fd9f 	bl	80084ac <_Balloc>
 800796e:	9000      	str	r0, [sp, #0]
 8007970:	2800      	cmp	r0, #0
 8007972:	d139      	bne.n	80079e8 <_dtoa_r+0x320>
 8007974:	4b16      	ldr	r3, [pc, #88]	; (80079d0 <_dtoa_r+0x308>)
 8007976:	4602      	mov	r2, r0
 8007978:	f240 11af 	movw	r1, #431	; 0x1af
 800797c:	e6bd      	b.n	80076fa <_dtoa_r+0x32>
 800797e:	2301      	movs	r3, #1
 8007980:	e7e1      	b.n	8007946 <_dtoa_r+0x27e>
 8007982:	2501      	movs	r5, #1
 8007984:	2300      	movs	r3, #0
 8007986:	9307      	str	r3, [sp, #28]
 8007988:	9509      	str	r5, [sp, #36]	; 0x24
 800798a:	f04f 33ff 	mov.w	r3, #4294967295
 800798e:	9301      	str	r3, [sp, #4]
 8007990:	9304      	str	r3, [sp, #16]
 8007992:	2200      	movs	r2, #0
 8007994:	2312      	movs	r3, #18
 8007996:	e7d1      	b.n	800793c <_dtoa_r+0x274>
 8007998:	636f4361 	.word	0x636f4361
 800799c:	3fd287a7 	.word	0x3fd287a7
 80079a0:	8b60c8b3 	.word	0x8b60c8b3
 80079a4:	3fc68a28 	.word	0x3fc68a28
 80079a8:	509f79fb 	.word	0x509f79fb
 80079ac:	3fd34413 	.word	0x3fd34413
 80079b0:	08009751 	.word	0x08009751
 80079b4:	08009768 	.word	0x08009768
 80079b8:	7ff00000 	.word	0x7ff00000
 80079bc:	0800974d 	.word	0x0800974d
 80079c0:	08009744 	.word	0x08009744
 80079c4:	08009721 	.word	0x08009721
 80079c8:	3ff80000 	.word	0x3ff80000
 80079cc:	08009858 	.word	0x08009858
 80079d0:	080097c0 	.word	0x080097c0
 80079d4:	2301      	movs	r3, #1
 80079d6:	9309      	str	r3, [sp, #36]	; 0x24
 80079d8:	e7d7      	b.n	800798a <_dtoa_r+0x2c2>
 80079da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079dc:	9301      	str	r3, [sp, #4]
 80079de:	9304      	str	r3, [sp, #16]
 80079e0:	e7ba      	b.n	8007958 <_dtoa_r+0x290>
 80079e2:	3101      	adds	r1, #1
 80079e4:	0052      	lsls	r2, r2, #1
 80079e6:	e7ba      	b.n	800795e <_dtoa_r+0x296>
 80079e8:	69e3      	ldr	r3, [r4, #28]
 80079ea:	9a00      	ldr	r2, [sp, #0]
 80079ec:	601a      	str	r2, [r3, #0]
 80079ee:	9b04      	ldr	r3, [sp, #16]
 80079f0:	2b0e      	cmp	r3, #14
 80079f2:	f200 80a8 	bhi.w	8007b46 <_dtoa_r+0x47e>
 80079f6:	2d00      	cmp	r5, #0
 80079f8:	f000 80a5 	beq.w	8007b46 <_dtoa_r+0x47e>
 80079fc:	f1bb 0f00 	cmp.w	fp, #0
 8007a00:	dd38      	ble.n	8007a74 <_dtoa_r+0x3ac>
 8007a02:	4bc0      	ldr	r3, [pc, #768]	; (8007d04 <_dtoa_r+0x63c>)
 8007a04:	f00b 020f 	and.w	r2, fp, #15
 8007a08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a0c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007a10:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007a14:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007a18:	d019      	beq.n	8007a4e <_dtoa_r+0x386>
 8007a1a:	4bbb      	ldr	r3, [pc, #748]	; (8007d08 <_dtoa_r+0x640>)
 8007a1c:	ec51 0b18 	vmov	r0, r1, d8
 8007a20:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007a24:	f7f8 ff12 	bl	800084c <__aeabi_ddiv>
 8007a28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a2c:	f008 080f 	and.w	r8, r8, #15
 8007a30:	2503      	movs	r5, #3
 8007a32:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007d08 <_dtoa_r+0x640>
 8007a36:	f1b8 0f00 	cmp.w	r8, #0
 8007a3a:	d10a      	bne.n	8007a52 <_dtoa_r+0x38a>
 8007a3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a40:	4632      	mov	r2, r6
 8007a42:	463b      	mov	r3, r7
 8007a44:	f7f8 ff02 	bl	800084c <__aeabi_ddiv>
 8007a48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a4c:	e02b      	b.n	8007aa6 <_dtoa_r+0x3de>
 8007a4e:	2502      	movs	r5, #2
 8007a50:	e7ef      	b.n	8007a32 <_dtoa_r+0x36a>
 8007a52:	f018 0f01 	tst.w	r8, #1
 8007a56:	d008      	beq.n	8007a6a <_dtoa_r+0x3a2>
 8007a58:	4630      	mov	r0, r6
 8007a5a:	4639      	mov	r1, r7
 8007a5c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007a60:	f7f8 fdca 	bl	80005f8 <__aeabi_dmul>
 8007a64:	3501      	adds	r5, #1
 8007a66:	4606      	mov	r6, r0
 8007a68:	460f      	mov	r7, r1
 8007a6a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007a6e:	f109 0908 	add.w	r9, r9, #8
 8007a72:	e7e0      	b.n	8007a36 <_dtoa_r+0x36e>
 8007a74:	f000 809f 	beq.w	8007bb6 <_dtoa_r+0x4ee>
 8007a78:	f1cb 0600 	rsb	r6, fp, #0
 8007a7c:	4ba1      	ldr	r3, [pc, #644]	; (8007d04 <_dtoa_r+0x63c>)
 8007a7e:	4fa2      	ldr	r7, [pc, #648]	; (8007d08 <_dtoa_r+0x640>)
 8007a80:	f006 020f 	and.w	r2, r6, #15
 8007a84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a8c:	ec51 0b18 	vmov	r0, r1, d8
 8007a90:	f7f8 fdb2 	bl	80005f8 <__aeabi_dmul>
 8007a94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a98:	1136      	asrs	r6, r6, #4
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	2502      	movs	r5, #2
 8007a9e:	2e00      	cmp	r6, #0
 8007aa0:	d17e      	bne.n	8007ba0 <_dtoa_r+0x4d8>
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d1d0      	bne.n	8007a48 <_dtoa_r+0x380>
 8007aa6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007aa8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	f000 8084 	beq.w	8007bba <_dtoa_r+0x4f2>
 8007ab2:	4b96      	ldr	r3, [pc, #600]	; (8007d0c <_dtoa_r+0x644>)
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	4640      	mov	r0, r8
 8007ab8:	4649      	mov	r1, r9
 8007aba:	f7f9 f80f 	bl	8000adc <__aeabi_dcmplt>
 8007abe:	2800      	cmp	r0, #0
 8007ac0:	d07b      	beq.n	8007bba <_dtoa_r+0x4f2>
 8007ac2:	9b04      	ldr	r3, [sp, #16]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d078      	beq.n	8007bba <_dtoa_r+0x4f2>
 8007ac8:	9b01      	ldr	r3, [sp, #4]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	dd39      	ble.n	8007b42 <_dtoa_r+0x47a>
 8007ace:	4b90      	ldr	r3, [pc, #576]	; (8007d10 <_dtoa_r+0x648>)
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	4640      	mov	r0, r8
 8007ad4:	4649      	mov	r1, r9
 8007ad6:	f7f8 fd8f 	bl	80005f8 <__aeabi_dmul>
 8007ada:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ade:	9e01      	ldr	r6, [sp, #4]
 8007ae0:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007ae4:	3501      	adds	r5, #1
 8007ae6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007aea:	4628      	mov	r0, r5
 8007aec:	f7f8 fd1a 	bl	8000524 <__aeabi_i2d>
 8007af0:	4642      	mov	r2, r8
 8007af2:	464b      	mov	r3, r9
 8007af4:	f7f8 fd80 	bl	80005f8 <__aeabi_dmul>
 8007af8:	4b86      	ldr	r3, [pc, #536]	; (8007d14 <_dtoa_r+0x64c>)
 8007afa:	2200      	movs	r2, #0
 8007afc:	f7f8 fbc6 	bl	800028c <__adddf3>
 8007b00:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007b04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b08:	9303      	str	r3, [sp, #12]
 8007b0a:	2e00      	cmp	r6, #0
 8007b0c:	d158      	bne.n	8007bc0 <_dtoa_r+0x4f8>
 8007b0e:	4b82      	ldr	r3, [pc, #520]	; (8007d18 <_dtoa_r+0x650>)
 8007b10:	2200      	movs	r2, #0
 8007b12:	4640      	mov	r0, r8
 8007b14:	4649      	mov	r1, r9
 8007b16:	f7f8 fbb7 	bl	8000288 <__aeabi_dsub>
 8007b1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b1e:	4680      	mov	r8, r0
 8007b20:	4689      	mov	r9, r1
 8007b22:	f7f8 fff9 	bl	8000b18 <__aeabi_dcmpgt>
 8007b26:	2800      	cmp	r0, #0
 8007b28:	f040 8296 	bne.w	8008058 <_dtoa_r+0x990>
 8007b2c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007b30:	4640      	mov	r0, r8
 8007b32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007b36:	4649      	mov	r1, r9
 8007b38:	f7f8 ffd0 	bl	8000adc <__aeabi_dcmplt>
 8007b3c:	2800      	cmp	r0, #0
 8007b3e:	f040 8289 	bne.w	8008054 <_dtoa_r+0x98c>
 8007b42:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007b46:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	f2c0 814e 	blt.w	8007dea <_dtoa_r+0x722>
 8007b4e:	f1bb 0f0e 	cmp.w	fp, #14
 8007b52:	f300 814a 	bgt.w	8007dea <_dtoa_r+0x722>
 8007b56:	4b6b      	ldr	r3, [pc, #428]	; (8007d04 <_dtoa_r+0x63c>)
 8007b58:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007b5c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007b60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	f280 80dc 	bge.w	8007d20 <_dtoa_r+0x658>
 8007b68:	9b04      	ldr	r3, [sp, #16]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	f300 80d8 	bgt.w	8007d20 <_dtoa_r+0x658>
 8007b70:	f040 826f 	bne.w	8008052 <_dtoa_r+0x98a>
 8007b74:	4b68      	ldr	r3, [pc, #416]	; (8007d18 <_dtoa_r+0x650>)
 8007b76:	2200      	movs	r2, #0
 8007b78:	4640      	mov	r0, r8
 8007b7a:	4649      	mov	r1, r9
 8007b7c:	f7f8 fd3c 	bl	80005f8 <__aeabi_dmul>
 8007b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b84:	f7f8 ffbe 	bl	8000b04 <__aeabi_dcmpge>
 8007b88:	9e04      	ldr	r6, [sp, #16]
 8007b8a:	4637      	mov	r7, r6
 8007b8c:	2800      	cmp	r0, #0
 8007b8e:	f040 8245 	bne.w	800801c <_dtoa_r+0x954>
 8007b92:	9d00      	ldr	r5, [sp, #0]
 8007b94:	2331      	movs	r3, #49	; 0x31
 8007b96:	f805 3b01 	strb.w	r3, [r5], #1
 8007b9a:	f10b 0b01 	add.w	fp, fp, #1
 8007b9e:	e241      	b.n	8008024 <_dtoa_r+0x95c>
 8007ba0:	07f2      	lsls	r2, r6, #31
 8007ba2:	d505      	bpl.n	8007bb0 <_dtoa_r+0x4e8>
 8007ba4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ba8:	f7f8 fd26 	bl	80005f8 <__aeabi_dmul>
 8007bac:	3501      	adds	r5, #1
 8007bae:	2301      	movs	r3, #1
 8007bb0:	1076      	asrs	r6, r6, #1
 8007bb2:	3708      	adds	r7, #8
 8007bb4:	e773      	b.n	8007a9e <_dtoa_r+0x3d6>
 8007bb6:	2502      	movs	r5, #2
 8007bb8:	e775      	b.n	8007aa6 <_dtoa_r+0x3de>
 8007bba:	9e04      	ldr	r6, [sp, #16]
 8007bbc:	465f      	mov	r7, fp
 8007bbe:	e792      	b.n	8007ae6 <_dtoa_r+0x41e>
 8007bc0:	9900      	ldr	r1, [sp, #0]
 8007bc2:	4b50      	ldr	r3, [pc, #320]	; (8007d04 <_dtoa_r+0x63c>)
 8007bc4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007bc8:	4431      	add	r1, r6
 8007bca:	9102      	str	r1, [sp, #8]
 8007bcc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007bce:	eeb0 9a47 	vmov.f32	s18, s14
 8007bd2:	eef0 9a67 	vmov.f32	s19, s15
 8007bd6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007bda:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007bde:	2900      	cmp	r1, #0
 8007be0:	d044      	beq.n	8007c6c <_dtoa_r+0x5a4>
 8007be2:	494e      	ldr	r1, [pc, #312]	; (8007d1c <_dtoa_r+0x654>)
 8007be4:	2000      	movs	r0, #0
 8007be6:	f7f8 fe31 	bl	800084c <__aeabi_ddiv>
 8007bea:	ec53 2b19 	vmov	r2, r3, d9
 8007bee:	f7f8 fb4b 	bl	8000288 <__aeabi_dsub>
 8007bf2:	9d00      	ldr	r5, [sp, #0]
 8007bf4:	ec41 0b19 	vmov	d9, r0, r1
 8007bf8:	4649      	mov	r1, r9
 8007bfa:	4640      	mov	r0, r8
 8007bfc:	f7f8 ffac 	bl	8000b58 <__aeabi_d2iz>
 8007c00:	4606      	mov	r6, r0
 8007c02:	f7f8 fc8f 	bl	8000524 <__aeabi_i2d>
 8007c06:	4602      	mov	r2, r0
 8007c08:	460b      	mov	r3, r1
 8007c0a:	4640      	mov	r0, r8
 8007c0c:	4649      	mov	r1, r9
 8007c0e:	f7f8 fb3b 	bl	8000288 <__aeabi_dsub>
 8007c12:	3630      	adds	r6, #48	; 0x30
 8007c14:	f805 6b01 	strb.w	r6, [r5], #1
 8007c18:	ec53 2b19 	vmov	r2, r3, d9
 8007c1c:	4680      	mov	r8, r0
 8007c1e:	4689      	mov	r9, r1
 8007c20:	f7f8 ff5c 	bl	8000adc <__aeabi_dcmplt>
 8007c24:	2800      	cmp	r0, #0
 8007c26:	d164      	bne.n	8007cf2 <_dtoa_r+0x62a>
 8007c28:	4642      	mov	r2, r8
 8007c2a:	464b      	mov	r3, r9
 8007c2c:	4937      	ldr	r1, [pc, #220]	; (8007d0c <_dtoa_r+0x644>)
 8007c2e:	2000      	movs	r0, #0
 8007c30:	f7f8 fb2a 	bl	8000288 <__aeabi_dsub>
 8007c34:	ec53 2b19 	vmov	r2, r3, d9
 8007c38:	f7f8 ff50 	bl	8000adc <__aeabi_dcmplt>
 8007c3c:	2800      	cmp	r0, #0
 8007c3e:	f040 80b6 	bne.w	8007dae <_dtoa_r+0x6e6>
 8007c42:	9b02      	ldr	r3, [sp, #8]
 8007c44:	429d      	cmp	r5, r3
 8007c46:	f43f af7c 	beq.w	8007b42 <_dtoa_r+0x47a>
 8007c4a:	4b31      	ldr	r3, [pc, #196]	; (8007d10 <_dtoa_r+0x648>)
 8007c4c:	ec51 0b19 	vmov	r0, r1, d9
 8007c50:	2200      	movs	r2, #0
 8007c52:	f7f8 fcd1 	bl	80005f8 <__aeabi_dmul>
 8007c56:	4b2e      	ldr	r3, [pc, #184]	; (8007d10 <_dtoa_r+0x648>)
 8007c58:	ec41 0b19 	vmov	d9, r0, r1
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	4640      	mov	r0, r8
 8007c60:	4649      	mov	r1, r9
 8007c62:	f7f8 fcc9 	bl	80005f8 <__aeabi_dmul>
 8007c66:	4680      	mov	r8, r0
 8007c68:	4689      	mov	r9, r1
 8007c6a:	e7c5      	b.n	8007bf8 <_dtoa_r+0x530>
 8007c6c:	ec51 0b17 	vmov	r0, r1, d7
 8007c70:	f7f8 fcc2 	bl	80005f8 <__aeabi_dmul>
 8007c74:	9b02      	ldr	r3, [sp, #8]
 8007c76:	9d00      	ldr	r5, [sp, #0]
 8007c78:	930f      	str	r3, [sp, #60]	; 0x3c
 8007c7a:	ec41 0b19 	vmov	d9, r0, r1
 8007c7e:	4649      	mov	r1, r9
 8007c80:	4640      	mov	r0, r8
 8007c82:	f7f8 ff69 	bl	8000b58 <__aeabi_d2iz>
 8007c86:	4606      	mov	r6, r0
 8007c88:	f7f8 fc4c 	bl	8000524 <__aeabi_i2d>
 8007c8c:	3630      	adds	r6, #48	; 0x30
 8007c8e:	4602      	mov	r2, r0
 8007c90:	460b      	mov	r3, r1
 8007c92:	4640      	mov	r0, r8
 8007c94:	4649      	mov	r1, r9
 8007c96:	f7f8 faf7 	bl	8000288 <__aeabi_dsub>
 8007c9a:	f805 6b01 	strb.w	r6, [r5], #1
 8007c9e:	9b02      	ldr	r3, [sp, #8]
 8007ca0:	429d      	cmp	r5, r3
 8007ca2:	4680      	mov	r8, r0
 8007ca4:	4689      	mov	r9, r1
 8007ca6:	f04f 0200 	mov.w	r2, #0
 8007caa:	d124      	bne.n	8007cf6 <_dtoa_r+0x62e>
 8007cac:	4b1b      	ldr	r3, [pc, #108]	; (8007d1c <_dtoa_r+0x654>)
 8007cae:	ec51 0b19 	vmov	r0, r1, d9
 8007cb2:	f7f8 faeb 	bl	800028c <__adddf3>
 8007cb6:	4602      	mov	r2, r0
 8007cb8:	460b      	mov	r3, r1
 8007cba:	4640      	mov	r0, r8
 8007cbc:	4649      	mov	r1, r9
 8007cbe:	f7f8 ff2b 	bl	8000b18 <__aeabi_dcmpgt>
 8007cc2:	2800      	cmp	r0, #0
 8007cc4:	d173      	bne.n	8007dae <_dtoa_r+0x6e6>
 8007cc6:	ec53 2b19 	vmov	r2, r3, d9
 8007cca:	4914      	ldr	r1, [pc, #80]	; (8007d1c <_dtoa_r+0x654>)
 8007ccc:	2000      	movs	r0, #0
 8007cce:	f7f8 fadb 	bl	8000288 <__aeabi_dsub>
 8007cd2:	4602      	mov	r2, r0
 8007cd4:	460b      	mov	r3, r1
 8007cd6:	4640      	mov	r0, r8
 8007cd8:	4649      	mov	r1, r9
 8007cda:	f7f8 feff 	bl	8000adc <__aeabi_dcmplt>
 8007cde:	2800      	cmp	r0, #0
 8007ce0:	f43f af2f 	beq.w	8007b42 <_dtoa_r+0x47a>
 8007ce4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007ce6:	1e6b      	subs	r3, r5, #1
 8007ce8:	930f      	str	r3, [sp, #60]	; 0x3c
 8007cea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007cee:	2b30      	cmp	r3, #48	; 0x30
 8007cf0:	d0f8      	beq.n	8007ce4 <_dtoa_r+0x61c>
 8007cf2:	46bb      	mov	fp, r7
 8007cf4:	e04a      	b.n	8007d8c <_dtoa_r+0x6c4>
 8007cf6:	4b06      	ldr	r3, [pc, #24]	; (8007d10 <_dtoa_r+0x648>)
 8007cf8:	f7f8 fc7e 	bl	80005f8 <__aeabi_dmul>
 8007cfc:	4680      	mov	r8, r0
 8007cfe:	4689      	mov	r9, r1
 8007d00:	e7bd      	b.n	8007c7e <_dtoa_r+0x5b6>
 8007d02:	bf00      	nop
 8007d04:	08009858 	.word	0x08009858
 8007d08:	08009830 	.word	0x08009830
 8007d0c:	3ff00000 	.word	0x3ff00000
 8007d10:	40240000 	.word	0x40240000
 8007d14:	401c0000 	.word	0x401c0000
 8007d18:	40140000 	.word	0x40140000
 8007d1c:	3fe00000 	.word	0x3fe00000
 8007d20:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007d24:	9d00      	ldr	r5, [sp, #0]
 8007d26:	4642      	mov	r2, r8
 8007d28:	464b      	mov	r3, r9
 8007d2a:	4630      	mov	r0, r6
 8007d2c:	4639      	mov	r1, r7
 8007d2e:	f7f8 fd8d 	bl	800084c <__aeabi_ddiv>
 8007d32:	f7f8 ff11 	bl	8000b58 <__aeabi_d2iz>
 8007d36:	9001      	str	r0, [sp, #4]
 8007d38:	f7f8 fbf4 	bl	8000524 <__aeabi_i2d>
 8007d3c:	4642      	mov	r2, r8
 8007d3e:	464b      	mov	r3, r9
 8007d40:	f7f8 fc5a 	bl	80005f8 <__aeabi_dmul>
 8007d44:	4602      	mov	r2, r0
 8007d46:	460b      	mov	r3, r1
 8007d48:	4630      	mov	r0, r6
 8007d4a:	4639      	mov	r1, r7
 8007d4c:	f7f8 fa9c 	bl	8000288 <__aeabi_dsub>
 8007d50:	9e01      	ldr	r6, [sp, #4]
 8007d52:	9f04      	ldr	r7, [sp, #16]
 8007d54:	3630      	adds	r6, #48	; 0x30
 8007d56:	f805 6b01 	strb.w	r6, [r5], #1
 8007d5a:	9e00      	ldr	r6, [sp, #0]
 8007d5c:	1bae      	subs	r6, r5, r6
 8007d5e:	42b7      	cmp	r7, r6
 8007d60:	4602      	mov	r2, r0
 8007d62:	460b      	mov	r3, r1
 8007d64:	d134      	bne.n	8007dd0 <_dtoa_r+0x708>
 8007d66:	f7f8 fa91 	bl	800028c <__adddf3>
 8007d6a:	4642      	mov	r2, r8
 8007d6c:	464b      	mov	r3, r9
 8007d6e:	4606      	mov	r6, r0
 8007d70:	460f      	mov	r7, r1
 8007d72:	f7f8 fed1 	bl	8000b18 <__aeabi_dcmpgt>
 8007d76:	b9c8      	cbnz	r0, 8007dac <_dtoa_r+0x6e4>
 8007d78:	4642      	mov	r2, r8
 8007d7a:	464b      	mov	r3, r9
 8007d7c:	4630      	mov	r0, r6
 8007d7e:	4639      	mov	r1, r7
 8007d80:	f7f8 fea2 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d84:	b110      	cbz	r0, 8007d8c <_dtoa_r+0x6c4>
 8007d86:	9b01      	ldr	r3, [sp, #4]
 8007d88:	07db      	lsls	r3, r3, #31
 8007d8a:	d40f      	bmi.n	8007dac <_dtoa_r+0x6e4>
 8007d8c:	4651      	mov	r1, sl
 8007d8e:	4620      	mov	r0, r4
 8007d90:	f000 fbcc 	bl	800852c <_Bfree>
 8007d94:	2300      	movs	r3, #0
 8007d96:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007d98:	702b      	strb	r3, [r5, #0]
 8007d9a:	f10b 0301 	add.w	r3, fp, #1
 8007d9e:	6013      	str	r3, [r2, #0]
 8007da0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	f43f ace2 	beq.w	800776c <_dtoa_r+0xa4>
 8007da8:	601d      	str	r5, [r3, #0]
 8007daa:	e4df      	b.n	800776c <_dtoa_r+0xa4>
 8007dac:	465f      	mov	r7, fp
 8007dae:	462b      	mov	r3, r5
 8007db0:	461d      	mov	r5, r3
 8007db2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007db6:	2a39      	cmp	r2, #57	; 0x39
 8007db8:	d106      	bne.n	8007dc8 <_dtoa_r+0x700>
 8007dba:	9a00      	ldr	r2, [sp, #0]
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	d1f7      	bne.n	8007db0 <_dtoa_r+0x6e8>
 8007dc0:	9900      	ldr	r1, [sp, #0]
 8007dc2:	2230      	movs	r2, #48	; 0x30
 8007dc4:	3701      	adds	r7, #1
 8007dc6:	700a      	strb	r2, [r1, #0]
 8007dc8:	781a      	ldrb	r2, [r3, #0]
 8007dca:	3201      	adds	r2, #1
 8007dcc:	701a      	strb	r2, [r3, #0]
 8007dce:	e790      	b.n	8007cf2 <_dtoa_r+0x62a>
 8007dd0:	4ba3      	ldr	r3, [pc, #652]	; (8008060 <_dtoa_r+0x998>)
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	f7f8 fc10 	bl	80005f8 <__aeabi_dmul>
 8007dd8:	2200      	movs	r2, #0
 8007dda:	2300      	movs	r3, #0
 8007ddc:	4606      	mov	r6, r0
 8007dde:	460f      	mov	r7, r1
 8007de0:	f7f8 fe72 	bl	8000ac8 <__aeabi_dcmpeq>
 8007de4:	2800      	cmp	r0, #0
 8007de6:	d09e      	beq.n	8007d26 <_dtoa_r+0x65e>
 8007de8:	e7d0      	b.n	8007d8c <_dtoa_r+0x6c4>
 8007dea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007dec:	2a00      	cmp	r2, #0
 8007dee:	f000 80ca 	beq.w	8007f86 <_dtoa_r+0x8be>
 8007df2:	9a07      	ldr	r2, [sp, #28]
 8007df4:	2a01      	cmp	r2, #1
 8007df6:	f300 80ad 	bgt.w	8007f54 <_dtoa_r+0x88c>
 8007dfa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007dfc:	2a00      	cmp	r2, #0
 8007dfe:	f000 80a5 	beq.w	8007f4c <_dtoa_r+0x884>
 8007e02:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007e06:	9e08      	ldr	r6, [sp, #32]
 8007e08:	9d05      	ldr	r5, [sp, #20]
 8007e0a:	9a05      	ldr	r2, [sp, #20]
 8007e0c:	441a      	add	r2, r3
 8007e0e:	9205      	str	r2, [sp, #20]
 8007e10:	9a06      	ldr	r2, [sp, #24]
 8007e12:	2101      	movs	r1, #1
 8007e14:	441a      	add	r2, r3
 8007e16:	4620      	mov	r0, r4
 8007e18:	9206      	str	r2, [sp, #24]
 8007e1a:	f000 fc3d 	bl	8008698 <__i2b>
 8007e1e:	4607      	mov	r7, r0
 8007e20:	b165      	cbz	r5, 8007e3c <_dtoa_r+0x774>
 8007e22:	9b06      	ldr	r3, [sp, #24]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	dd09      	ble.n	8007e3c <_dtoa_r+0x774>
 8007e28:	42ab      	cmp	r3, r5
 8007e2a:	9a05      	ldr	r2, [sp, #20]
 8007e2c:	bfa8      	it	ge
 8007e2e:	462b      	movge	r3, r5
 8007e30:	1ad2      	subs	r2, r2, r3
 8007e32:	9205      	str	r2, [sp, #20]
 8007e34:	9a06      	ldr	r2, [sp, #24]
 8007e36:	1aed      	subs	r5, r5, r3
 8007e38:	1ad3      	subs	r3, r2, r3
 8007e3a:	9306      	str	r3, [sp, #24]
 8007e3c:	9b08      	ldr	r3, [sp, #32]
 8007e3e:	b1f3      	cbz	r3, 8007e7e <_dtoa_r+0x7b6>
 8007e40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	f000 80a3 	beq.w	8007f8e <_dtoa_r+0x8c6>
 8007e48:	2e00      	cmp	r6, #0
 8007e4a:	dd10      	ble.n	8007e6e <_dtoa_r+0x7a6>
 8007e4c:	4639      	mov	r1, r7
 8007e4e:	4632      	mov	r2, r6
 8007e50:	4620      	mov	r0, r4
 8007e52:	f000 fce1 	bl	8008818 <__pow5mult>
 8007e56:	4652      	mov	r2, sl
 8007e58:	4601      	mov	r1, r0
 8007e5a:	4607      	mov	r7, r0
 8007e5c:	4620      	mov	r0, r4
 8007e5e:	f000 fc31 	bl	80086c4 <__multiply>
 8007e62:	4651      	mov	r1, sl
 8007e64:	4680      	mov	r8, r0
 8007e66:	4620      	mov	r0, r4
 8007e68:	f000 fb60 	bl	800852c <_Bfree>
 8007e6c:	46c2      	mov	sl, r8
 8007e6e:	9b08      	ldr	r3, [sp, #32]
 8007e70:	1b9a      	subs	r2, r3, r6
 8007e72:	d004      	beq.n	8007e7e <_dtoa_r+0x7b6>
 8007e74:	4651      	mov	r1, sl
 8007e76:	4620      	mov	r0, r4
 8007e78:	f000 fcce 	bl	8008818 <__pow5mult>
 8007e7c:	4682      	mov	sl, r0
 8007e7e:	2101      	movs	r1, #1
 8007e80:	4620      	mov	r0, r4
 8007e82:	f000 fc09 	bl	8008698 <__i2b>
 8007e86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	4606      	mov	r6, r0
 8007e8c:	f340 8081 	ble.w	8007f92 <_dtoa_r+0x8ca>
 8007e90:	461a      	mov	r2, r3
 8007e92:	4601      	mov	r1, r0
 8007e94:	4620      	mov	r0, r4
 8007e96:	f000 fcbf 	bl	8008818 <__pow5mult>
 8007e9a:	9b07      	ldr	r3, [sp, #28]
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	4606      	mov	r6, r0
 8007ea0:	dd7a      	ble.n	8007f98 <_dtoa_r+0x8d0>
 8007ea2:	f04f 0800 	mov.w	r8, #0
 8007ea6:	6933      	ldr	r3, [r6, #16]
 8007ea8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007eac:	6918      	ldr	r0, [r3, #16]
 8007eae:	f000 fba5 	bl	80085fc <__hi0bits>
 8007eb2:	f1c0 0020 	rsb	r0, r0, #32
 8007eb6:	9b06      	ldr	r3, [sp, #24]
 8007eb8:	4418      	add	r0, r3
 8007eba:	f010 001f 	ands.w	r0, r0, #31
 8007ebe:	f000 8094 	beq.w	8007fea <_dtoa_r+0x922>
 8007ec2:	f1c0 0320 	rsb	r3, r0, #32
 8007ec6:	2b04      	cmp	r3, #4
 8007ec8:	f340 8085 	ble.w	8007fd6 <_dtoa_r+0x90e>
 8007ecc:	9b05      	ldr	r3, [sp, #20]
 8007ece:	f1c0 001c 	rsb	r0, r0, #28
 8007ed2:	4403      	add	r3, r0
 8007ed4:	9305      	str	r3, [sp, #20]
 8007ed6:	9b06      	ldr	r3, [sp, #24]
 8007ed8:	4403      	add	r3, r0
 8007eda:	4405      	add	r5, r0
 8007edc:	9306      	str	r3, [sp, #24]
 8007ede:	9b05      	ldr	r3, [sp, #20]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	dd05      	ble.n	8007ef0 <_dtoa_r+0x828>
 8007ee4:	4651      	mov	r1, sl
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	4620      	mov	r0, r4
 8007eea:	f000 fcef 	bl	80088cc <__lshift>
 8007eee:	4682      	mov	sl, r0
 8007ef0:	9b06      	ldr	r3, [sp, #24]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	dd05      	ble.n	8007f02 <_dtoa_r+0x83a>
 8007ef6:	4631      	mov	r1, r6
 8007ef8:	461a      	mov	r2, r3
 8007efa:	4620      	mov	r0, r4
 8007efc:	f000 fce6 	bl	80088cc <__lshift>
 8007f00:	4606      	mov	r6, r0
 8007f02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d072      	beq.n	8007fee <_dtoa_r+0x926>
 8007f08:	4631      	mov	r1, r6
 8007f0a:	4650      	mov	r0, sl
 8007f0c:	f000 fd4a 	bl	80089a4 <__mcmp>
 8007f10:	2800      	cmp	r0, #0
 8007f12:	da6c      	bge.n	8007fee <_dtoa_r+0x926>
 8007f14:	2300      	movs	r3, #0
 8007f16:	4651      	mov	r1, sl
 8007f18:	220a      	movs	r2, #10
 8007f1a:	4620      	mov	r0, r4
 8007f1c:	f000 fb28 	bl	8008570 <__multadd>
 8007f20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f22:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007f26:	4682      	mov	sl, r0
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	f000 81b0 	beq.w	800828e <_dtoa_r+0xbc6>
 8007f2e:	2300      	movs	r3, #0
 8007f30:	4639      	mov	r1, r7
 8007f32:	220a      	movs	r2, #10
 8007f34:	4620      	mov	r0, r4
 8007f36:	f000 fb1b 	bl	8008570 <__multadd>
 8007f3a:	9b01      	ldr	r3, [sp, #4]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	4607      	mov	r7, r0
 8007f40:	f300 8096 	bgt.w	8008070 <_dtoa_r+0x9a8>
 8007f44:	9b07      	ldr	r3, [sp, #28]
 8007f46:	2b02      	cmp	r3, #2
 8007f48:	dc59      	bgt.n	8007ffe <_dtoa_r+0x936>
 8007f4a:	e091      	b.n	8008070 <_dtoa_r+0x9a8>
 8007f4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007f4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007f52:	e758      	b.n	8007e06 <_dtoa_r+0x73e>
 8007f54:	9b04      	ldr	r3, [sp, #16]
 8007f56:	1e5e      	subs	r6, r3, #1
 8007f58:	9b08      	ldr	r3, [sp, #32]
 8007f5a:	42b3      	cmp	r3, r6
 8007f5c:	bfbf      	itttt	lt
 8007f5e:	9b08      	ldrlt	r3, [sp, #32]
 8007f60:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8007f62:	9608      	strlt	r6, [sp, #32]
 8007f64:	1af3      	sublt	r3, r6, r3
 8007f66:	bfb4      	ite	lt
 8007f68:	18d2      	addlt	r2, r2, r3
 8007f6a:	1b9e      	subge	r6, r3, r6
 8007f6c:	9b04      	ldr	r3, [sp, #16]
 8007f6e:	bfbc      	itt	lt
 8007f70:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8007f72:	2600      	movlt	r6, #0
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	bfb7      	itett	lt
 8007f78:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8007f7c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007f80:	1a9d      	sublt	r5, r3, r2
 8007f82:	2300      	movlt	r3, #0
 8007f84:	e741      	b.n	8007e0a <_dtoa_r+0x742>
 8007f86:	9e08      	ldr	r6, [sp, #32]
 8007f88:	9d05      	ldr	r5, [sp, #20]
 8007f8a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007f8c:	e748      	b.n	8007e20 <_dtoa_r+0x758>
 8007f8e:	9a08      	ldr	r2, [sp, #32]
 8007f90:	e770      	b.n	8007e74 <_dtoa_r+0x7ac>
 8007f92:	9b07      	ldr	r3, [sp, #28]
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	dc19      	bgt.n	8007fcc <_dtoa_r+0x904>
 8007f98:	9b02      	ldr	r3, [sp, #8]
 8007f9a:	b9bb      	cbnz	r3, 8007fcc <_dtoa_r+0x904>
 8007f9c:	9b03      	ldr	r3, [sp, #12]
 8007f9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007fa2:	b99b      	cbnz	r3, 8007fcc <_dtoa_r+0x904>
 8007fa4:	9b03      	ldr	r3, [sp, #12]
 8007fa6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007faa:	0d1b      	lsrs	r3, r3, #20
 8007fac:	051b      	lsls	r3, r3, #20
 8007fae:	b183      	cbz	r3, 8007fd2 <_dtoa_r+0x90a>
 8007fb0:	9b05      	ldr	r3, [sp, #20]
 8007fb2:	3301      	adds	r3, #1
 8007fb4:	9305      	str	r3, [sp, #20]
 8007fb6:	9b06      	ldr	r3, [sp, #24]
 8007fb8:	3301      	adds	r3, #1
 8007fba:	9306      	str	r3, [sp, #24]
 8007fbc:	f04f 0801 	mov.w	r8, #1
 8007fc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	f47f af6f 	bne.w	8007ea6 <_dtoa_r+0x7de>
 8007fc8:	2001      	movs	r0, #1
 8007fca:	e774      	b.n	8007eb6 <_dtoa_r+0x7ee>
 8007fcc:	f04f 0800 	mov.w	r8, #0
 8007fd0:	e7f6      	b.n	8007fc0 <_dtoa_r+0x8f8>
 8007fd2:	4698      	mov	r8, r3
 8007fd4:	e7f4      	b.n	8007fc0 <_dtoa_r+0x8f8>
 8007fd6:	d082      	beq.n	8007ede <_dtoa_r+0x816>
 8007fd8:	9a05      	ldr	r2, [sp, #20]
 8007fda:	331c      	adds	r3, #28
 8007fdc:	441a      	add	r2, r3
 8007fde:	9205      	str	r2, [sp, #20]
 8007fe0:	9a06      	ldr	r2, [sp, #24]
 8007fe2:	441a      	add	r2, r3
 8007fe4:	441d      	add	r5, r3
 8007fe6:	9206      	str	r2, [sp, #24]
 8007fe8:	e779      	b.n	8007ede <_dtoa_r+0x816>
 8007fea:	4603      	mov	r3, r0
 8007fec:	e7f4      	b.n	8007fd8 <_dtoa_r+0x910>
 8007fee:	9b04      	ldr	r3, [sp, #16]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	dc37      	bgt.n	8008064 <_dtoa_r+0x99c>
 8007ff4:	9b07      	ldr	r3, [sp, #28]
 8007ff6:	2b02      	cmp	r3, #2
 8007ff8:	dd34      	ble.n	8008064 <_dtoa_r+0x99c>
 8007ffa:	9b04      	ldr	r3, [sp, #16]
 8007ffc:	9301      	str	r3, [sp, #4]
 8007ffe:	9b01      	ldr	r3, [sp, #4]
 8008000:	b963      	cbnz	r3, 800801c <_dtoa_r+0x954>
 8008002:	4631      	mov	r1, r6
 8008004:	2205      	movs	r2, #5
 8008006:	4620      	mov	r0, r4
 8008008:	f000 fab2 	bl	8008570 <__multadd>
 800800c:	4601      	mov	r1, r0
 800800e:	4606      	mov	r6, r0
 8008010:	4650      	mov	r0, sl
 8008012:	f000 fcc7 	bl	80089a4 <__mcmp>
 8008016:	2800      	cmp	r0, #0
 8008018:	f73f adbb 	bgt.w	8007b92 <_dtoa_r+0x4ca>
 800801c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800801e:	9d00      	ldr	r5, [sp, #0]
 8008020:	ea6f 0b03 	mvn.w	fp, r3
 8008024:	f04f 0800 	mov.w	r8, #0
 8008028:	4631      	mov	r1, r6
 800802a:	4620      	mov	r0, r4
 800802c:	f000 fa7e 	bl	800852c <_Bfree>
 8008030:	2f00      	cmp	r7, #0
 8008032:	f43f aeab 	beq.w	8007d8c <_dtoa_r+0x6c4>
 8008036:	f1b8 0f00 	cmp.w	r8, #0
 800803a:	d005      	beq.n	8008048 <_dtoa_r+0x980>
 800803c:	45b8      	cmp	r8, r7
 800803e:	d003      	beq.n	8008048 <_dtoa_r+0x980>
 8008040:	4641      	mov	r1, r8
 8008042:	4620      	mov	r0, r4
 8008044:	f000 fa72 	bl	800852c <_Bfree>
 8008048:	4639      	mov	r1, r7
 800804a:	4620      	mov	r0, r4
 800804c:	f000 fa6e 	bl	800852c <_Bfree>
 8008050:	e69c      	b.n	8007d8c <_dtoa_r+0x6c4>
 8008052:	2600      	movs	r6, #0
 8008054:	4637      	mov	r7, r6
 8008056:	e7e1      	b.n	800801c <_dtoa_r+0x954>
 8008058:	46bb      	mov	fp, r7
 800805a:	4637      	mov	r7, r6
 800805c:	e599      	b.n	8007b92 <_dtoa_r+0x4ca>
 800805e:	bf00      	nop
 8008060:	40240000 	.word	0x40240000
 8008064:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008066:	2b00      	cmp	r3, #0
 8008068:	f000 80c8 	beq.w	80081fc <_dtoa_r+0xb34>
 800806c:	9b04      	ldr	r3, [sp, #16]
 800806e:	9301      	str	r3, [sp, #4]
 8008070:	2d00      	cmp	r5, #0
 8008072:	dd05      	ble.n	8008080 <_dtoa_r+0x9b8>
 8008074:	4639      	mov	r1, r7
 8008076:	462a      	mov	r2, r5
 8008078:	4620      	mov	r0, r4
 800807a:	f000 fc27 	bl	80088cc <__lshift>
 800807e:	4607      	mov	r7, r0
 8008080:	f1b8 0f00 	cmp.w	r8, #0
 8008084:	d05b      	beq.n	800813e <_dtoa_r+0xa76>
 8008086:	6879      	ldr	r1, [r7, #4]
 8008088:	4620      	mov	r0, r4
 800808a:	f000 fa0f 	bl	80084ac <_Balloc>
 800808e:	4605      	mov	r5, r0
 8008090:	b928      	cbnz	r0, 800809e <_dtoa_r+0x9d6>
 8008092:	4b83      	ldr	r3, [pc, #524]	; (80082a0 <_dtoa_r+0xbd8>)
 8008094:	4602      	mov	r2, r0
 8008096:	f240 21ef 	movw	r1, #751	; 0x2ef
 800809a:	f7ff bb2e 	b.w	80076fa <_dtoa_r+0x32>
 800809e:	693a      	ldr	r2, [r7, #16]
 80080a0:	3202      	adds	r2, #2
 80080a2:	0092      	lsls	r2, r2, #2
 80080a4:	f107 010c 	add.w	r1, r7, #12
 80080a8:	300c      	adds	r0, #12
 80080aa:	f000 ffab 	bl	8009004 <memcpy>
 80080ae:	2201      	movs	r2, #1
 80080b0:	4629      	mov	r1, r5
 80080b2:	4620      	mov	r0, r4
 80080b4:	f000 fc0a 	bl	80088cc <__lshift>
 80080b8:	9b00      	ldr	r3, [sp, #0]
 80080ba:	3301      	adds	r3, #1
 80080bc:	9304      	str	r3, [sp, #16]
 80080be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80080c2:	4413      	add	r3, r2
 80080c4:	9308      	str	r3, [sp, #32]
 80080c6:	9b02      	ldr	r3, [sp, #8]
 80080c8:	f003 0301 	and.w	r3, r3, #1
 80080cc:	46b8      	mov	r8, r7
 80080ce:	9306      	str	r3, [sp, #24]
 80080d0:	4607      	mov	r7, r0
 80080d2:	9b04      	ldr	r3, [sp, #16]
 80080d4:	4631      	mov	r1, r6
 80080d6:	3b01      	subs	r3, #1
 80080d8:	4650      	mov	r0, sl
 80080da:	9301      	str	r3, [sp, #4]
 80080dc:	f7ff fa6b 	bl	80075b6 <quorem>
 80080e0:	4641      	mov	r1, r8
 80080e2:	9002      	str	r0, [sp, #8]
 80080e4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80080e8:	4650      	mov	r0, sl
 80080ea:	f000 fc5b 	bl	80089a4 <__mcmp>
 80080ee:	463a      	mov	r2, r7
 80080f0:	9005      	str	r0, [sp, #20]
 80080f2:	4631      	mov	r1, r6
 80080f4:	4620      	mov	r0, r4
 80080f6:	f000 fc71 	bl	80089dc <__mdiff>
 80080fa:	68c2      	ldr	r2, [r0, #12]
 80080fc:	4605      	mov	r5, r0
 80080fe:	bb02      	cbnz	r2, 8008142 <_dtoa_r+0xa7a>
 8008100:	4601      	mov	r1, r0
 8008102:	4650      	mov	r0, sl
 8008104:	f000 fc4e 	bl	80089a4 <__mcmp>
 8008108:	4602      	mov	r2, r0
 800810a:	4629      	mov	r1, r5
 800810c:	4620      	mov	r0, r4
 800810e:	9209      	str	r2, [sp, #36]	; 0x24
 8008110:	f000 fa0c 	bl	800852c <_Bfree>
 8008114:	9b07      	ldr	r3, [sp, #28]
 8008116:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008118:	9d04      	ldr	r5, [sp, #16]
 800811a:	ea43 0102 	orr.w	r1, r3, r2
 800811e:	9b06      	ldr	r3, [sp, #24]
 8008120:	4319      	orrs	r1, r3
 8008122:	d110      	bne.n	8008146 <_dtoa_r+0xa7e>
 8008124:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008128:	d029      	beq.n	800817e <_dtoa_r+0xab6>
 800812a:	9b05      	ldr	r3, [sp, #20]
 800812c:	2b00      	cmp	r3, #0
 800812e:	dd02      	ble.n	8008136 <_dtoa_r+0xa6e>
 8008130:	9b02      	ldr	r3, [sp, #8]
 8008132:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008136:	9b01      	ldr	r3, [sp, #4]
 8008138:	f883 9000 	strb.w	r9, [r3]
 800813c:	e774      	b.n	8008028 <_dtoa_r+0x960>
 800813e:	4638      	mov	r0, r7
 8008140:	e7ba      	b.n	80080b8 <_dtoa_r+0x9f0>
 8008142:	2201      	movs	r2, #1
 8008144:	e7e1      	b.n	800810a <_dtoa_r+0xa42>
 8008146:	9b05      	ldr	r3, [sp, #20]
 8008148:	2b00      	cmp	r3, #0
 800814a:	db04      	blt.n	8008156 <_dtoa_r+0xa8e>
 800814c:	9907      	ldr	r1, [sp, #28]
 800814e:	430b      	orrs	r3, r1
 8008150:	9906      	ldr	r1, [sp, #24]
 8008152:	430b      	orrs	r3, r1
 8008154:	d120      	bne.n	8008198 <_dtoa_r+0xad0>
 8008156:	2a00      	cmp	r2, #0
 8008158:	dded      	ble.n	8008136 <_dtoa_r+0xa6e>
 800815a:	4651      	mov	r1, sl
 800815c:	2201      	movs	r2, #1
 800815e:	4620      	mov	r0, r4
 8008160:	f000 fbb4 	bl	80088cc <__lshift>
 8008164:	4631      	mov	r1, r6
 8008166:	4682      	mov	sl, r0
 8008168:	f000 fc1c 	bl	80089a4 <__mcmp>
 800816c:	2800      	cmp	r0, #0
 800816e:	dc03      	bgt.n	8008178 <_dtoa_r+0xab0>
 8008170:	d1e1      	bne.n	8008136 <_dtoa_r+0xa6e>
 8008172:	f019 0f01 	tst.w	r9, #1
 8008176:	d0de      	beq.n	8008136 <_dtoa_r+0xa6e>
 8008178:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800817c:	d1d8      	bne.n	8008130 <_dtoa_r+0xa68>
 800817e:	9a01      	ldr	r2, [sp, #4]
 8008180:	2339      	movs	r3, #57	; 0x39
 8008182:	7013      	strb	r3, [r2, #0]
 8008184:	462b      	mov	r3, r5
 8008186:	461d      	mov	r5, r3
 8008188:	3b01      	subs	r3, #1
 800818a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800818e:	2a39      	cmp	r2, #57	; 0x39
 8008190:	d06c      	beq.n	800826c <_dtoa_r+0xba4>
 8008192:	3201      	adds	r2, #1
 8008194:	701a      	strb	r2, [r3, #0]
 8008196:	e747      	b.n	8008028 <_dtoa_r+0x960>
 8008198:	2a00      	cmp	r2, #0
 800819a:	dd07      	ble.n	80081ac <_dtoa_r+0xae4>
 800819c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80081a0:	d0ed      	beq.n	800817e <_dtoa_r+0xab6>
 80081a2:	9a01      	ldr	r2, [sp, #4]
 80081a4:	f109 0301 	add.w	r3, r9, #1
 80081a8:	7013      	strb	r3, [r2, #0]
 80081aa:	e73d      	b.n	8008028 <_dtoa_r+0x960>
 80081ac:	9b04      	ldr	r3, [sp, #16]
 80081ae:	9a08      	ldr	r2, [sp, #32]
 80081b0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d043      	beq.n	8008240 <_dtoa_r+0xb78>
 80081b8:	4651      	mov	r1, sl
 80081ba:	2300      	movs	r3, #0
 80081bc:	220a      	movs	r2, #10
 80081be:	4620      	mov	r0, r4
 80081c0:	f000 f9d6 	bl	8008570 <__multadd>
 80081c4:	45b8      	cmp	r8, r7
 80081c6:	4682      	mov	sl, r0
 80081c8:	f04f 0300 	mov.w	r3, #0
 80081cc:	f04f 020a 	mov.w	r2, #10
 80081d0:	4641      	mov	r1, r8
 80081d2:	4620      	mov	r0, r4
 80081d4:	d107      	bne.n	80081e6 <_dtoa_r+0xb1e>
 80081d6:	f000 f9cb 	bl	8008570 <__multadd>
 80081da:	4680      	mov	r8, r0
 80081dc:	4607      	mov	r7, r0
 80081de:	9b04      	ldr	r3, [sp, #16]
 80081e0:	3301      	adds	r3, #1
 80081e2:	9304      	str	r3, [sp, #16]
 80081e4:	e775      	b.n	80080d2 <_dtoa_r+0xa0a>
 80081e6:	f000 f9c3 	bl	8008570 <__multadd>
 80081ea:	4639      	mov	r1, r7
 80081ec:	4680      	mov	r8, r0
 80081ee:	2300      	movs	r3, #0
 80081f0:	220a      	movs	r2, #10
 80081f2:	4620      	mov	r0, r4
 80081f4:	f000 f9bc 	bl	8008570 <__multadd>
 80081f8:	4607      	mov	r7, r0
 80081fa:	e7f0      	b.n	80081de <_dtoa_r+0xb16>
 80081fc:	9b04      	ldr	r3, [sp, #16]
 80081fe:	9301      	str	r3, [sp, #4]
 8008200:	9d00      	ldr	r5, [sp, #0]
 8008202:	4631      	mov	r1, r6
 8008204:	4650      	mov	r0, sl
 8008206:	f7ff f9d6 	bl	80075b6 <quorem>
 800820a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800820e:	9b00      	ldr	r3, [sp, #0]
 8008210:	f805 9b01 	strb.w	r9, [r5], #1
 8008214:	1aea      	subs	r2, r5, r3
 8008216:	9b01      	ldr	r3, [sp, #4]
 8008218:	4293      	cmp	r3, r2
 800821a:	dd07      	ble.n	800822c <_dtoa_r+0xb64>
 800821c:	4651      	mov	r1, sl
 800821e:	2300      	movs	r3, #0
 8008220:	220a      	movs	r2, #10
 8008222:	4620      	mov	r0, r4
 8008224:	f000 f9a4 	bl	8008570 <__multadd>
 8008228:	4682      	mov	sl, r0
 800822a:	e7ea      	b.n	8008202 <_dtoa_r+0xb3a>
 800822c:	9b01      	ldr	r3, [sp, #4]
 800822e:	2b00      	cmp	r3, #0
 8008230:	bfc8      	it	gt
 8008232:	461d      	movgt	r5, r3
 8008234:	9b00      	ldr	r3, [sp, #0]
 8008236:	bfd8      	it	le
 8008238:	2501      	movle	r5, #1
 800823a:	441d      	add	r5, r3
 800823c:	f04f 0800 	mov.w	r8, #0
 8008240:	4651      	mov	r1, sl
 8008242:	2201      	movs	r2, #1
 8008244:	4620      	mov	r0, r4
 8008246:	f000 fb41 	bl	80088cc <__lshift>
 800824a:	4631      	mov	r1, r6
 800824c:	4682      	mov	sl, r0
 800824e:	f000 fba9 	bl	80089a4 <__mcmp>
 8008252:	2800      	cmp	r0, #0
 8008254:	dc96      	bgt.n	8008184 <_dtoa_r+0xabc>
 8008256:	d102      	bne.n	800825e <_dtoa_r+0xb96>
 8008258:	f019 0f01 	tst.w	r9, #1
 800825c:	d192      	bne.n	8008184 <_dtoa_r+0xabc>
 800825e:	462b      	mov	r3, r5
 8008260:	461d      	mov	r5, r3
 8008262:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008266:	2a30      	cmp	r2, #48	; 0x30
 8008268:	d0fa      	beq.n	8008260 <_dtoa_r+0xb98>
 800826a:	e6dd      	b.n	8008028 <_dtoa_r+0x960>
 800826c:	9a00      	ldr	r2, [sp, #0]
 800826e:	429a      	cmp	r2, r3
 8008270:	d189      	bne.n	8008186 <_dtoa_r+0xabe>
 8008272:	f10b 0b01 	add.w	fp, fp, #1
 8008276:	2331      	movs	r3, #49	; 0x31
 8008278:	e796      	b.n	80081a8 <_dtoa_r+0xae0>
 800827a:	4b0a      	ldr	r3, [pc, #40]	; (80082a4 <_dtoa_r+0xbdc>)
 800827c:	f7ff ba99 	b.w	80077b2 <_dtoa_r+0xea>
 8008280:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008282:	2b00      	cmp	r3, #0
 8008284:	f47f aa6d 	bne.w	8007762 <_dtoa_r+0x9a>
 8008288:	4b07      	ldr	r3, [pc, #28]	; (80082a8 <_dtoa_r+0xbe0>)
 800828a:	f7ff ba92 	b.w	80077b2 <_dtoa_r+0xea>
 800828e:	9b01      	ldr	r3, [sp, #4]
 8008290:	2b00      	cmp	r3, #0
 8008292:	dcb5      	bgt.n	8008200 <_dtoa_r+0xb38>
 8008294:	9b07      	ldr	r3, [sp, #28]
 8008296:	2b02      	cmp	r3, #2
 8008298:	f73f aeb1 	bgt.w	8007ffe <_dtoa_r+0x936>
 800829c:	e7b0      	b.n	8008200 <_dtoa_r+0xb38>
 800829e:	bf00      	nop
 80082a0:	080097c0 	.word	0x080097c0
 80082a4:	08009720 	.word	0x08009720
 80082a8:	08009744 	.word	0x08009744

080082ac <_free_r>:
 80082ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80082ae:	2900      	cmp	r1, #0
 80082b0:	d044      	beq.n	800833c <_free_r+0x90>
 80082b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082b6:	9001      	str	r0, [sp, #4]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	f1a1 0404 	sub.w	r4, r1, #4
 80082be:	bfb8      	it	lt
 80082c0:	18e4      	addlt	r4, r4, r3
 80082c2:	f000 f8e7 	bl	8008494 <__malloc_lock>
 80082c6:	4a1e      	ldr	r2, [pc, #120]	; (8008340 <_free_r+0x94>)
 80082c8:	9801      	ldr	r0, [sp, #4]
 80082ca:	6813      	ldr	r3, [r2, #0]
 80082cc:	b933      	cbnz	r3, 80082dc <_free_r+0x30>
 80082ce:	6063      	str	r3, [r4, #4]
 80082d0:	6014      	str	r4, [r2, #0]
 80082d2:	b003      	add	sp, #12
 80082d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80082d8:	f000 b8e2 	b.w	80084a0 <__malloc_unlock>
 80082dc:	42a3      	cmp	r3, r4
 80082de:	d908      	bls.n	80082f2 <_free_r+0x46>
 80082e0:	6825      	ldr	r5, [r4, #0]
 80082e2:	1961      	adds	r1, r4, r5
 80082e4:	428b      	cmp	r3, r1
 80082e6:	bf01      	itttt	eq
 80082e8:	6819      	ldreq	r1, [r3, #0]
 80082ea:	685b      	ldreq	r3, [r3, #4]
 80082ec:	1949      	addeq	r1, r1, r5
 80082ee:	6021      	streq	r1, [r4, #0]
 80082f0:	e7ed      	b.n	80082ce <_free_r+0x22>
 80082f2:	461a      	mov	r2, r3
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	b10b      	cbz	r3, 80082fc <_free_r+0x50>
 80082f8:	42a3      	cmp	r3, r4
 80082fa:	d9fa      	bls.n	80082f2 <_free_r+0x46>
 80082fc:	6811      	ldr	r1, [r2, #0]
 80082fe:	1855      	adds	r5, r2, r1
 8008300:	42a5      	cmp	r5, r4
 8008302:	d10b      	bne.n	800831c <_free_r+0x70>
 8008304:	6824      	ldr	r4, [r4, #0]
 8008306:	4421      	add	r1, r4
 8008308:	1854      	adds	r4, r2, r1
 800830a:	42a3      	cmp	r3, r4
 800830c:	6011      	str	r1, [r2, #0]
 800830e:	d1e0      	bne.n	80082d2 <_free_r+0x26>
 8008310:	681c      	ldr	r4, [r3, #0]
 8008312:	685b      	ldr	r3, [r3, #4]
 8008314:	6053      	str	r3, [r2, #4]
 8008316:	440c      	add	r4, r1
 8008318:	6014      	str	r4, [r2, #0]
 800831a:	e7da      	b.n	80082d2 <_free_r+0x26>
 800831c:	d902      	bls.n	8008324 <_free_r+0x78>
 800831e:	230c      	movs	r3, #12
 8008320:	6003      	str	r3, [r0, #0]
 8008322:	e7d6      	b.n	80082d2 <_free_r+0x26>
 8008324:	6825      	ldr	r5, [r4, #0]
 8008326:	1961      	adds	r1, r4, r5
 8008328:	428b      	cmp	r3, r1
 800832a:	bf04      	itt	eq
 800832c:	6819      	ldreq	r1, [r3, #0]
 800832e:	685b      	ldreq	r3, [r3, #4]
 8008330:	6063      	str	r3, [r4, #4]
 8008332:	bf04      	itt	eq
 8008334:	1949      	addeq	r1, r1, r5
 8008336:	6021      	streq	r1, [r4, #0]
 8008338:	6054      	str	r4, [r2, #4]
 800833a:	e7ca      	b.n	80082d2 <_free_r+0x26>
 800833c:	b003      	add	sp, #12
 800833e:	bd30      	pop	{r4, r5, pc}
 8008340:	20000564 	.word	0x20000564

08008344 <malloc>:
 8008344:	4b02      	ldr	r3, [pc, #8]	; (8008350 <malloc+0xc>)
 8008346:	4601      	mov	r1, r0
 8008348:	6818      	ldr	r0, [r3, #0]
 800834a:	f000 b823 	b.w	8008394 <_malloc_r>
 800834e:	bf00      	nop
 8008350:	20000064 	.word	0x20000064

08008354 <sbrk_aligned>:
 8008354:	b570      	push	{r4, r5, r6, lr}
 8008356:	4e0e      	ldr	r6, [pc, #56]	; (8008390 <sbrk_aligned+0x3c>)
 8008358:	460c      	mov	r4, r1
 800835a:	6831      	ldr	r1, [r6, #0]
 800835c:	4605      	mov	r5, r0
 800835e:	b911      	cbnz	r1, 8008366 <sbrk_aligned+0x12>
 8008360:	f000 fe40 	bl	8008fe4 <_sbrk_r>
 8008364:	6030      	str	r0, [r6, #0]
 8008366:	4621      	mov	r1, r4
 8008368:	4628      	mov	r0, r5
 800836a:	f000 fe3b 	bl	8008fe4 <_sbrk_r>
 800836e:	1c43      	adds	r3, r0, #1
 8008370:	d00a      	beq.n	8008388 <sbrk_aligned+0x34>
 8008372:	1cc4      	adds	r4, r0, #3
 8008374:	f024 0403 	bic.w	r4, r4, #3
 8008378:	42a0      	cmp	r0, r4
 800837a:	d007      	beq.n	800838c <sbrk_aligned+0x38>
 800837c:	1a21      	subs	r1, r4, r0
 800837e:	4628      	mov	r0, r5
 8008380:	f000 fe30 	bl	8008fe4 <_sbrk_r>
 8008384:	3001      	adds	r0, #1
 8008386:	d101      	bne.n	800838c <sbrk_aligned+0x38>
 8008388:	f04f 34ff 	mov.w	r4, #4294967295
 800838c:	4620      	mov	r0, r4
 800838e:	bd70      	pop	{r4, r5, r6, pc}
 8008390:	20000568 	.word	0x20000568

08008394 <_malloc_r>:
 8008394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008398:	1ccd      	adds	r5, r1, #3
 800839a:	f025 0503 	bic.w	r5, r5, #3
 800839e:	3508      	adds	r5, #8
 80083a0:	2d0c      	cmp	r5, #12
 80083a2:	bf38      	it	cc
 80083a4:	250c      	movcc	r5, #12
 80083a6:	2d00      	cmp	r5, #0
 80083a8:	4607      	mov	r7, r0
 80083aa:	db01      	blt.n	80083b0 <_malloc_r+0x1c>
 80083ac:	42a9      	cmp	r1, r5
 80083ae:	d905      	bls.n	80083bc <_malloc_r+0x28>
 80083b0:	230c      	movs	r3, #12
 80083b2:	603b      	str	r3, [r7, #0]
 80083b4:	2600      	movs	r6, #0
 80083b6:	4630      	mov	r0, r6
 80083b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083bc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008490 <_malloc_r+0xfc>
 80083c0:	f000 f868 	bl	8008494 <__malloc_lock>
 80083c4:	f8d8 3000 	ldr.w	r3, [r8]
 80083c8:	461c      	mov	r4, r3
 80083ca:	bb5c      	cbnz	r4, 8008424 <_malloc_r+0x90>
 80083cc:	4629      	mov	r1, r5
 80083ce:	4638      	mov	r0, r7
 80083d0:	f7ff ffc0 	bl	8008354 <sbrk_aligned>
 80083d4:	1c43      	adds	r3, r0, #1
 80083d6:	4604      	mov	r4, r0
 80083d8:	d155      	bne.n	8008486 <_malloc_r+0xf2>
 80083da:	f8d8 4000 	ldr.w	r4, [r8]
 80083de:	4626      	mov	r6, r4
 80083e0:	2e00      	cmp	r6, #0
 80083e2:	d145      	bne.n	8008470 <_malloc_r+0xdc>
 80083e4:	2c00      	cmp	r4, #0
 80083e6:	d048      	beq.n	800847a <_malloc_r+0xe6>
 80083e8:	6823      	ldr	r3, [r4, #0]
 80083ea:	4631      	mov	r1, r6
 80083ec:	4638      	mov	r0, r7
 80083ee:	eb04 0903 	add.w	r9, r4, r3
 80083f2:	f000 fdf7 	bl	8008fe4 <_sbrk_r>
 80083f6:	4581      	cmp	r9, r0
 80083f8:	d13f      	bne.n	800847a <_malloc_r+0xe6>
 80083fa:	6821      	ldr	r1, [r4, #0]
 80083fc:	1a6d      	subs	r5, r5, r1
 80083fe:	4629      	mov	r1, r5
 8008400:	4638      	mov	r0, r7
 8008402:	f7ff ffa7 	bl	8008354 <sbrk_aligned>
 8008406:	3001      	adds	r0, #1
 8008408:	d037      	beq.n	800847a <_malloc_r+0xe6>
 800840a:	6823      	ldr	r3, [r4, #0]
 800840c:	442b      	add	r3, r5
 800840e:	6023      	str	r3, [r4, #0]
 8008410:	f8d8 3000 	ldr.w	r3, [r8]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d038      	beq.n	800848a <_malloc_r+0xf6>
 8008418:	685a      	ldr	r2, [r3, #4]
 800841a:	42a2      	cmp	r2, r4
 800841c:	d12b      	bne.n	8008476 <_malloc_r+0xe2>
 800841e:	2200      	movs	r2, #0
 8008420:	605a      	str	r2, [r3, #4]
 8008422:	e00f      	b.n	8008444 <_malloc_r+0xb0>
 8008424:	6822      	ldr	r2, [r4, #0]
 8008426:	1b52      	subs	r2, r2, r5
 8008428:	d41f      	bmi.n	800846a <_malloc_r+0xd6>
 800842a:	2a0b      	cmp	r2, #11
 800842c:	d917      	bls.n	800845e <_malloc_r+0xca>
 800842e:	1961      	adds	r1, r4, r5
 8008430:	42a3      	cmp	r3, r4
 8008432:	6025      	str	r5, [r4, #0]
 8008434:	bf18      	it	ne
 8008436:	6059      	strne	r1, [r3, #4]
 8008438:	6863      	ldr	r3, [r4, #4]
 800843a:	bf08      	it	eq
 800843c:	f8c8 1000 	streq.w	r1, [r8]
 8008440:	5162      	str	r2, [r4, r5]
 8008442:	604b      	str	r3, [r1, #4]
 8008444:	4638      	mov	r0, r7
 8008446:	f104 060b 	add.w	r6, r4, #11
 800844a:	f000 f829 	bl	80084a0 <__malloc_unlock>
 800844e:	f026 0607 	bic.w	r6, r6, #7
 8008452:	1d23      	adds	r3, r4, #4
 8008454:	1af2      	subs	r2, r6, r3
 8008456:	d0ae      	beq.n	80083b6 <_malloc_r+0x22>
 8008458:	1b9b      	subs	r3, r3, r6
 800845a:	50a3      	str	r3, [r4, r2]
 800845c:	e7ab      	b.n	80083b6 <_malloc_r+0x22>
 800845e:	42a3      	cmp	r3, r4
 8008460:	6862      	ldr	r2, [r4, #4]
 8008462:	d1dd      	bne.n	8008420 <_malloc_r+0x8c>
 8008464:	f8c8 2000 	str.w	r2, [r8]
 8008468:	e7ec      	b.n	8008444 <_malloc_r+0xb0>
 800846a:	4623      	mov	r3, r4
 800846c:	6864      	ldr	r4, [r4, #4]
 800846e:	e7ac      	b.n	80083ca <_malloc_r+0x36>
 8008470:	4634      	mov	r4, r6
 8008472:	6876      	ldr	r6, [r6, #4]
 8008474:	e7b4      	b.n	80083e0 <_malloc_r+0x4c>
 8008476:	4613      	mov	r3, r2
 8008478:	e7cc      	b.n	8008414 <_malloc_r+0x80>
 800847a:	230c      	movs	r3, #12
 800847c:	603b      	str	r3, [r7, #0]
 800847e:	4638      	mov	r0, r7
 8008480:	f000 f80e 	bl	80084a0 <__malloc_unlock>
 8008484:	e797      	b.n	80083b6 <_malloc_r+0x22>
 8008486:	6025      	str	r5, [r4, #0]
 8008488:	e7dc      	b.n	8008444 <_malloc_r+0xb0>
 800848a:	605b      	str	r3, [r3, #4]
 800848c:	deff      	udf	#255	; 0xff
 800848e:	bf00      	nop
 8008490:	20000564 	.word	0x20000564

08008494 <__malloc_lock>:
 8008494:	4801      	ldr	r0, [pc, #4]	; (800849c <__malloc_lock+0x8>)
 8008496:	f7ff b88c 	b.w	80075b2 <__retarget_lock_acquire_recursive>
 800849a:	bf00      	nop
 800849c:	20000560 	.word	0x20000560

080084a0 <__malloc_unlock>:
 80084a0:	4801      	ldr	r0, [pc, #4]	; (80084a8 <__malloc_unlock+0x8>)
 80084a2:	f7ff b887 	b.w	80075b4 <__retarget_lock_release_recursive>
 80084a6:	bf00      	nop
 80084a8:	20000560 	.word	0x20000560

080084ac <_Balloc>:
 80084ac:	b570      	push	{r4, r5, r6, lr}
 80084ae:	69c6      	ldr	r6, [r0, #28]
 80084b0:	4604      	mov	r4, r0
 80084b2:	460d      	mov	r5, r1
 80084b4:	b976      	cbnz	r6, 80084d4 <_Balloc+0x28>
 80084b6:	2010      	movs	r0, #16
 80084b8:	f7ff ff44 	bl	8008344 <malloc>
 80084bc:	4602      	mov	r2, r0
 80084be:	61e0      	str	r0, [r4, #28]
 80084c0:	b920      	cbnz	r0, 80084cc <_Balloc+0x20>
 80084c2:	4b18      	ldr	r3, [pc, #96]	; (8008524 <_Balloc+0x78>)
 80084c4:	4818      	ldr	r0, [pc, #96]	; (8008528 <_Balloc+0x7c>)
 80084c6:	216b      	movs	r1, #107	; 0x6b
 80084c8:	f000 fdaa 	bl	8009020 <__assert_func>
 80084cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80084d0:	6006      	str	r6, [r0, #0]
 80084d2:	60c6      	str	r6, [r0, #12]
 80084d4:	69e6      	ldr	r6, [r4, #28]
 80084d6:	68f3      	ldr	r3, [r6, #12]
 80084d8:	b183      	cbz	r3, 80084fc <_Balloc+0x50>
 80084da:	69e3      	ldr	r3, [r4, #28]
 80084dc:	68db      	ldr	r3, [r3, #12]
 80084de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80084e2:	b9b8      	cbnz	r0, 8008514 <_Balloc+0x68>
 80084e4:	2101      	movs	r1, #1
 80084e6:	fa01 f605 	lsl.w	r6, r1, r5
 80084ea:	1d72      	adds	r2, r6, #5
 80084ec:	0092      	lsls	r2, r2, #2
 80084ee:	4620      	mov	r0, r4
 80084f0:	f000 fdb4 	bl	800905c <_calloc_r>
 80084f4:	b160      	cbz	r0, 8008510 <_Balloc+0x64>
 80084f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80084fa:	e00e      	b.n	800851a <_Balloc+0x6e>
 80084fc:	2221      	movs	r2, #33	; 0x21
 80084fe:	2104      	movs	r1, #4
 8008500:	4620      	mov	r0, r4
 8008502:	f000 fdab 	bl	800905c <_calloc_r>
 8008506:	69e3      	ldr	r3, [r4, #28]
 8008508:	60f0      	str	r0, [r6, #12]
 800850a:	68db      	ldr	r3, [r3, #12]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d1e4      	bne.n	80084da <_Balloc+0x2e>
 8008510:	2000      	movs	r0, #0
 8008512:	bd70      	pop	{r4, r5, r6, pc}
 8008514:	6802      	ldr	r2, [r0, #0]
 8008516:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800851a:	2300      	movs	r3, #0
 800851c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008520:	e7f7      	b.n	8008512 <_Balloc+0x66>
 8008522:	bf00      	nop
 8008524:	08009751 	.word	0x08009751
 8008528:	080097d1 	.word	0x080097d1

0800852c <_Bfree>:
 800852c:	b570      	push	{r4, r5, r6, lr}
 800852e:	69c6      	ldr	r6, [r0, #28]
 8008530:	4605      	mov	r5, r0
 8008532:	460c      	mov	r4, r1
 8008534:	b976      	cbnz	r6, 8008554 <_Bfree+0x28>
 8008536:	2010      	movs	r0, #16
 8008538:	f7ff ff04 	bl	8008344 <malloc>
 800853c:	4602      	mov	r2, r0
 800853e:	61e8      	str	r0, [r5, #28]
 8008540:	b920      	cbnz	r0, 800854c <_Bfree+0x20>
 8008542:	4b09      	ldr	r3, [pc, #36]	; (8008568 <_Bfree+0x3c>)
 8008544:	4809      	ldr	r0, [pc, #36]	; (800856c <_Bfree+0x40>)
 8008546:	218f      	movs	r1, #143	; 0x8f
 8008548:	f000 fd6a 	bl	8009020 <__assert_func>
 800854c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008550:	6006      	str	r6, [r0, #0]
 8008552:	60c6      	str	r6, [r0, #12]
 8008554:	b13c      	cbz	r4, 8008566 <_Bfree+0x3a>
 8008556:	69eb      	ldr	r3, [r5, #28]
 8008558:	6862      	ldr	r2, [r4, #4]
 800855a:	68db      	ldr	r3, [r3, #12]
 800855c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008560:	6021      	str	r1, [r4, #0]
 8008562:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008566:	bd70      	pop	{r4, r5, r6, pc}
 8008568:	08009751 	.word	0x08009751
 800856c:	080097d1 	.word	0x080097d1

08008570 <__multadd>:
 8008570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008574:	690d      	ldr	r5, [r1, #16]
 8008576:	4607      	mov	r7, r0
 8008578:	460c      	mov	r4, r1
 800857a:	461e      	mov	r6, r3
 800857c:	f101 0c14 	add.w	ip, r1, #20
 8008580:	2000      	movs	r0, #0
 8008582:	f8dc 3000 	ldr.w	r3, [ip]
 8008586:	b299      	uxth	r1, r3
 8008588:	fb02 6101 	mla	r1, r2, r1, r6
 800858c:	0c1e      	lsrs	r6, r3, #16
 800858e:	0c0b      	lsrs	r3, r1, #16
 8008590:	fb02 3306 	mla	r3, r2, r6, r3
 8008594:	b289      	uxth	r1, r1
 8008596:	3001      	adds	r0, #1
 8008598:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800859c:	4285      	cmp	r5, r0
 800859e:	f84c 1b04 	str.w	r1, [ip], #4
 80085a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80085a6:	dcec      	bgt.n	8008582 <__multadd+0x12>
 80085a8:	b30e      	cbz	r6, 80085ee <__multadd+0x7e>
 80085aa:	68a3      	ldr	r3, [r4, #8]
 80085ac:	42ab      	cmp	r3, r5
 80085ae:	dc19      	bgt.n	80085e4 <__multadd+0x74>
 80085b0:	6861      	ldr	r1, [r4, #4]
 80085b2:	4638      	mov	r0, r7
 80085b4:	3101      	adds	r1, #1
 80085b6:	f7ff ff79 	bl	80084ac <_Balloc>
 80085ba:	4680      	mov	r8, r0
 80085bc:	b928      	cbnz	r0, 80085ca <__multadd+0x5a>
 80085be:	4602      	mov	r2, r0
 80085c0:	4b0c      	ldr	r3, [pc, #48]	; (80085f4 <__multadd+0x84>)
 80085c2:	480d      	ldr	r0, [pc, #52]	; (80085f8 <__multadd+0x88>)
 80085c4:	21ba      	movs	r1, #186	; 0xba
 80085c6:	f000 fd2b 	bl	8009020 <__assert_func>
 80085ca:	6922      	ldr	r2, [r4, #16]
 80085cc:	3202      	adds	r2, #2
 80085ce:	f104 010c 	add.w	r1, r4, #12
 80085d2:	0092      	lsls	r2, r2, #2
 80085d4:	300c      	adds	r0, #12
 80085d6:	f000 fd15 	bl	8009004 <memcpy>
 80085da:	4621      	mov	r1, r4
 80085dc:	4638      	mov	r0, r7
 80085de:	f7ff ffa5 	bl	800852c <_Bfree>
 80085e2:	4644      	mov	r4, r8
 80085e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80085e8:	3501      	adds	r5, #1
 80085ea:	615e      	str	r6, [r3, #20]
 80085ec:	6125      	str	r5, [r4, #16]
 80085ee:	4620      	mov	r0, r4
 80085f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085f4:	080097c0 	.word	0x080097c0
 80085f8:	080097d1 	.word	0x080097d1

080085fc <__hi0bits>:
 80085fc:	0c03      	lsrs	r3, r0, #16
 80085fe:	041b      	lsls	r3, r3, #16
 8008600:	b9d3      	cbnz	r3, 8008638 <__hi0bits+0x3c>
 8008602:	0400      	lsls	r0, r0, #16
 8008604:	2310      	movs	r3, #16
 8008606:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800860a:	bf04      	itt	eq
 800860c:	0200      	lsleq	r0, r0, #8
 800860e:	3308      	addeq	r3, #8
 8008610:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008614:	bf04      	itt	eq
 8008616:	0100      	lsleq	r0, r0, #4
 8008618:	3304      	addeq	r3, #4
 800861a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800861e:	bf04      	itt	eq
 8008620:	0080      	lsleq	r0, r0, #2
 8008622:	3302      	addeq	r3, #2
 8008624:	2800      	cmp	r0, #0
 8008626:	db05      	blt.n	8008634 <__hi0bits+0x38>
 8008628:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800862c:	f103 0301 	add.w	r3, r3, #1
 8008630:	bf08      	it	eq
 8008632:	2320      	moveq	r3, #32
 8008634:	4618      	mov	r0, r3
 8008636:	4770      	bx	lr
 8008638:	2300      	movs	r3, #0
 800863a:	e7e4      	b.n	8008606 <__hi0bits+0xa>

0800863c <__lo0bits>:
 800863c:	6803      	ldr	r3, [r0, #0]
 800863e:	f013 0207 	ands.w	r2, r3, #7
 8008642:	d00c      	beq.n	800865e <__lo0bits+0x22>
 8008644:	07d9      	lsls	r1, r3, #31
 8008646:	d422      	bmi.n	800868e <__lo0bits+0x52>
 8008648:	079a      	lsls	r2, r3, #30
 800864a:	bf49      	itett	mi
 800864c:	085b      	lsrmi	r3, r3, #1
 800864e:	089b      	lsrpl	r3, r3, #2
 8008650:	6003      	strmi	r3, [r0, #0]
 8008652:	2201      	movmi	r2, #1
 8008654:	bf5c      	itt	pl
 8008656:	6003      	strpl	r3, [r0, #0]
 8008658:	2202      	movpl	r2, #2
 800865a:	4610      	mov	r0, r2
 800865c:	4770      	bx	lr
 800865e:	b299      	uxth	r1, r3
 8008660:	b909      	cbnz	r1, 8008666 <__lo0bits+0x2a>
 8008662:	0c1b      	lsrs	r3, r3, #16
 8008664:	2210      	movs	r2, #16
 8008666:	b2d9      	uxtb	r1, r3
 8008668:	b909      	cbnz	r1, 800866e <__lo0bits+0x32>
 800866a:	3208      	adds	r2, #8
 800866c:	0a1b      	lsrs	r3, r3, #8
 800866e:	0719      	lsls	r1, r3, #28
 8008670:	bf04      	itt	eq
 8008672:	091b      	lsreq	r3, r3, #4
 8008674:	3204      	addeq	r2, #4
 8008676:	0799      	lsls	r1, r3, #30
 8008678:	bf04      	itt	eq
 800867a:	089b      	lsreq	r3, r3, #2
 800867c:	3202      	addeq	r2, #2
 800867e:	07d9      	lsls	r1, r3, #31
 8008680:	d403      	bmi.n	800868a <__lo0bits+0x4e>
 8008682:	085b      	lsrs	r3, r3, #1
 8008684:	f102 0201 	add.w	r2, r2, #1
 8008688:	d003      	beq.n	8008692 <__lo0bits+0x56>
 800868a:	6003      	str	r3, [r0, #0]
 800868c:	e7e5      	b.n	800865a <__lo0bits+0x1e>
 800868e:	2200      	movs	r2, #0
 8008690:	e7e3      	b.n	800865a <__lo0bits+0x1e>
 8008692:	2220      	movs	r2, #32
 8008694:	e7e1      	b.n	800865a <__lo0bits+0x1e>
	...

08008698 <__i2b>:
 8008698:	b510      	push	{r4, lr}
 800869a:	460c      	mov	r4, r1
 800869c:	2101      	movs	r1, #1
 800869e:	f7ff ff05 	bl	80084ac <_Balloc>
 80086a2:	4602      	mov	r2, r0
 80086a4:	b928      	cbnz	r0, 80086b2 <__i2b+0x1a>
 80086a6:	4b05      	ldr	r3, [pc, #20]	; (80086bc <__i2b+0x24>)
 80086a8:	4805      	ldr	r0, [pc, #20]	; (80086c0 <__i2b+0x28>)
 80086aa:	f240 1145 	movw	r1, #325	; 0x145
 80086ae:	f000 fcb7 	bl	8009020 <__assert_func>
 80086b2:	2301      	movs	r3, #1
 80086b4:	6144      	str	r4, [r0, #20]
 80086b6:	6103      	str	r3, [r0, #16]
 80086b8:	bd10      	pop	{r4, pc}
 80086ba:	bf00      	nop
 80086bc:	080097c0 	.word	0x080097c0
 80086c0:	080097d1 	.word	0x080097d1

080086c4 <__multiply>:
 80086c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086c8:	4691      	mov	r9, r2
 80086ca:	690a      	ldr	r2, [r1, #16]
 80086cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80086d0:	429a      	cmp	r2, r3
 80086d2:	bfb8      	it	lt
 80086d4:	460b      	movlt	r3, r1
 80086d6:	460c      	mov	r4, r1
 80086d8:	bfbc      	itt	lt
 80086da:	464c      	movlt	r4, r9
 80086dc:	4699      	movlt	r9, r3
 80086de:	6927      	ldr	r7, [r4, #16]
 80086e0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80086e4:	68a3      	ldr	r3, [r4, #8]
 80086e6:	6861      	ldr	r1, [r4, #4]
 80086e8:	eb07 060a 	add.w	r6, r7, sl
 80086ec:	42b3      	cmp	r3, r6
 80086ee:	b085      	sub	sp, #20
 80086f0:	bfb8      	it	lt
 80086f2:	3101      	addlt	r1, #1
 80086f4:	f7ff feda 	bl	80084ac <_Balloc>
 80086f8:	b930      	cbnz	r0, 8008708 <__multiply+0x44>
 80086fa:	4602      	mov	r2, r0
 80086fc:	4b44      	ldr	r3, [pc, #272]	; (8008810 <__multiply+0x14c>)
 80086fe:	4845      	ldr	r0, [pc, #276]	; (8008814 <__multiply+0x150>)
 8008700:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008704:	f000 fc8c 	bl	8009020 <__assert_func>
 8008708:	f100 0514 	add.w	r5, r0, #20
 800870c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008710:	462b      	mov	r3, r5
 8008712:	2200      	movs	r2, #0
 8008714:	4543      	cmp	r3, r8
 8008716:	d321      	bcc.n	800875c <__multiply+0x98>
 8008718:	f104 0314 	add.w	r3, r4, #20
 800871c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008720:	f109 0314 	add.w	r3, r9, #20
 8008724:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008728:	9202      	str	r2, [sp, #8]
 800872a:	1b3a      	subs	r2, r7, r4
 800872c:	3a15      	subs	r2, #21
 800872e:	f022 0203 	bic.w	r2, r2, #3
 8008732:	3204      	adds	r2, #4
 8008734:	f104 0115 	add.w	r1, r4, #21
 8008738:	428f      	cmp	r7, r1
 800873a:	bf38      	it	cc
 800873c:	2204      	movcc	r2, #4
 800873e:	9201      	str	r2, [sp, #4]
 8008740:	9a02      	ldr	r2, [sp, #8]
 8008742:	9303      	str	r3, [sp, #12]
 8008744:	429a      	cmp	r2, r3
 8008746:	d80c      	bhi.n	8008762 <__multiply+0x9e>
 8008748:	2e00      	cmp	r6, #0
 800874a:	dd03      	ble.n	8008754 <__multiply+0x90>
 800874c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008750:	2b00      	cmp	r3, #0
 8008752:	d05b      	beq.n	800880c <__multiply+0x148>
 8008754:	6106      	str	r6, [r0, #16]
 8008756:	b005      	add	sp, #20
 8008758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800875c:	f843 2b04 	str.w	r2, [r3], #4
 8008760:	e7d8      	b.n	8008714 <__multiply+0x50>
 8008762:	f8b3 a000 	ldrh.w	sl, [r3]
 8008766:	f1ba 0f00 	cmp.w	sl, #0
 800876a:	d024      	beq.n	80087b6 <__multiply+0xf2>
 800876c:	f104 0e14 	add.w	lr, r4, #20
 8008770:	46a9      	mov	r9, r5
 8008772:	f04f 0c00 	mov.w	ip, #0
 8008776:	f85e 2b04 	ldr.w	r2, [lr], #4
 800877a:	f8d9 1000 	ldr.w	r1, [r9]
 800877e:	fa1f fb82 	uxth.w	fp, r2
 8008782:	b289      	uxth	r1, r1
 8008784:	fb0a 110b 	mla	r1, sl, fp, r1
 8008788:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800878c:	f8d9 2000 	ldr.w	r2, [r9]
 8008790:	4461      	add	r1, ip
 8008792:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008796:	fb0a c20b 	mla	r2, sl, fp, ip
 800879a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800879e:	b289      	uxth	r1, r1
 80087a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80087a4:	4577      	cmp	r7, lr
 80087a6:	f849 1b04 	str.w	r1, [r9], #4
 80087aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80087ae:	d8e2      	bhi.n	8008776 <__multiply+0xb2>
 80087b0:	9a01      	ldr	r2, [sp, #4]
 80087b2:	f845 c002 	str.w	ip, [r5, r2]
 80087b6:	9a03      	ldr	r2, [sp, #12]
 80087b8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80087bc:	3304      	adds	r3, #4
 80087be:	f1b9 0f00 	cmp.w	r9, #0
 80087c2:	d021      	beq.n	8008808 <__multiply+0x144>
 80087c4:	6829      	ldr	r1, [r5, #0]
 80087c6:	f104 0c14 	add.w	ip, r4, #20
 80087ca:	46ae      	mov	lr, r5
 80087cc:	f04f 0a00 	mov.w	sl, #0
 80087d0:	f8bc b000 	ldrh.w	fp, [ip]
 80087d4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80087d8:	fb09 220b 	mla	r2, r9, fp, r2
 80087dc:	4452      	add	r2, sl
 80087de:	b289      	uxth	r1, r1
 80087e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80087e4:	f84e 1b04 	str.w	r1, [lr], #4
 80087e8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80087ec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80087f0:	f8be 1000 	ldrh.w	r1, [lr]
 80087f4:	fb09 110a 	mla	r1, r9, sl, r1
 80087f8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80087fc:	4567      	cmp	r7, ip
 80087fe:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008802:	d8e5      	bhi.n	80087d0 <__multiply+0x10c>
 8008804:	9a01      	ldr	r2, [sp, #4]
 8008806:	50a9      	str	r1, [r5, r2]
 8008808:	3504      	adds	r5, #4
 800880a:	e799      	b.n	8008740 <__multiply+0x7c>
 800880c:	3e01      	subs	r6, #1
 800880e:	e79b      	b.n	8008748 <__multiply+0x84>
 8008810:	080097c0 	.word	0x080097c0
 8008814:	080097d1 	.word	0x080097d1

08008818 <__pow5mult>:
 8008818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800881c:	4615      	mov	r5, r2
 800881e:	f012 0203 	ands.w	r2, r2, #3
 8008822:	4606      	mov	r6, r0
 8008824:	460f      	mov	r7, r1
 8008826:	d007      	beq.n	8008838 <__pow5mult+0x20>
 8008828:	4c25      	ldr	r4, [pc, #148]	; (80088c0 <__pow5mult+0xa8>)
 800882a:	3a01      	subs	r2, #1
 800882c:	2300      	movs	r3, #0
 800882e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008832:	f7ff fe9d 	bl	8008570 <__multadd>
 8008836:	4607      	mov	r7, r0
 8008838:	10ad      	asrs	r5, r5, #2
 800883a:	d03d      	beq.n	80088b8 <__pow5mult+0xa0>
 800883c:	69f4      	ldr	r4, [r6, #28]
 800883e:	b97c      	cbnz	r4, 8008860 <__pow5mult+0x48>
 8008840:	2010      	movs	r0, #16
 8008842:	f7ff fd7f 	bl	8008344 <malloc>
 8008846:	4602      	mov	r2, r0
 8008848:	61f0      	str	r0, [r6, #28]
 800884a:	b928      	cbnz	r0, 8008858 <__pow5mult+0x40>
 800884c:	4b1d      	ldr	r3, [pc, #116]	; (80088c4 <__pow5mult+0xac>)
 800884e:	481e      	ldr	r0, [pc, #120]	; (80088c8 <__pow5mult+0xb0>)
 8008850:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008854:	f000 fbe4 	bl	8009020 <__assert_func>
 8008858:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800885c:	6004      	str	r4, [r0, #0]
 800885e:	60c4      	str	r4, [r0, #12]
 8008860:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008864:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008868:	b94c      	cbnz	r4, 800887e <__pow5mult+0x66>
 800886a:	f240 2171 	movw	r1, #625	; 0x271
 800886e:	4630      	mov	r0, r6
 8008870:	f7ff ff12 	bl	8008698 <__i2b>
 8008874:	2300      	movs	r3, #0
 8008876:	f8c8 0008 	str.w	r0, [r8, #8]
 800887a:	4604      	mov	r4, r0
 800887c:	6003      	str	r3, [r0, #0]
 800887e:	f04f 0900 	mov.w	r9, #0
 8008882:	07eb      	lsls	r3, r5, #31
 8008884:	d50a      	bpl.n	800889c <__pow5mult+0x84>
 8008886:	4639      	mov	r1, r7
 8008888:	4622      	mov	r2, r4
 800888a:	4630      	mov	r0, r6
 800888c:	f7ff ff1a 	bl	80086c4 <__multiply>
 8008890:	4639      	mov	r1, r7
 8008892:	4680      	mov	r8, r0
 8008894:	4630      	mov	r0, r6
 8008896:	f7ff fe49 	bl	800852c <_Bfree>
 800889a:	4647      	mov	r7, r8
 800889c:	106d      	asrs	r5, r5, #1
 800889e:	d00b      	beq.n	80088b8 <__pow5mult+0xa0>
 80088a0:	6820      	ldr	r0, [r4, #0]
 80088a2:	b938      	cbnz	r0, 80088b4 <__pow5mult+0x9c>
 80088a4:	4622      	mov	r2, r4
 80088a6:	4621      	mov	r1, r4
 80088a8:	4630      	mov	r0, r6
 80088aa:	f7ff ff0b 	bl	80086c4 <__multiply>
 80088ae:	6020      	str	r0, [r4, #0]
 80088b0:	f8c0 9000 	str.w	r9, [r0]
 80088b4:	4604      	mov	r4, r0
 80088b6:	e7e4      	b.n	8008882 <__pow5mult+0x6a>
 80088b8:	4638      	mov	r0, r7
 80088ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088be:	bf00      	nop
 80088c0:	08009920 	.word	0x08009920
 80088c4:	08009751 	.word	0x08009751
 80088c8:	080097d1 	.word	0x080097d1

080088cc <__lshift>:
 80088cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088d0:	460c      	mov	r4, r1
 80088d2:	6849      	ldr	r1, [r1, #4]
 80088d4:	6923      	ldr	r3, [r4, #16]
 80088d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80088da:	68a3      	ldr	r3, [r4, #8]
 80088dc:	4607      	mov	r7, r0
 80088de:	4691      	mov	r9, r2
 80088e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80088e4:	f108 0601 	add.w	r6, r8, #1
 80088e8:	42b3      	cmp	r3, r6
 80088ea:	db0b      	blt.n	8008904 <__lshift+0x38>
 80088ec:	4638      	mov	r0, r7
 80088ee:	f7ff fddd 	bl	80084ac <_Balloc>
 80088f2:	4605      	mov	r5, r0
 80088f4:	b948      	cbnz	r0, 800890a <__lshift+0x3e>
 80088f6:	4602      	mov	r2, r0
 80088f8:	4b28      	ldr	r3, [pc, #160]	; (800899c <__lshift+0xd0>)
 80088fa:	4829      	ldr	r0, [pc, #164]	; (80089a0 <__lshift+0xd4>)
 80088fc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008900:	f000 fb8e 	bl	8009020 <__assert_func>
 8008904:	3101      	adds	r1, #1
 8008906:	005b      	lsls	r3, r3, #1
 8008908:	e7ee      	b.n	80088e8 <__lshift+0x1c>
 800890a:	2300      	movs	r3, #0
 800890c:	f100 0114 	add.w	r1, r0, #20
 8008910:	f100 0210 	add.w	r2, r0, #16
 8008914:	4618      	mov	r0, r3
 8008916:	4553      	cmp	r3, sl
 8008918:	db33      	blt.n	8008982 <__lshift+0xb6>
 800891a:	6920      	ldr	r0, [r4, #16]
 800891c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008920:	f104 0314 	add.w	r3, r4, #20
 8008924:	f019 091f 	ands.w	r9, r9, #31
 8008928:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800892c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008930:	d02b      	beq.n	800898a <__lshift+0xbe>
 8008932:	f1c9 0e20 	rsb	lr, r9, #32
 8008936:	468a      	mov	sl, r1
 8008938:	2200      	movs	r2, #0
 800893a:	6818      	ldr	r0, [r3, #0]
 800893c:	fa00 f009 	lsl.w	r0, r0, r9
 8008940:	4310      	orrs	r0, r2
 8008942:	f84a 0b04 	str.w	r0, [sl], #4
 8008946:	f853 2b04 	ldr.w	r2, [r3], #4
 800894a:	459c      	cmp	ip, r3
 800894c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008950:	d8f3      	bhi.n	800893a <__lshift+0x6e>
 8008952:	ebac 0304 	sub.w	r3, ip, r4
 8008956:	3b15      	subs	r3, #21
 8008958:	f023 0303 	bic.w	r3, r3, #3
 800895c:	3304      	adds	r3, #4
 800895e:	f104 0015 	add.w	r0, r4, #21
 8008962:	4584      	cmp	ip, r0
 8008964:	bf38      	it	cc
 8008966:	2304      	movcc	r3, #4
 8008968:	50ca      	str	r2, [r1, r3]
 800896a:	b10a      	cbz	r2, 8008970 <__lshift+0xa4>
 800896c:	f108 0602 	add.w	r6, r8, #2
 8008970:	3e01      	subs	r6, #1
 8008972:	4638      	mov	r0, r7
 8008974:	612e      	str	r6, [r5, #16]
 8008976:	4621      	mov	r1, r4
 8008978:	f7ff fdd8 	bl	800852c <_Bfree>
 800897c:	4628      	mov	r0, r5
 800897e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008982:	f842 0f04 	str.w	r0, [r2, #4]!
 8008986:	3301      	adds	r3, #1
 8008988:	e7c5      	b.n	8008916 <__lshift+0x4a>
 800898a:	3904      	subs	r1, #4
 800898c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008990:	f841 2f04 	str.w	r2, [r1, #4]!
 8008994:	459c      	cmp	ip, r3
 8008996:	d8f9      	bhi.n	800898c <__lshift+0xc0>
 8008998:	e7ea      	b.n	8008970 <__lshift+0xa4>
 800899a:	bf00      	nop
 800899c:	080097c0 	.word	0x080097c0
 80089a0:	080097d1 	.word	0x080097d1

080089a4 <__mcmp>:
 80089a4:	b530      	push	{r4, r5, lr}
 80089a6:	6902      	ldr	r2, [r0, #16]
 80089a8:	690c      	ldr	r4, [r1, #16]
 80089aa:	1b12      	subs	r2, r2, r4
 80089ac:	d10e      	bne.n	80089cc <__mcmp+0x28>
 80089ae:	f100 0314 	add.w	r3, r0, #20
 80089b2:	3114      	adds	r1, #20
 80089b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80089b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80089bc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80089c0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80089c4:	42a5      	cmp	r5, r4
 80089c6:	d003      	beq.n	80089d0 <__mcmp+0x2c>
 80089c8:	d305      	bcc.n	80089d6 <__mcmp+0x32>
 80089ca:	2201      	movs	r2, #1
 80089cc:	4610      	mov	r0, r2
 80089ce:	bd30      	pop	{r4, r5, pc}
 80089d0:	4283      	cmp	r3, r0
 80089d2:	d3f3      	bcc.n	80089bc <__mcmp+0x18>
 80089d4:	e7fa      	b.n	80089cc <__mcmp+0x28>
 80089d6:	f04f 32ff 	mov.w	r2, #4294967295
 80089da:	e7f7      	b.n	80089cc <__mcmp+0x28>

080089dc <__mdiff>:
 80089dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089e0:	460c      	mov	r4, r1
 80089e2:	4606      	mov	r6, r0
 80089e4:	4611      	mov	r1, r2
 80089e6:	4620      	mov	r0, r4
 80089e8:	4690      	mov	r8, r2
 80089ea:	f7ff ffdb 	bl	80089a4 <__mcmp>
 80089ee:	1e05      	subs	r5, r0, #0
 80089f0:	d110      	bne.n	8008a14 <__mdiff+0x38>
 80089f2:	4629      	mov	r1, r5
 80089f4:	4630      	mov	r0, r6
 80089f6:	f7ff fd59 	bl	80084ac <_Balloc>
 80089fa:	b930      	cbnz	r0, 8008a0a <__mdiff+0x2e>
 80089fc:	4b3a      	ldr	r3, [pc, #232]	; (8008ae8 <__mdiff+0x10c>)
 80089fe:	4602      	mov	r2, r0
 8008a00:	f240 2137 	movw	r1, #567	; 0x237
 8008a04:	4839      	ldr	r0, [pc, #228]	; (8008aec <__mdiff+0x110>)
 8008a06:	f000 fb0b 	bl	8009020 <__assert_func>
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008a10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a14:	bfa4      	itt	ge
 8008a16:	4643      	movge	r3, r8
 8008a18:	46a0      	movge	r8, r4
 8008a1a:	4630      	mov	r0, r6
 8008a1c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008a20:	bfa6      	itte	ge
 8008a22:	461c      	movge	r4, r3
 8008a24:	2500      	movge	r5, #0
 8008a26:	2501      	movlt	r5, #1
 8008a28:	f7ff fd40 	bl	80084ac <_Balloc>
 8008a2c:	b920      	cbnz	r0, 8008a38 <__mdiff+0x5c>
 8008a2e:	4b2e      	ldr	r3, [pc, #184]	; (8008ae8 <__mdiff+0x10c>)
 8008a30:	4602      	mov	r2, r0
 8008a32:	f240 2145 	movw	r1, #581	; 0x245
 8008a36:	e7e5      	b.n	8008a04 <__mdiff+0x28>
 8008a38:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008a3c:	6926      	ldr	r6, [r4, #16]
 8008a3e:	60c5      	str	r5, [r0, #12]
 8008a40:	f104 0914 	add.w	r9, r4, #20
 8008a44:	f108 0514 	add.w	r5, r8, #20
 8008a48:	f100 0e14 	add.w	lr, r0, #20
 8008a4c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008a50:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008a54:	f108 0210 	add.w	r2, r8, #16
 8008a58:	46f2      	mov	sl, lr
 8008a5a:	2100      	movs	r1, #0
 8008a5c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008a60:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008a64:	fa11 f88b 	uxtah	r8, r1, fp
 8008a68:	b299      	uxth	r1, r3
 8008a6a:	0c1b      	lsrs	r3, r3, #16
 8008a6c:	eba8 0801 	sub.w	r8, r8, r1
 8008a70:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008a74:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008a78:	fa1f f888 	uxth.w	r8, r8
 8008a7c:	1419      	asrs	r1, r3, #16
 8008a7e:	454e      	cmp	r6, r9
 8008a80:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008a84:	f84a 3b04 	str.w	r3, [sl], #4
 8008a88:	d8e8      	bhi.n	8008a5c <__mdiff+0x80>
 8008a8a:	1b33      	subs	r3, r6, r4
 8008a8c:	3b15      	subs	r3, #21
 8008a8e:	f023 0303 	bic.w	r3, r3, #3
 8008a92:	3304      	adds	r3, #4
 8008a94:	3415      	adds	r4, #21
 8008a96:	42a6      	cmp	r6, r4
 8008a98:	bf38      	it	cc
 8008a9a:	2304      	movcc	r3, #4
 8008a9c:	441d      	add	r5, r3
 8008a9e:	4473      	add	r3, lr
 8008aa0:	469e      	mov	lr, r3
 8008aa2:	462e      	mov	r6, r5
 8008aa4:	4566      	cmp	r6, ip
 8008aa6:	d30e      	bcc.n	8008ac6 <__mdiff+0xea>
 8008aa8:	f10c 0203 	add.w	r2, ip, #3
 8008aac:	1b52      	subs	r2, r2, r5
 8008aae:	f022 0203 	bic.w	r2, r2, #3
 8008ab2:	3d03      	subs	r5, #3
 8008ab4:	45ac      	cmp	ip, r5
 8008ab6:	bf38      	it	cc
 8008ab8:	2200      	movcc	r2, #0
 8008aba:	4413      	add	r3, r2
 8008abc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008ac0:	b17a      	cbz	r2, 8008ae2 <__mdiff+0x106>
 8008ac2:	6107      	str	r7, [r0, #16]
 8008ac4:	e7a4      	b.n	8008a10 <__mdiff+0x34>
 8008ac6:	f856 8b04 	ldr.w	r8, [r6], #4
 8008aca:	fa11 f288 	uxtah	r2, r1, r8
 8008ace:	1414      	asrs	r4, r2, #16
 8008ad0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008ad4:	b292      	uxth	r2, r2
 8008ad6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008ada:	f84e 2b04 	str.w	r2, [lr], #4
 8008ade:	1421      	asrs	r1, r4, #16
 8008ae0:	e7e0      	b.n	8008aa4 <__mdiff+0xc8>
 8008ae2:	3f01      	subs	r7, #1
 8008ae4:	e7ea      	b.n	8008abc <__mdiff+0xe0>
 8008ae6:	bf00      	nop
 8008ae8:	080097c0 	.word	0x080097c0
 8008aec:	080097d1 	.word	0x080097d1

08008af0 <__d2b>:
 8008af0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008af4:	460f      	mov	r7, r1
 8008af6:	2101      	movs	r1, #1
 8008af8:	ec59 8b10 	vmov	r8, r9, d0
 8008afc:	4616      	mov	r6, r2
 8008afe:	f7ff fcd5 	bl	80084ac <_Balloc>
 8008b02:	4604      	mov	r4, r0
 8008b04:	b930      	cbnz	r0, 8008b14 <__d2b+0x24>
 8008b06:	4602      	mov	r2, r0
 8008b08:	4b24      	ldr	r3, [pc, #144]	; (8008b9c <__d2b+0xac>)
 8008b0a:	4825      	ldr	r0, [pc, #148]	; (8008ba0 <__d2b+0xb0>)
 8008b0c:	f240 310f 	movw	r1, #783	; 0x30f
 8008b10:	f000 fa86 	bl	8009020 <__assert_func>
 8008b14:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008b18:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008b1c:	bb2d      	cbnz	r5, 8008b6a <__d2b+0x7a>
 8008b1e:	9301      	str	r3, [sp, #4]
 8008b20:	f1b8 0300 	subs.w	r3, r8, #0
 8008b24:	d026      	beq.n	8008b74 <__d2b+0x84>
 8008b26:	4668      	mov	r0, sp
 8008b28:	9300      	str	r3, [sp, #0]
 8008b2a:	f7ff fd87 	bl	800863c <__lo0bits>
 8008b2e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008b32:	b1e8      	cbz	r0, 8008b70 <__d2b+0x80>
 8008b34:	f1c0 0320 	rsb	r3, r0, #32
 8008b38:	fa02 f303 	lsl.w	r3, r2, r3
 8008b3c:	430b      	orrs	r3, r1
 8008b3e:	40c2      	lsrs	r2, r0
 8008b40:	6163      	str	r3, [r4, #20]
 8008b42:	9201      	str	r2, [sp, #4]
 8008b44:	9b01      	ldr	r3, [sp, #4]
 8008b46:	61a3      	str	r3, [r4, #24]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	bf14      	ite	ne
 8008b4c:	2202      	movne	r2, #2
 8008b4e:	2201      	moveq	r2, #1
 8008b50:	6122      	str	r2, [r4, #16]
 8008b52:	b1bd      	cbz	r5, 8008b84 <__d2b+0x94>
 8008b54:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008b58:	4405      	add	r5, r0
 8008b5a:	603d      	str	r5, [r7, #0]
 8008b5c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008b60:	6030      	str	r0, [r6, #0]
 8008b62:	4620      	mov	r0, r4
 8008b64:	b003      	add	sp, #12
 8008b66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008b6e:	e7d6      	b.n	8008b1e <__d2b+0x2e>
 8008b70:	6161      	str	r1, [r4, #20]
 8008b72:	e7e7      	b.n	8008b44 <__d2b+0x54>
 8008b74:	a801      	add	r0, sp, #4
 8008b76:	f7ff fd61 	bl	800863c <__lo0bits>
 8008b7a:	9b01      	ldr	r3, [sp, #4]
 8008b7c:	6163      	str	r3, [r4, #20]
 8008b7e:	3020      	adds	r0, #32
 8008b80:	2201      	movs	r2, #1
 8008b82:	e7e5      	b.n	8008b50 <__d2b+0x60>
 8008b84:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008b88:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008b8c:	6038      	str	r0, [r7, #0]
 8008b8e:	6918      	ldr	r0, [r3, #16]
 8008b90:	f7ff fd34 	bl	80085fc <__hi0bits>
 8008b94:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008b98:	e7e2      	b.n	8008b60 <__d2b+0x70>
 8008b9a:	bf00      	nop
 8008b9c:	080097c0 	.word	0x080097c0
 8008ba0:	080097d1 	.word	0x080097d1

08008ba4 <__ssputs_r>:
 8008ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ba8:	688e      	ldr	r6, [r1, #8]
 8008baa:	461f      	mov	r7, r3
 8008bac:	42be      	cmp	r6, r7
 8008bae:	680b      	ldr	r3, [r1, #0]
 8008bb0:	4682      	mov	sl, r0
 8008bb2:	460c      	mov	r4, r1
 8008bb4:	4690      	mov	r8, r2
 8008bb6:	d82c      	bhi.n	8008c12 <__ssputs_r+0x6e>
 8008bb8:	898a      	ldrh	r2, [r1, #12]
 8008bba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008bbe:	d026      	beq.n	8008c0e <__ssputs_r+0x6a>
 8008bc0:	6965      	ldr	r5, [r4, #20]
 8008bc2:	6909      	ldr	r1, [r1, #16]
 8008bc4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008bc8:	eba3 0901 	sub.w	r9, r3, r1
 8008bcc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008bd0:	1c7b      	adds	r3, r7, #1
 8008bd2:	444b      	add	r3, r9
 8008bd4:	106d      	asrs	r5, r5, #1
 8008bd6:	429d      	cmp	r5, r3
 8008bd8:	bf38      	it	cc
 8008bda:	461d      	movcc	r5, r3
 8008bdc:	0553      	lsls	r3, r2, #21
 8008bde:	d527      	bpl.n	8008c30 <__ssputs_r+0x8c>
 8008be0:	4629      	mov	r1, r5
 8008be2:	f7ff fbd7 	bl	8008394 <_malloc_r>
 8008be6:	4606      	mov	r6, r0
 8008be8:	b360      	cbz	r0, 8008c44 <__ssputs_r+0xa0>
 8008bea:	6921      	ldr	r1, [r4, #16]
 8008bec:	464a      	mov	r2, r9
 8008bee:	f000 fa09 	bl	8009004 <memcpy>
 8008bf2:	89a3      	ldrh	r3, [r4, #12]
 8008bf4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bfc:	81a3      	strh	r3, [r4, #12]
 8008bfe:	6126      	str	r6, [r4, #16]
 8008c00:	6165      	str	r5, [r4, #20]
 8008c02:	444e      	add	r6, r9
 8008c04:	eba5 0509 	sub.w	r5, r5, r9
 8008c08:	6026      	str	r6, [r4, #0]
 8008c0a:	60a5      	str	r5, [r4, #8]
 8008c0c:	463e      	mov	r6, r7
 8008c0e:	42be      	cmp	r6, r7
 8008c10:	d900      	bls.n	8008c14 <__ssputs_r+0x70>
 8008c12:	463e      	mov	r6, r7
 8008c14:	6820      	ldr	r0, [r4, #0]
 8008c16:	4632      	mov	r2, r6
 8008c18:	4641      	mov	r1, r8
 8008c1a:	f000 f9c9 	bl	8008fb0 <memmove>
 8008c1e:	68a3      	ldr	r3, [r4, #8]
 8008c20:	1b9b      	subs	r3, r3, r6
 8008c22:	60a3      	str	r3, [r4, #8]
 8008c24:	6823      	ldr	r3, [r4, #0]
 8008c26:	4433      	add	r3, r6
 8008c28:	6023      	str	r3, [r4, #0]
 8008c2a:	2000      	movs	r0, #0
 8008c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c30:	462a      	mov	r2, r5
 8008c32:	f000 fa3b 	bl	80090ac <_realloc_r>
 8008c36:	4606      	mov	r6, r0
 8008c38:	2800      	cmp	r0, #0
 8008c3a:	d1e0      	bne.n	8008bfe <__ssputs_r+0x5a>
 8008c3c:	6921      	ldr	r1, [r4, #16]
 8008c3e:	4650      	mov	r0, sl
 8008c40:	f7ff fb34 	bl	80082ac <_free_r>
 8008c44:	230c      	movs	r3, #12
 8008c46:	f8ca 3000 	str.w	r3, [sl]
 8008c4a:	89a3      	ldrh	r3, [r4, #12]
 8008c4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c50:	81a3      	strh	r3, [r4, #12]
 8008c52:	f04f 30ff 	mov.w	r0, #4294967295
 8008c56:	e7e9      	b.n	8008c2c <__ssputs_r+0x88>

08008c58 <_svfiprintf_r>:
 8008c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c5c:	4698      	mov	r8, r3
 8008c5e:	898b      	ldrh	r3, [r1, #12]
 8008c60:	061b      	lsls	r3, r3, #24
 8008c62:	b09d      	sub	sp, #116	; 0x74
 8008c64:	4607      	mov	r7, r0
 8008c66:	460d      	mov	r5, r1
 8008c68:	4614      	mov	r4, r2
 8008c6a:	d50e      	bpl.n	8008c8a <_svfiprintf_r+0x32>
 8008c6c:	690b      	ldr	r3, [r1, #16]
 8008c6e:	b963      	cbnz	r3, 8008c8a <_svfiprintf_r+0x32>
 8008c70:	2140      	movs	r1, #64	; 0x40
 8008c72:	f7ff fb8f 	bl	8008394 <_malloc_r>
 8008c76:	6028      	str	r0, [r5, #0]
 8008c78:	6128      	str	r0, [r5, #16]
 8008c7a:	b920      	cbnz	r0, 8008c86 <_svfiprintf_r+0x2e>
 8008c7c:	230c      	movs	r3, #12
 8008c7e:	603b      	str	r3, [r7, #0]
 8008c80:	f04f 30ff 	mov.w	r0, #4294967295
 8008c84:	e0d0      	b.n	8008e28 <_svfiprintf_r+0x1d0>
 8008c86:	2340      	movs	r3, #64	; 0x40
 8008c88:	616b      	str	r3, [r5, #20]
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	9309      	str	r3, [sp, #36]	; 0x24
 8008c8e:	2320      	movs	r3, #32
 8008c90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c94:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c98:	2330      	movs	r3, #48	; 0x30
 8008c9a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008e40 <_svfiprintf_r+0x1e8>
 8008c9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ca2:	f04f 0901 	mov.w	r9, #1
 8008ca6:	4623      	mov	r3, r4
 8008ca8:	469a      	mov	sl, r3
 8008caa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008cae:	b10a      	cbz	r2, 8008cb4 <_svfiprintf_r+0x5c>
 8008cb0:	2a25      	cmp	r2, #37	; 0x25
 8008cb2:	d1f9      	bne.n	8008ca8 <_svfiprintf_r+0x50>
 8008cb4:	ebba 0b04 	subs.w	fp, sl, r4
 8008cb8:	d00b      	beq.n	8008cd2 <_svfiprintf_r+0x7a>
 8008cba:	465b      	mov	r3, fp
 8008cbc:	4622      	mov	r2, r4
 8008cbe:	4629      	mov	r1, r5
 8008cc0:	4638      	mov	r0, r7
 8008cc2:	f7ff ff6f 	bl	8008ba4 <__ssputs_r>
 8008cc6:	3001      	adds	r0, #1
 8008cc8:	f000 80a9 	beq.w	8008e1e <_svfiprintf_r+0x1c6>
 8008ccc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008cce:	445a      	add	r2, fp
 8008cd0:	9209      	str	r2, [sp, #36]	; 0x24
 8008cd2:	f89a 3000 	ldrb.w	r3, [sl]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	f000 80a1 	beq.w	8008e1e <_svfiprintf_r+0x1c6>
 8008cdc:	2300      	movs	r3, #0
 8008cde:	f04f 32ff 	mov.w	r2, #4294967295
 8008ce2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ce6:	f10a 0a01 	add.w	sl, sl, #1
 8008cea:	9304      	str	r3, [sp, #16]
 8008cec:	9307      	str	r3, [sp, #28]
 8008cee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008cf2:	931a      	str	r3, [sp, #104]	; 0x68
 8008cf4:	4654      	mov	r4, sl
 8008cf6:	2205      	movs	r2, #5
 8008cf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cfc:	4850      	ldr	r0, [pc, #320]	; (8008e40 <_svfiprintf_r+0x1e8>)
 8008cfe:	f7f7 fa67 	bl	80001d0 <memchr>
 8008d02:	9a04      	ldr	r2, [sp, #16]
 8008d04:	b9d8      	cbnz	r0, 8008d3e <_svfiprintf_r+0xe6>
 8008d06:	06d0      	lsls	r0, r2, #27
 8008d08:	bf44      	itt	mi
 8008d0a:	2320      	movmi	r3, #32
 8008d0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d10:	0711      	lsls	r1, r2, #28
 8008d12:	bf44      	itt	mi
 8008d14:	232b      	movmi	r3, #43	; 0x2b
 8008d16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d1a:	f89a 3000 	ldrb.w	r3, [sl]
 8008d1e:	2b2a      	cmp	r3, #42	; 0x2a
 8008d20:	d015      	beq.n	8008d4e <_svfiprintf_r+0xf6>
 8008d22:	9a07      	ldr	r2, [sp, #28]
 8008d24:	4654      	mov	r4, sl
 8008d26:	2000      	movs	r0, #0
 8008d28:	f04f 0c0a 	mov.w	ip, #10
 8008d2c:	4621      	mov	r1, r4
 8008d2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d32:	3b30      	subs	r3, #48	; 0x30
 8008d34:	2b09      	cmp	r3, #9
 8008d36:	d94d      	bls.n	8008dd4 <_svfiprintf_r+0x17c>
 8008d38:	b1b0      	cbz	r0, 8008d68 <_svfiprintf_r+0x110>
 8008d3a:	9207      	str	r2, [sp, #28]
 8008d3c:	e014      	b.n	8008d68 <_svfiprintf_r+0x110>
 8008d3e:	eba0 0308 	sub.w	r3, r0, r8
 8008d42:	fa09 f303 	lsl.w	r3, r9, r3
 8008d46:	4313      	orrs	r3, r2
 8008d48:	9304      	str	r3, [sp, #16]
 8008d4a:	46a2      	mov	sl, r4
 8008d4c:	e7d2      	b.n	8008cf4 <_svfiprintf_r+0x9c>
 8008d4e:	9b03      	ldr	r3, [sp, #12]
 8008d50:	1d19      	adds	r1, r3, #4
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	9103      	str	r1, [sp, #12]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	bfbb      	ittet	lt
 8008d5a:	425b      	neglt	r3, r3
 8008d5c:	f042 0202 	orrlt.w	r2, r2, #2
 8008d60:	9307      	strge	r3, [sp, #28]
 8008d62:	9307      	strlt	r3, [sp, #28]
 8008d64:	bfb8      	it	lt
 8008d66:	9204      	strlt	r2, [sp, #16]
 8008d68:	7823      	ldrb	r3, [r4, #0]
 8008d6a:	2b2e      	cmp	r3, #46	; 0x2e
 8008d6c:	d10c      	bne.n	8008d88 <_svfiprintf_r+0x130>
 8008d6e:	7863      	ldrb	r3, [r4, #1]
 8008d70:	2b2a      	cmp	r3, #42	; 0x2a
 8008d72:	d134      	bne.n	8008dde <_svfiprintf_r+0x186>
 8008d74:	9b03      	ldr	r3, [sp, #12]
 8008d76:	1d1a      	adds	r2, r3, #4
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	9203      	str	r2, [sp, #12]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	bfb8      	it	lt
 8008d80:	f04f 33ff 	movlt.w	r3, #4294967295
 8008d84:	3402      	adds	r4, #2
 8008d86:	9305      	str	r3, [sp, #20]
 8008d88:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008e50 <_svfiprintf_r+0x1f8>
 8008d8c:	7821      	ldrb	r1, [r4, #0]
 8008d8e:	2203      	movs	r2, #3
 8008d90:	4650      	mov	r0, sl
 8008d92:	f7f7 fa1d 	bl	80001d0 <memchr>
 8008d96:	b138      	cbz	r0, 8008da8 <_svfiprintf_r+0x150>
 8008d98:	9b04      	ldr	r3, [sp, #16]
 8008d9a:	eba0 000a 	sub.w	r0, r0, sl
 8008d9e:	2240      	movs	r2, #64	; 0x40
 8008da0:	4082      	lsls	r2, r0
 8008da2:	4313      	orrs	r3, r2
 8008da4:	3401      	adds	r4, #1
 8008da6:	9304      	str	r3, [sp, #16]
 8008da8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dac:	4825      	ldr	r0, [pc, #148]	; (8008e44 <_svfiprintf_r+0x1ec>)
 8008dae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008db2:	2206      	movs	r2, #6
 8008db4:	f7f7 fa0c 	bl	80001d0 <memchr>
 8008db8:	2800      	cmp	r0, #0
 8008dba:	d038      	beq.n	8008e2e <_svfiprintf_r+0x1d6>
 8008dbc:	4b22      	ldr	r3, [pc, #136]	; (8008e48 <_svfiprintf_r+0x1f0>)
 8008dbe:	bb1b      	cbnz	r3, 8008e08 <_svfiprintf_r+0x1b0>
 8008dc0:	9b03      	ldr	r3, [sp, #12]
 8008dc2:	3307      	adds	r3, #7
 8008dc4:	f023 0307 	bic.w	r3, r3, #7
 8008dc8:	3308      	adds	r3, #8
 8008dca:	9303      	str	r3, [sp, #12]
 8008dcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dce:	4433      	add	r3, r6
 8008dd0:	9309      	str	r3, [sp, #36]	; 0x24
 8008dd2:	e768      	b.n	8008ca6 <_svfiprintf_r+0x4e>
 8008dd4:	fb0c 3202 	mla	r2, ip, r2, r3
 8008dd8:	460c      	mov	r4, r1
 8008dda:	2001      	movs	r0, #1
 8008ddc:	e7a6      	b.n	8008d2c <_svfiprintf_r+0xd4>
 8008dde:	2300      	movs	r3, #0
 8008de0:	3401      	adds	r4, #1
 8008de2:	9305      	str	r3, [sp, #20]
 8008de4:	4619      	mov	r1, r3
 8008de6:	f04f 0c0a 	mov.w	ip, #10
 8008dea:	4620      	mov	r0, r4
 8008dec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008df0:	3a30      	subs	r2, #48	; 0x30
 8008df2:	2a09      	cmp	r2, #9
 8008df4:	d903      	bls.n	8008dfe <_svfiprintf_r+0x1a6>
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d0c6      	beq.n	8008d88 <_svfiprintf_r+0x130>
 8008dfa:	9105      	str	r1, [sp, #20]
 8008dfc:	e7c4      	b.n	8008d88 <_svfiprintf_r+0x130>
 8008dfe:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e02:	4604      	mov	r4, r0
 8008e04:	2301      	movs	r3, #1
 8008e06:	e7f0      	b.n	8008dea <_svfiprintf_r+0x192>
 8008e08:	ab03      	add	r3, sp, #12
 8008e0a:	9300      	str	r3, [sp, #0]
 8008e0c:	462a      	mov	r2, r5
 8008e0e:	4b0f      	ldr	r3, [pc, #60]	; (8008e4c <_svfiprintf_r+0x1f4>)
 8008e10:	a904      	add	r1, sp, #16
 8008e12:	4638      	mov	r0, r7
 8008e14:	f7fd fe64 	bl	8006ae0 <_printf_float>
 8008e18:	1c42      	adds	r2, r0, #1
 8008e1a:	4606      	mov	r6, r0
 8008e1c:	d1d6      	bne.n	8008dcc <_svfiprintf_r+0x174>
 8008e1e:	89ab      	ldrh	r3, [r5, #12]
 8008e20:	065b      	lsls	r3, r3, #25
 8008e22:	f53f af2d 	bmi.w	8008c80 <_svfiprintf_r+0x28>
 8008e26:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e28:	b01d      	add	sp, #116	; 0x74
 8008e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e2e:	ab03      	add	r3, sp, #12
 8008e30:	9300      	str	r3, [sp, #0]
 8008e32:	462a      	mov	r2, r5
 8008e34:	4b05      	ldr	r3, [pc, #20]	; (8008e4c <_svfiprintf_r+0x1f4>)
 8008e36:	a904      	add	r1, sp, #16
 8008e38:	4638      	mov	r0, r7
 8008e3a:	f7fe f8f5 	bl	8007028 <_printf_i>
 8008e3e:	e7eb      	b.n	8008e18 <_svfiprintf_r+0x1c0>
 8008e40:	0800992c 	.word	0x0800992c
 8008e44:	08009936 	.word	0x08009936
 8008e48:	08006ae1 	.word	0x08006ae1
 8008e4c:	08008ba5 	.word	0x08008ba5
 8008e50:	08009932 	.word	0x08009932

08008e54 <__sflush_r>:
 8008e54:	898a      	ldrh	r2, [r1, #12]
 8008e56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e5a:	4605      	mov	r5, r0
 8008e5c:	0710      	lsls	r0, r2, #28
 8008e5e:	460c      	mov	r4, r1
 8008e60:	d458      	bmi.n	8008f14 <__sflush_r+0xc0>
 8008e62:	684b      	ldr	r3, [r1, #4]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	dc05      	bgt.n	8008e74 <__sflush_r+0x20>
 8008e68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	dc02      	bgt.n	8008e74 <__sflush_r+0x20>
 8008e6e:	2000      	movs	r0, #0
 8008e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008e76:	2e00      	cmp	r6, #0
 8008e78:	d0f9      	beq.n	8008e6e <__sflush_r+0x1a>
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008e80:	682f      	ldr	r7, [r5, #0]
 8008e82:	6a21      	ldr	r1, [r4, #32]
 8008e84:	602b      	str	r3, [r5, #0]
 8008e86:	d032      	beq.n	8008eee <__sflush_r+0x9a>
 8008e88:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008e8a:	89a3      	ldrh	r3, [r4, #12]
 8008e8c:	075a      	lsls	r2, r3, #29
 8008e8e:	d505      	bpl.n	8008e9c <__sflush_r+0x48>
 8008e90:	6863      	ldr	r3, [r4, #4]
 8008e92:	1ac0      	subs	r0, r0, r3
 8008e94:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008e96:	b10b      	cbz	r3, 8008e9c <__sflush_r+0x48>
 8008e98:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008e9a:	1ac0      	subs	r0, r0, r3
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	4602      	mov	r2, r0
 8008ea0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ea2:	6a21      	ldr	r1, [r4, #32]
 8008ea4:	4628      	mov	r0, r5
 8008ea6:	47b0      	blx	r6
 8008ea8:	1c43      	adds	r3, r0, #1
 8008eaa:	89a3      	ldrh	r3, [r4, #12]
 8008eac:	d106      	bne.n	8008ebc <__sflush_r+0x68>
 8008eae:	6829      	ldr	r1, [r5, #0]
 8008eb0:	291d      	cmp	r1, #29
 8008eb2:	d82b      	bhi.n	8008f0c <__sflush_r+0xb8>
 8008eb4:	4a29      	ldr	r2, [pc, #164]	; (8008f5c <__sflush_r+0x108>)
 8008eb6:	410a      	asrs	r2, r1
 8008eb8:	07d6      	lsls	r6, r2, #31
 8008eba:	d427      	bmi.n	8008f0c <__sflush_r+0xb8>
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	6062      	str	r2, [r4, #4]
 8008ec0:	04d9      	lsls	r1, r3, #19
 8008ec2:	6922      	ldr	r2, [r4, #16]
 8008ec4:	6022      	str	r2, [r4, #0]
 8008ec6:	d504      	bpl.n	8008ed2 <__sflush_r+0x7e>
 8008ec8:	1c42      	adds	r2, r0, #1
 8008eca:	d101      	bne.n	8008ed0 <__sflush_r+0x7c>
 8008ecc:	682b      	ldr	r3, [r5, #0]
 8008ece:	b903      	cbnz	r3, 8008ed2 <__sflush_r+0x7e>
 8008ed0:	6560      	str	r0, [r4, #84]	; 0x54
 8008ed2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ed4:	602f      	str	r7, [r5, #0]
 8008ed6:	2900      	cmp	r1, #0
 8008ed8:	d0c9      	beq.n	8008e6e <__sflush_r+0x1a>
 8008eda:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ede:	4299      	cmp	r1, r3
 8008ee0:	d002      	beq.n	8008ee8 <__sflush_r+0x94>
 8008ee2:	4628      	mov	r0, r5
 8008ee4:	f7ff f9e2 	bl	80082ac <_free_r>
 8008ee8:	2000      	movs	r0, #0
 8008eea:	6360      	str	r0, [r4, #52]	; 0x34
 8008eec:	e7c0      	b.n	8008e70 <__sflush_r+0x1c>
 8008eee:	2301      	movs	r3, #1
 8008ef0:	4628      	mov	r0, r5
 8008ef2:	47b0      	blx	r6
 8008ef4:	1c41      	adds	r1, r0, #1
 8008ef6:	d1c8      	bne.n	8008e8a <__sflush_r+0x36>
 8008ef8:	682b      	ldr	r3, [r5, #0]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d0c5      	beq.n	8008e8a <__sflush_r+0x36>
 8008efe:	2b1d      	cmp	r3, #29
 8008f00:	d001      	beq.n	8008f06 <__sflush_r+0xb2>
 8008f02:	2b16      	cmp	r3, #22
 8008f04:	d101      	bne.n	8008f0a <__sflush_r+0xb6>
 8008f06:	602f      	str	r7, [r5, #0]
 8008f08:	e7b1      	b.n	8008e6e <__sflush_r+0x1a>
 8008f0a:	89a3      	ldrh	r3, [r4, #12]
 8008f0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f10:	81a3      	strh	r3, [r4, #12]
 8008f12:	e7ad      	b.n	8008e70 <__sflush_r+0x1c>
 8008f14:	690f      	ldr	r7, [r1, #16]
 8008f16:	2f00      	cmp	r7, #0
 8008f18:	d0a9      	beq.n	8008e6e <__sflush_r+0x1a>
 8008f1a:	0793      	lsls	r3, r2, #30
 8008f1c:	680e      	ldr	r6, [r1, #0]
 8008f1e:	bf08      	it	eq
 8008f20:	694b      	ldreq	r3, [r1, #20]
 8008f22:	600f      	str	r7, [r1, #0]
 8008f24:	bf18      	it	ne
 8008f26:	2300      	movne	r3, #0
 8008f28:	eba6 0807 	sub.w	r8, r6, r7
 8008f2c:	608b      	str	r3, [r1, #8]
 8008f2e:	f1b8 0f00 	cmp.w	r8, #0
 8008f32:	dd9c      	ble.n	8008e6e <__sflush_r+0x1a>
 8008f34:	6a21      	ldr	r1, [r4, #32]
 8008f36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008f38:	4643      	mov	r3, r8
 8008f3a:	463a      	mov	r2, r7
 8008f3c:	4628      	mov	r0, r5
 8008f3e:	47b0      	blx	r6
 8008f40:	2800      	cmp	r0, #0
 8008f42:	dc06      	bgt.n	8008f52 <__sflush_r+0xfe>
 8008f44:	89a3      	ldrh	r3, [r4, #12]
 8008f46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f4a:	81a3      	strh	r3, [r4, #12]
 8008f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f50:	e78e      	b.n	8008e70 <__sflush_r+0x1c>
 8008f52:	4407      	add	r7, r0
 8008f54:	eba8 0800 	sub.w	r8, r8, r0
 8008f58:	e7e9      	b.n	8008f2e <__sflush_r+0xda>
 8008f5a:	bf00      	nop
 8008f5c:	dfbffffe 	.word	0xdfbffffe

08008f60 <_fflush_r>:
 8008f60:	b538      	push	{r3, r4, r5, lr}
 8008f62:	690b      	ldr	r3, [r1, #16]
 8008f64:	4605      	mov	r5, r0
 8008f66:	460c      	mov	r4, r1
 8008f68:	b913      	cbnz	r3, 8008f70 <_fflush_r+0x10>
 8008f6a:	2500      	movs	r5, #0
 8008f6c:	4628      	mov	r0, r5
 8008f6e:	bd38      	pop	{r3, r4, r5, pc}
 8008f70:	b118      	cbz	r0, 8008f7a <_fflush_r+0x1a>
 8008f72:	6a03      	ldr	r3, [r0, #32]
 8008f74:	b90b      	cbnz	r3, 8008f7a <_fflush_r+0x1a>
 8008f76:	f7fe fa05 	bl	8007384 <__sinit>
 8008f7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d0f3      	beq.n	8008f6a <_fflush_r+0xa>
 8008f82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008f84:	07d0      	lsls	r0, r2, #31
 8008f86:	d404      	bmi.n	8008f92 <_fflush_r+0x32>
 8008f88:	0599      	lsls	r1, r3, #22
 8008f8a:	d402      	bmi.n	8008f92 <_fflush_r+0x32>
 8008f8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f8e:	f7fe fb10 	bl	80075b2 <__retarget_lock_acquire_recursive>
 8008f92:	4628      	mov	r0, r5
 8008f94:	4621      	mov	r1, r4
 8008f96:	f7ff ff5d 	bl	8008e54 <__sflush_r>
 8008f9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f9c:	07da      	lsls	r2, r3, #31
 8008f9e:	4605      	mov	r5, r0
 8008fa0:	d4e4      	bmi.n	8008f6c <_fflush_r+0xc>
 8008fa2:	89a3      	ldrh	r3, [r4, #12]
 8008fa4:	059b      	lsls	r3, r3, #22
 8008fa6:	d4e1      	bmi.n	8008f6c <_fflush_r+0xc>
 8008fa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008faa:	f7fe fb03 	bl	80075b4 <__retarget_lock_release_recursive>
 8008fae:	e7dd      	b.n	8008f6c <_fflush_r+0xc>

08008fb0 <memmove>:
 8008fb0:	4288      	cmp	r0, r1
 8008fb2:	b510      	push	{r4, lr}
 8008fb4:	eb01 0402 	add.w	r4, r1, r2
 8008fb8:	d902      	bls.n	8008fc0 <memmove+0x10>
 8008fba:	4284      	cmp	r4, r0
 8008fbc:	4623      	mov	r3, r4
 8008fbe:	d807      	bhi.n	8008fd0 <memmove+0x20>
 8008fc0:	1e43      	subs	r3, r0, #1
 8008fc2:	42a1      	cmp	r1, r4
 8008fc4:	d008      	beq.n	8008fd8 <memmove+0x28>
 8008fc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008fca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008fce:	e7f8      	b.n	8008fc2 <memmove+0x12>
 8008fd0:	4402      	add	r2, r0
 8008fd2:	4601      	mov	r1, r0
 8008fd4:	428a      	cmp	r2, r1
 8008fd6:	d100      	bne.n	8008fda <memmove+0x2a>
 8008fd8:	bd10      	pop	{r4, pc}
 8008fda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008fde:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008fe2:	e7f7      	b.n	8008fd4 <memmove+0x24>

08008fe4 <_sbrk_r>:
 8008fe4:	b538      	push	{r3, r4, r5, lr}
 8008fe6:	4d06      	ldr	r5, [pc, #24]	; (8009000 <_sbrk_r+0x1c>)
 8008fe8:	2300      	movs	r3, #0
 8008fea:	4604      	mov	r4, r0
 8008fec:	4608      	mov	r0, r1
 8008fee:	602b      	str	r3, [r5, #0]
 8008ff0:	f7fd fc64 	bl	80068bc <_sbrk>
 8008ff4:	1c43      	adds	r3, r0, #1
 8008ff6:	d102      	bne.n	8008ffe <_sbrk_r+0x1a>
 8008ff8:	682b      	ldr	r3, [r5, #0]
 8008ffa:	b103      	cbz	r3, 8008ffe <_sbrk_r+0x1a>
 8008ffc:	6023      	str	r3, [r4, #0]
 8008ffe:	bd38      	pop	{r3, r4, r5, pc}
 8009000:	2000055c 	.word	0x2000055c

08009004 <memcpy>:
 8009004:	440a      	add	r2, r1
 8009006:	4291      	cmp	r1, r2
 8009008:	f100 33ff 	add.w	r3, r0, #4294967295
 800900c:	d100      	bne.n	8009010 <memcpy+0xc>
 800900e:	4770      	bx	lr
 8009010:	b510      	push	{r4, lr}
 8009012:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009016:	f803 4f01 	strb.w	r4, [r3, #1]!
 800901a:	4291      	cmp	r1, r2
 800901c:	d1f9      	bne.n	8009012 <memcpy+0xe>
 800901e:	bd10      	pop	{r4, pc}

08009020 <__assert_func>:
 8009020:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009022:	4614      	mov	r4, r2
 8009024:	461a      	mov	r2, r3
 8009026:	4b09      	ldr	r3, [pc, #36]	; (800904c <__assert_func+0x2c>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	4605      	mov	r5, r0
 800902c:	68d8      	ldr	r0, [r3, #12]
 800902e:	b14c      	cbz	r4, 8009044 <__assert_func+0x24>
 8009030:	4b07      	ldr	r3, [pc, #28]	; (8009050 <__assert_func+0x30>)
 8009032:	9100      	str	r1, [sp, #0]
 8009034:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009038:	4906      	ldr	r1, [pc, #24]	; (8009054 <__assert_func+0x34>)
 800903a:	462b      	mov	r3, r5
 800903c:	f000 f872 	bl	8009124 <fiprintf>
 8009040:	f000 f882 	bl	8009148 <abort>
 8009044:	4b04      	ldr	r3, [pc, #16]	; (8009058 <__assert_func+0x38>)
 8009046:	461c      	mov	r4, r3
 8009048:	e7f3      	b.n	8009032 <__assert_func+0x12>
 800904a:	bf00      	nop
 800904c:	20000064 	.word	0x20000064
 8009050:	08009947 	.word	0x08009947
 8009054:	08009954 	.word	0x08009954
 8009058:	08009982 	.word	0x08009982

0800905c <_calloc_r>:
 800905c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800905e:	fba1 2402 	umull	r2, r4, r1, r2
 8009062:	b94c      	cbnz	r4, 8009078 <_calloc_r+0x1c>
 8009064:	4611      	mov	r1, r2
 8009066:	9201      	str	r2, [sp, #4]
 8009068:	f7ff f994 	bl	8008394 <_malloc_r>
 800906c:	9a01      	ldr	r2, [sp, #4]
 800906e:	4605      	mov	r5, r0
 8009070:	b930      	cbnz	r0, 8009080 <_calloc_r+0x24>
 8009072:	4628      	mov	r0, r5
 8009074:	b003      	add	sp, #12
 8009076:	bd30      	pop	{r4, r5, pc}
 8009078:	220c      	movs	r2, #12
 800907a:	6002      	str	r2, [r0, #0]
 800907c:	2500      	movs	r5, #0
 800907e:	e7f8      	b.n	8009072 <_calloc_r+0x16>
 8009080:	4621      	mov	r1, r4
 8009082:	f7fe fa18 	bl	80074b6 <memset>
 8009086:	e7f4      	b.n	8009072 <_calloc_r+0x16>

08009088 <__ascii_mbtowc>:
 8009088:	b082      	sub	sp, #8
 800908a:	b901      	cbnz	r1, 800908e <__ascii_mbtowc+0x6>
 800908c:	a901      	add	r1, sp, #4
 800908e:	b142      	cbz	r2, 80090a2 <__ascii_mbtowc+0x1a>
 8009090:	b14b      	cbz	r3, 80090a6 <__ascii_mbtowc+0x1e>
 8009092:	7813      	ldrb	r3, [r2, #0]
 8009094:	600b      	str	r3, [r1, #0]
 8009096:	7812      	ldrb	r2, [r2, #0]
 8009098:	1e10      	subs	r0, r2, #0
 800909a:	bf18      	it	ne
 800909c:	2001      	movne	r0, #1
 800909e:	b002      	add	sp, #8
 80090a0:	4770      	bx	lr
 80090a2:	4610      	mov	r0, r2
 80090a4:	e7fb      	b.n	800909e <__ascii_mbtowc+0x16>
 80090a6:	f06f 0001 	mvn.w	r0, #1
 80090aa:	e7f8      	b.n	800909e <__ascii_mbtowc+0x16>

080090ac <_realloc_r>:
 80090ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090b0:	4680      	mov	r8, r0
 80090b2:	4614      	mov	r4, r2
 80090b4:	460e      	mov	r6, r1
 80090b6:	b921      	cbnz	r1, 80090c2 <_realloc_r+0x16>
 80090b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090bc:	4611      	mov	r1, r2
 80090be:	f7ff b969 	b.w	8008394 <_malloc_r>
 80090c2:	b92a      	cbnz	r2, 80090d0 <_realloc_r+0x24>
 80090c4:	f7ff f8f2 	bl	80082ac <_free_r>
 80090c8:	4625      	mov	r5, r4
 80090ca:	4628      	mov	r0, r5
 80090cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090d0:	f000 f841 	bl	8009156 <_malloc_usable_size_r>
 80090d4:	4284      	cmp	r4, r0
 80090d6:	4607      	mov	r7, r0
 80090d8:	d802      	bhi.n	80090e0 <_realloc_r+0x34>
 80090da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80090de:	d812      	bhi.n	8009106 <_realloc_r+0x5a>
 80090e0:	4621      	mov	r1, r4
 80090e2:	4640      	mov	r0, r8
 80090e4:	f7ff f956 	bl	8008394 <_malloc_r>
 80090e8:	4605      	mov	r5, r0
 80090ea:	2800      	cmp	r0, #0
 80090ec:	d0ed      	beq.n	80090ca <_realloc_r+0x1e>
 80090ee:	42bc      	cmp	r4, r7
 80090f0:	4622      	mov	r2, r4
 80090f2:	4631      	mov	r1, r6
 80090f4:	bf28      	it	cs
 80090f6:	463a      	movcs	r2, r7
 80090f8:	f7ff ff84 	bl	8009004 <memcpy>
 80090fc:	4631      	mov	r1, r6
 80090fe:	4640      	mov	r0, r8
 8009100:	f7ff f8d4 	bl	80082ac <_free_r>
 8009104:	e7e1      	b.n	80090ca <_realloc_r+0x1e>
 8009106:	4635      	mov	r5, r6
 8009108:	e7df      	b.n	80090ca <_realloc_r+0x1e>

0800910a <__ascii_wctomb>:
 800910a:	b149      	cbz	r1, 8009120 <__ascii_wctomb+0x16>
 800910c:	2aff      	cmp	r2, #255	; 0xff
 800910e:	bf85      	ittet	hi
 8009110:	238a      	movhi	r3, #138	; 0x8a
 8009112:	6003      	strhi	r3, [r0, #0]
 8009114:	700a      	strbls	r2, [r1, #0]
 8009116:	f04f 30ff 	movhi.w	r0, #4294967295
 800911a:	bf98      	it	ls
 800911c:	2001      	movls	r0, #1
 800911e:	4770      	bx	lr
 8009120:	4608      	mov	r0, r1
 8009122:	4770      	bx	lr

08009124 <fiprintf>:
 8009124:	b40e      	push	{r1, r2, r3}
 8009126:	b503      	push	{r0, r1, lr}
 8009128:	4601      	mov	r1, r0
 800912a:	ab03      	add	r3, sp, #12
 800912c:	4805      	ldr	r0, [pc, #20]	; (8009144 <fiprintf+0x20>)
 800912e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009132:	6800      	ldr	r0, [r0, #0]
 8009134:	9301      	str	r3, [sp, #4]
 8009136:	f000 f83f 	bl	80091b8 <_vfiprintf_r>
 800913a:	b002      	add	sp, #8
 800913c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009140:	b003      	add	sp, #12
 8009142:	4770      	bx	lr
 8009144:	20000064 	.word	0x20000064

08009148 <abort>:
 8009148:	b508      	push	{r3, lr}
 800914a:	2006      	movs	r0, #6
 800914c:	f000 fa0c 	bl	8009568 <raise>
 8009150:	2001      	movs	r0, #1
 8009152:	f7fd fb3b 	bl	80067cc <_exit>

08009156 <_malloc_usable_size_r>:
 8009156:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800915a:	1f18      	subs	r0, r3, #4
 800915c:	2b00      	cmp	r3, #0
 800915e:	bfbc      	itt	lt
 8009160:	580b      	ldrlt	r3, [r1, r0]
 8009162:	18c0      	addlt	r0, r0, r3
 8009164:	4770      	bx	lr

08009166 <__sfputc_r>:
 8009166:	6893      	ldr	r3, [r2, #8]
 8009168:	3b01      	subs	r3, #1
 800916a:	2b00      	cmp	r3, #0
 800916c:	b410      	push	{r4}
 800916e:	6093      	str	r3, [r2, #8]
 8009170:	da08      	bge.n	8009184 <__sfputc_r+0x1e>
 8009172:	6994      	ldr	r4, [r2, #24]
 8009174:	42a3      	cmp	r3, r4
 8009176:	db01      	blt.n	800917c <__sfputc_r+0x16>
 8009178:	290a      	cmp	r1, #10
 800917a:	d103      	bne.n	8009184 <__sfputc_r+0x1e>
 800917c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009180:	f000 b934 	b.w	80093ec <__swbuf_r>
 8009184:	6813      	ldr	r3, [r2, #0]
 8009186:	1c58      	adds	r0, r3, #1
 8009188:	6010      	str	r0, [r2, #0]
 800918a:	7019      	strb	r1, [r3, #0]
 800918c:	4608      	mov	r0, r1
 800918e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009192:	4770      	bx	lr

08009194 <__sfputs_r>:
 8009194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009196:	4606      	mov	r6, r0
 8009198:	460f      	mov	r7, r1
 800919a:	4614      	mov	r4, r2
 800919c:	18d5      	adds	r5, r2, r3
 800919e:	42ac      	cmp	r4, r5
 80091a0:	d101      	bne.n	80091a6 <__sfputs_r+0x12>
 80091a2:	2000      	movs	r0, #0
 80091a4:	e007      	b.n	80091b6 <__sfputs_r+0x22>
 80091a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091aa:	463a      	mov	r2, r7
 80091ac:	4630      	mov	r0, r6
 80091ae:	f7ff ffda 	bl	8009166 <__sfputc_r>
 80091b2:	1c43      	adds	r3, r0, #1
 80091b4:	d1f3      	bne.n	800919e <__sfputs_r+0xa>
 80091b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080091b8 <_vfiprintf_r>:
 80091b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091bc:	460d      	mov	r5, r1
 80091be:	b09d      	sub	sp, #116	; 0x74
 80091c0:	4614      	mov	r4, r2
 80091c2:	4698      	mov	r8, r3
 80091c4:	4606      	mov	r6, r0
 80091c6:	b118      	cbz	r0, 80091d0 <_vfiprintf_r+0x18>
 80091c8:	6a03      	ldr	r3, [r0, #32]
 80091ca:	b90b      	cbnz	r3, 80091d0 <_vfiprintf_r+0x18>
 80091cc:	f7fe f8da 	bl	8007384 <__sinit>
 80091d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80091d2:	07d9      	lsls	r1, r3, #31
 80091d4:	d405      	bmi.n	80091e2 <_vfiprintf_r+0x2a>
 80091d6:	89ab      	ldrh	r3, [r5, #12]
 80091d8:	059a      	lsls	r2, r3, #22
 80091da:	d402      	bmi.n	80091e2 <_vfiprintf_r+0x2a>
 80091dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80091de:	f7fe f9e8 	bl	80075b2 <__retarget_lock_acquire_recursive>
 80091e2:	89ab      	ldrh	r3, [r5, #12]
 80091e4:	071b      	lsls	r3, r3, #28
 80091e6:	d501      	bpl.n	80091ec <_vfiprintf_r+0x34>
 80091e8:	692b      	ldr	r3, [r5, #16]
 80091ea:	b99b      	cbnz	r3, 8009214 <_vfiprintf_r+0x5c>
 80091ec:	4629      	mov	r1, r5
 80091ee:	4630      	mov	r0, r6
 80091f0:	f000 f93a 	bl	8009468 <__swsetup_r>
 80091f4:	b170      	cbz	r0, 8009214 <_vfiprintf_r+0x5c>
 80091f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80091f8:	07dc      	lsls	r4, r3, #31
 80091fa:	d504      	bpl.n	8009206 <_vfiprintf_r+0x4e>
 80091fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009200:	b01d      	add	sp, #116	; 0x74
 8009202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009206:	89ab      	ldrh	r3, [r5, #12]
 8009208:	0598      	lsls	r0, r3, #22
 800920a:	d4f7      	bmi.n	80091fc <_vfiprintf_r+0x44>
 800920c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800920e:	f7fe f9d1 	bl	80075b4 <__retarget_lock_release_recursive>
 8009212:	e7f3      	b.n	80091fc <_vfiprintf_r+0x44>
 8009214:	2300      	movs	r3, #0
 8009216:	9309      	str	r3, [sp, #36]	; 0x24
 8009218:	2320      	movs	r3, #32
 800921a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800921e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009222:	2330      	movs	r3, #48	; 0x30
 8009224:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80093d8 <_vfiprintf_r+0x220>
 8009228:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800922c:	f04f 0901 	mov.w	r9, #1
 8009230:	4623      	mov	r3, r4
 8009232:	469a      	mov	sl, r3
 8009234:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009238:	b10a      	cbz	r2, 800923e <_vfiprintf_r+0x86>
 800923a:	2a25      	cmp	r2, #37	; 0x25
 800923c:	d1f9      	bne.n	8009232 <_vfiprintf_r+0x7a>
 800923e:	ebba 0b04 	subs.w	fp, sl, r4
 8009242:	d00b      	beq.n	800925c <_vfiprintf_r+0xa4>
 8009244:	465b      	mov	r3, fp
 8009246:	4622      	mov	r2, r4
 8009248:	4629      	mov	r1, r5
 800924a:	4630      	mov	r0, r6
 800924c:	f7ff ffa2 	bl	8009194 <__sfputs_r>
 8009250:	3001      	adds	r0, #1
 8009252:	f000 80a9 	beq.w	80093a8 <_vfiprintf_r+0x1f0>
 8009256:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009258:	445a      	add	r2, fp
 800925a:	9209      	str	r2, [sp, #36]	; 0x24
 800925c:	f89a 3000 	ldrb.w	r3, [sl]
 8009260:	2b00      	cmp	r3, #0
 8009262:	f000 80a1 	beq.w	80093a8 <_vfiprintf_r+0x1f0>
 8009266:	2300      	movs	r3, #0
 8009268:	f04f 32ff 	mov.w	r2, #4294967295
 800926c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009270:	f10a 0a01 	add.w	sl, sl, #1
 8009274:	9304      	str	r3, [sp, #16]
 8009276:	9307      	str	r3, [sp, #28]
 8009278:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800927c:	931a      	str	r3, [sp, #104]	; 0x68
 800927e:	4654      	mov	r4, sl
 8009280:	2205      	movs	r2, #5
 8009282:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009286:	4854      	ldr	r0, [pc, #336]	; (80093d8 <_vfiprintf_r+0x220>)
 8009288:	f7f6 ffa2 	bl	80001d0 <memchr>
 800928c:	9a04      	ldr	r2, [sp, #16]
 800928e:	b9d8      	cbnz	r0, 80092c8 <_vfiprintf_r+0x110>
 8009290:	06d1      	lsls	r1, r2, #27
 8009292:	bf44      	itt	mi
 8009294:	2320      	movmi	r3, #32
 8009296:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800929a:	0713      	lsls	r3, r2, #28
 800929c:	bf44      	itt	mi
 800929e:	232b      	movmi	r3, #43	; 0x2b
 80092a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092a4:	f89a 3000 	ldrb.w	r3, [sl]
 80092a8:	2b2a      	cmp	r3, #42	; 0x2a
 80092aa:	d015      	beq.n	80092d8 <_vfiprintf_r+0x120>
 80092ac:	9a07      	ldr	r2, [sp, #28]
 80092ae:	4654      	mov	r4, sl
 80092b0:	2000      	movs	r0, #0
 80092b2:	f04f 0c0a 	mov.w	ip, #10
 80092b6:	4621      	mov	r1, r4
 80092b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092bc:	3b30      	subs	r3, #48	; 0x30
 80092be:	2b09      	cmp	r3, #9
 80092c0:	d94d      	bls.n	800935e <_vfiprintf_r+0x1a6>
 80092c2:	b1b0      	cbz	r0, 80092f2 <_vfiprintf_r+0x13a>
 80092c4:	9207      	str	r2, [sp, #28]
 80092c6:	e014      	b.n	80092f2 <_vfiprintf_r+0x13a>
 80092c8:	eba0 0308 	sub.w	r3, r0, r8
 80092cc:	fa09 f303 	lsl.w	r3, r9, r3
 80092d0:	4313      	orrs	r3, r2
 80092d2:	9304      	str	r3, [sp, #16]
 80092d4:	46a2      	mov	sl, r4
 80092d6:	e7d2      	b.n	800927e <_vfiprintf_r+0xc6>
 80092d8:	9b03      	ldr	r3, [sp, #12]
 80092da:	1d19      	adds	r1, r3, #4
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	9103      	str	r1, [sp, #12]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	bfbb      	ittet	lt
 80092e4:	425b      	neglt	r3, r3
 80092e6:	f042 0202 	orrlt.w	r2, r2, #2
 80092ea:	9307      	strge	r3, [sp, #28]
 80092ec:	9307      	strlt	r3, [sp, #28]
 80092ee:	bfb8      	it	lt
 80092f0:	9204      	strlt	r2, [sp, #16]
 80092f2:	7823      	ldrb	r3, [r4, #0]
 80092f4:	2b2e      	cmp	r3, #46	; 0x2e
 80092f6:	d10c      	bne.n	8009312 <_vfiprintf_r+0x15a>
 80092f8:	7863      	ldrb	r3, [r4, #1]
 80092fa:	2b2a      	cmp	r3, #42	; 0x2a
 80092fc:	d134      	bne.n	8009368 <_vfiprintf_r+0x1b0>
 80092fe:	9b03      	ldr	r3, [sp, #12]
 8009300:	1d1a      	adds	r2, r3, #4
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	9203      	str	r2, [sp, #12]
 8009306:	2b00      	cmp	r3, #0
 8009308:	bfb8      	it	lt
 800930a:	f04f 33ff 	movlt.w	r3, #4294967295
 800930e:	3402      	adds	r4, #2
 8009310:	9305      	str	r3, [sp, #20]
 8009312:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80093e8 <_vfiprintf_r+0x230>
 8009316:	7821      	ldrb	r1, [r4, #0]
 8009318:	2203      	movs	r2, #3
 800931a:	4650      	mov	r0, sl
 800931c:	f7f6 ff58 	bl	80001d0 <memchr>
 8009320:	b138      	cbz	r0, 8009332 <_vfiprintf_r+0x17a>
 8009322:	9b04      	ldr	r3, [sp, #16]
 8009324:	eba0 000a 	sub.w	r0, r0, sl
 8009328:	2240      	movs	r2, #64	; 0x40
 800932a:	4082      	lsls	r2, r0
 800932c:	4313      	orrs	r3, r2
 800932e:	3401      	adds	r4, #1
 8009330:	9304      	str	r3, [sp, #16]
 8009332:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009336:	4829      	ldr	r0, [pc, #164]	; (80093dc <_vfiprintf_r+0x224>)
 8009338:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800933c:	2206      	movs	r2, #6
 800933e:	f7f6 ff47 	bl	80001d0 <memchr>
 8009342:	2800      	cmp	r0, #0
 8009344:	d03f      	beq.n	80093c6 <_vfiprintf_r+0x20e>
 8009346:	4b26      	ldr	r3, [pc, #152]	; (80093e0 <_vfiprintf_r+0x228>)
 8009348:	bb1b      	cbnz	r3, 8009392 <_vfiprintf_r+0x1da>
 800934a:	9b03      	ldr	r3, [sp, #12]
 800934c:	3307      	adds	r3, #7
 800934e:	f023 0307 	bic.w	r3, r3, #7
 8009352:	3308      	adds	r3, #8
 8009354:	9303      	str	r3, [sp, #12]
 8009356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009358:	443b      	add	r3, r7
 800935a:	9309      	str	r3, [sp, #36]	; 0x24
 800935c:	e768      	b.n	8009230 <_vfiprintf_r+0x78>
 800935e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009362:	460c      	mov	r4, r1
 8009364:	2001      	movs	r0, #1
 8009366:	e7a6      	b.n	80092b6 <_vfiprintf_r+0xfe>
 8009368:	2300      	movs	r3, #0
 800936a:	3401      	adds	r4, #1
 800936c:	9305      	str	r3, [sp, #20]
 800936e:	4619      	mov	r1, r3
 8009370:	f04f 0c0a 	mov.w	ip, #10
 8009374:	4620      	mov	r0, r4
 8009376:	f810 2b01 	ldrb.w	r2, [r0], #1
 800937a:	3a30      	subs	r2, #48	; 0x30
 800937c:	2a09      	cmp	r2, #9
 800937e:	d903      	bls.n	8009388 <_vfiprintf_r+0x1d0>
 8009380:	2b00      	cmp	r3, #0
 8009382:	d0c6      	beq.n	8009312 <_vfiprintf_r+0x15a>
 8009384:	9105      	str	r1, [sp, #20]
 8009386:	e7c4      	b.n	8009312 <_vfiprintf_r+0x15a>
 8009388:	fb0c 2101 	mla	r1, ip, r1, r2
 800938c:	4604      	mov	r4, r0
 800938e:	2301      	movs	r3, #1
 8009390:	e7f0      	b.n	8009374 <_vfiprintf_r+0x1bc>
 8009392:	ab03      	add	r3, sp, #12
 8009394:	9300      	str	r3, [sp, #0]
 8009396:	462a      	mov	r2, r5
 8009398:	4b12      	ldr	r3, [pc, #72]	; (80093e4 <_vfiprintf_r+0x22c>)
 800939a:	a904      	add	r1, sp, #16
 800939c:	4630      	mov	r0, r6
 800939e:	f7fd fb9f 	bl	8006ae0 <_printf_float>
 80093a2:	4607      	mov	r7, r0
 80093a4:	1c78      	adds	r0, r7, #1
 80093a6:	d1d6      	bne.n	8009356 <_vfiprintf_r+0x19e>
 80093a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80093aa:	07d9      	lsls	r1, r3, #31
 80093ac:	d405      	bmi.n	80093ba <_vfiprintf_r+0x202>
 80093ae:	89ab      	ldrh	r3, [r5, #12]
 80093b0:	059a      	lsls	r2, r3, #22
 80093b2:	d402      	bmi.n	80093ba <_vfiprintf_r+0x202>
 80093b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80093b6:	f7fe f8fd 	bl	80075b4 <__retarget_lock_release_recursive>
 80093ba:	89ab      	ldrh	r3, [r5, #12]
 80093bc:	065b      	lsls	r3, r3, #25
 80093be:	f53f af1d 	bmi.w	80091fc <_vfiprintf_r+0x44>
 80093c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80093c4:	e71c      	b.n	8009200 <_vfiprintf_r+0x48>
 80093c6:	ab03      	add	r3, sp, #12
 80093c8:	9300      	str	r3, [sp, #0]
 80093ca:	462a      	mov	r2, r5
 80093cc:	4b05      	ldr	r3, [pc, #20]	; (80093e4 <_vfiprintf_r+0x22c>)
 80093ce:	a904      	add	r1, sp, #16
 80093d0:	4630      	mov	r0, r6
 80093d2:	f7fd fe29 	bl	8007028 <_printf_i>
 80093d6:	e7e4      	b.n	80093a2 <_vfiprintf_r+0x1ea>
 80093d8:	0800992c 	.word	0x0800992c
 80093dc:	08009936 	.word	0x08009936
 80093e0:	08006ae1 	.word	0x08006ae1
 80093e4:	08009195 	.word	0x08009195
 80093e8:	08009932 	.word	0x08009932

080093ec <__swbuf_r>:
 80093ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093ee:	460e      	mov	r6, r1
 80093f0:	4614      	mov	r4, r2
 80093f2:	4605      	mov	r5, r0
 80093f4:	b118      	cbz	r0, 80093fe <__swbuf_r+0x12>
 80093f6:	6a03      	ldr	r3, [r0, #32]
 80093f8:	b90b      	cbnz	r3, 80093fe <__swbuf_r+0x12>
 80093fa:	f7fd ffc3 	bl	8007384 <__sinit>
 80093fe:	69a3      	ldr	r3, [r4, #24]
 8009400:	60a3      	str	r3, [r4, #8]
 8009402:	89a3      	ldrh	r3, [r4, #12]
 8009404:	071a      	lsls	r2, r3, #28
 8009406:	d525      	bpl.n	8009454 <__swbuf_r+0x68>
 8009408:	6923      	ldr	r3, [r4, #16]
 800940a:	b31b      	cbz	r3, 8009454 <__swbuf_r+0x68>
 800940c:	6823      	ldr	r3, [r4, #0]
 800940e:	6922      	ldr	r2, [r4, #16]
 8009410:	1a98      	subs	r0, r3, r2
 8009412:	6963      	ldr	r3, [r4, #20]
 8009414:	b2f6      	uxtb	r6, r6
 8009416:	4283      	cmp	r3, r0
 8009418:	4637      	mov	r7, r6
 800941a:	dc04      	bgt.n	8009426 <__swbuf_r+0x3a>
 800941c:	4621      	mov	r1, r4
 800941e:	4628      	mov	r0, r5
 8009420:	f7ff fd9e 	bl	8008f60 <_fflush_r>
 8009424:	b9e0      	cbnz	r0, 8009460 <__swbuf_r+0x74>
 8009426:	68a3      	ldr	r3, [r4, #8]
 8009428:	3b01      	subs	r3, #1
 800942a:	60a3      	str	r3, [r4, #8]
 800942c:	6823      	ldr	r3, [r4, #0]
 800942e:	1c5a      	adds	r2, r3, #1
 8009430:	6022      	str	r2, [r4, #0]
 8009432:	701e      	strb	r6, [r3, #0]
 8009434:	6962      	ldr	r2, [r4, #20]
 8009436:	1c43      	adds	r3, r0, #1
 8009438:	429a      	cmp	r2, r3
 800943a:	d004      	beq.n	8009446 <__swbuf_r+0x5a>
 800943c:	89a3      	ldrh	r3, [r4, #12]
 800943e:	07db      	lsls	r3, r3, #31
 8009440:	d506      	bpl.n	8009450 <__swbuf_r+0x64>
 8009442:	2e0a      	cmp	r6, #10
 8009444:	d104      	bne.n	8009450 <__swbuf_r+0x64>
 8009446:	4621      	mov	r1, r4
 8009448:	4628      	mov	r0, r5
 800944a:	f7ff fd89 	bl	8008f60 <_fflush_r>
 800944e:	b938      	cbnz	r0, 8009460 <__swbuf_r+0x74>
 8009450:	4638      	mov	r0, r7
 8009452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009454:	4621      	mov	r1, r4
 8009456:	4628      	mov	r0, r5
 8009458:	f000 f806 	bl	8009468 <__swsetup_r>
 800945c:	2800      	cmp	r0, #0
 800945e:	d0d5      	beq.n	800940c <__swbuf_r+0x20>
 8009460:	f04f 37ff 	mov.w	r7, #4294967295
 8009464:	e7f4      	b.n	8009450 <__swbuf_r+0x64>
	...

08009468 <__swsetup_r>:
 8009468:	b538      	push	{r3, r4, r5, lr}
 800946a:	4b2a      	ldr	r3, [pc, #168]	; (8009514 <__swsetup_r+0xac>)
 800946c:	4605      	mov	r5, r0
 800946e:	6818      	ldr	r0, [r3, #0]
 8009470:	460c      	mov	r4, r1
 8009472:	b118      	cbz	r0, 800947c <__swsetup_r+0x14>
 8009474:	6a03      	ldr	r3, [r0, #32]
 8009476:	b90b      	cbnz	r3, 800947c <__swsetup_r+0x14>
 8009478:	f7fd ff84 	bl	8007384 <__sinit>
 800947c:	89a3      	ldrh	r3, [r4, #12]
 800947e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009482:	0718      	lsls	r0, r3, #28
 8009484:	d422      	bmi.n	80094cc <__swsetup_r+0x64>
 8009486:	06d9      	lsls	r1, r3, #27
 8009488:	d407      	bmi.n	800949a <__swsetup_r+0x32>
 800948a:	2309      	movs	r3, #9
 800948c:	602b      	str	r3, [r5, #0]
 800948e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009492:	81a3      	strh	r3, [r4, #12]
 8009494:	f04f 30ff 	mov.w	r0, #4294967295
 8009498:	e034      	b.n	8009504 <__swsetup_r+0x9c>
 800949a:	0758      	lsls	r0, r3, #29
 800949c:	d512      	bpl.n	80094c4 <__swsetup_r+0x5c>
 800949e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80094a0:	b141      	cbz	r1, 80094b4 <__swsetup_r+0x4c>
 80094a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80094a6:	4299      	cmp	r1, r3
 80094a8:	d002      	beq.n	80094b0 <__swsetup_r+0x48>
 80094aa:	4628      	mov	r0, r5
 80094ac:	f7fe fefe 	bl	80082ac <_free_r>
 80094b0:	2300      	movs	r3, #0
 80094b2:	6363      	str	r3, [r4, #52]	; 0x34
 80094b4:	89a3      	ldrh	r3, [r4, #12]
 80094b6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80094ba:	81a3      	strh	r3, [r4, #12]
 80094bc:	2300      	movs	r3, #0
 80094be:	6063      	str	r3, [r4, #4]
 80094c0:	6923      	ldr	r3, [r4, #16]
 80094c2:	6023      	str	r3, [r4, #0]
 80094c4:	89a3      	ldrh	r3, [r4, #12]
 80094c6:	f043 0308 	orr.w	r3, r3, #8
 80094ca:	81a3      	strh	r3, [r4, #12]
 80094cc:	6923      	ldr	r3, [r4, #16]
 80094ce:	b94b      	cbnz	r3, 80094e4 <__swsetup_r+0x7c>
 80094d0:	89a3      	ldrh	r3, [r4, #12]
 80094d2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80094d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80094da:	d003      	beq.n	80094e4 <__swsetup_r+0x7c>
 80094dc:	4621      	mov	r1, r4
 80094de:	4628      	mov	r0, r5
 80094e0:	f000 f884 	bl	80095ec <__smakebuf_r>
 80094e4:	89a0      	ldrh	r0, [r4, #12]
 80094e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80094ea:	f010 0301 	ands.w	r3, r0, #1
 80094ee:	d00a      	beq.n	8009506 <__swsetup_r+0x9e>
 80094f0:	2300      	movs	r3, #0
 80094f2:	60a3      	str	r3, [r4, #8]
 80094f4:	6963      	ldr	r3, [r4, #20]
 80094f6:	425b      	negs	r3, r3
 80094f8:	61a3      	str	r3, [r4, #24]
 80094fa:	6923      	ldr	r3, [r4, #16]
 80094fc:	b943      	cbnz	r3, 8009510 <__swsetup_r+0xa8>
 80094fe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009502:	d1c4      	bne.n	800948e <__swsetup_r+0x26>
 8009504:	bd38      	pop	{r3, r4, r5, pc}
 8009506:	0781      	lsls	r1, r0, #30
 8009508:	bf58      	it	pl
 800950a:	6963      	ldrpl	r3, [r4, #20]
 800950c:	60a3      	str	r3, [r4, #8]
 800950e:	e7f4      	b.n	80094fa <__swsetup_r+0x92>
 8009510:	2000      	movs	r0, #0
 8009512:	e7f7      	b.n	8009504 <__swsetup_r+0x9c>
 8009514:	20000064 	.word	0x20000064

08009518 <_raise_r>:
 8009518:	291f      	cmp	r1, #31
 800951a:	b538      	push	{r3, r4, r5, lr}
 800951c:	4604      	mov	r4, r0
 800951e:	460d      	mov	r5, r1
 8009520:	d904      	bls.n	800952c <_raise_r+0x14>
 8009522:	2316      	movs	r3, #22
 8009524:	6003      	str	r3, [r0, #0]
 8009526:	f04f 30ff 	mov.w	r0, #4294967295
 800952a:	bd38      	pop	{r3, r4, r5, pc}
 800952c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800952e:	b112      	cbz	r2, 8009536 <_raise_r+0x1e>
 8009530:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009534:	b94b      	cbnz	r3, 800954a <_raise_r+0x32>
 8009536:	4620      	mov	r0, r4
 8009538:	f000 f830 	bl	800959c <_getpid_r>
 800953c:	462a      	mov	r2, r5
 800953e:	4601      	mov	r1, r0
 8009540:	4620      	mov	r0, r4
 8009542:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009546:	f000 b817 	b.w	8009578 <_kill_r>
 800954a:	2b01      	cmp	r3, #1
 800954c:	d00a      	beq.n	8009564 <_raise_r+0x4c>
 800954e:	1c59      	adds	r1, r3, #1
 8009550:	d103      	bne.n	800955a <_raise_r+0x42>
 8009552:	2316      	movs	r3, #22
 8009554:	6003      	str	r3, [r0, #0]
 8009556:	2001      	movs	r0, #1
 8009558:	e7e7      	b.n	800952a <_raise_r+0x12>
 800955a:	2400      	movs	r4, #0
 800955c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009560:	4628      	mov	r0, r5
 8009562:	4798      	blx	r3
 8009564:	2000      	movs	r0, #0
 8009566:	e7e0      	b.n	800952a <_raise_r+0x12>

08009568 <raise>:
 8009568:	4b02      	ldr	r3, [pc, #8]	; (8009574 <raise+0xc>)
 800956a:	4601      	mov	r1, r0
 800956c:	6818      	ldr	r0, [r3, #0]
 800956e:	f7ff bfd3 	b.w	8009518 <_raise_r>
 8009572:	bf00      	nop
 8009574:	20000064 	.word	0x20000064

08009578 <_kill_r>:
 8009578:	b538      	push	{r3, r4, r5, lr}
 800957a:	4d07      	ldr	r5, [pc, #28]	; (8009598 <_kill_r+0x20>)
 800957c:	2300      	movs	r3, #0
 800957e:	4604      	mov	r4, r0
 8009580:	4608      	mov	r0, r1
 8009582:	4611      	mov	r1, r2
 8009584:	602b      	str	r3, [r5, #0]
 8009586:	f7fd f911 	bl	80067ac <_kill>
 800958a:	1c43      	adds	r3, r0, #1
 800958c:	d102      	bne.n	8009594 <_kill_r+0x1c>
 800958e:	682b      	ldr	r3, [r5, #0]
 8009590:	b103      	cbz	r3, 8009594 <_kill_r+0x1c>
 8009592:	6023      	str	r3, [r4, #0]
 8009594:	bd38      	pop	{r3, r4, r5, pc}
 8009596:	bf00      	nop
 8009598:	2000055c 	.word	0x2000055c

0800959c <_getpid_r>:
 800959c:	f7fd b8fe 	b.w	800679c <_getpid>

080095a0 <__swhatbuf_r>:
 80095a0:	b570      	push	{r4, r5, r6, lr}
 80095a2:	460c      	mov	r4, r1
 80095a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095a8:	2900      	cmp	r1, #0
 80095aa:	b096      	sub	sp, #88	; 0x58
 80095ac:	4615      	mov	r5, r2
 80095ae:	461e      	mov	r6, r3
 80095b0:	da0d      	bge.n	80095ce <__swhatbuf_r+0x2e>
 80095b2:	89a3      	ldrh	r3, [r4, #12]
 80095b4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80095b8:	f04f 0100 	mov.w	r1, #0
 80095bc:	bf0c      	ite	eq
 80095be:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80095c2:	2340      	movne	r3, #64	; 0x40
 80095c4:	2000      	movs	r0, #0
 80095c6:	6031      	str	r1, [r6, #0]
 80095c8:	602b      	str	r3, [r5, #0]
 80095ca:	b016      	add	sp, #88	; 0x58
 80095cc:	bd70      	pop	{r4, r5, r6, pc}
 80095ce:	466a      	mov	r2, sp
 80095d0:	f000 f848 	bl	8009664 <_fstat_r>
 80095d4:	2800      	cmp	r0, #0
 80095d6:	dbec      	blt.n	80095b2 <__swhatbuf_r+0x12>
 80095d8:	9901      	ldr	r1, [sp, #4]
 80095da:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80095de:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80095e2:	4259      	negs	r1, r3
 80095e4:	4159      	adcs	r1, r3
 80095e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095ea:	e7eb      	b.n	80095c4 <__swhatbuf_r+0x24>

080095ec <__smakebuf_r>:
 80095ec:	898b      	ldrh	r3, [r1, #12]
 80095ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80095f0:	079d      	lsls	r5, r3, #30
 80095f2:	4606      	mov	r6, r0
 80095f4:	460c      	mov	r4, r1
 80095f6:	d507      	bpl.n	8009608 <__smakebuf_r+0x1c>
 80095f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80095fc:	6023      	str	r3, [r4, #0]
 80095fe:	6123      	str	r3, [r4, #16]
 8009600:	2301      	movs	r3, #1
 8009602:	6163      	str	r3, [r4, #20]
 8009604:	b002      	add	sp, #8
 8009606:	bd70      	pop	{r4, r5, r6, pc}
 8009608:	ab01      	add	r3, sp, #4
 800960a:	466a      	mov	r2, sp
 800960c:	f7ff ffc8 	bl	80095a0 <__swhatbuf_r>
 8009610:	9900      	ldr	r1, [sp, #0]
 8009612:	4605      	mov	r5, r0
 8009614:	4630      	mov	r0, r6
 8009616:	f7fe febd 	bl	8008394 <_malloc_r>
 800961a:	b948      	cbnz	r0, 8009630 <__smakebuf_r+0x44>
 800961c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009620:	059a      	lsls	r2, r3, #22
 8009622:	d4ef      	bmi.n	8009604 <__smakebuf_r+0x18>
 8009624:	f023 0303 	bic.w	r3, r3, #3
 8009628:	f043 0302 	orr.w	r3, r3, #2
 800962c:	81a3      	strh	r3, [r4, #12]
 800962e:	e7e3      	b.n	80095f8 <__smakebuf_r+0xc>
 8009630:	89a3      	ldrh	r3, [r4, #12]
 8009632:	6020      	str	r0, [r4, #0]
 8009634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009638:	81a3      	strh	r3, [r4, #12]
 800963a:	9b00      	ldr	r3, [sp, #0]
 800963c:	6163      	str	r3, [r4, #20]
 800963e:	9b01      	ldr	r3, [sp, #4]
 8009640:	6120      	str	r0, [r4, #16]
 8009642:	b15b      	cbz	r3, 800965c <__smakebuf_r+0x70>
 8009644:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009648:	4630      	mov	r0, r6
 800964a:	f000 f81d 	bl	8009688 <_isatty_r>
 800964e:	b128      	cbz	r0, 800965c <__smakebuf_r+0x70>
 8009650:	89a3      	ldrh	r3, [r4, #12]
 8009652:	f023 0303 	bic.w	r3, r3, #3
 8009656:	f043 0301 	orr.w	r3, r3, #1
 800965a:	81a3      	strh	r3, [r4, #12]
 800965c:	89a3      	ldrh	r3, [r4, #12]
 800965e:	431d      	orrs	r5, r3
 8009660:	81a5      	strh	r5, [r4, #12]
 8009662:	e7cf      	b.n	8009604 <__smakebuf_r+0x18>

08009664 <_fstat_r>:
 8009664:	b538      	push	{r3, r4, r5, lr}
 8009666:	4d07      	ldr	r5, [pc, #28]	; (8009684 <_fstat_r+0x20>)
 8009668:	2300      	movs	r3, #0
 800966a:	4604      	mov	r4, r0
 800966c:	4608      	mov	r0, r1
 800966e:	4611      	mov	r1, r2
 8009670:	602b      	str	r3, [r5, #0]
 8009672:	f7fd f8fa 	bl	800686a <_fstat>
 8009676:	1c43      	adds	r3, r0, #1
 8009678:	d102      	bne.n	8009680 <_fstat_r+0x1c>
 800967a:	682b      	ldr	r3, [r5, #0]
 800967c:	b103      	cbz	r3, 8009680 <_fstat_r+0x1c>
 800967e:	6023      	str	r3, [r4, #0]
 8009680:	bd38      	pop	{r3, r4, r5, pc}
 8009682:	bf00      	nop
 8009684:	2000055c 	.word	0x2000055c

08009688 <_isatty_r>:
 8009688:	b538      	push	{r3, r4, r5, lr}
 800968a:	4d06      	ldr	r5, [pc, #24]	; (80096a4 <_isatty_r+0x1c>)
 800968c:	2300      	movs	r3, #0
 800968e:	4604      	mov	r4, r0
 8009690:	4608      	mov	r0, r1
 8009692:	602b      	str	r3, [r5, #0]
 8009694:	f7fd f8f9 	bl	800688a <_isatty>
 8009698:	1c43      	adds	r3, r0, #1
 800969a:	d102      	bne.n	80096a2 <_isatty_r+0x1a>
 800969c:	682b      	ldr	r3, [r5, #0]
 800969e:	b103      	cbz	r3, 80096a2 <_isatty_r+0x1a>
 80096a0:	6023      	str	r3, [r4, #0]
 80096a2:	bd38      	pop	{r3, r4, r5, pc}
 80096a4:	2000055c 	.word	0x2000055c

080096a8 <_init>:
 80096a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096aa:	bf00      	nop
 80096ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096ae:	bc08      	pop	{r3}
 80096b0:	469e      	mov	lr, r3
 80096b2:	4770      	bx	lr

080096b4 <_fini>:
 80096b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096b6:	bf00      	nop
 80096b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096ba:	bc08      	pop	{r3}
 80096bc:	469e      	mov	lr, r3
 80096be:	4770      	bx	lr
