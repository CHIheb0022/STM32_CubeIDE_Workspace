
HC-04SR Module Unit Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008408  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d4  08008598  08008598  00018598  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800896c  0800896c  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800896c  0800896c  0001896c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008974  08008974  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008974  08008974  00018974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008978  08008978  00018978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800897c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000288  200001d4  08008b50  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000045c  08008b50  0002045c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010fe1  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000247b  00000000  00000000  00031228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f70  00000000  00000000  000336a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bec  00000000  00000000  00034618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027c42  00000000  00000000  00035204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012da0  00000000  00000000  0005ce46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f3fd8  00000000  00000000  0006fbe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000518c  00000000  00000000  00163bc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  00168d4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008580 	.word	0x08008580

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08008580 	.word	0x08008580

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f48:	f000 fb2f 	bl	80015aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f4c:	f000 f830 	bl	8000fb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f50:	f000 f8b0 	bl	80010b4 <MX_GPIO_Init>
  //MX_TIM2_Init();
  MX_USART2_UART_Init();
 8000f54:	f000 f87e 	bl	8001054 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HCSR04_Init(HCSR04_SENSOR1, &htim2);
 8000f58:	4910      	ldr	r1, [pc, #64]	; (8000f9c <main+0x58>)
 8000f5a:	2000      	movs	r0, #0
 8000f5c:	f003 ffa2 	bl	8004ea4 <HCSR04_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    Distance = HCSR04_Read(HCSR04_SENSOR1);
 8000f60:	2000      	movs	r0, #0
 8000f62:	f004 fc05 	bl	8005770 <HCSR04_Read>
 8000f66:	eef0 7a40 	vmov.f32	s15, s0
 8000f6a:	4b0d      	ldr	r3, [pc, #52]	; (8000fa0 <main+0x5c>)
 8000f6c:	edc3 7a00 	vstr	s15, [r3]
    sprintf(MSG, "%f cm\r\n", Distance);
 8000f70:	4b0b      	ldr	r3, [pc, #44]	; (8000fa0 <main+0x5c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff fae7 	bl	8000548 <__aeabi_f2d>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	4909      	ldr	r1, [pc, #36]	; (8000fa4 <main+0x60>)
 8000f80:	4809      	ldr	r0, [pc, #36]	; (8000fa8 <main+0x64>)
 8000f82:	f005 f99f 	bl	80062c4 <siprintf>
    HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);
 8000f86:	2364      	movs	r3, #100	; 0x64
 8000f88:	2219      	movs	r2, #25
 8000f8a:	4907      	ldr	r1, [pc, #28]	; (8000fa8 <main+0x64>)
 8000f8c:	4807      	ldr	r0, [pc, #28]	; (8000fac <main+0x68>)
 8000f8e:	f003 fa65 	bl	800445c <HAL_UART_Transmit>
    HAL_Delay(25);
 8000f92:	2019      	movs	r0, #25
 8000f94:	f000 fb7e 	bl	8001694 <HAL_Delay>
    Distance = HCSR04_Read(HCSR04_SENSOR1);
 8000f98:	e7e2      	b.n	8000f60 <main+0x1c>
 8000f9a:	bf00      	nop
 8000f9c:	200001f0 	.word	0x200001f0
 8000fa0:	200002c4 	.word	0x200002c4
 8000fa4:	08008598 	.word	0x08008598
 8000fa8:	200002c8 	.word	0x200002c8
 8000fac:	2000023c 	.word	0x2000023c

08000fb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b096      	sub	sp, #88	; 0x58
 8000fb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fb6:	f107 0314 	add.w	r3, r7, #20
 8000fba:	2244      	movs	r2, #68	; 0x44
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f005 f9e3 	bl	800638a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc4:	463b      	mov	r3, r7
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	605a      	str	r2, [r3, #4]
 8000fcc:	609a      	str	r2, [r3, #8]
 8000fce:	60da      	str	r2, [r3, #12]
 8000fd0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000fd2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000fd6:	f000 fe63 	bl	8001ca0 <HAL_PWREx_ControlVoltageScaling>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000fe0:	f000 f8de 	bl	80011a0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000fe4:	2310      	movs	r3, #16
 8000fe6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000ff0:	2360      	movs	r3, #96	; 0x60
 8000ff2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 36;
 8001000:	2324      	movs	r3, #36	; 0x24
 8001002:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001004:	2307      	movs	r3, #7
 8001006:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001008:	2302      	movs	r3, #2
 800100a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800100c:	2302      	movs	r3, #2
 800100e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001010:	f107 0314 	add.w	r3, r7, #20
 8001014:	4618      	mov	r0, r3
 8001016:	f000 fe99 	bl	8001d4c <HAL_RCC_OscConfig>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001020:	f000 f8be 	bl	80011a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001024:	230f      	movs	r3, #15
 8001026:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001028:	2303      	movs	r3, #3
 800102a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800102c:	2300      	movs	r3, #0
 800102e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001030:	2300      	movs	r3, #0
 8001032:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001034:	2300      	movs	r3, #0
 8001036:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001038:	463b      	mov	r3, r7
 800103a:	2104      	movs	r1, #4
 800103c:	4618      	mov	r0, r3
 800103e:	f001 fa61 	bl	8002504 <HAL_RCC_ClockConfig>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001048:	f000 f8aa 	bl	80011a0 <Error_Handler>
  }
}
 800104c:	bf00      	nop
 800104e:	3758      	adds	r7, #88	; 0x58
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}

08001054 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001058:	4b14      	ldr	r3, [pc, #80]	; (80010ac <MX_USART2_UART_Init+0x58>)
 800105a:	4a15      	ldr	r2, [pc, #84]	; (80010b0 <MX_USART2_UART_Init+0x5c>)
 800105c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800105e:	4b13      	ldr	r3, [pc, #76]	; (80010ac <MX_USART2_UART_Init+0x58>)
 8001060:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001064:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001066:	4b11      	ldr	r3, [pc, #68]	; (80010ac <MX_USART2_UART_Init+0x58>)
 8001068:	2200      	movs	r2, #0
 800106a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800106c:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <MX_USART2_UART_Init+0x58>)
 800106e:	2200      	movs	r2, #0
 8001070:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001072:	4b0e      	ldr	r3, [pc, #56]	; (80010ac <MX_USART2_UART_Init+0x58>)
 8001074:	2200      	movs	r2, #0
 8001076:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001078:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <MX_USART2_UART_Init+0x58>)
 800107a:	220c      	movs	r2, #12
 800107c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800107e:	4b0b      	ldr	r3, [pc, #44]	; (80010ac <MX_USART2_UART_Init+0x58>)
 8001080:	2200      	movs	r2, #0
 8001082:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001084:	4b09      	ldr	r3, [pc, #36]	; (80010ac <MX_USART2_UART_Init+0x58>)
 8001086:	2200      	movs	r2, #0
 8001088:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800108a:	4b08      	ldr	r3, [pc, #32]	; (80010ac <MX_USART2_UART_Init+0x58>)
 800108c:	2200      	movs	r2, #0
 800108e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001090:	4b06      	ldr	r3, [pc, #24]	; (80010ac <MX_USART2_UART_Init+0x58>)
 8001092:	2200      	movs	r2, #0
 8001094:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001096:	4805      	ldr	r0, [pc, #20]	; (80010ac <MX_USART2_UART_Init+0x58>)
 8001098:	f003 f992 	bl	80043c0 <HAL_UART_Init>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80010a2:	f000 f87d 	bl	80011a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	2000023c 	.word	0x2000023c
 80010b0:	40004400 	.word	0x40004400

080010b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b088      	sub	sp, #32
 80010b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ba:	f107 030c 	add.w	r3, r7, #12
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	609a      	str	r2, [r3, #8]
 80010c6:	60da      	str	r2, [r3, #12]
 80010c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010ca:	4b1d      	ldr	r3, [pc, #116]	; (8001140 <MX_GPIO_Init+0x8c>)
 80010cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ce:	4a1c      	ldr	r2, [pc, #112]	; (8001140 <MX_GPIO_Init+0x8c>)
 80010d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010d6:	4b1a      	ldr	r3, [pc, #104]	; (8001140 <MX_GPIO_Init+0x8c>)
 80010d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010de:	60bb      	str	r3, [r7, #8]
 80010e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e2:	4b17      	ldr	r3, [pc, #92]	; (8001140 <MX_GPIO_Init+0x8c>)
 80010e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e6:	4a16      	ldr	r2, [pc, #88]	; (8001140 <MX_GPIO_Init+0x8c>)
 80010e8:	f043 0304 	orr.w	r3, r3, #4
 80010ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ee:	4b14      	ldr	r3, [pc, #80]	; (8001140 <MX_GPIO_Init+0x8c>)
 80010f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f2:	f003 0304 	and.w	r3, r3, #4
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fa:	4b11      	ldr	r3, [pc, #68]	; (8001140 <MX_GPIO_Init+0x8c>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fe:	4a10      	ldr	r2, [pc, #64]	; (8001140 <MX_GPIO_Init+0x8c>)
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001106:	4b0e      	ldr	r3, [pc, #56]	; (8001140 <MX_GPIO_Init+0x8c>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	603b      	str	r3, [r7, #0]
 8001110:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8001112:	2200      	movs	r2, #0
 8001114:	2101      	movs	r1, #1
 8001116:	480b      	ldr	r0, [pc, #44]	; (8001144 <MX_GPIO_Init+0x90>)
 8001118:	f000 fd9c 	bl	8001c54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800111c:	2301      	movs	r3, #1
 800111e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001120:	2301      	movs	r3, #1
 8001122:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001128:	2300      	movs	r3, #0
 800112a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800112c:	f107 030c 	add.w	r3, r7, #12
 8001130:	4619      	mov	r1, r3
 8001132:	4804      	ldr	r0, [pc, #16]	; (8001144 <MX_GPIO_Init+0x90>)
 8001134:	f000 fbe4 	bl	8001900 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001138:	bf00      	nop
 800113a:	3720      	adds	r7, #32
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	40021000 	.word	0x40021000
 8001144:	48000800 	.word	0x48000800

08001148 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
    HCSR04_TMR_IC_ISR(htim);
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f004 f8c5 	bl	80052e0 <HCSR04_TMR_IC_ISR>
}
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 800115e:	b580      	push	{r7, lr}
 8001160:	b082      	sub	sp, #8
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
    HCSR04_TMR_OVF_ISR(htim);
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f004 f87e 	bl	8005268 <HCSR04_TMR_OVF_ISR>
}
 800116c:	bf00      	nop
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <SysTick_CallBack>:

void SysTick_CallBack(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
    SysTicks++;
 8001178:	4b08      	ldr	r3, [pc, #32]	; (800119c <SysTick_CallBack+0x28>)
 800117a:	881b      	ldrh	r3, [r3, #0]
 800117c:	3301      	adds	r3, #1
 800117e:	b29a      	uxth	r2, r3
 8001180:	4b06      	ldr	r3, [pc, #24]	; (800119c <SysTick_CallBack+0x28>)
 8001182:	801a      	strh	r2, [r3, #0]
    if(SysTicks == 15) // Each 15msec
 8001184:	4b05      	ldr	r3, [pc, #20]	; (800119c <SysTick_CallBack+0x28>)
 8001186:	881b      	ldrh	r3, [r3, #0]
 8001188:	2b0f      	cmp	r3, #15
 800118a:	d105      	bne.n	8001198 <SysTick_CallBack+0x24>
    {
        HCSR04_Trigger(0);
 800118c:	2000      	movs	r0, #0
 800118e:	f004 fb09 	bl	80057a4 <HCSR04_Trigger>
    SysTicks = 0;
 8001192:	4b02      	ldr	r3, [pc, #8]	; (800119c <SysTick_CallBack+0x28>)
 8001194:	2200      	movs	r2, #0
 8001196:	801a      	strh	r2, [r3, #0]
    }
}
 8001198:	bf00      	nop
 800119a:	bd80      	pop	{r7, pc}
 800119c:	200002c0 	.word	0x200002c0

080011a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011a4:	b672      	cpsid	i
}
 80011a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011a8:	e7fe      	b.n	80011a8 <Error_Handler+0x8>
	...

080011ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b2:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <HAL_MspInit+0x44>)
 80011b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011b6:	4a0e      	ldr	r2, [pc, #56]	; (80011f0 <HAL_MspInit+0x44>)
 80011b8:	f043 0301 	orr.w	r3, r3, #1
 80011bc:	6613      	str	r3, [r2, #96]	; 0x60
 80011be:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <HAL_MspInit+0x44>)
 80011c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011c2:	f003 0301 	and.w	r3, r3, #1
 80011c6:	607b      	str	r3, [r7, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ca:	4b09      	ldr	r3, [pc, #36]	; (80011f0 <HAL_MspInit+0x44>)
 80011cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ce:	4a08      	ldr	r2, [pc, #32]	; (80011f0 <HAL_MspInit+0x44>)
 80011d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d4:	6593      	str	r3, [r2, #88]	; 0x58
 80011d6:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <HAL_MspInit+0x44>)
 80011d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011de:	603b      	str	r3, [r7, #0]
 80011e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	40021000 	.word	0x40021000

080011f4 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08a      	sub	sp, #40	; 0x28
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fc:	f107 0314 	add.w	r3, r7, #20
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
 800120a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001214:	d130      	bne.n	8001278 <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001216:	4b1a      	ldr	r3, [pc, #104]	; (8001280 <HAL_TIM_IC_MspInit+0x8c>)
 8001218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800121a:	4a19      	ldr	r2, [pc, #100]	; (8001280 <HAL_TIM_IC_MspInit+0x8c>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	6593      	str	r3, [r2, #88]	; 0x58
 8001222:	4b17      	ldr	r3, [pc, #92]	; (8001280 <HAL_TIM_IC_MspInit+0x8c>)
 8001224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	613b      	str	r3, [r7, #16]
 800122c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800122e:	4b14      	ldr	r3, [pc, #80]	; (8001280 <HAL_TIM_IC_MspInit+0x8c>)
 8001230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001232:	4a13      	ldr	r2, [pc, #76]	; (8001280 <HAL_TIM_IC_MspInit+0x8c>)
 8001234:	f043 0301 	orr.w	r3, r3, #1
 8001238:	64d3      	str	r3, [r2, #76]	; 0x4c
 800123a:	4b11      	ldr	r3, [pc, #68]	; (8001280 <HAL_TIM_IC_MspInit+0x8c>)
 800123c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001246:	2301      	movs	r3, #1
 8001248:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124a:	2302      	movs	r3, #2
 800124c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001252:	2300      	movs	r3, #0
 8001254:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001256:	2301      	movs	r3, #1
 8001258:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125a:	f107 0314 	add.w	r3, r7, #20
 800125e:	4619      	mov	r1, r3
 8001260:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001264:	f000 fb4c 	bl	8001900 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001268:	2200      	movs	r2, #0
 800126a:	2100      	movs	r1, #0
 800126c:	201c      	movs	r0, #28
 800126e:	f000 fb10 	bl	8001892 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001272:	201c      	movs	r0, #28
 8001274:	f000 fb29 	bl	80018ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001278:	bf00      	nop
 800127a:	3728      	adds	r7, #40	; 0x28
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40021000 	.word	0x40021000

08001284 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b0ac      	sub	sp, #176	; 0xb0
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800129c:	f107 0314 	add.w	r3, r7, #20
 80012a0:	2288      	movs	r2, #136	; 0x88
 80012a2:	2100      	movs	r1, #0
 80012a4:	4618      	mov	r0, r3
 80012a6:	f005 f870 	bl	800638a <memset>
  if(huart->Instance==USART2)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a21      	ldr	r2, [pc, #132]	; (8001334 <HAL_UART_MspInit+0xb0>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d13b      	bne.n	800132c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80012b4:	2302      	movs	r3, #2
 80012b6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80012b8:	2300      	movs	r3, #0
 80012ba:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	4618      	mov	r0, r3
 80012c2:	f001 fb43 	bl	800294c <HAL_RCCEx_PeriphCLKConfig>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80012cc:	f7ff ff68 	bl	80011a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012d0:	4b19      	ldr	r3, [pc, #100]	; (8001338 <HAL_UART_MspInit+0xb4>)
 80012d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012d4:	4a18      	ldr	r2, [pc, #96]	; (8001338 <HAL_UART_MspInit+0xb4>)
 80012d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012da:	6593      	str	r3, [r2, #88]	; 0x58
 80012dc:	4b16      	ldr	r3, [pc, #88]	; (8001338 <HAL_UART_MspInit+0xb4>)
 80012de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e4:	613b      	str	r3, [r7, #16]
 80012e6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e8:	4b13      	ldr	r3, [pc, #76]	; (8001338 <HAL_UART_MspInit+0xb4>)
 80012ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ec:	4a12      	ldr	r2, [pc, #72]	; (8001338 <HAL_UART_MspInit+0xb4>)
 80012ee:	f043 0301 	orr.w	r3, r3, #1
 80012f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012f4:	4b10      	ldr	r3, [pc, #64]	; (8001338 <HAL_UART_MspInit+0xb4>)
 80012f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f8:	f003 0301 	and.w	r3, r3, #1
 80012fc:	60fb      	str	r3, [r7, #12]
 80012fe:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001300:	230c      	movs	r3, #12
 8001302:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001306:	2302      	movs	r3, #2
 8001308:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001312:	2303      	movs	r3, #3
 8001314:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001318:	2307      	movs	r3, #7
 800131a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001322:	4619      	mov	r1, r3
 8001324:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001328:	f000 faea 	bl	8001900 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800132c:	bf00      	nop
 800132e:	37b0      	adds	r7, #176	; 0xb0
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40004400 	.word	0x40004400
 8001338:	40021000 	.word	0x40021000

0800133c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001340:	e7fe      	b.n	8001340 <NMI_Handler+0x4>

08001342 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001342:	b480      	push	{r7}
 8001344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001346:	e7fe      	b.n	8001346 <HardFault_Handler+0x4>

08001348 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800134c:	e7fe      	b.n	800134c <MemManage_Handler+0x4>

0800134e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800134e:	b480      	push	{r7}
 8001350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001352:	e7fe      	b.n	8001352 <BusFault_Handler+0x4>

08001354 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001358:	e7fe      	b.n	8001358 <UsageFault_Handler+0x4>

0800135a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800135a:	b480      	push	{r7}
 800135c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800136c:	bf00      	nop
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001376:	b480      	push	{r7}
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  SysTick_CallBack();
 8001388:	f7ff fef4 	bl	8001174 <SysTick_CallBack>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800138c:	f000 f962 	bl	8001654 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001390:	bf00      	nop
 8001392:	bd80      	pop	{r7, pc}

08001394 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001398:	4802      	ldr	r0, [pc, #8]	; (80013a4 <TIM2_IRQHandler+0x10>)
 800139a:	f002 fa07 	bl	80037ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	200001f0 	.word	0x200001f0

080013a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  return 1;
 80013ac:	2301      	movs	r3, #1
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <_kill>:

int _kill(int pid, int sig)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80013c2:	f005 f835 	bl	8006430 <__errno>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2216      	movs	r2, #22
 80013ca:	601a      	str	r2, [r3, #0]
  return -1;
 80013cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <_exit>:

void _exit (int status)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80013e0:	f04f 31ff 	mov.w	r1, #4294967295
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f7ff ffe7 	bl	80013b8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80013ea:	e7fe      	b.n	80013ea <_exit+0x12>

080013ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	60b9      	str	r1, [r7, #8]
 80013f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]
 80013fc:	e00a      	b.n	8001414 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013fe:	f3af 8000 	nop.w
 8001402:	4601      	mov	r1, r0
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	1c5a      	adds	r2, r3, #1
 8001408:	60ba      	str	r2, [r7, #8]
 800140a:	b2ca      	uxtb	r2, r1
 800140c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	3301      	adds	r3, #1
 8001412:	617b      	str	r3, [r7, #20]
 8001414:	697a      	ldr	r2, [r7, #20]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	429a      	cmp	r2, r3
 800141a:	dbf0      	blt.n	80013fe <_read+0x12>
  }

  return len;
 800141c:	687b      	ldr	r3, [r7, #4]
}
 800141e:	4618      	mov	r0, r3
 8001420:	3718      	adds	r7, #24
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b086      	sub	sp, #24
 800142a:	af00      	add	r7, sp, #0
 800142c:	60f8      	str	r0, [r7, #12]
 800142e:	60b9      	str	r1, [r7, #8]
 8001430:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001432:	2300      	movs	r3, #0
 8001434:	617b      	str	r3, [r7, #20]
 8001436:	e009      	b.n	800144c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	1c5a      	adds	r2, r3, #1
 800143c:	60ba      	str	r2, [r7, #8]
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	4618      	mov	r0, r3
 8001442:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	3301      	adds	r3, #1
 800144a:	617b      	str	r3, [r7, #20]
 800144c:	697a      	ldr	r2, [r7, #20]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	429a      	cmp	r2, r3
 8001452:	dbf1      	blt.n	8001438 <_write+0x12>
  }
  return len;
 8001454:	687b      	ldr	r3, [r7, #4]
}
 8001456:	4618      	mov	r0, r3
 8001458:	3718      	adds	r7, #24
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <_close>:

int _close(int file)
{
 800145e:	b480      	push	{r7}
 8001460:	b083      	sub	sp, #12
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001466:	f04f 33ff 	mov.w	r3, #4294967295
}
 800146a:	4618      	mov	r0, r3
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr

08001476 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001476:	b480      	push	{r7}
 8001478:	b083      	sub	sp, #12
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
 800147e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001486:	605a      	str	r2, [r3, #4]
  return 0;
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr

08001496 <_isatty>:

int _isatty(int file)
{
 8001496:	b480      	push	{r7}
 8001498:	b083      	sub	sp, #12
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800149e:	2301      	movs	r3, #1
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3714      	adds	r7, #20
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
	...

080014c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b086      	sub	sp, #24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014d0:	4a14      	ldr	r2, [pc, #80]	; (8001524 <_sbrk+0x5c>)
 80014d2:	4b15      	ldr	r3, [pc, #84]	; (8001528 <_sbrk+0x60>)
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014dc:	4b13      	ldr	r3, [pc, #76]	; (800152c <_sbrk+0x64>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d102      	bne.n	80014ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014e4:	4b11      	ldr	r3, [pc, #68]	; (800152c <_sbrk+0x64>)
 80014e6:	4a12      	ldr	r2, [pc, #72]	; (8001530 <_sbrk+0x68>)
 80014e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014ea:	4b10      	ldr	r3, [pc, #64]	; (800152c <_sbrk+0x64>)
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4413      	add	r3, r2
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d207      	bcs.n	8001508 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014f8:	f004 ff9a 	bl	8006430 <__errno>
 80014fc:	4603      	mov	r3, r0
 80014fe:	220c      	movs	r2, #12
 8001500:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001502:	f04f 33ff 	mov.w	r3, #4294967295
 8001506:	e009      	b.n	800151c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001508:	4b08      	ldr	r3, [pc, #32]	; (800152c <_sbrk+0x64>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800150e:	4b07      	ldr	r3, [pc, #28]	; (800152c <_sbrk+0x64>)
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4413      	add	r3, r2
 8001516:	4a05      	ldr	r2, [pc, #20]	; (800152c <_sbrk+0x64>)
 8001518:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800151a:	68fb      	ldr	r3, [r7, #12]
}
 800151c:	4618      	mov	r0, r3
 800151e:	3718      	adds	r7, #24
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	20018000 	.word	0x20018000
 8001528:	00000400 	.word	0x00000400
 800152c:	200002e4 	.word	0x200002e4
 8001530:	20000460 	.word	0x20000460

08001534 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001538:	4b06      	ldr	r3, [pc, #24]	; (8001554 <SystemInit+0x20>)
 800153a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800153e:	4a05      	ldr	r2, [pc, #20]	; (8001554 <SystemInit+0x20>)
 8001540:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001544:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	e000ed00 	.word	0xe000ed00

08001558 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001558:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001590 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800155c:	f7ff ffea 	bl	8001534 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001560:	480c      	ldr	r0, [pc, #48]	; (8001594 <LoopForever+0x6>)
  ldr r1, =_edata
 8001562:	490d      	ldr	r1, [pc, #52]	; (8001598 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001564:	4a0d      	ldr	r2, [pc, #52]	; (800159c <LoopForever+0xe>)
  movs r3, #0
 8001566:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001568:	e002      	b.n	8001570 <LoopCopyDataInit>

0800156a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800156a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800156c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800156e:	3304      	adds	r3, #4

08001570 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001570:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001572:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001574:	d3f9      	bcc.n	800156a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001576:	4a0a      	ldr	r2, [pc, #40]	; (80015a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001578:	4c0a      	ldr	r4, [pc, #40]	; (80015a4 <LoopForever+0x16>)
  movs r3, #0
 800157a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800157c:	e001      	b.n	8001582 <LoopFillZerobss>

0800157e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800157e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001580:	3204      	adds	r2, #4

08001582 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001582:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001584:	d3fb      	bcc.n	800157e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001586:	f004 ff59 	bl	800643c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800158a:	f7ff fcdb 	bl	8000f44 <main>

0800158e <LoopForever>:

LoopForever:
    b LoopForever
 800158e:	e7fe      	b.n	800158e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001590:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001594:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001598:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800159c:	0800897c 	.word	0x0800897c
  ldr r2, =_sbss
 80015a0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80015a4:	2000045c 	.word	0x2000045c

080015a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015a8:	e7fe      	b.n	80015a8 <ADC1_2_IRQHandler>

080015aa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b082      	sub	sp, #8
 80015ae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015b0:	2300      	movs	r3, #0
 80015b2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015b4:	2003      	movs	r0, #3
 80015b6:	f000 f961 	bl	800187c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015ba:	200f      	movs	r0, #15
 80015bc:	f000 f80e 	bl	80015dc <HAL_InitTick>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d002      	beq.n	80015cc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	71fb      	strb	r3, [r7, #7]
 80015ca:	e001      	b.n	80015d0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015cc:	f7ff fdee 	bl	80011ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015d0:	79fb      	ldrb	r3, [r7, #7]
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
	...

080015dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015e4:	2300      	movs	r3, #0
 80015e6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80015e8:	4b17      	ldr	r3, [pc, #92]	; (8001648 <HAL_InitTick+0x6c>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d023      	beq.n	8001638 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80015f0:	4b16      	ldr	r3, [pc, #88]	; (800164c <HAL_InitTick+0x70>)
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	4b14      	ldr	r3, [pc, #80]	; (8001648 <HAL_InitTick+0x6c>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	4619      	mov	r1, r3
 80015fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001602:	fbb2 f3f3 	udiv	r3, r2, r3
 8001606:	4618      	mov	r0, r3
 8001608:	f000 f96d 	bl	80018e6 <HAL_SYSTICK_Config>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d10f      	bne.n	8001632 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2b0f      	cmp	r3, #15
 8001616:	d809      	bhi.n	800162c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001618:	2200      	movs	r2, #0
 800161a:	6879      	ldr	r1, [r7, #4]
 800161c:	f04f 30ff 	mov.w	r0, #4294967295
 8001620:	f000 f937 	bl	8001892 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001624:	4a0a      	ldr	r2, [pc, #40]	; (8001650 <HAL_InitTick+0x74>)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6013      	str	r3, [r2, #0]
 800162a:	e007      	b.n	800163c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	73fb      	strb	r3, [r7, #15]
 8001630:	e004      	b.n	800163c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	73fb      	strb	r3, [r7, #15]
 8001636:	e001      	b.n	800163c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800163c:	7bfb      	ldrb	r3, [r7, #15]
}
 800163e:	4618      	mov	r0, r3
 8001640:	3710      	adds	r7, #16
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20000008 	.word	0x20000008
 800164c:	20000000 	.word	0x20000000
 8001650:	20000004 	.word	0x20000004

08001654 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001658:	4b06      	ldr	r3, [pc, #24]	; (8001674 <HAL_IncTick+0x20>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	461a      	mov	r2, r3
 800165e:	4b06      	ldr	r3, [pc, #24]	; (8001678 <HAL_IncTick+0x24>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4413      	add	r3, r2
 8001664:	4a04      	ldr	r2, [pc, #16]	; (8001678 <HAL_IncTick+0x24>)
 8001666:	6013      	str	r3, [r2, #0]
}
 8001668:	bf00      	nop
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	20000008 	.word	0x20000008
 8001678:	200002e8 	.word	0x200002e8

0800167c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  return uwTick;
 8001680:	4b03      	ldr	r3, [pc, #12]	; (8001690 <HAL_GetTick+0x14>)
 8001682:	681b      	ldr	r3, [r3, #0]
}
 8001684:	4618      	mov	r0, r3
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	200002e8 	.word	0x200002e8

08001694 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800169c:	f7ff ffee 	bl	800167c <HAL_GetTick>
 80016a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016ac:	d005      	beq.n	80016ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80016ae:	4b0a      	ldr	r3, [pc, #40]	; (80016d8 <HAL_Delay+0x44>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	461a      	mov	r2, r3
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	4413      	add	r3, r2
 80016b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016ba:	bf00      	nop
 80016bc:	f7ff ffde 	bl	800167c <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	68fa      	ldr	r2, [r7, #12]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d8f7      	bhi.n	80016bc <HAL_Delay+0x28>
  {
  }
}
 80016cc:	bf00      	nop
 80016ce:	bf00      	nop
 80016d0:	3710      	adds	r7, #16
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	20000008 	.word	0x20000008

080016dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016dc:	b480      	push	{r7}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016ec:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <__NVIC_SetPriorityGrouping+0x44>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016f2:	68ba      	ldr	r2, [r7, #8]
 80016f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016f8:	4013      	ands	r3, r2
 80016fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001704:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001708:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800170c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800170e:	4a04      	ldr	r2, [pc, #16]	; (8001720 <__NVIC_SetPriorityGrouping+0x44>)
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	60d3      	str	r3, [r2, #12]
}
 8001714:	bf00      	nop
 8001716:	3714      	adds	r7, #20
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	e000ed00 	.word	0xe000ed00

08001724 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001728:	4b04      	ldr	r3, [pc, #16]	; (800173c <__NVIC_GetPriorityGrouping+0x18>)
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	0a1b      	lsrs	r3, r3, #8
 800172e:	f003 0307 	and.w	r3, r3, #7
}
 8001732:	4618      	mov	r0, r3
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	e000ed00 	.word	0xe000ed00

08001740 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800174a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174e:	2b00      	cmp	r3, #0
 8001750:	db0b      	blt.n	800176a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	f003 021f 	and.w	r2, r3, #31
 8001758:	4907      	ldr	r1, [pc, #28]	; (8001778 <__NVIC_EnableIRQ+0x38>)
 800175a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175e:	095b      	lsrs	r3, r3, #5
 8001760:	2001      	movs	r0, #1
 8001762:	fa00 f202 	lsl.w	r2, r0, r2
 8001766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	e000e100 	.word	0xe000e100

0800177c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	6039      	str	r1, [r7, #0]
 8001786:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178c:	2b00      	cmp	r3, #0
 800178e:	db0a      	blt.n	80017a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	b2da      	uxtb	r2, r3
 8001794:	490c      	ldr	r1, [pc, #48]	; (80017c8 <__NVIC_SetPriority+0x4c>)
 8001796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179a:	0112      	lsls	r2, r2, #4
 800179c:	b2d2      	uxtb	r2, r2
 800179e:	440b      	add	r3, r1
 80017a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017a4:	e00a      	b.n	80017bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	4908      	ldr	r1, [pc, #32]	; (80017cc <__NVIC_SetPriority+0x50>)
 80017ac:	79fb      	ldrb	r3, [r7, #7]
 80017ae:	f003 030f 	and.w	r3, r3, #15
 80017b2:	3b04      	subs	r3, #4
 80017b4:	0112      	lsls	r2, r2, #4
 80017b6:	b2d2      	uxtb	r2, r2
 80017b8:	440b      	add	r3, r1
 80017ba:	761a      	strb	r2, [r3, #24]
}
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	e000e100 	.word	0xe000e100
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b089      	sub	sp, #36	; 0x24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	f1c3 0307 	rsb	r3, r3, #7
 80017ea:	2b04      	cmp	r3, #4
 80017ec:	bf28      	it	cs
 80017ee:	2304      	movcs	r3, #4
 80017f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	3304      	adds	r3, #4
 80017f6:	2b06      	cmp	r3, #6
 80017f8:	d902      	bls.n	8001800 <NVIC_EncodePriority+0x30>
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	3b03      	subs	r3, #3
 80017fe:	e000      	b.n	8001802 <NVIC_EncodePriority+0x32>
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001804:	f04f 32ff 	mov.w	r2, #4294967295
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	43da      	mvns	r2, r3
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	401a      	ands	r2, r3
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001818:	f04f 31ff 	mov.w	r1, #4294967295
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	fa01 f303 	lsl.w	r3, r1, r3
 8001822:	43d9      	mvns	r1, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001828:	4313      	orrs	r3, r2
         );
}
 800182a:	4618      	mov	r0, r3
 800182c:	3724      	adds	r7, #36	; 0x24
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
	...

08001838 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3b01      	subs	r3, #1
 8001844:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001848:	d301      	bcc.n	800184e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800184a:	2301      	movs	r3, #1
 800184c:	e00f      	b.n	800186e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800184e:	4a0a      	ldr	r2, [pc, #40]	; (8001878 <SysTick_Config+0x40>)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3b01      	subs	r3, #1
 8001854:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001856:	210f      	movs	r1, #15
 8001858:	f04f 30ff 	mov.w	r0, #4294967295
 800185c:	f7ff ff8e 	bl	800177c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001860:	4b05      	ldr	r3, [pc, #20]	; (8001878 <SysTick_Config+0x40>)
 8001862:	2200      	movs	r2, #0
 8001864:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001866:	4b04      	ldr	r3, [pc, #16]	; (8001878 <SysTick_Config+0x40>)
 8001868:	2207      	movs	r2, #7
 800186a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	e000e010 	.word	0xe000e010

0800187c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f7ff ff29 	bl	80016dc <__NVIC_SetPriorityGrouping>
}
 800188a:	bf00      	nop
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b086      	sub	sp, #24
 8001896:	af00      	add	r7, sp, #0
 8001898:	4603      	mov	r3, r0
 800189a:	60b9      	str	r1, [r7, #8]
 800189c:	607a      	str	r2, [r7, #4]
 800189e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80018a0:	2300      	movs	r3, #0
 80018a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018a4:	f7ff ff3e 	bl	8001724 <__NVIC_GetPriorityGrouping>
 80018a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	68b9      	ldr	r1, [r7, #8]
 80018ae:	6978      	ldr	r0, [r7, #20]
 80018b0:	f7ff ff8e 	bl	80017d0 <NVIC_EncodePriority>
 80018b4:	4602      	mov	r2, r0
 80018b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ba:	4611      	mov	r1, r2
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff ff5d 	bl	800177c <__NVIC_SetPriority>
}
 80018c2:	bf00      	nop
 80018c4:	3718      	adds	r7, #24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b082      	sub	sp, #8
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	4603      	mov	r3, r0
 80018d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff ff31 	bl	8001740 <__NVIC_EnableIRQ>
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b082      	sub	sp, #8
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f7ff ffa2 	bl	8001838 <SysTick_Config>
 80018f4:	4603      	mov	r3, r0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
	...

08001900 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001900:	b480      	push	{r7}
 8001902:	b087      	sub	sp, #28
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800190a:	2300      	movs	r3, #0
 800190c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800190e:	e17f      	b.n	8001c10 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	2101      	movs	r1, #1
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	fa01 f303 	lsl.w	r3, r1, r3
 800191c:	4013      	ands	r3, r2
 800191e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2b00      	cmp	r3, #0
 8001924:	f000 8171 	beq.w	8001c0a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f003 0303 	and.w	r3, r3, #3
 8001930:	2b01      	cmp	r3, #1
 8001932:	d005      	beq.n	8001940 <HAL_GPIO_Init+0x40>
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f003 0303 	and.w	r3, r3, #3
 800193c:	2b02      	cmp	r3, #2
 800193e:	d130      	bne.n	80019a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	2203      	movs	r2, #3
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	43db      	mvns	r3, r3
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	4013      	ands	r3, r2
 8001956:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	68da      	ldr	r2, [r3, #12]
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	4313      	orrs	r3, r2
 8001968:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	693a      	ldr	r2, [r7, #16]
 800196e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001976:	2201      	movs	r2, #1
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	fa02 f303 	lsl.w	r3, r2, r3
 800197e:	43db      	mvns	r3, r3
 8001980:	693a      	ldr	r2, [r7, #16]
 8001982:	4013      	ands	r3, r2
 8001984:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	091b      	lsrs	r3, r3, #4
 800198c:	f003 0201 	and.w	r2, r3, #1
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	4313      	orrs	r3, r2
 800199a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f003 0303 	and.w	r3, r3, #3
 80019aa:	2b03      	cmp	r3, #3
 80019ac:	d118      	bne.n	80019e0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80019b4:	2201      	movs	r2, #1
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	43db      	mvns	r3, r3
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	4013      	ands	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	08db      	lsrs	r3, r3, #3
 80019ca:	f003 0201 	and.w	r2, r3, #1
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f003 0303 	and.w	r3, r3, #3
 80019e8:	2b03      	cmp	r3, #3
 80019ea:	d017      	beq.n	8001a1c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	2203      	movs	r2, #3
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	43db      	mvns	r3, r3
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	4013      	ands	r3, r2
 8001a02:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	689a      	ldr	r2, [r3, #8]
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f003 0303 	and.w	r3, r3, #3
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d123      	bne.n	8001a70 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	08da      	lsrs	r2, r3, #3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	3208      	adds	r2, #8
 8001a30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a34:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	f003 0307 	and.w	r3, r3, #7
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	220f      	movs	r2, #15
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	43db      	mvns	r3, r3
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	691a      	ldr	r2, [r3, #16]
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	f003 0307 	and.w	r3, r3, #7
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	693a      	ldr	r2, [r7, #16]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	08da      	lsrs	r2, r3, #3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	3208      	adds	r2, #8
 8001a6a:	6939      	ldr	r1, [r7, #16]
 8001a6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	2203      	movs	r2, #3
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	43db      	mvns	r3, r3
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	4013      	ands	r3, r2
 8001a86:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f003 0203 	and.w	r2, r3, #3
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	f000 80ac 	beq.w	8001c0a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ab2:	4b5f      	ldr	r3, [pc, #380]	; (8001c30 <HAL_GPIO_Init+0x330>)
 8001ab4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ab6:	4a5e      	ldr	r2, [pc, #376]	; (8001c30 <HAL_GPIO_Init+0x330>)
 8001ab8:	f043 0301 	orr.w	r3, r3, #1
 8001abc:	6613      	str	r3, [r2, #96]	; 0x60
 8001abe:	4b5c      	ldr	r3, [pc, #368]	; (8001c30 <HAL_GPIO_Init+0x330>)
 8001ac0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	60bb      	str	r3, [r7, #8]
 8001ac8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001aca:	4a5a      	ldr	r2, [pc, #360]	; (8001c34 <HAL_GPIO_Init+0x334>)
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	089b      	lsrs	r3, r3, #2
 8001ad0:	3302      	adds	r3, #2
 8001ad2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ad6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	f003 0303 	and.w	r3, r3, #3
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	220f      	movs	r2, #15
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	693a      	ldr	r2, [r7, #16]
 8001aea:	4013      	ands	r3, r2
 8001aec:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001af4:	d025      	beq.n	8001b42 <HAL_GPIO_Init+0x242>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a4f      	ldr	r2, [pc, #316]	; (8001c38 <HAL_GPIO_Init+0x338>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d01f      	beq.n	8001b3e <HAL_GPIO_Init+0x23e>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a4e      	ldr	r2, [pc, #312]	; (8001c3c <HAL_GPIO_Init+0x33c>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d019      	beq.n	8001b3a <HAL_GPIO_Init+0x23a>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a4d      	ldr	r2, [pc, #308]	; (8001c40 <HAL_GPIO_Init+0x340>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d013      	beq.n	8001b36 <HAL_GPIO_Init+0x236>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a4c      	ldr	r2, [pc, #304]	; (8001c44 <HAL_GPIO_Init+0x344>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d00d      	beq.n	8001b32 <HAL_GPIO_Init+0x232>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a4b      	ldr	r2, [pc, #300]	; (8001c48 <HAL_GPIO_Init+0x348>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d007      	beq.n	8001b2e <HAL_GPIO_Init+0x22e>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a4a      	ldr	r2, [pc, #296]	; (8001c4c <HAL_GPIO_Init+0x34c>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d101      	bne.n	8001b2a <HAL_GPIO_Init+0x22a>
 8001b26:	2306      	movs	r3, #6
 8001b28:	e00c      	b.n	8001b44 <HAL_GPIO_Init+0x244>
 8001b2a:	2307      	movs	r3, #7
 8001b2c:	e00a      	b.n	8001b44 <HAL_GPIO_Init+0x244>
 8001b2e:	2305      	movs	r3, #5
 8001b30:	e008      	b.n	8001b44 <HAL_GPIO_Init+0x244>
 8001b32:	2304      	movs	r3, #4
 8001b34:	e006      	b.n	8001b44 <HAL_GPIO_Init+0x244>
 8001b36:	2303      	movs	r3, #3
 8001b38:	e004      	b.n	8001b44 <HAL_GPIO_Init+0x244>
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	e002      	b.n	8001b44 <HAL_GPIO_Init+0x244>
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e000      	b.n	8001b44 <HAL_GPIO_Init+0x244>
 8001b42:	2300      	movs	r3, #0
 8001b44:	697a      	ldr	r2, [r7, #20]
 8001b46:	f002 0203 	and.w	r2, r2, #3
 8001b4a:	0092      	lsls	r2, r2, #2
 8001b4c:	4093      	lsls	r3, r2
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b54:	4937      	ldr	r1, [pc, #220]	; (8001c34 <HAL_GPIO_Init+0x334>)
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	089b      	lsrs	r3, r3, #2
 8001b5a:	3302      	adds	r3, #2
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b62:	4b3b      	ldr	r3, [pc, #236]	; (8001c50 <HAL_GPIO_Init+0x350>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	693a      	ldr	r2, [r7, #16]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d003      	beq.n	8001b86 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b86:	4a32      	ldr	r2, [pc, #200]	; (8001c50 <HAL_GPIO_Init+0x350>)
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b8c:	4b30      	ldr	r3, [pc, #192]	; (8001c50 <HAL_GPIO_Init+0x350>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	43db      	mvns	r3, r3
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d003      	beq.n	8001bb0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001bb0:	4a27      	ldr	r2, [pc, #156]	; (8001c50 <HAL_GPIO_Init+0x350>)
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001bb6:	4b26      	ldr	r3, [pc, #152]	; (8001c50 <HAL_GPIO_Init+0x350>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	43db      	mvns	r3, r3
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d003      	beq.n	8001bda <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001bda:	4a1d      	ldr	r2, [pc, #116]	; (8001c50 <HAL_GPIO_Init+0x350>)
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001be0:	4b1b      	ldr	r3, [pc, #108]	; (8001c50 <HAL_GPIO_Init+0x350>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	43db      	mvns	r3, r3
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	4013      	ands	r3, r2
 8001bee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d003      	beq.n	8001c04 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c04:	4a12      	ldr	r2, [pc, #72]	; (8001c50 <HAL_GPIO_Init+0x350>)
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	fa22 f303 	lsr.w	r3, r2, r3
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	f47f ae78 	bne.w	8001910 <HAL_GPIO_Init+0x10>
  }
}
 8001c20:	bf00      	nop
 8001c22:	bf00      	nop
 8001c24:	371c      	adds	r7, #28
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	40021000 	.word	0x40021000
 8001c34:	40010000 	.word	0x40010000
 8001c38:	48000400 	.word	0x48000400
 8001c3c:	48000800 	.word	0x48000800
 8001c40:	48000c00 	.word	0x48000c00
 8001c44:	48001000 	.word	0x48001000
 8001c48:	48001400 	.word	0x48001400
 8001c4c:	48001800 	.word	0x48001800
 8001c50:	40010400 	.word	0x40010400

08001c54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	807b      	strh	r3, [r7, #2]
 8001c60:	4613      	mov	r3, r2
 8001c62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c64:	787b      	ldrb	r3, [r7, #1]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d003      	beq.n	8001c72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c6a:	887a      	ldrh	r2, [r7, #2]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c70:	e002      	b.n	8001c78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c72:	887a      	ldrh	r2, [r7, #2]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001c88:	4b04      	ldr	r3, [pc, #16]	; (8001c9c <HAL_PWREx_GetVoltageRange+0x18>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	40007000 	.word	0x40007000

08001ca0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cae:	d130      	bne.n	8001d12 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cb0:	4b23      	ldr	r3, [pc, #140]	; (8001d40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001cb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cbc:	d038      	beq.n	8001d30 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cbe:	4b20      	ldr	r3, [pc, #128]	; (8001d40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001cc6:	4a1e      	ldr	r2, [pc, #120]	; (8001d40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cc8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ccc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001cce:	4b1d      	ldr	r3, [pc, #116]	; (8001d44 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2232      	movs	r2, #50	; 0x32
 8001cd4:	fb02 f303 	mul.w	r3, r2, r3
 8001cd8:	4a1b      	ldr	r2, [pc, #108]	; (8001d48 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001cda:	fba2 2303 	umull	r2, r3, r2, r3
 8001cde:	0c9b      	lsrs	r3, r3, #18
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ce4:	e002      	b.n	8001cec <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	3b01      	subs	r3, #1
 8001cea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cec:	4b14      	ldr	r3, [pc, #80]	; (8001d40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cee:	695b      	ldr	r3, [r3, #20]
 8001cf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cf8:	d102      	bne.n	8001d00 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d1f2      	bne.n	8001ce6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d00:	4b0f      	ldr	r3, [pc, #60]	; (8001d40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d02:	695b      	ldr	r3, [r3, #20]
 8001d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d0c:	d110      	bne.n	8001d30 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e00f      	b.n	8001d32 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d12:	4b0b      	ldr	r3, [pc, #44]	; (8001d40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d1e:	d007      	beq.n	8001d30 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d20:	4b07      	ldr	r3, [pc, #28]	; (8001d40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d28:	4a05      	ldr	r2, [pc, #20]	; (8001d40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d2e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3714      	adds	r7, #20
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	40007000 	.word	0x40007000
 8001d44:	20000000 	.word	0x20000000
 8001d48:	431bde83 	.word	0x431bde83

08001d4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b088      	sub	sp, #32
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d101      	bne.n	8001d5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e3ca      	b.n	80024f4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d5e:	4b97      	ldr	r3, [pc, #604]	; (8001fbc <HAL_RCC_OscConfig+0x270>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 030c 	and.w	r3, r3, #12
 8001d66:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d68:	4b94      	ldr	r3, [pc, #592]	; (8001fbc <HAL_RCC_OscConfig+0x270>)
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	f003 0303 	and.w	r3, r3, #3
 8001d70:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0310 	and.w	r3, r3, #16
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f000 80e4 	beq.w	8001f48 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d007      	beq.n	8001d96 <HAL_RCC_OscConfig+0x4a>
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	2b0c      	cmp	r3, #12
 8001d8a:	f040 808b 	bne.w	8001ea4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	f040 8087 	bne.w	8001ea4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d96:	4b89      	ldr	r3, [pc, #548]	; (8001fbc <HAL_RCC_OscConfig+0x270>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d005      	beq.n	8001dae <HAL_RCC_OscConfig+0x62>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	699b      	ldr	r3, [r3, #24]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d101      	bne.n	8001dae <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e3a2      	b.n	80024f4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a1a      	ldr	r2, [r3, #32]
 8001db2:	4b82      	ldr	r3, [pc, #520]	; (8001fbc <HAL_RCC_OscConfig+0x270>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0308 	and.w	r3, r3, #8
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d004      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x7c>
 8001dbe:	4b7f      	ldr	r3, [pc, #508]	; (8001fbc <HAL_RCC_OscConfig+0x270>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dc6:	e005      	b.n	8001dd4 <HAL_RCC_OscConfig+0x88>
 8001dc8:	4b7c      	ldr	r3, [pc, #496]	; (8001fbc <HAL_RCC_OscConfig+0x270>)
 8001dca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dce:	091b      	lsrs	r3, r3, #4
 8001dd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d223      	bcs.n	8001e20 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a1b      	ldr	r3, [r3, #32]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f000 fd55 	bl	800288c <RCC_SetFlashLatencyFromMSIRange>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e383      	b.n	80024f4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dec:	4b73      	ldr	r3, [pc, #460]	; (8001fbc <HAL_RCC_OscConfig+0x270>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a72      	ldr	r2, [pc, #456]	; (8001fbc <HAL_RCC_OscConfig+0x270>)
 8001df2:	f043 0308 	orr.w	r3, r3, #8
 8001df6:	6013      	str	r3, [r2, #0]
 8001df8:	4b70      	ldr	r3, [pc, #448]	; (8001fbc <HAL_RCC_OscConfig+0x270>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a1b      	ldr	r3, [r3, #32]
 8001e04:	496d      	ldr	r1, [pc, #436]	; (8001fbc <HAL_RCC_OscConfig+0x270>)
 8001e06:	4313      	orrs	r3, r2
 8001e08:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e0a:	4b6c      	ldr	r3, [pc, #432]	; (8001fbc <HAL_RCC_OscConfig+0x270>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	69db      	ldr	r3, [r3, #28]
 8001e16:	021b      	lsls	r3, r3, #8
 8001e18:	4968      	ldr	r1, [pc, #416]	; (8001fbc <HAL_RCC_OscConfig+0x270>)
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	604b      	str	r3, [r1, #4]
 8001e1e:	e025      	b.n	8001e6c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e20:	4b66      	ldr	r3, [pc, #408]	; (8001fbc <HAL_RCC_OscConfig+0x270>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a65      	ldr	r2, [pc, #404]	; (8001fbc <HAL_RCC_OscConfig+0x270>)
 8001e26:	f043 0308 	orr.w	r3, r3, #8
 8001e2a:	6013      	str	r3, [r2, #0]
 8001e2c:	4b63      	ldr	r3, [pc, #396]	; (8001fbc <HAL_RCC_OscConfig+0x270>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6a1b      	ldr	r3, [r3, #32]
 8001e38:	4960      	ldr	r1, [pc, #384]	; (8001fbc <HAL_RCC_OscConfig+0x270>)
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e3e:	4b5f      	ldr	r3, [pc, #380]	; (8001fbc <HAL_RCC_OscConfig+0x270>)
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	69db      	ldr	r3, [r3, #28]
 8001e4a:	021b      	lsls	r3, r3, #8
 8001e4c:	495b      	ldr	r1, [pc, #364]	; (8001fbc <HAL_RCC_OscConfig+0x270>)
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d109      	bne.n	8001e6c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a1b      	ldr	r3, [r3, #32]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f000 fd15 	bl	800288c <RCC_SetFlashLatencyFromMSIRange>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e343      	b.n	80024f4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e6c:	f000 fc4a 	bl	8002704 <HAL_RCC_GetSysClockFreq>
 8001e70:	4602      	mov	r2, r0
 8001e72:	4b52      	ldr	r3, [pc, #328]	; (8001fbc <HAL_RCC_OscConfig+0x270>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	091b      	lsrs	r3, r3, #4
 8001e78:	f003 030f 	and.w	r3, r3, #15
 8001e7c:	4950      	ldr	r1, [pc, #320]	; (8001fc0 <HAL_RCC_OscConfig+0x274>)
 8001e7e:	5ccb      	ldrb	r3, [r1, r3]
 8001e80:	f003 031f 	and.w	r3, r3, #31
 8001e84:	fa22 f303 	lsr.w	r3, r2, r3
 8001e88:	4a4e      	ldr	r2, [pc, #312]	; (8001fc4 <HAL_RCC_OscConfig+0x278>)
 8001e8a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001e8c:	4b4e      	ldr	r3, [pc, #312]	; (8001fc8 <HAL_RCC_OscConfig+0x27c>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff fba3 	bl	80015dc <HAL_InitTick>
 8001e96:	4603      	mov	r3, r0
 8001e98:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001e9a:	7bfb      	ldrb	r3, [r7, #15]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d052      	beq.n	8001f46 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001ea0:	7bfb      	ldrb	r3, [r7, #15]
 8001ea2:	e327      	b.n	80024f4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d032      	beq.n	8001f12 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001eac:	4b43      	ldr	r3, [pc, #268]	; (8001fbc <HAL_RCC_OscConfig+0x270>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a42      	ldr	r2, [pc, #264]	; (8001fbc <HAL_RCC_OscConfig+0x270>)
 8001eb2:	f043 0301 	orr.w	r3, r3, #1
 8001eb6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001eb8:	f7ff fbe0 	bl	800167c <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ec0:	f7ff fbdc 	bl	800167c <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e310      	b.n	80024f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ed2:	4b3a      	ldr	r3, [pc, #232]	; (8001fbc <HAL_RCC_OscConfig+0x270>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d0f0      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ede:	4b37      	ldr	r3, [pc, #220]	; (8001fbc <HAL_RCC_OscConfig+0x270>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a36      	ldr	r2, [pc, #216]	; (8001fbc <HAL_RCC_OscConfig+0x270>)
 8001ee4:	f043 0308 	orr.w	r3, r3, #8
 8001ee8:	6013      	str	r3, [r2, #0]
 8001eea:	4b34      	ldr	r3, [pc, #208]	; (8001fbc <HAL_RCC_OscConfig+0x270>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6a1b      	ldr	r3, [r3, #32]
 8001ef6:	4931      	ldr	r1, [pc, #196]	; (8001fbc <HAL_RCC_OscConfig+0x270>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001efc:	4b2f      	ldr	r3, [pc, #188]	; (8001fbc <HAL_RCC_OscConfig+0x270>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	69db      	ldr	r3, [r3, #28]
 8001f08:	021b      	lsls	r3, r3, #8
 8001f0a:	492c      	ldr	r1, [pc, #176]	; (8001fbc <HAL_RCC_OscConfig+0x270>)
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	604b      	str	r3, [r1, #4]
 8001f10:	e01a      	b.n	8001f48 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f12:	4b2a      	ldr	r3, [pc, #168]	; (8001fbc <HAL_RCC_OscConfig+0x270>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a29      	ldr	r2, [pc, #164]	; (8001fbc <HAL_RCC_OscConfig+0x270>)
 8001f18:	f023 0301 	bic.w	r3, r3, #1
 8001f1c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f1e:	f7ff fbad 	bl	800167c <HAL_GetTick>
 8001f22:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f24:	e008      	b.n	8001f38 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f26:	f7ff fba9 	bl	800167c <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e2dd      	b.n	80024f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f38:	4b20      	ldr	r3, [pc, #128]	; (8001fbc <HAL_RCC_OscConfig+0x270>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d1f0      	bne.n	8001f26 <HAL_RCC_OscConfig+0x1da>
 8001f44:	e000      	b.n	8001f48 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f46:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0301 	and.w	r3, r3, #1
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d074      	beq.n	800203e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	2b08      	cmp	r3, #8
 8001f58:	d005      	beq.n	8001f66 <HAL_RCC_OscConfig+0x21a>
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	2b0c      	cmp	r3, #12
 8001f5e:	d10e      	bne.n	8001f7e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	2b03      	cmp	r3, #3
 8001f64:	d10b      	bne.n	8001f7e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f66:	4b15      	ldr	r3, [pc, #84]	; (8001fbc <HAL_RCC_OscConfig+0x270>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d064      	beq.n	800203c <HAL_RCC_OscConfig+0x2f0>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d160      	bne.n	800203c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e2ba      	b.n	80024f4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f86:	d106      	bne.n	8001f96 <HAL_RCC_OscConfig+0x24a>
 8001f88:	4b0c      	ldr	r3, [pc, #48]	; (8001fbc <HAL_RCC_OscConfig+0x270>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a0b      	ldr	r2, [pc, #44]	; (8001fbc <HAL_RCC_OscConfig+0x270>)
 8001f8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f92:	6013      	str	r3, [r2, #0]
 8001f94:	e026      	b.n	8001fe4 <HAL_RCC_OscConfig+0x298>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f9e:	d115      	bne.n	8001fcc <HAL_RCC_OscConfig+0x280>
 8001fa0:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <HAL_RCC_OscConfig+0x270>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a05      	ldr	r2, [pc, #20]	; (8001fbc <HAL_RCC_OscConfig+0x270>)
 8001fa6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001faa:	6013      	str	r3, [r2, #0]
 8001fac:	4b03      	ldr	r3, [pc, #12]	; (8001fbc <HAL_RCC_OscConfig+0x270>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a02      	ldr	r2, [pc, #8]	; (8001fbc <HAL_RCC_OscConfig+0x270>)
 8001fb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fb6:	6013      	str	r3, [r2, #0]
 8001fb8:	e014      	b.n	8001fe4 <HAL_RCC_OscConfig+0x298>
 8001fba:	bf00      	nop
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	080085a0 	.word	0x080085a0
 8001fc4:	20000000 	.word	0x20000000
 8001fc8:	20000004 	.word	0x20000004
 8001fcc:	4ba0      	ldr	r3, [pc, #640]	; (8002250 <HAL_RCC_OscConfig+0x504>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a9f      	ldr	r2, [pc, #636]	; (8002250 <HAL_RCC_OscConfig+0x504>)
 8001fd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fd6:	6013      	str	r3, [r2, #0]
 8001fd8:	4b9d      	ldr	r3, [pc, #628]	; (8002250 <HAL_RCC_OscConfig+0x504>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a9c      	ldr	r2, [pc, #624]	; (8002250 <HAL_RCC_OscConfig+0x504>)
 8001fde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fe2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d013      	beq.n	8002014 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fec:	f7ff fb46 	bl	800167c <HAL_GetTick>
 8001ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ff2:	e008      	b.n	8002006 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ff4:	f7ff fb42 	bl	800167c <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b64      	cmp	r3, #100	; 0x64
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e276      	b.n	80024f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002006:	4b92      	ldr	r3, [pc, #584]	; (8002250 <HAL_RCC_OscConfig+0x504>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d0f0      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x2a8>
 8002012:	e014      	b.n	800203e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002014:	f7ff fb32 	bl	800167c <HAL_GetTick>
 8002018:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800201a:	e008      	b.n	800202e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800201c:	f7ff fb2e 	bl	800167c <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b64      	cmp	r3, #100	; 0x64
 8002028:	d901      	bls.n	800202e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e262      	b.n	80024f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800202e:	4b88      	ldr	r3, [pc, #544]	; (8002250 <HAL_RCC_OscConfig+0x504>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d1f0      	bne.n	800201c <HAL_RCC_OscConfig+0x2d0>
 800203a:	e000      	b.n	800203e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800203c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d060      	beq.n	800210c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	2b04      	cmp	r3, #4
 800204e:	d005      	beq.n	800205c <HAL_RCC_OscConfig+0x310>
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	2b0c      	cmp	r3, #12
 8002054:	d119      	bne.n	800208a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	2b02      	cmp	r3, #2
 800205a:	d116      	bne.n	800208a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800205c:	4b7c      	ldr	r3, [pc, #496]	; (8002250 <HAL_RCC_OscConfig+0x504>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002064:	2b00      	cmp	r3, #0
 8002066:	d005      	beq.n	8002074 <HAL_RCC_OscConfig+0x328>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d101      	bne.n	8002074 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e23f      	b.n	80024f4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002074:	4b76      	ldr	r3, [pc, #472]	; (8002250 <HAL_RCC_OscConfig+0x504>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	691b      	ldr	r3, [r3, #16]
 8002080:	061b      	lsls	r3, r3, #24
 8002082:	4973      	ldr	r1, [pc, #460]	; (8002250 <HAL_RCC_OscConfig+0x504>)
 8002084:	4313      	orrs	r3, r2
 8002086:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002088:	e040      	b.n	800210c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d023      	beq.n	80020da <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002092:	4b6f      	ldr	r3, [pc, #444]	; (8002250 <HAL_RCC_OscConfig+0x504>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a6e      	ldr	r2, [pc, #440]	; (8002250 <HAL_RCC_OscConfig+0x504>)
 8002098:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800209c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800209e:	f7ff faed 	bl	800167c <HAL_GetTick>
 80020a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020a4:	e008      	b.n	80020b8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020a6:	f7ff fae9 	bl	800167c <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d901      	bls.n	80020b8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e21d      	b.n	80024f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020b8:	4b65      	ldr	r3, [pc, #404]	; (8002250 <HAL_RCC_OscConfig+0x504>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d0f0      	beq.n	80020a6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020c4:	4b62      	ldr	r3, [pc, #392]	; (8002250 <HAL_RCC_OscConfig+0x504>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	691b      	ldr	r3, [r3, #16]
 80020d0:	061b      	lsls	r3, r3, #24
 80020d2:	495f      	ldr	r1, [pc, #380]	; (8002250 <HAL_RCC_OscConfig+0x504>)
 80020d4:	4313      	orrs	r3, r2
 80020d6:	604b      	str	r3, [r1, #4]
 80020d8:	e018      	b.n	800210c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020da:	4b5d      	ldr	r3, [pc, #372]	; (8002250 <HAL_RCC_OscConfig+0x504>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a5c      	ldr	r2, [pc, #368]	; (8002250 <HAL_RCC_OscConfig+0x504>)
 80020e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e6:	f7ff fac9 	bl	800167c <HAL_GetTick>
 80020ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020ec:	e008      	b.n	8002100 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020ee:	f7ff fac5 	bl	800167c <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d901      	bls.n	8002100 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e1f9      	b.n	80024f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002100:	4b53      	ldr	r3, [pc, #332]	; (8002250 <HAL_RCC_OscConfig+0x504>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002108:	2b00      	cmp	r3, #0
 800210a:	d1f0      	bne.n	80020ee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0308 	and.w	r3, r3, #8
 8002114:	2b00      	cmp	r3, #0
 8002116:	d03c      	beq.n	8002192 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	695b      	ldr	r3, [r3, #20]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d01c      	beq.n	800215a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002120:	4b4b      	ldr	r3, [pc, #300]	; (8002250 <HAL_RCC_OscConfig+0x504>)
 8002122:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002126:	4a4a      	ldr	r2, [pc, #296]	; (8002250 <HAL_RCC_OscConfig+0x504>)
 8002128:	f043 0301 	orr.w	r3, r3, #1
 800212c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002130:	f7ff faa4 	bl	800167c <HAL_GetTick>
 8002134:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002136:	e008      	b.n	800214a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002138:	f7ff faa0 	bl	800167c <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b02      	cmp	r3, #2
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e1d4      	b.n	80024f4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800214a:	4b41      	ldr	r3, [pc, #260]	; (8002250 <HAL_RCC_OscConfig+0x504>)
 800214c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d0ef      	beq.n	8002138 <HAL_RCC_OscConfig+0x3ec>
 8002158:	e01b      	b.n	8002192 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800215a:	4b3d      	ldr	r3, [pc, #244]	; (8002250 <HAL_RCC_OscConfig+0x504>)
 800215c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002160:	4a3b      	ldr	r2, [pc, #236]	; (8002250 <HAL_RCC_OscConfig+0x504>)
 8002162:	f023 0301 	bic.w	r3, r3, #1
 8002166:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800216a:	f7ff fa87 	bl	800167c <HAL_GetTick>
 800216e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002170:	e008      	b.n	8002184 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002172:	f7ff fa83 	bl	800167c <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	2b02      	cmp	r3, #2
 800217e:	d901      	bls.n	8002184 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e1b7      	b.n	80024f4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002184:	4b32      	ldr	r3, [pc, #200]	; (8002250 <HAL_RCC_OscConfig+0x504>)
 8002186:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1ef      	bne.n	8002172 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0304 	and.w	r3, r3, #4
 800219a:	2b00      	cmp	r3, #0
 800219c:	f000 80a6 	beq.w	80022ec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021a0:	2300      	movs	r3, #0
 80021a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80021a4:	4b2a      	ldr	r3, [pc, #168]	; (8002250 <HAL_RCC_OscConfig+0x504>)
 80021a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d10d      	bne.n	80021cc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021b0:	4b27      	ldr	r3, [pc, #156]	; (8002250 <HAL_RCC_OscConfig+0x504>)
 80021b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b4:	4a26      	ldr	r2, [pc, #152]	; (8002250 <HAL_RCC_OscConfig+0x504>)
 80021b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ba:	6593      	str	r3, [r2, #88]	; 0x58
 80021bc:	4b24      	ldr	r3, [pc, #144]	; (8002250 <HAL_RCC_OscConfig+0x504>)
 80021be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c4:	60bb      	str	r3, [r7, #8]
 80021c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021c8:	2301      	movs	r3, #1
 80021ca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021cc:	4b21      	ldr	r3, [pc, #132]	; (8002254 <HAL_RCC_OscConfig+0x508>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d118      	bne.n	800220a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021d8:	4b1e      	ldr	r3, [pc, #120]	; (8002254 <HAL_RCC_OscConfig+0x508>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a1d      	ldr	r2, [pc, #116]	; (8002254 <HAL_RCC_OscConfig+0x508>)
 80021de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021e4:	f7ff fa4a 	bl	800167c <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021ec:	f7ff fa46 	bl	800167c <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e17a      	b.n	80024f4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021fe:	4b15      	ldr	r3, [pc, #84]	; (8002254 <HAL_RCC_OscConfig+0x508>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002206:	2b00      	cmp	r3, #0
 8002208:	d0f0      	beq.n	80021ec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d108      	bne.n	8002224 <HAL_RCC_OscConfig+0x4d8>
 8002212:	4b0f      	ldr	r3, [pc, #60]	; (8002250 <HAL_RCC_OscConfig+0x504>)
 8002214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002218:	4a0d      	ldr	r2, [pc, #52]	; (8002250 <HAL_RCC_OscConfig+0x504>)
 800221a:	f043 0301 	orr.w	r3, r3, #1
 800221e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002222:	e029      	b.n	8002278 <HAL_RCC_OscConfig+0x52c>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	2b05      	cmp	r3, #5
 800222a:	d115      	bne.n	8002258 <HAL_RCC_OscConfig+0x50c>
 800222c:	4b08      	ldr	r3, [pc, #32]	; (8002250 <HAL_RCC_OscConfig+0x504>)
 800222e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002232:	4a07      	ldr	r2, [pc, #28]	; (8002250 <HAL_RCC_OscConfig+0x504>)
 8002234:	f043 0304 	orr.w	r3, r3, #4
 8002238:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800223c:	4b04      	ldr	r3, [pc, #16]	; (8002250 <HAL_RCC_OscConfig+0x504>)
 800223e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002242:	4a03      	ldr	r2, [pc, #12]	; (8002250 <HAL_RCC_OscConfig+0x504>)
 8002244:	f043 0301 	orr.w	r3, r3, #1
 8002248:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800224c:	e014      	b.n	8002278 <HAL_RCC_OscConfig+0x52c>
 800224e:	bf00      	nop
 8002250:	40021000 	.word	0x40021000
 8002254:	40007000 	.word	0x40007000
 8002258:	4b9c      	ldr	r3, [pc, #624]	; (80024cc <HAL_RCC_OscConfig+0x780>)
 800225a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800225e:	4a9b      	ldr	r2, [pc, #620]	; (80024cc <HAL_RCC_OscConfig+0x780>)
 8002260:	f023 0301 	bic.w	r3, r3, #1
 8002264:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002268:	4b98      	ldr	r3, [pc, #608]	; (80024cc <HAL_RCC_OscConfig+0x780>)
 800226a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800226e:	4a97      	ldr	r2, [pc, #604]	; (80024cc <HAL_RCC_OscConfig+0x780>)
 8002270:	f023 0304 	bic.w	r3, r3, #4
 8002274:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d016      	beq.n	80022ae <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002280:	f7ff f9fc 	bl	800167c <HAL_GetTick>
 8002284:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002286:	e00a      	b.n	800229e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002288:	f7ff f9f8 	bl	800167c <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	f241 3288 	movw	r2, #5000	; 0x1388
 8002296:	4293      	cmp	r3, r2
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e12a      	b.n	80024f4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800229e:	4b8b      	ldr	r3, [pc, #556]	; (80024cc <HAL_RCC_OscConfig+0x780>)
 80022a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d0ed      	beq.n	8002288 <HAL_RCC_OscConfig+0x53c>
 80022ac:	e015      	b.n	80022da <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ae:	f7ff f9e5 	bl	800167c <HAL_GetTick>
 80022b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022b4:	e00a      	b.n	80022cc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022b6:	f7ff f9e1 	bl	800167c <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d901      	bls.n	80022cc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e113      	b.n	80024f4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022cc:	4b7f      	ldr	r3, [pc, #508]	; (80024cc <HAL_RCC_OscConfig+0x780>)
 80022ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d1ed      	bne.n	80022b6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022da:	7ffb      	ldrb	r3, [r7, #31]
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d105      	bne.n	80022ec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022e0:	4b7a      	ldr	r3, [pc, #488]	; (80024cc <HAL_RCC_OscConfig+0x780>)
 80022e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e4:	4a79      	ldr	r2, [pc, #484]	; (80024cc <HAL_RCC_OscConfig+0x780>)
 80022e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022ea:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f000 80fe 	beq.w	80024f2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	f040 80d0 	bne.w	80024a0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002300:	4b72      	ldr	r3, [pc, #456]	; (80024cc <HAL_RCC_OscConfig+0x780>)
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	f003 0203 	and.w	r2, r3, #3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002310:	429a      	cmp	r2, r3
 8002312:	d130      	bne.n	8002376 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	3b01      	subs	r3, #1
 8002320:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002322:	429a      	cmp	r2, r3
 8002324:	d127      	bne.n	8002376 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002330:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002332:	429a      	cmp	r2, r3
 8002334:	d11f      	bne.n	8002376 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002340:	2a07      	cmp	r2, #7
 8002342:	bf14      	ite	ne
 8002344:	2201      	movne	r2, #1
 8002346:	2200      	moveq	r2, #0
 8002348:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800234a:	4293      	cmp	r3, r2
 800234c:	d113      	bne.n	8002376 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002358:	085b      	lsrs	r3, r3, #1
 800235a:	3b01      	subs	r3, #1
 800235c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800235e:	429a      	cmp	r2, r3
 8002360:	d109      	bne.n	8002376 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236c:	085b      	lsrs	r3, r3, #1
 800236e:	3b01      	subs	r3, #1
 8002370:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002372:	429a      	cmp	r2, r3
 8002374:	d06e      	beq.n	8002454 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	2b0c      	cmp	r3, #12
 800237a:	d069      	beq.n	8002450 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800237c:	4b53      	ldr	r3, [pc, #332]	; (80024cc <HAL_RCC_OscConfig+0x780>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d105      	bne.n	8002394 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002388:	4b50      	ldr	r3, [pc, #320]	; (80024cc <HAL_RCC_OscConfig+0x780>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e0ad      	b.n	80024f4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002398:	4b4c      	ldr	r3, [pc, #304]	; (80024cc <HAL_RCC_OscConfig+0x780>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a4b      	ldr	r2, [pc, #300]	; (80024cc <HAL_RCC_OscConfig+0x780>)
 800239e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023a2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80023a4:	f7ff f96a 	bl	800167c <HAL_GetTick>
 80023a8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023aa:	e008      	b.n	80023be <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ac:	f7ff f966 	bl	800167c <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d901      	bls.n	80023be <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e09a      	b.n	80024f4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023be:	4b43      	ldr	r3, [pc, #268]	; (80024cc <HAL_RCC_OscConfig+0x780>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d1f0      	bne.n	80023ac <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023ca:	4b40      	ldr	r3, [pc, #256]	; (80024cc <HAL_RCC_OscConfig+0x780>)
 80023cc:	68da      	ldr	r2, [r3, #12]
 80023ce:	4b40      	ldr	r3, [pc, #256]	; (80024d0 <HAL_RCC_OscConfig+0x784>)
 80023d0:	4013      	ands	r3, r2
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80023da:	3a01      	subs	r2, #1
 80023dc:	0112      	lsls	r2, r2, #4
 80023de:	4311      	orrs	r1, r2
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80023e4:	0212      	lsls	r2, r2, #8
 80023e6:	4311      	orrs	r1, r2
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80023ec:	0852      	lsrs	r2, r2, #1
 80023ee:	3a01      	subs	r2, #1
 80023f0:	0552      	lsls	r2, r2, #21
 80023f2:	4311      	orrs	r1, r2
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80023f8:	0852      	lsrs	r2, r2, #1
 80023fa:	3a01      	subs	r2, #1
 80023fc:	0652      	lsls	r2, r2, #25
 80023fe:	4311      	orrs	r1, r2
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002404:	0912      	lsrs	r2, r2, #4
 8002406:	0452      	lsls	r2, r2, #17
 8002408:	430a      	orrs	r2, r1
 800240a:	4930      	ldr	r1, [pc, #192]	; (80024cc <HAL_RCC_OscConfig+0x780>)
 800240c:	4313      	orrs	r3, r2
 800240e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002410:	4b2e      	ldr	r3, [pc, #184]	; (80024cc <HAL_RCC_OscConfig+0x780>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a2d      	ldr	r2, [pc, #180]	; (80024cc <HAL_RCC_OscConfig+0x780>)
 8002416:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800241a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800241c:	4b2b      	ldr	r3, [pc, #172]	; (80024cc <HAL_RCC_OscConfig+0x780>)
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	4a2a      	ldr	r2, [pc, #168]	; (80024cc <HAL_RCC_OscConfig+0x780>)
 8002422:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002426:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002428:	f7ff f928 	bl	800167c <HAL_GetTick>
 800242c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800242e:	e008      	b.n	8002442 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002430:	f7ff f924 	bl	800167c <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b02      	cmp	r3, #2
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e058      	b.n	80024f4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002442:	4b22      	ldr	r3, [pc, #136]	; (80024cc <HAL_RCC_OscConfig+0x780>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d0f0      	beq.n	8002430 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800244e:	e050      	b.n	80024f2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e04f      	b.n	80024f4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002454:	4b1d      	ldr	r3, [pc, #116]	; (80024cc <HAL_RCC_OscConfig+0x780>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d148      	bne.n	80024f2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002460:	4b1a      	ldr	r3, [pc, #104]	; (80024cc <HAL_RCC_OscConfig+0x780>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a19      	ldr	r2, [pc, #100]	; (80024cc <HAL_RCC_OscConfig+0x780>)
 8002466:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800246a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800246c:	4b17      	ldr	r3, [pc, #92]	; (80024cc <HAL_RCC_OscConfig+0x780>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	4a16      	ldr	r2, [pc, #88]	; (80024cc <HAL_RCC_OscConfig+0x780>)
 8002472:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002476:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002478:	f7ff f900 	bl	800167c <HAL_GetTick>
 800247c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800247e:	e008      	b.n	8002492 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002480:	f7ff f8fc 	bl	800167c <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b02      	cmp	r3, #2
 800248c:	d901      	bls.n	8002492 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e030      	b.n	80024f4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002492:	4b0e      	ldr	r3, [pc, #56]	; (80024cc <HAL_RCC_OscConfig+0x780>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d0f0      	beq.n	8002480 <HAL_RCC_OscConfig+0x734>
 800249e:	e028      	b.n	80024f2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	2b0c      	cmp	r3, #12
 80024a4:	d023      	beq.n	80024ee <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024a6:	4b09      	ldr	r3, [pc, #36]	; (80024cc <HAL_RCC_OscConfig+0x780>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a08      	ldr	r2, [pc, #32]	; (80024cc <HAL_RCC_OscConfig+0x780>)
 80024ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b2:	f7ff f8e3 	bl	800167c <HAL_GetTick>
 80024b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024b8:	e00c      	b.n	80024d4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ba:	f7ff f8df 	bl	800167c <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d905      	bls.n	80024d4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e013      	b.n	80024f4 <HAL_RCC_OscConfig+0x7a8>
 80024cc:	40021000 	.word	0x40021000
 80024d0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024d4:	4b09      	ldr	r3, [pc, #36]	; (80024fc <HAL_RCC_OscConfig+0x7b0>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d1ec      	bne.n	80024ba <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80024e0:	4b06      	ldr	r3, [pc, #24]	; (80024fc <HAL_RCC_OscConfig+0x7b0>)
 80024e2:	68da      	ldr	r2, [r3, #12]
 80024e4:	4905      	ldr	r1, [pc, #20]	; (80024fc <HAL_RCC_OscConfig+0x7b0>)
 80024e6:	4b06      	ldr	r3, [pc, #24]	; (8002500 <HAL_RCC_OscConfig+0x7b4>)
 80024e8:	4013      	ands	r3, r2
 80024ea:	60cb      	str	r3, [r1, #12]
 80024ec:	e001      	b.n	80024f2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e000      	b.n	80024f4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80024f2:	2300      	movs	r3, #0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3720      	adds	r7, #32
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	40021000 	.word	0x40021000
 8002500:	feeefffc 	.word	0xfeeefffc

08002504 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d101      	bne.n	8002518 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e0e7      	b.n	80026e8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002518:	4b75      	ldr	r3, [pc, #468]	; (80026f0 <HAL_RCC_ClockConfig+0x1ec>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0307 	and.w	r3, r3, #7
 8002520:	683a      	ldr	r2, [r7, #0]
 8002522:	429a      	cmp	r2, r3
 8002524:	d910      	bls.n	8002548 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002526:	4b72      	ldr	r3, [pc, #456]	; (80026f0 <HAL_RCC_ClockConfig+0x1ec>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f023 0207 	bic.w	r2, r3, #7
 800252e:	4970      	ldr	r1, [pc, #448]	; (80026f0 <HAL_RCC_ClockConfig+0x1ec>)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	4313      	orrs	r3, r2
 8002534:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002536:	4b6e      	ldr	r3, [pc, #440]	; (80026f0 <HAL_RCC_ClockConfig+0x1ec>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0307 	and.w	r3, r3, #7
 800253e:	683a      	ldr	r2, [r7, #0]
 8002540:	429a      	cmp	r2, r3
 8002542:	d001      	beq.n	8002548 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e0cf      	b.n	80026e8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d010      	beq.n	8002576 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689a      	ldr	r2, [r3, #8]
 8002558:	4b66      	ldr	r3, [pc, #408]	; (80026f4 <HAL_RCC_ClockConfig+0x1f0>)
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002560:	429a      	cmp	r2, r3
 8002562:	d908      	bls.n	8002576 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002564:	4b63      	ldr	r3, [pc, #396]	; (80026f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	4960      	ldr	r1, [pc, #384]	; (80026f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002572:	4313      	orrs	r3, r2
 8002574:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	2b00      	cmp	r3, #0
 8002580:	d04c      	beq.n	800261c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	2b03      	cmp	r3, #3
 8002588:	d107      	bne.n	800259a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800258a:	4b5a      	ldr	r3, [pc, #360]	; (80026f4 <HAL_RCC_ClockConfig+0x1f0>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d121      	bne.n	80025da <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e0a6      	b.n	80026e8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d107      	bne.n	80025b2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025a2:	4b54      	ldr	r3, [pc, #336]	; (80026f4 <HAL_RCC_ClockConfig+0x1f0>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d115      	bne.n	80025da <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e09a      	b.n	80026e8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d107      	bne.n	80025ca <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025ba:	4b4e      	ldr	r3, [pc, #312]	; (80026f4 <HAL_RCC_ClockConfig+0x1f0>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d109      	bne.n	80025da <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e08e      	b.n	80026e8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025ca:	4b4a      	ldr	r3, [pc, #296]	; (80026f4 <HAL_RCC_ClockConfig+0x1f0>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e086      	b.n	80026e8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80025da:	4b46      	ldr	r3, [pc, #280]	; (80026f4 <HAL_RCC_ClockConfig+0x1f0>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f023 0203 	bic.w	r2, r3, #3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	4943      	ldr	r1, [pc, #268]	; (80026f4 <HAL_RCC_ClockConfig+0x1f0>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025ec:	f7ff f846 	bl	800167c <HAL_GetTick>
 80025f0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025f2:	e00a      	b.n	800260a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025f4:	f7ff f842 	bl	800167c <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002602:	4293      	cmp	r3, r2
 8002604:	d901      	bls.n	800260a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e06e      	b.n	80026e8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800260a:	4b3a      	ldr	r3, [pc, #232]	; (80026f4 <HAL_RCC_ClockConfig+0x1f0>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f003 020c 	and.w	r2, r3, #12
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	429a      	cmp	r2, r3
 800261a:	d1eb      	bne.n	80025f4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0302 	and.w	r3, r3, #2
 8002624:	2b00      	cmp	r3, #0
 8002626:	d010      	beq.n	800264a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689a      	ldr	r2, [r3, #8]
 800262c:	4b31      	ldr	r3, [pc, #196]	; (80026f4 <HAL_RCC_ClockConfig+0x1f0>)
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002634:	429a      	cmp	r2, r3
 8002636:	d208      	bcs.n	800264a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002638:	4b2e      	ldr	r3, [pc, #184]	; (80026f4 <HAL_RCC_ClockConfig+0x1f0>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	492b      	ldr	r1, [pc, #172]	; (80026f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002646:	4313      	orrs	r3, r2
 8002648:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800264a:	4b29      	ldr	r3, [pc, #164]	; (80026f0 <HAL_RCC_ClockConfig+0x1ec>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0307 	and.w	r3, r3, #7
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	429a      	cmp	r2, r3
 8002656:	d210      	bcs.n	800267a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002658:	4b25      	ldr	r3, [pc, #148]	; (80026f0 <HAL_RCC_ClockConfig+0x1ec>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f023 0207 	bic.w	r2, r3, #7
 8002660:	4923      	ldr	r1, [pc, #140]	; (80026f0 <HAL_RCC_ClockConfig+0x1ec>)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	4313      	orrs	r3, r2
 8002666:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002668:	4b21      	ldr	r3, [pc, #132]	; (80026f0 <HAL_RCC_ClockConfig+0x1ec>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0307 	and.w	r3, r3, #7
 8002670:	683a      	ldr	r2, [r7, #0]
 8002672:	429a      	cmp	r2, r3
 8002674:	d001      	beq.n	800267a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e036      	b.n	80026e8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0304 	and.w	r3, r3, #4
 8002682:	2b00      	cmp	r3, #0
 8002684:	d008      	beq.n	8002698 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002686:	4b1b      	ldr	r3, [pc, #108]	; (80026f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	4918      	ldr	r1, [pc, #96]	; (80026f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002694:	4313      	orrs	r3, r2
 8002696:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0308 	and.w	r3, r3, #8
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d009      	beq.n	80026b8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026a4:	4b13      	ldr	r3, [pc, #76]	; (80026f4 <HAL_RCC_ClockConfig+0x1f0>)
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	00db      	lsls	r3, r3, #3
 80026b2:	4910      	ldr	r1, [pc, #64]	; (80026f4 <HAL_RCC_ClockConfig+0x1f0>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026b8:	f000 f824 	bl	8002704 <HAL_RCC_GetSysClockFreq>
 80026bc:	4602      	mov	r2, r0
 80026be:	4b0d      	ldr	r3, [pc, #52]	; (80026f4 <HAL_RCC_ClockConfig+0x1f0>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	091b      	lsrs	r3, r3, #4
 80026c4:	f003 030f 	and.w	r3, r3, #15
 80026c8:	490b      	ldr	r1, [pc, #44]	; (80026f8 <HAL_RCC_ClockConfig+0x1f4>)
 80026ca:	5ccb      	ldrb	r3, [r1, r3]
 80026cc:	f003 031f 	and.w	r3, r3, #31
 80026d0:	fa22 f303 	lsr.w	r3, r2, r3
 80026d4:	4a09      	ldr	r2, [pc, #36]	; (80026fc <HAL_RCC_ClockConfig+0x1f8>)
 80026d6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80026d8:	4b09      	ldr	r3, [pc, #36]	; (8002700 <HAL_RCC_ClockConfig+0x1fc>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4618      	mov	r0, r3
 80026de:	f7fe ff7d 	bl	80015dc <HAL_InitTick>
 80026e2:	4603      	mov	r3, r0
 80026e4:	72fb      	strb	r3, [r7, #11]

  return status;
 80026e6:	7afb      	ldrb	r3, [r7, #11]
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3710      	adds	r7, #16
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40022000 	.word	0x40022000
 80026f4:	40021000 	.word	0x40021000
 80026f8:	080085a0 	.word	0x080085a0
 80026fc:	20000000 	.word	0x20000000
 8002700:	20000004 	.word	0x20000004

08002704 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002704:	b480      	push	{r7}
 8002706:	b089      	sub	sp, #36	; 0x24
 8002708:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800270a:	2300      	movs	r3, #0
 800270c:	61fb      	str	r3, [r7, #28]
 800270e:	2300      	movs	r3, #0
 8002710:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002712:	4b3e      	ldr	r3, [pc, #248]	; (800280c <HAL_RCC_GetSysClockFreq+0x108>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f003 030c 	and.w	r3, r3, #12
 800271a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800271c:	4b3b      	ldr	r3, [pc, #236]	; (800280c <HAL_RCC_GetSysClockFreq+0x108>)
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	f003 0303 	and.w	r3, r3, #3
 8002724:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d005      	beq.n	8002738 <HAL_RCC_GetSysClockFreq+0x34>
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	2b0c      	cmp	r3, #12
 8002730:	d121      	bne.n	8002776 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d11e      	bne.n	8002776 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002738:	4b34      	ldr	r3, [pc, #208]	; (800280c <HAL_RCC_GetSysClockFreq+0x108>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0308 	and.w	r3, r3, #8
 8002740:	2b00      	cmp	r3, #0
 8002742:	d107      	bne.n	8002754 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002744:	4b31      	ldr	r3, [pc, #196]	; (800280c <HAL_RCC_GetSysClockFreq+0x108>)
 8002746:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800274a:	0a1b      	lsrs	r3, r3, #8
 800274c:	f003 030f 	and.w	r3, r3, #15
 8002750:	61fb      	str	r3, [r7, #28]
 8002752:	e005      	b.n	8002760 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002754:	4b2d      	ldr	r3, [pc, #180]	; (800280c <HAL_RCC_GetSysClockFreq+0x108>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	091b      	lsrs	r3, r3, #4
 800275a:	f003 030f 	and.w	r3, r3, #15
 800275e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002760:	4a2b      	ldr	r2, [pc, #172]	; (8002810 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002768:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d10d      	bne.n	800278c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002774:	e00a      	b.n	800278c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	2b04      	cmp	r3, #4
 800277a:	d102      	bne.n	8002782 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800277c:	4b25      	ldr	r3, [pc, #148]	; (8002814 <HAL_RCC_GetSysClockFreq+0x110>)
 800277e:	61bb      	str	r3, [r7, #24]
 8002780:	e004      	b.n	800278c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	2b08      	cmp	r3, #8
 8002786:	d101      	bne.n	800278c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002788:	4b23      	ldr	r3, [pc, #140]	; (8002818 <HAL_RCC_GetSysClockFreq+0x114>)
 800278a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	2b0c      	cmp	r3, #12
 8002790:	d134      	bne.n	80027fc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002792:	4b1e      	ldr	r3, [pc, #120]	; (800280c <HAL_RCC_GetSysClockFreq+0x108>)
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	f003 0303 	and.w	r3, r3, #3
 800279a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d003      	beq.n	80027aa <HAL_RCC_GetSysClockFreq+0xa6>
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	2b03      	cmp	r3, #3
 80027a6:	d003      	beq.n	80027b0 <HAL_RCC_GetSysClockFreq+0xac>
 80027a8:	e005      	b.n	80027b6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80027aa:	4b1a      	ldr	r3, [pc, #104]	; (8002814 <HAL_RCC_GetSysClockFreq+0x110>)
 80027ac:	617b      	str	r3, [r7, #20]
      break;
 80027ae:	e005      	b.n	80027bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80027b0:	4b19      	ldr	r3, [pc, #100]	; (8002818 <HAL_RCC_GetSysClockFreq+0x114>)
 80027b2:	617b      	str	r3, [r7, #20]
      break;
 80027b4:	e002      	b.n	80027bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	617b      	str	r3, [r7, #20]
      break;
 80027ba:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80027bc:	4b13      	ldr	r3, [pc, #76]	; (800280c <HAL_RCC_GetSysClockFreq+0x108>)
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	091b      	lsrs	r3, r3, #4
 80027c2:	f003 0307 	and.w	r3, r3, #7
 80027c6:	3301      	adds	r3, #1
 80027c8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80027ca:	4b10      	ldr	r3, [pc, #64]	; (800280c <HAL_RCC_GetSysClockFreq+0x108>)
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	0a1b      	lsrs	r3, r3, #8
 80027d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027d4:	697a      	ldr	r2, [r7, #20]
 80027d6:	fb03 f202 	mul.w	r2, r3, r2
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80027e2:	4b0a      	ldr	r3, [pc, #40]	; (800280c <HAL_RCC_GetSysClockFreq+0x108>)
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	0e5b      	lsrs	r3, r3, #25
 80027e8:	f003 0303 	and.w	r3, r3, #3
 80027ec:	3301      	adds	r3, #1
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80027f2:	697a      	ldr	r2, [r7, #20]
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027fa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80027fc:	69bb      	ldr	r3, [r7, #24]
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3724      	adds	r7, #36	; 0x24
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	40021000 	.word	0x40021000
 8002810:	080085b8 	.word	0x080085b8
 8002814:	00f42400 	.word	0x00f42400
 8002818:	007a1200 	.word	0x007a1200

0800281c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002820:	4b03      	ldr	r3, [pc, #12]	; (8002830 <HAL_RCC_GetHCLKFreq+0x14>)
 8002822:	681b      	ldr	r3, [r3, #0]
}
 8002824:	4618      	mov	r0, r3
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	20000000 	.word	0x20000000

08002834 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002838:	f7ff fff0 	bl	800281c <HAL_RCC_GetHCLKFreq>
 800283c:	4602      	mov	r2, r0
 800283e:	4b06      	ldr	r3, [pc, #24]	; (8002858 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	0a1b      	lsrs	r3, r3, #8
 8002844:	f003 0307 	and.w	r3, r3, #7
 8002848:	4904      	ldr	r1, [pc, #16]	; (800285c <HAL_RCC_GetPCLK1Freq+0x28>)
 800284a:	5ccb      	ldrb	r3, [r1, r3]
 800284c:	f003 031f 	and.w	r3, r3, #31
 8002850:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002854:	4618      	mov	r0, r3
 8002856:	bd80      	pop	{r7, pc}
 8002858:	40021000 	.word	0x40021000
 800285c:	080085b0 	.word	0x080085b0

08002860 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002864:	f7ff ffda 	bl	800281c <HAL_RCC_GetHCLKFreq>
 8002868:	4602      	mov	r2, r0
 800286a:	4b06      	ldr	r3, [pc, #24]	; (8002884 <HAL_RCC_GetPCLK2Freq+0x24>)
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	0adb      	lsrs	r3, r3, #11
 8002870:	f003 0307 	and.w	r3, r3, #7
 8002874:	4904      	ldr	r1, [pc, #16]	; (8002888 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002876:	5ccb      	ldrb	r3, [r1, r3]
 8002878:	f003 031f 	and.w	r3, r3, #31
 800287c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002880:	4618      	mov	r0, r3
 8002882:	bd80      	pop	{r7, pc}
 8002884:	40021000 	.word	0x40021000
 8002888:	080085b0 	.word	0x080085b0

0800288c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002894:	2300      	movs	r3, #0
 8002896:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002898:	4b2a      	ldr	r3, [pc, #168]	; (8002944 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800289a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800289c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d003      	beq.n	80028ac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80028a4:	f7ff f9ee 	bl	8001c84 <HAL_PWREx_GetVoltageRange>
 80028a8:	6178      	str	r0, [r7, #20]
 80028aa:	e014      	b.n	80028d6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80028ac:	4b25      	ldr	r3, [pc, #148]	; (8002944 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b0:	4a24      	ldr	r2, [pc, #144]	; (8002944 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028b6:	6593      	str	r3, [r2, #88]	; 0x58
 80028b8:	4b22      	ldr	r3, [pc, #136]	; (8002944 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028c0:	60fb      	str	r3, [r7, #12]
 80028c2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80028c4:	f7ff f9de 	bl	8001c84 <HAL_PWREx_GetVoltageRange>
 80028c8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80028ca:	4b1e      	ldr	r3, [pc, #120]	; (8002944 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ce:	4a1d      	ldr	r2, [pc, #116]	; (8002944 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028d4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028dc:	d10b      	bne.n	80028f6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2b80      	cmp	r3, #128	; 0x80
 80028e2:	d919      	bls.n	8002918 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2ba0      	cmp	r3, #160	; 0xa0
 80028e8:	d902      	bls.n	80028f0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80028ea:	2302      	movs	r3, #2
 80028ec:	613b      	str	r3, [r7, #16]
 80028ee:	e013      	b.n	8002918 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80028f0:	2301      	movs	r3, #1
 80028f2:	613b      	str	r3, [r7, #16]
 80028f4:	e010      	b.n	8002918 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2b80      	cmp	r3, #128	; 0x80
 80028fa:	d902      	bls.n	8002902 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80028fc:	2303      	movs	r3, #3
 80028fe:	613b      	str	r3, [r7, #16]
 8002900:	e00a      	b.n	8002918 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2b80      	cmp	r3, #128	; 0x80
 8002906:	d102      	bne.n	800290e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002908:	2302      	movs	r3, #2
 800290a:	613b      	str	r3, [r7, #16]
 800290c:	e004      	b.n	8002918 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2b70      	cmp	r3, #112	; 0x70
 8002912:	d101      	bne.n	8002918 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002914:	2301      	movs	r3, #1
 8002916:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002918:	4b0b      	ldr	r3, [pc, #44]	; (8002948 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f023 0207 	bic.w	r2, r3, #7
 8002920:	4909      	ldr	r1, [pc, #36]	; (8002948 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	4313      	orrs	r3, r2
 8002926:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002928:	4b07      	ldr	r3, [pc, #28]	; (8002948 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0307 	and.w	r3, r3, #7
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	429a      	cmp	r2, r3
 8002934:	d001      	beq.n	800293a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e000      	b.n	800293c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800293a:	2300      	movs	r3, #0
}
 800293c:	4618      	mov	r0, r3
 800293e:	3718      	adds	r7, #24
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	40021000 	.word	0x40021000
 8002948:	40022000 	.word	0x40022000

0800294c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b086      	sub	sp, #24
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002954:	2300      	movs	r3, #0
 8002956:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002958:	2300      	movs	r3, #0
 800295a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002964:	2b00      	cmp	r3, #0
 8002966:	d041      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800296c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002970:	d02a      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002972:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002976:	d824      	bhi.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002978:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800297c:	d008      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800297e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002982:	d81e      	bhi.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00a      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002988:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800298c:	d010      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800298e:	e018      	b.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002990:	4b86      	ldr	r3, [pc, #536]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	4a85      	ldr	r2, [pc, #532]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002996:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800299a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800299c:	e015      	b.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	3304      	adds	r3, #4
 80029a2:	2100      	movs	r1, #0
 80029a4:	4618      	mov	r0, r3
 80029a6:	f000 fabb 	bl	8002f20 <RCCEx_PLLSAI1_Config>
 80029aa:	4603      	mov	r3, r0
 80029ac:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029ae:	e00c      	b.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	3320      	adds	r3, #32
 80029b4:	2100      	movs	r1, #0
 80029b6:	4618      	mov	r0, r3
 80029b8:	f000 fba6 	bl	8003108 <RCCEx_PLLSAI2_Config>
 80029bc:	4603      	mov	r3, r0
 80029be:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029c0:	e003      	b.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	74fb      	strb	r3, [r7, #19]
      break;
 80029c6:	e000      	b.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80029c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029ca:	7cfb      	ldrb	r3, [r7, #19]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d10b      	bne.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029d0:	4b76      	ldr	r3, [pc, #472]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029de:	4973      	ldr	r1, [pc, #460]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80029e6:	e001      	b.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029e8:	7cfb      	ldrb	r3, [r7, #19]
 80029ea:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d041      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029fc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002a00:	d02a      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002a02:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002a06:	d824      	bhi.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002a08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a0c:	d008      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002a0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a12:	d81e      	bhi.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d00a      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002a18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a1c:	d010      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002a1e:	e018      	b.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a20:	4b62      	ldr	r3, [pc, #392]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	4a61      	ldr	r2, [pc, #388]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a2a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a2c:	e015      	b.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	3304      	adds	r3, #4
 8002a32:	2100      	movs	r1, #0
 8002a34:	4618      	mov	r0, r3
 8002a36:	f000 fa73 	bl	8002f20 <RCCEx_PLLSAI1_Config>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a3e:	e00c      	b.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	3320      	adds	r3, #32
 8002a44:	2100      	movs	r1, #0
 8002a46:	4618      	mov	r0, r3
 8002a48:	f000 fb5e 	bl	8003108 <RCCEx_PLLSAI2_Config>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a50:	e003      	b.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	74fb      	strb	r3, [r7, #19]
      break;
 8002a56:	e000      	b.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002a58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a5a:	7cfb      	ldrb	r3, [r7, #19]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d10b      	bne.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002a60:	4b52      	ldr	r3, [pc, #328]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a66:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a6e:	494f      	ldr	r1, [pc, #316]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002a76:	e001      	b.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a78:	7cfb      	ldrb	r3, [r7, #19]
 8002a7a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	f000 80a0 	beq.w	8002bca <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a8e:	4b47      	ldr	r3, [pc, #284]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d101      	bne.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e000      	b.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d00d      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aa4:	4b41      	ldr	r3, [pc, #260]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa8:	4a40      	ldr	r2, [pc, #256]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aae:	6593      	str	r3, [r2, #88]	; 0x58
 8002ab0:	4b3e      	ldr	r3, [pc, #248]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab8:	60bb      	str	r3, [r7, #8]
 8002aba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002abc:	2301      	movs	r3, #1
 8002abe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ac0:	4b3b      	ldr	r3, [pc, #236]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a3a      	ldr	r2, [pc, #232]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002ac6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002acc:	f7fe fdd6 	bl	800167c <HAL_GetTick>
 8002ad0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ad2:	e009      	b.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ad4:	f7fe fdd2 	bl	800167c <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d902      	bls.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	74fb      	strb	r3, [r7, #19]
        break;
 8002ae6:	e005      	b.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ae8:	4b31      	ldr	r3, [pc, #196]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d0ef      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002af4:	7cfb      	ldrb	r3, [r7, #19]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d15c      	bne.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002afa:	4b2c      	ldr	r3, [pc, #176]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b04:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d01f      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d019      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b18:	4b24      	ldr	r3, [pc, #144]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b22:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b24:	4b21      	ldr	r3, [pc, #132]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b2a:	4a20      	ldr	r2, [pc, #128]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b34:	4b1d      	ldr	r3, [pc, #116]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b3a:	4a1c      	ldr	r2, [pc, #112]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b44:	4a19      	ldr	r2, [pc, #100]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d016      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b56:	f7fe fd91 	bl	800167c <HAL_GetTick>
 8002b5a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b5c:	e00b      	b.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b5e:	f7fe fd8d 	bl	800167c <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d902      	bls.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	74fb      	strb	r3, [r7, #19]
            break;
 8002b74:	e006      	b.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b76:	4b0d      	ldr	r3, [pc, #52]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d0ec      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002b84:	7cfb      	ldrb	r3, [r7, #19]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d10c      	bne.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b8a:	4b08      	ldr	r3, [pc, #32]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b9a:	4904      	ldr	r1, [pc, #16]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002ba2:	e009      	b.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ba4:	7cfb      	ldrb	r3, [r7, #19]
 8002ba6:	74bb      	strb	r3, [r7, #18]
 8002ba8:	e006      	b.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002baa:	bf00      	nop
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bb4:	7cfb      	ldrb	r3, [r7, #19]
 8002bb6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bb8:	7c7b      	ldrb	r3, [r7, #17]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d105      	bne.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bbe:	4b9e      	ldr	r3, [pc, #632]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc2:	4a9d      	ldr	r2, [pc, #628]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bc8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d00a      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bd6:	4b98      	ldr	r3, [pc, #608]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bdc:	f023 0203 	bic.w	r2, r3, #3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be4:	4994      	ldr	r1, [pc, #592]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0302 	and.w	r3, r3, #2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d00a      	beq.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002bf8:	4b8f      	ldr	r3, [pc, #572]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bfe:	f023 020c 	bic.w	r2, r3, #12
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c06:	498c      	ldr	r1, [pc, #560]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0304 	and.w	r3, r3, #4
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00a      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c1a:	4b87      	ldr	r3, [pc, #540]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c20:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c28:	4983      	ldr	r1, [pc, #524]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0308 	and.w	r3, r3, #8
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d00a      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c3c:	4b7e      	ldr	r3, [pc, #504]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c42:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4a:	497b      	ldr	r1, [pc, #492]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0310 	and.w	r3, r3, #16
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00a      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c5e:	4b76      	ldr	r3, [pc, #472]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c6c:	4972      	ldr	r1, [pc, #456]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0320 	and.w	r3, r3, #32
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d00a      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c80:	4b6d      	ldr	r3, [pc, #436]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c86:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c8e:	496a      	ldr	r1, [pc, #424]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00a      	beq.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ca2:	4b65      	ldr	r3, [pc, #404]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ca8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cb0:	4961      	ldr	r1, [pc, #388]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00a      	beq.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002cc4:	4b5c      	ldr	r3, [pc, #368]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cd2:	4959      	ldr	r1, [pc, #356]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00a      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ce6:	4b54      	ldr	r3, [pc, #336]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cec:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cf4:	4950      	ldr	r1, [pc, #320]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00a      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d08:	4b4b      	ldr	r3, [pc, #300]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d0e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d16:	4948      	ldr	r1, [pc, #288]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00a      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d2a:	4b43      	ldr	r3, [pc, #268]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d38:	493f      	ldr	r1, [pc, #252]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d028      	beq.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d4c:	4b3a      	ldr	r3, [pc, #232]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d52:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d5a:	4937      	ldr	r1, [pc, #220]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d6a:	d106      	bne.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d6c:	4b32      	ldr	r3, [pc, #200]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	4a31      	ldr	r2, [pc, #196]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d76:	60d3      	str	r3, [r2, #12]
 8002d78:	e011      	b.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d7e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d82:	d10c      	bne.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	3304      	adds	r3, #4
 8002d88:	2101      	movs	r1, #1
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f000 f8c8 	bl	8002f20 <RCCEx_PLLSAI1_Config>
 8002d90:	4603      	mov	r3, r0
 8002d92:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002d94:	7cfb      	ldrb	r3, [r7, #19]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002d9a:	7cfb      	ldrb	r3, [r7, #19]
 8002d9c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d028      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002daa:	4b23      	ldr	r3, [pc, #140]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002db0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db8:	491f      	ldr	r1, [pc, #124]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002dc8:	d106      	bne.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dca:	4b1b      	ldr	r3, [pc, #108]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	4a1a      	ldr	r2, [pc, #104]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dd0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002dd4:	60d3      	str	r3, [r2, #12]
 8002dd6:	e011      	b.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ddc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002de0:	d10c      	bne.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	3304      	adds	r3, #4
 8002de6:	2101      	movs	r1, #1
 8002de8:	4618      	mov	r0, r3
 8002dea:	f000 f899 	bl	8002f20 <RCCEx_PLLSAI1_Config>
 8002dee:	4603      	mov	r3, r0
 8002df0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002df2:	7cfb      	ldrb	r3, [r7, #19]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d001      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002df8:	7cfb      	ldrb	r3, [r7, #19]
 8002dfa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d02b      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e08:	4b0b      	ldr	r3, [pc, #44]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e0e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e16:	4908      	ldr	r1, [pc, #32]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e26:	d109      	bne.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e28:	4b03      	ldr	r3, [pc, #12]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	4a02      	ldr	r2, [pc, #8]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e32:	60d3      	str	r3, [r2, #12]
 8002e34:	e014      	b.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002e36:	bf00      	nop
 8002e38:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e44:	d10c      	bne.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	3304      	adds	r3, #4
 8002e4a:	2101      	movs	r1, #1
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f000 f867 	bl	8002f20 <RCCEx_PLLSAI1_Config>
 8002e52:	4603      	mov	r3, r0
 8002e54:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e56:	7cfb      	ldrb	r3, [r7, #19]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d001      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002e5c:	7cfb      	ldrb	r3, [r7, #19]
 8002e5e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d02f      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e6c:	4b2b      	ldr	r3, [pc, #172]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e72:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e7a:	4928      	ldr	r1, [pc, #160]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e8a:	d10d      	bne.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	3304      	adds	r3, #4
 8002e90:	2102      	movs	r1, #2
 8002e92:	4618      	mov	r0, r3
 8002e94:	f000 f844 	bl	8002f20 <RCCEx_PLLSAI1_Config>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e9c:	7cfb      	ldrb	r3, [r7, #19]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d014      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002ea2:	7cfb      	ldrb	r3, [r7, #19]
 8002ea4:	74bb      	strb	r3, [r7, #18]
 8002ea6:	e011      	b.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002eac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002eb0:	d10c      	bne.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	3320      	adds	r3, #32
 8002eb6:	2102      	movs	r1, #2
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f000 f925 	bl	8003108 <RCCEx_PLLSAI2_Config>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ec2:	7cfb      	ldrb	r3, [r7, #19]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d001      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002ec8:	7cfb      	ldrb	r3, [r7, #19]
 8002eca:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00a      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002ed8:	4b10      	ldr	r3, [pc, #64]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ede:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ee6:	490d      	ldr	r1, [pc, #52]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00b      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002efa:	4b08      	ldr	r3, [pc, #32]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f00:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f0a:	4904      	ldr	r1, [pc, #16]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002f12:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3718      	adds	r7, #24
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	40021000 	.word	0x40021000

08002f20 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f2e:	4b75      	ldr	r3, [pc, #468]	; (8003104 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	f003 0303 	and.w	r3, r3, #3
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d018      	beq.n	8002f6c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002f3a:	4b72      	ldr	r3, [pc, #456]	; (8003104 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	f003 0203 	and.w	r2, r3, #3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d10d      	bne.n	8002f66 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
       ||
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d009      	beq.n	8002f66 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002f52:	4b6c      	ldr	r3, [pc, #432]	; (8003104 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	091b      	lsrs	r3, r3, #4
 8002f58:	f003 0307 	and.w	r3, r3, #7
 8002f5c:	1c5a      	adds	r2, r3, #1
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
       ||
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d047      	beq.n	8002ff6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	73fb      	strb	r3, [r7, #15]
 8002f6a:	e044      	b.n	8002ff6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2b03      	cmp	r3, #3
 8002f72:	d018      	beq.n	8002fa6 <RCCEx_PLLSAI1_Config+0x86>
 8002f74:	2b03      	cmp	r3, #3
 8002f76:	d825      	bhi.n	8002fc4 <RCCEx_PLLSAI1_Config+0xa4>
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d002      	beq.n	8002f82 <RCCEx_PLLSAI1_Config+0x62>
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d009      	beq.n	8002f94 <RCCEx_PLLSAI1_Config+0x74>
 8002f80:	e020      	b.n	8002fc4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f82:	4b60      	ldr	r3, [pc, #384]	; (8003104 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d11d      	bne.n	8002fca <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f92:	e01a      	b.n	8002fca <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f94:	4b5b      	ldr	r3, [pc, #364]	; (8003104 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d116      	bne.n	8002fce <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fa4:	e013      	b.n	8002fce <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002fa6:	4b57      	ldr	r3, [pc, #348]	; (8003104 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d10f      	bne.n	8002fd2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002fb2:	4b54      	ldr	r3, [pc, #336]	; (8003104 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d109      	bne.n	8002fd2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002fc2:	e006      	b.n	8002fd2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	73fb      	strb	r3, [r7, #15]
      break;
 8002fc8:	e004      	b.n	8002fd4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002fca:	bf00      	nop
 8002fcc:	e002      	b.n	8002fd4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002fce:	bf00      	nop
 8002fd0:	e000      	b.n	8002fd4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002fd2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002fd4:	7bfb      	ldrb	r3, [r7, #15]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d10d      	bne.n	8002ff6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002fda:	4b4a      	ldr	r3, [pc, #296]	; (8003104 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6819      	ldr	r1, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	3b01      	subs	r3, #1
 8002fec:	011b      	lsls	r3, r3, #4
 8002fee:	430b      	orrs	r3, r1
 8002ff0:	4944      	ldr	r1, [pc, #272]	; (8003104 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ff6:	7bfb      	ldrb	r3, [r7, #15]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d17d      	bne.n	80030f8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002ffc:	4b41      	ldr	r3, [pc, #260]	; (8003104 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a40      	ldr	r2, [pc, #256]	; (8003104 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003002:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003006:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003008:	f7fe fb38 	bl	800167c <HAL_GetTick>
 800300c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800300e:	e009      	b.n	8003024 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003010:	f7fe fb34 	bl	800167c <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b02      	cmp	r3, #2
 800301c:	d902      	bls.n	8003024 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	73fb      	strb	r3, [r7, #15]
        break;
 8003022:	e005      	b.n	8003030 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003024:	4b37      	ldr	r3, [pc, #220]	; (8003104 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d1ef      	bne.n	8003010 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003030:	7bfb      	ldrb	r3, [r7, #15]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d160      	bne.n	80030f8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d111      	bne.n	8003060 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800303c:	4b31      	ldr	r3, [pc, #196]	; (8003104 <RCCEx_PLLSAI1_Config+0x1e4>)
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003044:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	6892      	ldr	r2, [r2, #8]
 800304c:	0211      	lsls	r1, r2, #8
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	68d2      	ldr	r2, [r2, #12]
 8003052:	0912      	lsrs	r2, r2, #4
 8003054:	0452      	lsls	r2, r2, #17
 8003056:	430a      	orrs	r2, r1
 8003058:	492a      	ldr	r1, [pc, #168]	; (8003104 <RCCEx_PLLSAI1_Config+0x1e4>)
 800305a:	4313      	orrs	r3, r2
 800305c:	610b      	str	r3, [r1, #16]
 800305e:	e027      	b.n	80030b0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d112      	bne.n	800308c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003066:	4b27      	ldr	r3, [pc, #156]	; (8003104 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800306e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	6892      	ldr	r2, [r2, #8]
 8003076:	0211      	lsls	r1, r2, #8
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	6912      	ldr	r2, [r2, #16]
 800307c:	0852      	lsrs	r2, r2, #1
 800307e:	3a01      	subs	r2, #1
 8003080:	0552      	lsls	r2, r2, #21
 8003082:	430a      	orrs	r2, r1
 8003084:	491f      	ldr	r1, [pc, #124]	; (8003104 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003086:	4313      	orrs	r3, r2
 8003088:	610b      	str	r3, [r1, #16]
 800308a:	e011      	b.n	80030b0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800308c:	4b1d      	ldr	r3, [pc, #116]	; (8003104 <RCCEx_PLLSAI1_Config+0x1e4>)
 800308e:	691b      	ldr	r3, [r3, #16]
 8003090:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003094:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	6892      	ldr	r2, [r2, #8]
 800309c:	0211      	lsls	r1, r2, #8
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	6952      	ldr	r2, [r2, #20]
 80030a2:	0852      	lsrs	r2, r2, #1
 80030a4:	3a01      	subs	r2, #1
 80030a6:	0652      	lsls	r2, r2, #25
 80030a8:	430a      	orrs	r2, r1
 80030aa:	4916      	ldr	r1, [pc, #88]	; (8003104 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80030b0:	4b14      	ldr	r3, [pc, #80]	; (8003104 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a13      	ldr	r2, [pc, #76]	; (8003104 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80030ba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030bc:	f7fe fade 	bl	800167c <HAL_GetTick>
 80030c0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80030c2:	e009      	b.n	80030d8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030c4:	f7fe fada 	bl	800167c <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d902      	bls.n	80030d8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	73fb      	strb	r3, [r7, #15]
          break;
 80030d6:	e005      	b.n	80030e4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80030d8:	4b0a      	ldr	r3, [pc, #40]	; (8003104 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d0ef      	beq.n	80030c4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80030e4:	7bfb      	ldrb	r3, [r7, #15]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d106      	bne.n	80030f8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80030ea:	4b06      	ldr	r3, [pc, #24]	; (8003104 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030ec:	691a      	ldr	r2, [r3, #16]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	4904      	ldr	r1, [pc, #16]	; (8003104 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80030f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3710      	adds	r7, #16
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	40021000 	.word	0x40021000

08003108 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003112:	2300      	movs	r3, #0
 8003114:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003116:	4b6a      	ldr	r3, [pc, #424]	; (80032c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	f003 0303 	and.w	r3, r3, #3
 800311e:	2b00      	cmp	r3, #0
 8003120:	d018      	beq.n	8003154 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003122:	4b67      	ldr	r3, [pc, #412]	; (80032c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	f003 0203 	and.w	r2, r3, #3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	429a      	cmp	r2, r3
 8003130:	d10d      	bne.n	800314e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
       ||
 8003136:	2b00      	cmp	r3, #0
 8003138:	d009      	beq.n	800314e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800313a:	4b61      	ldr	r3, [pc, #388]	; (80032c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	091b      	lsrs	r3, r3, #4
 8003140:	f003 0307 	and.w	r3, r3, #7
 8003144:	1c5a      	adds	r2, r3, #1
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
       ||
 800314a:	429a      	cmp	r2, r3
 800314c:	d047      	beq.n	80031de <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	73fb      	strb	r3, [r7, #15]
 8003152:	e044      	b.n	80031de <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2b03      	cmp	r3, #3
 800315a:	d018      	beq.n	800318e <RCCEx_PLLSAI2_Config+0x86>
 800315c:	2b03      	cmp	r3, #3
 800315e:	d825      	bhi.n	80031ac <RCCEx_PLLSAI2_Config+0xa4>
 8003160:	2b01      	cmp	r3, #1
 8003162:	d002      	beq.n	800316a <RCCEx_PLLSAI2_Config+0x62>
 8003164:	2b02      	cmp	r3, #2
 8003166:	d009      	beq.n	800317c <RCCEx_PLLSAI2_Config+0x74>
 8003168:	e020      	b.n	80031ac <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800316a:	4b55      	ldr	r3, [pc, #340]	; (80032c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d11d      	bne.n	80031b2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800317a:	e01a      	b.n	80031b2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800317c:	4b50      	ldr	r3, [pc, #320]	; (80032c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003184:	2b00      	cmp	r3, #0
 8003186:	d116      	bne.n	80031b6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800318c:	e013      	b.n	80031b6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800318e:	4b4c      	ldr	r3, [pc, #304]	; (80032c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d10f      	bne.n	80031ba <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800319a:	4b49      	ldr	r3, [pc, #292]	; (80032c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d109      	bne.n	80031ba <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80031aa:	e006      	b.n	80031ba <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	73fb      	strb	r3, [r7, #15]
      break;
 80031b0:	e004      	b.n	80031bc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80031b2:	bf00      	nop
 80031b4:	e002      	b.n	80031bc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80031b6:	bf00      	nop
 80031b8:	e000      	b.n	80031bc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80031ba:	bf00      	nop
    }

    if(status == HAL_OK)
 80031bc:	7bfb      	ldrb	r3, [r7, #15]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d10d      	bne.n	80031de <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80031c2:	4b3f      	ldr	r3, [pc, #252]	; (80032c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6819      	ldr	r1, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	3b01      	subs	r3, #1
 80031d4:	011b      	lsls	r3, r3, #4
 80031d6:	430b      	orrs	r3, r1
 80031d8:	4939      	ldr	r1, [pc, #228]	; (80032c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80031de:	7bfb      	ldrb	r3, [r7, #15]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d167      	bne.n	80032b4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80031e4:	4b36      	ldr	r3, [pc, #216]	; (80032c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a35      	ldr	r2, [pc, #212]	; (80032c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031f0:	f7fe fa44 	bl	800167c <HAL_GetTick>
 80031f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80031f6:	e009      	b.n	800320c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80031f8:	f7fe fa40 	bl	800167c <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b02      	cmp	r3, #2
 8003204:	d902      	bls.n	800320c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	73fb      	strb	r3, [r7, #15]
        break;
 800320a:	e005      	b.n	8003218 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800320c:	4b2c      	ldr	r3, [pc, #176]	; (80032c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1ef      	bne.n	80031f8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003218:	7bfb      	ldrb	r3, [r7, #15]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d14a      	bne.n	80032b4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d111      	bne.n	8003248 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003224:	4b26      	ldr	r3, [pc, #152]	; (80032c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003226:	695b      	ldr	r3, [r3, #20]
 8003228:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800322c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	6892      	ldr	r2, [r2, #8]
 8003234:	0211      	lsls	r1, r2, #8
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	68d2      	ldr	r2, [r2, #12]
 800323a:	0912      	lsrs	r2, r2, #4
 800323c:	0452      	lsls	r2, r2, #17
 800323e:	430a      	orrs	r2, r1
 8003240:	491f      	ldr	r1, [pc, #124]	; (80032c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003242:	4313      	orrs	r3, r2
 8003244:	614b      	str	r3, [r1, #20]
 8003246:	e011      	b.n	800326c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003248:	4b1d      	ldr	r3, [pc, #116]	; (80032c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800324a:	695b      	ldr	r3, [r3, #20]
 800324c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003250:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	6892      	ldr	r2, [r2, #8]
 8003258:	0211      	lsls	r1, r2, #8
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	6912      	ldr	r2, [r2, #16]
 800325e:	0852      	lsrs	r2, r2, #1
 8003260:	3a01      	subs	r2, #1
 8003262:	0652      	lsls	r2, r2, #25
 8003264:	430a      	orrs	r2, r1
 8003266:	4916      	ldr	r1, [pc, #88]	; (80032c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003268:	4313      	orrs	r3, r2
 800326a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800326c:	4b14      	ldr	r3, [pc, #80]	; (80032c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a13      	ldr	r2, [pc, #76]	; (80032c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003272:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003276:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003278:	f7fe fa00 	bl	800167c <HAL_GetTick>
 800327c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800327e:	e009      	b.n	8003294 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003280:	f7fe f9fc 	bl	800167c <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b02      	cmp	r3, #2
 800328c:	d902      	bls.n	8003294 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	73fb      	strb	r3, [r7, #15]
          break;
 8003292:	e005      	b.n	80032a0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003294:	4b0a      	ldr	r3, [pc, #40]	; (80032c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d0ef      	beq.n	8003280 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80032a0:	7bfb      	ldrb	r3, [r7, #15]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d106      	bne.n	80032b4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80032a6:	4b06      	ldr	r3, [pc, #24]	; (80032c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032a8:	695a      	ldr	r2, [r3, #20]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	695b      	ldr	r3, [r3, #20]
 80032ae:	4904      	ldr	r1, [pc, #16]	; (80032c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80032b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	40021000 	.word	0x40021000

080032c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d101      	bne.n	80032d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e049      	b.n	800336a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d106      	bne.n	80032f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 f841 	bl	8003372 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2202      	movs	r2, #2
 80032f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	3304      	adds	r3, #4
 8003300:	4619      	mov	r1, r3
 8003302:	4610      	mov	r0, r2
 8003304:	f000 fd38 	bl	8003d78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	3708      	adds	r7, #8
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}

08003372 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003372:	b480      	push	{r7}
 8003374:	b083      	sub	sp, #12
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800337a:	bf00      	nop
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
	...

08003388 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003388:	b480      	push	{r7}
 800338a:	b085      	sub	sp, #20
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003396:	b2db      	uxtb	r3, r3
 8003398:	2b01      	cmp	r3, #1
 800339a:	d001      	beq.n	80033a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e04f      	b.n	8003440 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2202      	movs	r2, #2
 80033a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68da      	ldr	r2, [r3, #12]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f042 0201 	orr.w	r2, r2, #1
 80033b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a23      	ldr	r2, [pc, #140]	; (800344c <HAL_TIM_Base_Start_IT+0xc4>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d01d      	beq.n	80033fe <HAL_TIM_Base_Start_IT+0x76>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ca:	d018      	beq.n	80033fe <HAL_TIM_Base_Start_IT+0x76>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a1f      	ldr	r2, [pc, #124]	; (8003450 <HAL_TIM_Base_Start_IT+0xc8>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d013      	beq.n	80033fe <HAL_TIM_Base_Start_IT+0x76>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a1e      	ldr	r2, [pc, #120]	; (8003454 <HAL_TIM_Base_Start_IT+0xcc>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d00e      	beq.n	80033fe <HAL_TIM_Base_Start_IT+0x76>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a1c      	ldr	r2, [pc, #112]	; (8003458 <HAL_TIM_Base_Start_IT+0xd0>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d009      	beq.n	80033fe <HAL_TIM_Base_Start_IT+0x76>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a1b      	ldr	r2, [pc, #108]	; (800345c <HAL_TIM_Base_Start_IT+0xd4>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d004      	beq.n	80033fe <HAL_TIM_Base_Start_IT+0x76>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a19      	ldr	r2, [pc, #100]	; (8003460 <HAL_TIM_Base_Start_IT+0xd8>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d115      	bne.n	800342a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	689a      	ldr	r2, [r3, #8]
 8003404:	4b17      	ldr	r3, [pc, #92]	; (8003464 <HAL_TIM_Base_Start_IT+0xdc>)
 8003406:	4013      	ands	r3, r2
 8003408:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2b06      	cmp	r3, #6
 800340e:	d015      	beq.n	800343c <HAL_TIM_Base_Start_IT+0xb4>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003416:	d011      	beq.n	800343c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f042 0201 	orr.w	r2, r2, #1
 8003426:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003428:	e008      	b.n	800343c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f042 0201 	orr.w	r2, r2, #1
 8003438:	601a      	str	r2, [r3, #0]
 800343a:	e000      	b.n	800343e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800343c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800343e:	2300      	movs	r3, #0
}
 8003440:	4618      	mov	r0, r3
 8003442:	3714      	adds	r7, #20
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr
 800344c:	40012c00 	.word	0x40012c00
 8003450:	40000400 	.word	0x40000400
 8003454:	40000800 	.word	0x40000800
 8003458:	40000c00 	.word	0x40000c00
 800345c:	40013400 	.word	0x40013400
 8003460:	40014000 	.word	0x40014000
 8003464:	00010007 	.word	0x00010007

08003468 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e049      	b.n	800350e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b00      	cmp	r3, #0
 8003484:	d106      	bne.n	8003494 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f7fd feb0 	bl	80011f4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2202      	movs	r2, #2
 8003498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	3304      	adds	r3, #4
 80034a4:	4619      	mov	r1, r3
 80034a6:	4610      	mov	r0, r2
 80034a8:	f000 fc66 	bl	8003d78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3708      	adds	r7, #8
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
	...

08003518 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003522:	2300      	movs	r3, #0
 8003524:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d104      	bne.n	8003536 <HAL_TIM_IC_Start_IT+0x1e>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003532:	b2db      	uxtb	r3, r3
 8003534:	e023      	b.n	800357e <HAL_TIM_IC_Start_IT+0x66>
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	2b04      	cmp	r3, #4
 800353a:	d104      	bne.n	8003546 <HAL_TIM_IC_Start_IT+0x2e>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003542:	b2db      	uxtb	r3, r3
 8003544:	e01b      	b.n	800357e <HAL_TIM_IC_Start_IT+0x66>
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	2b08      	cmp	r3, #8
 800354a:	d104      	bne.n	8003556 <HAL_TIM_IC_Start_IT+0x3e>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003552:	b2db      	uxtb	r3, r3
 8003554:	e013      	b.n	800357e <HAL_TIM_IC_Start_IT+0x66>
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	2b0c      	cmp	r3, #12
 800355a:	d104      	bne.n	8003566 <HAL_TIM_IC_Start_IT+0x4e>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003562:	b2db      	uxtb	r3, r3
 8003564:	e00b      	b.n	800357e <HAL_TIM_IC_Start_IT+0x66>
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	2b10      	cmp	r3, #16
 800356a:	d104      	bne.n	8003576 <HAL_TIM_IC_Start_IT+0x5e>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003572:	b2db      	uxtb	r3, r3
 8003574:	e003      	b.n	800357e <HAL_TIM_IC_Start_IT+0x66>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800357c:	b2db      	uxtb	r3, r3
 800357e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d104      	bne.n	8003590 <HAL_TIM_IC_Start_IT+0x78>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800358c:	b2db      	uxtb	r3, r3
 800358e:	e013      	b.n	80035b8 <HAL_TIM_IC_Start_IT+0xa0>
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	2b04      	cmp	r3, #4
 8003594:	d104      	bne.n	80035a0 <HAL_TIM_IC_Start_IT+0x88>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800359c:	b2db      	uxtb	r3, r3
 800359e:	e00b      	b.n	80035b8 <HAL_TIM_IC_Start_IT+0xa0>
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	2b08      	cmp	r3, #8
 80035a4:	d104      	bne.n	80035b0 <HAL_TIM_IC_Start_IT+0x98>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	e003      	b.n	80035b8 <HAL_TIM_IC_Start_IT+0xa0>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80035ba:	7bbb      	ldrb	r3, [r7, #14]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d102      	bne.n	80035c6 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80035c0:	7b7b      	ldrb	r3, [r7, #13]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d001      	beq.n	80035ca <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e0dd      	b.n	8003786 <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d104      	bne.n	80035da <HAL_TIM_IC_Start_IT+0xc2>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2202      	movs	r2, #2
 80035d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035d8:	e023      	b.n	8003622 <HAL_TIM_IC_Start_IT+0x10a>
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	2b04      	cmp	r3, #4
 80035de:	d104      	bne.n	80035ea <HAL_TIM_IC_Start_IT+0xd2>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2202      	movs	r2, #2
 80035e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035e8:	e01b      	b.n	8003622 <HAL_TIM_IC_Start_IT+0x10a>
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	2b08      	cmp	r3, #8
 80035ee:	d104      	bne.n	80035fa <HAL_TIM_IC_Start_IT+0xe2>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2202      	movs	r2, #2
 80035f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035f8:	e013      	b.n	8003622 <HAL_TIM_IC_Start_IT+0x10a>
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	2b0c      	cmp	r3, #12
 80035fe:	d104      	bne.n	800360a <HAL_TIM_IC_Start_IT+0xf2>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2202      	movs	r2, #2
 8003604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003608:	e00b      	b.n	8003622 <HAL_TIM_IC_Start_IT+0x10a>
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	2b10      	cmp	r3, #16
 800360e:	d104      	bne.n	800361a <HAL_TIM_IC_Start_IT+0x102>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2202      	movs	r2, #2
 8003614:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003618:	e003      	b.n	8003622 <HAL_TIM_IC_Start_IT+0x10a>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2202      	movs	r2, #2
 800361e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d104      	bne.n	8003632 <HAL_TIM_IC_Start_IT+0x11a>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2202      	movs	r2, #2
 800362c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003630:	e013      	b.n	800365a <HAL_TIM_IC_Start_IT+0x142>
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	2b04      	cmp	r3, #4
 8003636:	d104      	bne.n	8003642 <HAL_TIM_IC_Start_IT+0x12a>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2202      	movs	r2, #2
 800363c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003640:	e00b      	b.n	800365a <HAL_TIM_IC_Start_IT+0x142>
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	2b08      	cmp	r3, #8
 8003646:	d104      	bne.n	8003652 <HAL_TIM_IC_Start_IT+0x13a>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2202      	movs	r2, #2
 800364c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003650:	e003      	b.n	800365a <HAL_TIM_IC_Start_IT+0x142>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2202      	movs	r2, #2
 8003656:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	2b0c      	cmp	r3, #12
 800365e:	d841      	bhi.n	80036e4 <HAL_TIM_IC_Start_IT+0x1cc>
 8003660:	a201      	add	r2, pc, #4	; (adr r2, 8003668 <HAL_TIM_IC_Start_IT+0x150>)
 8003662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003666:	bf00      	nop
 8003668:	0800369d 	.word	0x0800369d
 800366c:	080036e5 	.word	0x080036e5
 8003670:	080036e5 	.word	0x080036e5
 8003674:	080036e5 	.word	0x080036e5
 8003678:	080036af 	.word	0x080036af
 800367c:	080036e5 	.word	0x080036e5
 8003680:	080036e5 	.word	0x080036e5
 8003684:	080036e5 	.word	0x080036e5
 8003688:	080036c1 	.word	0x080036c1
 800368c:	080036e5 	.word	0x080036e5
 8003690:	080036e5 	.word	0x080036e5
 8003694:	080036e5 	.word	0x080036e5
 8003698:	080036d3 	.word	0x080036d3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68da      	ldr	r2, [r3, #12]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f042 0202 	orr.w	r2, r2, #2
 80036aa:	60da      	str	r2, [r3, #12]
      break;
 80036ac:	e01d      	b.n	80036ea <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68da      	ldr	r2, [r3, #12]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f042 0204 	orr.w	r2, r2, #4
 80036bc:	60da      	str	r2, [r3, #12]
      break;
 80036be:	e014      	b.n	80036ea <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68da      	ldr	r2, [r3, #12]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f042 0208 	orr.w	r2, r2, #8
 80036ce:	60da      	str	r2, [r3, #12]
      break;
 80036d0:	e00b      	b.n	80036ea <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	68da      	ldr	r2, [r3, #12]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f042 0210 	orr.w	r2, r2, #16
 80036e0:	60da      	str	r2, [r3, #12]
      break;
 80036e2:	e002      	b.n	80036ea <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	73fb      	strb	r3, [r7, #15]
      break;
 80036e8:	bf00      	nop
  }

  if (status == HAL_OK)
 80036ea:	7bfb      	ldrb	r3, [r7, #15]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d149      	bne.n	8003784 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2201      	movs	r2, #1
 80036f6:	6839      	ldr	r1, [r7, #0]
 80036f8:	4618      	mov	r0, r3
 80036fa:	f000 fd95 	bl	8004228 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a23      	ldr	r2, [pc, #140]	; (8003790 <HAL_TIM_IC_Start_IT+0x278>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d01d      	beq.n	8003744 <HAL_TIM_IC_Start_IT+0x22c>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003710:	d018      	beq.n	8003744 <HAL_TIM_IC_Start_IT+0x22c>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a1f      	ldr	r2, [pc, #124]	; (8003794 <HAL_TIM_IC_Start_IT+0x27c>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d013      	beq.n	8003744 <HAL_TIM_IC_Start_IT+0x22c>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a1d      	ldr	r2, [pc, #116]	; (8003798 <HAL_TIM_IC_Start_IT+0x280>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d00e      	beq.n	8003744 <HAL_TIM_IC_Start_IT+0x22c>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a1c      	ldr	r2, [pc, #112]	; (800379c <HAL_TIM_IC_Start_IT+0x284>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d009      	beq.n	8003744 <HAL_TIM_IC_Start_IT+0x22c>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a1a      	ldr	r2, [pc, #104]	; (80037a0 <HAL_TIM_IC_Start_IT+0x288>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d004      	beq.n	8003744 <HAL_TIM_IC_Start_IT+0x22c>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a19      	ldr	r2, [pc, #100]	; (80037a4 <HAL_TIM_IC_Start_IT+0x28c>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d115      	bne.n	8003770 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	689a      	ldr	r2, [r3, #8]
 800374a:	4b17      	ldr	r3, [pc, #92]	; (80037a8 <HAL_TIM_IC_Start_IT+0x290>)
 800374c:	4013      	ands	r3, r2
 800374e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	2b06      	cmp	r3, #6
 8003754:	d015      	beq.n	8003782 <HAL_TIM_IC_Start_IT+0x26a>
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800375c:	d011      	beq.n	8003782 <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f042 0201 	orr.w	r2, r2, #1
 800376c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800376e:	e008      	b.n	8003782 <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f042 0201 	orr.w	r2, r2, #1
 800377e:	601a      	str	r2, [r3, #0]
 8003780:	e000      	b.n	8003784 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003782:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003784:	7bfb      	ldrb	r3, [r7, #15]
}
 8003786:	4618      	mov	r0, r3
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	40012c00 	.word	0x40012c00
 8003794:	40000400 	.word	0x40000400
 8003798:	40000800 	.word	0x40000800
 800379c:	40000c00 	.word	0x40000c00
 80037a0:	40013400 	.word	0x40013400
 80037a4:	40014000 	.word	0x40014000
 80037a8:	00010007 	.word	0x00010007

080037ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d122      	bne.n	8003808 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	f003 0302 	and.w	r3, r3, #2
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d11b      	bne.n	8003808 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f06f 0202 	mvn.w	r2, #2
 80037d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2201      	movs	r2, #1
 80037de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	f003 0303 	and.w	r3, r3, #3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d003      	beq.n	80037f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f7fd fcaa 	bl	8001148 <HAL_TIM_IC_CaptureCallback>
 80037f4:	e005      	b.n	8003802 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 faa0 	bl	8003d3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 faa7 	bl	8003d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	f003 0304 	and.w	r3, r3, #4
 8003812:	2b04      	cmp	r3, #4
 8003814:	d122      	bne.n	800385c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	f003 0304 	and.w	r3, r3, #4
 8003820:	2b04      	cmp	r3, #4
 8003822:	d11b      	bne.n	800385c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f06f 0204 	mvn.w	r2, #4
 800382c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2202      	movs	r2, #2
 8003832:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f7fd fc80 	bl	8001148 <HAL_TIM_IC_CaptureCallback>
 8003848:	e005      	b.n	8003856 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 fa76 	bl	8003d3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 fa7d 	bl	8003d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	f003 0308 	and.w	r3, r3, #8
 8003866:	2b08      	cmp	r3, #8
 8003868:	d122      	bne.n	80038b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	f003 0308 	and.w	r3, r3, #8
 8003874:	2b08      	cmp	r3, #8
 8003876:	d11b      	bne.n	80038b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f06f 0208 	mvn.w	r2, #8
 8003880:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2204      	movs	r2, #4
 8003886:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	69db      	ldr	r3, [r3, #28]
 800388e:	f003 0303 	and.w	r3, r3, #3
 8003892:	2b00      	cmp	r3, #0
 8003894:	d003      	beq.n	800389e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f7fd fc56 	bl	8001148 <HAL_TIM_IC_CaptureCallback>
 800389c:	e005      	b.n	80038aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 fa4c 	bl	8003d3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f000 fa53 	bl	8003d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	f003 0310 	and.w	r3, r3, #16
 80038ba:	2b10      	cmp	r3, #16
 80038bc:	d122      	bne.n	8003904 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	f003 0310 	and.w	r3, r3, #16
 80038c8:	2b10      	cmp	r3, #16
 80038ca:	d11b      	bne.n	8003904 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f06f 0210 	mvn.w	r2, #16
 80038d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2208      	movs	r2, #8
 80038da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	69db      	ldr	r3, [r3, #28]
 80038e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d003      	beq.n	80038f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f7fd fc2c 	bl	8001148 <HAL_TIM_IC_CaptureCallback>
 80038f0:	e005      	b.n	80038fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 fa22 	bl	8003d3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f000 fa29 	bl	8003d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	2b01      	cmp	r3, #1
 8003910:	d10e      	bne.n	8003930 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	f003 0301 	and.w	r3, r3, #1
 800391c:	2b01      	cmp	r3, #1
 800391e:	d107      	bne.n	8003930 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f06f 0201 	mvn.w	r2, #1
 8003928:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f7fd fc17 	bl	800115e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800393a:	2b80      	cmp	r3, #128	; 0x80
 800393c:	d10e      	bne.n	800395c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003948:	2b80      	cmp	r3, #128	; 0x80
 800394a:	d107      	bne.n	800395c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003954:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 fd1e 	bl	8004398 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003966:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800396a:	d10e      	bne.n	800398a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003976:	2b80      	cmp	r3, #128	; 0x80
 8003978:	d107      	bne.n	800398a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003982:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f000 fd11 	bl	80043ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	691b      	ldr	r3, [r3, #16]
 8003990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003994:	2b40      	cmp	r3, #64	; 0x40
 8003996:	d10e      	bne.n	80039b6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a2:	2b40      	cmp	r3, #64	; 0x40
 80039a4:	d107      	bne.n	80039b6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f000 f9d7 	bl	8003d64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	f003 0320 	and.w	r3, r3, #32
 80039c0:	2b20      	cmp	r3, #32
 80039c2:	d10e      	bne.n	80039e2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	f003 0320 	and.w	r3, r3, #32
 80039ce:	2b20      	cmp	r3, #32
 80039d0:	d107      	bne.n	80039e2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f06f 0220 	mvn.w	r2, #32
 80039da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 fcd1 	bl	8004384 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039e2:	bf00      	nop
 80039e4:	3708      	adds	r7, #8
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b086      	sub	sp, #24
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	60f8      	str	r0, [r7, #12]
 80039f2:	60b9      	str	r1, [r7, #8]
 80039f4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039f6:	2300      	movs	r3, #0
 80039f8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d101      	bne.n	8003a08 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003a04:	2302      	movs	r3, #2
 8003a06:	e088      	b.n	8003b1a <HAL_TIM_IC_ConfigChannel+0x130>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d11b      	bne.n	8003a4e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003a26:	f000 fa41 	bl	8003eac <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	699a      	ldr	r2, [r3, #24]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f022 020c 	bic.w	r2, r2, #12
 8003a38:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	6999      	ldr	r1, [r3, #24]
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	689a      	ldr	r2, [r3, #8]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	430a      	orrs	r2, r1
 8003a4a:	619a      	str	r2, [r3, #24]
 8003a4c:	e060      	b.n	8003b10 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2b04      	cmp	r3, #4
 8003a52:	d11c      	bne.n	8003a8e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003a64:	f000 fabf 	bl	8003fe6 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	699a      	ldr	r2, [r3, #24]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003a76:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	6999      	ldr	r1, [r3, #24]
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	021a      	lsls	r2, r3, #8
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	619a      	str	r2, [r3, #24]
 8003a8c:	e040      	b.n	8003b10 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2b08      	cmp	r3, #8
 8003a92:	d11b      	bne.n	8003acc <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003aa4:	f000 fb0c 	bl	80040c0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	69da      	ldr	r2, [r3, #28]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f022 020c 	bic.w	r2, r2, #12
 8003ab6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	69d9      	ldr	r1, [r3, #28]
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	689a      	ldr	r2, [r3, #8]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	61da      	str	r2, [r3, #28]
 8003aca:	e021      	b.n	8003b10 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2b0c      	cmp	r3, #12
 8003ad0:	d11c      	bne.n	8003b0c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003ae2:	f000 fb29 	bl	8004138 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	69da      	ldr	r2, [r3, #28]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003af4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	69d9      	ldr	r1, [r3, #28]
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	021a      	lsls	r2, r3, #8
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	430a      	orrs	r2, r1
 8003b08:	61da      	str	r2, [r3, #28]
 8003b0a:	e001      	b.n	8003b10 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b18:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3718      	adds	r7, #24
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}

08003b22 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b22:	b580      	push	{r7, lr}
 8003b24:	b084      	sub	sp, #16
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
 8003b2a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d101      	bne.n	8003b3e <HAL_TIM_ConfigClockSource+0x1c>
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	e0b6      	b.n	8003cac <HAL_TIM_ConfigClockSource+0x18a>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2201      	movs	r2, #1
 8003b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2202      	movs	r2, #2
 8003b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b5c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b60:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b68:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68ba      	ldr	r2, [r7, #8]
 8003b70:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b7a:	d03e      	beq.n	8003bfa <HAL_TIM_ConfigClockSource+0xd8>
 8003b7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b80:	f200 8087 	bhi.w	8003c92 <HAL_TIM_ConfigClockSource+0x170>
 8003b84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b88:	f000 8086 	beq.w	8003c98 <HAL_TIM_ConfigClockSource+0x176>
 8003b8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b90:	d87f      	bhi.n	8003c92 <HAL_TIM_ConfigClockSource+0x170>
 8003b92:	2b70      	cmp	r3, #112	; 0x70
 8003b94:	d01a      	beq.n	8003bcc <HAL_TIM_ConfigClockSource+0xaa>
 8003b96:	2b70      	cmp	r3, #112	; 0x70
 8003b98:	d87b      	bhi.n	8003c92 <HAL_TIM_ConfigClockSource+0x170>
 8003b9a:	2b60      	cmp	r3, #96	; 0x60
 8003b9c:	d050      	beq.n	8003c40 <HAL_TIM_ConfigClockSource+0x11e>
 8003b9e:	2b60      	cmp	r3, #96	; 0x60
 8003ba0:	d877      	bhi.n	8003c92 <HAL_TIM_ConfigClockSource+0x170>
 8003ba2:	2b50      	cmp	r3, #80	; 0x50
 8003ba4:	d03c      	beq.n	8003c20 <HAL_TIM_ConfigClockSource+0xfe>
 8003ba6:	2b50      	cmp	r3, #80	; 0x50
 8003ba8:	d873      	bhi.n	8003c92 <HAL_TIM_ConfigClockSource+0x170>
 8003baa:	2b40      	cmp	r3, #64	; 0x40
 8003bac:	d058      	beq.n	8003c60 <HAL_TIM_ConfigClockSource+0x13e>
 8003bae:	2b40      	cmp	r3, #64	; 0x40
 8003bb0:	d86f      	bhi.n	8003c92 <HAL_TIM_ConfigClockSource+0x170>
 8003bb2:	2b30      	cmp	r3, #48	; 0x30
 8003bb4:	d064      	beq.n	8003c80 <HAL_TIM_ConfigClockSource+0x15e>
 8003bb6:	2b30      	cmp	r3, #48	; 0x30
 8003bb8:	d86b      	bhi.n	8003c92 <HAL_TIM_ConfigClockSource+0x170>
 8003bba:	2b20      	cmp	r3, #32
 8003bbc:	d060      	beq.n	8003c80 <HAL_TIM_ConfigClockSource+0x15e>
 8003bbe:	2b20      	cmp	r3, #32
 8003bc0:	d867      	bhi.n	8003c92 <HAL_TIM_ConfigClockSource+0x170>
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d05c      	beq.n	8003c80 <HAL_TIM_ConfigClockSource+0x15e>
 8003bc6:	2b10      	cmp	r3, #16
 8003bc8:	d05a      	beq.n	8003c80 <HAL_TIM_ConfigClockSource+0x15e>
 8003bca:	e062      	b.n	8003c92 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003bdc:	f000 fb04 	bl	80041e8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003bee:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68ba      	ldr	r2, [r7, #8]
 8003bf6:	609a      	str	r2, [r3, #8]
      break;
 8003bf8:	e04f      	b.n	8003c9a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c0a:	f000 faed 	bl	80041e8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	689a      	ldr	r2, [r3, #8]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c1c:	609a      	str	r2, [r3, #8]
      break;
 8003c1e:	e03c      	b.n	8003c9a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	f000 f9ab 	bl	8003f88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2150      	movs	r1, #80	; 0x50
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f000 faba 	bl	80041b2 <TIM_ITRx_SetConfig>
      break;
 8003c3e:	e02c      	b.n	8003c9a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	f000 fa07 	bl	8004060 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2160      	movs	r1, #96	; 0x60
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f000 faaa 	bl	80041b2 <TIM_ITRx_SetConfig>
      break;
 8003c5e:	e01c      	b.n	8003c9a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	f000 f98b 	bl	8003f88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2140      	movs	r1, #64	; 0x40
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f000 fa9a 	bl	80041b2 <TIM_ITRx_SetConfig>
      break;
 8003c7e:	e00c      	b.n	8003c9a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4619      	mov	r1, r3
 8003c8a:	4610      	mov	r0, r2
 8003c8c:	f000 fa91 	bl	80041b2 <TIM_ITRx_SetConfig>
      break;
 8003c90:	e003      	b.n	8003c9a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	73fb      	strb	r3, [r7, #15]
      break;
 8003c96:	e000      	b.n	8003c9a <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003c98:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3710      	adds	r7, #16
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	2b0c      	cmp	r3, #12
 8003cc6:	d831      	bhi.n	8003d2c <HAL_TIM_ReadCapturedValue+0x78>
 8003cc8:	a201      	add	r2, pc, #4	; (adr r2, 8003cd0 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cce:	bf00      	nop
 8003cd0:	08003d05 	.word	0x08003d05
 8003cd4:	08003d2d 	.word	0x08003d2d
 8003cd8:	08003d2d 	.word	0x08003d2d
 8003cdc:	08003d2d 	.word	0x08003d2d
 8003ce0:	08003d0f 	.word	0x08003d0f
 8003ce4:	08003d2d 	.word	0x08003d2d
 8003ce8:	08003d2d 	.word	0x08003d2d
 8003cec:	08003d2d 	.word	0x08003d2d
 8003cf0:	08003d19 	.word	0x08003d19
 8003cf4:	08003d2d 	.word	0x08003d2d
 8003cf8:	08003d2d 	.word	0x08003d2d
 8003cfc:	08003d2d 	.word	0x08003d2d
 8003d00:	08003d23 	.word	0x08003d23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d0a:	60fb      	str	r3, [r7, #12]

      break;
 8003d0c:	e00f      	b.n	8003d2e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d14:	60fb      	str	r3, [r7, #12]

      break;
 8003d16:	e00a      	b.n	8003d2e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d1e:	60fb      	str	r3, [r7, #12]

      break;
 8003d20:	e005      	b.n	8003d2e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d28:	60fb      	str	r3, [r7, #12]

      break;
 8003d2a:	e000      	b.n	8003d2e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003d2c:	bf00      	nop
  }

  return tmpreg;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3714      	adds	r7, #20
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d58:	bf00      	nop
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b085      	sub	sp, #20
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a40      	ldr	r2, [pc, #256]	; (8003e8c <TIM_Base_SetConfig+0x114>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d013      	beq.n	8003db8 <TIM_Base_SetConfig+0x40>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d96:	d00f      	beq.n	8003db8 <TIM_Base_SetConfig+0x40>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a3d      	ldr	r2, [pc, #244]	; (8003e90 <TIM_Base_SetConfig+0x118>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d00b      	beq.n	8003db8 <TIM_Base_SetConfig+0x40>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a3c      	ldr	r2, [pc, #240]	; (8003e94 <TIM_Base_SetConfig+0x11c>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d007      	beq.n	8003db8 <TIM_Base_SetConfig+0x40>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a3b      	ldr	r2, [pc, #236]	; (8003e98 <TIM_Base_SetConfig+0x120>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d003      	beq.n	8003db8 <TIM_Base_SetConfig+0x40>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a3a      	ldr	r2, [pc, #232]	; (8003e9c <TIM_Base_SetConfig+0x124>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d108      	bne.n	8003dca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	68fa      	ldr	r2, [r7, #12]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a2f      	ldr	r2, [pc, #188]	; (8003e8c <TIM_Base_SetConfig+0x114>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d01f      	beq.n	8003e12 <TIM_Base_SetConfig+0x9a>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dd8:	d01b      	beq.n	8003e12 <TIM_Base_SetConfig+0x9a>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a2c      	ldr	r2, [pc, #176]	; (8003e90 <TIM_Base_SetConfig+0x118>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d017      	beq.n	8003e12 <TIM_Base_SetConfig+0x9a>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a2b      	ldr	r2, [pc, #172]	; (8003e94 <TIM_Base_SetConfig+0x11c>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d013      	beq.n	8003e12 <TIM_Base_SetConfig+0x9a>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a2a      	ldr	r2, [pc, #168]	; (8003e98 <TIM_Base_SetConfig+0x120>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d00f      	beq.n	8003e12 <TIM_Base_SetConfig+0x9a>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a29      	ldr	r2, [pc, #164]	; (8003e9c <TIM_Base_SetConfig+0x124>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d00b      	beq.n	8003e12 <TIM_Base_SetConfig+0x9a>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a28      	ldr	r2, [pc, #160]	; (8003ea0 <TIM_Base_SetConfig+0x128>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d007      	beq.n	8003e12 <TIM_Base_SetConfig+0x9a>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a27      	ldr	r2, [pc, #156]	; (8003ea4 <TIM_Base_SetConfig+0x12c>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d003      	beq.n	8003e12 <TIM_Base_SetConfig+0x9a>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a26      	ldr	r2, [pc, #152]	; (8003ea8 <TIM_Base_SetConfig+0x130>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d108      	bne.n	8003e24 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	695b      	ldr	r3, [r3, #20]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	68fa      	ldr	r2, [r7, #12]
 8003e36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	689a      	ldr	r2, [r3, #8]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a10      	ldr	r2, [pc, #64]	; (8003e8c <TIM_Base_SetConfig+0x114>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d00f      	beq.n	8003e70 <TIM_Base_SetConfig+0xf8>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a12      	ldr	r2, [pc, #72]	; (8003e9c <TIM_Base_SetConfig+0x124>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d00b      	beq.n	8003e70 <TIM_Base_SetConfig+0xf8>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a11      	ldr	r2, [pc, #68]	; (8003ea0 <TIM_Base_SetConfig+0x128>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d007      	beq.n	8003e70 <TIM_Base_SetConfig+0xf8>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a10      	ldr	r2, [pc, #64]	; (8003ea4 <TIM_Base_SetConfig+0x12c>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d003      	beq.n	8003e70 <TIM_Base_SetConfig+0xf8>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4a0f      	ldr	r2, [pc, #60]	; (8003ea8 <TIM_Base_SetConfig+0x130>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d103      	bne.n	8003e78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	691a      	ldr	r2, [r3, #16]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	615a      	str	r2, [r3, #20]
}
 8003e7e:	bf00      	nop
 8003e80:	3714      	adds	r7, #20
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	40012c00 	.word	0x40012c00
 8003e90:	40000400 	.word	0x40000400
 8003e94:	40000800 	.word	0x40000800
 8003e98:	40000c00 	.word	0x40000c00
 8003e9c:	40013400 	.word	0x40013400
 8003ea0:	40014000 	.word	0x40014000
 8003ea4:	40014400 	.word	0x40014400
 8003ea8:	40014800 	.word	0x40014800

08003eac <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b087      	sub	sp, #28
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	607a      	str	r2, [r7, #4]
 8003eb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	f023 0201 	bic.w	r2, r3, #1
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	699b      	ldr	r3, [r3, #24]
 8003eca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6a1b      	ldr	r3, [r3, #32]
 8003ed0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	4a26      	ldr	r2, [pc, #152]	; (8003f70 <TIM_TI1_SetConfig+0xc4>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d017      	beq.n	8003f0a <TIM_TI1_SetConfig+0x5e>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ee0:	d013      	beq.n	8003f0a <TIM_TI1_SetConfig+0x5e>
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	4a23      	ldr	r2, [pc, #140]	; (8003f74 <TIM_TI1_SetConfig+0xc8>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d00f      	beq.n	8003f0a <TIM_TI1_SetConfig+0x5e>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	4a22      	ldr	r2, [pc, #136]	; (8003f78 <TIM_TI1_SetConfig+0xcc>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d00b      	beq.n	8003f0a <TIM_TI1_SetConfig+0x5e>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	4a21      	ldr	r2, [pc, #132]	; (8003f7c <TIM_TI1_SetConfig+0xd0>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d007      	beq.n	8003f0a <TIM_TI1_SetConfig+0x5e>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	4a20      	ldr	r2, [pc, #128]	; (8003f80 <TIM_TI1_SetConfig+0xd4>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d003      	beq.n	8003f0a <TIM_TI1_SetConfig+0x5e>
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	4a1f      	ldr	r2, [pc, #124]	; (8003f84 <TIM_TI1_SetConfig+0xd8>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d101      	bne.n	8003f0e <TIM_TI1_SetConfig+0x62>
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e000      	b.n	8003f10 <TIM_TI1_SetConfig+0x64>
 8003f0e:	2300      	movs	r3, #0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d008      	beq.n	8003f26 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	f023 0303 	bic.w	r3, r3, #3
 8003f1a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003f1c:	697a      	ldr	r2, [r7, #20]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	617b      	str	r3, [r7, #20]
 8003f24:	e003      	b.n	8003f2e <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	f043 0301 	orr.w	r3, r3, #1
 8003f2c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	011b      	lsls	r3, r3, #4
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	697a      	ldr	r2, [r7, #20]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	f023 030a 	bic.w	r3, r3, #10
 8003f48:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	f003 030a 	and.w	r3, r3, #10
 8003f50:	693a      	ldr	r2, [r7, #16]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	697a      	ldr	r2, [r7, #20]
 8003f5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	693a      	ldr	r2, [r7, #16]
 8003f60:	621a      	str	r2, [r3, #32]
}
 8003f62:	bf00      	nop
 8003f64:	371c      	adds	r7, #28
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	40012c00 	.word	0x40012c00
 8003f74:	40000400 	.word	0x40000400
 8003f78:	40000800 	.word	0x40000800
 8003f7c:	40000c00 	.word	0x40000c00
 8003f80:	40013400 	.word	0x40013400
 8003f84:	40014000 	.word	0x40014000

08003f88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b087      	sub	sp, #28
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6a1b      	ldr	r3, [r3, #32]
 8003f98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6a1b      	ldr	r3, [r3, #32]
 8003f9e:	f023 0201 	bic.w	r2, r3, #1
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	699b      	ldr	r3, [r3, #24]
 8003faa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	011b      	lsls	r3, r3, #4
 8003fb8:	693a      	ldr	r2, [r7, #16]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	f023 030a 	bic.w	r3, r3, #10
 8003fc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fc6:	697a      	ldr	r2, [r7, #20]
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	693a      	ldr	r2, [r7, #16]
 8003fd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	697a      	ldr	r2, [r7, #20]
 8003fd8:	621a      	str	r2, [r3, #32]
}
 8003fda:	bf00      	nop
 8003fdc:	371c      	adds	r7, #28
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr

08003fe6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003fe6:	b480      	push	{r7}
 8003fe8:	b087      	sub	sp, #28
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	60f8      	str	r0, [r7, #12]
 8003fee:	60b9      	str	r1, [r7, #8]
 8003ff0:	607a      	str	r2, [r7, #4]
 8003ff2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6a1b      	ldr	r3, [r3, #32]
 8003ff8:	f023 0210 	bic.w	r2, r3, #16
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	699b      	ldr	r3, [r3, #24]
 8004004:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6a1b      	ldr	r3, [r3, #32]
 800400a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004012:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	021b      	lsls	r3, r3, #8
 8004018:	697a      	ldr	r2, [r7, #20]
 800401a:	4313      	orrs	r3, r2
 800401c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004024:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	031b      	lsls	r3, r3, #12
 800402a:	b29b      	uxth	r3, r3
 800402c:	697a      	ldr	r2, [r7, #20]
 800402e:	4313      	orrs	r3, r2
 8004030:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004038:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	011b      	lsls	r3, r3, #4
 800403e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004042:	693a      	ldr	r2, [r7, #16]
 8004044:	4313      	orrs	r3, r2
 8004046:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	697a      	ldr	r2, [r7, #20]
 800404c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	693a      	ldr	r2, [r7, #16]
 8004052:	621a      	str	r2, [r3, #32]
}
 8004054:	bf00      	nop
 8004056:	371c      	adds	r7, #28
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr

08004060 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004060:	b480      	push	{r7}
 8004062:	b087      	sub	sp, #28
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6a1b      	ldr	r3, [r3, #32]
 8004070:	f023 0210 	bic.w	r2, r3, #16
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	699b      	ldr	r3, [r3, #24]
 800407c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6a1b      	ldr	r3, [r3, #32]
 8004082:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800408a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	031b      	lsls	r3, r3, #12
 8004090:	697a      	ldr	r2, [r7, #20]
 8004092:	4313      	orrs	r3, r2
 8004094:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800409c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	011b      	lsls	r3, r3, #4
 80040a2:	693a      	ldr	r2, [r7, #16]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	697a      	ldr	r2, [r7, #20]
 80040ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	693a      	ldr	r2, [r7, #16]
 80040b2:	621a      	str	r2, [r3, #32]
}
 80040b4:	bf00      	nop
 80040b6:	371c      	adds	r7, #28
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b087      	sub	sp, #28
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	607a      	str	r2, [r7, #4]
 80040cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6a1b      	ldr	r3, [r3, #32]
 80040d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	69db      	ldr	r3, [r3, #28]
 80040de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6a1b      	ldr	r3, [r3, #32]
 80040e4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	f023 0303 	bic.w	r3, r3, #3
 80040ec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80040ee:	697a      	ldr	r2, [r7, #20]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040fc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	011b      	lsls	r3, r3, #4
 8004102:	b2db      	uxtb	r3, r3
 8004104:	697a      	ldr	r2, [r7, #20]
 8004106:	4313      	orrs	r3, r2
 8004108:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004110:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	021b      	lsls	r3, r3, #8
 8004116:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800411a:	693a      	ldr	r2, [r7, #16]
 800411c:	4313      	orrs	r3, r2
 800411e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	697a      	ldr	r2, [r7, #20]
 8004124:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	693a      	ldr	r2, [r7, #16]
 800412a:	621a      	str	r2, [r3, #32]
}
 800412c:	bf00      	nop
 800412e:	371c      	adds	r7, #28
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004138:	b480      	push	{r7}
 800413a:	b087      	sub	sp, #28
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
 8004144:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6a1b      	ldr	r3, [r3, #32]
 800414a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	69db      	ldr	r3, [r3, #28]
 8004156:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6a1b      	ldr	r3, [r3, #32]
 800415c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004164:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	021b      	lsls	r3, r3, #8
 800416a:	697a      	ldr	r2, [r7, #20]
 800416c:	4313      	orrs	r3, r2
 800416e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004176:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	031b      	lsls	r3, r3, #12
 800417c:	b29b      	uxth	r3, r3
 800417e:	697a      	ldr	r2, [r7, #20]
 8004180:	4313      	orrs	r3, r2
 8004182:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800418a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	031b      	lsls	r3, r3, #12
 8004190:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	4313      	orrs	r3, r2
 8004198:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	697a      	ldr	r2, [r7, #20]
 800419e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	693a      	ldr	r2, [r7, #16]
 80041a4:	621a      	str	r2, [r3, #32]
}
 80041a6:	bf00      	nop
 80041a8:	371c      	adds	r7, #28
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr

080041b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041b2:	b480      	push	{r7}
 80041b4:	b085      	sub	sp, #20
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
 80041ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041ca:	683a      	ldr	r2, [r7, #0]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	f043 0307 	orr.w	r3, r3, #7
 80041d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	68fa      	ldr	r2, [r7, #12]
 80041da:	609a      	str	r2, [r3, #8]
}
 80041dc:	bf00      	nop
 80041de:	3714      	adds	r7, #20
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b087      	sub	sp, #28
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]
 80041f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004202:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	021a      	lsls	r2, r3, #8
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	431a      	orrs	r2, r3
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	4313      	orrs	r3, r2
 8004210:	697a      	ldr	r2, [r7, #20]
 8004212:	4313      	orrs	r3, r2
 8004214:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	697a      	ldr	r2, [r7, #20]
 800421a:	609a      	str	r2, [r3, #8]
}
 800421c:	bf00      	nop
 800421e:	371c      	adds	r7, #28
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004228:	b480      	push	{r7}
 800422a:	b087      	sub	sp, #28
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	f003 031f 	and.w	r3, r3, #31
 800423a:	2201      	movs	r2, #1
 800423c:	fa02 f303 	lsl.w	r3, r2, r3
 8004240:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6a1a      	ldr	r2, [r3, #32]
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	43db      	mvns	r3, r3
 800424a:	401a      	ands	r2, r3
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6a1a      	ldr	r2, [r3, #32]
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	f003 031f 	and.w	r3, r3, #31
 800425a:	6879      	ldr	r1, [r7, #4]
 800425c:	fa01 f303 	lsl.w	r3, r1, r3
 8004260:	431a      	orrs	r2, r3
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	621a      	str	r2, [r3, #32]
}
 8004266:	bf00      	nop
 8004268:	371c      	adds	r7, #28
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
	...

08004274 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004274:	b480      	push	{r7}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004284:	2b01      	cmp	r3, #1
 8004286:	d101      	bne.n	800428c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004288:	2302      	movs	r3, #2
 800428a:	e068      	b.n	800435e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2202      	movs	r2, #2
 8004298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a2e      	ldr	r2, [pc, #184]	; (800436c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d004      	beq.n	80042c0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a2d      	ldr	r2, [pc, #180]	; (8004370 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d108      	bne.n	80042d2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80042c6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	68fa      	ldr	r2, [r7, #12]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042d8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68fa      	ldr	r2, [r7, #12]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a1e      	ldr	r2, [pc, #120]	; (800436c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d01d      	beq.n	8004332 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042fe:	d018      	beq.n	8004332 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a1b      	ldr	r2, [pc, #108]	; (8004374 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d013      	beq.n	8004332 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a1a      	ldr	r2, [pc, #104]	; (8004378 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d00e      	beq.n	8004332 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a18      	ldr	r2, [pc, #96]	; (800437c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d009      	beq.n	8004332 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a13      	ldr	r2, [pc, #76]	; (8004370 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d004      	beq.n	8004332 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a14      	ldr	r2, [pc, #80]	; (8004380 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d10c      	bne.n	800434c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004338:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	68ba      	ldr	r2, [r7, #8]
 8004340:	4313      	orrs	r3, r2
 8004342:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68ba      	ldr	r2, [r7, #8]
 800434a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3714      	adds	r7, #20
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop
 800436c:	40012c00 	.word	0x40012c00
 8004370:	40013400 	.word	0x40013400
 8004374:	40000400 	.word	0x40000400
 8004378:	40000800 	.word	0x40000800
 800437c:	40000c00 	.word	0x40000c00
 8004380:	40014000 	.word	0x40014000

08004384 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800438c:	bf00      	nop
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043a0:	bf00      	nop
 80043a2:	370c      	adds	r7, #12
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr

080043ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80043b4:	bf00      	nop
 80043b6:	370c      	adds	r7, #12
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d101      	bne.n	80043d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e040      	b.n	8004454 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d106      	bne.n	80043e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f7fc ff4e 	bl	8001284 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2224      	movs	r2, #36	; 0x24
 80043ec:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f022 0201 	bic.w	r2, r2, #1
 80043fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 f8c0 	bl	8004584 <UART_SetConfig>
 8004404:	4603      	mov	r3, r0
 8004406:	2b01      	cmp	r3, #1
 8004408:	d101      	bne.n	800440e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e022      	b.n	8004454 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004412:	2b00      	cmp	r3, #0
 8004414:	d002      	beq.n	800441c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 fb6c 	bl	8004af4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	685a      	ldr	r2, [r3, #4]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800442a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	689a      	ldr	r2, [r3, #8]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800443a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f042 0201 	orr.w	r2, r2, #1
 800444a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f000 fbf3 	bl	8004c38 <UART_CheckIdleState>
 8004452:	4603      	mov	r3, r0
}
 8004454:	4618      	mov	r0, r3
 8004456:	3708      	adds	r7, #8
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b08a      	sub	sp, #40	; 0x28
 8004460:	af02      	add	r7, sp, #8
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	603b      	str	r3, [r7, #0]
 8004468:	4613      	mov	r3, r2
 800446a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004470:	2b20      	cmp	r3, #32
 8004472:	f040 8082 	bne.w	800457a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d002      	beq.n	8004482 <HAL_UART_Transmit+0x26>
 800447c:	88fb      	ldrh	r3, [r7, #6]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d101      	bne.n	8004486 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e07a      	b.n	800457c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800448c:	2b01      	cmp	r3, #1
 800448e:	d101      	bne.n	8004494 <HAL_UART_Transmit+0x38>
 8004490:	2302      	movs	r3, #2
 8004492:	e073      	b.n	800457c <HAL_UART_Transmit+0x120>
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2200      	movs	r2, #0
 80044a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2221      	movs	r2, #33	; 0x21
 80044a8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044aa:	f7fd f8e7 	bl	800167c <HAL_GetTick>
 80044ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	88fa      	ldrh	r2, [r7, #6]
 80044b4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	88fa      	ldrh	r2, [r7, #6]
 80044bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044c8:	d108      	bne.n	80044dc <HAL_UART_Transmit+0x80>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d104      	bne.n	80044dc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80044d2:	2300      	movs	r3, #0
 80044d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	61bb      	str	r3, [r7, #24]
 80044da:	e003      	b.n	80044e4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044e0:	2300      	movs	r3, #0
 80044e2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80044ec:	e02d      	b.n	800454a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	9300      	str	r3, [sp, #0]
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	2200      	movs	r2, #0
 80044f6:	2180      	movs	r1, #128	; 0x80
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	f000 fbe6 	bl	8004cca <UART_WaitOnFlagUntilTimeout>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d001      	beq.n	8004508 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	e039      	b.n	800457c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d10b      	bne.n	8004526 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800450e:	69bb      	ldr	r3, [r7, #24]
 8004510:	881a      	ldrh	r2, [r3, #0]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800451a:	b292      	uxth	r2, r2
 800451c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	3302      	adds	r3, #2
 8004522:	61bb      	str	r3, [r7, #24]
 8004524:	e008      	b.n	8004538 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	781a      	ldrb	r2, [r3, #0]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	b292      	uxth	r2, r2
 8004530:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	3301      	adds	r3, #1
 8004536:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800453e:	b29b      	uxth	r3, r3
 8004540:	3b01      	subs	r3, #1
 8004542:	b29a      	uxth	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004550:	b29b      	uxth	r3, r3
 8004552:	2b00      	cmp	r3, #0
 8004554:	d1cb      	bne.n	80044ee <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	9300      	str	r3, [sp, #0]
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	2200      	movs	r2, #0
 800455e:	2140      	movs	r1, #64	; 0x40
 8004560:	68f8      	ldr	r0, [r7, #12]
 8004562:	f000 fbb2 	bl	8004cca <UART_WaitOnFlagUntilTimeout>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d001      	beq.n	8004570 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e005      	b.n	800457c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2220      	movs	r2, #32
 8004574:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004576:	2300      	movs	r3, #0
 8004578:	e000      	b.n	800457c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800457a:	2302      	movs	r3, #2
  }
}
 800457c:	4618      	mov	r0, r3
 800457e:	3720      	adds	r7, #32
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004584:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004588:	b08a      	sub	sp, #40	; 0x28
 800458a:	af00      	add	r7, sp, #0
 800458c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800458e:	2300      	movs	r3, #0
 8004590:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	689a      	ldr	r2, [r3, #8]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	691b      	ldr	r3, [r3, #16]
 800459c:	431a      	orrs	r2, r3
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	431a      	orrs	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	69db      	ldr	r3, [r3, #28]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	4ba4      	ldr	r3, [pc, #656]	; (8004844 <UART_SetConfig+0x2c0>)
 80045b4:	4013      	ands	r3, r2
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	6812      	ldr	r2, [r2, #0]
 80045ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045bc:	430b      	orrs	r3, r1
 80045be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	68da      	ldr	r2, [r3, #12]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	430a      	orrs	r2, r1
 80045d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a99      	ldr	r2, [pc, #612]	; (8004848 <UART_SetConfig+0x2c4>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d004      	beq.n	80045f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045ec:	4313      	orrs	r3, r2
 80045ee:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004600:	430a      	orrs	r2, r1
 8004602:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a90      	ldr	r2, [pc, #576]	; (800484c <UART_SetConfig+0x2c8>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d126      	bne.n	800465c <UART_SetConfig+0xd8>
 800460e:	4b90      	ldr	r3, [pc, #576]	; (8004850 <UART_SetConfig+0x2cc>)
 8004610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004614:	f003 0303 	and.w	r3, r3, #3
 8004618:	2b03      	cmp	r3, #3
 800461a:	d81b      	bhi.n	8004654 <UART_SetConfig+0xd0>
 800461c:	a201      	add	r2, pc, #4	; (adr r2, 8004624 <UART_SetConfig+0xa0>)
 800461e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004622:	bf00      	nop
 8004624:	08004635 	.word	0x08004635
 8004628:	08004645 	.word	0x08004645
 800462c:	0800463d 	.word	0x0800463d
 8004630:	0800464d 	.word	0x0800464d
 8004634:	2301      	movs	r3, #1
 8004636:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800463a:	e116      	b.n	800486a <UART_SetConfig+0x2e6>
 800463c:	2302      	movs	r3, #2
 800463e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004642:	e112      	b.n	800486a <UART_SetConfig+0x2e6>
 8004644:	2304      	movs	r3, #4
 8004646:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800464a:	e10e      	b.n	800486a <UART_SetConfig+0x2e6>
 800464c:	2308      	movs	r3, #8
 800464e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004652:	e10a      	b.n	800486a <UART_SetConfig+0x2e6>
 8004654:	2310      	movs	r3, #16
 8004656:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800465a:	e106      	b.n	800486a <UART_SetConfig+0x2e6>
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a7c      	ldr	r2, [pc, #496]	; (8004854 <UART_SetConfig+0x2d0>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d138      	bne.n	80046d8 <UART_SetConfig+0x154>
 8004666:	4b7a      	ldr	r3, [pc, #488]	; (8004850 <UART_SetConfig+0x2cc>)
 8004668:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800466c:	f003 030c 	and.w	r3, r3, #12
 8004670:	2b0c      	cmp	r3, #12
 8004672:	d82d      	bhi.n	80046d0 <UART_SetConfig+0x14c>
 8004674:	a201      	add	r2, pc, #4	; (adr r2, 800467c <UART_SetConfig+0xf8>)
 8004676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800467a:	bf00      	nop
 800467c:	080046b1 	.word	0x080046b1
 8004680:	080046d1 	.word	0x080046d1
 8004684:	080046d1 	.word	0x080046d1
 8004688:	080046d1 	.word	0x080046d1
 800468c:	080046c1 	.word	0x080046c1
 8004690:	080046d1 	.word	0x080046d1
 8004694:	080046d1 	.word	0x080046d1
 8004698:	080046d1 	.word	0x080046d1
 800469c:	080046b9 	.word	0x080046b9
 80046a0:	080046d1 	.word	0x080046d1
 80046a4:	080046d1 	.word	0x080046d1
 80046a8:	080046d1 	.word	0x080046d1
 80046ac:	080046c9 	.word	0x080046c9
 80046b0:	2300      	movs	r3, #0
 80046b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046b6:	e0d8      	b.n	800486a <UART_SetConfig+0x2e6>
 80046b8:	2302      	movs	r3, #2
 80046ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046be:	e0d4      	b.n	800486a <UART_SetConfig+0x2e6>
 80046c0:	2304      	movs	r3, #4
 80046c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046c6:	e0d0      	b.n	800486a <UART_SetConfig+0x2e6>
 80046c8:	2308      	movs	r3, #8
 80046ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046ce:	e0cc      	b.n	800486a <UART_SetConfig+0x2e6>
 80046d0:	2310      	movs	r3, #16
 80046d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046d6:	e0c8      	b.n	800486a <UART_SetConfig+0x2e6>
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a5e      	ldr	r2, [pc, #376]	; (8004858 <UART_SetConfig+0x2d4>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d125      	bne.n	800472e <UART_SetConfig+0x1aa>
 80046e2:	4b5b      	ldr	r3, [pc, #364]	; (8004850 <UART_SetConfig+0x2cc>)
 80046e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80046ec:	2b30      	cmp	r3, #48	; 0x30
 80046ee:	d016      	beq.n	800471e <UART_SetConfig+0x19a>
 80046f0:	2b30      	cmp	r3, #48	; 0x30
 80046f2:	d818      	bhi.n	8004726 <UART_SetConfig+0x1a2>
 80046f4:	2b20      	cmp	r3, #32
 80046f6:	d00a      	beq.n	800470e <UART_SetConfig+0x18a>
 80046f8:	2b20      	cmp	r3, #32
 80046fa:	d814      	bhi.n	8004726 <UART_SetConfig+0x1a2>
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d002      	beq.n	8004706 <UART_SetConfig+0x182>
 8004700:	2b10      	cmp	r3, #16
 8004702:	d008      	beq.n	8004716 <UART_SetConfig+0x192>
 8004704:	e00f      	b.n	8004726 <UART_SetConfig+0x1a2>
 8004706:	2300      	movs	r3, #0
 8004708:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800470c:	e0ad      	b.n	800486a <UART_SetConfig+0x2e6>
 800470e:	2302      	movs	r3, #2
 8004710:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004714:	e0a9      	b.n	800486a <UART_SetConfig+0x2e6>
 8004716:	2304      	movs	r3, #4
 8004718:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800471c:	e0a5      	b.n	800486a <UART_SetConfig+0x2e6>
 800471e:	2308      	movs	r3, #8
 8004720:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004724:	e0a1      	b.n	800486a <UART_SetConfig+0x2e6>
 8004726:	2310      	movs	r3, #16
 8004728:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800472c:	e09d      	b.n	800486a <UART_SetConfig+0x2e6>
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a4a      	ldr	r2, [pc, #296]	; (800485c <UART_SetConfig+0x2d8>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d125      	bne.n	8004784 <UART_SetConfig+0x200>
 8004738:	4b45      	ldr	r3, [pc, #276]	; (8004850 <UART_SetConfig+0x2cc>)
 800473a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800473e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004742:	2bc0      	cmp	r3, #192	; 0xc0
 8004744:	d016      	beq.n	8004774 <UART_SetConfig+0x1f0>
 8004746:	2bc0      	cmp	r3, #192	; 0xc0
 8004748:	d818      	bhi.n	800477c <UART_SetConfig+0x1f8>
 800474a:	2b80      	cmp	r3, #128	; 0x80
 800474c:	d00a      	beq.n	8004764 <UART_SetConfig+0x1e0>
 800474e:	2b80      	cmp	r3, #128	; 0x80
 8004750:	d814      	bhi.n	800477c <UART_SetConfig+0x1f8>
 8004752:	2b00      	cmp	r3, #0
 8004754:	d002      	beq.n	800475c <UART_SetConfig+0x1d8>
 8004756:	2b40      	cmp	r3, #64	; 0x40
 8004758:	d008      	beq.n	800476c <UART_SetConfig+0x1e8>
 800475a:	e00f      	b.n	800477c <UART_SetConfig+0x1f8>
 800475c:	2300      	movs	r3, #0
 800475e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004762:	e082      	b.n	800486a <UART_SetConfig+0x2e6>
 8004764:	2302      	movs	r3, #2
 8004766:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800476a:	e07e      	b.n	800486a <UART_SetConfig+0x2e6>
 800476c:	2304      	movs	r3, #4
 800476e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004772:	e07a      	b.n	800486a <UART_SetConfig+0x2e6>
 8004774:	2308      	movs	r3, #8
 8004776:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800477a:	e076      	b.n	800486a <UART_SetConfig+0x2e6>
 800477c:	2310      	movs	r3, #16
 800477e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004782:	e072      	b.n	800486a <UART_SetConfig+0x2e6>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a35      	ldr	r2, [pc, #212]	; (8004860 <UART_SetConfig+0x2dc>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d12a      	bne.n	80047e4 <UART_SetConfig+0x260>
 800478e:	4b30      	ldr	r3, [pc, #192]	; (8004850 <UART_SetConfig+0x2cc>)
 8004790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004794:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004798:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800479c:	d01a      	beq.n	80047d4 <UART_SetConfig+0x250>
 800479e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047a2:	d81b      	bhi.n	80047dc <UART_SetConfig+0x258>
 80047a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047a8:	d00c      	beq.n	80047c4 <UART_SetConfig+0x240>
 80047aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047ae:	d815      	bhi.n	80047dc <UART_SetConfig+0x258>
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d003      	beq.n	80047bc <UART_SetConfig+0x238>
 80047b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047b8:	d008      	beq.n	80047cc <UART_SetConfig+0x248>
 80047ba:	e00f      	b.n	80047dc <UART_SetConfig+0x258>
 80047bc:	2300      	movs	r3, #0
 80047be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047c2:	e052      	b.n	800486a <UART_SetConfig+0x2e6>
 80047c4:	2302      	movs	r3, #2
 80047c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047ca:	e04e      	b.n	800486a <UART_SetConfig+0x2e6>
 80047cc:	2304      	movs	r3, #4
 80047ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047d2:	e04a      	b.n	800486a <UART_SetConfig+0x2e6>
 80047d4:	2308      	movs	r3, #8
 80047d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047da:	e046      	b.n	800486a <UART_SetConfig+0x2e6>
 80047dc:	2310      	movs	r3, #16
 80047de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047e2:	e042      	b.n	800486a <UART_SetConfig+0x2e6>
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a17      	ldr	r2, [pc, #92]	; (8004848 <UART_SetConfig+0x2c4>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d13a      	bne.n	8004864 <UART_SetConfig+0x2e0>
 80047ee:	4b18      	ldr	r3, [pc, #96]	; (8004850 <UART_SetConfig+0x2cc>)
 80047f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80047f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047fc:	d01a      	beq.n	8004834 <UART_SetConfig+0x2b0>
 80047fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004802:	d81b      	bhi.n	800483c <UART_SetConfig+0x2b8>
 8004804:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004808:	d00c      	beq.n	8004824 <UART_SetConfig+0x2a0>
 800480a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800480e:	d815      	bhi.n	800483c <UART_SetConfig+0x2b8>
 8004810:	2b00      	cmp	r3, #0
 8004812:	d003      	beq.n	800481c <UART_SetConfig+0x298>
 8004814:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004818:	d008      	beq.n	800482c <UART_SetConfig+0x2a8>
 800481a:	e00f      	b.n	800483c <UART_SetConfig+0x2b8>
 800481c:	2300      	movs	r3, #0
 800481e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004822:	e022      	b.n	800486a <UART_SetConfig+0x2e6>
 8004824:	2302      	movs	r3, #2
 8004826:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800482a:	e01e      	b.n	800486a <UART_SetConfig+0x2e6>
 800482c:	2304      	movs	r3, #4
 800482e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004832:	e01a      	b.n	800486a <UART_SetConfig+0x2e6>
 8004834:	2308      	movs	r3, #8
 8004836:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800483a:	e016      	b.n	800486a <UART_SetConfig+0x2e6>
 800483c:	2310      	movs	r3, #16
 800483e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004842:	e012      	b.n	800486a <UART_SetConfig+0x2e6>
 8004844:	efff69f3 	.word	0xefff69f3
 8004848:	40008000 	.word	0x40008000
 800484c:	40013800 	.word	0x40013800
 8004850:	40021000 	.word	0x40021000
 8004854:	40004400 	.word	0x40004400
 8004858:	40004800 	.word	0x40004800
 800485c:	40004c00 	.word	0x40004c00
 8004860:	40005000 	.word	0x40005000
 8004864:	2310      	movs	r3, #16
 8004866:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a9f      	ldr	r2, [pc, #636]	; (8004aec <UART_SetConfig+0x568>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d17a      	bne.n	800496a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004874:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004878:	2b08      	cmp	r3, #8
 800487a:	d824      	bhi.n	80048c6 <UART_SetConfig+0x342>
 800487c:	a201      	add	r2, pc, #4	; (adr r2, 8004884 <UART_SetConfig+0x300>)
 800487e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004882:	bf00      	nop
 8004884:	080048a9 	.word	0x080048a9
 8004888:	080048c7 	.word	0x080048c7
 800488c:	080048b1 	.word	0x080048b1
 8004890:	080048c7 	.word	0x080048c7
 8004894:	080048b7 	.word	0x080048b7
 8004898:	080048c7 	.word	0x080048c7
 800489c:	080048c7 	.word	0x080048c7
 80048a0:	080048c7 	.word	0x080048c7
 80048a4:	080048bf 	.word	0x080048bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048a8:	f7fd ffc4 	bl	8002834 <HAL_RCC_GetPCLK1Freq>
 80048ac:	61f8      	str	r0, [r7, #28]
        break;
 80048ae:	e010      	b.n	80048d2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048b0:	4b8f      	ldr	r3, [pc, #572]	; (8004af0 <UART_SetConfig+0x56c>)
 80048b2:	61fb      	str	r3, [r7, #28]
        break;
 80048b4:	e00d      	b.n	80048d2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048b6:	f7fd ff25 	bl	8002704 <HAL_RCC_GetSysClockFreq>
 80048ba:	61f8      	str	r0, [r7, #28]
        break;
 80048bc:	e009      	b.n	80048d2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048c2:	61fb      	str	r3, [r7, #28]
        break;
 80048c4:	e005      	b.n	80048d2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80048c6:	2300      	movs	r3, #0
 80048c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80048d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	f000 80fb 	beq.w	8004ad0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	685a      	ldr	r2, [r3, #4]
 80048de:	4613      	mov	r3, r2
 80048e0:	005b      	lsls	r3, r3, #1
 80048e2:	4413      	add	r3, r2
 80048e4:	69fa      	ldr	r2, [r7, #28]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d305      	bcc.n	80048f6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80048f0:	69fa      	ldr	r2, [r7, #28]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d903      	bls.n	80048fe <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80048fc:	e0e8      	b.n	8004ad0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	2200      	movs	r2, #0
 8004902:	461c      	mov	r4, r3
 8004904:	4615      	mov	r5, r2
 8004906:	f04f 0200 	mov.w	r2, #0
 800490a:	f04f 0300 	mov.w	r3, #0
 800490e:	022b      	lsls	r3, r5, #8
 8004910:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004914:	0222      	lsls	r2, r4, #8
 8004916:	68f9      	ldr	r1, [r7, #12]
 8004918:	6849      	ldr	r1, [r1, #4]
 800491a:	0849      	lsrs	r1, r1, #1
 800491c:	2000      	movs	r0, #0
 800491e:	4688      	mov	r8, r1
 8004920:	4681      	mov	r9, r0
 8004922:	eb12 0a08 	adds.w	sl, r2, r8
 8004926:	eb43 0b09 	adc.w	fp, r3, r9
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	603b      	str	r3, [r7, #0]
 8004932:	607a      	str	r2, [r7, #4]
 8004934:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004938:	4650      	mov	r0, sl
 800493a:	4659      	mov	r1, fp
 800493c:	f7fc f984 	bl	8000c48 <__aeabi_uldivmod>
 8004940:	4602      	mov	r2, r0
 8004942:	460b      	mov	r3, r1
 8004944:	4613      	mov	r3, r2
 8004946:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800494e:	d308      	bcc.n	8004962 <UART_SetConfig+0x3de>
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004956:	d204      	bcs.n	8004962 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	69ba      	ldr	r2, [r7, #24]
 800495e:	60da      	str	r2, [r3, #12]
 8004960:	e0b6      	b.n	8004ad0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004968:	e0b2      	b.n	8004ad0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	69db      	ldr	r3, [r3, #28]
 800496e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004972:	d15e      	bne.n	8004a32 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004974:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004978:	2b08      	cmp	r3, #8
 800497a:	d828      	bhi.n	80049ce <UART_SetConfig+0x44a>
 800497c:	a201      	add	r2, pc, #4	; (adr r2, 8004984 <UART_SetConfig+0x400>)
 800497e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004982:	bf00      	nop
 8004984:	080049a9 	.word	0x080049a9
 8004988:	080049b1 	.word	0x080049b1
 800498c:	080049b9 	.word	0x080049b9
 8004990:	080049cf 	.word	0x080049cf
 8004994:	080049bf 	.word	0x080049bf
 8004998:	080049cf 	.word	0x080049cf
 800499c:	080049cf 	.word	0x080049cf
 80049a0:	080049cf 	.word	0x080049cf
 80049a4:	080049c7 	.word	0x080049c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049a8:	f7fd ff44 	bl	8002834 <HAL_RCC_GetPCLK1Freq>
 80049ac:	61f8      	str	r0, [r7, #28]
        break;
 80049ae:	e014      	b.n	80049da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049b0:	f7fd ff56 	bl	8002860 <HAL_RCC_GetPCLK2Freq>
 80049b4:	61f8      	str	r0, [r7, #28]
        break;
 80049b6:	e010      	b.n	80049da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049b8:	4b4d      	ldr	r3, [pc, #308]	; (8004af0 <UART_SetConfig+0x56c>)
 80049ba:	61fb      	str	r3, [r7, #28]
        break;
 80049bc:	e00d      	b.n	80049da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049be:	f7fd fea1 	bl	8002704 <HAL_RCC_GetSysClockFreq>
 80049c2:	61f8      	str	r0, [r7, #28]
        break;
 80049c4:	e009      	b.n	80049da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049ca:	61fb      	str	r3, [r7, #28]
        break;
 80049cc:	e005      	b.n	80049da <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80049ce:	2300      	movs	r3, #0
 80049d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80049d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d077      	beq.n	8004ad0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	005a      	lsls	r2, r3, #1
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	085b      	lsrs	r3, r3, #1
 80049ea:	441a      	add	r2, r3
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049f4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	2b0f      	cmp	r3, #15
 80049fa:	d916      	bls.n	8004a2a <UART_SetConfig+0x4a6>
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a02:	d212      	bcs.n	8004a2a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	f023 030f 	bic.w	r3, r3, #15
 8004a0c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	085b      	lsrs	r3, r3, #1
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	f003 0307 	and.w	r3, r3, #7
 8004a18:	b29a      	uxth	r2, r3
 8004a1a:	8afb      	ldrh	r3, [r7, #22]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	8afa      	ldrh	r2, [r7, #22]
 8004a26:	60da      	str	r2, [r3, #12]
 8004a28:	e052      	b.n	8004ad0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004a30:	e04e      	b.n	8004ad0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a36:	2b08      	cmp	r3, #8
 8004a38:	d827      	bhi.n	8004a8a <UART_SetConfig+0x506>
 8004a3a:	a201      	add	r2, pc, #4	; (adr r2, 8004a40 <UART_SetConfig+0x4bc>)
 8004a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a40:	08004a65 	.word	0x08004a65
 8004a44:	08004a6d 	.word	0x08004a6d
 8004a48:	08004a75 	.word	0x08004a75
 8004a4c:	08004a8b 	.word	0x08004a8b
 8004a50:	08004a7b 	.word	0x08004a7b
 8004a54:	08004a8b 	.word	0x08004a8b
 8004a58:	08004a8b 	.word	0x08004a8b
 8004a5c:	08004a8b 	.word	0x08004a8b
 8004a60:	08004a83 	.word	0x08004a83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a64:	f7fd fee6 	bl	8002834 <HAL_RCC_GetPCLK1Freq>
 8004a68:	61f8      	str	r0, [r7, #28]
        break;
 8004a6a:	e014      	b.n	8004a96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a6c:	f7fd fef8 	bl	8002860 <HAL_RCC_GetPCLK2Freq>
 8004a70:	61f8      	str	r0, [r7, #28]
        break;
 8004a72:	e010      	b.n	8004a96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a74:	4b1e      	ldr	r3, [pc, #120]	; (8004af0 <UART_SetConfig+0x56c>)
 8004a76:	61fb      	str	r3, [r7, #28]
        break;
 8004a78:	e00d      	b.n	8004a96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a7a:	f7fd fe43 	bl	8002704 <HAL_RCC_GetSysClockFreq>
 8004a7e:	61f8      	str	r0, [r7, #28]
        break;
 8004a80:	e009      	b.n	8004a96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a86:	61fb      	str	r3, [r7, #28]
        break;
 8004a88:	e005      	b.n	8004a96 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004a94:	bf00      	nop
    }

    if (pclk != 0U)
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d019      	beq.n	8004ad0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	085a      	lsrs	r2, r3, #1
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	441a      	add	r2, r3
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aae:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	2b0f      	cmp	r3, #15
 8004ab4:	d909      	bls.n	8004aca <UART_SetConfig+0x546>
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004abc:	d205      	bcs.n	8004aca <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	b29a      	uxth	r2, r3
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	60da      	str	r2, [r3, #12]
 8004ac8:	e002      	b.n	8004ad0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004adc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3728      	adds	r7, #40	; 0x28
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004aea:	bf00      	nop
 8004aec:	40008000 	.word	0x40008000
 8004af0:	00f42400 	.word	0x00f42400

08004af4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b00:	f003 0301 	and.w	r3, r3, #1
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d00a      	beq.n	8004b1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	430a      	orrs	r2, r1
 8004b1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b22:	f003 0302 	and.w	r3, r3, #2
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00a      	beq.n	8004b40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	430a      	orrs	r2, r1
 8004b3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b44:	f003 0304 	and.w	r3, r3, #4
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d00a      	beq.n	8004b62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b66:	f003 0308 	and.w	r3, r3, #8
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00a      	beq.n	8004b84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	430a      	orrs	r2, r1
 8004b82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b88:	f003 0310 	and.w	r3, r3, #16
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00a      	beq.n	8004ba6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	430a      	orrs	r2, r1
 8004ba4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004baa:	f003 0320 	and.w	r3, r3, #32
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00a      	beq.n	8004bc8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	430a      	orrs	r2, r1
 8004bc6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d01a      	beq.n	8004c0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	430a      	orrs	r2, r1
 8004be8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bf2:	d10a      	bne.n	8004c0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	430a      	orrs	r2, r1
 8004c08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d00a      	beq.n	8004c2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	430a      	orrs	r2, r1
 8004c2a:	605a      	str	r2, [r3, #4]
  }
}
 8004c2c:	bf00      	nop
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b086      	sub	sp, #24
 8004c3c:	af02      	add	r7, sp, #8
 8004c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c48:	f7fc fd18 	bl	800167c <HAL_GetTick>
 8004c4c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0308 	and.w	r3, r3, #8
 8004c58:	2b08      	cmp	r3, #8
 8004c5a:	d10e      	bne.n	8004c7a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c60:	9300      	str	r3, [sp, #0]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 f82d 	bl	8004cca <UART_WaitOnFlagUntilTimeout>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d001      	beq.n	8004c7a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e023      	b.n	8004cc2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0304 	and.w	r3, r3, #4
 8004c84:	2b04      	cmp	r3, #4
 8004c86:	d10e      	bne.n	8004ca6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c8c:	9300      	str	r3, [sp, #0]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 f817 	bl	8004cca <UART_WaitOnFlagUntilTimeout>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d001      	beq.n	8004ca6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e00d      	b.n	8004cc2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2220      	movs	r2, #32
 8004caa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2220      	movs	r2, #32
 8004cb0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3710      	adds	r7, #16
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}

08004cca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	b09c      	sub	sp, #112	; 0x70
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	60f8      	str	r0, [r7, #12]
 8004cd2:	60b9      	str	r1, [r7, #8]
 8004cd4:	603b      	str	r3, [r7, #0]
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cda:	e0a5      	b.n	8004e28 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cdc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce2:	f000 80a1 	beq.w	8004e28 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ce6:	f7fc fcc9 	bl	800167c <HAL_GetTick>
 8004cea:	4602      	mov	r2, r0
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d302      	bcc.n	8004cfc <UART_WaitOnFlagUntilTimeout+0x32>
 8004cf6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d13e      	bne.n	8004d7a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d04:	e853 3f00 	ldrex	r3, [r3]
 8004d08:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004d0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d0c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d10:	667b      	str	r3, [r7, #100]	; 0x64
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	461a      	mov	r2, r3
 8004d18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d1c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d1e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004d20:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004d22:	e841 2300 	strex	r3, r2, [r1]
 8004d26:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004d28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d1e6      	bne.n	8004cfc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	3308      	adds	r3, #8
 8004d34:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d38:	e853 3f00 	ldrex	r3, [r3]
 8004d3c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d40:	f023 0301 	bic.w	r3, r3, #1
 8004d44:	663b      	str	r3, [r7, #96]	; 0x60
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	3308      	adds	r3, #8
 8004d4c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004d4e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004d50:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d52:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004d54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d56:	e841 2300 	strex	r3, r2, [r1]
 8004d5a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004d5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d1e5      	bne.n	8004d2e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2220      	movs	r2, #32
 8004d66:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2220      	movs	r2, #32
 8004d6c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e067      	b.n	8004e4a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0304 	and.w	r3, r3, #4
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d04f      	beq.n	8004e28 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	69db      	ldr	r3, [r3, #28]
 8004d8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d96:	d147      	bne.n	8004e28 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004da0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004daa:	e853 3f00 	ldrex	r3, [r3]
 8004dae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004db6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dc0:	637b      	str	r3, [r7, #52]	; 0x34
 8004dc2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004dc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004dc8:	e841 2300 	strex	r3, r2, [r1]
 8004dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d1e6      	bne.n	8004da2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	3308      	adds	r3, #8
 8004dda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	e853 3f00 	ldrex	r3, [r3]
 8004de2:	613b      	str	r3, [r7, #16]
   return(result);
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	f023 0301 	bic.w	r3, r3, #1
 8004dea:	66bb      	str	r3, [r7, #104]	; 0x68
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	3308      	adds	r3, #8
 8004df2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004df4:	623a      	str	r2, [r7, #32]
 8004df6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df8:	69f9      	ldr	r1, [r7, #28]
 8004dfa:	6a3a      	ldr	r2, [r7, #32]
 8004dfc:	e841 2300 	strex	r3, r2, [r1]
 8004e00:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e02:	69bb      	ldr	r3, [r7, #24]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d1e5      	bne.n	8004dd4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2220      	movs	r2, #32
 8004e0c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2220      	movs	r2, #32
 8004e12:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2220      	movs	r2, #32
 8004e18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	e010      	b.n	8004e4a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	69da      	ldr	r2, [r3, #28]
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	4013      	ands	r3, r2
 8004e32:	68ba      	ldr	r2, [r7, #8]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	bf0c      	ite	eq
 8004e38:	2301      	moveq	r3, #1
 8004e3a:	2300      	movne	r3, #0
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	461a      	mov	r2, r3
 8004e40:	79fb      	ldrb	r3, [r7, #7]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	f43f af4a 	beq.w	8004cdc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3770      	adds	r7, #112	; 0x70
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
	...

08004e54 <DWT_Delay_us>:
uint32_t DWT_Delay_Init(void);


// This Function Provides Delay In Microseconds Using DWT
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 8004e5c:	4b0f      	ldr	r3, [pc, #60]	; (8004e9c <DWT_Delay_us+0x48>)
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 8004e62:	f7fd fcdb 	bl	800281c <HAL_RCC_GetHCLKFreq>
 8004e66:	4603      	mov	r3, r0
 8004e68:	4a0d      	ldr	r2, [pc, #52]	; (8004ea0 <DWT_Delay_us+0x4c>)
 8004e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e6e:	0c9b      	lsrs	r3, r3, #18
 8004e70:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	68ba      	ldr	r2, [r7, #8]
 8004e76:	fb02 f303 	mul.w	r3, r2, r3
 8004e7a:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 8004e7c:	bf00      	nop
 8004e7e:	4b07      	ldr	r3, [pc, #28]	; (8004e9c <DWT_Delay_us+0x48>)
 8004e80:	685a      	ldr	r2, [r3, #4]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	1ad2      	subs	r2, r2, r3
 8004e86:	6879      	ldr	r1, [r7, #4]
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	1acb      	subs	r3, r1, r3
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d3f6      	bcc.n	8004e7e <DWT_Delay_us+0x2a>
}
 8004e90:	bf00      	nop
 8004e92:	bf00      	nop
 8004e94:	3710      	adds	r7, #16
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	e0001000 	.word	0xe0001000
 8004ea0:	431bde83 	.word	0x431bde83

08004ea4 <HCSR04_Init>:
static HCSR04_info gs_HCSR04_info[HCSR04_UNITS] = {0};



void HCSR04_Init(uint8_t au8_HCSR04_Instance, TIM_HandleTypeDef* TMR_Handle)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b098      	sub	sp, #96	; 0x60
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	4603      	mov	r3, r0
 8004eac:	6039      	str	r1, [r7, #0]
 8004eae:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef TRIG_GPIO_InitStruct = {0};
 8004eb0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	601a      	str	r2, [r3, #0]
 8004eb8:	605a      	str	r2, [r3, #4]
 8004eba:	609a      	str	r2, [r3, #8]
 8004ebc:	60da      	str	r2, [r3, #12]
 8004ebe:	611a      	str	r2, [r3, #16]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004ec0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	601a      	str	r2, [r3, #0]
 8004ec8:	605a      	str	r2, [r3, #4]
 8004eca:	609a      	str	r2, [r3, #8]
 8004ecc:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004ece:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	601a      	str	r2, [r3, #0]
 8004ed6:	605a      	str	r2, [r3, #4]
 8004ed8:	609a      	str	r2, [r3, #8]
	TIM_IC_InitTypeDef sConfigIC = {0};
 8004eda:	f107 0320 	add.w	r3, r7, #32
 8004ede:	2200      	movs	r2, #0
 8004ee0:	601a      	str	r2, [r3, #0]
 8004ee2:	605a      	str	r2, [r3, #4]
 8004ee4:	609a      	str	r2, [r3, #8]
 8004ee6:	60da      	str	r2, [r3, #12]

    DWT_Delay_Init();
 8004ee8:	f000 fc94 	bl	8005814 <DWT_Delay_Init>

	/*--------[ Configure The HCSR04 TRIGGER GPIO Pin ]-------*/

    if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOA)
 8004eec:	79fa      	ldrb	r2, [r7, #7]
 8004eee:	4993      	ldr	r1, [pc, #588]	; (800513c <HCSR04_Init+0x298>)
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	4413      	add	r3, r2
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	440b      	add	r3, r1
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004f00:	d10c      	bne.n	8004f1c <HCSR04_Init+0x78>
    {
    	__HAL_RCC_GPIOA_CLK_ENABLE();
 8004f02:	4b8f      	ldr	r3, [pc, #572]	; (8005140 <HCSR04_Init+0x29c>)
 8004f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f06:	4a8e      	ldr	r2, [pc, #568]	; (8005140 <HCSR04_Init+0x29c>)
 8004f08:	f043 0301 	orr.w	r3, r3, #1
 8004f0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f0e:	4b8c      	ldr	r3, [pc, #560]	; (8005140 <HCSR04_Init+0x29c>)
 8004f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f12:	f003 0301 	and.w	r3, r3, #1
 8004f16:	61fb      	str	r3, [r7, #28]
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	e05e      	b.n	8004fda <HCSR04_Init+0x136>
    }
    else if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOB)
 8004f1c:	79fa      	ldrb	r2, [r7, #7]
 8004f1e:	4987      	ldr	r1, [pc, #540]	; (800513c <HCSR04_Init+0x298>)
 8004f20:	4613      	mov	r3, r2
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	4413      	add	r3, r2
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	440b      	add	r3, r1
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a85      	ldr	r2, [pc, #532]	; (8005144 <HCSR04_Init+0x2a0>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d10c      	bne.n	8004f4c <HCSR04_Init+0xa8>
    {
    	__HAL_RCC_GPIOB_CLK_ENABLE();
 8004f32:	4b83      	ldr	r3, [pc, #524]	; (8005140 <HCSR04_Init+0x29c>)
 8004f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f36:	4a82      	ldr	r2, [pc, #520]	; (8005140 <HCSR04_Init+0x29c>)
 8004f38:	f043 0302 	orr.w	r3, r3, #2
 8004f3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f3e:	4b80      	ldr	r3, [pc, #512]	; (8005140 <HCSR04_Init+0x29c>)
 8004f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f42:	f003 0302 	and.w	r3, r3, #2
 8004f46:	61bb      	str	r3, [r7, #24]
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	e046      	b.n	8004fda <HCSR04_Init+0x136>
    }
    else if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOC)
 8004f4c:	79fa      	ldrb	r2, [r7, #7]
 8004f4e:	497b      	ldr	r1, [pc, #492]	; (800513c <HCSR04_Init+0x298>)
 8004f50:	4613      	mov	r3, r2
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	4413      	add	r3, r2
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	440b      	add	r3, r1
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a7a      	ldr	r2, [pc, #488]	; (8005148 <HCSR04_Init+0x2a4>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d10c      	bne.n	8004f7c <HCSR04_Init+0xd8>
    {
        __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f62:	4b77      	ldr	r3, [pc, #476]	; (8005140 <HCSR04_Init+0x29c>)
 8004f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f66:	4a76      	ldr	r2, [pc, #472]	; (8005140 <HCSR04_Init+0x29c>)
 8004f68:	f043 0304 	orr.w	r3, r3, #4
 8004f6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f6e:	4b74      	ldr	r3, [pc, #464]	; (8005140 <HCSR04_Init+0x29c>)
 8004f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f72:	f003 0304 	and.w	r3, r3, #4
 8004f76:	617b      	str	r3, [r7, #20]
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	e02e      	b.n	8004fda <HCSR04_Init+0x136>
    }
    else if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOD)
 8004f7c:	79fa      	ldrb	r2, [r7, #7]
 8004f7e:	496f      	ldr	r1, [pc, #444]	; (800513c <HCSR04_Init+0x298>)
 8004f80:	4613      	mov	r3, r2
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	4413      	add	r3, r2
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	440b      	add	r3, r1
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a6f      	ldr	r2, [pc, #444]	; (800514c <HCSR04_Init+0x2a8>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d10c      	bne.n	8004fac <HCSR04_Init+0x108>
    {
        __HAL_RCC_GPIOD_CLK_ENABLE();
 8004f92:	4b6b      	ldr	r3, [pc, #428]	; (8005140 <HCSR04_Init+0x29c>)
 8004f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f96:	4a6a      	ldr	r2, [pc, #424]	; (8005140 <HCSR04_Init+0x29c>)
 8004f98:	f043 0308 	orr.w	r3, r3, #8
 8004f9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f9e:	4b68      	ldr	r3, [pc, #416]	; (8005140 <HCSR04_Init+0x29c>)
 8004fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fa2:	f003 0308 	and.w	r3, r3, #8
 8004fa6:	613b      	str	r3, [r7, #16]
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	e016      	b.n	8004fda <HCSR04_Init+0x136>
    }
    else if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOE)
 8004fac:	79fa      	ldrb	r2, [r7, #7]
 8004fae:	4963      	ldr	r1, [pc, #396]	; (800513c <HCSR04_Init+0x298>)
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	4413      	add	r3, r2
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	440b      	add	r3, r1
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a64      	ldr	r2, [pc, #400]	; (8005150 <HCSR04_Init+0x2ac>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d10b      	bne.n	8004fda <HCSR04_Init+0x136>
    {
        __HAL_RCC_GPIOE_CLK_ENABLE();
 8004fc2:	4b5f      	ldr	r3, [pc, #380]	; (8005140 <HCSR04_Init+0x29c>)
 8004fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fc6:	4a5e      	ldr	r2, [pc, #376]	; (8005140 <HCSR04_Init+0x29c>)
 8004fc8:	f043 0310 	orr.w	r3, r3, #16
 8004fcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004fce:	4b5c      	ldr	r3, [pc, #368]	; (8005140 <HCSR04_Init+0x29c>)
 8004fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fd2:	f003 0310 	and.w	r3, r3, #16
 8004fd6:	60fb      	str	r3, [r7, #12]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
    }
    TRIG_GPIO_InitStruct.Pin = HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_PIN;
 8004fda:	79fa      	ldrb	r2, [r7, #7]
 8004fdc:	4957      	ldr	r1, [pc, #348]	; (800513c <HCSR04_Init+0x298>)
 8004fde:	4613      	mov	r3, r2
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	4413      	add	r3, r2
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	440b      	add	r3, r1
 8004fe8:	3304      	adds	r3, #4
 8004fea:	881b      	ldrh	r3, [r3, #0]
 8004fec:	64fb      	str	r3, [r7, #76]	; 0x4c
    TRIG_GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	653b      	str	r3, [r7, #80]	; 0x50
    TRIG_GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	657b      	str	r3, [r7, #84]	; 0x54
    TRIG_GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	65bb      	str	r3, [r7, #88]	; 0x58
	HAL_GPIO_Init(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO, &TRIG_GPIO_InitStruct);
 8004ffa:	79fa      	ldrb	r2, [r7, #7]
 8004ffc:	494f      	ldr	r1, [pc, #316]	; (800513c <HCSR04_Init+0x298>)
 8004ffe:	4613      	mov	r3, r2
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	4413      	add	r3, r2
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	440b      	add	r3, r1
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800500e:	4611      	mov	r1, r2
 8005010:	4618      	mov	r0, r3
 8005012:	f7fc fc75 	bl	8001900 <HAL_GPIO_Init>

	/*--------[ Initialize The HCSR04 Static Global Info ]-------*/

	gs_HCSR04_info[au8_HCSR04_Instance].TMR_PSC = HCSR04_CfgParam[au8_HCSR04_Instance].TIM_Instance->PSC;
 8005016:	79fa      	ldrb	r2, [r7, #7]
 8005018:	4948      	ldr	r1, [pc, #288]	; (800513c <HCSR04_Init+0x298>)
 800501a:	4613      	mov	r3, r2
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	4413      	add	r3, r2
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	440b      	add	r3, r1
 8005024:	3308      	adds	r3, #8
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	79fa      	ldrb	r2, [r7, #7]
 800502a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800502c:	4849      	ldr	r0, [pc, #292]	; (8005154 <HCSR04_Init+0x2b0>)
 800502e:	4613      	mov	r3, r2
 8005030:	00db      	lsls	r3, r3, #3
 8005032:	4413      	add	r3, r2
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	4403      	add	r3, r0
 8005038:	3304      	adds	r3, #4
 800503a:	6019      	str	r1, [r3, #0]
	gs_HCSR04_info[au8_HCSR04_Instance].TMR_ARR = HCSR04_CfgParam[au8_HCSR04_Instance].TIM_Instance->ARR;
 800503c:	79fa      	ldrb	r2, [r7, #7]
 800503e:	493f      	ldr	r1, [pc, #252]	; (800513c <HCSR04_Init+0x298>)
 8005040:	4613      	mov	r3, r2
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	4413      	add	r3, r2
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	440b      	add	r3, r1
 800504a:	3308      	adds	r3, #8
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	79fa      	ldrb	r2, [r7, #7]
 8005050:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005052:	4840      	ldr	r0, [pc, #256]	; (8005154 <HCSR04_Init+0x2b0>)
 8005054:	4613      	mov	r3, r2
 8005056:	00db      	lsls	r3, r3, #3
 8005058:	4413      	add	r3, r2
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	4403      	add	r3, r0
 800505e:	3308      	adds	r3, #8
 8005060:	6019      	str	r1, [r3, #0]
	gs_HCSR04_info[au8_HCSR04_Instance].TMR_OVC = 0;
 8005062:	79fa      	ldrb	r2, [r7, #7]
 8005064:	493b      	ldr	r1, [pc, #236]	; (8005154 <HCSR04_Init+0x2b0>)
 8005066:	4613      	mov	r3, r2
 8005068:	00db      	lsls	r3, r3, #3
 800506a:	4413      	add	r3, r2
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	440b      	add	r3, r1
 8005070:	3302      	adds	r3, #2
 8005072:	2200      	movs	r2, #0
 8005074:	801a      	strh	r2, [r3, #0]
		gs_HCSR04_info[au8_HCSR04_Instance].HTIM = TMR_Handle;
 8005076:	79fa      	ldrb	r2, [r7, #7]
 8005078:	4936      	ldr	r1, [pc, #216]	; (8005154 <HCSR04_Init+0x2b0>)
 800507a:	4613      	mov	r3, r2
 800507c:	00db      	lsls	r3, r3, #3
 800507e:	4413      	add	r3, r2
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	440b      	add	r3, r1
 8005084:	331c      	adds	r3, #28
 8005086:	683a      	ldr	r2, [r7, #0]
 8005088:	601a      	str	r2, [r3, #0]
	if(gs_HCSR04_info[au8_HCSR04_Instance].TMR_ARR == 0)
 800508a:	79fa      	ldrb	r2, [r7, #7]
 800508c:	4931      	ldr	r1, [pc, #196]	; (8005154 <HCSR04_Init+0x2b0>)
 800508e:	4613      	mov	r3, r2
 8005090:	00db      	lsls	r3, r3, #3
 8005092:	4413      	add	r3, r2
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	440b      	add	r3, r1
 8005098:	3308      	adds	r3, #8
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d10a      	bne.n	80050b6 <HCSR04_Init+0x212>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].TMR_ARR = 65535;
 80050a0:	79fa      	ldrb	r2, [r7, #7]
 80050a2:	492c      	ldr	r1, [pc, #176]	; (8005154 <HCSR04_Init+0x2b0>)
 80050a4:	4613      	mov	r3, r2
 80050a6:	00db      	lsls	r3, r3, #3
 80050a8:	4413      	add	r3, r2
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	440b      	add	r3, r1
 80050ae:	3308      	adds	r3, #8
 80050b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80050b4:	601a      	str	r2, [r3, #0]
	}
	if(HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH == TIM_CHANNEL_1)
 80050b6:	79fa      	ldrb	r2, [r7, #7]
 80050b8:	4920      	ldr	r1, [pc, #128]	; (800513c <HCSR04_Init+0x298>)
 80050ba:	4613      	mov	r3, r2
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	4413      	add	r3, r2
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	440b      	add	r3, r1
 80050c4:	330c      	adds	r3, #12
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d10a      	bne.n	80050e2 <HCSR04_Init+0x23e>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_1;
 80050cc:	79fa      	ldrb	r2, [r7, #7]
 80050ce:	4921      	ldr	r1, [pc, #132]	; (8005154 <HCSR04_Init+0x2b0>)
 80050d0:	4613      	mov	r3, r2
 80050d2:	00db      	lsls	r3, r3, #3
 80050d4:	4413      	add	r3, r2
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	440b      	add	r3, r1
 80050da:	3320      	adds	r3, #32
 80050dc:	2201      	movs	r2, #1
 80050de:	701a      	strb	r2, [r3, #0]
 80050e0:	e04f      	b.n	8005182 <HCSR04_Init+0x2de>
	}
	else if(HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH == TIM_CHANNEL_2)
 80050e2:	79fa      	ldrb	r2, [r7, #7]
 80050e4:	4915      	ldr	r1, [pc, #84]	; (800513c <HCSR04_Init+0x298>)
 80050e6:	4613      	mov	r3, r2
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	4413      	add	r3, r2
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	440b      	add	r3, r1
 80050f0:	330c      	adds	r3, #12
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	2b04      	cmp	r3, #4
 80050f6:	d10a      	bne.n	800510e <HCSR04_Init+0x26a>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_2;
 80050f8:	79fa      	ldrb	r2, [r7, #7]
 80050fa:	4916      	ldr	r1, [pc, #88]	; (8005154 <HCSR04_Init+0x2b0>)
 80050fc:	4613      	mov	r3, r2
 80050fe:	00db      	lsls	r3, r3, #3
 8005100:	4413      	add	r3, r2
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	440b      	add	r3, r1
 8005106:	3320      	adds	r3, #32
 8005108:	2202      	movs	r2, #2
 800510a:	701a      	strb	r2, [r3, #0]
 800510c:	e039      	b.n	8005182 <HCSR04_Init+0x2de>
	}
	else if(HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH == TIM_CHANNEL_3)
 800510e:	79fa      	ldrb	r2, [r7, #7]
 8005110:	490a      	ldr	r1, [pc, #40]	; (800513c <HCSR04_Init+0x298>)
 8005112:	4613      	mov	r3, r2
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	4413      	add	r3, r2
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	440b      	add	r3, r1
 800511c:	330c      	adds	r3, #12
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2b08      	cmp	r3, #8
 8005122:	d119      	bne.n	8005158 <HCSR04_Init+0x2b4>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_3;
 8005124:	79fa      	ldrb	r2, [r7, #7]
 8005126:	490b      	ldr	r1, [pc, #44]	; (8005154 <HCSR04_Init+0x2b0>)
 8005128:	4613      	mov	r3, r2
 800512a:	00db      	lsls	r3, r3, #3
 800512c:	4413      	add	r3, r2
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	440b      	add	r3, r1
 8005132:	3320      	adds	r3, #32
 8005134:	2204      	movs	r2, #4
 8005136:	701a      	strb	r2, [r3, #0]
 8005138:	e023      	b.n	8005182 <HCSR04_Init+0x2de>
 800513a:	bf00      	nop
 800513c:	080085e8 	.word	0x080085e8
 8005140:	40021000 	.word	0x40021000
 8005144:	48000400 	.word	0x48000400
 8005148:	48000800 	.word	0x48000800
 800514c:	48000c00 	.word	0x48000c00
 8005150:	48001000 	.word	0x48001000
 8005154:	200002ec 	.word	0x200002ec
	}
	else if(HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH == TIM_CHANNEL_4)
 8005158:	79fa      	ldrb	r2, [r7, #7]
 800515a:	4941      	ldr	r1, [pc, #260]	; (8005260 <HCSR04_Init+0x3bc>)
 800515c:	4613      	mov	r3, r2
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	4413      	add	r3, r2
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	440b      	add	r3, r1
 8005166:	330c      	adds	r3, #12
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	2b0c      	cmp	r3, #12
 800516c:	d109      	bne.n	8005182 <HCSR04_Init+0x2de>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_4;
 800516e:	79fa      	ldrb	r2, [r7, #7]
 8005170:	493c      	ldr	r1, [pc, #240]	; (8005264 <HCSR04_Init+0x3c0>)
 8005172:	4613      	mov	r3, r2
 8005174:	00db      	lsls	r3, r3, #3
 8005176:	4413      	add	r3, r2
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	440b      	add	r3, r1
 800517c:	3320      	adds	r3, #32
 800517e:	2208      	movs	r2, #8
 8005180:	701a      	strb	r2, [r3, #0]
	}

	/*--------[ Configure The HCSR04 IC Timer Channel ]-------*/

	TMR_Handle->Instance = HCSR04_CfgParam[au8_HCSR04_Instance].TIM_Instance;
 8005182:	79fa      	ldrb	r2, [r7, #7]
 8005184:	4936      	ldr	r1, [pc, #216]	; (8005260 <HCSR04_Init+0x3bc>)
 8005186:	4613      	mov	r3, r2
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	4413      	add	r3, r2
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	440b      	add	r3, r1
 8005190:	3308      	adds	r3, #8
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	601a      	str	r2, [r3, #0]
	TMR_Handle->Init.Prescaler = gs_HCSR04_info[au8_HCSR04_Instance].TMR_PSC;
 8005198:	79fa      	ldrb	r2, [r7, #7]
 800519a:	4932      	ldr	r1, [pc, #200]	; (8005264 <HCSR04_Init+0x3c0>)
 800519c:	4613      	mov	r3, r2
 800519e:	00db      	lsls	r3, r3, #3
 80051a0:	4413      	add	r3, r2
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	440b      	add	r3, r1
 80051a6:	3304      	adds	r3, #4
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	605a      	str	r2, [r3, #4]
	TMR_Handle->Init.CounterMode = TIM_COUNTERMODE_UP;
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	2200      	movs	r2, #0
 80051b2:	609a      	str	r2, [r3, #8]
	TMR_Handle->Init.Period = gs_HCSR04_info[au8_HCSR04_Instance].TMR_ARR;
 80051b4:	79fa      	ldrb	r2, [r7, #7]
 80051b6:	492b      	ldr	r1, [pc, #172]	; (8005264 <HCSR04_Init+0x3c0>)
 80051b8:	4613      	mov	r3, r2
 80051ba:	00db      	lsls	r3, r3, #3
 80051bc:	4413      	add	r3, r2
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	440b      	add	r3, r1
 80051c2:	3308      	adds	r3, #8
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	60da      	str	r2, [r3, #12]
	TMR_Handle->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	2200      	movs	r2, #0
 80051ce:	611a      	str	r2, [r3, #16]
	TMR_Handle->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	2280      	movs	r2, #128	; 0x80
 80051d4:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(TMR_Handle);
 80051d6:	6838      	ldr	r0, [r7, #0]
 80051d8:	f7fe f874 	bl	80032c4 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80051dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051e0:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_TIM_ConfigClockSource(TMR_Handle, &sClockSourceConfig);
 80051e2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80051e6:	4619      	mov	r1, r3
 80051e8:	6838      	ldr	r0, [r7, #0]
 80051ea:	f7fe fc9a 	bl	8003b22 <HAL_TIM_ConfigClockSource>
	HAL_TIM_IC_Init(TMR_Handle);
 80051ee:	6838      	ldr	r0, [r7, #0]
 80051f0:	f7fe f93a 	bl	8003468 <HAL_TIM_IC_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80051f4:	2300      	movs	r3, #0
 80051f6:	633b      	str	r3, [r7, #48]	; 0x30
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80051f8:	2300      	movs	r3, #0
 80051fa:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_TIMEx_MasterConfigSynchronization(TMR_Handle, &sMasterConfig);
 80051fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005200:	4619      	mov	r1, r3
 8005202:	6838      	ldr	r0, [r7, #0]
 8005204:	f7ff f836 	bl	8004274 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8005208:	2300      	movs	r3, #0
 800520a:	623b      	str	r3, [r7, #32]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800520c:	2301      	movs	r3, #1
 800520e:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8005210:	2300      	movs	r3, #0
 8005212:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigIC.ICFilter = 0;
 8005214:	2300      	movs	r3, #0
 8005216:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_TIM_IC_ConfigChannel(TMR_Handle, &sConfigIC, HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH);
 8005218:	79fa      	ldrb	r2, [r7, #7]
 800521a:	4911      	ldr	r1, [pc, #68]	; (8005260 <HCSR04_Init+0x3bc>)
 800521c:	4613      	mov	r3, r2
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	4413      	add	r3, r2
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	440b      	add	r3, r1
 8005226:	330c      	adds	r3, #12
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	f107 0320 	add.w	r3, r7, #32
 800522e:	4619      	mov	r1, r3
 8005230:	6838      	ldr	r0, [r7, #0]
 8005232:	f7fe fbda 	bl	80039ea <HAL_TIM_IC_ConfigChannel>

	/*--------[ Start The ICU Channel ]-------*/

	HAL_TIM_Base_Start_IT(TMR_Handle);
 8005236:	6838      	ldr	r0, [r7, #0]
 8005238:	f7fe f8a6 	bl	8003388 <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(TMR_Handle, HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH);
 800523c:	79fa      	ldrb	r2, [r7, #7]
 800523e:	4908      	ldr	r1, [pc, #32]	; (8005260 <HCSR04_Init+0x3bc>)
 8005240:	4613      	mov	r3, r2
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	4413      	add	r3, r2
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	440b      	add	r3, r1
 800524a:	330c      	adds	r3, #12
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4619      	mov	r1, r3
 8005250:	6838      	ldr	r0, [r7, #0]
 8005252:	f7fe f961 	bl	8003518 <HAL_TIM_IC_Start_IT>
}
 8005256:	bf00      	nop
 8005258:	3760      	adds	r7, #96	; 0x60
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	080085e8 	.word	0x080085e8
 8005264:	200002ec 	.word	0x200002ec

08005268 <HCSR04_TMR_OVF_ISR>:


void HCSR04_TMR_OVF_ISR(TIM_HandleTypeDef* htim)
{
 8005268:	b480      	push	{r7}
 800526a:	b085      	sub	sp, #20
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8005270:	2300      	movs	r3, #0
 8005272:	73fb      	strb	r3, [r7, #15]
	for(i=0; i<HCSR04_UNITS; i++)
 8005274:	2300      	movs	r3, #0
 8005276:	73fb      	strb	r3, [r7, #15]
 8005278:	e023      	b.n	80052c2 <HCSR04_TMR_OVF_ISR+0x5a>
	{
		if(htim->Instance == HCSR04_CfgParam[i].TIM_Instance)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6819      	ldr	r1, [r3, #0]
 800527e:	7bfa      	ldrb	r2, [r7, #15]
 8005280:	4815      	ldr	r0, [pc, #84]	; (80052d8 <HCSR04_TMR_OVF_ISR+0x70>)
 8005282:	4613      	mov	r3, r2
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	4413      	add	r3, r2
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	4403      	add	r3, r0
 800528c:	3308      	adds	r3, #8
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4299      	cmp	r1, r3
 8005292:	d113      	bne.n	80052bc <HCSR04_TMR_OVF_ISR+0x54>
		{
			gs_HCSR04_info[i].TMR_OVC++;
 8005294:	7bfa      	ldrb	r2, [r7, #15]
 8005296:	4911      	ldr	r1, [pc, #68]	; (80052dc <HCSR04_TMR_OVF_ISR+0x74>)
 8005298:	4613      	mov	r3, r2
 800529a:	00db      	lsls	r3, r3, #3
 800529c:	4413      	add	r3, r2
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	440b      	add	r3, r1
 80052a2:	3302      	adds	r3, #2
 80052a4:	881b      	ldrh	r3, [r3, #0]
 80052a6:	3301      	adds	r3, #1
 80052a8:	b298      	uxth	r0, r3
 80052aa:	490c      	ldr	r1, [pc, #48]	; (80052dc <HCSR04_TMR_OVF_ISR+0x74>)
 80052ac:	4613      	mov	r3, r2
 80052ae:	00db      	lsls	r3, r3, #3
 80052b0:	4413      	add	r3, r2
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	440b      	add	r3, r1
 80052b6:	3302      	adds	r3, #2
 80052b8:	4602      	mov	r2, r0
 80052ba:	801a      	strh	r2, [r3, #0]
	for(i=0; i<HCSR04_UNITS; i++)
 80052bc:	7bfb      	ldrb	r3, [r7, #15]
 80052be:	3301      	adds	r3, #1
 80052c0:	73fb      	strb	r3, [r7, #15]
 80052c2:	7bfb      	ldrb	r3, [r7, #15]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d0d8      	beq.n	800527a <HCSR04_TMR_OVF_ISR+0x12>
		}
	}
}
 80052c8:	bf00      	nop
 80052ca:	bf00      	nop
 80052cc:	3714      	adds	r7, #20
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr
 80052d6:	bf00      	nop
 80052d8:	080085e8 	.word	0x080085e8
 80052dc:	200002ec 	.word	0x200002ec

080052e0 <HCSR04_TMR_IC_ISR>:


void HCSR04_TMR_IC_ISR(TIM_HandleTypeDef* htim)
{
 80052e0:	b5b0      	push	{r4, r5, r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 80052e8:	2300      	movs	r3, #0
 80052ea:	73fb      	strb	r3, [r7, #15]
	uint32_t PS = 0;
 80052ec:	2300      	movs	r3, #0
 80052ee:	60bb      	str	r3, [r7, #8]
	for(i=0; i<HCSR04_UNITS; i++)
 80052f0:	2300      	movs	r3, #0
 80052f2:	73fb      	strb	r3, [r7, #15]
 80052f4:	e22a      	b.n	800574c <HCSR04_TMR_IC_ISR+0x46c>
	{
		if((htim->Instance == HCSR04_CfgParam[i].TIM_Instance) && (htim->Channel == gs_HCSR04_info[i].ACTIV_CH))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6819      	ldr	r1, [r3, #0]
 80052fa:	7bfa      	ldrb	r2, [r7, #15]
 80052fc:	486b      	ldr	r0, [pc, #428]	; (80054ac <HCSR04_TMR_IC_ISR+0x1cc>)
 80052fe:	4613      	mov	r3, r2
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	4413      	add	r3, r2
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	4403      	add	r3, r0
 8005308:	3308      	adds	r3, #8
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4299      	cmp	r1, r3
 800530e:	f040 821a 	bne.w	8005746 <HCSR04_TMR_IC_ISR+0x466>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	7f19      	ldrb	r1, [r3, #28]
 8005316:	7bfa      	ldrb	r2, [r7, #15]
 8005318:	4865      	ldr	r0, [pc, #404]	; (80054b0 <HCSR04_TMR_IC_ISR+0x1d0>)
 800531a:	4613      	mov	r3, r2
 800531c:	00db      	lsls	r3, r3, #3
 800531e:	4413      	add	r3, r2
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	4403      	add	r3, r0
 8005324:	3320      	adds	r3, #32
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	4299      	cmp	r1, r3
 800532a:	f040 820c 	bne.w	8005746 <HCSR04_TMR_IC_ISR+0x466>
		{
			if (gs_HCSR04_info[i].EDGE_STATE == 0)
 800532e:	7bfa      	ldrb	r2, [r7, #15]
 8005330:	495f      	ldr	r1, [pc, #380]	; (80054b0 <HCSR04_TMR_IC_ISR+0x1d0>)
 8005332:	4613      	mov	r3, r2
 8005334:	00db      	lsls	r3, r3, #3
 8005336:	4413      	add	r3, r2
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	440b      	add	r3, r1
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	2b00      	cmp	r3, #0
 8005340:	f040 80b8 	bne.w	80054b4 <HCSR04_TMR_IC_ISR+0x1d4>
			{
				// Capture T1 & Reverse The ICU Edge Polarity
				gs_HCSR04_info[i].T1 = HAL_TIM_ReadCapturedValue(htim, HCSR04_CfgParam[i].IC_TIM_CH);
 8005344:	7bfa      	ldrb	r2, [r7, #15]
 8005346:	4959      	ldr	r1, [pc, #356]	; (80054ac <HCSR04_TMR_IC_ISR+0x1cc>)
 8005348:	4613      	mov	r3, r2
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	4413      	add	r3, r2
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	440b      	add	r3, r1
 8005352:	330c      	adds	r3, #12
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	7bfc      	ldrb	r4, [r7, #15]
 8005358:	4619      	mov	r1, r3
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f7fe fcaa 	bl	8003cb4 <HAL_TIM_ReadCapturedValue>
 8005360:	4602      	mov	r2, r0
 8005362:	4953      	ldr	r1, [pc, #332]	; (80054b0 <HCSR04_TMR_IC_ISR+0x1d0>)
 8005364:	4623      	mov	r3, r4
 8005366:	00db      	lsls	r3, r3, #3
 8005368:	4423      	add	r3, r4
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	440b      	add	r3, r1
 800536e:	330c      	adds	r3, #12
 8005370:	601a      	str	r2, [r3, #0]
				gs_HCSR04_info[i].EDGE_STATE = 1;
 8005372:	7bfa      	ldrb	r2, [r7, #15]
 8005374:	494e      	ldr	r1, [pc, #312]	; (80054b0 <HCSR04_TMR_IC_ISR+0x1d0>)
 8005376:	4613      	mov	r3, r2
 8005378:	00db      	lsls	r3, r3, #3
 800537a:	4413      	add	r3, r2
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	440b      	add	r3, r1
 8005380:	2201      	movs	r2, #1
 8005382:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, HCSR04_CfgParam[i].IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_FALLING);
 8005384:	7bfa      	ldrb	r2, [r7, #15]
 8005386:	4949      	ldr	r1, [pc, #292]	; (80054ac <HCSR04_TMR_IC_ISR+0x1cc>)
 8005388:	4613      	mov	r3, r2
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	4413      	add	r3, r2
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	440b      	add	r3, r1
 8005392:	330c      	adds	r3, #12
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d108      	bne.n	80053ac <HCSR04_TMR_IC_ISR+0xcc>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	6a1a      	ldr	r2, [r3, #32]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f022 020a 	bic.w	r2, r2, #10
 80053a8:	621a      	str	r2, [r3, #32]
 80053aa:	e02f      	b.n	800540c <HCSR04_TMR_IC_ISR+0x12c>
 80053ac:	7bfa      	ldrb	r2, [r7, #15]
 80053ae:	493f      	ldr	r1, [pc, #252]	; (80054ac <HCSR04_TMR_IC_ISR+0x1cc>)
 80053b0:	4613      	mov	r3, r2
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	4413      	add	r3, r2
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	440b      	add	r3, r1
 80053ba:	330c      	adds	r3, #12
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	2b04      	cmp	r3, #4
 80053c0:	d108      	bne.n	80053d4 <HCSR04_TMR_IC_ISR+0xf4>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	6a1b      	ldr	r3, [r3, #32]
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	6812      	ldr	r2, [r2, #0]
 80053cc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80053d0:	6213      	str	r3, [r2, #32]
 80053d2:	e01b      	b.n	800540c <HCSR04_TMR_IC_ISR+0x12c>
 80053d4:	7bfa      	ldrb	r2, [r7, #15]
 80053d6:	4935      	ldr	r1, [pc, #212]	; (80054ac <HCSR04_TMR_IC_ISR+0x1cc>)
 80053d8:	4613      	mov	r3, r2
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	4413      	add	r3, r2
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	440b      	add	r3, r1
 80053e2:	330c      	adds	r3, #12
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2b08      	cmp	r3, #8
 80053e8:	d108      	bne.n	80053fc <HCSR04_TMR_IC_ISR+0x11c>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	6a1b      	ldr	r3, [r3, #32]
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	6812      	ldr	r2, [r2, #0]
 80053f4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80053f8:	6213      	str	r3, [r2, #32]
 80053fa:	e007      	b.n	800540c <HCSR04_TMR_IC_ISR+0x12c>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	6a1b      	ldr	r3, [r3, #32]
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	6812      	ldr	r2, [r2, #0]
 8005406:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800540a:	6213      	str	r3, [r2, #32]
 800540c:	7bfa      	ldrb	r2, [r7, #15]
 800540e:	4927      	ldr	r1, [pc, #156]	; (80054ac <HCSR04_TMR_IC_ISR+0x1cc>)
 8005410:	4613      	mov	r3, r2
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	4413      	add	r3, r2
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	440b      	add	r3, r1
 800541a:	330c      	adds	r3, #12
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d108      	bne.n	8005434 <HCSR04_TMR_IC_ISR+0x154>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	6a1a      	ldr	r2, [r3, #32]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f042 0202 	orr.w	r2, r2, #2
 8005430:	621a      	str	r2, [r3, #32]
 8005432:	e02f      	b.n	8005494 <HCSR04_TMR_IC_ISR+0x1b4>
 8005434:	7bfa      	ldrb	r2, [r7, #15]
 8005436:	491d      	ldr	r1, [pc, #116]	; (80054ac <HCSR04_TMR_IC_ISR+0x1cc>)
 8005438:	4613      	mov	r3, r2
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	4413      	add	r3, r2
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	440b      	add	r3, r1
 8005442:	330c      	adds	r3, #12
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	2b04      	cmp	r3, #4
 8005448:	d108      	bne.n	800545c <HCSR04_TMR_IC_ISR+0x17c>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	6a1b      	ldr	r3, [r3, #32]
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	6812      	ldr	r2, [r2, #0]
 8005454:	f043 0320 	orr.w	r3, r3, #32
 8005458:	6213      	str	r3, [r2, #32]
 800545a:	e01b      	b.n	8005494 <HCSR04_TMR_IC_ISR+0x1b4>
 800545c:	7bfa      	ldrb	r2, [r7, #15]
 800545e:	4913      	ldr	r1, [pc, #76]	; (80054ac <HCSR04_TMR_IC_ISR+0x1cc>)
 8005460:	4613      	mov	r3, r2
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	4413      	add	r3, r2
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	440b      	add	r3, r1
 800546a:	330c      	adds	r3, #12
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	2b08      	cmp	r3, #8
 8005470:	d108      	bne.n	8005484 <HCSR04_TMR_IC_ISR+0x1a4>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	6a1b      	ldr	r3, [r3, #32]
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	6812      	ldr	r2, [r2, #0]
 800547c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005480:	6213      	str	r3, [r2, #32]
 8005482:	e007      	b.n	8005494 <HCSR04_TMR_IC_ISR+0x1b4>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	6a1b      	ldr	r3, [r3, #32]
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	6812      	ldr	r2, [r2, #0]
 800548e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005492:	6213      	str	r3, [r2, #32]
				gs_HCSR04_info[i].TMR_OVC = 0;
 8005494:	7bfa      	ldrb	r2, [r7, #15]
 8005496:	4906      	ldr	r1, [pc, #24]	; (80054b0 <HCSR04_TMR_IC_ISR+0x1d0>)
 8005498:	4613      	mov	r3, r2
 800549a:	00db      	lsls	r3, r3, #3
 800549c:	4413      	add	r3, r2
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	440b      	add	r3, r1
 80054a2:	3302      	adds	r3, #2
 80054a4:	2200      	movs	r2, #0
 80054a6:	801a      	strh	r2, [r3, #0]
 80054a8:	e14d      	b.n	8005746 <HCSR04_TMR_IC_ISR+0x466>
 80054aa:	bf00      	nop
 80054ac:	080085e8 	.word	0x080085e8
 80054b0:	200002ec 	.word	0x200002ec
			}
			else if (gs_HCSR04_info[i].EDGE_STATE == 1)
 80054b4:	7bfa      	ldrb	r2, [r7, #15]
 80054b6:	49ac      	ldr	r1, [pc, #688]	; (8005768 <HCSR04_TMR_IC_ISR+0x488>)
 80054b8:	4613      	mov	r3, r2
 80054ba:	00db      	lsls	r3, r3, #3
 80054bc:	4413      	add	r3, r2
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	440b      	add	r3, r1
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	f040 813e 	bne.w	8005746 <HCSR04_TMR_IC_ISR+0x466>
			{
				// Read The Current ARR & Prescaler Values For The Timer
				PS = HCSR04_CfgParam[i].TIM_Instance->PSC;
 80054ca:	7bfa      	ldrb	r2, [r7, #15]
 80054cc:	49a7      	ldr	r1, [pc, #668]	; (800576c <HCSR04_TMR_IC_ISR+0x48c>)
 80054ce:	4613      	mov	r3, r2
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	4413      	add	r3, r2
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	440b      	add	r3, r1
 80054d8:	3308      	adds	r3, #8
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054de:	60bb      	str	r3, [r7, #8]
				gs_HCSR04_info[i].TMR_ARR = HCSR04_CfgParam[i].TIM_Instance->ARR;
 80054e0:	7bfa      	ldrb	r2, [r7, #15]
 80054e2:	49a2      	ldr	r1, [pc, #648]	; (800576c <HCSR04_TMR_IC_ISR+0x48c>)
 80054e4:	4613      	mov	r3, r2
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	4413      	add	r3, r2
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	440b      	add	r3, r1
 80054ee:	3308      	adds	r3, #8
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	7bfa      	ldrb	r2, [r7, #15]
 80054f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80054f6:	489c      	ldr	r0, [pc, #624]	; (8005768 <HCSR04_TMR_IC_ISR+0x488>)
 80054f8:	4613      	mov	r3, r2
 80054fa:	00db      	lsls	r3, r3, #3
 80054fc:	4413      	add	r3, r2
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	4403      	add	r3, r0
 8005502:	3308      	adds	r3, #8
 8005504:	6019      	str	r1, [r3, #0]
				// Capture T2 & Calculate The Distance
				gs_HCSR04_info[i].T2 = HAL_TIM_ReadCapturedValue(htim, HCSR04_CfgParam[i].IC_TIM_CH);
 8005506:	7bfa      	ldrb	r2, [r7, #15]
 8005508:	4998      	ldr	r1, [pc, #608]	; (800576c <HCSR04_TMR_IC_ISR+0x48c>)
 800550a:	4613      	mov	r3, r2
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	4413      	add	r3, r2
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	440b      	add	r3, r1
 8005514:	330c      	adds	r3, #12
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	7bfc      	ldrb	r4, [r7, #15]
 800551a:	4619      	mov	r1, r3
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f7fe fbc9 	bl	8003cb4 <HAL_TIM_ReadCapturedValue>
 8005522:	4602      	mov	r2, r0
 8005524:	4990      	ldr	r1, [pc, #576]	; (8005768 <HCSR04_TMR_IC_ISR+0x488>)
 8005526:	4623      	mov	r3, r4
 8005528:	00db      	lsls	r3, r3, #3
 800552a:	4423      	add	r3, r4
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	440b      	add	r3, r1
 8005530:	3310      	adds	r3, #16
 8005532:	601a      	str	r2, [r3, #0]
				gs_HCSR04_info[i].T2 += (gs_HCSR04_info[i].TMR_OVC * (gs_HCSR04_info[i].TMR_ARR+1));
 8005534:	7bfa      	ldrb	r2, [r7, #15]
 8005536:	498c      	ldr	r1, [pc, #560]	; (8005768 <HCSR04_TMR_IC_ISR+0x488>)
 8005538:	4613      	mov	r3, r2
 800553a:	00db      	lsls	r3, r3, #3
 800553c:	4413      	add	r3, r2
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	440b      	add	r3, r1
 8005542:	3310      	adds	r3, #16
 8005544:	6819      	ldr	r1, [r3, #0]
 8005546:	7bfa      	ldrb	r2, [r7, #15]
 8005548:	4887      	ldr	r0, [pc, #540]	; (8005768 <HCSR04_TMR_IC_ISR+0x488>)
 800554a:	4613      	mov	r3, r2
 800554c:	00db      	lsls	r3, r3, #3
 800554e:	4413      	add	r3, r2
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	4403      	add	r3, r0
 8005554:	3302      	adds	r3, #2
 8005556:	881b      	ldrh	r3, [r3, #0]
 8005558:	461c      	mov	r4, r3
 800555a:	7bfa      	ldrb	r2, [r7, #15]
 800555c:	4882      	ldr	r0, [pc, #520]	; (8005768 <HCSR04_TMR_IC_ISR+0x488>)
 800555e:	4613      	mov	r3, r2
 8005560:	00db      	lsls	r3, r3, #3
 8005562:	4413      	add	r3, r2
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	4403      	add	r3, r0
 8005568:	3308      	adds	r3, #8
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	3301      	adds	r3, #1
 800556e:	fb04 f303 	mul.w	r3, r4, r3
 8005572:	7bfa      	ldrb	r2, [r7, #15]
 8005574:	4419      	add	r1, r3
 8005576:	487c      	ldr	r0, [pc, #496]	; (8005768 <HCSR04_TMR_IC_ISR+0x488>)
 8005578:	4613      	mov	r3, r2
 800557a:	00db      	lsls	r3, r3, #3
 800557c:	4413      	add	r3, r2
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	4403      	add	r3, r0
 8005582:	3310      	adds	r3, #16
 8005584:	6019      	str	r1, [r3, #0]
				gs_HCSR04_info[i].DIFF = gs_HCSR04_info[i].T2 - gs_HCSR04_info[i].T1;
 8005586:	7bfa      	ldrb	r2, [r7, #15]
 8005588:	4977      	ldr	r1, [pc, #476]	; (8005768 <HCSR04_TMR_IC_ISR+0x488>)
 800558a:	4613      	mov	r3, r2
 800558c:	00db      	lsls	r3, r3, #3
 800558e:	4413      	add	r3, r2
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	440b      	add	r3, r1
 8005594:	3310      	adds	r3, #16
 8005596:	6819      	ldr	r1, [r3, #0]
 8005598:	7bfa      	ldrb	r2, [r7, #15]
 800559a:	4873      	ldr	r0, [pc, #460]	; (8005768 <HCSR04_TMR_IC_ISR+0x488>)
 800559c:	4613      	mov	r3, r2
 800559e:	00db      	lsls	r3, r3, #3
 80055a0:	4413      	add	r3, r2
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	4403      	add	r3, r0
 80055a6:	330c      	adds	r3, #12
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	7bfa      	ldrb	r2, [r7, #15]
 80055ac:	1ac9      	subs	r1, r1, r3
 80055ae:	486e      	ldr	r0, [pc, #440]	; (8005768 <HCSR04_TMR_IC_ISR+0x488>)
 80055b0:	4613      	mov	r3, r2
 80055b2:	00db      	lsls	r3, r3, #3
 80055b4:	4413      	add	r3, r2
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	4403      	add	r3, r0
 80055ba:	3314      	adds	r3, #20
 80055bc:	6019      	str	r1, [r3, #0]
				// Write The Distance Value To The Global Struct & Reverse The ICU Edge
				gs_HCSR04_info[i].DISTANCE = (gs_HCSR04_info[i].DIFF * 0.017)/(HCSR04_CfgParam[i].TIM_CLK_MHz/(PS+1));
 80055be:	7bfa      	ldrb	r2, [r7, #15]
 80055c0:	4969      	ldr	r1, [pc, #420]	; (8005768 <HCSR04_TMR_IC_ISR+0x488>)
 80055c2:	4613      	mov	r3, r2
 80055c4:	00db      	lsls	r3, r3, #3
 80055c6:	4413      	add	r3, r2
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	440b      	add	r3, r1
 80055cc:	3314      	adds	r3, #20
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4618      	mov	r0, r3
 80055d2:	f7fa ff97 	bl	8000504 <__aeabi_ui2d>
 80055d6:	a362      	add	r3, pc, #392	; (adr r3, 8005760 <HCSR04_TMR_IC_ISR+0x480>)
 80055d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055dc:	f7fb f80c 	bl	80005f8 <__aeabi_dmul>
 80055e0:	4602      	mov	r2, r0
 80055e2:	460b      	mov	r3, r1
 80055e4:	4614      	mov	r4, r2
 80055e6:	461d      	mov	r5, r3
 80055e8:	7bfa      	ldrb	r2, [r7, #15]
 80055ea:	4960      	ldr	r1, [pc, #384]	; (800576c <HCSR04_TMR_IC_ISR+0x48c>)
 80055ec:	4613      	mov	r3, r2
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	4413      	add	r3, r2
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	440b      	add	r3, r1
 80055f6:	3310      	adds	r3, #16
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	3301      	adds	r3, #1
 80055fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005602:	4618      	mov	r0, r3
 8005604:	f7fa ff7e 	bl	8000504 <__aeabi_ui2d>
 8005608:	4602      	mov	r2, r0
 800560a:	460b      	mov	r3, r1
 800560c:	4620      	mov	r0, r4
 800560e:	4629      	mov	r1, r5
 8005610:	f7fb f91c 	bl	800084c <__aeabi_ddiv>
 8005614:	4602      	mov	r2, r0
 8005616:	460b      	mov	r3, r1
 8005618:	7bfc      	ldrb	r4, [r7, #15]
 800561a:	4610      	mov	r0, r2
 800561c:	4619      	mov	r1, r3
 800561e:	f7fb fac3 	bl	8000ba8 <__aeabi_d2f>
 8005622:	4602      	mov	r2, r0
 8005624:	4950      	ldr	r1, [pc, #320]	; (8005768 <HCSR04_TMR_IC_ISR+0x488>)
 8005626:	4623      	mov	r3, r4
 8005628:	00db      	lsls	r3, r3, #3
 800562a:	4423      	add	r3, r4
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	440b      	add	r3, r1
 8005630:	3318      	adds	r3, #24
 8005632:	601a      	str	r2, [r3, #0]
				gs_HCSR04_info[i].EDGE_STATE = 0;
 8005634:	7bfa      	ldrb	r2, [r7, #15]
 8005636:	494c      	ldr	r1, [pc, #304]	; (8005768 <HCSR04_TMR_IC_ISR+0x488>)
 8005638:	4613      	mov	r3, r2
 800563a:	00db      	lsls	r3, r3, #3
 800563c:	4413      	add	r3, r2
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	440b      	add	r3, r1
 8005642:	2200      	movs	r2, #0
 8005644:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, HCSR04_CfgParam[i].IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
 8005646:	7bfa      	ldrb	r2, [r7, #15]
 8005648:	4948      	ldr	r1, [pc, #288]	; (800576c <HCSR04_TMR_IC_ISR+0x48c>)
 800564a:	4613      	mov	r3, r2
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	4413      	add	r3, r2
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	440b      	add	r3, r1
 8005654:	330c      	adds	r3, #12
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d108      	bne.n	800566e <HCSR04_TMR_IC_ISR+0x38e>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	6a1a      	ldr	r2, [r3, #32]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f022 020a 	bic.w	r2, r2, #10
 800566a:	621a      	str	r2, [r3, #32]
 800566c:	e02f      	b.n	80056ce <HCSR04_TMR_IC_ISR+0x3ee>
 800566e:	7bfa      	ldrb	r2, [r7, #15]
 8005670:	493e      	ldr	r1, [pc, #248]	; (800576c <HCSR04_TMR_IC_ISR+0x48c>)
 8005672:	4613      	mov	r3, r2
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	4413      	add	r3, r2
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	440b      	add	r3, r1
 800567c:	330c      	adds	r3, #12
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2b04      	cmp	r3, #4
 8005682:	d108      	bne.n	8005696 <HCSR04_TMR_IC_ISR+0x3b6>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	6a1b      	ldr	r3, [r3, #32]
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	6812      	ldr	r2, [r2, #0]
 800568e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005692:	6213      	str	r3, [r2, #32]
 8005694:	e01b      	b.n	80056ce <HCSR04_TMR_IC_ISR+0x3ee>
 8005696:	7bfa      	ldrb	r2, [r7, #15]
 8005698:	4934      	ldr	r1, [pc, #208]	; (800576c <HCSR04_TMR_IC_ISR+0x48c>)
 800569a:	4613      	mov	r3, r2
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	4413      	add	r3, r2
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	440b      	add	r3, r1
 80056a4:	330c      	adds	r3, #12
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	2b08      	cmp	r3, #8
 80056aa:	d108      	bne.n	80056be <HCSR04_TMR_IC_ISR+0x3de>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	6a1b      	ldr	r3, [r3, #32]
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	6812      	ldr	r2, [r2, #0]
 80056b6:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80056ba:	6213      	str	r3, [r2, #32]
 80056bc:	e007      	b.n	80056ce <HCSR04_TMR_IC_ISR+0x3ee>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	6a1b      	ldr	r3, [r3, #32]
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	6812      	ldr	r2, [r2, #0]
 80056c8:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80056cc:	6213      	str	r3, [r2, #32]
 80056ce:	7bfa      	ldrb	r2, [r7, #15]
 80056d0:	4926      	ldr	r1, [pc, #152]	; (800576c <HCSR04_TMR_IC_ISR+0x48c>)
 80056d2:	4613      	mov	r3, r2
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	4413      	add	r3, r2
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	440b      	add	r3, r1
 80056dc:	330c      	adds	r3, #12
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d106      	bne.n	80056f2 <HCSR04_TMR_IC_ISR+0x412>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	6a12      	ldr	r2, [r2, #32]
 80056ee:	621a      	str	r2, [r3, #32]
 80056f0:	e029      	b.n	8005746 <HCSR04_TMR_IC_ISR+0x466>
 80056f2:	7bfa      	ldrb	r2, [r7, #15]
 80056f4:	491d      	ldr	r1, [pc, #116]	; (800576c <HCSR04_TMR_IC_ISR+0x48c>)
 80056f6:	4613      	mov	r3, r2
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	4413      	add	r3, r2
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	440b      	add	r3, r1
 8005700:	330c      	adds	r3, #12
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2b04      	cmp	r3, #4
 8005706:	d106      	bne.n	8005716 <HCSR04_TMR_IC_ISR+0x436>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	6812      	ldr	r2, [r2, #0]
 8005710:	6a1b      	ldr	r3, [r3, #32]
 8005712:	6213      	str	r3, [r2, #32]
 8005714:	e017      	b.n	8005746 <HCSR04_TMR_IC_ISR+0x466>
 8005716:	7bfa      	ldrb	r2, [r7, #15]
 8005718:	4914      	ldr	r1, [pc, #80]	; (800576c <HCSR04_TMR_IC_ISR+0x48c>)
 800571a:	4613      	mov	r3, r2
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	4413      	add	r3, r2
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	440b      	add	r3, r1
 8005724:	330c      	adds	r3, #12
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2b08      	cmp	r3, #8
 800572a:	d106      	bne.n	800573a <HCSR04_TMR_IC_ISR+0x45a>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	6812      	ldr	r2, [r2, #0]
 8005734:	6a1b      	ldr	r3, [r3, #32]
 8005736:	6213      	str	r3, [r2, #32]
 8005738:	e005      	b.n	8005746 <HCSR04_TMR_IC_ISR+0x466>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	6812      	ldr	r2, [r2, #0]
 8005742:	6a1b      	ldr	r3, [r3, #32]
 8005744:	6213      	str	r3, [r2, #32]
	for(i=0; i<HCSR04_UNITS; i++)
 8005746:	7bfb      	ldrb	r3, [r7, #15]
 8005748:	3301      	adds	r3, #1
 800574a:	73fb      	strb	r3, [r7, #15]
 800574c:	7bfb      	ldrb	r3, [r7, #15]
 800574e:	2b00      	cmp	r3, #0
 8005750:	f43f add1 	beq.w	80052f6 <HCSR04_TMR_IC_ISR+0x16>
			}
		}
	}
}
 8005754:	bf00      	nop
 8005756:	bf00      	nop
 8005758:	3710      	adds	r7, #16
 800575a:	46bd      	mov	sp, r7
 800575c:	bdb0      	pop	{r4, r5, r7, pc}
 800575e:	bf00      	nop
 8005760:	b020c49c 	.word	0xb020c49c
 8005764:	3f916872 	.word	0x3f916872
 8005768:	200002ec 	.word	0x200002ec
 800576c:	080085e8 	.word	0x080085e8

08005770 <HCSR04_Read>:

float HCSR04_Read(uint8_t au8_HCSR04_Instance)
{
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
 8005776:	4603      	mov	r3, r0
 8005778:	71fb      	strb	r3, [r7, #7]
	return gs_HCSR04_info[au8_HCSR04_Instance].DISTANCE;
 800577a:	79fa      	ldrb	r2, [r7, #7]
 800577c:	4908      	ldr	r1, [pc, #32]	; (80057a0 <HCSR04_Read+0x30>)
 800577e:	4613      	mov	r3, r2
 8005780:	00db      	lsls	r3, r3, #3
 8005782:	4413      	add	r3, r2
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	440b      	add	r3, r1
 8005788:	3318      	adds	r3, #24
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	ee07 3a90 	vmov	s15, r3
}
 8005790:	eeb0 0a67 	vmov.f32	s0, s15
 8005794:	370c      	adds	r7, #12
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr
 800579e:	bf00      	nop
 80057a0:	200002ec 	.word	0x200002ec

080057a4 <HCSR04_Trigger>:

void HCSR04_Trigger(uint8_t au8_HCSR04_Instance)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b082      	sub	sp, #8
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	4603      	mov	r3, r0
 80057ac:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO, HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_PIN, 1);
 80057ae:	79fa      	ldrb	r2, [r7, #7]
 80057b0:	4917      	ldr	r1, [pc, #92]	; (8005810 <HCSR04_Trigger+0x6c>)
 80057b2:	4613      	mov	r3, r2
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	4413      	add	r3, r2
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	440b      	add	r3, r1
 80057bc:	6818      	ldr	r0, [r3, #0]
 80057be:	79fa      	ldrb	r2, [r7, #7]
 80057c0:	4913      	ldr	r1, [pc, #76]	; (8005810 <HCSR04_Trigger+0x6c>)
 80057c2:	4613      	mov	r3, r2
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	4413      	add	r3, r2
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	440b      	add	r3, r1
 80057cc:	3304      	adds	r3, #4
 80057ce:	881b      	ldrh	r3, [r3, #0]
 80057d0:	2201      	movs	r2, #1
 80057d2:	4619      	mov	r1, r3
 80057d4:	f7fc fa3e 	bl	8001c54 <HAL_GPIO_WritePin>
	DWT_Delay_us(2);
 80057d8:	2002      	movs	r0, #2
 80057da:	f7ff fb3b 	bl	8004e54 <DWT_Delay_us>
	HAL_GPIO_WritePin(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO, HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_PIN, 0);
 80057de:	79fa      	ldrb	r2, [r7, #7]
 80057e0:	490b      	ldr	r1, [pc, #44]	; (8005810 <HCSR04_Trigger+0x6c>)
 80057e2:	4613      	mov	r3, r2
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	4413      	add	r3, r2
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	440b      	add	r3, r1
 80057ec:	6818      	ldr	r0, [r3, #0]
 80057ee:	79fa      	ldrb	r2, [r7, #7]
 80057f0:	4907      	ldr	r1, [pc, #28]	; (8005810 <HCSR04_Trigger+0x6c>)
 80057f2:	4613      	mov	r3, r2
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	4413      	add	r3, r2
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	440b      	add	r3, r1
 80057fc:	3304      	adds	r3, #4
 80057fe:	881b      	ldrh	r3, [r3, #0]
 8005800:	2200      	movs	r2, #0
 8005802:	4619      	mov	r1, r3
 8005804:	f7fc fa26 	bl	8001c54 <HAL_GPIO_WritePin>
}
 8005808:	bf00      	nop
 800580a:	3708      	adds	r7, #8
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}
 8005810:	080085e8 	.word	0x080085e8

08005814 <DWT_Delay_Init>:

#include "DWT_Delay.h"


uint32_t DWT_Delay_Init(void)
{
 8005814:	b480      	push	{r7}
 8005816:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8005818:	4b14      	ldr	r3, [pc, #80]	; (800586c <DWT_Delay_Init+0x58>)
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	4a13      	ldr	r2, [pc, #76]	; (800586c <DWT_Delay_Init+0x58>)
 800581e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005822:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8005824:	4b11      	ldr	r3, [pc, #68]	; (800586c <DWT_Delay_Init+0x58>)
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	4a10      	ldr	r2, [pc, #64]	; (800586c <DWT_Delay_Init+0x58>)
 800582a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800582e:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8005830:	4b0f      	ldr	r3, [pc, #60]	; (8005870 <DWT_Delay_Init+0x5c>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a0e      	ldr	r2, [pc, #56]	; (8005870 <DWT_Delay_Init+0x5c>)
 8005836:	f023 0301 	bic.w	r3, r3, #1
 800583a:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800583c:	4b0c      	ldr	r3, [pc, #48]	; (8005870 <DWT_Delay_Init+0x5c>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a0b      	ldr	r2, [pc, #44]	; (8005870 <DWT_Delay_Init+0x5c>)
 8005842:	f043 0301 	orr.w	r3, r3, #1
 8005846:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8005848:	4b09      	ldr	r3, [pc, #36]	; (8005870 <DWT_Delay_Init+0x5c>)
 800584a:	2200      	movs	r2, #0
 800584c:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 800584e:	bf00      	nop
    __ASM volatile ("NOP");
 8005850:	bf00      	nop
    __ASM volatile ("NOP");
 8005852:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8005854:	4b06      	ldr	r3, [pc, #24]	; (8005870 <DWT_Delay_Init+0x5c>)
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d001      	beq.n	8005860 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 800585c:	2300      	movs	r3, #0
 800585e:	e000      	b.n	8005862 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8005860:	2301      	movs	r3, #1
    }
}
 8005862:	4618      	mov	r0, r3
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr
 800586c:	e000edf0 	.word	0xe000edf0
 8005870:	e0001000 	.word	0xe0001000

08005874 <__cvt>:
 8005874:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005878:	ec55 4b10 	vmov	r4, r5, d0
 800587c:	2d00      	cmp	r5, #0
 800587e:	460e      	mov	r6, r1
 8005880:	4619      	mov	r1, r3
 8005882:	462b      	mov	r3, r5
 8005884:	bfbb      	ittet	lt
 8005886:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800588a:	461d      	movlt	r5, r3
 800588c:	2300      	movge	r3, #0
 800588e:	232d      	movlt	r3, #45	; 0x2d
 8005890:	700b      	strb	r3, [r1, #0]
 8005892:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005894:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005898:	4691      	mov	r9, r2
 800589a:	f023 0820 	bic.w	r8, r3, #32
 800589e:	bfbc      	itt	lt
 80058a0:	4622      	movlt	r2, r4
 80058a2:	4614      	movlt	r4, r2
 80058a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80058a8:	d005      	beq.n	80058b6 <__cvt+0x42>
 80058aa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80058ae:	d100      	bne.n	80058b2 <__cvt+0x3e>
 80058b0:	3601      	adds	r6, #1
 80058b2:	2102      	movs	r1, #2
 80058b4:	e000      	b.n	80058b8 <__cvt+0x44>
 80058b6:	2103      	movs	r1, #3
 80058b8:	ab03      	add	r3, sp, #12
 80058ba:	9301      	str	r3, [sp, #4]
 80058bc:	ab02      	add	r3, sp, #8
 80058be:	9300      	str	r3, [sp, #0]
 80058c0:	ec45 4b10 	vmov	d0, r4, r5
 80058c4:	4653      	mov	r3, sl
 80058c6:	4632      	mov	r2, r6
 80058c8:	f000 fe6a 	bl	80065a0 <_dtoa_r>
 80058cc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80058d0:	4607      	mov	r7, r0
 80058d2:	d102      	bne.n	80058da <__cvt+0x66>
 80058d4:	f019 0f01 	tst.w	r9, #1
 80058d8:	d022      	beq.n	8005920 <__cvt+0xac>
 80058da:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80058de:	eb07 0906 	add.w	r9, r7, r6
 80058e2:	d110      	bne.n	8005906 <__cvt+0x92>
 80058e4:	783b      	ldrb	r3, [r7, #0]
 80058e6:	2b30      	cmp	r3, #48	; 0x30
 80058e8:	d10a      	bne.n	8005900 <__cvt+0x8c>
 80058ea:	2200      	movs	r2, #0
 80058ec:	2300      	movs	r3, #0
 80058ee:	4620      	mov	r0, r4
 80058f0:	4629      	mov	r1, r5
 80058f2:	f7fb f8e9 	bl	8000ac8 <__aeabi_dcmpeq>
 80058f6:	b918      	cbnz	r0, 8005900 <__cvt+0x8c>
 80058f8:	f1c6 0601 	rsb	r6, r6, #1
 80058fc:	f8ca 6000 	str.w	r6, [sl]
 8005900:	f8da 3000 	ldr.w	r3, [sl]
 8005904:	4499      	add	r9, r3
 8005906:	2200      	movs	r2, #0
 8005908:	2300      	movs	r3, #0
 800590a:	4620      	mov	r0, r4
 800590c:	4629      	mov	r1, r5
 800590e:	f7fb f8db 	bl	8000ac8 <__aeabi_dcmpeq>
 8005912:	b108      	cbz	r0, 8005918 <__cvt+0xa4>
 8005914:	f8cd 900c 	str.w	r9, [sp, #12]
 8005918:	2230      	movs	r2, #48	; 0x30
 800591a:	9b03      	ldr	r3, [sp, #12]
 800591c:	454b      	cmp	r3, r9
 800591e:	d307      	bcc.n	8005930 <__cvt+0xbc>
 8005920:	9b03      	ldr	r3, [sp, #12]
 8005922:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005924:	1bdb      	subs	r3, r3, r7
 8005926:	4638      	mov	r0, r7
 8005928:	6013      	str	r3, [r2, #0]
 800592a:	b004      	add	sp, #16
 800592c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005930:	1c59      	adds	r1, r3, #1
 8005932:	9103      	str	r1, [sp, #12]
 8005934:	701a      	strb	r2, [r3, #0]
 8005936:	e7f0      	b.n	800591a <__cvt+0xa6>

08005938 <__exponent>:
 8005938:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800593a:	4603      	mov	r3, r0
 800593c:	2900      	cmp	r1, #0
 800593e:	bfb8      	it	lt
 8005940:	4249      	neglt	r1, r1
 8005942:	f803 2b02 	strb.w	r2, [r3], #2
 8005946:	bfb4      	ite	lt
 8005948:	222d      	movlt	r2, #45	; 0x2d
 800594a:	222b      	movge	r2, #43	; 0x2b
 800594c:	2909      	cmp	r1, #9
 800594e:	7042      	strb	r2, [r0, #1]
 8005950:	dd2a      	ble.n	80059a8 <__exponent+0x70>
 8005952:	f10d 0207 	add.w	r2, sp, #7
 8005956:	4617      	mov	r7, r2
 8005958:	260a      	movs	r6, #10
 800595a:	4694      	mov	ip, r2
 800595c:	fb91 f5f6 	sdiv	r5, r1, r6
 8005960:	fb06 1415 	mls	r4, r6, r5, r1
 8005964:	3430      	adds	r4, #48	; 0x30
 8005966:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800596a:	460c      	mov	r4, r1
 800596c:	2c63      	cmp	r4, #99	; 0x63
 800596e:	f102 32ff 	add.w	r2, r2, #4294967295
 8005972:	4629      	mov	r1, r5
 8005974:	dcf1      	bgt.n	800595a <__exponent+0x22>
 8005976:	3130      	adds	r1, #48	; 0x30
 8005978:	f1ac 0402 	sub.w	r4, ip, #2
 800597c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005980:	1c41      	adds	r1, r0, #1
 8005982:	4622      	mov	r2, r4
 8005984:	42ba      	cmp	r2, r7
 8005986:	d30a      	bcc.n	800599e <__exponent+0x66>
 8005988:	f10d 0209 	add.w	r2, sp, #9
 800598c:	eba2 020c 	sub.w	r2, r2, ip
 8005990:	42bc      	cmp	r4, r7
 8005992:	bf88      	it	hi
 8005994:	2200      	movhi	r2, #0
 8005996:	4413      	add	r3, r2
 8005998:	1a18      	subs	r0, r3, r0
 800599a:	b003      	add	sp, #12
 800599c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800599e:	f812 5b01 	ldrb.w	r5, [r2], #1
 80059a2:	f801 5f01 	strb.w	r5, [r1, #1]!
 80059a6:	e7ed      	b.n	8005984 <__exponent+0x4c>
 80059a8:	2330      	movs	r3, #48	; 0x30
 80059aa:	3130      	adds	r1, #48	; 0x30
 80059ac:	7083      	strb	r3, [r0, #2]
 80059ae:	70c1      	strb	r1, [r0, #3]
 80059b0:	1d03      	adds	r3, r0, #4
 80059b2:	e7f1      	b.n	8005998 <__exponent+0x60>

080059b4 <_printf_float>:
 80059b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059b8:	ed2d 8b02 	vpush	{d8}
 80059bc:	b08d      	sub	sp, #52	; 0x34
 80059be:	460c      	mov	r4, r1
 80059c0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80059c4:	4616      	mov	r6, r2
 80059c6:	461f      	mov	r7, r3
 80059c8:	4605      	mov	r5, r0
 80059ca:	f000 fce7 	bl	800639c <_localeconv_r>
 80059ce:	f8d0 a000 	ldr.w	sl, [r0]
 80059d2:	4650      	mov	r0, sl
 80059d4:	f7fa fc4c 	bl	8000270 <strlen>
 80059d8:	2300      	movs	r3, #0
 80059da:	930a      	str	r3, [sp, #40]	; 0x28
 80059dc:	6823      	ldr	r3, [r4, #0]
 80059de:	9305      	str	r3, [sp, #20]
 80059e0:	f8d8 3000 	ldr.w	r3, [r8]
 80059e4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80059e8:	3307      	adds	r3, #7
 80059ea:	f023 0307 	bic.w	r3, r3, #7
 80059ee:	f103 0208 	add.w	r2, r3, #8
 80059f2:	f8c8 2000 	str.w	r2, [r8]
 80059f6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80059fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80059fe:	9307      	str	r3, [sp, #28]
 8005a00:	f8cd 8018 	str.w	r8, [sp, #24]
 8005a04:	ee08 0a10 	vmov	s16, r0
 8005a08:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005a0c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a10:	4b9e      	ldr	r3, [pc, #632]	; (8005c8c <_printf_float+0x2d8>)
 8005a12:	f04f 32ff 	mov.w	r2, #4294967295
 8005a16:	f7fb f889 	bl	8000b2c <__aeabi_dcmpun>
 8005a1a:	bb88      	cbnz	r0, 8005a80 <_printf_float+0xcc>
 8005a1c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a20:	4b9a      	ldr	r3, [pc, #616]	; (8005c8c <_printf_float+0x2d8>)
 8005a22:	f04f 32ff 	mov.w	r2, #4294967295
 8005a26:	f7fb f863 	bl	8000af0 <__aeabi_dcmple>
 8005a2a:	bb48      	cbnz	r0, 8005a80 <_printf_float+0xcc>
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	2300      	movs	r3, #0
 8005a30:	4640      	mov	r0, r8
 8005a32:	4649      	mov	r1, r9
 8005a34:	f7fb f852 	bl	8000adc <__aeabi_dcmplt>
 8005a38:	b110      	cbz	r0, 8005a40 <_printf_float+0x8c>
 8005a3a:	232d      	movs	r3, #45	; 0x2d
 8005a3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a40:	4a93      	ldr	r2, [pc, #588]	; (8005c90 <_printf_float+0x2dc>)
 8005a42:	4b94      	ldr	r3, [pc, #592]	; (8005c94 <_printf_float+0x2e0>)
 8005a44:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005a48:	bf94      	ite	ls
 8005a4a:	4690      	movls	r8, r2
 8005a4c:	4698      	movhi	r8, r3
 8005a4e:	2303      	movs	r3, #3
 8005a50:	6123      	str	r3, [r4, #16]
 8005a52:	9b05      	ldr	r3, [sp, #20]
 8005a54:	f023 0304 	bic.w	r3, r3, #4
 8005a58:	6023      	str	r3, [r4, #0]
 8005a5a:	f04f 0900 	mov.w	r9, #0
 8005a5e:	9700      	str	r7, [sp, #0]
 8005a60:	4633      	mov	r3, r6
 8005a62:	aa0b      	add	r2, sp, #44	; 0x2c
 8005a64:	4621      	mov	r1, r4
 8005a66:	4628      	mov	r0, r5
 8005a68:	f000 f9da 	bl	8005e20 <_printf_common>
 8005a6c:	3001      	adds	r0, #1
 8005a6e:	f040 8090 	bne.w	8005b92 <_printf_float+0x1de>
 8005a72:	f04f 30ff 	mov.w	r0, #4294967295
 8005a76:	b00d      	add	sp, #52	; 0x34
 8005a78:	ecbd 8b02 	vpop	{d8}
 8005a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a80:	4642      	mov	r2, r8
 8005a82:	464b      	mov	r3, r9
 8005a84:	4640      	mov	r0, r8
 8005a86:	4649      	mov	r1, r9
 8005a88:	f7fb f850 	bl	8000b2c <__aeabi_dcmpun>
 8005a8c:	b140      	cbz	r0, 8005aa0 <_printf_float+0xec>
 8005a8e:	464b      	mov	r3, r9
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	bfbc      	itt	lt
 8005a94:	232d      	movlt	r3, #45	; 0x2d
 8005a96:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005a9a:	4a7f      	ldr	r2, [pc, #508]	; (8005c98 <_printf_float+0x2e4>)
 8005a9c:	4b7f      	ldr	r3, [pc, #508]	; (8005c9c <_printf_float+0x2e8>)
 8005a9e:	e7d1      	b.n	8005a44 <_printf_float+0x90>
 8005aa0:	6863      	ldr	r3, [r4, #4]
 8005aa2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005aa6:	9206      	str	r2, [sp, #24]
 8005aa8:	1c5a      	adds	r2, r3, #1
 8005aaa:	d13f      	bne.n	8005b2c <_printf_float+0x178>
 8005aac:	2306      	movs	r3, #6
 8005aae:	6063      	str	r3, [r4, #4]
 8005ab0:	9b05      	ldr	r3, [sp, #20]
 8005ab2:	6861      	ldr	r1, [r4, #4]
 8005ab4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005ab8:	2300      	movs	r3, #0
 8005aba:	9303      	str	r3, [sp, #12]
 8005abc:	ab0a      	add	r3, sp, #40	; 0x28
 8005abe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005ac2:	ab09      	add	r3, sp, #36	; 0x24
 8005ac4:	ec49 8b10 	vmov	d0, r8, r9
 8005ac8:	9300      	str	r3, [sp, #0]
 8005aca:	6022      	str	r2, [r4, #0]
 8005acc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005ad0:	4628      	mov	r0, r5
 8005ad2:	f7ff fecf 	bl	8005874 <__cvt>
 8005ad6:	9b06      	ldr	r3, [sp, #24]
 8005ad8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ada:	2b47      	cmp	r3, #71	; 0x47
 8005adc:	4680      	mov	r8, r0
 8005ade:	d108      	bne.n	8005af2 <_printf_float+0x13e>
 8005ae0:	1cc8      	adds	r0, r1, #3
 8005ae2:	db02      	blt.n	8005aea <_printf_float+0x136>
 8005ae4:	6863      	ldr	r3, [r4, #4]
 8005ae6:	4299      	cmp	r1, r3
 8005ae8:	dd41      	ble.n	8005b6e <_printf_float+0x1ba>
 8005aea:	f1ab 0302 	sub.w	r3, fp, #2
 8005aee:	fa5f fb83 	uxtb.w	fp, r3
 8005af2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005af6:	d820      	bhi.n	8005b3a <_printf_float+0x186>
 8005af8:	3901      	subs	r1, #1
 8005afa:	465a      	mov	r2, fp
 8005afc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005b00:	9109      	str	r1, [sp, #36]	; 0x24
 8005b02:	f7ff ff19 	bl	8005938 <__exponent>
 8005b06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b08:	1813      	adds	r3, r2, r0
 8005b0a:	2a01      	cmp	r2, #1
 8005b0c:	4681      	mov	r9, r0
 8005b0e:	6123      	str	r3, [r4, #16]
 8005b10:	dc02      	bgt.n	8005b18 <_printf_float+0x164>
 8005b12:	6822      	ldr	r2, [r4, #0]
 8005b14:	07d2      	lsls	r2, r2, #31
 8005b16:	d501      	bpl.n	8005b1c <_printf_float+0x168>
 8005b18:	3301      	adds	r3, #1
 8005b1a:	6123      	str	r3, [r4, #16]
 8005b1c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d09c      	beq.n	8005a5e <_printf_float+0xaa>
 8005b24:	232d      	movs	r3, #45	; 0x2d
 8005b26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b2a:	e798      	b.n	8005a5e <_printf_float+0xaa>
 8005b2c:	9a06      	ldr	r2, [sp, #24]
 8005b2e:	2a47      	cmp	r2, #71	; 0x47
 8005b30:	d1be      	bne.n	8005ab0 <_printf_float+0xfc>
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d1bc      	bne.n	8005ab0 <_printf_float+0xfc>
 8005b36:	2301      	movs	r3, #1
 8005b38:	e7b9      	b.n	8005aae <_printf_float+0xfa>
 8005b3a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005b3e:	d118      	bne.n	8005b72 <_printf_float+0x1be>
 8005b40:	2900      	cmp	r1, #0
 8005b42:	6863      	ldr	r3, [r4, #4]
 8005b44:	dd0b      	ble.n	8005b5e <_printf_float+0x1aa>
 8005b46:	6121      	str	r1, [r4, #16]
 8005b48:	b913      	cbnz	r3, 8005b50 <_printf_float+0x19c>
 8005b4a:	6822      	ldr	r2, [r4, #0]
 8005b4c:	07d0      	lsls	r0, r2, #31
 8005b4e:	d502      	bpl.n	8005b56 <_printf_float+0x1a2>
 8005b50:	3301      	adds	r3, #1
 8005b52:	440b      	add	r3, r1
 8005b54:	6123      	str	r3, [r4, #16]
 8005b56:	65a1      	str	r1, [r4, #88]	; 0x58
 8005b58:	f04f 0900 	mov.w	r9, #0
 8005b5c:	e7de      	b.n	8005b1c <_printf_float+0x168>
 8005b5e:	b913      	cbnz	r3, 8005b66 <_printf_float+0x1b2>
 8005b60:	6822      	ldr	r2, [r4, #0]
 8005b62:	07d2      	lsls	r2, r2, #31
 8005b64:	d501      	bpl.n	8005b6a <_printf_float+0x1b6>
 8005b66:	3302      	adds	r3, #2
 8005b68:	e7f4      	b.n	8005b54 <_printf_float+0x1a0>
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e7f2      	b.n	8005b54 <_printf_float+0x1a0>
 8005b6e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005b72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b74:	4299      	cmp	r1, r3
 8005b76:	db05      	blt.n	8005b84 <_printf_float+0x1d0>
 8005b78:	6823      	ldr	r3, [r4, #0]
 8005b7a:	6121      	str	r1, [r4, #16]
 8005b7c:	07d8      	lsls	r0, r3, #31
 8005b7e:	d5ea      	bpl.n	8005b56 <_printf_float+0x1a2>
 8005b80:	1c4b      	adds	r3, r1, #1
 8005b82:	e7e7      	b.n	8005b54 <_printf_float+0x1a0>
 8005b84:	2900      	cmp	r1, #0
 8005b86:	bfd4      	ite	le
 8005b88:	f1c1 0202 	rsble	r2, r1, #2
 8005b8c:	2201      	movgt	r2, #1
 8005b8e:	4413      	add	r3, r2
 8005b90:	e7e0      	b.n	8005b54 <_printf_float+0x1a0>
 8005b92:	6823      	ldr	r3, [r4, #0]
 8005b94:	055a      	lsls	r2, r3, #21
 8005b96:	d407      	bmi.n	8005ba8 <_printf_float+0x1f4>
 8005b98:	6923      	ldr	r3, [r4, #16]
 8005b9a:	4642      	mov	r2, r8
 8005b9c:	4631      	mov	r1, r6
 8005b9e:	4628      	mov	r0, r5
 8005ba0:	47b8      	blx	r7
 8005ba2:	3001      	adds	r0, #1
 8005ba4:	d12c      	bne.n	8005c00 <_printf_float+0x24c>
 8005ba6:	e764      	b.n	8005a72 <_printf_float+0xbe>
 8005ba8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005bac:	f240 80e0 	bls.w	8005d70 <_printf_float+0x3bc>
 8005bb0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	f7fa ff86 	bl	8000ac8 <__aeabi_dcmpeq>
 8005bbc:	2800      	cmp	r0, #0
 8005bbe:	d034      	beq.n	8005c2a <_printf_float+0x276>
 8005bc0:	4a37      	ldr	r2, [pc, #220]	; (8005ca0 <_printf_float+0x2ec>)
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	4631      	mov	r1, r6
 8005bc6:	4628      	mov	r0, r5
 8005bc8:	47b8      	blx	r7
 8005bca:	3001      	adds	r0, #1
 8005bcc:	f43f af51 	beq.w	8005a72 <_printf_float+0xbe>
 8005bd0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	db02      	blt.n	8005bde <_printf_float+0x22a>
 8005bd8:	6823      	ldr	r3, [r4, #0]
 8005bda:	07d8      	lsls	r0, r3, #31
 8005bdc:	d510      	bpl.n	8005c00 <_printf_float+0x24c>
 8005bde:	ee18 3a10 	vmov	r3, s16
 8005be2:	4652      	mov	r2, sl
 8005be4:	4631      	mov	r1, r6
 8005be6:	4628      	mov	r0, r5
 8005be8:	47b8      	blx	r7
 8005bea:	3001      	adds	r0, #1
 8005bec:	f43f af41 	beq.w	8005a72 <_printf_float+0xbe>
 8005bf0:	f04f 0800 	mov.w	r8, #0
 8005bf4:	f104 091a 	add.w	r9, r4, #26
 8005bf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bfa:	3b01      	subs	r3, #1
 8005bfc:	4543      	cmp	r3, r8
 8005bfe:	dc09      	bgt.n	8005c14 <_printf_float+0x260>
 8005c00:	6823      	ldr	r3, [r4, #0]
 8005c02:	079b      	lsls	r3, r3, #30
 8005c04:	f100 8107 	bmi.w	8005e16 <_printf_float+0x462>
 8005c08:	68e0      	ldr	r0, [r4, #12]
 8005c0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c0c:	4298      	cmp	r0, r3
 8005c0e:	bfb8      	it	lt
 8005c10:	4618      	movlt	r0, r3
 8005c12:	e730      	b.n	8005a76 <_printf_float+0xc2>
 8005c14:	2301      	movs	r3, #1
 8005c16:	464a      	mov	r2, r9
 8005c18:	4631      	mov	r1, r6
 8005c1a:	4628      	mov	r0, r5
 8005c1c:	47b8      	blx	r7
 8005c1e:	3001      	adds	r0, #1
 8005c20:	f43f af27 	beq.w	8005a72 <_printf_float+0xbe>
 8005c24:	f108 0801 	add.w	r8, r8, #1
 8005c28:	e7e6      	b.n	8005bf8 <_printf_float+0x244>
 8005c2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	dc39      	bgt.n	8005ca4 <_printf_float+0x2f0>
 8005c30:	4a1b      	ldr	r2, [pc, #108]	; (8005ca0 <_printf_float+0x2ec>)
 8005c32:	2301      	movs	r3, #1
 8005c34:	4631      	mov	r1, r6
 8005c36:	4628      	mov	r0, r5
 8005c38:	47b8      	blx	r7
 8005c3a:	3001      	adds	r0, #1
 8005c3c:	f43f af19 	beq.w	8005a72 <_printf_float+0xbe>
 8005c40:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005c44:	4313      	orrs	r3, r2
 8005c46:	d102      	bne.n	8005c4e <_printf_float+0x29a>
 8005c48:	6823      	ldr	r3, [r4, #0]
 8005c4a:	07d9      	lsls	r1, r3, #31
 8005c4c:	d5d8      	bpl.n	8005c00 <_printf_float+0x24c>
 8005c4e:	ee18 3a10 	vmov	r3, s16
 8005c52:	4652      	mov	r2, sl
 8005c54:	4631      	mov	r1, r6
 8005c56:	4628      	mov	r0, r5
 8005c58:	47b8      	blx	r7
 8005c5a:	3001      	adds	r0, #1
 8005c5c:	f43f af09 	beq.w	8005a72 <_printf_float+0xbe>
 8005c60:	f04f 0900 	mov.w	r9, #0
 8005c64:	f104 0a1a 	add.w	sl, r4, #26
 8005c68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c6a:	425b      	negs	r3, r3
 8005c6c:	454b      	cmp	r3, r9
 8005c6e:	dc01      	bgt.n	8005c74 <_printf_float+0x2c0>
 8005c70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c72:	e792      	b.n	8005b9a <_printf_float+0x1e6>
 8005c74:	2301      	movs	r3, #1
 8005c76:	4652      	mov	r2, sl
 8005c78:	4631      	mov	r1, r6
 8005c7a:	4628      	mov	r0, r5
 8005c7c:	47b8      	blx	r7
 8005c7e:	3001      	adds	r0, #1
 8005c80:	f43f aef7 	beq.w	8005a72 <_printf_float+0xbe>
 8005c84:	f109 0901 	add.w	r9, r9, #1
 8005c88:	e7ee      	b.n	8005c68 <_printf_float+0x2b4>
 8005c8a:	bf00      	nop
 8005c8c:	7fefffff 	.word	0x7fefffff
 8005c90:	080085fc 	.word	0x080085fc
 8005c94:	08008600 	.word	0x08008600
 8005c98:	08008604 	.word	0x08008604
 8005c9c:	08008608 	.word	0x08008608
 8005ca0:	0800860c 	.word	0x0800860c
 8005ca4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ca6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	bfa8      	it	ge
 8005cac:	461a      	movge	r2, r3
 8005cae:	2a00      	cmp	r2, #0
 8005cb0:	4691      	mov	r9, r2
 8005cb2:	dc37      	bgt.n	8005d24 <_printf_float+0x370>
 8005cb4:	f04f 0b00 	mov.w	fp, #0
 8005cb8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005cbc:	f104 021a 	add.w	r2, r4, #26
 8005cc0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005cc2:	9305      	str	r3, [sp, #20]
 8005cc4:	eba3 0309 	sub.w	r3, r3, r9
 8005cc8:	455b      	cmp	r3, fp
 8005cca:	dc33      	bgt.n	8005d34 <_printf_float+0x380>
 8005ccc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	db3b      	blt.n	8005d4c <_printf_float+0x398>
 8005cd4:	6823      	ldr	r3, [r4, #0]
 8005cd6:	07da      	lsls	r2, r3, #31
 8005cd8:	d438      	bmi.n	8005d4c <_printf_float+0x398>
 8005cda:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005cde:	eba2 0903 	sub.w	r9, r2, r3
 8005ce2:	9b05      	ldr	r3, [sp, #20]
 8005ce4:	1ad2      	subs	r2, r2, r3
 8005ce6:	4591      	cmp	r9, r2
 8005ce8:	bfa8      	it	ge
 8005cea:	4691      	movge	r9, r2
 8005cec:	f1b9 0f00 	cmp.w	r9, #0
 8005cf0:	dc35      	bgt.n	8005d5e <_printf_float+0x3aa>
 8005cf2:	f04f 0800 	mov.w	r8, #0
 8005cf6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005cfa:	f104 0a1a 	add.w	sl, r4, #26
 8005cfe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d02:	1a9b      	subs	r3, r3, r2
 8005d04:	eba3 0309 	sub.w	r3, r3, r9
 8005d08:	4543      	cmp	r3, r8
 8005d0a:	f77f af79 	ble.w	8005c00 <_printf_float+0x24c>
 8005d0e:	2301      	movs	r3, #1
 8005d10:	4652      	mov	r2, sl
 8005d12:	4631      	mov	r1, r6
 8005d14:	4628      	mov	r0, r5
 8005d16:	47b8      	blx	r7
 8005d18:	3001      	adds	r0, #1
 8005d1a:	f43f aeaa 	beq.w	8005a72 <_printf_float+0xbe>
 8005d1e:	f108 0801 	add.w	r8, r8, #1
 8005d22:	e7ec      	b.n	8005cfe <_printf_float+0x34a>
 8005d24:	4613      	mov	r3, r2
 8005d26:	4631      	mov	r1, r6
 8005d28:	4642      	mov	r2, r8
 8005d2a:	4628      	mov	r0, r5
 8005d2c:	47b8      	blx	r7
 8005d2e:	3001      	adds	r0, #1
 8005d30:	d1c0      	bne.n	8005cb4 <_printf_float+0x300>
 8005d32:	e69e      	b.n	8005a72 <_printf_float+0xbe>
 8005d34:	2301      	movs	r3, #1
 8005d36:	4631      	mov	r1, r6
 8005d38:	4628      	mov	r0, r5
 8005d3a:	9205      	str	r2, [sp, #20]
 8005d3c:	47b8      	blx	r7
 8005d3e:	3001      	adds	r0, #1
 8005d40:	f43f ae97 	beq.w	8005a72 <_printf_float+0xbe>
 8005d44:	9a05      	ldr	r2, [sp, #20]
 8005d46:	f10b 0b01 	add.w	fp, fp, #1
 8005d4a:	e7b9      	b.n	8005cc0 <_printf_float+0x30c>
 8005d4c:	ee18 3a10 	vmov	r3, s16
 8005d50:	4652      	mov	r2, sl
 8005d52:	4631      	mov	r1, r6
 8005d54:	4628      	mov	r0, r5
 8005d56:	47b8      	blx	r7
 8005d58:	3001      	adds	r0, #1
 8005d5a:	d1be      	bne.n	8005cda <_printf_float+0x326>
 8005d5c:	e689      	b.n	8005a72 <_printf_float+0xbe>
 8005d5e:	9a05      	ldr	r2, [sp, #20]
 8005d60:	464b      	mov	r3, r9
 8005d62:	4442      	add	r2, r8
 8005d64:	4631      	mov	r1, r6
 8005d66:	4628      	mov	r0, r5
 8005d68:	47b8      	blx	r7
 8005d6a:	3001      	adds	r0, #1
 8005d6c:	d1c1      	bne.n	8005cf2 <_printf_float+0x33e>
 8005d6e:	e680      	b.n	8005a72 <_printf_float+0xbe>
 8005d70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d72:	2a01      	cmp	r2, #1
 8005d74:	dc01      	bgt.n	8005d7a <_printf_float+0x3c6>
 8005d76:	07db      	lsls	r3, r3, #31
 8005d78:	d53a      	bpl.n	8005df0 <_printf_float+0x43c>
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	4642      	mov	r2, r8
 8005d7e:	4631      	mov	r1, r6
 8005d80:	4628      	mov	r0, r5
 8005d82:	47b8      	blx	r7
 8005d84:	3001      	adds	r0, #1
 8005d86:	f43f ae74 	beq.w	8005a72 <_printf_float+0xbe>
 8005d8a:	ee18 3a10 	vmov	r3, s16
 8005d8e:	4652      	mov	r2, sl
 8005d90:	4631      	mov	r1, r6
 8005d92:	4628      	mov	r0, r5
 8005d94:	47b8      	blx	r7
 8005d96:	3001      	adds	r0, #1
 8005d98:	f43f ae6b 	beq.w	8005a72 <_printf_float+0xbe>
 8005d9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005da0:	2200      	movs	r2, #0
 8005da2:	2300      	movs	r3, #0
 8005da4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005da8:	f7fa fe8e 	bl	8000ac8 <__aeabi_dcmpeq>
 8005dac:	b9d8      	cbnz	r0, 8005de6 <_printf_float+0x432>
 8005dae:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005db2:	f108 0201 	add.w	r2, r8, #1
 8005db6:	4631      	mov	r1, r6
 8005db8:	4628      	mov	r0, r5
 8005dba:	47b8      	blx	r7
 8005dbc:	3001      	adds	r0, #1
 8005dbe:	d10e      	bne.n	8005dde <_printf_float+0x42a>
 8005dc0:	e657      	b.n	8005a72 <_printf_float+0xbe>
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	4652      	mov	r2, sl
 8005dc6:	4631      	mov	r1, r6
 8005dc8:	4628      	mov	r0, r5
 8005dca:	47b8      	blx	r7
 8005dcc:	3001      	adds	r0, #1
 8005dce:	f43f ae50 	beq.w	8005a72 <_printf_float+0xbe>
 8005dd2:	f108 0801 	add.w	r8, r8, #1
 8005dd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dd8:	3b01      	subs	r3, #1
 8005dda:	4543      	cmp	r3, r8
 8005ddc:	dcf1      	bgt.n	8005dc2 <_printf_float+0x40e>
 8005dde:	464b      	mov	r3, r9
 8005de0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005de4:	e6da      	b.n	8005b9c <_printf_float+0x1e8>
 8005de6:	f04f 0800 	mov.w	r8, #0
 8005dea:	f104 0a1a 	add.w	sl, r4, #26
 8005dee:	e7f2      	b.n	8005dd6 <_printf_float+0x422>
 8005df0:	2301      	movs	r3, #1
 8005df2:	4642      	mov	r2, r8
 8005df4:	e7df      	b.n	8005db6 <_printf_float+0x402>
 8005df6:	2301      	movs	r3, #1
 8005df8:	464a      	mov	r2, r9
 8005dfa:	4631      	mov	r1, r6
 8005dfc:	4628      	mov	r0, r5
 8005dfe:	47b8      	blx	r7
 8005e00:	3001      	adds	r0, #1
 8005e02:	f43f ae36 	beq.w	8005a72 <_printf_float+0xbe>
 8005e06:	f108 0801 	add.w	r8, r8, #1
 8005e0a:	68e3      	ldr	r3, [r4, #12]
 8005e0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005e0e:	1a5b      	subs	r3, r3, r1
 8005e10:	4543      	cmp	r3, r8
 8005e12:	dcf0      	bgt.n	8005df6 <_printf_float+0x442>
 8005e14:	e6f8      	b.n	8005c08 <_printf_float+0x254>
 8005e16:	f04f 0800 	mov.w	r8, #0
 8005e1a:	f104 0919 	add.w	r9, r4, #25
 8005e1e:	e7f4      	b.n	8005e0a <_printf_float+0x456>

08005e20 <_printf_common>:
 8005e20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e24:	4616      	mov	r6, r2
 8005e26:	4699      	mov	r9, r3
 8005e28:	688a      	ldr	r2, [r1, #8]
 8005e2a:	690b      	ldr	r3, [r1, #16]
 8005e2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e30:	4293      	cmp	r3, r2
 8005e32:	bfb8      	it	lt
 8005e34:	4613      	movlt	r3, r2
 8005e36:	6033      	str	r3, [r6, #0]
 8005e38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e3c:	4607      	mov	r7, r0
 8005e3e:	460c      	mov	r4, r1
 8005e40:	b10a      	cbz	r2, 8005e46 <_printf_common+0x26>
 8005e42:	3301      	adds	r3, #1
 8005e44:	6033      	str	r3, [r6, #0]
 8005e46:	6823      	ldr	r3, [r4, #0]
 8005e48:	0699      	lsls	r1, r3, #26
 8005e4a:	bf42      	ittt	mi
 8005e4c:	6833      	ldrmi	r3, [r6, #0]
 8005e4e:	3302      	addmi	r3, #2
 8005e50:	6033      	strmi	r3, [r6, #0]
 8005e52:	6825      	ldr	r5, [r4, #0]
 8005e54:	f015 0506 	ands.w	r5, r5, #6
 8005e58:	d106      	bne.n	8005e68 <_printf_common+0x48>
 8005e5a:	f104 0a19 	add.w	sl, r4, #25
 8005e5e:	68e3      	ldr	r3, [r4, #12]
 8005e60:	6832      	ldr	r2, [r6, #0]
 8005e62:	1a9b      	subs	r3, r3, r2
 8005e64:	42ab      	cmp	r3, r5
 8005e66:	dc26      	bgt.n	8005eb6 <_printf_common+0x96>
 8005e68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e6c:	1e13      	subs	r3, r2, #0
 8005e6e:	6822      	ldr	r2, [r4, #0]
 8005e70:	bf18      	it	ne
 8005e72:	2301      	movne	r3, #1
 8005e74:	0692      	lsls	r2, r2, #26
 8005e76:	d42b      	bmi.n	8005ed0 <_printf_common+0xb0>
 8005e78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e7c:	4649      	mov	r1, r9
 8005e7e:	4638      	mov	r0, r7
 8005e80:	47c0      	blx	r8
 8005e82:	3001      	adds	r0, #1
 8005e84:	d01e      	beq.n	8005ec4 <_printf_common+0xa4>
 8005e86:	6823      	ldr	r3, [r4, #0]
 8005e88:	6922      	ldr	r2, [r4, #16]
 8005e8a:	f003 0306 	and.w	r3, r3, #6
 8005e8e:	2b04      	cmp	r3, #4
 8005e90:	bf02      	ittt	eq
 8005e92:	68e5      	ldreq	r5, [r4, #12]
 8005e94:	6833      	ldreq	r3, [r6, #0]
 8005e96:	1aed      	subeq	r5, r5, r3
 8005e98:	68a3      	ldr	r3, [r4, #8]
 8005e9a:	bf0c      	ite	eq
 8005e9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ea0:	2500      	movne	r5, #0
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	bfc4      	itt	gt
 8005ea6:	1a9b      	subgt	r3, r3, r2
 8005ea8:	18ed      	addgt	r5, r5, r3
 8005eaa:	2600      	movs	r6, #0
 8005eac:	341a      	adds	r4, #26
 8005eae:	42b5      	cmp	r5, r6
 8005eb0:	d11a      	bne.n	8005ee8 <_printf_common+0xc8>
 8005eb2:	2000      	movs	r0, #0
 8005eb4:	e008      	b.n	8005ec8 <_printf_common+0xa8>
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	4652      	mov	r2, sl
 8005eba:	4649      	mov	r1, r9
 8005ebc:	4638      	mov	r0, r7
 8005ebe:	47c0      	blx	r8
 8005ec0:	3001      	adds	r0, #1
 8005ec2:	d103      	bne.n	8005ecc <_printf_common+0xac>
 8005ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ecc:	3501      	adds	r5, #1
 8005ece:	e7c6      	b.n	8005e5e <_printf_common+0x3e>
 8005ed0:	18e1      	adds	r1, r4, r3
 8005ed2:	1c5a      	adds	r2, r3, #1
 8005ed4:	2030      	movs	r0, #48	; 0x30
 8005ed6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005eda:	4422      	add	r2, r4
 8005edc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ee0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ee4:	3302      	adds	r3, #2
 8005ee6:	e7c7      	b.n	8005e78 <_printf_common+0x58>
 8005ee8:	2301      	movs	r3, #1
 8005eea:	4622      	mov	r2, r4
 8005eec:	4649      	mov	r1, r9
 8005eee:	4638      	mov	r0, r7
 8005ef0:	47c0      	blx	r8
 8005ef2:	3001      	adds	r0, #1
 8005ef4:	d0e6      	beq.n	8005ec4 <_printf_common+0xa4>
 8005ef6:	3601      	adds	r6, #1
 8005ef8:	e7d9      	b.n	8005eae <_printf_common+0x8e>
	...

08005efc <_printf_i>:
 8005efc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f00:	7e0f      	ldrb	r7, [r1, #24]
 8005f02:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005f04:	2f78      	cmp	r7, #120	; 0x78
 8005f06:	4691      	mov	r9, r2
 8005f08:	4680      	mov	r8, r0
 8005f0a:	460c      	mov	r4, r1
 8005f0c:	469a      	mov	sl, r3
 8005f0e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005f12:	d807      	bhi.n	8005f24 <_printf_i+0x28>
 8005f14:	2f62      	cmp	r7, #98	; 0x62
 8005f16:	d80a      	bhi.n	8005f2e <_printf_i+0x32>
 8005f18:	2f00      	cmp	r7, #0
 8005f1a:	f000 80d4 	beq.w	80060c6 <_printf_i+0x1ca>
 8005f1e:	2f58      	cmp	r7, #88	; 0x58
 8005f20:	f000 80c0 	beq.w	80060a4 <_printf_i+0x1a8>
 8005f24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f2c:	e03a      	b.n	8005fa4 <_printf_i+0xa8>
 8005f2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f32:	2b15      	cmp	r3, #21
 8005f34:	d8f6      	bhi.n	8005f24 <_printf_i+0x28>
 8005f36:	a101      	add	r1, pc, #4	; (adr r1, 8005f3c <_printf_i+0x40>)
 8005f38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f3c:	08005f95 	.word	0x08005f95
 8005f40:	08005fa9 	.word	0x08005fa9
 8005f44:	08005f25 	.word	0x08005f25
 8005f48:	08005f25 	.word	0x08005f25
 8005f4c:	08005f25 	.word	0x08005f25
 8005f50:	08005f25 	.word	0x08005f25
 8005f54:	08005fa9 	.word	0x08005fa9
 8005f58:	08005f25 	.word	0x08005f25
 8005f5c:	08005f25 	.word	0x08005f25
 8005f60:	08005f25 	.word	0x08005f25
 8005f64:	08005f25 	.word	0x08005f25
 8005f68:	080060ad 	.word	0x080060ad
 8005f6c:	08005fd5 	.word	0x08005fd5
 8005f70:	08006067 	.word	0x08006067
 8005f74:	08005f25 	.word	0x08005f25
 8005f78:	08005f25 	.word	0x08005f25
 8005f7c:	080060cf 	.word	0x080060cf
 8005f80:	08005f25 	.word	0x08005f25
 8005f84:	08005fd5 	.word	0x08005fd5
 8005f88:	08005f25 	.word	0x08005f25
 8005f8c:	08005f25 	.word	0x08005f25
 8005f90:	0800606f 	.word	0x0800606f
 8005f94:	682b      	ldr	r3, [r5, #0]
 8005f96:	1d1a      	adds	r2, r3, #4
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	602a      	str	r2, [r5, #0]
 8005f9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005fa0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e09f      	b.n	80060e8 <_printf_i+0x1ec>
 8005fa8:	6820      	ldr	r0, [r4, #0]
 8005faa:	682b      	ldr	r3, [r5, #0]
 8005fac:	0607      	lsls	r7, r0, #24
 8005fae:	f103 0104 	add.w	r1, r3, #4
 8005fb2:	6029      	str	r1, [r5, #0]
 8005fb4:	d501      	bpl.n	8005fba <_printf_i+0xbe>
 8005fb6:	681e      	ldr	r6, [r3, #0]
 8005fb8:	e003      	b.n	8005fc2 <_printf_i+0xc6>
 8005fba:	0646      	lsls	r6, r0, #25
 8005fbc:	d5fb      	bpl.n	8005fb6 <_printf_i+0xba>
 8005fbe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005fc2:	2e00      	cmp	r6, #0
 8005fc4:	da03      	bge.n	8005fce <_printf_i+0xd2>
 8005fc6:	232d      	movs	r3, #45	; 0x2d
 8005fc8:	4276      	negs	r6, r6
 8005fca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fce:	485a      	ldr	r0, [pc, #360]	; (8006138 <_printf_i+0x23c>)
 8005fd0:	230a      	movs	r3, #10
 8005fd2:	e012      	b.n	8005ffa <_printf_i+0xfe>
 8005fd4:	682b      	ldr	r3, [r5, #0]
 8005fd6:	6820      	ldr	r0, [r4, #0]
 8005fd8:	1d19      	adds	r1, r3, #4
 8005fda:	6029      	str	r1, [r5, #0]
 8005fdc:	0605      	lsls	r5, r0, #24
 8005fde:	d501      	bpl.n	8005fe4 <_printf_i+0xe8>
 8005fe0:	681e      	ldr	r6, [r3, #0]
 8005fe2:	e002      	b.n	8005fea <_printf_i+0xee>
 8005fe4:	0641      	lsls	r1, r0, #25
 8005fe6:	d5fb      	bpl.n	8005fe0 <_printf_i+0xe4>
 8005fe8:	881e      	ldrh	r6, [r3, #0]
 8005fea:	4853      	ldr	r0, [pc, #332]	; (8006138 <_printf_i+0x23c>)
 8005fec:	2f6f      	cmp	r7, #111	; 0x6f
 8005fee:	bf0c      	ite	eq
 8005ff0:	2308      	moveq	r3, #8
 8005ff2:	230a      	movne	r3, #10
 8005ff4:	2100      	movs	r1, #0
 8005ff6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005ffa:	6865      	ldr	r5, [r4, #4]
 8005ffc:	60a5      	str	r5, [r4, #8]
 8005ffe:	2d00      	cmp	r5, #0
 8006000:	bfa2      	ittt	ge
 8006002:	6821      	ldrge	r1, [r4, #0]
 8006004:	f021 0104 	bicge.w	r1, r1, #4
 8006008:	6021      	strge	r1, [r4, #0]
 800600a:	b90e      	cbnz	r6, 8006010 <_printf_i+0x114>
 800600c:	2d00      	cmp	r5, #0
 800600e:	d04b      	beq.n	80060a8 <_printf_i+0x1ac>
 8006010:	4615      	mov	r5, r2
 8006012:	fbb6 f1f3 	udiv	r1, r6, r3
 8006016:	fb03 6711 	mls	r7, r3, r1, r6
 800601a:	5dc7      	ldrb	r7, [r0, r7]
 800601c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006020:	4637      	mov	r7, r6
 8006022:	42bb      	cmp	r3, r7
 8006024:	460e      	mov	r6, r1
 8006026:	d9f4      	bls.n	8006012 <_printf_i+0x116>
 8006028:	2b08      	cmp	r3, #8
 800602a:	d10b      	bne.n	8006044 <_printf_i+0x148>
 800602c:	6823      	ldr	r3, [r4, #0]
 800602e:	07de      	lsls	r6, r3, #31
 8006030:	d508      	bpl.n	8006044 <_printf_i+0x148>
 8006032:	6923      	ldr	r3, [r4, #16]
 8006034:	6861      	ldr	r1, [r4, #4]
 8006036:	4299      	cmp	r1, r3
 8006038:	bfde      	ittt	le
 800603a:	2330      	movle	r3, #48	; 0x30
 800603c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006040:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006044:	1b52      	subs	r2, r2, r5
 8006046:	6122      	str	r2, [r4, #16]
 8006048:	f8cd a000 	str.w	sl, [sp]
 800604c:	464b      	mov	r3, r9
 800604e:	aa03      	add	r2, sp, #12
 8006050:	4621      	mov	r1, r4
 8006052:	4640      	mov	r0, r8
 8006054:	f7ff fee4 	bl	8005e20 <_printf_common>
 8006058:	3001      	adds	r0, #1
 800605a:	d14a      	bne.n	80060f2 <_printf_i+0x1f6>
 800605c:	f04f 30ff 	mov.w	r0, #4294967295
 8006060:	b004      	add	sp, #16
 8006062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006066:	6823      	ldr	r3, [r4, #0]
 8006068:	f043 0320 	orr.w	r3, r3, #32
 800606c:	6023      	str	r3, [r4, #0]
 800606e:	4833      	ldr	r0, [pc, #204]	; (800613c <_printf_i+0x240>)
 8006070:	2778      	movs	r7, #120	; 0x78
 8006072:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006076:	6823      	ldr	r3, [r4, #0]
 8006078:	6829      	ldr	r1, [r5, #0]
 800607a:	061f      	lsls	r7, r3, #24
 800607c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006080:	d402      	bmi.n	8006088 <_printf_i+0x18c>
 8006082:	065f      	lsls	r7, r3, #25
 8006084:	bf48      	it	mi
 8006086:	b2b6      	uxthmi	r6, r6
 8006088:	07df      	lsls	r7, r3, #31
 800608a:	bf48      	it	mi
 800608c:	f043 0320 	orrmi.w	r3, r3, #32
 8006090:	6029      	str	r1, [r5, #0]
 8006092:	bf48      	it	mi
 8006094:	6023      	strmi	r3, [r4, #0]
 8006096:	b91e      	cbnz	r6, 80060a0 <_printf_i+0x1a4>
 8006098:	6823      	ldr	r3, [r4, #0]
 800609a:	f023 0320 	bic.w	r3, r3, #32
 800609e:	6023      	str	r3, [r4, #0]
 80060a0:	2310      	movs	r3, #16
 80060a2:	e7a7      	b.n	8005ff4 <_printf_i+0xf8>
 80060a4:	4824      	ldr	r0, [pc, #144]	; (8006138 <_printf_i+0x23c>)
 80060a6:	e7e4      	b.n	8006072 <_printf_i+0x176>
 80060a8:	4615      	mov	r5, r2
 80060aa:	e7bd      	b.n	8006028 <_printf_i+0x12c>
 80060ac:	682b      	ldr	r3, [r5, #0]
 80060ae:	6826      	ldr	r6, [r4, #0]
 80060b0:	6961      	ldr	r1, [r4, #20]
 80060b2:	1d18      	adds	r0, r3, #4
 80060b4:	6028      	str	r0, [r5, #0]
 80060b6:	0635      	lsls	r5, r6, #24
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	d501      	bpl.n	80060c0 <_printf_i+0x1c4>
 80060bc:	6019      	str	r1, [r3, #0]
 80060be:	e002      	b.n	80060c6 <_printf_i+0x1ca>
 80060c0:	0670      	lsls	r0, r6, #25
 80060c2:	d5fb      	bpl.n	80060bc <_printf_i+0x1c0>
 80060c4:	8019      	strh	r1, [r3, #0]
 80060c6:	2300      	movs	r3, #0
 80060c8:	6123      	str	r3, [r4, #16]
 80060ca:	4615      	mov	r5, r2
 80060cc:	e7bc      	b.n	8006048 <_printf_i+0x14c>
 80060ce:	682b      	ldr	r3, [r5, #0]
 80060d0:	1d1a      	adds	r2, r3, #4
 80060d2:	602a      	str	r2, [r5, #0]
 80060d4:	681d      	ldr	r5, [r3, #0]
 80060d6:	6862      	ldr	r2, [r4, #4]
 80060d8:	2100      	movs	r1, #0
 80060da:	4628      	mov	r0, r5
 80060dc:	f7fa f878 	bl	80001d0 <memchr>
 80060e0:	b108      	cbz	r0, 80060e6 <_printf_i+0x1ea>
 80060e2:	1b40      	subs	r0, r0, r5
 80060e4:	6060      	str	r0, [r4, #4]
 80060e6:	6863      	ldr	r3, [r4, #4]
 80060e8:	6123      	str	r3, [r4, #16]
 80060ea:	2300      	movs	r3, #0
 80060ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060f0:	e7aa      	b.n	8006048 <_printf_i+0x14c>
 80060f2:	6923      	ldr	r3, [r4, #16]
 80060f4:	462a      	mov	r2, r5
 80060f6:	4649      	mov	r1, r9
 80060f8:	4640      	mov	r0, r8
 80060fa:	47d0      	blx	sl
 80060fc:	3001      	adds	r0, #1
 80060fe:	d0ad      	beq.n	800605c <_printf_i+0x160>
 8006100:	6823      	ldr	r3, [r4, #0]
 8006102:	079b      	lsls	r3, r3, #30
 8006104:	d413      	bmi.n	800612e <_printf_i+0x232>
 8006106:	68e0      	ldr	r0, [r4, #12]
 8006108:	9b03      	ldr	r3, [sp, #12]
 800610a:	4298      	cmp	r0, r3
 800610c:	bfb8      	it	lt
 800610e:	4618      	movlt	r0, r3
 8006110:	e7a6      	b.n	8006060 <_printf_i+0x164>
 8006112:	2301      	movs	r3, #1
 8006114:	4632      	mov	r2, r6
 8006116:	4649      	mov	r1, r9
 8006118:	4640      	mov	r0, r8
 800611a:	47d0      	blx	sl
 800611c:	3001      	adds	r0, #1
 800611e:	d09d      	beq.n	800605c <_printf_i+0x160>
 8006120:	3501      	adds	r5, #1
 8006122:	68e3      	ldr	r3, [r4, #12]
 8006124:	9903      	ldr	r1, [sp, #12]
 8006126:	1a5b      	subs	r3, r3, r1
 8006128:	42ab      	cmp	r3, r5
 800612a:	dcf2      	bgt.n	8006112 <_printf_i+0x216>
 800612c:	e7eb      	b.n	8006106 <_printf_i+0x20a>
 800612e:	2500      	movs	r5, #0
 8006130:	f104 0619 	add.w	r6, r4, #25
 8006134:	e7f5      	b.n	8006122 <_printf_i+0x226>
 8006136:	bf00      	nop
 8006138:	0800860e 	.word	0x0800860e
 800613c:	0800861f 	.word	0x0800861f

08006140 <std>:
 8006140:	2300      	movs	r3, #0
 8006142:	b510      	push	{r4, lr}
 8006144:	4604      	mov	r4, r0
 8006146:	e9c0 3300 	strd	r3, r3, [r0]
 800614a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800614e:	6083      	str	r3, [r0, #8]
 8006150:	8181      	strh	r1, [r0, #12]
 8006152:	6643      	str	r3, [r0, #100]	; 0x64
 8006154:	81c2      	strh	r2, [r0, #14]
 8006156:	6183      	str	r3, [r0, #24]
 8006158:	4619      	mov	r1, r3
 800615a:	2208      	movs	r2, #8
 800615c:	305c      	adds	r0, #92	; 0x5c
 800615e:	f000 f914 	bl	800638a <memset>
 8006162:	4b0d      	ldr	r3, [pc, #52]	; (8006198 <std+0x58>)
 8006164:	6263      	str	r3, [r4, #36]	; 0x24
 8006166:	4b0d      	ldr	r3, [pc, #52]	; (800619c <std+0x5c>)
 8006168:	62a3      	str	r3, [r4, #40]	; 0x28
 800616a:	4b0d      	ldr	r3, [pc, #52]	; (80061a0 <std+0x60>)
 800616c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800616e:	4b0d      	ldr	r3, [pc, #52]	; (80061a4 <std+0x64>)
 8006170:	6323      	str	r3, [r4, #48]	; 0x30
 8006172:	4b0d      	ldr	r3, [pc, #52]	; (80061a8 <std+0x68>)
 8006174:	6224      	str	r4, [r4, #32]
 8006176:	429c      	cmp	r4, r3
 8006178:	d006      	beq.n	8006188 <std+0x48>
 800617a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800617e:	4294      	cmp	r4, r2
 8006180:	d002      	beq.n	8006188 <std+0x48>
 8006182:	33d0      	adds	r3, #208	; 0xd0
 8006184:	429c      	cmp	r4, r3
 8006186:	d105      	bne.n	8006194 <std+0x54>
 8006188:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800618c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006190:	f000 b978 	b.w	8006484 <__retarget_lock_init_recursive>
 8006194:	bd10      	pop	{r4, pc}
 8006196:	bf00      	nop
 8006198:	08006305 	.word	0x08006305
 800619c:	08006327 	.word	0x08006327
 80061a0:	0800635f 	.word	0x0800635f
 80061a4:	08006383 	.word	0x08006383
 80061a8:	20000310 	.word	0x20000310

080061ac <stdio_exit_handler>:
 80061ac:	4a02      	ldr	r2, [pc, #8]	; (80061b8 <stdio_exit_handler+0xc>)
 80061ae:	4903      	ldr	r1, [pc, #12]	; (80061bc <stdio_exit_handler+0x10>)
 80061b0:	4803      	ldr	r0, [pc, #12]	; (80061c0 <stdio_exit_handler+0x14>)
 80061b2:	f000 b869 	b.w	8006288 <_fwalk_sglue>
 80061b6:	bf00      	nop
 80061b8:	2000000c 	.word	0x2000000c
 80061bc:	08007e39 	.word	0x08007e39
 80061c0:	20000018 	.word	0x20000018

080061c4 <cleanup_stdio>:
 80061c4:	6841      	ldr	r1, [r0, #4]
 80061c6:	4b0c      	ldr	r3, [pc, #48]	; (80061f8 <cleanup_stdio+0x34>)
 80061c8:	4299      	cmp	r1, r3
 80061ca:	b510      	push	{r4, lr}
 80061cc:	4604      	mov	r4, r0
 80061ce:	d001      	beq.n	80061d4 <cleanup_stdio+0x10>
 80061d0:	f001 fe32 	bl	8007e38 <_fflush_r>
 80061d4:	68a1      	ldr	r1, [r4, #8]
 80061d6:	4b09      	ldr	r3, [pc, #36]	; (80061fc <cleanup_stdio+0x38>)
 80061d8:	4299      	cmp	r1, r3
 80061da:	d002      	beq.n	80061e2 <cleanup_stdio+0x1e>
 80061dc:	4620      	mov	r0, r4
 80061de:	f001 fe2b 	bl	8007e38 <_fflush_r>
 80061e2:	68e1      	ldr	r1, [r4, #12]
 80061e4:	4b06      	ldr	r3, [pc, #24]	; (8006200 <cleanup_stdio+0x3c>)
 80061e6:	4299      	cmp	r1, r3
 80061e8:	d004      	beq.n	80061f4 <cleanup_stdio+0x30>
 80061ea:	4620      	mov	r0, r4
 80061ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061f0:	f001 be22 	b.w	8007e38 <_fflush_r>
 80061f4:	bd10      	pop	{r4, pc}
 80061f6:	bf00      	nop
 80061f8:	20000310 	.word	0x20000310
 80061fc:	20000378 	.word	0x20000378
 8006200:	200003e0 	.word	0x200003e0

08006204 <global_stdio_init.part.0>:
 8006204:	b510      	push	{r4, lr}
 8006206:	4b0b      	ldr	r3, [pc, #44]	; (8006234 <global_stdio_init.part.0+0x30>)
 8006208:	4c0b      	ldr	r4, [pc, #44]	; (8006238 <global_stdio_init.part.0+0x34>)
 800620a:	4a0c      	ldr	r2, [pc, #48]	; (800623c <global_stdio_init.part.0+0x38>)
 800620c:	601a      	str	r2, [r3, #0]
 800620e:	4620      	mov	r0, r4
 8006210:	2200      	movs	r2, #0
 8006212:	2104      	movs	r1, #4
 8006214:	f7ff ff94 	bl	8006140 <std>
 8006218:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800621c:	2201      	movs	r2, #1
 800621e:	2109      	movs	r1, #9
 8006220:	f7ff ff8e 	bl	8006140 <std>
 8006224:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006228:	2202      	movs	r2, #2
 800622a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800622e:	2112      	movs	r1, #18
 8006230:	f7ff bf86 	b.w	8006140 <std>
 8006234:	20000448 	.word	0x20000448
 8006238:	20000310 	.word	0x20000310
 800623c:	080061ad 	.word	0x080061ad

08006240 <__sfp_lock_acquire>:
 8006240:	4801      	ldr	r0, [pc, #4]	; (8006248 <__sfp_lock_acquire+0x8>)
 8006242:	f000 b920 	b.w	8006486 <__retarget_lock_acquire_recursive>
 8006246:	bf00      	nop
 8006248:	20000451 	.word	0x20000451

0800624c <__sfp_lock_release>:
 800624c:	4801      	ldr	r0, [pc, #4]	; (8006254 <__sfp_lock_release+0x8>)
 800624e:	f000 b91b 	b.w	8006488 <__retarget_lock_release_recursive>
 8006252:	bf00      	nop
 8006254:	20000451 	.word	0x20000451

08006258 <__sinit>:
 8006258:	b510      	push	{r4, lr}
 800625a:	4604      	mov	r4, r0
 800625c:	f7ff fff0 	bl	8006240 <__sfp_lock_acquire>
 8006260:	6a23      	ldr	r3, [r4, #32]
 8006262:	b11b      	cbz	r3, 800626c <__sinit+0x14>
 8006264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006268:	f7ff bff0 	b.w	800624c <__sfp_lock_release>
 800626c:	4b04      	ldr	r3, [pc, #16]	; (8006280 <__sinit+0x28>)
 800626e:	6223      	str	r3, [r4, #32]
 8006270:	4b04      	ldr	r3, [pc, #16]	; (8006284 <__sinit+0x2c>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d1f5      	bne.n	8006264 <__sinit+0xc>
 8006278:	f7ff ffc4 	bl	8006204 <global_stdio_init.part.0>
 800627c:	e7f2      	b.n	8006264 <__sinit+0xc>
 800627e:	bf00      	nop
 8006280:	080061c5 	.word	0x080061c5
 8006284:	20000448 	.word	0x20000448

08006288 <_fwalk_sglue>:
 8006288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800628c:	4607      	mov	r7, r0
 800628e:	4688      	mov	r8, r1
 8006290:	4614      	mov	r4, r2
 8006292:	2600      	movs	r6, #0
 8006294:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006298:	f1b9 0901 	subs.w	r9, r9, #1
 800629c:	d505      	bpl.n	80062aa <_fwalk_sglue+0x22>
 800629e:	6824      	ldr	r4, [r4, #0]
 80062a0:	2c00      	cmp	r4, #0
 80062a2:	d1f7      	bne.n	8006294 <_fwalk_sglue+0xc>
 80062a4:	4630      	mov	r0, r6
 80062a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062aa:	89ab      	ldrh	r3, [r5, #12]
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d907      	bls.n	80062c0 <_fwalk_sglue+0x38>
 80062b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80062b4:	3301      	adds	r3, #1
 80062b6:	d003      	beq.n	80062c0 <_fwalk_sglue+0x38>
 80062b8:	4629      	mov	r1, r5
 80062ba:	4638      	mov	r0, r7
 80062bc:	47c0      	blx	r8
 80062be:	4306      	orrs	r6, r0
 80062c0:	3568      	adds	r5, #104	; 0x68
 80062c2:	e7e9      	b.n	8006298 <_fwalk_sglue+0x10>

080062c4 <siprintf>:
 80062c4:	b40e      	push	{r1, r2, r3}
 80062c6:	b500      	push	{lr}
 80062c8:	b09c      	sub	sp, #112	; 0x70
 80062ca:	ab1d      	add	r3, sp, #116	; 0x74
 80062cc:	9002      	str	r0, [sp, #8]
 80062ce:	9006      	str	r0, [sp, #24]
 80062d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80062d4:	4809      	ldr	r0, [pc, #36]	; (80062fc <siprintf+0x38>)
 80062d6:	9107      	str	r1, [sp, #28]
 80062d8:	9104      	str	r1, [sp, #16]
 80062da:	4909      	ldr	r1, [pc, #36]	; (8006300 <siprintf+0x3c>)
 80062dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80062e0:	9105      	str	r1, [sp, #20]
 80062e2:	6800      	ldr	r0, [r0, #0]
 80062e4:	9301      	str	r3, [sp, #4]
 80062e6:	a902      	add	r1, sp, #8
 80062e8:	f001 fc22 	bl	8007b30 <_svfiprintf_r>
 80062ec:	9b02      	ldr	r3, [sp, #8]
 80062ee:	2200      	movs	r2, #0
 80062f0:	701a      	strb	r2, [r3, #0]
 80062f2:	b01c      	add	sp, #112	; 0x70
 80062f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80062f8:	b003      	add	sp, #12
 80062fa:	4770      	bx	lr
 80062fc:	20000064 	.word	0x20000064
 8006300:	ffff0208 	.word	0xffff0208

08006304 <__sread>:
 8006304:	b510      	push	{r4, lr}
 8006306:	460c      	mov	r4, r1
 8006308:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800630c:	f000 f86c 	bl	80063e8 <_read_r>
 8006310:	2800      	cmp	r0, #0
 8006312:	bfab      	itete	ge
 8006314:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006316:	89a3      	ldrhlt	r3, [r4, #12]
 8006318:	181b      	addge	r3, r3, r0
 800631a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800631e:	bfac      	ite	ge
 8006320:	6563      	strge	r3, [r4, #84]	; 0x54
 8006322:	81a3      	strhlt	r3, [r4, #12]
 8006324:	bd10      	pop	{r4, pc}

08006326 <__swrite>:
 8006326:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800632a:	461f      	mov	r7, r3
 800632c:	898b      	ldrh	r3, [r1, #12]
 800632e:	05db      	lsls	r3, r3, #23
 8006330:	4605      	mov	r5, r0
 8006332:	460c      	mov	r4, r1
 8006334:	4616      	mov	r6, r2
 8006336:	d505      	bpl.n	8006344 <__swrite+0x1e>
 8006338:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800633c:	2302      	movs	r3, #2
 800633e:	2200      	movs	r2, #0
 8006340:	f000 f840 	bl	80063c4 <_lseek_r>
 8006344:	89a3      	ldrh	r3, [r4, #12]
 8006346:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800634a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800634e:	81a3      	strh	r3, [r4, #12]
 8006350:	4632      	mov	r2, r6
 8006352:	463b      	mov	r3, r7
 8006354:	4628      	mov	r0, r5
 8006356:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800635a:	f000 b857 	b.w	800640c <_write_r>

0800635e <__sseek>:
 800635e:	b510      	push	{r4, lr}
 8006360:	460c      	mov	r4, r1
 8006362:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006366:	f000 f82d 	bl	80063c4 <_lseek_r>
 800636a:	1c43      	adds	r3, r0, #1
 800636c:	89a3      	ldrh	r3, [r4, #12]
 800636e:	bf15      	itete	ne
 8006370:	6560      	strne	r0, [r4, #84]	; 0x54
 8006372:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006376:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800637a:	81a3      	strheq	r3, [r4, #12]
 800637c:	bf18      	it	ne
 800637e:	81a3      	strhne	r3, [r4, #12]
 8006380:	bd10      	pop	{r4, pc}

08006382 <__sclose>:
 8006382:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006386:	f000 b80d 	b.w	80063a4 <_close_r>

0800638a <memset>:
 800638a:	4402      	add	r2, r0
 800638c:	4603      	mov	r3, r0
 800638e:	4293      	cmp	r3, r2
 8006390:	d100      	bne.n	8006394 <memset+0xa>
 8006392:	4770      	bx	lr
 8006394:	f803 1b01 	strb.w	r1, [r3], #1
 8006398:	e7f9      	b.n	800638e <memset+0x4>
	...

0800639c <_localeconv_r>:
 800639c:	4800      	ldr	r0, [pc, #0]	; (80063a0 <_localeconv_r+0x4>)
 800639e:	4770      	bx	lr
 80063a0:	20000158 	.word	0x20000158

080063a4 <_close_r>:
 80063a4:	b538      	push	{r3, r4, r5, lr}
 80063a6:	4d06      	ldr	r5, [pc, #24]	; (80063c0 <_close_r+0x1c>)
 80063a8:	2300      	movs	r3, #0
 80063aa:	4604      	mov	r4, r0
 80063ac:	4608      	mov	r0, r1
 80063ae:	602b      	str	r3, [r5, #0]
 80063b0:	f7fb f855 	bl	800145e <_close>
 80063b4:	1c43      	adds	r3, r0, #1
 80063b6:	d102      	bne.n	80063be <_close_r+0x1a>
 80063b8:	682b      	ldr	r3, [r5, #0]
 80063ba:	b103      	cbz	r3, 80063be <_close_r+0x1a>
 80063bc:	6023      	str	r3, [r4, #0]
 80063be:	bd38      	pop	{r3, r4, r5, pc}
 80063c0:	2000044c 	.word	0x2000044c

080063c4 <_lseek_r>:
 80063c4:	b538      	push	{r3, r4, r5, lr}
 80063c6:	4d07      	ldr	r5, [pc, #28]	; (80063e4 <_lseek_r+0x20>)
 80063c8:	4604      	mov	r4, r0
 80063ca:	4608      	mov	r0, r1
 80063cc:	4611      	mov	r1, r2
 80063ce:	2200      	movs	r2, #0
 80063d0:	602a      	str	r2, [r5, #0]
 80063d2:	461a      	mov	r2, r3
 80063d4:	f7fb f86a 	bl	80014ac <_lseek>
 80063d8:	1c43      	adds	r3, r0, #1
 80063da:	d102      	bne.n	80063e2 <_lseek_r+0x1e>
 80063dc:	682b      	ldr	r3, [r5, #0]
 80063de:	b103      	cbz	r3, 80063e2 <_lseek_r+0x1e>
 80063e0:	6023      	str	r3, [r4, #0]
 80063e2:	bd38      	pop	{r3, r4, r5, pc}
 80063e4:	2000044c 	.word	0x2000044c

080063e8 <_read_r>:
 80063e8:	b538      	push	{r3, r4, r5, lr}
 80063ea:	4d07      	ldr	r5, [pc, #28]	; (8006408 <_read_r+0x20>)
 80063ec:	4604      	mov	r4, r0
 80063ee:	4608      	mov	r0, r1
 80063f0:	4611      	mov	r1, r2
 80063f2:	2200      	movs	r2, #0
 80063f4:	602a      	str	r2, [r5, #0]
 80063f6:	461a      	mov	r2, r3
 80063f8:	f7fa fff8 	bl	80013ec <_read>
 80063fc:	1c43      	adds	r3, r0, #1
 80063fe:	d102      	bne.n	8006406 <_read_r+0x1e>
 8006400:	682b      	ldr	r3, [r5, #0]
 8006402:	b103      	cbz	r3, 8006406 <_read_r+0x1e>
 8006404:	6023      	str	r3, [r4, #0]
 8006406:	bd38      	pop	{r3, r4, r5, pc}
 8006408:	2000044c 	.word	0x2000044c

0800640c <_write_r>:
 800640c:	b538      	push	{r3, r4, r5, lr}
 800640e:	4d07      	ldr	r5, [pc, #28]	; (800642c <_write_r+0x20>)
 8006410:	4604      	mov	r4, r0
 8006412:	4608      	mov	r0, r1
 8006414:	4611      	mov	r1, r2
 8006416:	2200      	movs	r2, #0
 8006418:	602a      	str	r2, [r5, #0]
 800641a:	461a      	mov	r2, r3
 800641c:	f7fb f803 	bl	8001426 <_write>
 8006420:	1c43      	adds	r3, r0, #1
 8006422:	d102      	bne.n	800642a <_write_r+0x1e>
 8006424:	682b      	ldr	r3, [r5, #0]
 8006426:	b103      	cbz	r3, 800642a <_write_r+0x1e>
 8006428:	6023      	str	r3, [r4, #0]
 800642a:	bd38      	pop	{r3, r4, r5, pc}
 800642c:	2000044c 	.word	0x2000044c

08006430 <__errno>:
 8006430:	4b01      	ldr	r3, [pc, #4]	; (8006438 <__errno+0x8>)
 8006432:	6818      	ldr	r0, [r3, #0]
 8006434:	4770      	bx	lr
 8006436:	bf00      	nop
 8006438:	20000064 	.word	0x20000064

0800643c <__libc_init_array>:
 800643c:	b570      	push	{r4, r5, r6, lr}
 800643e:	4d0d      	ldr	r5, [pc, #52]	; (8006474 <__libc_init_array+0x38>)
 8006440:	4c0d      	ldr	r4, [pc, #52]	; (8006478 <__libc_init_array+0x3c>)
 8006442:	1b64      	subs	r4, r4, r5
 8006444:	10a4      	asrs	r4, r4, #2
 8006446:	2600      	movs	r6, #0
 8006448:	42a6      	cmp	r6, r4
 800644a:	d109      	bne.n	8006460 <__libc_init_array+0x24>
 800644c:	4d0b      	ldr	r5, [pc, #44]	; (800647c <__libc_init_array+0x40>)
 800644e:	4c0c      	ldr	r4, [pc, #48]	; (8006480 <__libc_init_array+0x44>)
 8006450:	f002 f896 	bl	8008580 <_init>
 8006454:	1b64      	subs	r4, r4, r5
 8006456:	10a4      	asrs	r4, r4, #2
 8006458:	2600      	movs	r6, #0
 800645a:	42a6      	cmp	r6, r4
 800645c:	d105      	bne.n	800646a <__libc_init_array+0x2e>
 800645e:	bd70      	pop	{r4, r5, r6, pc}
 8006460:	f855 3b04 	ldr.w	r3, [r5], #4
 8006464:	4798      	blx	r3
 8006466:	3601      	adds	r6, #1
 8006468:	e7ee      	b.n	8006448 <__libc_init_array+0xc>
 800646a:	f855 3b04 	ldr.w	r3, [r5], #4
 800646e:	4798      	blx	r3
 8006470:	3601      	adds	r6, #1
 8006472:	e7f2      	b.n	800645a <__libc_init_array+0x1e>
 8006474:	08008974 	.word	0x08008974
 8006478:	08008974 	.word	0x08008974
 800647c:	08008974 	.word	0x08008974
 8006480:	08008978 	.word	0x08008978

08006484 <__retarget_lock_init_recursive>:
 8006484:	4770      	bx	lr

08006486 <__retarget_lock_acquire_recursive>:
 8006486:	4770      	bx	lr

08006488 <__retarget_lock_release_recursive>:
 8006488:	4770      	bx	lr

0800648a <quorem>:
 800648a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800648e:	6903      	ldr	r3, [r0, #16]
 8006490:	690c      	ldr	r4, [r1, #16]
 8006492:	42a3      	cmp	r3, r4
 8006494:	4607      	mov	r7, r0
 8006496:	db7e      	blt.n	8006596 <quorem+0x10c>
 8006498:	3c01      	subs	r4, #1
 800649a:	f101 0814 	add.w	r8, r1, #20
 800649e:	f100 0514 	add.w	r5, r0, #20
 80064a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80064a6:	9301      	str	r3, [sp, #4]
 80064a8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80064ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80064b0:	3301      	adds	r3, #1
 80064b2:	429a      	cmp	r2, r3
 80064b4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80064b8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80064bc:	fbb2 f6f3 	udiv	r6, r2, r3
 80064c0:	d331      	bcc.n	8006526 <quorem+0x9c>
 80064c2:	f04f 0e00 	mov.w	lr, #0
 80064c6:	4640      	mov	r0, r8
 80064c8:	46ac      	mov	ip, r5
 80064ca:	46f2      	mov	sl, lr
 80064cc:	f850 2b04 	ldr.w	r2, [r0], #4
 80064d0:	b293      	uxth	r3, r2
 80064d2:	fb06 e303 	mla	r3, r6, r3, lr
 80064d6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80064da:	0c1a      	lsrs	r2, r3, #16
 80064dc:	b29b      	uxth	r3, r3
 80064de:	ebaa 0303 	sub.w	r3, sl, r3
 80064e2:	f8dc a000 	ldr.w	sl, [ip]
 80064e6:	fa13 f38a 	uxtah	r3, r3, sl
 80064ea:	fb06 220e 	mla	r2, r6, lr, r2
 80064ee:	9300      	str	r3, [sp, #0]
 80064f0:	9b00      	ldr	r3, [sp, #0]
 80064f2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80064f6:	b292      	uxth	r2, r2
 80064f8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80064fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006500:	f8bd 3000 	ldrh.w	r3, [sp]
 8006504:	4581      	cmp	r9, r0
 8006506:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800650a:	f84c 3b04 	str.w	r3, [ip], #4
 800650e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006512:	d2db      	bcs.n	80064cc <quorem+0x42>
 8006514:	f855 300b 	ldr.w	r3, [r5, fp]
 8006518:	b92b      	cbnz	r3, 8006526 <quorem+0x9c>
 800651a:	9b01      	ldr	r3, [sp, #4]
 800651c:	3b04      	subs	r3, #4
 800651e:	429d      	cmp	r5, r3
 8006520:	461a      	mov	r2, r3
 8006522:	d32c      	bcc.n	800657e <quorem+0xf4>
 8006524:	613c      	str	r4, [r7, #16]
 8006526:	4638      	mov	r0, r7
 8006528:	f001 f9a8 	bl	800787c <__mcmp>
 800652c:	2800      	cmp	r0, #0
 800652e:	db22      	blt.n	8006576 <quorem+0xec>
 8006530:	3601      	adds	r6, #1
 8006532:	4629      	mov	r1, r5
 8006534:	2000      	movs	r0, #0
 8006536:	f858 2b04 	ldr.w	r2, [r8], #4
 800653a:	f8d1 c000 	ldr.w	ip, [r1]
 800653e:	b293      	uxth	r3, r2
 8006540:	1ac3      	subs	r3, r0, r3
 8006542:	0c12      	lsrs	r2, r2, #16
 8006544:	fa13 f38c 	uxtah	r3, r3, ip
 8006548:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800654c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006550:	b29b      	uxth	r3, r3
 8006552:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006556:	45c1      	cmp	r9, r8
 8006558:	f841 3b04 	str.w	r3, [r1], #4
 800655c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006560:	d2e9      	bcs.n	8006536 <quorem+0xac>
 8006562:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006566:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800656a:	b922      	cbnz	r2, 8006576 <quorem+0xec>
 800656c:	3b04      	subs	r3, #4
 800656e:	429d      	cmp	r5, r3
 8006570:	461a      	mov	r2, r3
 8006572:	d30a      	bcc.n	800658a <quorem+0x100>
 8006574:	613c      	str	r4, [r7, #16]
 8006576:	4630      	mov	r0, r6
 8006578:	b003      	add	sp, #12
 800657a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800657e:	6812      	ldr	r2, [r2, #0]
 8006580:	3b04      	subs	r3, #4
 8006582:	2a00      	cmp	r2, #0
 8006584:	d1ce      	bne.n	8006524 <quorem+0x9a>
 8006586:	3c01      	subs	r4, #1
 8006588:	e7c9      	b.n	800651e <quorem+0x94>
 800658a:	6812      	ldr	r2, [r2, #0]
 800658c:	3b04      	subs	r3, #4
 800658e:	2a00      	cmp	r2, #0
 8006590:	d1f0      	bne.n	8006574 <quorem+0xea>
 8006592:	3c01      	subs	r4, #1
 8006594:	e7eb      	b.n	800656e <quorem+0xe4>
 8006596:	2000      	movs	r0, #0
 8006598:	e7ee      	b.n	8006578 <quorem+0xee>
 800659a:	0000      	movs	r0, r0
 800659c:	0000      	movs	r0, r0
	...

080065a0 <_dtoa_r>:
 80065a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065a4:	ed2d 8b04 	vpush	{d8-d9}
 80065a8:	69c5      	ldr	r5, [r0, #28]
 80065aa:	b093      	sub	sp, #76	; 0x4c
 80065ac:	ed8d 0b02 	vstr	d0, [sp, #8]
 80065b0:	ec57 6b10 	vmov	r6, r7, d0
 80065b4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80065b8:	9107      	str	r1, [sp, #28]
 80065ba:	4604      	mov	r4, r0
 80065bc:	920a      	str	r2, [sp, #40]	; 0x28
 80065be:	930d      	str	r3, [sp, #52]	; 0x34
 80065c0:	b975      	cbnz	r5, 80065e0 <_dtoa_r+0x40>
 80065c2:	2010      	movs	r0, #16
 80065c4:	f000 fe2a 	bl	800721c <malloc>
 80065c8:	4602      	mov	r2, r0
 80065ca:	61e0      	str	r0, [r4, #28]
 80065cc:	b920      	cbnz	r0, 80065d8 <_dtoa_r+0x38>
 80065ce:	4bae      	ldr	r3, [pc, #696]	; (8006888 <_dtoa_r+0x2e8>)
 80065d0:	21ef      	movs	r1, #239	; 0xef
 80065d2:	48ae      	ldr	r0, [pc, #696]	; (800688c <_dtoa_r+0x2ec>)
 80065d4:	f001 fc90 	bl	8007ef8 <__assert_func>
 80065d8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80065dc:	6005      	str	r5, [r0, #0]
 80065de:	60c5      	str	r5, [r0, #12]
 80065e0:	69e3      	ldr	r3, [r4, #28]
 80065e2:	6819      	ldr	r1, [r3, #0]
 80065e4:	b151      	cbz	r1, 80065fc <_dtoa_r+0x5c>
 80065e6:	685a      	ldr	r2, [r3, #4]
 80065e8:	604a      	str	r2, [r1, #4]
 80065ea:	2301      	movs	r3, #1
 80065ec:	4093      	lsls	r3, r2
 80065ee:	608b      	str	r3, [r1, #8]
 80065f0:	4620      	mov	r0, r4
 80065f2:	f000 ff07 	bl	8007404 <_Bfree>
 80065f6:	69e3      	ldr	r3, [r4, #28]
 80065f8:	2200      	movs	r2, #0
 80065fa:	601a      	str	r2, [r3, #0]
 80065fc:	1e3b      	subs	r3, r7, #0
 80065fe:	bfbb      	ittet	lt
 8006600:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006604:	9303      	strlt	r3, [sp, #12]
 8006606:	2300      	movge	r3, #0
 8006608:	2201      	movlt	r2, #1
 800660a:	bfac      	ite	ge
 800660c:	f8c8 3000 	strge.w	r3, [r8]
 8006610:	f8c8 2000 	strlt.w	r2, [r8]
 8006614:	4b9e      	ldr	r3, [pc, #632]	; (8006890 <_dtoa_r+0x2f0>)
 8006616:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800661a:	ea33 0308 	bics.w	r3, r3, r8
 800661e:	d11b      	bne.n	8006658 <_dtoa_r+0xb8>
 8006620:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006622:	f242 730f 	movw	r3, #9999	; 0x270f
 8006626:	6013      	str	r3, [r2, #0]
 8006628:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800662c:	4333      	orrs	r3, r6
 800662e:	f000 8593 	beq.w	8007158 <_dtoa_r+0xbb8>
 8006632:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006634:	b963      	cbnz	r3, 8006650 <_dtoa_r+0xb0>
 8006636:	4b97      	ldr	r3, [pc, #604]	; (8006894 <_dtoa_r+0x2f4>)
 8006638:	e027      	b.n	800668a <_dtoa_r+0xea>
 800663a:	4b97      	ldr	r3, [pc, #604]	; (8006898 <_dtoa_r+0x2f8>)
 800663c:	9300      	str	r3, [sp, #0]
 800663e:	3308      	adds	r3, #8
 8006640:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006642:	6013      	str	r3, [r2, #0]
 8006644:	9800      	ldr	r0, [sp, #0]
 8006646:	b013      	add	sp, #76	; 0x4c
 8006648:	ecbd 8b04 	vpop	{d8-d9}
 800664c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006650:	4b90      	ldr	r3, [pc, #576]	; (8006894 <_dtoa_r+0x2f4>)
 8006652:	9300      	str	r3, [sp, #0]
 8006654:	3303      	adds	r3, #3
 8006656:	e7f3      	b.n	8006640 <_dtoa_r+0xa0>
 8006658:	ed9d 7b02 	vldr	d7, [sp, #8]
 800665c:	2200      	movs	r2, #0
 800665e:	ec51 0b17 	vmov	r0, r1, d7
 8006662:	eeb0 8a47 	vmov.f32	s16, s14
 8006666:	eef0 8a67 	vmov.f32	s17, s15
 800666a:	2300      	movs	r3, #0
 800666c:	f7fa fa2c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006670:	4681      	mov	r9, r0
 8006672:	b160      	cbz	r0, 800668e <_dtoa_r+0xee>
 8006674:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006676:	2301      	movs	r3, #1
 8006678:	6013      	str	r3, [r2, #0]
 800667a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800667c:	2b00      	cmp	r3, #0
 800667e:	f000 8568 	beq.w	8007152 <_dtoa_r+0xbb2>
 8006682:	4b86      	ldr	r3, [pc, #536]	; (800689c <_dtoa_r+0x2fc>)
 8006684:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006686:	6013      	str	r3, [r2, #0]
 8006688:	3b01      	subs	r3, #1
 800668a:	9300      	str	r3, [sp, #0]
 800668c:	e7da      	b.n	8006644 <_dtoa_r+0xa4>
 800668e:	aa10      	add	r2, sp, #64	; 0x40
 8006690:	a911      	add	r1, sp, #68	; 0x44
 8006692:	4620      	mov	r0, r4
 8006694:	eeb0 0a48 	vmov.f32	s0, s16
 8006698:	eef0 0a68 	vmov.f32	s1, s17
 800669c:	f001 f994 	bl	80079c8 <__d2b>
 80066a0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80066a4:	4682      	mov	sl, r0
 80066a6:	2d00      	cmp	r5, #0
 80066a8:	d07f      	beq.n	80067aa <_dtoa_r+0x20a>
 80066aa:	ee18 3a90 	vmov	r3, s17
 80066ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80066b2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80066b6:	ec51 0b18 	vmov	r0, r1, d8
 80066ba:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80066be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80066c2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80066c6:	4619      	mov	r1, r3
 80066c8:	2200      	movs	r2, #0
 80066ca:	4b75      	ldr	r3, [pc, #468]	; (80068a0 <_dtoa_r+0x300>)
 80066cc:	f7f9 fddc 	bl	8000288 <__aeabi_dsub>
 80066d0:	a367      	add	r3, pc, #412	; (adr r3, 8006870 <_dtoa_r+0x2d0>)
 80066d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d6:	f7f9 ff8f 	bl	80005f8 <__aeabi_dmul>
 80066da:	a367      	add	r3, pc, #412	; (adr r3, 8006878 <_dtoa_r+0x2d8>)
 80066dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e0:	f7f9 fdd4 	bl	800028c <__adddf3>
 80066e4:	4606      	mov	r6, r0
 80066e6:	4628      	mov	r0, r5
 80066e8:	460f      	mov	r7, r1
 80066ea:	f7f9 ff1b 	bl	8000524 <__aeabi_i2d>
 80066ee:	a364      	add	r3, pc, #400	; (adr r3, 8006880 <_dtoa_r+0x2e0>)
 80066f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f4:	f7f9 ff80 	bl	80005f8 <__aeabi_dmul>
 80066f8:	4602      	mov	r2, r0
 80066fa:	460b      	mov	r3, r1
 80066fc:	4630      	mov	r0, r6
 80066fe:	4639      	mov	r1, r7
 8006700:	f7f9 fdc4 	bl	800028c <__adddf3>
 8006704:	4606      	mov	r6, r0
 8006706:	460f      	mov	r7, r1
 8006708:	f7fa fa26 	bl	8000b58 <__aeabi_d2iz>
 800670c:	2200      	movs	r2, #0
 800670e:	4683      	mov	fp, r0
 8006710:	2300      	movs	r3, #0
 8006712:	4630      	mov	r0, r6
 8006714:	4639      	mov	r1, r7
 8006716:	f7fa f9e1 	bl	8000adc <__aeabi_dcmplt>
 800671a:	b148      	cbz	r0, 8006730 <_dtoa_r+0x190>
 800671c:	4658      	mov	r0, fp
 800671e:	f7f9 ff01 	bl	8000524 <__aeabi_i2d>
 8006722:	4632      	mov	r2, r6
 8006724:	463b      	mov	r3, r7
 8006726:	f7fa f9cf 	bl	8000ac8 <__aeabi_dcmpeq>
 800672a:	b908      	cbnz	r0, 8006730 <_dtoa_r+0x190>
 800672c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006730:	f1bb 0f16 	cmp.w	fp, #22
 8006734:	d857      	bhi.n	80067e6 <_dtoa_r+0x246>
 8006736:	4b5b      	ldr	r3, [pc, #364]	; (80068a4 <_dtoa_r+0x304>)
 8006738:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800673c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006740:	ec51 0b18 	vmov	r0, r1, d8
 8006744:	f7fa f9ca 	bl	8000adc <__aeabi_dcmplt>
 8006748:	2800      	cmp	r0, #0
 800674a:	d04e      	beq.n	80067ea <_dtoa_r+0x24a>
 800674c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006750:	2300      	movs	r3, #0
 8006752:	930c      	str	r3, [sp, #48]	; 0x30
 8006754:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006756:	1b5b      	subs	r3, r3, r5
 8006758:	1e5a      	subs	r2, r3, #1
 800675a:	bf45      	ittet	mi
 800675c:	f1c3 0301 	rsbmi	r3, r3, #1
 8006760:	9305      	strmi	r3, [sp, #20]
 8006762:	2300      	movpl	r3, #0
 8006764:	2300      	movmi	r3, #0
 8006766:	9206      	str	r2, [sp, #24]
 8006768:	bf54      	ite	pl
 800676a:	9305      	strpl	r3, [sp, #20]
 800676c:	9306      	strmi	r3, [sp, #24]
 800676e:	f1bb 0f00 	cmp.w	fp, #0
 8006772:	db3c      	blt.n	80067ee <_dtoa_r+0x24e>
 8006774:	9b06      	ldr	r3, [sp, #24]
 8006776:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800677a:	445b      	add	r3, fp
 800677c:	9306      	str	r3, [sp, #24]
 800677e:	2300      	movs	r3, #0
 8006780:	9308      	str	r3, [sp, #32]
 8006782:	9b07      	ldr	r3, [sp, #28]
 8006784:	2b09      	cmp	r3, #9
 8006786:	d868      	bhi.n	800685a <_dtoa_r+0x2ba>
 8006788:	2b05      	cmp	r3, #5
 800678a:	bfc4      	itt	gt
 800678c:	3b04      	subgt	r3, #4
 800678e:	9307      	strgt	r3, [sp, #28]
 8006790:	9b07      	ldr	r3, [sp, #28]
 8006792:	f1a3 0302 	sub.w	r3, r3, #2
 8006796:	bfcc      	ite	gt
 8006798:	2500      	movgt	r5, #0
 800679a:	2501      	movle	r5, #1
 800679c:	2b03      	cmp	r3, #3
 800679e:	f200 8085 	bhi.w	80068ac <_dtoa_r+0x30c>
 80067a2:	e8df f003 	tbb	[pc, r3]
 80067a6:	3b2e      	.short	0x3b2e
 80067a8:	5839      	.short	0x5839
 80067aa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80067ae:	441d      	add	r5, r3
 80067b0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80067b4:	2b20      	cmp	r3, #32
 80067b6:	bfc1      	itttt	gt
 80067b8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80067bc:	fa08 f803 	lslgt.w	r8, r8, r3
 80067c0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80067c4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80067c8:	bfd6      	itet	le
 80067ca:	f1c3 0320 	rsble	r3, r3, #32
 80067ce:	ea48 0003 	orrgt.w	r0, r8, r3
 80067d2:	fa06 f003 	lslle.w	r0, r6, r3
 80067d6:	f7f9 fe95 	bl	8000504 <__aeabi_ui2d>
 80067da:	2201      	movs	r2, #1
 80067dc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80067e0:	3d01      	subs	r5, #1
 80067e2:	920e      	str	r2, [sp, #56]	; 0x38
 80067e4:	e76f      	b.n	80066c6 <_dtoa_r+0x126>
 80067e6:	2301      	movs	r3, #1
 80067e8:	e7b3      	b.n	8006752 <_dtoa_r+0x1b2>
 80067ea:	900c      	str	r0, [sp, #48]	; 0x30
 80067ec:	e7b2      	b.n	8006754 <_dtoa_r+0x1b4>
 80067ee:	9b05      	ldr	r3, [sp, #20]
 80067f0:	eba3 030b 	sub.w	r3, r3, fp
 80067f4:	9305      	str	r3, [sp, #20]
 80067f6:	f1cb 0300 	rsb	r3, fp, #0
 80067fa:	9308      	str	r3, [sp, #32]
 80067fc:	2300      	movs	r3, #0
 80067fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8006800:	e7bf      	b.n	8006782 <_dtoa_r+0x1e2>
 8006802:	2300      	movs	r3, #0
 8006804:	9309      	str	r3, [sp, #36]	; 0x24
 8006806:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006808:	2b00      	cmp	r3, #0
 800680a:	dc52      	bgt.n	80068b2 <_dtoa_r+0x312>
 800680c:	2301      	movs	r3, #1
 800680e:	9301      	str	r3, [sp, #4]
 8006810:	9304      	str	r3, [sp, #16]
 8006812:	461a      	mov	r2, r3
 8006814:	920a      	str	r2, [sp, #40]	; 0x28
 8006816:	e00b      	b.n	8006830 <_dtoa_r+0x290>
 8006818:	2301      	movs	r3, #1
 800681a:	e7f3      	b.n	8006804 <_dtoa_r+0x264>
 800681c:	2300      	movs	r3, #0
 800681e:	9309      	str	r3, [sp, #36]	; 0x24
 8006820:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006822:	445b      	add	r3, fp
 8006824:	9301      	str	r3, [sp, #4]
 8006826:	3301      	adds	r3, #1
 8006828:	2b01      	cmp	r3, #1
 800682a:	9304      	str	r3, [sp, #16]
 800682c:	bfb8      	it	lt
 800682e:	2301      	movlt	r3, #1
 8006830:	69e0      	ldr	r0, [r4, #28]
 8006832:	2100      	movs	r1, #0
 8006834:	2204      	movs	r2, #4
 8006836:	f102 0614 	add.w	r6, r2, #20
 800683a:	429e      	cmp	r6, r3
 800683c:	d93d      	bls.n	80068ba <_dtoa_r+0x31a>
 800683e:	6041      	str	r1, [r0, #4]
 8006840:	4620      	mov	r0, r4
 8006842:	f000 fd9f 	bl	8007384 <_Balloc>
 8006846:	9000      	str	r0, [sp, #0]
 8006848:	2800      	cmp	r0, #0
 800684a:	d139      	bne.n	80068c0 <_dtoa_r+0x320>
 800684c:	4b16      	ldr	r3, [pc, #88]	; (80068a8 <_dtoa_r+0x308>)
 800684e:	4602      	mov	r2, r0
 8006850:	f240 11af 	movw	r1, #431	; 0x1af
 8006854:	e6bd      	b.n	80065d2 <_dtoa_r+0x32>
 8006856:	2301      	movs	r3, #1
 8006858:	e7e1      	b.n	800681e <_dtoa_r+0x27e>
 800685a:	2501      	movs	r5, #1
 800685c:	2300      	movs	r3, #0
 800685e:	9307      	str	r3, [sp, #28]
 8006860:	9509      	str	r5, [sp, #36]	; 0x24
 8006862:	f04f 33ff 	mov.w	r3, #4294967295
 8006866:	9301      	str	r3, [sp, #4]
 8006868:	9304      	str	r3, [sp, #16]
 800686a:	2200      	movs	r2, #0
 800686c:	2312      	movs	r3, #18
 800686e:	e7d1      	b.n	8006814 <_dtoa_r+0x274>
 8006870:	636f4361 	.word	0x636f4361
 8006874:	3fd287a7 	.word	0x3fd287a7
 8006878:	8b60c8b3 	.word	0x8b60c8b3
 800687c:	3fc68a28 	.word	0x3fc68a28
 8006880:	509f79fb 	.word	0x509f79fb
 8006884:	3fd34413 	.word	0x3fd34413
 8006888:	0800863d 	.word	0x0800863d
 800688c:	08008654 	.word	0x08008654
 8006890:	7ff00000 	.word	0x7ff00000
 8006894:	08008639 	.word	0x08008639
 8006898:	08008630 	.word	0x08008630
 800689c:	0800860d 	.word	0x0800860d
 80068a0:	3ff80000 	.word	0x3ff80000
 80068a4:	08008740 	.word	0x08008740
 80068a8:	080086ac 	.word	0x080086ac
 80068ac:	2301      	movs	r3, #1
 80068ae:	9309      	str	r3, [sp, #36]	; 0x24
 80068b0:	e7d7      	b.n	8006862 <_dtoa_r+0x2c2>
 80068b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068b4:	9301      	str	r3, [sp, #4]
 80068b6:	9304      	str	r3, [sp, #16]
 80068b8:	e7ba      	b.n	8006830 <_dtoa_r+0x290>
 80068ba:	3101      	adds	r1, #1
 80068bc:	0052      	lsls	r2, r2, #1
 80068be:	e7ba      	b.n	8006836 <_dtoa_r+0x296>
 80068c0:	69e3      	ldr	r3, [r4, #28]
 80068c2:	9a00      	ldr	r2, [sp, #0]
 80068c4:	601a      	str	r2, [r3, #0]
 80068c6:	9b04      	ldr	r3, [sp, #16]
 80068c8:	2b0e      	cmp	r3, #14
 80068ca:	f200 80a8 	bhi.w	8006a1e <_dtoa_r+0x47e>
 80068ce:	2d00      	cmp	r5, #0
 80068d0:	f000 80a5 	beq.w	8006a1e <_dtoa_r+0x47e>
 80068d4:	f1bb 0f00 	cmp.w	fp, #0
 80068d8:	dd38      	ble.n	800694c <_dtoa_r+0x3ac>
 80068da:	4bc0      	ldr	r3, [pc, #768]	; (8006bdc <_dtoa_r+0x63c>)
 80068dc:	f00b 020f 	and.w	r2, fp, #15
 80068e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80068e4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80068e8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80068ec:	ea4f 182b 	mov.w	r8, fp, asr #4
 80068f0:	d019      	beq.n	8006926 <_dtoa_r+0x386>
 80068f2:	4bbb      	ldr	r3, [pc, #748]	; (8006be0 <_dtoa_r+0x640>)
 80068f4:	ec51 0b18 	vmov	r0, r1, d8
 80068f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80068fc:	f7f9 ffa6 	bl	800084c <__aeabi_ddiv>
 8006900:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006904:	f008 080f 	and.w	r8, r8, #15
 8006908:	2503      	movs	r5, #3
 800690a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006be0 <_dtoa_r+0x640>
 800690e:	f1b8 0f00 	cmp.w	r8, #0
 8006912:	d10a      	bne.n	800692a <_dtoa_r+0x38a>
 8006914:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006918:	4632      	mov	r2, r6
 800691a:	463b      	mov	r3, r7
 800691c:	f7f9 ff96 	bl	800084c <__aeabi_ddiv>
 8006920:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006924:	e02b      	b.n	800697e <_dtoa_r+0x3de>
 8006926:	2502      	movs	r5, #2
 8006928:	e7ef      	b.n	800690a <_dtoa_r+0x36a>
 800692a:	f018 0f01 	tst.w	r8, #1
 800692e:	d008      	beq.n	8006942 <_dtoa_r+0x3a2>
 8006930:	4630      	mov	r0, r6
 8006932:	4639      	mov	r1, r7
 8006934:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006938:	f7f9 fe5e 	bl	80005f8 <__aeabi_dmul>
 800693c:	3501      	adds	r5, #1
 800693e:	4606      	mov	r6, r0
 8006940:	460f      	mov	r7, r1
 8006942:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006946:	f109 0908 	add.w	r9, r9, #8
 800694a:	e7e0      	b.n	800690e <_dtoa_r+0x36e>
 800694c:	f000 809f 	beq.w	8006a8e <_dtoa_r+0x4ee>
 8006950:	f1cb 0600 	rsb	r6, fp, #0
 8006954:	4ba1      	ldr	r3, [pc, #644]	; (8006bdc <_dtoa_r+0x63c>)
 8006956:	4fa2      	ldr	r7, [pc, #648]	; (8006be0 <_dtoa_r+0x640>)
 8006958:	f006 020f 	and.w	r2, r6, #15
 800695c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006964:	ec51 0b18 	vmov	r0, r1, d8
 8006968:	f7f9 fe46 	bl	80005f8 <__aeabi_dmul>
 800696c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006970:	1136      	asrs	r6, r6, #4
 8006972:	2300      	movs	r3, #0
 8006974:	2502      	movs	r5, #2
 8006976:	2e00      	cmp	r6, #0
 8006978:	d17e      	bne.n	8006a78 <_dtoa_r+0x4d8>
 800697a:	2b00      	cmp	r3, #0
 800697c:	d1d0      	bne.n	8006920 <_dtoa_r+0x380>
 800697e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006980:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006984:	2b00      	cmp	r3, #0
 8006986:	f000 8084 	beq.w	8006a92 <_dtoa_r+0x4f2>
 800698a:	4b96      	ldr	r3, [pc, #600]	; (8006be4 <_dtoa_r+0x644>)
 800698c:	2200      	movs	r2, #0
 800698e:	4640      	mov	r0, r8
 8006990:	4649      	mov	r1, r9
 8006992:	f7fa f8a3 	bl	8000adc <__aeabi_dcmplt>
 8006996:	2800      	cmp	r0, #0
 8006998:	d07b      	beq.n	8006a92 <_dtoa_r+0x4f2>
 800699a:	9b04      	ldr	r3, [sp, #16]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d078      	beq.n	8006a92 <_dtoa_r+0x4f2>
 80069a0:	9b01      	ldr	r3, [sp, #4]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	dd39      	ble.n	8006a1a <_dtoa_r+0x47a>
 80069a6:	4b90      	ldr	r3, [pc, #576]	; (8006be8 <_dtoa_r+0x648>)
 80069a8:	2200      	movs	r2, #0
 80069aa:	4640      	mov	r0, r8
 80069ac:	4649      	mov	r1, r9
 80069ae:	f7f9 fe23 	bl	80005f8 <__aeabi_dmul>
 80069b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069b6:	9e01      	ldr	r6, [sp, #4]
 80069b8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80069bc:	3501      	adds	r5, #1
 80069be:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80069c2:	4628      	mov	r0, r5
 80069c4:	f7f9 fdae 	bl	8000524 <__aeabi_i2d>
 80069c8:	4642      	mov	r2, r8
 80069ca:	464b      	mov	r3, r9
 80069cc:	f7f9 fe14 	bl	80005f8 <__aeabi_dmul>
 80069d0:	4b86      	ldr	r3, [pc, #536]	; (8006bec <_dtoa_r+0x64c>)
 80069d2:	2200      	movs	r2, #0
 80069d4:	f7f9 fc5a 	bl	800028c <__adddf3>
 80069d8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80069dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069e0:	9303      	str	r3, [sp, #12]
 80069e2:	2e00      	cmp	r6, #0
 80069e4:	d158      	bne.n	8006a98 <_dtoa_r+0x4f8>
 80069e6:	4b82      	ldr	r3, [pc, #520]	; (8006bf0 <_dtoa_r+0x650>)
 80069e8:	2200      	movs	r2, #0
 80069ea:	4640      	mov	r0, r8
 80069ec:	4649      	mov	r1, r9
 80069ee:	f7f9 fc4b 	bl	8000288 <__aeabi_dsub>
 80069f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80069f6:	4680      	mov	r8, r0
 80069f8:	4689      	mov	r9, r1
 80069fa:	f7fa f88d 	bl	8000b18 <__aeabi_dcmpgt>
 80069fe:	2800      	cmp	r0, #0
 8006a00:	f040 8296 	bne.w	8006f30 <_dtoa_r+0x990>
 8006a04:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006a08:	4640      	mov	r0, r8
 8006a0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006a0e:	4649      	mov	r1, r9
 8006a10:	f7fa f864 	bl	8000adc <__aeabi_dcmplt>
 8006a14:	2800      	cmp	r0, #0
 8006a16:	f040 8289 	bne.w	8006f2c <_dtoa_r+0x98c>
 8006a1a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006a1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	f2c0 814e 	blt.w	8006cc2 <_dtoa_r+0x722>
 8006a26:	f1bb 0f0e 	cmp.w	fp, #14
 8006a2a:	f300 814a 	bgt.w	8006cc2 <_dtoa_r+0x722>
 8006a2e:	4b6b      	ldr	r3, [pc, #428]	; (8006bdc <_dtoa_r+0x63c>)
 8006a30:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006a34:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006a38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	f280 80dc 	bge.w	8006bf8 <_dtoa_r+0x658>
 8006a40:	9b04      	ldr	r3, [sp, #16]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	f300 80d8 	bgt.w	8006bf8 <_dtoa_r+0x658>
 8006a48:	f040 826f 	bne.w	8006f2a <_dtoa_r+0x98a>
 8006a4c:	4b68      	ldr	r3, [pc, #416]	; (8006bf0 <_dtoa_r+0x650>)
 8006a4e:	2200      	movs	r2, #0
 8006a50:	4640      	mov	r0, r8
 8006a52:	4649      	mov	r1, r9
 8006a54:	f7f9 fdd0 	bl	80005f8 <__aeabi_dmul>
 8006a58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a5c:	f7fa f852 	bl	8000b04 <__aeabi_dcmpge>
 8006a60:	9e04      	ldr	r6, [sp, #16]
 8006a62:	4637      	mov	r7, r6
 8006a64:	2800      	cmp	r0, #0
 8006a66:	f040 8245 	bne.w	8006ef4 <_dtoa_r+0x954>
 8006a6a:	9d00      	ldr	r5, [sp, #0]
 8006a6c:	2331      	movs	r3, #49	; 0x31
 8006a6e:	f805 3b01 	strb.w	r3, [r5], #1
 8006a72:	f10b 0b01 	add.w	fp, fp, #1
 8006a76:	e241      	b.n	8006efc <_dtoa_r+0x95c>
 8006a78:	07f2      	lsls	r2, r6, #31
 8006a7a:	d505      	bpl.n	8006a88 <_dtoa_r+0x4e8>
 8006a7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a80:	f7f9 fdba 	bl	80005f8 <__aeabi_dmul>
 8006a84:	3501      	adds	r5, #1
 8006a86:	2301      	movs	r3, #1
 8006a88:	1076      	asrs	r6, r6, #1
 8006a8a:	3708      	adds	r7, #8
 8006a8c:	e773      	b.n	8006976 <_dtoa_r+0x3d6>
 8006a8e:	2502      	movs	r5, #2
 8006a90:	e775      	b.n	800697e <_dtoa_r+0x3de>
 8006a92:	9e04      	ldr	r6, [sp, #16]
 8006a94:	465f      	mov	r7, fp
 8006a96:	e792      	b.n	80069be <_dtoa_r+0x41e>
 8006a98:	9900      	ldr	r1, [sp, #0]
 8006a9a:	4b50      	ldr	r3, [pc, #320]	; (8006bdc <_dtoa_r+0x63c>)
 8006a9c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006aa0:	4431      	add	r1, r6
 8006aa2:	9102      	str	r1, [sp, #8]
 8006aa4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006aa6:	eeb0 9a47 	vmov.f32	s18, s14
 8006aaa:	eef0 9a67 	vmov.f32	s19, s15
 8006aae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006ab2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006ab6:	2900      	cmp	r1, #0
 8006ab8:	d044      	beq.n	8006b44 <_dtoa_r+0x5a4>
 8006aba:	494e      	ldr	r1, [pc, #312]	; (8006bf4 <_dtoa_r+0x654>)
 8006abc:	2000      	movs	r0, #0
 8006abe:	f7f9 fec5 	bl	800084c <__aeabi_ddiv>
 8006ac2:	ec53 2b19 	vmov	r2, r3, d9
 8006ac6:	f7f9 fbdf 	bl	8000288 <__aeabi_dsub>
 8006aca:	9d00      	ldr	r5, [sp, #0]
 8006acc:	ec41 0b19 	vmov	d9, r0, r1
 8006ad0:	4649      	mov	r1, r9
 8006ad2:	4640      	mov	r0, r8
 8006ad4:	f7fa f840 	bl	8000b58 <__aeabi_d2iz>
 8006ad8:	4606      	mov	r6, r0
 8006ada:	f7f9 fd23 	bl	8000524 <__aeabi_i2d>
 8006ade:	4602      	mov	r2, r0
 8006ae0:	460b      	mov	r3, r1
 8006ae2:	4640      	mov	r0, r8
 8006ae4:	4649      	mov	r1, r9
 8006ae6:	f7f9 fbcf 	bl	8000288 <__aeabi_dsub>
 8006aea:	3630      	adds	r6, #48	; 0x30
 8006aec:	f805 6b01 	strb.w	r6, [r5], #1
 8006af0:	ec53 2b19 	vmov	r2, r3, d9
 8006af4:	4680      	mov	r8, r0
 8006af6:	4689      	mov	r9, r1
 8006af8:	f7f9 fff0 	bl	8000adc <__aeabi_dcmplt>
 8006afc:	2800      	cmp	r0, #0
 8006afe:	d164      	bne.n	8006bca <_dtoa_r+0x62a>
 8006b00:	4642      	mov	r2, r8
 8006b02:	464b      	mov	r3, r9
 8006b04:	4937      	ldr	r1, [pc, #220]	; (8006be4 <_dtoa_r+0x644>)
 8006b06:	2000      	movs	r0, #0
 8006b08:	f7f9 fbbe 	bl	8000288 <__aeabi_dsub>
 8006b0c:	ec53 2b19 	vmov	r2, r3, d9
 8006b10:	f7f9 ffe4 	bl	8000adc <__aeabi_dcmplt>
 8006b14:	2800      	cmp	r0, #0
 8006b16:	f040 80b6 	bne.w	8006c86 <_dtoa_r+0x6e6>
 8006b1a:	9b02      	ldr	r3, [sp, #8]
 8006b1c:	429d      	cmp	r5, r3
 8006b1e:	f43f af7c 	beq.w	8006a1a <_dtoa_r+0x47a>
 8006b22:	4b31      	ldr	r3, [pc, #196]	; (8006be8 <_dtoa_r+0x648>)
 8006b24:	ec51 0b19 	vmov	r0, r1, d9
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f7f9 fd65 	bl	80005f8 <__aeabi_dmul>
 8006b2e:	4b2e      	ldr	r3, [pc, #184]	; (8006be8 <_dtoa_r+0x648>)
 8006b30:	ec41 0b19 	vmov	d9, r0, r1
 8006b34:	2200      	movs	r2, #0
 8006b36:	4640      	mov	r0, r8
 8006b38:	4649      	mov	r1, r9
 8006b3a:	f7f9 fd5d 	bl	80005f8 <__aeabi_dmul>
 8006b3e:	4680      	mov	r8, r0
 8006b40:	4689      	mov	r9, r1
 8006b42:	e7c5      	b.n	8006ad0 <_dtoa_r+0x530>
 8006b44:	ec51 0b17 	vmov	r0, r1, d7
 8006b48:	f7f9 fd56 	bl	80005f8 <__aeabi_dmul>
 8006b4c:	9b02      	ldr	r3, [sp, #8]
 8006b4e:	9d00      	ldr	r5, [sp, #0]
 8006b50:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b52:	ec41 0b19 	vmov	d9, r0, r1
 8006b56:	4649      	mov	r1, r9
 8006b58:	4640      	mov	r0, r8
 8006b5a:	f7f9 fffd 	bl	8000b58 <__aeabi_d2iz>
 8006b5e:	4606      	mov	r6, r0
 8006b60:	f7f9 fce0 	bl	8000524 <__aeabi_i2d>
 8006b64:	3630      	adds	r6, #48	; 0x30
 8006b66:	4602      	mov	r2, r0
 8006b68:	460b      	mov	r3, r1
 8006b6a:	4640      	mov	r0, r8
 8006b6c:	4649      	mov	r1, r9
 8006b6e:	f7f9 fb8b 	bl	8000288 <__aeabi_dsub>
 8006b72:	f805 6b01 	strb.w	r6, [r5], #1
 8006b76:	9b02      	ldr	r3, [sp, #8]
 8006b78:	429d      	cmp	r5, r3
 8006b7a:	4680      	mov	r8, r0
 8006b7c:	4689      	mov	r9, r1
 8006b7e:	f04f 0200 	mov.w	r2, #0
 8006b82:	d124      	bne.n	8006bce <_dtoa_r+0x62e>
 8006b84:	4b1b      	ldr	r3, [pc, #108]	; (8006bf4 <_dtoa_r+0x654>)
 8006b86:	ec51 0b19 	vmov	r0, r1, d9
 8006b8a:	f7f9 fb7f 	bl	800028c <__adddf3>
 8006b8e:	4602      	mov	r2, r0
 8006b90:	460b      	mov	r3, r1
 8006b92:	4640      	mov	r0, r8
 8006b94:	4649      	mov	r1, r9
 8006b96:	f7f9 ffbf 	bl	8000b18 <__aeabi_dcmpgt>
 8006b9a:	2800      	cmp	r0, #0
 8006b9c:	d173      	bne.n	8006c86 <_dtoa_r+0x6e6>
 8006b9e:	ec53 2b19 	vmov	r2, r3, d9
 8006ba2:	4914      	ldr	r1, [pc, #80]	; (8006bf4 <_dtoa_r+0x654>)
 8006ba4:	2000      	movs	r0, #0
 8006ba6:	f7f9 fb6f 	bl	8000288 <__aeabi_dsub>
 8006baa:	4602      	mov	r2, r0
 8006bac:	460b      	mov	r3, r1
 8006bae:	4640      	mov	r0, r8
 8006bb0:	4649      	mov	r1, r9
 8006bb2:	f7f9 ff93 	bl	8000adc <__aeabi_dcmplt>
 8006bb6:	2800      	cmp	r0, #0
 8006bb8:	f43f af2f 	beq.w	8006a1a <_dtoa_r+0x47a>
 8006bbc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006bbe:	1e6b      	subs	r3, r5, #1
 8006bc0:	930f      	str	r3, [sp, #60]	; 0x3c
 8006bc2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006bc6:	2b30      	cmp	r3, #48	; 0x30
 8006bc8:	d0f8      	beq.n	8006bbc <_dtoa_r+0x61c>
 8006bca:	46bb      	mov	fp, r7
 8006bcc:	e04a      	b.n	8006c64 <_dtoa_r+0x6c4>
 8006bce:	4b06      	ldr	r3, [pc, #24]	; (8006be8 <_dtoa_r+0x648>)
 8006bd0:	f7f9 fd12 	bl	80005f8 <__aeabi_dmul>
 8006bd4:	4680      	mov	r8, r0
 8006bd6:	4689      	mov	r9, r1
 8006bd8:	e7bd      	b.n	8006b56 <_dtoa_r+0x5b6>
 8006bda:	bf00      	nop
 8006bdc:	08008740 	.word	0x08008740
 8006be0:	08008718 	.word	0x08008718
 8006be4:	3ff00000 	.word	0x3ff00000
 8006be8:	40240000 	.word	0x40240000
 8006bec:	401c0000 	.word	0x401c0000
 8006bf0:	40140000 	.word	0x40140000
 8006bf4:	3fe00000 	.word	0x3fe00000
 8006bf8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006bfc:	9d00      	ldr	r5, [sp, #0]
 8006bfe:	4642      	mov	r2, r8
 8006c00:	464b      	mov	r3, r9
 8006c02:	4630      	mov	r0, r6
 8006c04:	4639      	mov	r1, r7
 8006c06:	f7f9 fe21 	bl	800084c <__aeabi_ddiv>
 8006c0a:	f7f9 ffa5 	bl	8000b58 <__aeabi_d2iz>
 8006c0e:	9001      	str	r0, [sp, #4]
 8006c10:	f7f9 fc88 	bl	8000524 <__aeabi_i2d>
 8006c14:	4642      	mov	r2, r8
 8006c16:	464b      	mov	r3, r9
 8006c18:	f7f9 fcee 	bl	80005f8 <__aeabi_dmul>
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	460b      	mov	r3, r1
 8006c20:	4630      	mov	r0, r6
 8006c22:	4639      	mov	r1, r7
 8006c24:	f7f9 fb30 	bl	8000288 <__aeabi_dsub>
 8006c28:	9e01      	ldr	r6, [sp, #4]
 8006c2a:	9f04      	ldr	r7, [sp, #16]
 8006c2c:	3630      	adds	r6, #48	; 0x30
 8006c2e:	f805 6b01 	strb.w	r6, [r5], #1
 8006c32:	9e00      	ldr	r6, [sp, #0]
 8006c34:	1bae      	subs	r6, r5, r6
 8006c36:	42b7      	cmp	r7, r6
 8006c38:	4602      	mov	r2, r0
 8006c3a:	460b      	mov	r3, r1
 8006c3c:	d134      	bne.n	8006ca8 <_dtoa_r+0x708>
 8006c3e:	f7f9 fb25 	bl	800028c <__adddf3>
 8006c42:	4642      	mov	r2, r8
 8006c44:	464b      	mov	r3, r9
 8006c46:	4606      	mov	r6, r0
 8006c48:	460f      	mov	r7, r1
 8006c4a:	f7f9 ff65 	bl	8000b18 <__aeabi_dcmpgt>
 8006c4e:	b9c8      	cbnz	r0, 8006c84 <_dtoa_r+0x6e4>
 8006c50:	4642      	mov	r2, r8
 8006c52:	464b      	mov	r3, r9
 8006c54:	4630      	mov	r0, r6
 8006c56:	4639      	mov	r1, r7
 8006c58:	f7f9 ff36 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c5c:	b110      	cbz	r0, 8006c64 <_dtoa_r+0x6c4>
 8006c5e:	9b01      	ldr	r3, [sp, #4]
 8006c60:	07db      	lsls	r3, r3, #31
 8006c62:	d40f      	bmi.n	8006c84 <_dtoa_r+0x6e4>
 8006c64:	4651      	mov	r1, sl
 8006c66:	4620      	mov	r0, r4
 8006c68:	f000 fbcc 	bl	8007404 <_Bfree>
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006c70:	702b      	strb	r3, [r5, #0]
 8006c72:	f10b 0301 	add.w	r3, fp, #1
 8006c76:	6013      	str	r3, [r2, #0]
 8006c78:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	f43f ace2 	beq.w	8006644 <_dtoa_r+0xa4>
 8006c80:	601d      	str	r5, [r3, #0]
 8006c82:	e4df      	b.n	8006644 <_dtoa_r+0xa4>
 8006c84:	465f      	mov	r7, fp
 8006c86:	462b      	mov	r3, r5
 8006c88:	461d      	mov	r5, r3
 8006c8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c8e:	2a39      	cmp	r2, #57	; 0x39
 8006c90:	d106      	bne.n	8006ca0 <_dtoa_r+0x700>
 8006c92:	9a00      	ldr	r2, [sp, #0]
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d1f7      	bne.n	8006c88 <_dtoa_r+0x6e8>
 8006c98:	9900      	ldr	r1, [sp, #0]
 8006c9a:	2230      	movs	r2, #48	; 0x30
 8006c9c:	3701      	adds	r7, #1
 8006c9e:	700a      	strb	r2, [r1, #0]
 8006ca0:	781a      	ldrb	r2, [r3, #0]
 8006ca2:	3201      	adds	r2, #1
 8006ca4:	701a      	strb	r2, [r3, #0]
 8006ca6:	e790      	b.n	8006bca <_dtoa_r+0x62a>
 8006ca8:	4ba3      	ldr	r3, [pc, #652]	; (8006f38 <_dtoa_r+0x998>)
 8006caa:	2200      	movs	r2, #0
 8006cac:	f7f9 fca4 	bl	80005f8 <__aeabi_dmul>
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	4606      	mov	r6, r0
 8006cb6:	460f      	mov	r7, r1
 8006cb8:	f7f9 ff06 	bl	8000ac8 <__aeabi_dcmpeq>
 8006cbc:	2800      	cmp	r0, #0
 8006cbe:	d09e      	beq.n	8006bfe <_dtoa_r+0x65e>
 8006cc0:	e7d0      	b.n	8006c64 <_dtoa_r+0x6c4>
 8006cc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cc4:	2a00      	cmp	r2, #0
 8006cc6:	f000 80ca 	beq.w	8006e5e <_dtoa_r+0x8be>
 8006cca:	9a07      	ldr	r2, [sp, #28]
 8006ccc:	2a01      	cmp	r2, #1
 8006cce:	f300 80ad 	bgt.w	8006e2c <_dtoa_r+0x88c>
 8006cd2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006cd4:	2a00      	cmp	r2, #0
 8006cd6:	f000 80a5 	beq.w	8006e24 <_dtoa_r+0x884>
 8006cda:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006cde:	9e08      	ldr	r6, [sp, #32]
 8006ce0:	9d05      	ldr	r5, [sp, #20]
 8006ce2:	9a05      	ldr	r2, [sp, #20]
 8006ce4:	441a      	add	r2, r3
 8006ce6:	9205      	str	r2, [sp, #20]
 8006ce8:	9a06      	ldr	r2, [sp, #24]
 8006cea:	2101      	movs	r1, #1
 8006cec:	441a      	add	r2, r3
 8006cee:	4620      	mov	r0, r4
 8006cf0:	9206      	str	r2, [sp, #24]
 8006cf2:	f000 fc3d 	bl	8007570 <__i2b>
 8006cf6:	4607      	mov	r7, r0
 8006cf8:	b165      	cbz	r5, 8006d14 <_dtoa_r+0x774>
 8006cfa:	9b06      	ldr	r3, [sp, #24]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	dd09      	ble.n	8006d14 <_dtoa_r+0x774>
 8006d00:	42ab      	cmp	r3, r5
 8006d02:	9a05      	ldr	r2, [sp, #20]
 8006d04:	bfa8      	it	ge
 8006d06:	462b      	movge	r3, r5
 8006d08:	1ad2      	subs	r2, r2, r3
 8006d0a:	9205      	str	r2, [sp, #20]
 8006d0c:	9a06      	ldr	r2, [sp, #24]
 8006d0e:	1aed      	subs	r5, r5, r3
 8006d10:	1ad3      	subs	r3, r2, r3
 8006d12:	9306      	str	r3, [sp, #24]
 8006d14:	9b08      	ldr	r3, [sp, #32]
 8006d16:	b1f3      	cbz	r3, 8006d56 <_dtoa_r+0x7b6>
 8006d18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	f000 80a3 	beq.w	8006e66 <_dtoa_r+0x8c6>
 8006d20:	2e00      	cmp	r6, #0
 8006d22:	dd10      	ble.n	8006d46 <_dtoa_r+0x7a6>
 8006d24:	4639      	mov	r1, r7
 8006d26:	4632      	mov	r2, r6
 8006d28:	4620      	mov	r0, r4
 8006d2a:	f000 fce1 	bl	80076f0 <__pow5mult>
 8006d2e:	4652      	mov	r2, sl
 8006d30:	4601      	mov	r1, r0
 8006d32:	4607      	mov	r7, r0
 8006d34:	4620      	mov	r0, r4
 8006d36:	f000 fc31 	bl	800759c <__multiply>
 8006d3a:	4651      	mov	r1, sl
 8006d3c:	4680      	mov	r8, r0
 8006d3e:	4620      	mov	r0, r4
 8006d40:	f000 fb60 	bl	8007404 <_Bfree>
 8006d44:	46c2      	mov	sl, r8
 8006d46:	9b08      	ldr	r3, [sp, #32]
 8006d48:	1b9a      	subs	r2, r3, r6
 8006d4a:	d004      	beq.n	8006d56 <_dtoa_r+0x7b6>
 8006d4c:	4651      	mov	r1, sl
 8006d4e:	4620      	mov	r0, r4
 8006d50:	f000 fcce 	bl	80076f0 <__pow5mult>
 8006d54:	4682      	mov	sl, r0
 8006d56:	2101      	movs	r1, #1
 8006d58:	4620      	mov	r0, r4
 8006d5a:	f000 fc09 	bl	8007570 <__i2b>
 8006d5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	4606      	mov	r6, r0
 8006d64:	f340 8081 	ble.w	8006e6a <_dtoa_r+0x8ca>
 8006d68:	461a      	mov	r2, r3
 8006d6a:	4601      	mov	r1, r0
 8006d6c:	4620      	mov	r0, r4
 8006d6e:	f000 fcbf 	bl	80076f0 <__pow5mult>
 8006d72:	9b07      	ldr	r3, [sp, #28]
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	4606      	mov	r6, r0
 8006d78:	dd7a      	ble.n	8006e70 <_dtoa_r+0x8d0>
 8006d7a:	f04f 0800 	mov.w	r8, #0
 8006d7e:	6933      	ldr	r3, [r6, #16]
 8006d80:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006d84:	6918      	ldr	r0, [r3, #16]
 8006d86:	f000 fba5 	bl	80074d4 <__hi0bits>
 8006d8a:	f1c0 0020 	rsb	r0, r0, #32
 8006d8e:	9b06      	ldr	r3, [sp, #24]
 8006d90:	4418      	add	r0, r3
 8006d92:	f010 001f 	ands.w	r0, r0, #31
 8006d96:	f000 8094 	beq.w	8006ec2 <_dtoa_r+0x922>
 8006d9a:	f1c0 0320 	rsb	r3, r0, #32
 8006d9e:	2b04      	cmp	r3, #4
 8006da0:	f340 8085 	ble.w	8006eae <_dtoa_r+0x90e>
 8006da4:	9b05      	ldr	r3, [sp, #20]
 8006da6:	f1c0 001c 	rsb	r0, r0, #28
 8006daa:	4403      	add	r3, r0
 8006dac:	9305      	str	r3, [sp, #20]
 8006dae:	9b06      	ldr	r3, [sp, #24]
 8006db0:	4403      	add	r3, r0
 8006db2:	4405      	add	r5, r0
 8006db4:	9306      	str	r3, [sp, #24]
 8006db6:	9b05      	ldr	r3, [sp, #20]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	dd05      	ble.n	8006dc8 <_dtoa_r+0x828>
 8006dbc:	4651      	mov	r1, sl
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	4620      	mov	r0, r4
 8006dc2:	f000 fcef 	bl	80077a4 <__lshift>
 8006dc6:	4682      	mov	sl, r0
 8006dc8:	9b06      	ldr	r3, [sp, #24]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	dd05      	ble.n	8006dda <_dtoa_r+0x83a>
 8006dce:	4631      	mov	r1, r6
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	4620      	mov	r0, r4
 8006dd4:	f000 fce6 	bl	80077a4 <__lshift>
 8006dd8:	4606      	mov	r6, r0
 8006dda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d072      	beq.n	8006ec6 <_dtoa_r+0x926>
 8006de0:	4631      	mov	r1, r6
 8006de2:	4650      	mov	r0, sl
 8006de4:	f000 fd4a 	bl	800787c <__mcmp>
 8006de8:	2800      	cmp	r0, #0
 8006dea:	da6c      	bge.n	8006ec6 <_dtoa_r+0x926>
 8006dec:	2300      	movs	r3, #0
 8006dee:	4651      	mov	r1, sl
 8006df0:	220a      	movs	r2, #10
 8006df2:	4620      	mov	r0, r4
 8006df4:	f000 fb28 	bl	8007448 <__multadd>
 8006df8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dfa:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006dfe:	4682      	mov	sl, r0
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	f000 81b0 	beq.w	8007166 <_dtoa_r+0xbc6>
 8006e06:	2300      	movs	r3, #0
 8006e08:	4639      	mov	r1, r7
 8006e0a:	220a      	movs	r2, #10
 8006e0c:	4620      	mov	r0, r4
 8006e0e:	f000 fb1b 	bl	8007448 <__multadd>
 8006e12:	9b01      	ldr	r3, [sp, #4]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	4607      	mov	r7, r0
 8006e18:	f300 8096 	bgt.w	8006f48 <_dtoa_r+0x9a8>
 8006e1c:	9b07      	ldr	r3, [sp, #28]
 8006e1e:	2b02      	cmp	r3, #2
 8006e20:	dc59      	bgt.n	8006ed6 <_dtoa_r+0x936>
 8006e22:	e091      	b.n	8006f48 <_dtoa_r+0x9a8>
 8006e24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006e26:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006e2a:	e758      	b.n	8006cde <_dtoa_r+0x73e>
 8006e2c:	9b04      	ldr	r3, [sp, #16]
 8006e2e:	1e5e      	subs	r6, r3, #1
 8006e30:	9b08      	ldr	r3, [sp, #32]
 8006e32:	42b3      	cmp	r3, r6
 8006e34:	bfbf      	itttt	lt
 8006e36:	9b08      	ldrlt	r3, [sp, #32]
 8006e38:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006e3a:	9608      	strlt	r6, [sp, #32]
 8006e3c:	1af3      	sublt	r3, r6, r3
 8006e3e:	bfb4      	ite	lt
 8006e40:	18d2      	addlt	r2, r2, r3
 8006e42:	1b9e      	subge	r6, r3, r6
 8006e44:	9b04      	ldr	r3, [sp, #16]
 8006e46:	bfbc      	itt	lt
 8006e48:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006e4a:	2600      	movlt	r6, #0
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	bfb7      	itett	lt
 8006e50:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006e54:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006e58:	1a9d      	sublt	r5, r3, r2
 8006e5a:	2300      	movlt	r3, #0
 8006e5c:	e741      	b.n	8006ce2 <_dtoa_r+0x742>
 8006e5e:	9e08      	ldr	r6, [sp, #32]
 8006e60:	9d05      	ldr	r5, [sp, #20]
 8006e62:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006e64:	e748      	b.n	8006cf8 <_dtoa_r+0x758>
 8006e66:	9a08      	ldr	r2, [sp, #32]
 8006e68:	e770      	b.n	8006d4c <_dtoa_r+0x7ac>
 8006e6a:	9b07      	ldr	r3, [sp, #28]
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	dc19      	bgt.n	8006ea4 <_dtoa_r+0x904>
 8006e70:	9b02      	ldr	r3, [sp, #8]
 8006e72:	b9bb      	cbnz	r3, 8006ea4 <_dtoa_r+0x904>
 8006e74:	9b03      	ldr	r3, [sp, #12]
 8006e76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e7a:	b99b      	cbnz	r3, 8006ea4 <_dtoa_r+0x904>
 8006e7c:	9b03      	ldr	r3, [sp, #12]
 8006e7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e82:	0d1b      	lsrs	r3, r3, #20
 8006e84:	051b      	lsls	r3, r3, #20
 8006e86:	b183      	cbz	r3, 8006eaa <_dtoa_r+0x90a>
 8006e88:	9b05      	ldr	r3, [sp, #20]
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	9305      	str	r3, [sp, #20]
 8006e8e:	9b06      	ldr	r3, [sp, #24]
 8006e90:	3301      	adds	r3, #1
 8006e92:	9306      	str	r3, [sp, #24]
 8006e94:	f04f 0801 	mov.w	r8, #1
 8006e98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	f47f af6f 	bne.w	8006d7e <_dtoa_r+0x7de>
 8006ea0:	2001      	movs	r0, #1
 8006ea2:	e774      	b.n	8006d8e <_dtoa_r+0x7ee>
 8006ea4:	f04f 0800 	mov.w	r8, #0
 8006ea8:	e7f6      	b.n	8006e98 <_dtoa_r+0x8f8>
 8006eaa:	4698      	mov	r8, r3
 8006eac:	e7f4      	b.n	8006e98 <_dtoa_r+0x8f8>
 8006eae:	d082      	beq.n	8006db6 <_dtoa_r+0x816>
 8006eb0:	9a05      	ldr	r2, [sp, #20]
 8006eb2:	331c      	adds	r3, #28
 8006eb4:	441a      	add	r2, r3
 8006eb6:	9205      	str	r2, [sp, #20]
 8006eb8:	9a06      	ldr	r2, [sp, #24]
 8006eba:	441a      	add	r2, r3
 8006ebc:	441d      	add	r5, r3
 8006ebe:	9206      	str	r2, [sp, #24]
 8006ec0:	e779      	b.n	8006db6 <_dtoa_r+0x816>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	e7f4      	b.n	8006eb0 <_dtoa_r+0x910>
 8006ec6:	9b04      	ldr	r3, [sp, #16]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	dc37      	bgt.n	8006f3c <_dtoa_r+0x99c>
 8006ecc:	9b07      	ldr	r3, [sp, #28]
 8006ece:	2b02      	cmp	r3, #2
 8006ed0:	dd34      	ble.n	8006f3c <_dtoa_r+0x99c>
 8006ed2:	9b04      	ldr	r3, [sp, #16]
 8006ed4:	9301      	str	r3, [sp, #4]
 8006ed6:	9b01      	ldr	r3, [sp, #4]
 8006ed8:	b963      	cbnz	r3, 8006ef4 <_dtoa_r+0x954>
 8006eda:	4631      	mov	r1, r6
 8006edc:	2205      	movs	r2, #5
 8006ede:	4620      	mov	r0, r4
 8006ee0:	f000 fab2 	bl	8007448 <__multadd>
 8006ee4:	4601      	mov	r1, r0
 8006ee6:	4606      	mov	r6, r0
 8006ee8:	4650      	mov	r0, sl
 8006eea:	f000 fcc7 	bl	800787c <__mcmp>
 8006eee:	2800      	cmp	r0, #0
 8006ef0:	f73f adbb 	bgt.w	8006a6a <_dtoa_r+0x4ca>
 8006ef4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ef6:	9d00      	ldr	r5, [sp, #0]
 8006ef8:	ea6f 0b03 	mvn.w	fp, r3
 8006efc:	f04f 0800 	mov.w	r8, #0
 8006f00:	4631      	mov	r1, r6
 8006f02:	4620      	mov	r0, r4
 8006f04:	f000 fa7e 	bl	8007404 <_Bfree>
 8006f08:	2f00      	cmp	r7, #0
 8006f0a:	f43f aeab 	beq.w	8006c64 <_dtoa_r+0x6c4>
 8006f0e:	f1b8 0f00 	cmp.w	r8, #0
 8006f12:	d005      	beq.n	8006f20 <_dtoa_r+0x980>
 8006f14:	45b8      	cmp	r8, r7
 8006f16:	d003      	beq.n	8006f20 <_dtoa_r+0x980>
 8006f18:	4641      	mov	r1, r8
 8006f1a:	4620      	mov	r0, r4
 8006f1c:	f000 fa72 	bl	8007404 <_Bfree>
 8006f20:	4639      	mov	r1, r7
 8006f22:	4620      	mov	r0, r4
 8006f24:	f000 fa6e 	bl	8007404 <_Bfree>
 8006f28:	e69c      	b.n	8006c64 <_dtoa_r+0x6c4>
 8006f2a:	2600      	movs	r6, #0
 8006f2c:	4637      	mov	r7, r6
 8006f2e:	e7e1      	b.n	8006ef4 <_dtoa_r+0x954>
 8006f30:	46bb      	mov	fp, r7
 8006f32:	4637      	mov	r7, r6
 8006f34:	e599      	b.n	8006a6a <_dtoa_r+0x4ca>
 8006f36:	bf00      	nop
 8006f38:	40240000 	.word	0x40240000
 8006f3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	f000 80c8 	beq.w	80070d4 <_dtoa_r+0xb34>
 8006f44:	9b04      	ldr	r3, [sp, #16]
 8006f46:	9301      	str	r3, [sp, #4]
 8006f48:	2d00      	cmp	r5, #0
 8006f4a:	dd05      	ble.n	8006f58 <_dtoa_r+0x9b8>
 8006f4c:	4639      	mov	r1, r7
 8006f4e:	462a      	mov	r2, r5
 8006f50:	4620      	mov	r0, r4
 8006f52:	f000 fc27 	bl	80077a4 <__lshift>
 8006f56:	4607      	mov	r7, r0
 8006f58:	f1b8 0f00 	cmp.w	r8, #0
 8006f5c:	d05b      	beq.n	8007016 <_dtoa_r+0xa76>
 8006f5e:	6879      	ldr	r1, [r7, #4]
 8006f60:	4620      	mov	r0, r4
 8006f62:	f000 fa0f 	bl	8007384 <_Balloc>
 8006f66:	4605      	mov	r5, r0
 8006f68:	b928      	cbnz	r0, 8006f76 <_dtoa_r+0x9d6>
 8006f6a:	4b83      	ldr	r3, [pc, #524]	; (8007178 <_dtoa_r+0xbd8>)
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006f72:	f7ff bb2e 	b.w	80065d2 <_dtoa_r+0x32>
 8006f76:	693a      	ldr	r2, [r7, #16]
 8006f78:	3202      	adds	r2, #2
 8006f7a:	0092      	lsls	r2, r2, #2
 8006f7c:	f107 010c 	add.w	r1, r7, #12
 8006f80:	300c      	adds	r0, #12
 8006f82:	f000 ffab 	bl	8007edc <memcpy>
 8006f86:	2201      	movs	r2, #1
 8006f88:	4629      	mov	r1, r5
 8006f8a:	4620      	mov	r0, r4
 8006f8c:	f000 fc0a 	bl	80077a4 <__lshift>
 8006f90:	9b00      	ldr	r3, [sp, #0]
 8006f92:	3301      	adds	r3, #1
 8006f94:	9304      	str	r3, [sp, #16]
 8006f96:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f9a:	4413      	add	r3, r2
 8006f9c:	9308      	str	r3, [sp, #32]
 8006f9e:	9b02      	ldr	r3, [sp, #8]
 8006fa0:	f003 0301 	and.w	r3, r3, #1
 8006fa4:	46b8      	mov	r8, r7
 8006fa6:	9306      	str	r3, [sp, #24]
 8006fa8:	4607      	mov	r7, r0
 8006faa:	9b04      	ldr	r3, [sp, #16]
 8006fac:	4631      	mov	r1, r6
 8006fae:	3b01      	subs	r3, #1
 8006fb0:	4650      	mov	r0, sl
 8006fb2:	9301      	str	r3, [sp, #4]
 8006fb4:	f7ff fa69 	bl	800648a <quorem>
 8006fb8:	4641      	mov	r1, r8
 8006fba:	9002      	str	r0, [sp, #8]
 8006fbc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006fc0:	4650      	mov	r0, sl
 8006fc2:	f000 fc5b 	bl	800787c <__mcmp>
 8006fc6:	463a      	mov	r2, r7
 8006fc8:	9005      	str	r0, [sp, #20]
 8006fca:	4631      	mov	r1, r6
 8006fcc:	4620      	mov	r0, r4
 8006fce:	f000 fc71 	bl	80078b4 <__mdiff>
 8006fd2:	68c2      	ldr	r2, [r0, #12]
 8006fd4:	4605      	mov	r5, r0
 8006fd6:	bb02      	cbnz	r2, 800701a <_dtoa_r+0xa7a>
 8006fd8:	4601      	mov	r1, r0
 8006fda:	4650      	mov	r0, sl
 8006fdc:	f000 fc4e 	bl	800787c <__mcmp>
 8006fe0:	4602      	mov	r2, r0
 8006fe2:	4629      	mov	r1, r5
 8006fe4:	4620      	mov	r0, r4
 8006fe6:	9209      	str	r2, [sp, #36]	; 0x24
 8006fe8:	f000 fa0c 	bl	8007404 <_Bfree>
 8006fec:	9b07      	ldr	r3, [sp, #28]
 8006fee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ff0:	9d04      	ldr	r5, [sp, #16]
 8006ff2:	ea43 0102 	orr.w	r1, r3, r2
 8006ff6:	9b06      	ldr	r3, [sp, #24]
 8006ff8:	4319      	orrs	r1, r3
 8006ffa:	d110      	bne.n	800701e <_dtoa_r+0xa7e>
 8006ffc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007000:	d029      	beq.n	8007056 <_dtoa_r+0xab6>
 8007002:	9b05      	ldr	r3, [sp, #20]
 8007004:	2b00      	cmp	r3, #0
 8007006:	dd02      	ble.n	800700e <_dtoa_r+0xa6e>
 8007008:	9b02      	ldr	r3, [sp, #8]
 800700a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800700e:	9b01      	ldr	r3, [sp, #4]
 8007010:	f883 9000 	strb.w	r9, [r3]
 8007014:	e774      	b.n	8006f00 <_dtoa_r+0x960>
 8007016:	4638      	mov	r0, r7
 8007018:	e7ba      	b.n	8006f90 <_dtoa_r+0x9f0>
 800701a:	2201      	movs	r2, #1
 800701c:	e7e1      	b.n	8006fe2 <_dtoa_r+0xa42>
 800701e:	9b05      	ldr	r3, [sp, #20]
 8007020:	2b00      	cmp	r3, #0
 8007022:	db04      	blt.n	800702e <_dtoa_r+0xa8e>
 8007024:	9907      	ldr	r1, [sp, #28]
 8007026:	430b      	orrs	r3, r1
 8007028:	9906      	ldr	r1, [sp, #24]
 800702a:	430b      	orrs	r3, r1
 800702c:	d120      	bne.n	8007070 <_dtoa_r+0xad0>
 800702e:	2a00      	cmp	r2, #0
 8007030:	dded      	ble.n	800700e <_dtoa_r+0xa6e>
 8007032:	4651      	mov	r1, sl
 8007034:	2201      	movs	r2, #1
 8007036:	4620      	mov	r0, r4
 8007038:	f000 fbb4 	bl	80077a4 <__lshift>
 800703c:	4631      	mov	r1, r6
 800703e:	4682      	mov	sl, r0
 8007040:	f000 fc1c 	bl	800787c <__mcmp>
 8007044:	2800      	cmp	r0, #0
 8007046:	dc03      	bgt.n	8007050 <_dtoa_r+0xab0>
 8007048:	d1e1      	bne.n	800700e <_dtoa_r+0xa6e>
 800704a:	f019 0f01 	tst.w	r9, #1
 800704e:	d0de      	beq.n	800700e <_dtoa_r+0xa6e>
 8007050:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007054:	d1d8      	bne.n	8007008 <_dtoa_r+0xa68>
 8007056:	9a01      	ldr	r2, [sp, #4]
 8007058:	2339      	movs	r3, #57	; 0x39
 800705a:	7013      	strb	r3, [r2, #0]
 800705c:	462b      	mov	r3, r5
 800705e:	461d      	mov	r5, r3
 8007060:	3b01      	subs	r3, #1
 8007062:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007066:	2a39      	cmp	r2, #57	; 0x39
 8007068:	d06c      	beq.n	8007144 <_dtoa_r+0xba4>
 800706a:	3201      	adds	r2, #1
 800706c:	701a      	strb	r2, [r3, #0]
 800706e:	e747      	b.n	8006f00 <_dtoa_r+0x960>
 8007070:	2a00      	cmp	r2, #0
 8007072:	dd07      	ble.n	8007084 <_dtoa_r+0xae4>
 8007074:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007078:	d0ed      	beq.n	8007056 <_dtoa_r+0xab6>
 800707a:	9a01      	ldr	r2, [sp, #4]
 800707c:	f109 0301 	add.w	r3, r9, #1
 8007080:	7013      	strb	r3, [r2, #0]
 8007082:	e73d      	b.n	8006f00 <_dtoa_r+0x960>
 8007084:	9b04      	ldr	r3, [sp, #16]
 8007086:	9a08      	ldr	r2, [sp, #32]
 8007088:	f803 9c01 	strb.w	r9, [r3, #-1]
 800708c:	4293      	cmp	r3, r2
 800708e:	d043      	beq.n	8007118 <_dtoa_r+0xb78>
 8007090:	4651      	mov	r1, sl
 8007092:	2300      	movs	r3, #0
 8007094:	220a      	movs	r2, #10
 8007096:	4620      	mov	r0, r4
 8007098:	f000 f9d6 	bl	8007448 <__multadd>
 800709c:	45b8      	cmp	r8, r7
 800709e:	4682      	mov	sl, r0
 80070a0:	f04f 0300 	mov.w	r3, #0
 80070a4:	f04f 020a 	mov.w	r2, #10
 80070a8:	4641      	mov	r1, r8
 80070aa:	4620      	mov	r0, r4
 80070ac:	d107      	bne.n	80070be <_dtoa_r+0xb1e>
 80070ae:	f000 f9cb 	bl	8007448 <__multadd>
 80070b2:	4680      	mov	r8, r0
 80070b4:	4607      	mov	r7, r0
 80070b6:	9b04      	ldr	r3, [sp, #16]
 80070b8:	3301      	adds	r3, #1
 80070ba:	9304      	str	r3, [sp, #16]
 80070bc:	e775      	b.n	8006faa <_dtoa_r+0xa0a>
 80070be:	f000 f9c3 	bl	8007448 <__multadd>
 80070c2:	4639      	mov	r1, r7
 80070c4:	4680      	mov	r8, r0
 80070c6:	2300      	movs	r3, #0
 80070c8:	220a      	movs	r2, #10
 80070ca:	4620      	mov	r0, r4
 80070cc:	f000 f9bc 	bl	8007448 <__multadd>
 80070d0:	4607      	mov	r7, r0
 80070d2:	e7f0      	b.n	80070b6 <_dtoa_r+0xb16>
 80070d4:	9b04      	ldr	r3, [sp, #16]
 80070d6:	9301      	str	r3, [sp, #4]
 80070d8:	9d00      	ldr	r5, [sp, #0]
 80070da:	4631      	mov	r1, r6
 80070dc:	4650      	mov	r0, sl
 80070de:	f7ff f9d4 	bl	800648a <quorem>
 80070e2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80070e6:	9b00      	ldr	r3, [sp, #0]
 80070e8:	f805 9b01 	strb.w	r9, [r5], #1
 80070ec:	1aea      	subs	r2, r5, r3
 80070ee:	9b01      	ldr	r3, [sp, #4]
 80070f0:	4293      	cmp	r3, r2
 80070f2:	dd07      	ble.n	8007104 <_dtoa_r+0xb64>
 80070f4:	4651      	mov	r1, sl
 80070f6:	2300      	movs	r3, #0
 80070f8:	220a      	movs	r2, #10
 80070fa:	4620      	mov	r0, r4
 80070fc:	f000 f9a4 	bl	8007448 <__multadd>
 8007100:	4682      	mov	sl, r0
 8007102:	e7ea      	b.n	80070da <_dtoa_r+0xb3a>
 8007104:	9b01      	ldr	r3, [sp, #4]
 8007106:	2b00      	cmp	r3, #0
 8007108:	bfc8      	it	gt
 800710a:	461d      	movgt	r5, r3
 800710c:	9b00      	ldr	r3, [sp, #0]
 800710e:	bfd8      	it	le
 8007110:	2501      	movle	r5, #1
 8007112:	441d      	add	r5, r3
 8007114:	f04f 0800 	mov.w	r8, #0
 8007118:	4651      	mov	r1, sl
 800711a:	2201      	movs	r2, #1
 800711c:	4620      	mov	r0, r4
 800711e:	f000 fb41 	bl	80077a4 <__lshift>
 8007122:	4631      	mov	r1, r6
 8007124:	4682      	mov	sl, r0
 8007126:	f000 fba9 	bl	800787c <__mcmp>
 800712a:	2800      	cmp	r0, #0
 800712c:	dc96      	bgt.n	800705c <_dtoa_r+0xabc>
 800712e:	d102      	bne.n	8007136 <_dtoa_r+0xb96>
 8007130:	f019 0f01 	tst.w	r9, #1
 8007134:	d192      	bne.n	800705c <_dtoa_r+0xabc>
 8007136:	462b      	mov	r3, r5
 8007138:	461d      	mov	r5, r3
 800713a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800713e:	2a30      	cmp	r2, #48	; 0x30
 8007140:	d0fa      	beq.n	8007138 <_dtoa_r+0xb98>
 8007142:	e6dd      	b.n	8006f00 <_dtoa_r+0x960>
 8007144:	9a00      	ldr	r2, [sp, #0]
 8007146:	429a      	cmp	r2, r3
 8007148:	d189      	bne.n	800705e <_dtoa_r+0xabe>
 800714a:	f10b 0b01 	add.w	fp, fp, #1
 800714e:	2331      	movs	r3, #49	; 0x31
 8007150:	e796      	b.n	8007080 <_dtoa_r+0xae0>
 8007152:	4b0a      	ldr	r3, [pc, #40]	; (800717c <_dtoa_r+0xbdc>)
 8007154:	f7ff ba99 	b.w	800668a <_dtoa_r+0xea>
 8007158:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800715a:	2b00      	cmp	r3, #0
 800715c:	f47f aa6d 	bne.w	800663a <_dtoa_r+0x9a>
 8007160:	4b07      	ldr	r3, [pc, #28]	; (8007180 <_dtoa_r+0xbe0>)
 8007162:	f7ff ba92 	b.w	800668a <_dtoa_r+0xea>
 8007166:	9b01      	ldr	r3, [sp, #4]
 8007168:	2b00      	cmp	r3, #0
 800716a:	dcb5      	bgt.n	80070d8 <_dtoa_r+0xb38>
 800716c:	9b07      	ldr	r3, [sp, #28]
 800716e:	2b02      	cmp	r3, #2
 8007170:	f73f aeb1 	bgt.w	8006ed6 <_dtoa_r+0x936>
 8007174:	e7b0      	b.n	80070d8 <_dtoa_r+0xb38>
 8007176:	bf00      	nop
 8007178:	080086ac 	.word	0x080086ac
 800717c:	0800860c 	.word	0x0800860c
 8007180:	08008630 	.word	0x08008630

08007184 <_free_r>:
 8007184:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007186:	2900      	cmp	r1, #0
 8007188:	d044      	beq.n	8007214 <_free_r+0x90>
 800718a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800718e:	9001      	str	r0, [sp, #4]
 8007190:	2b00      	cmp	r3, #0
 8007192:	f1a1 0404 	sub.w	r4, r1, #4
 8007196:	bfb8      	it	lt
 8007198:	18e4      	addlt	r4, r4, r3
 800719a:	f000 f8e7 	bl	800736c <__malloc_lock>
 800719e:	4a1e      	ldr	r2, [pc, #120]	; (8007218 <_free_r+0x94>)
 80071a0:	9801      	ldr	r0, [sp, #4]
 80071a2:	6813      	ldr	r3, [r2, #0]
 80071a4:	b933      	cbnz	r3, 80071b4 <_free_r+0x30>
 80071a6:	6063      	str	r3, [r4, #4]
 80071a8:	6014      	str	r4, [r2, #0]
 80071aa:	b003      	add	sp, #12
 80071ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80071b0:	f000 b8e2 	b.w	8007378 <__malloc_unlock>
 80071b4:	42a3      	cmp	r3, r4
 80071b6:	d908      	bls.n	80071ca <_free_r+0x46>
 80071b8:	6825      	ldr	r5, [r4, #0]
 80071ba:	1961      	adds	r1, r4, r5
 80071bc:	428b      	cmp	r3, r1
 80071be:	bf01      	itttt	eq
 80071c0:	6819      	ldreq	r1, [r3, #0]
 80071c2:	685b      	ldreq	r3, [r3, #4]
 80071c4:	1949      	addeq	r1, r1, r5
 80071c6:	6021      	streq	r1, [r4, #0]
 80071c8:	e7ed      	b.n	80071a6 <_free_r+0x22>
 80071ca:	461a      	mov	r2, r3
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	b10b      	cbz	r3, 80071d4 <_free_r+0x50>
 80071d0:	42a3      	cmp	r3, r4
 80071d2:	d9fa      	bls.n	80071ca <_free_r+0x46>
 80071d4:	6811      	ldr	r1, [r2, #0]
 80071d6:	1855      	adds	r5, r2, r1
 80071d8:	42a5      	cmp	r5, r4
 80071da:	d10b      	bne.n	80071f4 <_free_r+0x70>
 80071dc:	6824      	ldr	r4, [r4, #0]
 80071de:	4421      	add	r1, r4
 80071e0:	1854      	adds	r4, r2, r1
 80071e2:	42a3      	cmp	r3, r4
 80071e4:	6011      	str	r1, [r2, #0]
 80071e6:	d1e0      	bne.n	80071aa <_free_r+0x26>
 80071e8:	681c      	ldr	r4, [r3, #0]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	6053      	str	r3, [r2, #4]
 80071ee:	440c      	add	r4, r1
 80071f0:	6014      	str	r4, [r2, #0]
 80071f2:	e7da      	b.n	80071aa <_free_r+0x26>
 80071f4:	d902      	bls.n	80071fc <_free_r+0x78>
 80071f6:	230c      	movs	r3, #12
 80071f8:	6003      	str	r3, [r0, #0]
 80071fa:	e7d6      	b.n	80071aa <_free_r+0x26>
 80071fc:	6825      	ldr	r5, [r4, #0]
 80071fe:	1961      	adds	r1, r4, r5
 8007200:	428b      	cmp	r3, r1
 8007202:	bf04      	itt	eq
 8007204:	6819      	ldreq	r1, [r3, #0]
 8007206:	685b      	ldreq	r3, [r3, #4]
 8007208:	6063      	str	r3, [r4, #4]
 800720a:	bf04      	itt	eq
 800720c:	1949      	addeq	r1, r1, r5
 800720e:	6021      	streq	r1, [r4, #0]
 8007210:	6054      	str	r4, [r2, #4]
 8007212:	e7ca      	b.n	80071aa <_free_r+0x26>
 8007214:	b003      	add	sp, #12
 8007216:	bd30      	pop	{r4, r5, pc}
 8007218:	20000454 	.word	0x20000454

0800721c <malloc>:
 800721c:	4b02      	ldr	r3, [pc, #8]	; (8007228 <malloc+0xc>)
 800721e:	4601      	mov	r1, r0
 8007220:	6818      	ldr	r0, [r3, #0]
 8007222:	f000 b823 	b.w	800726c <_malloc_r>
 8007226:	bf00      	nop
 8007228:	20000064 	.word	0x20000064

0800722c <sbrk_aligned>:
 800722c:	b570      	push	{r4, r5, r6, lr}
 800722e:	4e0e      	ldr	r6, [pc, #56]	; (8007268 <sbrk_aligned+0x3c>)
 8007230:	460c      	mov	r4, r1
 8007232:	6831      	ldr	r1, [r6, #0]
 8007234:	4605      	mov	r5, r0
 8007236:	b911      	cbnz	r1, 800723e <sbrk_aligned+0x12>
 8007238:	f000 fe40 	bl	8007ebc <_sbrk_r>
 800723c:	6030      	str	r0, [r6, #0]
 800723e:	4621      	mov	r1, r4
 8007240:	4628      	mov	r0, r5
 8007242:	f000 fe3b 	bl	8007ebc <_sbrk_r>
 8007246:	1c43      	adds	r3, r0, #1
 8007248:	d00a      	beq.n	8007260 <sbrk_aligned+0x34>
 800724a:	1cc4      	adds	r4, r0, #3
 800724c:	f024 0403 	bic.w	r4, r4, #3
 8007250:	42a0      	cmp	r0, r4
 8007252:	d007      	beq.n	8007264 <sbrk_aligned+0x38>
 8007254:	1a21      	subs	r1, r4, r0
 8007256:	4628      	mov	r0, r5
 8007258:	f000 fe30 	bl	8007ebc <_sbrk_r>
 800725c:	3001      	adds	r0, #1
 800725e:	d101      	bne.n	8007264 <sbrk_aligned+0x38>
 8007260:	f04f 34ff 	mov.w	r4, #4294967295
 8007264:	4620      	mov	r0, r4
 8007266:	bd70      	pop	{r4, r5, r6, pc}
 8007268:	20000458 	.word	0x20000458

0800726c <_malloc_r>:
 800726c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007270:	1ccd      	adds	r5, r1, #3
 8007272:	f025 0503 	bic.w	r5, r5, #3
 8007276:	3508      	adds	r5, #8
 8007278:	2d0c      	cmp	r5, #12
 800727a:	bf38      	it	cc
 800727c:	250c      	movcc	r5, #12
 800727e:	2d00      	cmp	r5, #0
 8007280:	4607      	mov	r7, r0
 8007282:	db01      	blt.n	8007288 <_malloc_r+0x1c>
 8007284:	42a9      	cmp	r1, r5
 8007286:	d905      	bls.n	8007294 <_malloc_r+0x28>
 8007288:	230c      	movs	r3, #12
 800728a:	603b      	str	r3, [r7, #0]
 800728c:	2600      	movs	r6, #0
 800728e:	4630      	mov	r0, r6
 8007290:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007294:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007368 <_malloc_r+0xfc>
 8007298:	f000 f868 	bl	800736c <__malloc_lock>
 800729c:	f8d8 3000 	ldr.w	r3, [r8]
 80072a0:	461c      	mov	r4, r3
 80072a2:	bb5c      	cbnz	r4, 80072fc <_malloc_r+0x90>
 80072a4:	4629      	mov	r1, r5
 80072a6:	4638      	mov	r0, r7
 80072a8:	f7ff ffc0 	bl	800722c <sbrk_aligned>
 80072ac:	1c43      	adds	r3, r0, #1
 80072ae:	4604      	mov	r4, r0
 80072b0:	d155      	bne.n	800735e <_malloc_r+0xf2>
 80072b2:	f8d8 4000 	ldr.w	r4, [r8]
 80072b6:	4626      	mov	r6, r4
 80072b8:	2e00      	cmp	r6, #0
 80072ba:	d145      	bne.n	8007348 <_malloc_r+0xdc>
 80072bc:	2c00      	cmp	r4, #0
 80072be:	d048      	beq.n	8007352 <_malloc_r+0xe6>
 80072c0:	6823      	ldr	r3, [r4, #0]
 80072c2:	4631      	mov	r1, r6
 80072c4:	4638      	mov	r0, r7
 80072c6:	eb04 0903 	add.w	r9, r4, r3
 80072ca:	f000 fdf7 	bl	8007ebc <_sbrk_r>
 80072ce:	4581      	cmp	r9, r0
 80072d0:	d13f      	bne.n	8007352 <_malloc_r+0xe6>
 80072d2:	6821      	ldr	r1, [r4, #0]
 80072d4:	1a6d      	subs	r5, r5, r1
 80072d6:	4629      	mov	r1, r5
 80072d8:	4638      	mov	r0, r7
 80072da:	f7ff ffa7 	bl	800722c <sbrk_aligned>
 80072de:	3001      	adds	r0, #1
 80072e0:	d037      	beq.n	8007352 <_malloc_r+0xe6>
 80072e2:	6823      	ldr	r3, [r4, #0]
 80072e4:	442b      	add	r3, r5
 80072e6:	6023      	str	r3, [r4, #0]
 80072e8:	f8d8 3000 	ldr.w	r3, [r8]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d038      	beq.n	8007362 <_malloc_r+0xf6>
 80072f0:	685a      	ldr	r2, [r3, #4]
 80072f2:	42a2      	cmp	r2, r4
 80072f4:	d12b      	bne.n	800734e <_malloc_r+0xe2>
 80072f6:	2200      	movs	r2, #0
 80072f8:	605a      	str	r2, [r3, #4]
 80072fa:	e00f      	b.n	800731c <_malloc_r+0xb0>
 80072fc:	6822      	ldr	r2, [r4, #0]
 80072fe:	1b52      	subs	r2, r2, r5
 8007300:	d41f      	bmi.n	8007342 <_malloc_r+0xd6>
 8007302:	2a0b      	cmp	r2, #11
 8007304:	d917      	bls.n	8007336 <_malloc_r+0xca>
 8007306:	1961      	adds	r1, r4, r5
 8007308:	42a3      	cmp	r3, r4
 800730a:	6025      	str	r5, [r4, #0]
 800730c:	bf18      	it	ne
 800730e:	6059      	strne	r1, [r3, #4]
 8007310:	6863      	ldr	r3, [r4, #4]
 8007312:	bf08      	it	eq
 8007314:	f8c8 1000 	streq.w	r1, [r8]
 8007318:	5162      	str	r2, [r4, r5]
 800731a:	604b      	str	r3, [r1, #4]
 800731c:	4638      	mov	r0, r7
 800731e:	f104 060b 	add.w	r6, r4, #11
 8007322:	f000 f829 	bl	8007378 <__malloc_unlock>
 8007326:	f026 0607 	bic.w	r6, r6, #7
 800732a:	1d23      	adds	r3, r4, #4
 800732c:	1af2      	subs	r2, r6, r3
 800732e:	d0ae      	beq.n	800728e <_malloc_r+0x22>
 8007330:	1b9b      	subs	r3, r3, r6
 8007332:	50a3      	str	r3, [r4, r2]
 8007334:	e7ab      	b.n	800728e <_malloc_r+0x22>
 8007336:	42a3      	cmp	r3, r4
 8007338:	6862      	ldr	r2, [r4, #4]
 800733a:	d1dd      	bne.n	80072f8 <_malloc_r+0x8c>
 800733c:	f8c8 2000 	str.w	r2, [r8]
 8007340:	e7ec      	b.n	800731c <_malloc_r+0xb0>
 8007342:	4623      	mov	r3, r4
 8007344:	6864      	ldr	r4, [r4, #4]
 8007346:	e7ac      	b.n	80072a2 <_malloc_r+0x36>
 8007348:	4634      	mov	r4, r6
 800734a:	6876      	ldr	r6, [r6, #4]
 800734c:	e7b4      	b.n	80072b8 <_malloc_r+0x4c>
 800734e:	4613      	mov	r3, r2
 8007350:	e7cc      	b.n	80072ec <_malloc_r+0x80>
 8007352:	230c      	movs	r3, #12
 8007354:	603b      	str	r3, [r7, #0]
 8007356:	4638      	mov	r0, r7
 8007358:	f000 f80e 	bl	8007378 <__malloc_unlock>
 800735c:	e797      	b.n	800728e <_malloc_r+0x22>
 800735e:	6025      	str	r5, [r4, #0]
 8007360:	e7dc      	b.n	800731c <_malloc_r+0xb0>
 8007362:	605b      	str	r3, [r3, #4]
 8007364:	deff      	udf	#255	; 0xff
 8007366:	bf00      	nop
 8007368:	20000454 	.word	0x20000454

0800736c <__malloc_lock>:
 800736c:	4801      	ldr	r0, [pc, #4]	; (8007374 <__malloc_lock+0x8>)
 800736e:	f7ff b88a 	b.w	8006486 <__retarget_lock_acquire_recursive>
 8007372:	bf00      	nop
 8007374:	20000450 	.word	0x20000450

08007378 <__malloc_unlock>:
 8007378:	4801      	ldr	r0, [pc, #4]	; (8007380 <__malloc_unlock+0x8>)
 800737a:	f7ff b885 	b.w	8006488 <__retarget_lock_release_recursive>
 800737e:	bf00      	nop
 8007380:	20000450 	.word	0x20000450

08007384 <_Balloc>:
 8007384:	b570      	push	{r4, r5, r6, lr}
 8007386:	69c6      	ldr	r6, [r0, #28]
 8007388:	4604      	mov	r4, r0
 800738a:	460d      	mov	r5, r1
 800738c:	b976      	cbnz	r6, 80073ac <_Balloc+0x28>
 800738e:	2010      	movs	r0, #16
 8007390:	f7ff ff44 	bl	800721c <malloc>
 8007394:	4602      	mov	r2, r0
 8007396:	61e0      	str	r0, [r4, #28]
 8007398:	b920      	cbnz	r0, 80073a4 <_Balloc+0x20>
 800739a:	4b18      	ldr	r3, [pc, #96]	; (80073fc <_Balloc+0x78>)
 800739c:	4818      	ldr	r0, [pc, #96]	; (8007400 <_Balloc+0x7c>)
 800739e:	216b      	movs	r1, #107	; 0x6b
 80073a0:	f000 fdaa 	bl	8007ef8 <__assert_func>
 80073a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80073a8:	6006      	str	r6, [r0, #0]
 80073aa:	60c6      	str	r6, [r0, #12]
 80073ac:	69e6      	ldr	r6, [r4, #28]
 80073ae:	68f3      	ldr	r3, [r6, #12]
 80073b0:	b183      	cbz	r3, 80073d4 <_Balloc+0x50>
 80073b2:	69e3      	ldr	r3, [r4, #28]
 80073b4:	68db      	ldr	r3, [r3, #12]
 80073b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80073ba:	b9b8      	cbnz	r0, 80073ec <_Balloc+0x68>
 80073bc:	2101      	movs	r1, #1
 80073be:	fa01 f605 	lsl.w	r6, r1, r5
 80073c2:	1d72      	adds	r2, r6, #5
 80073c4:	0092      	lsls	r2, r2, #2
 80073c6:	4620      	mov	r0, r4
 80073c8:	f000 fdb4 	bl	8007f34 <_calloc_r>
 80073cc:	b160      	cbz	r0, 80073e8 <_Balloc+0x64>
 80073ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80073d2:	e00e      	b.n	80073f2 <_Balloc+0x6e>
 80073d4:	2221      	movs	r2, #33	; 0x21
 80073d6:	2104      	movs	r1, #4
 80073d8:	4620      	mov	r0, r4
 80073da:	f000 fdab 	bl	8007f34 <_calloc_r>
 80073de:	69e3      	ldr	r3, [r4, #28]
 80073e0:	60f0      	str	r0, [r6, #12]
 80073e2:	68db      	ldr	r3, [r3, #12]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d1e4      	bne.n	80073b2 <_Balloc+0x2e>
 80073e8:	2000      	movs	r0, #0
 80073ea:	bd70      	pop	{r4, r5, r6, pc}
 80073ec:	6802      	ldr	r2, [r0, #0]
 80073ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80073f2:	2300      	movs	r3, #0
 80073f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80073f8:	e7f7      	b.n	80073ea <_Balloc+0x66>
 80073fa:	bf00      	nop
 80073fc:	0800863d 	.word	0x0800863d
 8007400:	080086bd 	.word	0x080086bd

08007404 <_Bfree>:
 8007404:	b570      	push	{r4, r5, r6, lr}
 8007406:	69c6      	ldr	r6, [r0, #28]
 8007408:	4605      	mov	r5, r0
 800740a:	460c      	mov	r4, r1
 800740c:	b976      	cbnz	r6, 800742c <_Bfree+0x28>
 800740e:	2010      	movs	r0, #16
 8007410:	f7ff ff04 	bl	800721c <malloc>
 8007414:	4602      	mov	r2, r0
 8007416:	61e8      	str	r0, [r5, #28]
 8007418:	b920      	cbnz	r0, 8007424 <_Bfree+0x20>
 800741a:	4b09      	ldr	r3, [pc, #36]	; (8007440 <_Bfree+0x3c>)
 800741c:	4809      	ldr	r0, [pc, #36]	; (8007444 <_Bfree+0x40>)
 800741e:	218f      	movs	r1, #143	; 0x8f
 8007420:	f000 fd6a 	bl	8007ef8 <__assert_func>
 8007424:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007428:	6006      	str	r6, [r0, #0]
 800742a:	60c6      	str	r6, [r0, #12]
 800742c:	b13c      	cbz	r4, 800743e <_Bfree+0x3a>
 800742e:	69eb      	ldr	r3, [r5, #28]
 8007430:	6862      	ldr	r2, [r4, #4]
 8007432:	68db      	ldr	r3, [r3, #12]
 8007434:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007438:	6021      	str	r1, [r4, #0]
 800743a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800743e:	bd70      	pop	{r4, r5, r6, pc}
 8007440:	0800863d 	.word	0x0800863d
 8007444:	080086bd 	.word	0x080086bd

08007448 <__multadd>:
 8007448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800744c:	690d      	ldr	r5, [r1, #16]
 800744e:	4607      	mov	r7, r0
 8007450:	460c      	mov	r4, r1
 8007452:	461e      	mov	r6, r3
 8007454:	f101 0c14 	add.w	ip, r1, #20
 8007458:	2000      	movs	r0, #0
 800745a:	f8dc 3000 	ldr.w	r3, [ip]
 800745e:	b299      	uxth	r1, r3
 8007460:	fb02 6101 	mla	r1, r2, r1, r6
 8007464:	0c1e      	lsrs	r6, r3, #16
 8007466:	0c0b      	lsrs	r3, r1, #16
 8007468:	fb02 3306 	mla	r3, r2, r6, r3
 800746c:	b289      	uxth	r1, r1
 800746e:	3001      	adds	r0, #1
 8007470:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007474:	4285      	cmp	r5, r0
 8007476:	f84c 1b04 	str.w	r1, [ip], #4
 800747a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800747e:	dcec      	bgt.n	800745a <__multadd+0x12>
 8007480:	b30e      	cbz	r6, 80074c6 <__multadd+0x7e>
 8007482:	68a3      	ldr	r3, [r4, #8]
 8007484:	42ab      	cmp	r3, r5
 8007486:	dc19      	bgt.n	80074bc <__multadd+0x74>
 8007488:	6861      	ldr	r1, [r4, #4]
 800748a:	4638      	mov	r0, r7
 800748c:	3101      	adds	r1, #1
 800748e:	f7ff ff79 	bl	8007384 <_Balloc>
 8007492:	4680      	mov	r8, r0
 8007494:	b928      	cbnz	r0, 80074a2 <__multadd+0x5a>
 8007496:	4602      	mov	r2, r0
 8007498:	4b0c      	ldr	r3, [pc, #48]	; (80074cc <__multadd+0x84>)
 800749a:	480d      	ldr	r0, [pc, #52]	; (80074d0 <__multadd+0x88>)
 800749c:	21ba      	movs	r1, #186	; 0xba
 800749e:	f000 fd2b 	bl	8007ef8 <__assert_func>
 80074a2:	6922      	ldr	r2, [r4, #16]
 80074a4:	3202      	adds	r2, #2
 80074a6:	f104 010c 	add.w	r1, r4, #12
 80074aa:	0092      	lsls	r2, r2, #2
 80074ac:	300c      	adds	r0, #12
 80074ae:	f000 fd15 	bl	8007edc <memcpy>
 80074b2:	4621      	mov	r1, r4
 80074b4:	4638      	mov	r0, r7
 80074b6:	f7ff ffa5 	bl	8007404 <_Bfree>
 80074ba:	4644      	mov	r4, r8
 80074bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80074c0:	3501      	adds	r5, #1
 80074c2:	615e      	str	r6, [r3, #20]
 80074c4:	6125      	str	r5, [r4, #16]
 80074c6:	4620      	mov	r0, r4
 80074c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074cc:	080086ac 	.word	0x080086ac
 80074d0:	080086bd 	.word	0x080086bd

080074d4 <__hi0bits>:
 80074d4:	0c03      	lsrs	r3, r0, #16
 80074d6:	041b      	lsls	r3, r3, #16
 80074d8:	b9d3      	cbnz	r3, 8007510 <__hi0bits+0x3c>
 80074da:	0400      	lsls	r0, r0, #16
 80074dc:	2310      	movs	r3, #16
 80074de:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80074e2:	bf04      	itt	eq
 80074e4:	0200      	lsleq	r0, r0, #8
 80074e6:	3308      	addeq	r3, #8
 80074e8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80074ec:	bf04      	itt	eq
 80074ee:	0100      	lsleq	r0, r0, #4
 80074f0:	3304      	addeq	r3, #4
 80074f2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80074f6:	bf04      	itt	eq
 80074f8:	0080      	lsleq	r0, r0, #2
 80074fa:	3302      	addeq	r3, #2
 80074fc:	2800      	cmp	r0, #0
 80074fe:	db05      	blt.n	800750c <__hi0bits+0x38>
 8007500:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007504:	f103 0301 	add.w	r3, r3, #1
 8007508:	bf08      	it	eq
 800750a:	2320      	moveq	r3, #32
 800750c:	4618      	mov	r0, r3
 800750e:	4770      	bx	lr
 8007510:	2300      	movs	r3, #0
 8007512:	e7e4      	b.n	80074de <__hi0bits+0xa>

08007514 <__lo0bits>:
 8007514:	6803      	ldr	r3, [r0, #0]
 8007516:	f013 0207 	ands.w	r2, r3, #7
 800751a:	d00c      	beq.n	8007536 <__lo0bits+0x22>
 800751c:	07d9      	lsls	r1, r3, #31
 800751e:	d422      	bmi.n	8007566 <__lo0bits+0x52>
 8007520:	079a      	lsls	r2, r3, #30
 8007522:	bf49      	itett	mi
 8007524:	085b      	lsrmi	r3, r3, #1
 8007526:	089b      	lsrpl	r3, r3, #2
 8007528:	6003      	strmi	r3, [r0, #0]
 800752a:	2201      	movmi	r2, #1
 800752c:	bf5c      	itt	pl
 800752e:	6003      	strpl	r3, [r0, #0]
 8007530:	2202      	movpl	r2, #2
 8007532:	4610      	mov	r0, r2
 8007534:	4770      	bx	lr
 8007536:	b299      	uxth	r1, r3
 8007538:	b909      	cbnz	r1, 800753e <__lo0bits+0x2a>
 800753a:	0c1b      	lsrs	r3, r3, #16
 800753c:	2210      	movs	r2, #16
 800753e:	b2d9      	uxtb	r1, r3
 8007540:	b909      	cbnz	r1, 8007546 <__lo0bits+0x32>
 8007542:	3208      	adds	r2, #8
 8007544:	0a1b      	lsrs	r3, r3, #8
 8007546:	0719      	lsls	r1, r3, #28
 8007548:	bf04      	itt	eq
 800754a:	091b      	lsreq	r3, r3, #4
 800754c:	3204      	addeq	r2, #4
 800754e:	0799      	lsls	r1, r3, #30
 8007550:	bf04      	itt	eq
 8007552:	089b      	lsreq	r3, r3, #2
 8007554:	3202      	addeq	r2, #2
 8007556:	07d9      	lsls	r1, r3, #31
 8007558:	d403      	bmi.n	8007562 <__lo0bits+0x4e>
 800755a:	085b      	lsrs	r3, r3, #1
 800755c:	f102 0201 	add.w	r2, r2, #1
 8007560:	d003      	beq.n	800756a <__lo0bits+0x56>
 8007562:	6003      	str	r3, [r0, #0]
 8007564:	e7e5      	b.n	8007532 <__lo0bits+0x1e>
 8007566:	2200      	movs	r2, #0
 8007568:	e7e3      	b.n	8007532 <__lo0bits+0x1e>
 800756a:	2220      	movs	r2, #32
 800756c:	e7e1      	b.n	8007532 <__lo0bits+0x1e>
	...

08007570 <__i2b>:
 8007570:	b510      	push	{r4, lr}
 8007572:	460c      	mov	r4, r1
 8007574:	2101      	movs	r1, #1
 8007576:	f7ff ff05 	bl	8007384 <_Balloc>
 800757a:	4602      	mov	r2, r0
 800757c:	b928      	cbnz	r0, 800758a <__i2b+0x1a>
 800757e:	4b05      	ldr	r3, [pc, #20]	; (8007594 <__i2b+0x24>)
 8007580:	4805      	ldr	r0, [pc, #20]	; (8007598 <__i2b+0x28>)
 8007582:	f240 1145 	movw	r1, #325	; 0x145
 8007586:	f000 fcb7 	bl	8007ef8 <__assert_func>
 800758a:	2301      	movs	r3, #1
 800758c:	6144      	str	r4, [r0, #20]
 800758e:	6103      	str	r3, [r0, #16]
 8007590:	bd10      	pop	{r4, pc}
 8007592:	bf00      	nop
 8007594:	080086ac 	.word	0x080086ac
 8007598:	080086bd 	.word	0x080086bd

0800759c <__multiply>:
 800759c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075a0:	4691      	mov	r9, r2
 80075a2:	690a      	ldr	r2, [r1, #16]
 80075a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80075a8:	429a      	cmp	r2, r3
 80075aa:	bfb8      	it	lt
 80075ac:	460b      	movlt	r3, r1
 80075ae:	460c      	mov	r4, r1
 80075b0:	bfbc      	itt	lt
 80075b2:	464c      	movlt	r4, r9
 80075b4:	4699      	movlt	r9, r3
 80075b6:	6927      	ldr	r7, [r4, #16]
 80075b8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80075bc:	68a3      	ldr	r3, [r4, #8]
 80075be:	6861      	ldr	r1, [r4, #4]
 80075c0:	eb07 060a 	add.w	r6, r7, sl
 80075c4:	42b3      	cmp	r3, r6
 80075c6:	b085      	sub	sp, #20
 80075c8:	bfb8      	it	lt
 80075ca:	3101      	addlt	r1, #1
 80075cc:	f7ff feda 	bl	8007384 <_Balloc>
 80075d0:	b930      	cbnz	r0, 80075e0 <__multiply+0x44>
 80075d2:	4602      	mov	r2, r0
 80075d4:	4b44      	ldr	r3, [pc, #272]	; (80076e8 <__multiply+0x14c>)
 80075d6:	4845      	ldr	r0, [pc, #276]	; (80076ec <__multiply+0x150>)
 80075d8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80075dc:	f000 fc8c 	bl	8007ef8 <__assert_func>
 80075e0:	f100 0514 	add.w	r5, r0, #20
 80075e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80075e8:	462b      	mov	r3, r5
 80075ea:	2200      	movs	r2, #0
 80075ec:	4543      	cmp	r3, r8
 80075ee:	d321      	bcc.n	8007634 <__multiply+0x98>
 80075f0:	f104 0314 	add.w	r3, r4, #20
 80075f4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80075f8:	f109 0314 	add.w	r3, r9, #20
 80075fc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007600:	9202      	str	r2, [sp, #8]
 8007602:	1b3a      	subs	r2, r7, r4
 8007604:	3a15      	subs	r2, #21
 8007606:	f022 0203 	bic.w	r2, r2, #3
 800760a:	3204      	adds	r2, #4
 800760c:	f104 0115 	add.w	r1, r4, #21
 8007610:	428f      	cmp	r7, r1
 8007612:	bf38      	it	cc
 8007614:	2204      	movcc	r2, #4
 8007616:	9201      	str	r2, [sp, #4]
 8007618:	9a02      	ldr	r2, [sp, #8]
 800761a:	9303      	str	r3, [sp, #12]
 800761c:	429a      	cmp	r2, r3
 800761e:	d80c      	bhi.n	800763a <__multiply+0x9e>
 8007620:	2e00      	cmp	r6, #0
 8007622:	dd03      	ble.n	800762c <__multiply+0x90>
 8007624:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007628:	2b00      	cmp	r3, #0
 800762a:	d05b      	beq.n	80076e4 <__multiply+0x148>
 800762c:	6106      	str	r6, [r0, #16]
 800762e:	b005      	add	sp, #20
 8007630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007634:	f843 2b04 	str.w	r2, [r3], #4
 8007638:	e7d8      	b.n	80075ec <__multiply+0x50>
 800763a:	f8b3 a000 	ldrh.w	sl, [r3]
 800763e:	f1ba 0f00 	cmp.w	sl, #0
 8007642:	d024      	beq.n	800768e <__multiply+0xf2>
 8007644:	f104 0e14 	add.w	lr, r4, #20
 8007648:	46a9      	mov	r9, r5
 800764a:	f04f 0c00 	mov.w	ip, #0
 800764e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007652:	f8d9 1000 	ldr.w	r1, [r9]
 8007656:	fa1f fb82 	uxth.w	fp, r2
 800765a:	b289      	uxth	r1, r1
 800765c:	fb0a 110b 	mla	r1, sl, fp, r1
 8007660:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007664:	f8d9 2000 	ldr.w	r2, [r9]
 8007668:	4461      	add	r1, ip
 800766a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800766e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007672:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007676:	b289      	uxth	r1, r1
 8007678:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800767c:	4577      	cmp	r7, lr
 800767e:	f849 1b04 	str.w	r1, [r9], #4
 8007682:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007686:	d8e2      	bhi.n	800764e <__multiply+0xb2>
 8007688:	9a01      	ldr	r2, [sp, #4]
 800768a:	f845 c002 	str.w	ip, [r5, r2]
 800768e:	9a03      	ldr	r2, [sp, #12]
 8007690:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007694:	3304      	adds	r3, #4
 8007696:	f1b9 0f00 	cmp.w	r9, #0
 800769a:	d021      	beq.n	80076e0 <__multiply+0x144>
 800769c:	6829      	ldr	r1, [r5, #0]
 800769e:	f104 0c14 	add.w	ip, r4, #20
 80076a2:	46ae      	mov	lr, r5
 80076a4:	f04f 0a00 	mov.w	sl, #0
 80076a8:	f8bc b000 	ldrh.w	fp, [ip]
 80076ac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80076b0:	fb09 220b 	mla	r2, r9, fp, r2
 80076b4:	4452      	add	r2, sl
 80076b6:	b289      	uxth	r1, r1
 80076b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80076bc:	f84e 1b04 	str.w	r1, [lr], #4
 80076c0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80076c4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80076c8:	f8be 1000 	ldrh.w	r1, [lr]
 80076cc:	fb09 110a 	mla	r1, r9, sl, r1
 80076d0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80076d4:	4567      	cmp	r7, ip
 80076d6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80076da:	d8e5      	bhi.n	80076a8 <__multiply+0x10c>
 80076dc:	9a01      	ldr	r2, [sp, #4]
 80076de:	50a9      	str	r1, [r5, r2]
 80076e0:	3504      	adds	r5, #4
 80076e2:	e799      	b.n	8007618 <__multiply+0x7c>
 80076e4:	3e01      	subs	r6, #1
 80076e6:	e79b      	b.n	8007620 <__multiply+0x84>
 80076e8:	080086ac 	.word	0x080086ac
 80076ec:	080086bd 	.word	0x080086bd

080076f0 <__pow5mult>:
 80076f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076f4:	4615      	mov	r5, r2
 80076f6:	f012 0203 	ands.w	r2, r2, #3
 80076fa:	4606      	mov	r6, r0
 80076fc:	460f      	mov	r7, r1
 80076fe:	d007      	beq.n	8007710 <__pow5mult+0x20>
 8007700:	4c25      	ldr	r4, [pc, #148]	; (8007798 <__pow5mult+0xa8>)
 8007702:	3a01      	subs	r2, #1
 8007704:	2300      	movs	r3, #0
 8007706:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800770a:	f7ff fe9d 	bl	8007448 <__multadd>
 800770e:	4607      	mov	r7, r0
 8007710:	10ad      	asrs	r5, r5, #2
 8007712:	d03d      	beq.n	8007790 <__pow5mult+0xa0>
 8007714:	69f4      	ldr	r4, [r6, #28]
 8007716:	b97c      	cbnz	r4, 8007738 <__pow5mult+0x48>
 8007718:	2010      	movs	r0, #16
 800771a:	f7ff fd7f 	bl	800721c <malloc>
 800771e:	4602      	mov	r2, r0
 8007720:	61f0      	str	r0, [r6, #28]
 8007722:	b928      	cbnz	r0, 8007730 <__pow5mult+0x40>
 8007724:	4b1d      	ldr	r3, [pc, #116]	; (800779c <__pow5mult+0xac>)
 8007726:	481e      	ldr	r0, [pc, #120]	; (80077a0 <__pow5mult+0xb0>)
 8007728:	f240 11b3 	movw	r1, #435	; 0x1b3
 800772c:	f000 fbe4 	bl	8007ef8 <__assert_func>
 8007730:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007734:	6004      	str	r4, [r0, #0]
 8007736:	60c4      	str	r4, [r0, #12]
 8007738:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800773c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007740:	b94c      	cbnz	r4, 8007756 <__pow5mult+0x66>
 8007742:	f240 2171 	movw	r1, #625	; 0x271
 8007746:	4630      	mov	r0, r6
 8007748:	f7ff ff12 	bl	8007570 <__i2b>
 800774c:	2300      	movs	r3, #0
 800774e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007752:	4604      	mov	r4, r0
 8007754:	6003      	str	r3, [r0, #0]
 8007756:	f04f 0900 	mov.w	r9, #0
 800775a:	07eb      	lsls	r3, r5, #31
 800775c:	d50a      	bpl.n	8007774 <__pow5mult+0x84>
 800775e:	4639      	mov	r1, r7
 8007760:	4622      	mov	r2, r4
 8007762:	4630      	mov	r0, r6
 8007764:	f7ff ff1a 	bl	800759c <__multiply>
 8007768:	4639      	mov	r1, r7
 800776a:	4680      	mov	r8, r0
 800776c:	4630      	mov	r0, r6
 800776e:	f7ff fe49 	bl	8007404 <_Bfree>
 8007772:	4647      	mov	r7, r8
 8007774:	106d      	asrs	r5, r5, #1
 8007776:	d00b      	beq.n	8007790 <__pow5mult+0xa0>
 8007778:	6820      	ldr	r0, [r4, #0]
 800777a:	b938      	cbnz	r0, 800778c <__pow5mult+0x9c>
 800777c:	4622      	mov	r2, r4
 800777e:	4621      	mov	r1, r4
 8007780:	4630      	mov	r0, r6
 8007782:	f7ff ff0b 	bl	800759c <__multiply>
 8007786:	6020      	str	r0, [r4, #0]
 8007788:	f8c0 9000 	str.w	r9, [r0]
 800778c:	4604      	mov	r4, r0
 800778e:	e7e4      	b.n	800775a <__pow5mult+0x6a>
 8007790:	4638      	mov	r0, r7
 8007792:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007796:	bf00      	nop
 8007798:	08008808 	.word	0x08008808
 800779c:	0800863d 	.word	0x0800863d
 80077a0:	080086bd 	.word	0x080086bd

080077a4 <__lshift>:
 80077a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077a8:	460c      	mov	r4, r1
 80077aa:	6849      	ldr	r1, [r1, #4]
 80077ac:	6923      	ldr	r3, [r4, #16]
 80077ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80077b2:	68a3      	ldr	r3, [r4, #8]
 80077b4:	4607      	mov	r7, r0
 80077b6:	4691      	mov	r9, r2
 80077b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80077bc:	f108 0601 	add.w	r6, r8, #1
 80077c0:	42b3      	cmp	r3, r6
 80077c2:	db0b      	blt.n	80077dc <__lshift+0x38>
 80077c4:	4638      	mov	r0, r7
 80077c6:	f7ff fddd 	bl	8007384 <_Balloc>
 80077ca:	4605      	mov	r5, r0
 80077cc:	b948      	cbnz	r0, 80077e2 <__lshift+0x3e>
 80077ce:	4602      	mov	r2, r0
 80077d0:	4b28      	ldr	r3, [pc, #160]	; (8007874 <__lshift+0xd0>)
 80077d2:	4829      	ldr	r0, [pc, #164]	; (8007878 <__lshift+0xd4>)
 80077d4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80077d8:	f000 fb8e 	bl	8007ef8 <__assert_func>
 80077dc:	3101      	adds	r1, #1
 80077de:	005b      	lsls	r3, r3, #1
 80077e0:	e7ee      	b.n	80077c0 <__lshift+0x1c>
 80077e2:	2300      	movs	r3, #0
 80077e4:	f100 0114 	add.w	r1, r0, #20
 80077e8:	f100 0210 	add.w	r2, r0, #16
 80077ec:	4618      	mov	r0, r3
 80077ee:	4553      	cmp	r3, sl
 80077f0:	db33      	blt.n	800785a <__lshift+0xb6>
 80077f2:	6920      	ldr	r0, [r4, #16]
 80077f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80077f8:	f104 0314 	add.w	r3, r4, #20
 80077fc:	f019 091f 	ands.w	r9, r9, #31
 8007800:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007804:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007808:	d02b      	beq.n	8007862 <__lshift+0xbe>
 800780a:	f1c9 0e20 	rsb	lr, r9, #32
 800780e:	468a      	mov	sl, r1
 8007810:	2200      	movs	r2, #0
 8007812:	6818      	ldr	r0, [r3, #0]
 8007814:	fa00 f009 	lsl.w	r0, r0, r9
 8007818:	4310      	orrs	r0, r2
 800781a:	f84a 0b04 	str.w	r0, [sl], #4
 800781e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007822:	459c      	cmp	ip, r3
 8007824:	fa22 f20e 	lsr.w	r2, r2, lr
 8007828:	d8f3      	bhi.n	8007812 <__lshift+0x6e>
 800782a:	ebac 0304 	sub.w	r3, ip, r4
 800782e:	3b15      	subs	r3, #21
 8007830:	f023 0303 	bic.w	r3, r3, #3
 8007834:	3304      	adds	r3, #4
 8007836:	f104 0015 	add.w	r0, r4, #21
 800783a:	4584      	cmp	ip, r0
 800783c:	bf38      	it	cc
 800783e:	2304      	movcc	r3, #4
 8007840:	50ca      	str	r2, [r1, r3]
 8007842:	b10a      	cbz	r2, 8007848 <__lshift+0xa4>
 8007844:	f108 0602 	add.w	r6, r8, #2
 8007848:	3e01      	subs	r6, #1
 800784a:	4638      	mov	r0, r7
 800784c:	612e      	str	r6, [r5, #16]
 800784e:	4621      	mov	r1, r4
 8007850:	f7ff fdd8 	bl	8007404 <_Bfree>
 8007854:	4628      	mov	r0, r5
 8007856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800785a:	f842 0f04 	str.w	r0, [r2, #4]!
 800785e:	3301      	adds	r3, #1
 8007860:	e7c5      	b.n	80077ee <__lshift+0x4a>
 8007862:	3904      	subs	r1, #4
 8007864:	f853 2b04 	ldr.w	r2, [r3], #4
 8007868:	f841 2f04 	str.w	r2, [r1, #4]!
 800786c:	459c      	cmp	ip, r3
 800786e:	d8f9      	bhi.n	8007864 <__lshift+0xc0>
 8007870:	e7ea      	b.n	8007848 <__lshift+0xa4>
 8007872:	bf00      	nop
 8007874:	080086ac 	.word	0x080086ac
 8007878:	080086bd 	.word	0x080086bd

0800787c <__mcmp>:
 800787c:	b530      	push	{r4, r5, lr}
 800787e:	6902      	ldr	r2, [r0, #16]
 8007880:	690c      	ldr	r4, [r1, #16]
 8007882:	1b12      	subs	r2, r2, r4
 8007884:	d10e      	bne.n	80078a4 <__mcmp+0x28>
 8007886:	f100 0314 	add.w	r3, r0, #20
 800788a:	3114      	adds	r1, #20
 800788c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007890:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007894:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007898:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800789c:	42a5      	cmp	r5, r4
 800789e:	d003      	beq.n	80078a8 <__mcmp+0x2c>
 80078a0:	d305      	bcc.n	80078ae <__mcmp+0x32>
 80078a2:	2201      	movs	r2, #1
 80078a4:	4610      	mov	r0, r2
 80078a6:	bd30      	pop	{r4, r5, pc}
 80078a8:	4283      	cmp	r3, r0
 80078aa:	d3f3      	bcc.n	8007894 <__mcmp+0x18>
 80078ac:	e7fa      	b.n	80078a4 <__mcmp+0x28>
 80078ae:	f04f 32ff 	mov.w	r2, #4294967295
 80078b2:	e7f7      	b.n	80078a4 <__mcmp+0x28>

080078b4 <__mdiff>:
 80078b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078b8:	460c      	mov	r4, r1
 80078ba:	4606      	mov	r6, r0
 80078bc:	4611      	mov	r1, r2
 80078be:	4620      	mov	r0, r4
 80078c0:	4690      	mov	r8, r2
 80078c2:	f7ff ffdb 	bl	800787c <__mcmp>
 80078c6:	1e05      	subs	r5, r0, #0
 80078c8:	d110      	bne.n	80078ec <__mdiff+0x38>
 80078ca:	4629      	mov	r1, r5
 80078cc:	4630      	mov	r0, r6
 80078ce:	f7ff fd59 	bl	8007384 <_Balloc>
 80078d2:	b930      	cbnz	r0, 80078e2 <__mdiff+0x2e>
 80078d4:	4b3a      	ldr	r3, [pc, #232]	; (80079c0 <__mdiff+0x10c>)
 80078d6:	4602      	mov	r2, r0
 80078d8:	f240 2137 	movw	r1, #567	; 0x237
 80078dc:	4839      	ldr	r0, [pc, #228]	; (80079c4 <__mdiff+0x110>)
 80078de:	f000 fb0b 	bl	8007ef8 <__assert_func>
 80078e2:	2301      	movs	r3, #1
 80078e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80078e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078ec:	bfa4      	itt	ge
 80078ee:	4643      	movge	r3, r8
 80078f0:	46a0      	movge	r8, r4
 80078f2:	4630      	mov	r0, r6
 80078f4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80078f8:	bfa6      	itte	ge
 80078fa:	461c      	movge	r4, r3
 80078fc:	2500      	movge	r5, #0
 80078fe:	2501      	movlt	r5, #1
 8007900:	f7ff fd40 	bl	8007384 <_Balloc>
 8007904:	b920      	cbnz	r0, 8007910 <__mdiff+0x5c>
 8007906:	4b2e      	ldr	r3, [pc, #184]	; (80079c0 <__mdiff+0x10c>)
 8007908:	4602      	mov	r2, r0
 800790a:	f240 2145 	movw	r1, #581	; 0x245
 800790e:	e7e5      	b.n	80078dc <__mdiff+0x28>
 8007910:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007914:	6926      	ldr	r6, [r4, #16]
 8007916:	60c5      	str	r5, [r0, #12]
 8007918:	f104 0914 	add.w	r9, r4, #20
 800791c:	f108 0514 	add.w	r5, r8, #20
 8007920:	f100 0e14 	add.w	lr, r0, #20
 8007924:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007928:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800792c:	f108 0210 	add.w	r2, r8, #16
 8007930:	46f2      	mov	sl, lr
 8007932:	2100      	movs	r1, #0
 8007934:	f859 3b04 	ldr.w	r3, [r9], #4
 8007938:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800793c:	fa11 f88b 	uxtah	r8, r1, fp
 8007940:	b299      	uxth	r1, r3
 8007942:	0c1b      	lsrs	r3, r3, #16
 8007944:	eba8 0801 	sub.w	r8, r8, r1
 8007948:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800794c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007950:	fa1f f888 	uxth.w	r8, r8
 8007954:	1419      	asrs	r1, r3, #16
 8007956:	454e      	cmp	r6, r9
 8007958:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800795c:	f84a 3b04 	str.w	r3, [sl], #4
 8007960:	d8e8      	bhi.n	8007934 <__mdiff+0x80>
 8007962:	1b33      	subs	r3, r6, r4
 8007964:	3b15      	subs	r3, #21
 8007966:	f023 0303 	bic.w	r3, r3, #3
 800796a:	3304      	adds	r3, #4
 800796c:	3415      	adds	r4, #21
 800796e:	42a6      	cmp	r6, r4
 8007970:	bf38      	it	cc
 8007972:	2304      	movcc	r3, #4
 8007974:	441d      	add	r5, r3
 8007976:	4473      	add	r3, lr
 8007978:	469e      	mov	lr, r3
 800797a:	462e      	mov	r6, r5
 800797c:	4566      	cmp	r6, ip
 800797e:	d30e      	bcc.n	800799e <__mdiff+0xea>
 8007980:	f10c 0203 	add.w	r2, ip, #3
 8007984:	1b52      	subs	r2, r2, r5
 8007986:	f022 0203 	bic.w	r2, r2, #3
 800798a:	3d03      	subs	r5, #3
 800798c:	45ac      	cmp	ip, r5
 800798e:	bf38      	it	cc
 8007990:	2200      	movcc	r2, #0
 8007992:	4413      	add	r3, r2
 8007994:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007998:	b17a      	cbz	r2, 80079ba <__mdiff+0x106>
 800799a:	6107      	str	r7, [r0, #16]
 800799c:	e7a4      	b.n	80078e8 <__mdiff+0x34>
 800799e:	f856 8b04 	ldr.w	r8, [r6], #4
 80079a2:	fa11 f288 	uxtah	r2, r1, r8
 80079a6:	1414      	asrs	r4, r2, #16
 80079a8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80079ac:	b292      	uxth	r2, r2
 80079ae:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80079b2:	f84e 2b04 	str.w	r2, [lr], #4
 80079b6:	1421      	asrs	r1, r4, #16
 80079b8:	e7e0      	b.n	800797c <__mdiff+0xc8>
 80079ba:	3f01      	subs	r7, #1
 80079bc:	e7ea      	b.n	8007994 <__mdiff+0xe0>
 80079be:	bf00      	nop
 80079c0:	080086ac 	.word	0x080086ac
 80079c4:	080086bd 	.word	0x080086bd

080079c8 <__d2b>:
 80079c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80079cc:	460f      	mov	r7, r1
 80079ce:	2101      	movs	r1, #1
 80079d0:	ec59 8b10 	vmov	r8, r9, d0
 80079d4:	4616      	mov	r6, r2
 80079d6:	f7ff fcd5 	bl	8007384 <_Balloc>
 80079da:	4604      	mov	r4, r0
 80079dc:	b930      	cbnz	r0, 80079ec <__d2b+0x24>
 80079de:	4602      	mov	r2, r0
 80079e0:	4b24      	ldr	r3, [pc, #144]	; (8007a74 <__d2b+0xac>)
 80079e2:	4825      	ldr	r0, [pc, #148]	; (8007a78 <__d2b+0xb0>)
 80079e4:	f240 310f 	movw	r1, #783	; 0x30f
 80079e8:	f000 fa86 	bl	8007ef8 <__assert_func>
 80079ec:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80079f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80079f4:	bb2d      	cbnz	r5, 8007a42 <__d2b+0x7a>
 80079f6:	9301      	str	r3, [sp, #4]
 80079f8:	f1b8 0300 	subs.w	r3, r8, #0
 80079fc:	d026      	beq.n	8007a4c <__d2b+0x84>
 80079fe:	4668      	mov	r0, sp
 8007a00:	9300      	str	r3, [sp, #0]
 8007a02:	f7ff fd87 	bl	8007514 <__lo0bits>
 8007a06:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007a0a:	b1e8      	cbz	r0, 8007a48 <__d2b+0x80>
 8007a0c:	f1c0 0320 	rsb	r3, r0, #32
 8007a10:	fa02 f303 	lsl.w	r3, r2, r3
 8007a14:	430b      	orrs	r3, r1
 8007a16:	40c2      	lsrs	r2, r0
 8007a18:	6163      	str	r3, [r4, #20]
 8007a1a:	9201      	str	r2, [sp, #4]
 8007a1c:	9b01      	ldr	r3, [sp, #4]
 8007a1e:	61a3      	str	r3, [r4, #24]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	bf14      	ite	ne
 8007a24:	2202      	movne	r2, #2
 8007a26:	2201      	moveq	r2, #1
 8007a28:	6122      	str	r2, [r4, #16]
 8007a2a:	b1bd      	cbz	r5, 8007a5c <__d2b+0x94>
 8007a2c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007a30:	4405      	add	r5, r0
 8007a32:	603d      	str	r5, [r7, #0]
 8007a34:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007a38:	6030      	str	r0, [r6, #0]
 8007a3a:	4620      	mov	r0, r4
 8007a3c:	b003      	add	sp, #12
 8007a3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a46:	e7d6      	b.n	80079f6 <__d2b+0x2e>
 8007a48:	6161      	str	r1, [r4, #20]
 8007a4a:	e7e7      	b.n	8007a1c <__d2b+0x54>
 8007a4c:	a801      	add	r0, sp, #4
 8007a4e:	f7ff fd61 	bl	8007514 <__lo0bits>
 8007a52:	9b01      	ldr	r3, [sp, #4]
 8007a54:	6163      	str	r3, [r4, #20]
 8007a56:	3020      	adds	r0, #32
 8007a58:	2201      	movs	r2, #1
 8007a5a:	e7e5      	b.n	8007a28 <__d2b+0x60>
 8007a5c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007a60:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007a64:	6038      	str	r0, [r7, #0]
 8007a66:	6918      	ldr	r0, [r3, #16]
 8007a68:	f7ff fd34 	bl	80074d4 <__hi0bits>
 8007a6c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007a70:	e7e2      	b.n	8007a38 <__d2b+0x70>
 8007a72:	bf00      	nop
 8007a74:	080086ac 	.word	0x080086ac
 8007a78:	080086bd 	.word	0x080086bd

08007a7c <__ssputs_r>:
 8007a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a80:	688e      	ldr	r6, [r1, #8]
 8007a82:	461f      	mov	r7, r3
 8007a84:	42be      	cmp	r6, r7
 8007a86:	680b      	ldr	r3, [r1, #0]
 8007a88:	4682      	mov	sl, r0
 8007a8a:	460c      	mov	r4, r1
 8007a8c:	4690      	mov	r8, r2
 8007a8e:	d82c      	bhi.n	8007aea <__ssputs_r+0x6e>
 8007a90:	898a      	ldrh	r2, [r1, #12]
 8007a92:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007a96:	d026      	beq.n	8007ae6 <__ssputs_r+0x6a>
 8007a98:	6965      	ldr	r5, [r4, #20]
 8007a9a:	6909      	ldr	r1, [r1, #16]
 8007a9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007aa0:	eba3 0901 	sub.w	r9, r3, r1
 8007aa4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007aa8:	1c7b      	adds	r3, r7, #1
 8007aaa:	444b      	add	r3, r9
 8007aac:	106d      	asrs	r5, r5, #1
 8007aae:	429d      	cmp	r5, r3
 8007ab0:	bf38      	it	cc
 8007ab2:	461d      	movcc	r5, r3
 8007ab4:	0553      	lsls	r3, r2, #21
 8007ab6:	d527      	bpl.n	8007b08 <__ssputs_r+0x8c>
 8007ab8:	4629      	mov	r1, r5
 8007aba:	f7ff fbd7 	bl	800726c <_malloc_r>
 8007abe:	4606      	mov	r6, r0
 8007ac0:	b360      	cbz	r0, 8007b1c <__ssputs_r+0xa0>
 8007ac2:	6921      	ldr	r1, [r4, #16]
 8007ac4:	464a      	mov	r2, r9
 8007ac6:	f000 fa09 	bl	8007edc <memcpy>
 8007aca:	89a3      	ldrh	r3, [r4, #12]
 8007acc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ad4:	81a3      	strh	r3, [r4, #12]
 8007ad6:	6126      	str	r6, [r4, #16]
 8007ad8:	6165      	str	r5, [r4, #20]
 8007ada:	444e      	add	r6, r9
 8007adc:	eba5 0509 	sub.w	r5, r5, r9
 8007ae0:	6026      	str	r6, [r4, #0]
 8007ae2:	60a5      	str	r5, [r4, #8]
 8007ae4:	463e      	mov	r6, r7
 8007ae6:	42be      	cmp	r6, r7
 8007ae8:	d900      	bls.n	8007aec <__ssputs_r+0x70>
 8007aea:	463e      	mov	r6, r7
 8007aec:	6820      	ldr	r0, [r4, #0]
 8007aee:	4632      	mov	r2, r6
 8007af0:	4641      	mov	r1, r8
 8007af2:	f000 f9c9 	bl	8007e88 <memmove>
 8007af6:	68a3      	ldr	r3, [r4, #8]
 8007af8:	1b9b      	subs	r3, r3, r6
 8007afa:	60a3      	str	r3, [r4, #8]
 8007afc:	6823      	ldr	r3, [r4, #0]
 8007afe:	4433      	add	r3, r6
 8007b00:	6023      	str	r3, [r4, #0]
 8007b02:	2000      	movs	r0, #0
 8007b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b08:	462a      	mov	r2, r5
 8007b0a:	f000 fa3b 	bl	8007f84 <_realloc_r>
 8007b0e:	4606      	mov	r6, r0
 8007b10:	2800      	cmp	r0, #0
 8007b12:	d1e0      	bne.n	8007ad6 <__ssputs_r+0x5a>
 8007b14:	6921      	ldr	r1, [r4, #16]
 8007b16:	4650      	mov	r0, sl
 8007b18:	f7ff fb34 	bl	8007184 <_free_r>
 8007b1c:	230c      	movs	r3, #12
 8007b1e:	f8ca 3000 	str.w	r3, [sl]
 8007b22:	89a3      	ldrh	r3, [r4, #12]
 8007b24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b28:	81a3      	strh	r3, [r4, #12]
 8007b2a:	f04f 30ff 	mov.w	r0, #4294967295
 8007b2e:	e7e9      	b.n	8007b04 <__ssputs_r+0x88>

08007b30 <_svfiprintf_r>:
 8007b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b34:	4698      	mov	r8, r3
 8007b36:	898b      	ldrh	r3, [r1, #12]
 8007b38:	061b      	lsls	r3, r3, #24
 8007b3a:	b09d      	sub	sp, #116	; 0x74
 8007b3c:	4607      	mov	r7, r0
 8007b3e:	460d      	mov	r5, r1
 8007b40:	4614      	mov	r4, r2
 8007b42:	d50e      	bpl.n	8007b62 <_svfiprintf_r+0x32>
 8007b44:	690b      	ldr	r3, [r1, #16]
 8007b46:	b963      	cbnz	r3, 8007b62 <_svfiprintf_r+0x32>
 8007b48:	2140      	movs	r1, #64	; 0x40
 8007b4a:	f7ff fb8f 	bl	800726c <_malloc_r>
 8007b4e:	6028      	str	r0, [r5, #0]
 8007b50:	6128      	str	r0, [r5, #16]
 8007b52:	b920      	cbnz	r0, 8007b5e <_svfiprintf_r+0x2e>
 8007b54:	230c      	movs	r3, #12
 8007b56:	603b      	str	r3, [r7, #0]
 8007b58:	f04f 30ff 	mov.w	r0, #4294967295
 8007b5c:	e0d0      	b.n	8007d00 <_svfiprintf_r+0x1d0>
 8007b5e:	2340      	movs	r3, #64	; 0x40
 8007b60:	616b      	str	r3, [r5, #20]
 8007b62:	2300      	movs	r3, #0
 8007b64:	9309      	str	r3, [sp, #36]	; 0x24
 8007b66:	2320      	movs	r3, #32
 8007b68:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b70:	2330      	movs	r3, #48	; 0x30
 8007b72:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007d18 <_svfiprintf_r+0x1e8>
 8007b76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b7a:	f04f 0901 	mov.w	r9, #1
 8007b7e:	4623      	mov	r3, r4
 8007b80:	469a      	mov	sl, r3
 8007b82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b86:	b10a      	cbz	r2, 8007b8c <_svfiprintf_r+0x5c>
 8007b88:	2a25      	cmp	r2, #37	; 0x25
 8007b8a:	d1f9      	bne.n	8007b80 <_svfiprintf_r+0x50>
 8007b8c:	ebba 0b04 	subs.w	fp, sl, r4
 8007b90:	d00b      	beq.n	8007baa <_svfiprintf_r+0x7a>
 8007b92:	465b      	mov	r3, fp
 8007b94:	4622      	mov	r2, r4
 8007b96:	4629      	mov	r1, r5
 8007b98:	4638      	mov	r0, r7
 8007b9a:	f7ff ff6f 	bl	8007a7c <__ssputs_r>
 8007b9e:	3001      	adds	r0, #1
 8007ba0:	f000 80a9 	beq.w	8007cf6 <_svfiprintf_r+0x1c6>
 8007ba4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ba6:	445a      	add	r2, fp
 8007ba8:	9209      	str	r2, [sp, #36]	; 0x24
 8007baa:	f89a 3000 	ldrb.w	r3, [sl]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	f000 80a1 	beq.w	8007cf6 <_svfiprintf_r+0x1c6>
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	f04f 32ff 	mov.w	r2, #4294967295
 8007bba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007bbe:	f10a 0a01 	add.w	sl, sl, #1
 8007bc2:	9304      	str	r3, [sp, #16]
 8007bc4:	9307      	str	r3, [sp, #28]
 8007bc6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007bca:	931a      	str	r3, [sp, #104]	; 0x68
 8007bcc:	4654      	mov	r4, sl
 8007bce:	2205      	movs	r2, #5
 8007bd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bd4:	4850      	ldr	r0, [pc, #320]	; (8007d18 <_svfiprintf_r+0x1e8>)
 8007bd6:	f7f8 fafb 	bl	80001d0 <memchr>
 8007bda:	9a04      	ldr	r2, [sp, #16]
 8007bdc:	b9d8      	cbnz	r0, 8007c16 <_svfiprintf_r+0xe6>
 8007bde:	06d0      	lsls	r0, r2, #27
 8007be0:	bf44      	itt	mi
 8007be2:	2320      	movmi	r3, #32
 8007be4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007be8:	0711      	lsls	r1, r2, #28
 8007bea:	bf44      	itt	mi
 8007bec:	232b      	movmi	r3, #43	; 0x2b
 8007bee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007bf2:	f89a 3000 	ldrb.w	r3, [sl]
 8007bf6:	2b2a      	cmp	r3, #42	; 0x2a
 8007bf8:	d015      	beq.n	8007c26 <_svfiprintf_r+0xf6>
 8007bfa:	9a07      	ldr	r2, [sp, #28]
 8007bfc:	4654      	mov	r4, sl
 8007bfe:	2000      	movs	r0, #0
 8007c00:	f04f 0c0a 	mov.w	ip, #10
 8007c04:	4621      	mov	r1, r4
 8007c06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c0a:	3b30      	subs	r3, #48	; 0x30
 8007c0c:	2b09      	cmp	r3, #9
 8007c0e:	d94d      	bls.n	8007cac <_svfiprintf_r+0x17c>
 8007c10:	b1b0      	cbz	r0, 8007c40 <_svfiprintf_r+0x110>
 8007c12:	9207      	str	r2, [sp, #28]
 8007c14:	e014      	b.n	8007c40 <_svfiprintf_r+0x110>
 8007c16:	eba0 0308 	sub.w	r3, r0, r8
 8007c1a:	fa09 f303 	lsl.w	r3, r9, r3
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	9304      	str	r3, [sp, #16]
 8007c22:	46a2      	mov	sl, r4
 8007c24:	e7d2      	b.n	8007bcc <_svfiprintf_r+0x9c>
 8007c26:	9b03      	ldr	r3, [sp, #12]
 8007c28:	1d19      	adds	r1, r3, #4
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	9103      	str	r1, [sp, #12]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	bfbb      	ittet	lt
 8007c32:	425b      	neglt	r3, r3
 8007c34:	f042 0202 	orrlt.w	r2, r2, #2
 8007c38:	9307      	strge	r3, [sp, #28]
 8007c3a:	9307      	strlt	r3, [sp, #28]
 8007c3c:	bfb8      	it	lt
 8007c3e:	9204      	strlt	r2, [sp, #16]
 8007c40:	7823      	ldrb	r3, [r4, #0]
 8007c42:	2b2e      	cmp	r3, #46	; 0x2e
 8007c44:	d10c      	bne.n	8007c60 <_svfiprintf_r+0x130>
 8007c46:	7863      	ldrb	r3, [r4, #1]
 8007c48:	2b2a      	cmp	r3, #42	; 0x2a
 8007c4a:	d134      	bne.n	8007cb6 <_svfiprintf_r+0x186>
 8007c4c:	9b03      	ldr	r3, [sp, #12]
 8007c4e:	1d1a      	adds	r2, r3, #4
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	9203      	str	r2, [sp, #12]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	bfb8      	it	lt
 8007c58:	f04f 33ff 	movlt.w	r3, #4294967295
 8007c5c:	3402      	adds	r4, #2
 8007c5e:	9305      	str	r3, [sp, #20]
 8007c60:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007d28 <_svfiprintf_r+0x1f8>
 8007c64:	7821      	ldrb	r1, [r4, #0]
 8007c66:	2203      	movs	r2, #3
 8007c68:	4650      	mov	r0, sl
 8007c6a:	f7f8 fab1 	bl	80001d0 <memchr>
 8007c6e:	b138      	cbz	r0, 8007c80 <_svfiprintf_r+0x150>
 8007c70:	9b04      	ldr	r3, [sp, #16]
 8007c72:	eba0 000a 	sub.w	r0, r0, sl
 8007c76:	2240      	movs	r2, #64	; 0x40
 8007c78:	4082      	lsls	r2, r0
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	3401      	adds	r4, #1
 8007c7e:	9304      	str	r3, [sp, #16]
 8007c80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c84:	4825      	ldr	r0, [pc, #148]	; (8007d1c <_svfiprintf_r+0x1ec>)
 8007c86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c8a:	2206      	movs	r2, #6
 8007c8c:	f7f8 faa0 	bl	80001d0 <memchr>
 8007c90:	2800      	cmp	r0, #0
 8007c92:	d038      	beq.n	8007d06 <_svfiprintf_r+0x1d6>
 8007c94:	4b22      	ldr	r3, [pc, #136]	; (8007d20 <_svfiprintf_r+0x1f0>)
 8007c96:	bb1b      	cbnz	r3, 8007ce0 <_svfiprintf_r+0x1b0>
 8007c98:	9b03      	ldr	r3, [sp, #12]
 8007c9a:	3307      	adds	r3, #7
 8007c9c:	f023 0307 	bic.w	r3, r3, #7
 8007ca0:	3308      	adds	r3, #8
 8007ca2:	9303      	str	r3, [sp, #12]
 8007ca4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ca6:	4433      	add	r3, r6
 8007ca8:	9309      	str	r3, [sp, #36]	; 0x24
 8007caa:	e768      	b.n	8007b7e <_svfiprintf_r+0x4e>
 8007cac:	fb0c 3202 	mla	r2, ip, r2, r3
 8007cb0:	460c      	mov	r4, r1
 8007cb2:	2001      	movs	r0, #1
 8007cb4:	e7a6      	b.n	8007c04 <_svfiprintf_r+0xd4>
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	3401      	adds	r4, #1
 8007cba:	9305      	str	r3, [sp, #20]
 8007cbc:	4619      	mov	r1, r3
 8007cbe:	f04f 0c0a 	mov.w	ip, #10
 8007cc2:	4620      	mov	r0, r4
 8007cc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007cc8:	3a30      	subs	r2, #48	; 0x30
 8007cca:	2a09      	cmp	r2, #9
 8007ccc:	d903      	bls.n	8007cd6 <_svfiprintf_r+0x1a6>
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d0c6      	beq.n	8007c60 <_svfiprintf_r+0x130>
 8007cd2:	9105      	str	r1, [sp, #20]
 8007cd4:	e7c4      	b.n	8007c60 <_svfiprintf_r+0x130>
 8007cd6:	fb0c 2101 	mla	r1, ip, r1, r2
 8007cda:	4604      	mov	r4, r0
 8007cdc:	2301      	movs	r3, #1
 8007cde:	e7f0      	b.n	8007cc2 <_svfiprintf_r+0x192>
 8007ce0:	ab03      	add	r3, sp, #12
 8007ce2:	9300      	str	r3, [sp, #0]
 8007ce4:	462a      	mov	r2, r5
 8007ce6:	4b0f      	ldr	r3, [pc, #60]	; (8007d24 <_svfiprintf_r+0x1f4>)
 8007ce8:	a904      	add	r1, sp, #16
 8007cea:	4638      	mov	r0, r7
 8007cec:	f7fd fe62 	bl	80059b4 <_printf_float>
 8007cf0:	1c42      	adds	r2, r0, #1
 8007cf2:	4606      	mov	r6, r0
 8007cf4:	d1d6      	bne.n	8007ca4 <_svfiprintf_r+0x174>
 8007cf6:	89ab      	ldrh	r3, [r5, #12]
 8007cf8:	065b      	lsls	r3, r3, #25
 8007cfa:	f53f af2d 	bmi.w	8007b58 <_svfiprintf_r+0x28>
 8007cfe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d00:	b01d      	add	sp, #116	; 0x74
 8007d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d06:	ab03      	add	r3, sp, #12
 8007d08:	9300      	str	r3, [sp, #0]
 8007d0a:	462a      	mov	r2, r5
 8007d0c:	4b05      	ldr	r3, [pc, #20]	; (8007d24 <_svfiprintf_r+0x1f4>)
 8007d0e:	a904      	add	r1, sp, #16
 8007d10:	4638      	mov	r0, r7
 8007d12:	f7fe f8f3 	bl	8005efc <_printf_i>
 8007d16:	e7eb      	b.n	8007cf0 <_svfiprintf_r+0x1c0>
 8007d18:	08008814 	.word	0x08008814
 8007d1c:	0800881e 	.word	0x0800881e
 8007d20:	080059b5 	.word	0x080059b5
 8007d24:	08007a7d 	.word	0x08007a7d
 8007d28:	0800881a 	.word	0x0800881a

08007d2c <__sflush_r>:
 8007d2c:	898a      	ldrh	r2, [r1, #12]
 8007d2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d32:	4605      	mov	r5, r0
 8007d34:	0710      	lsls	r0, r2, #28
 8007d36:	460c      	mov	r4, r1
 8007d38:	d458      	bmi.n	8007dec <__sflush_r+0xc0>
 8007d3a:	684b      	ldr	r3, [r1, #4]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	dc05      	bgt.n	8007d4c <__sflush_r+0x20>
 8007d40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	dc02      	bgt.n	8007d4c <__sflush_r+0x20>
 8007d46:	2000      	movs	r0, #0
 8007d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d4e:	2e00      	cmp	r6, #0
 8007d50:	d0f9      	beq.n	8007d46 <__sflush_r+0x1a>
 8007d52:	2300      	movs	r3, #0
 8007d54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007d58:	682f      	ldr	r7, [r5, #0]
 8007d5a:	6a21      	ldr	r1, [r4, #32]
 8007d5c:	602b      	str	r3, [r5, #0]
 8007d5e:	d032      	beq.n	8007dc6 <__sflush_r+0x9a>
 8007d60:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007d62:	89a3      	ldrh	r3, [r4, #12]
 8007d64:	075a      	lsls	r2, r3, #29
 8007d66:	d505      	bpl.n	8007d74 <__sflush_r+0x48>
 8007d68:	6863      	ldr	r3, [r4, #4]
 8007d6a:	1ac0      	subs	r0, r0, r3
 8007d6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007d6e:	b10b      	cbz	r3, 8007d74 <__sflush_r+0x48>
 8007d70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007d72:	1ac0      	subs	r0, r0, r3
 8007d74:	2300      	movs	r3, #0
 8007d76:	4602      	mov	r2, r0
 8007d78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d7a:	6a21      	ldr	r1, [r4, #32]
 8007d7c:	4628      	mov	r0, r5
 8007d7e:	47b0      	blx	r6
 8007d80:	1c43      	adds	r3, r0, #1
 8007d82:	89a3      	ldrh	r3, [r4, #12]
 8007d84:	d106      	bne.n	8007d94 <__sflush_r+0x68>
 8007d86:	6829      	ldr	r1, [r5, #0]
 8007d88:	291d      	cmp	r1, #29
 8007d8a:	d82b      	bhi.n	8007de4 <__sflush_r+0xb8>
 8007d8c:	4a29      	ldr	r2, [pc, #164]	; (8007e34 <__sflush_r+0x108>)
 8007d8e:	410a      	asrs	r2, r1
 8007d90:	07d6      	lsls	r6, r2, #31
 8007d92:	d427      	bmi.n	8007de4 <__sflush_r+0xb8>
 8007d94:	2200      	movs	r2, #0
 8007d96:	6062      	str	r2, [r4, #4]
 8007d98:	04d9      	lsls	r1, r3, #19
 8007d9a:	6922      	ldr	r2, [r4, #16]
 8007d9c:	6022      	str	r2, [r4, #0]
 8007d9e:	d504      	bpl.n	8007daa <__sflush_r+0x7e>
 8007da0:	1c42      	adds	r2, r0, #1
 8007da2:	d101      	bne.n	8007da8 <__sflush_r+0x7c>
 8007da4:	682b      	ldr	r3, [r5, #0]
 8007da6:	b903      	cbnz	r3, 8007daa <__sflush_r+0x7e>
 8007da8:	6560      	str	r0, [r4, #84]	; 0x54
 8007daa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007dac:	602f      	str	r7, [r5, #0]
 8007dae:	2900      	cmp	r1, #0
 8007db0:	d0c9      	beq.n	8007d46 <__sflush_r+0x1a>
 8007db2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007db6:	4299      	cmp	r1, r3
 8007db8:	d002      	beq.n	8007dc0 <__sflush_r+0x94>
 8007dba:	4628      	mov	r0, r5
 8007dbc:	f7ff f9e2 	bl	8007184 <_free_r>
 8007dc0:	2000      	movs	r0, #0
 8007dc2:	6360      	str	r0, [r4, #52]	; 0x34
 8007dc4:	e7c0      	b.n	8007d48 <__sflush_r+0x1c>
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	4628      	mov	r0, r5
 8007dca:	47b0      	blx	r6
 8007dcc:	1c41      	adds	r1, r0, #1
 8007dce:	d1c8      	bne.n	8007d62 <__sflush_r+0x36>
 8007dd0:	682b      	ldr	r3, [r5, #0]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d0c5      	beq.n	8007d62 <__sflush_r+0x36>
 8007dd6:	2b1d      	cmp	r3, #29
 8007dd8:	d001      	beq.n	8007dde <__sflush_r+0xb2>
 8007dda:	2b16      	cmp	r3, #22
 8007ddc:	d101      	bne.n	8007de2 <__sflush_r+0xb6>
 8007dde:	602f      	str	r7, [r5, #0]
 8007de0:	e7b1      	b.n	8007d46 <__sflush_r+0x1a>
 8007de2:	89a3      	ldrh	r3, [r4, #12]
 8007de4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007de8:	81a3      	strh	r3, [r4, #12]
 8007dea:	e7ad      	b.n	8007d48 <__sflush_r+0x1c>
 8007dec:	690f      	ldr	r7, [r1, #16]
 8007dee:	2f00      	cmp	r7, #0
 8007df0:	d0a9      	beq.n	8007d46 <__sflush_r+0x1a>
 8007df2:	0793      	lsls	r3, r2, #30
 8007df4:	680e      	ldr	r6, [r1, #0]
 8007df6:	bf08      	it	eq
 8007df8:	694b      	ldreq	r3, [r1, #20]
 8007dfa:	600f      	str	r7, [r1, #0]
 8007dfc:	bf18      	it	ne
 8007dfe:	2300      	movne	r3, #0
 8007e00:	eba6 0807 	sub.w	r8, r6, r7
 8007e04:	608b      	str	r3, [r1, #8]
 8007e06:	f1b8 0f00 	cmp.w	r8, #0
 8007e0a:	dd9c      	ble.n	8007d46 <__sflush_r+0x1a>
 8007e0c:	6a21      	ldr	r1, [r4, #32]
 8007e0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007e10:	4643      	mov	r3, r8
 8007e12:	463a      	mov	r2, r7
 8007e14:	4628      	mov	r0, r5
 8007e16:	47b0      	blx	r6
 8007e18:	2800      	cmp	r0, #0
 8007e1a:	dc06      	bgt.n	8007e2a <__sflush_r+0xfe>
 8007e1c:	89a3      	ldrh	r3, [r4, #12]
 8007e1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e22:	81a3      	strh	r3, [r4, #12]
 8007e24:	f04f 30ff 	mov.w	r0, #4294967295
 8007e28:	e78e      	b.n	8007d48 <__sflush_r+0x1c>
 8007e2a:	4407      	add	r7, r0
 8007e2c:	eba8 0800 	sub.w	r8, r8, r0
 8007e30:	e7e9      	b.n	8007e06 <__sflush_r+0xda>
 8007e32:	bf00      	nop
 8007e34:	dfbffffe 	.word	0xdfbffffe

08007e38 <_fflush_r>:
 8007e38:	b538      	push	{r3, r4, r5, lr}
 8007e3a:	690b      	ldr	r3, [r1, #16]
 8007e3c:	4605      	mov	r5, r0
 8007e3e:	460c      	mov	r4, r1
 8007e40:	b913      	cbnz	r3, 8007e48 <_fflush_r+0x10>
 8007e42:	2500      	movs	r5, #0
 8007e44:	4628      	mov	r0, r5
 8007e46:	bd38      	pop	{r3, r4, r5, pc}
 8007e48:	b118      	cbz	r0, 8007e52 <_fflush_r+0x1a>
 8007e4a:	6a03      	ldr	r3, [r0, #32]
 8007e4c:	b90b      	cbnz	r3, 8007e52 <_fflush_r+0x1a>
 8007e4e:	f7fe fa03 	bl	8006258 <__sinit>
 8007e52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d0f3      	beq.n	8007e42 <_fflush_r+0xa>
 8007e5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007e5c:	07d0      	lsls	r0, r2, #31
 8007e5e:	d404      	bmi.n	8007e6a <_fflush_r+0x32>
 8007e60:	0599      	lsls	r1, r3, #22
 8007e62:	d402      	bmi.n	8007e6a <_fflush_r+0x32>
 8007e64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e66:	f7fe fb0e 	bl	8006486 <__retarget_lock_acquire_recursive>
 8007e6a:	4628      	mov	r0, r5
 8007e6c:	4621      	mov	r1, r4
 8007e6e:	f7ff ff5d 	bl	8007d2c <__sflush_r>
 8007e72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e74:	07da      	lsls	r2, r3, #31
 8007e76:	4605      	mov	r5, r0
 8007e78:	d4e4      	bmi.n	8007e44 <_fflush_r+0xc>
 8007e7a:	89a3      	ldrh	r3, [r4, #12]
 8007e7c:	059b      	lsls	r3, r3, #22
 8007e7e:	d4e1      	bmi.n	8007e44 <_fflush_r+0xc>
 8007e80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e82:	f7fe fb01 	bl	8006488 <__retarget_lock_release_recursive>
 8007e86:	e7dd      	b.n	8007e44 <_fflush_r+0xc>

08007e88 <memmove>:
 8007e88:	4288      	cmp	r0, r1
 8007e8a:	b510      	push	{r4, lr}
 8007e8c:	eb01 0402 	add.w	r4, r1, r2
 8007e90:	d902      	bls.n	8007e98 <memmove+0x10>
 8007e92:	4284      	cmp	r4, r0
 8007e94:	4623      	mov	r3, r4
 8007e96:	d807      	bhi.n	8007ea8 <memmove+0x20>
 8007e98:	1e43      	subs	r3, r0, #1
 8007e9a:	42a1      	cmp	r1, r4
 8007e9c:	d008      	beq.n	8007eb0 <memmove+0x28>
 8007e9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ea2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007ea6:	e7f8      	b.n	8007e9a <memmove+0x12>
 8007ea8:	4402      	add	r2, r0
 8007eaa:	4601      	mov	r1, r0
 8007eac:	428a      	cmp	r2, r1
 8007eae:	d100      	bne.n	8007eb2 <memmove+0x2a>
 8007eb0:	bd10      	pop	{r4, pc}
 8007eb2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007eb6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007eba:	e7f7      	b.n	8007eac <memmove+0x24>

08007ebc <_sbrk_r>:
 8007ebc:	b538      	push	{r3, r4, r5, lr}
 8007ebe:	4d06      	ldr	r5, [pc, #24]	; (8007ed8 <_sbrk_r+0x1c>)
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	4604      	mov	r4, r0
 8007ec4:	4608      	mov	r0, r1
 8007ec6:	602b      	str	r3, [r5, #0]
 8007ec8:	f7f9 fafe 	bl	80014c8 <_sbrk>
 8007ecc:	1c43      	adds	r3, r0, #1
 8007ece:	d102      	bne.n	8007ed6 <_sbrk_r+0x1a>
 8007ed0:	682b      	ldr	r3, [r5, #0]
 8007ed2:	b103      	cbz	r3, 8007ed6 <_sbrk_r+0x1a>
 8007ed4:	6023      	str	r3, [r4, #0]
 8007ed6:	bd38      	pop	{r3, r4, r5, pc}
 8007ed8:	2000044c 	.word	0x2000044c

08007edc <memcpy>:
 8007edc:	440a      	add	r2, r1
 8007ede:	4291      	cmp	r1, r2
 8007ee0:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ee4:	d100      	bne.n	8007ee8 <memcpy+0xc>
 8007ee6:	4770      	bx	lr
 8007ee8:	b510      	push	{r4, lr}
 8007eea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007eee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ef2:	4291      	cmp	r1, r2
 8007ef4:	d1f9      	bne.n	8007eea <memcpy+0xe>
 8007ef6:	bd10      	pop	{r4, pc}

08007ef8 <__assert_func>:
 8007ef8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007efa:	4614      	mov	r4, r2
 8007efc:	461a      	mov	r2, r3
 8007efe:	4b09      	ldr	r3, [pc, #36]	; (8007f24 <__assert_func+0x2c>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4605      	mov	r5, r0
 8007f04:	68d8      	ldr	r0, [r3, #12]
 8007f06:	b14c      	cbz	r4, 8007f1c <__assert_func+0x24>
 8007f08:	4b07      	ldr	r3, [pc, #28]	; (8007f28 <__assert_func+0x30>)
 8007f0a:	9100      	str	r1, [sp, #0]
 8007f0c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007f10:	4906      	ldr	r1, [pc, #24]	; (8007f2c <__assert_func+0x34>)
 8007f12:	462b      	mov	r3, r5
 8007f14:	f000 f872 	bl	8007ffc <fiprintf>
 8007f18:	f000 f882 	bl	8008020 <abort>
 8007f1c:	4b04      	ldr	r3, [pc, #16]	; (8007f30 <__assert_func+0x38>)
 8007f1e:	461c      	mov	r4, r3
 8007f20:	e7f3      	b.n	8007f0a <__assert_func+0x12>
 8007f22:	bf00      	nop
 8007f24:	20000064 	.word	0x20000064
 8007f28:	0800882f 	.word	0x0800882f
 8007f2c:	0800883c 	.word	0x0800883c
 8007f30:	0800886a 	.word	0x0800886a

08007f34 <_calloc_r>:
 8007f34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f36:	fba1 2402 	umull	r2, r4, r1, r2
 8007f3a:	b94c      	cbnz	r4, 8007f50 <_calloc_r+0x1c>
 8007f3c:	4611      	mov	r1, r2
 8007f3e:	9201      	str	r2, [sp, #4]
 8007f40:	f7ff f994 	bl	800726c <_malloc_r>
 8007f44:	9a01      	ldr	r2, [sp, #4]
 8007f46:	4605      	mov	r5, r0
 8007f48:	b930      	cbnz	r0, 8007f58 <_calloc_r+0x24>
 8007f4a:	4628      	mov	r0, r5
 8007f4c:	b003      	add	sp, #12
 8007f4e:	bd30      	pop	{r4, r5, pc}
 8007f50:	220c      	movs	r2, #12
 8007f52:	6002      	str	r2, [r0, #0]
 8007f54:	2500      	movs	r5, #0
 8007f56:	e7f8      	b.n	8007f4a <_calloc_r+0x16>
 8007f58:	4621      	mov	r1, r4
 8007f5a:	f7fe fa16 	bl	800638a <memset>
 8007f5e:	e7f4      	b.n	8007f4a <_calloc_r+0x16>

08007f60 <__ascii_mbtowc>:
 8007f60:	b082      	sub	sp, #8
 8007f62:	b901      	cbnz	r1, 8007f66 <__ascii_mbtowc+0x6>
 8007f64:	a901      	add	r1, sp, #4
 8007f66:	b142      	cbz	r2, 8007f7a <__ascii_mbtowc+0x1a>
 8007f68:	b14b      	cbz	r3, 8007f7e <__ascii_mbtowc+0x1e>
 8007f6a:	7813      	ldrb	r3, [r2, #0]
 8007f6c:	600b      	str	r3, [r1, #0]
 8007f6e:	7812      	ldrb	r2, [r2, #0]
 8007f70:	1e10      	subs	r0, r2, #0
 8007f72:	bf18      	it	ne
 8007f74:	2001      	movne	r0, #1
 8007f76:	b002      	add	sp, #8
 8007f78:	4770      	bx	lr
 8007f7a:	4610      	mov	r0, r2
 8007f7c:	e7fb      	b.n	8007f76 <__ascii_mbtowc+0x16>
 8007f7e:	f06f 0001 	mvn.w	r0, #1
 8007f82:	e7f8      	b.n	8007f76 <__ascii_mbtowc+0x16>

08007f84 <_realloc_r>:
 8007f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f88:	4680      	mov	r8, r0
 8007f8a:	4614      	mov	r4, r2
 8007f8c:	460e      	mov	r6, r1
 8007f8e:	b921      	cbnz	r1, 8007f9a <_realloc_r+0x16>
 8007f90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f94:	4611      	mov	r1, r2
 8007f96:	f7ff b969 	b.w	800726c <_malloc_r>
 8007f9a:	b92a      	cbnz	r2, 8007fa8 <_realloc_r+0x24>
 8007f9c:	f7ff f8f2 	bl	8007184 <_free_r>
 8007fa0:	4625      	mov	r5, r4
 8007fa2:	4628      	mov	r0, r5
 8007fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fa8:	f000 f841 	bl	800802e <_malloc_usable_size_r>
 8007fac:	4284      	cmp	r4, r0
 8007fae:	4607      	mov	r7, r0
 8007fb0:	d802      	bhi.n	8007fb8 <_realloc_r+0x34>
 8007fb2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007fb6:	d812      	bhi.n	8007fde <_realloc_r+0x5a>
 8007fb8:	4621      	mov	r1, r4
 8007fba:	4640      	mov	r0, r8
 8007fbc:	f7ff f956 	bl	800726c <_malloc_r>
 8007fc0:	4605      	mov	r5, r0
 8007fc2:	2800      	cmp	r0, #0
 8007fc4:	d0ed      	beq.n	8007fa2 <_realloc_r+0x1e>
 8007fc6:	42bc      	cmp	r4, r7
 8007fc8:	4622      	mov	r2, r4
 8007fca:	4631      	mov	r1, r6
 8007fcc:	bf28      	it	cs
 8007fce:	463a      	movcs	r2, r7
 8007fd0:	f7ff ff84 	bl	8007edc <memcpy>
 8007fd4:	4631      	mov	r1, r6
 8007fd6:	4640      	mov	r0, r8
 8007fd8:	f7ff f8d4 	bl	8007184 <_free_r>
 8007fdc:	e7e1      	b.n	8007fa2 <_realloc_r+0x1e>
 8007fde:	4635      	mov	r5, r6
 8007fe0:	e7df      	b.n	8007fa2 <_realloc_r+0x1e>

08007fe2 <__ascii_wctomb>:
 8007fe2:	b149      	cbz	r1, 8007ff8 <__ascii_wctomb+0x16>
 8007fe4:	2aff      	cmp	r2, #255	; 0xff
 8007fe6:	bf85      	ittet	hi
 8007fe8:	238a      	movhi	r3, #138	; 0x8a
 8007fea:	6003      	strhi	r3, [r0, #0]
 8007fec:	700a      	strbls	r2, [r1, #0]
 8007fee:	f04f 30ff 	movhi.w	r0, #4294967295
 8007ff2:	bf98      	it	ls
 8007ff4:	2001      	movls	r0, #1
 8007ff6:	4770      	bx	lr
 8007ff8:	4608      	mov	r0, r1
 8007ffa:	4770      	bx	lr

08007ffc <fiprintf>:
 8007ffc:	b40e      	push	{r1, r2, r3}
 8007ffe:	b503      	push	{r0, r1, lr}
 8008000:	4601      	mov	r1, r0
 8008002:	ab03      	add	r3, sp, #12
 8008004:	4805      	ldr	r0, [pc, #20]	; (800801c <fiprintf+0x20>)
 8008006:	f853 2b04 	ldr.w	r2, [r3], #4
 800800a:	6800      	ldr	r0, [r0, #0]
 800800c:	9301      	str	r3, [sp, #4]
 800800e:	f000 f83f 	bl	8008090 <_vfiprintf_r>
 8008012:	b002      	add	sp, #8
 8008014:	f85d eb04 	ldr.w	lr, [sp], #4
 8008018:	b003      	add	sp, #12
 800801a:	4770      	bx	lr
 800801c:	20000064 	.word	0x20000064

08008020 <abort>:
 8008020:	b508      	push	{r3, lr}
 8008022:	2006      	movs	r0, #6
 8008024:	f000 fa0c 	bl	8008440 <raise>
 8008028:	2001      	movs	r0, #1
 800802a:	f7f9 f9d5 	bl	80013d8 <_exit>

0800802e <_malloc_usable_size_r>:
 800802e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008032:	1f18      	subs	r0, r3, #4
 8008034:	2b00      	cmp	r3, #0
 8008036:	bfbc      	itt	lt
 8008038:	580b      	ldrlt	r3, [r1, r0]
 800803a:	18c0      	addlt	r0, r0, r3
 800803c:	4770      	bx	lr

0800803e <__sfputc_r>:
 800803e:	6893      	ldr	r3, [r2, #8]
 8008040:	3b01      	subs	r3, #1
 8008042:	2b00      	cmp	r3, #0
 8008044:	b410      	push	{r4}
 8008046:	6093      	str	r3, [r2, #8]
 8008048:	da08      	bge.n	800805c <__sfputc_r+0x1e>
 800804a:	6994      	ldr	r4, [r2, #24]
 800804c:	42a3      	cmp	r3, r4
 800804e:	db01      	blt.n	8008054 <__sfputc_r+0x16>
 8008050:	290a      	cmp	r1, #10
 8008052:	d103      	bne.n	800805c <__sfputc_r+0x1e>
 8008054:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008058:	f000 b934 	b.w	80082c4 <__swbuf_r>
 800805c:	6813      	ldr	r3, [r2, #0]
 800805e:	1c58      	adds	r0, r3, #1
 8008060:	6010      	str	r0, [r2, #0]
 8008062:	7019      	strb	r1, [r3, #0]
 8008064:	4608      	mov	r0, r1
 8008066:	f85d 4b04 	ldr.w	r4, [sp], #4
 800806a:	4770      	bx	lr

0800806c <__sfputs_r>:
 800806c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800806e:	4606      	mov	r6, r0
 8008070:	460f      	mov	r7, r1
 8008072:	4614      	mov	r4, r2
 8008074:	18d5      	adds	r5, r2, r3
 8008076:	42ac      	cmp	r4, r5
 8008078:	d101      	bne.n	800807e <__sfputs_r+0x12>
 800807a:	2000      	movs	r0, #0
 800807c:	e007      	b.n	800808e <__sfputs_r+0x22>
 800807e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008082:	463a      	mov	r2, r7
 8008084:	4630      	mov	r0, r6
 8008086:	f7ff ffda 	bl	800803e <__sfputc_r>
 800808a:	1c43      	adds	r3, r0, #1
 800808c:	d1f3      	bne.n	8008076 <__sfputs_r+0xa>
 800808e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008090 <_vfiprintf_r>:
 8008090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008094:	460d      	mov	r5, r1
 8008096:	b09d      	sub	sp, #116	; 0x74
 8008098:	4614      	mov	r4, r2
 800809a:	4698      	mov	r8, r3
 800809c:	4606      	mov	r6, r0
 800809e:	b118      	cbz	r0, 80080a8 <_vfiprintf_r+0x18>
 80080a0:	6a03      	ldr	r3, [r0, #32]
 80080a2:	b90b      	cbnz	r3, 80080a8 <_vfiprintf_r+0x18>
 80080a4:	f7fe f8d8 	bl	8006258 <__sinit>
 80080a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80080aa:	07d9      	lsls	r1, r3, #31
 80080ac:	d405      	bmi.n	80080ba <_vfiprintf_r+0x2a>
 80080ae:	89ab      	ldrh	r3, [r5, #12]
 80080b0:	059a      	lsls	r2, r3, #22
 80080b2:	d402      	bmi.n	80080ba <_vfiprintf_r+0x2a>
 80080b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80080b6:	f7fe f9e6 	bl	8006486 <__retarget_lock_acquire_recursive>
 80080ba:	89ab      	ldrh	r3, [r5, #12]
 80080bc:	071b      	lsls	r3, r3, #28
 80080be:	d501      	bpl.n	80080c4 <_vfiprintf_r+0x34>
 80080c0:	692b      	ldr	r3, [r5, #16]
 80080c2:	b99b      	cbnz	r3, 80080ec <_vfiprintf_r+0x5c>
 80080c4:	4629      	mov	r1, r5
 80080c6:	4630      	mov	r0, r6
 80080c8:	f000 f93a 	bl	8008340 <__swsetup_r>
 80080cc:	b170      	cbz	r0, 80080ec <_vfiprintf_r+0x5c>
 80080ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80080d0:	07dc      	lsls	r4, r3, #31
 80080d2:	d504      	bpl.n	80080de <_vfiprintf_r+0x4e>
 80080d4:	f04f 30ff 	mov.w	r0, #4294967295
 80080d8:	b01d      	add	sp, #116	; 0x74
 80080da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080de:	89ab      	ldrh	r3, [r5, #12]
 80080e0:	0598      	lsls	r0, r3, #22
 80080e2:	d4f7      	bmi.n	80080d4 <_vfiprintf_r+0x44>
 80080e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80080e6:	f7fe f9cf 	bl	8006488 <__retarget_lock_release_recursive>
 80080ea:	e7f3      	b.n	80080d4 <_vfiprintf_r+0x44>
 80080ec:	2300      	movs	r3, #0
 80080ee:	9309      	str	r3, [sp, #36]	; 0x24
 80080f0:	2320      	movs	r3, #32
 80080f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80080f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80080fa:	2330      	movs	r3, #48	; 0x30
 80080fc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80082b0 <_vfiprintf_r+0x220>
 8008100:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008104:	f04f 0901 	mov.w	r9, #1
 8008108:	4623      	mov	r3, r4
 800810a:	469a      	mov	sl, r3
 800810c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008110:	b10a      	cbz	r2, 8008116 <_vfiprintf_r+0x86>
 8008112:	2a25      	cmp	r2, #37	; 0x25
 8008114:	d1f9      	bne.n	800810a <_vfiprintf_r+0x7a>
 8008116:	ebba 0b04 	subs.w	fp, sl, r4
 800811a:	d00b      	beq.n	8008134 <_vfiprintf_r+0xa4>
 800811c:	465b      	mov	r3, fp
 800811e:	4622      	mov	r2, r4
 8008120:	4629      	mov	r1, r5
 8008122:	4630      	mov	r0, r6
 8008124:	f7ff ffa2 	bl	800806c <__sfputs_r>
 8008128:	3001      	adds	r0, #1
 800812a:	f000 80a9 	beq.w	8008280 <_vfiprintf_r+0x1f0>
 800812e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008130:	445a      	add	r2, fp
 8008132:	9209      	str	r2, [sp, #36]	; 0x24
 8008134:	f89a 3000 	ldrb.w	r3, [sl]
 8008138:	2b00      	cmp	r3, #0
 800813a:	f000 80a1 	beq.w	8008280 <_vfiprintf_r+0x1f0>
 800813e:	2300      	movs	r3, #0
 8008140:	f04f 32ff 	mov.w	r2, #4294967295
 8008144:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008148:	f10a 0a01 	add.w	sl, sl, #1
 800814c:	9304      	str	r3, [sp, #16]
 800814e:	9307      	str	r3, [sp, #28]
 8008150:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008154:	931a      	str	r3, [sp, #104]	; 0x68
 8008156:	4654      	mov	r4, sl
 8008158:	2205      	movs	r2, #5
 800815a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800815e:	4854      	ldr	r0, [pc, #336]	; (80082b0 <_vfiprintf_r+0x220>)
 8008160:	f7f8 f836 	bl	80001d0 <memchr>
 8008164:	9a04      	ldr	r2, [sp, #16]
 8008166:	b9d8      	cbnz	r0, 80081a0 <_vfiprintf_r+0x110>
 8008168:	06d1      	lsls	r1, r2, #27
 800816a:	bf44      	itt	mi
 800816c:	2320      	movmi	r3, #32
 800816e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008172:	0713      	lsls	r3, r2, #28
 8008174:	bf44      	itt	mi
 8008176:	232b      	movmi	r3, #43	; 0x2b
 8008178:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800817c:	f89a 3000 	ldrb.w	r3, [sl]
 8008180:	2b2a      	cmp	r3, #42	; 0x2a
 8008182:	d015      	beq.n	80081b0 <_vfiprintf_r+0x120>
 8008184:	9a07      	ldr	r2, [sp, #28]
 8008186:	4654      	mov	r4, sl
 8008188:	2000      	movs	r0, #0
 800818a:	f04f 0c0a 	mov.w	ip, #10
 800818e:	4621      	mov	r1, r4
 8008190:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008194:	3b30      	subs	r3, #48	; 0x30
 8008196:	2b09      	cmp	r3, #9
 8008198:	d94d      	bls.n	8008236 <_vfiprintf_r+0x1a6>
 800819a:	b1b0      	cbz	r0, 80081ca <_vfiprintf_r+0x13a>
 800819c:	9207      	str	r2, [sp, #28]
 800819e:	e014      	b.n	80081ca <_vfiprintf_r+0x13a>
 80081a0:	eba0 0308 	sub.w	r3, r0, r8
 80081a4:	fa09 f303 	lsl.w	r3, r9, r3
 80081a8:	4313      	orrs	r3, r2
 80081aa:	9304      	str	r3, [sp, #16]
 80081ac:	46a2      	mov	sl, r4
 80081ae:	e7d2      	b.n	8008156 <_vfiprintf_r+0xc6>
 80081b0:	9b03      	ldr	r3, [sp, #12]
 80081b2:	1d19      	adds	r1, r3, #4
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	9103      	str	r1, [sp, #12]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	bfbb      	ittet	lt
 80081bc:	425b      	neglt	r3, r3
 80081be:	f042 0202 	orrlt.w	r2, r2, #2
 80081c2:	9307      	strge	r3, [sp, #28]
 80081c4:	9307      	strlt	r3, [sp, #28]
 80081c6:	bfb8      	it	lt
 80081c8:	9204      	strlt	r2, [sp, #16]
 80081ca:	7823      	ldrb	r3, [r4, #0]
 80081cc:	2b2e      	cmp	r3, #46	; 0x2e
 80081ce:	d10c      	bne.n	80081ea <_vfiprintf_r+0x15a>
 80081d0:	7863      	ldrb	r3, [r4, #1]
 80081d2:	2b2a      	cmp	r3, #42	; 0x2a
 80081d4:	d134      	bne.n	8008240 <_vfiprintf_r+0x1b0>
 80081d6:	9b03      	ldr	r3, [sp, #12]
 80081d8:	1d1a      	adds	r2, r3, #4
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	9203      	str	r2, [sp, #12]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	bfb8      	it	lt
 80081e2:	f04f 33ff 	movlt.w	r3, #4294967295
 80081e6:	3402      	adds	r4, #2
 80081e8:	9305      	str	r3, [sp, #20]
 80081ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80082c0 <_vfiprintf_r+0x230>
 80081ee:	7821      	ldrb	r1, [r4, #0]
 80081f0:	2203      	movs	r2, #3
 80081f2:	4650      	mov	r0, sl
 80081f4:	f7f7 ffec 	bl	80001d0 <memchr>
 80081f8:	b138      	cbz	r0, 800820a <_vfiprintf_r+0x17a>
 80081fa:	9b04      	ldr	r3, [sp, #16]
 80081fc:	eba0 000a 	sub.w	r0, r0, sl
 8008200:	2240      	movs	r2, #64	; 0x40
 8008202:	4082      	lsls	r2, r0
 8008204:	4313      	orrs	r3, r2
 8008206:	3401      	adds	r4, #1
 8008208:	9304      	str	r3, [sp, #16]
 800820a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800820e:	4829      	ldr	r0, [pc, #164]	; (80082b4 <_vfiprintf_r+0x224>)
 8008210:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008214:	2206      	movs	r2, #6
 8008216:	f7f7 ffdb 	bl	80001d0 <memchr>
 800821a:	2800      	cmp	r0, #0
 800821c:	d03f      	beq.n	800829e <_vfiprintf_r+0x20e>
 800821e:	4b26      	ldr	r3, [pc, #152]	; (80082b8 <_vfiprintf_r+0x228>)
 8008220:	bb1b      	cbnz	r3, 800826a <_vfiprintf_r+0x1da>
 8008222:	9b03      	ldr	r3, [sp, #12]
 8008224:	3307      	adds	r3, #7
 8008226:	f023 0307 	bic.w	r3, r3, #7
 800822a:	3308      	adds	r3, #8
 800822c:	9303      	str	r3, [sp, #12]
 800822e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008230:	443b      	add	r3, r7
 8008232:	9309      	str	r3, [sp, #36]	; 0x24
 8008234:	e768      	b.n	8008108 <_vfiprintf_r+0x78>
 8008236:	fb0c 3202 	mla	r2, ip, r2, r3
 800823a:	460c      	mov	r4, r1
 800823c:	2001      	movs	r0, #1
 800823e:	e7a6      	b.n	800818e <_vfiprintf_r+0xfe>
 8008240:	2300      	movs	r3, #0
 8008242:	3401      	adds	r4, #1
 8008244:	9305      	str	r3, [sp, #20]
 8008246:	4619      	mov	r1, r3
 8008248:	f04f 0c0a 	mov.w	ip, #10
 800824c:	4620      	mov	r0, r4
 800824e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008252:	3a30      	subs	r2, #48	; 0x30
 8008254:	2a09      	cmp	r2, #9
 8008256:	d903      	bls.n	8008260 <_vfiprintf_r+0x1d0>
 8008258:	2b00      	cmp	r3, #0
 800825a:	d0c6      	beq.n	80081ea <_vfiprintf_r+0x15a>
 800825c:	9105      	str	r1, [sp, #20]
 800825e:	e7c4      	b.n	80081ea <_vfiprintf_r+0x15a>
 8008260:	fb0c 2101 	mla	r1, ip, r1, r2
 8008264:	4604      	mov	r4, r0
 8008266:	2301      	movs	r3, #1
 8008268:	e7f0      	b.n	800824c <_vfiprintf_r+0x1bc>
 800826a:	ab03      	add	r3, sp, #12
 800826c:	9300      	str	r3, [sp, #0]
 800826e:	462a      	mov	r2, r5
 8008270:	4b12      	ldr	r3, [pc, #72]	; (80082bc <_vfiprintf_r+0x22c>)
 8008272:	a904      	add	r1, sp, #16
 8008274:	4630      	mov	r0, r6
 8008276:	f7fd fb9d 	bl	80059b4 <_printf_float>
 800827a:	4607      	mov	r7, r0
 800827c:	1c78      	adds	r0, r7, #1
 800827e:	d1d6      	bne.n	800822e <_vfiprintf_r+0x19e>
 8008280:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008282:	07d9      	lsls	r1, r3, #31
 8008284:	d405      	bmi.n	8008292 <_vfiprintf_r+0x202>
 8008286:	89ab      	ldrh	r3, [r5, #12]
 8008288:	059a      	lsls	r2, r3, #22
 800828a:	d402      	bmi.n	8008292 <_vfiprintf_r+0x202>
 800828c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800828e:	f7fe f8fb 	bl	8006488 <__retarget_lock_release_recursive>
 8008292:	89ab      	ldrh	r3, [r5, #12]
 8008294:	065b      	lsls	r3, r3, #25
 8008296:	f53f af1d 	bmi.w	80080d4 <_vfiprintf_r+0x44>
 800829a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800829c:	e71c      	b.n	80080d8 <_vfiprintf_r+0x48>
 800829e:	ab03      	add	r3, sp, #12
 80082a0:	9300      	str	r3, [sp, #0]
 80082a2:	462a      	mov	r2, r5
 80082a4:	4b05      	ldr	r3, [pc, #20]	; (80082bc <_vfiprintf_r+0x22c>)
 80082a6:	a904      	add	r1, sp, #16
 80082a8:	4630      	mov	r0, r6
 80082aa:	f7fd fe27 	bl	8005efc <_printf_i>
 80082ae:	e7e4      	b.n	800827a <_vfiprintf_r+0x1ea>
 80082b0:	08008814 	.word	0x08008814
 80082b4:	0800881e 	.word	0x0800881e
 80082b8:	080059b5 	.word	0x080059b5
 80082bc:	0800806d 	.word	0x0800806d
 80082c0:	0800881a 	.word	0x0800881a

080082c4 <__swbuf_r>:
 80082c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082c6:	460e      	mov	r6, r1
 80082c8:	4614      	mov	r4, r2
 80082ca:	4605      	mov	r5, r0
 80082cc:	b118      	cbz	r0, 80082d6 <__swbuf_r+0x12>
 80082ce:	6a03      	ldr	r3, [r0, #32]
 80082d0:	b90b      	cbnz	r3, 80082d6 <__swbuf_r+0x12>
 80082d2:	f7fd ffc1 	bl	8006258 <__sinit>
 80082d6:	69a3      	ldr	r3, [r4, #24]
 80082d8:	60a3      	str	r3, [r4, #8]
 80082da:	89a3      	ldrh	r3, [r4, #12]
 80082dc:	071a      	lsls	r2, r3, #28
 80082de:	d525      	bpl.n	800832c <__swbuf_r+0x68>
 80082e0:	6923      	ldr	r3, [r4, #16]
 80082e2:	b31b      	cbz	r3, 800832c <__swbuf_r+0x68>
 80082e4:	6823      	ldr	r3, [r4, #0]
 80082e6:	6922      	ldr	r2, [r4, #16]
 80082e8:	1a98      	subs	r0, r3, r2
 80082ea:	6963      	ldr	r3, [r4, #20]
 80082ec:	b2f6      	uxtb	r6, r6
 80082ee:	4283      	cmp	r3, r0
 80082f0:	4637      	mov	r7, r6
 80082f2:	dc04      	bgt.n	80082fe <__swbuf_r+0x3a>
 80082f4:	4621      	mov	r1, r4
 80082f6:	4628      	mov	r0, r5
 80082f8:	f7ff fd9e 	bl	8007e38 <_fflush_r>
 80082fc:	b9e0      	cbnz	r0, 8008338 <__swbuf_r+0x74>
 80082fe:	68a3      	ldr	r3, [r4, #8]
 8008300:	3b01      	subs	r3, #1
 8008302:	60a3      	str	r3, [r4, #8]
 8008304:	6823      	ldr	r3, [r4, #0]
 8008306:	1c5a      	adds	r2, r3, #1
 8008308:	6022      	str	r2, [r4, #0]
 800830a:	701e      	strb	r6, [r3, #0]
 800830c:	6962      	ldr	r2, [r4, #20]
 800830e:	1c43      	adds	r3, r0, #1
 8008310:	429a      	cmp	r2, r3
 8008312:	d004      	beq.n	800831e <__swbuf_r+0x5a>
 8008314:	89a3      	ldrh	r3, [r4, #12]
 8008316:	07db      	lsls	r3, r3, #31
 8008318:	d506      	bpl.n	8008328 <__swbuf_r+0x64>
 800831a:	2e0a      	cmp	r6, #10
 800831c:	d104      	bne.n	8008328 <__swbuf_r+0x64>
 800831e:	4621      	mov	r1, r4
 8008320:	4628      	mov	r0, r5
 8008322:	f7ff fd89 	bl	8007e38 <_fflush_r>
 8008326:	b938      	cbnz	r0, 8008338 <__swbuf_r+0x74>
 8008328:	4638      	mov	r0, r7
 800832a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800832c:	4621      	mov	r1, r4
 800832e:	4628      	mov	r0, r5
 8008330:	f000 f806 	bl	8008340 <__swsetup_r>
 8008334:	2800      	cmp	r0, #0
 8008336:	d0d5      	beq.n	80082e4 <__swbuf_r+0x20>
 8008338:	f04f 37ff 	mov.w	r7, #4294967295
 800833c:	e7f4      	b.n	8008328 <__swbuf_r+0x64>
	...

08008340 <__swsetup_r>:
 8008340:	b538      	push	{r3, r4, r5, lr}
 8008342:	4b2a      	ldr	r3, [pc, #168]	; (80083ec <__swsetup_r+0xac>)
 8008344:	4605      	mov	r5, r0
 8008346:	6818      	ldr	r0, [r3, #0]
 8008348:	460c      	mov	r4, r1
 800834a:	b118      	cbz	r0, 8008354 <__swsetup_r+0x14>
 800834c:	6a03      	ldr	r3, [r0, #32]
 800834e:	b90b      	cbnz	r3, 8008354 <__swsetup_r+0x14>
 8008350:	f7fd ff82 	bl	8006258 <__sinit>
 8008354:	89a3      	ldrh	r3, [r4, #12]
 8008356:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800835a:	0718      	lsls	r0, r3, #28
 800835c:	d422      	bmi.n	80083a4 <__swsetup_r+0x64>
 800835e:	06d9      	lsls	r1, r3, #27
 8008360:	d407      	bmi.n	8008372 <__swsetup_r+0x32>
 8008362:	2309      	movs	r3, #9
 8008364:	602b      	str	r3, [r5, #0]
 8008366:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800836a:	81a3      	strh	r3, [r4, #12]
 800836c:	f04f 30ff 	mov.w	r0, #4294967295
 8008370:	e034      	b.n	80083dc <__swsetup_r+0x9c>
 8008372:	0758      	lsls	r0, r3, #29
 8008374:	d512      	bpl.n	800839c <__swsetup_r+0x5c>
 8008376:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008378:	b141      	cbz	r1, 800838c <__swsetup_r+0x4c>
 800837a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800837e:	4299      	cmp	r1, r3
 8008380:	d002      	beq.n	8008388 <__swsetup_r+0x48>
 8008382:	4628      	mov	r0, r5
 8008384:	f7fe fefe 	bl	8007184 <_free_r>
 8008388:	2300      	movs	r3, #0
 800838a:	6363      	str	r3, [r4, #52]	; 0x34
 800838c:	89a3      	ldrh	r3, [r4, #12]
 800838e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008392:	81a3      	strh	r3, [r4, #12]
 8008394:	2300      	movs	r3, #0
 8008396:	6063      	str	r3, [r4, #4]
 8008398:	6923      	ldr	r3, [r4, #16]
 800839a:	6023      	str	r3, [r4, #0]
 800839c:	89a3      	ldrh	r3, [r4, #12]
 800839e:	f043 0308 	orr.w	r3, r3, #8
 80083a2:	81a3      	strh	r3, [r4, #12]
 80083a4:	6923      	ldr	r3, [r4, #16]
 80083a6:	b94b      	cbnz	r3, 80083bc <__swsetup_r+0x7c>
 80083a8:	89a3      	ldrh	r3, [r4, #12]
 80083aa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80083ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083b2:	d003      	beq.n	80083bc <__swsetup_r+0x7c>
 80083b4:	4621      	mov	r1, r4
 80083b6:	4628      	mov	r0, r5
 80083b8:	f000 f884 	bl	80084c4 <__smakebuf_r>
 80083bc:	89a0      	ldrh	r0, [r4, #12]
 80083be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80083c2:	f010 0301 	ands.w	r3, r0, #1
 80083c6:	d00a      	beq.n	80083de <__swsetup_r+0x9e>
 80083c8:	2300      	movs	r3, #0
 80083ca:	60a3      	str	r3, [r4, #8]
 80083cc:	6963      	ldr	r3, [r4, #20]
 80083ce:	425b      	negs	r3, r3
 80083d0:	61a3      	str	r3, [r4, #24]
 80083d2:	6923      	ldr	r3, [r4, #16]
 80083d4:	b943      	cbnz	r3, 80083e8 <__swsetup_r+0xa8>
 80083d6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80083da:	d1c4      	bne.n	8008366 <__swsetup_r+0x26>
 80083dc:	bd38      	pop	{r3, r4, r5, pc}
 80083de:	0781      	lsls	r1, r0, #30
 80083e0:	bf58      	it	pl
 80083e2:	6963      	ldrpl	r3, [r4, #20]
 80083e4:	60a3      	str	r3, [r4, #8]
 80083e6:	e7f4      	b.n	80083d2 <__swsetup_r+0x92>
 80083e8:	2000      	movs	r0, #0
 80083ea:	e7f7      	b.n	80083dc <__swsetup_r+0x9c>
 80083ec:	20000064 	.word	0x20000064

080083f0 <_raise_r>:
 80083f0:	291f      	cmp	r1, #31
 80083f2:	b538      	push	{r3, r4, r5, lr}
 80083f4:	4604      	mov	r4, r0
 80083f6:	460d      	mov	r5, r1
 80083f8:	d904      	bls.n	8008404 <_raise_r+0x14>
 80083fa:	2316      	movs	r3, #22
 80083fc:	6003      	str	r3, [r0, #0]
 80083fe:	f04f 30ff 	mov.w	r0, #4294967295
 8008402:	bd38      	pop	{r3, r4, r5, pc}
 8008404:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008406:	b112      	cbz	r2, 800840e <_raise_r+0x1e>
 8008408:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800840c:	b94b      	cbnz	r3, 8008422 <_raise_r+0x32>
 800840e:	4620      	mov	r0, r4
 8008410:	f000 f830 	bl	8008474 <_getpid_r>
 8008414:	462a      	mov	r2, r5
 8008416:	4601      	mov	r1, r0
 8008418:	4620      	mov	r0, r4
 800841a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800841e:	f000 b817 	b.w	8008450 <_kill_r>
 8008422:	2b01      	cmp	r3, #1
 8008424:	d00a      	beq.n	800843c <_raise_r+0x4c>
 8008426:	1c59      	adds	r1, r3, #1
 8008428:	d103      	bne.n	8008432 <_raise_r+0x42>
 800842a:	2316      	movs	r3, #22
 800842c:	6003      	str	r3, [r0, #0]
 800842e:	2001      	movs	r0, #1
 8008430:	e7e7      	b.n	8008402 <_raise_r+0x12>
 8008432:	2400      	movs	r4, #0
 8008434:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008438:	4628      	mov	r0, r5
 800843a:	4798      	blx	r3
 800843c:	2000      	movs	r0, #0
 800843e:	e7e0      	b.n	8008402 <_raise_r+0x12>

08008440 <raise>:
 8008440:	4b02      	ldr	r3, [pc, #8]	; (800844c <raise+0xc>)
 8008442:	4601      	mov	r1, r0
 8008444:	6818      	ldr	r0, [r3, #0]
 8008446:	f7ff bfd3 	b.w	80083f0 <_raise_r>
 800844a:	bf00      	nop
 800844c:	20000064 	.word	0x20000064

08008450 <_kill_r>:
 8008450:	b538      	push	{r3, r4, r5, lr}
 8008452:	4d07      	ldr	r5, [pc, #28]	; (8008470 <_kill_r+0x20>)
 8008454:	2300      	movs	r3, #0
 8008456:	4604      	mov	r4, r0
 8008458:	4608      	mov	r0, r1
 800845a:	4611      	mov	r1, r2
 800845c:	602b      	str	r3, [r5, #0]
 800845e:	f7f8 ffab 	bl	80013b8 <_kill>
 8008462:	1c43      	adds	r3, r0, #1
 8008464:	d102      	bne.n	800846c <_kill_r+0x1c>
 8008466:	682b      	ldr	r3, [r5, #0]
 8008468:	b103      	cbz	r3, 800846c <_kill_r+0x1c>
 800846a:	6023      	str	r3, [r4, #0]
 800846c:	bd38      	pop	{r3, r4, r5, pc}
 800846e:	bf00      	nop
 8008470:	2000044c 	.word	0x2000044c

08008474 <_getpid_r>:
 8008474:	f7f8 bf98 	b.w	80013a8 <_getpid>

08008478 <__swhatbuf_r>:
 8008478:	b570      	push	{r4, r5, r6, lr}
 800847a:	460c      	mov	r4, r1
 800847c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008480:	2900      	cmp	r1, #0
 8008482:	b096      	sub	sp, #88	; 0x58
 8008484:	4615      	mov	r5, r2
 8008486:	461e      	mov	r6, r3
 8008488:	da0d      	bge.n	80084a6 <__swhatbuf_r+0x2e>
 800848a:	89a3      	ldrh	r3, [r4, #12]
 800848c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008490:	f04f 0100 	mov.w	r1, #0
 8008494:	bf0c      	ite	eq
 8008496:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800849a:	2340      	movne	r3, #64	; 0x40
 800849c:	2000      	movs	r0, #0
 800849e:	6031      	str	r1, [r6, #0]
 80084a0:	602b      	str	r3, [r5, #0]
 80084a2:	b016      	add	sp, #88	; 0x58
 80084a4:	bd70      	pop	{r4, r5, r6, pc}
 80084a6:	466a      	mov	r2, sp
 80084a8:	f000 f848 	bl	800853c <_fstat_r>
 80084ac:	2800      	cmp	r0, #0
 80084ae:	dbec      	blt.n	800848a <__swhatbuf_r+0x12>
 80084b0:	9901      	ldr	r1, [sp, #4]
 80084b2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80084b6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80084ba:	4259      	negs	r1, r3
 80084bc:	4159      	adcs	r1, r3
 80084be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084c2:	e7eb      	b.n	800849c <__swhatbuf_r+0x24>

080084c4 <__smakebuf_r>:
 80084c4:	898b      	ldrh	r3, [r1, #12]
 80084c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80084c8:	079d      	lsls	r5, r3, #30
 80084ca:	4606      	mov	r6, r0
 80084cc:	460c      	mov	r4, r1
 80084ce:	d507      	bpl.n	80084e0 <__smakebuf_r+0x1c>
 80084d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80084d4:	6023      	str	r3, [r4, #0]
 80084d6:	6123      	str	r3, [r4, #16]
 80084d8:	2301      	movs	r3, #1
 80084da:	6163      	str	r3, [r4, #20]
 80084dc:	b002      	add	sp, #8
 80084de:	bd70      	pop	{r4, r5, r6, pc}
 80084e0:	ab01      	add	r3, sp, #4
 80084e2:	466a      	mov	r2, sp
 80084e4:	f7ff ffc8 	bl	8008478 <__swhatbuf_r>
 80084e8:	9900      	ldr	r1, [sp, #0]
 80084ea:	4605      	mov	r5, r0
 80084ec:	4630      	mov	r0, r6
 80084ee:	f7fe febd 	bl	800726c <_malloc_r>
 80084f2:	b948      	cbnz	r0, 8008508 <__smakebuf_r+0x44>
 80084f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084f8:	059a      	lsls	r2, r3, #22
 80084fa:	d4ef      	bmi.n	80084dc <__smakebuf_r+0x18>
 80084fc:	f023 0303 	bic.w	r3, r3, #3
 8008500:	f043 0302 	orr.w	r3, r3, #2
 8008504:	81a3      	strh	r3, [r4, #12]
 8008506:	e7e3      	b.n	80084d0 <__smakebuf_r+0xc>
 8008508:	89a3      	ldrh	r3, [r4, #12]
 800850a:	6020      	str	r0, [r4, #0]
 800850c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008510:	81a3      	strh	r3, [r4, #12]
 8008512:	9b00      	ldr	r3, [sp, #0]
 8008514:	6163      	str	r3, [r4, #20]
 8008516:	9b01      	ldr	r3, [sp, #4]
 8008518:	6120      	str	r0, [r4, #16]
 800851a:	b15b      	cbz	r3, 8008534 <__smakebuf_r+0x70>
 800851c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008520:	4630      	mov	r0, r6
 8008522:	f000 f81d 	bl	8008560 <_isatty_r>
 8008526:	b128      	cbz	r0, 8008534 <__smakebuf_r+0x70>
 8008528:	89a3      	ldrh	r3, [r4, #12]
 800852a:	f023 0303 	bic.w	r3, r3, #3
 800852e:	f043 0301 	orr.w	r3, r3, #1
 8008532:	81a3      	strh	r3, [r4, #12]
 8008534:	89a3      	ldrh	r3, [r4, #12]
 8008536:	431d      	orrs	r5, r3
 8008538:	81a5      	strh	r5, [r4, #12]
 800853a:	e7cf      	b.n	80084dc <__smakebuf_r+0x18>

0800853c <_fstat_r>:
 800853c:	b538      	push	{r3, r4, r5, lr}
 800853e:	4d07      	ldr	r5, [pc, #28]	; (800855c <_fstat_r+0x20>)
 8008540:	2300      	movs	r3, #0
 8008542:	4604      	mov	r4, r0
 8008544:	4608      	mov	r0, r1
 8008546:	4611      	mov	r1, r2
 8008548:	602b      	str	r3, [r5, #0]
 800854a:	f7f8 ff94 	bl	8001476 <_fstat>
 800854e:	1c43      	adds	r3, r0, #1
 8008550:	d102      	bne.n	8008558 <_fstat_r+0x1c>
 8008552:	682b      	ldr	r3, [r5, #0]
 8008554:	b103      	cbz	r3, 8008558 <_fstat_r+0x1c>
 8008556:	6023      	str	r3, [r4, #0]
 8008558:	bd38      	pop	{r3, r4, r5, pc}
 800855a:	bf00      	nop
 800855c:	2000044c 	.word	0x2000044c

08008560 <_isatty_r>:
 8008560:	b538      	push	{r3, r4, r5, lr}
 8008562:	4d06      	ldr	r5, [pc, #24]	; (800857c <_isatty_r+0x1c>)
 8008564:	2300      	movs	r3, #0
 8008566:	4604      	mov	r4, r0
 8008568:	4608      	mov	r0, r1
 800856a:	602b      	str	r3, [r5, #0]
 800856c:	f7f8 ff93 	bl	8001496 <_isatty>
 8008570:	1c43      	adds	r3, r0, #1
 8008572:	d102      	bne.n	800857a <_isatty_r+0x1a>
 8008574:	682b      	ldr	r3, [r5, #0]
 8008576:	b103      	cbz	r3, 800857a <_isatty_r+0x1a>
 8008578:	6023      	str	r3, [r4, #0]
 800857a:	bd38      	pop	{r3, r4, r5, pc}
 800857c:	2000044c 	.word	0x2000044c

08008580 <_init>:
 8008580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008582:	bf00      	nop
 8008584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008586:	bc08      	pop	{r3}
 8008588:	469e      	mov	lr, r3
 800858a:	4770      	bx	lr

0800858c <_fini>:
 800858c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800858e:	bf00      	nop
 8008590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008592:	bc08      	pop	{r3}
 8008594:	469e      	mov	lr, r3
 8008596:	4770      	bx	lr
