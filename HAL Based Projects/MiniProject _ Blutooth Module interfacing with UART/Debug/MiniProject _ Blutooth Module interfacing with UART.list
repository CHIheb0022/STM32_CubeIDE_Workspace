
MiniProject _ Blutooth Module interfacing with UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051d0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08005358  08005358  00015358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053a0  080053a0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080053a0  080053a0  000153a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053a8  080053a8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053a8  080053a8  000153a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053ac  080053ac  000153ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080053b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  2000000c  080053bc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  080053bc  0002011c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ff4d  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022e8  00000000  00000000  0002ffcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d80  00000000  00000000  000322b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a5c  00000000  00000000  00033038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026d55  00000000  00000000  00033a94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fc19  00000000  00000000  0005a7e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f70a9  00000000  00000000  0006a402  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000387c  00000000  00000000  001614ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a8  00000000  00000000  00164d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005340 	.word	0x08005340

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005340 	.word	0x08005340

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 fb1b 	bl	8000b02 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f826 	bl	800051c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 f91c 	bl	800070c <MX_GPIO_Init>
  MX_ADC1_Init();
 80004d4:	f000 f874 	bl	80005c0 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80004d8:	f000 f8e8 	bl	80006ac <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // Activation de la réception asynchrone des données via l'interface UART1
  HAL_UART_Receive_IT(&huart1, RX_BUFFER, 1);
 80004dc:	2201      	movs	r2, #1
 80004de:	490b      	ldr	r1, [pc, #44]	; (800050c <main+0x48>)
 80004e0:	480b      	ldr	r0, [pc, #44]	; (8000510 <main+0x4c>)
 80004e2:	f003 fc69 	bl	8003db8 <HAL_UART_Receive_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	// Démarrer la conversion ADC
	HAL_ADC_Start(&hadc1);
 80004e6:	480b      	ldr	r0, [pc, #44]	; (8000514 <main+0x50>)
 80004e8:	f000 feba 	bl	8001260 <HAL_ADC_Start>

	// Attendre la fin de la conversion ADC
	if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 80004ec:	f04f 31ff 	mov.w	r1, #4294967295
 80004f0:	4808      	ldr	r0, [pc, #32]	; (8000514 <main+0x50>)
 80004f2:	f000 ff6f 	bl	80013d4 <HAL_ADC_PollForConversion>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d1f4      	bne.n	80004e6 <main+0x22>
	   // Récupérer la valeur convertie
	   adcValue = HAL_ADC_GetValue(&hadc1);
 80004fc:	4805      	ldr	r0, [pc, #20]	; (8000514 <main+0x50>)
 80004fe:	f001 f841 	bl	8001584 <HAL_ADC_GetValue>
 8000502:	4603      	mov	r3, r0
 8000504:	4a04      	ldr	r2, [pc, #16]	; (8000518 <main+0x54>)
 8000506:	6013      	str	r3, [r2, #0]
	HAL_ADC_Start(&hadc1);
 8000508:	e7ed      	b.n	80004e6 <main+0x22>
 800050a:	bf00      	nop
 800050c:	20000110 	.word	0x20000110
 8000510:	2000008c 	.word	0x2000008c
 8000514:	20000028 	.word	0x20000028
 8000518:	20000114 	.word	0x20000114

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b096      	sub	sp, #88	; 0x58
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 0314 	add.w	r3, r7, #20
 8000526:	2244      	movs	r2, #68	; 0x44
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f004 fedb 	bl	80052e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	463b      	mov	r3, r7
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	605a      	str	r2, [r3, #4]
 8000538:	609a      	str	r2, [r3, #8]
 800053a:	60da      	str	r2, [r3, #12]
 800053c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800053e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000542:	f002 f8d9 	bl	80026f8 <HAL_PWREx_ControlVoltageScaling>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800054c:	f000 f970 	bl	8000830 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000550:	2310      	movs	r3, #16
 8000552:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000554:	2301      	movs	r3, #1
 8000556:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000558:	2300      	movs	r3, #0
 800055a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800055c:	2360      	movs	r3, #96	; 0x60
 800055e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000560:	2302      	movs	r3, #2
 8000562:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000564:	2301      	movs	r3, #1
 8000566:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000568:	2301      	movs	r3, #1
 800056a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 800056c:	231e      	movs	r3, #30
 800056e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000570:	2307      	movs	r3, #7
 8000572:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000574:	2302      	movs	r3, #2
 8000576:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000578:	2302      	movs	r3, #2
 800057a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057c:	f107 0314 	add.w	r3, r7, #20
 8000580:	4618      	mov	r0, r3
 8000582:	f002 f90f 	bl	80027a4 <HAL_RCC_OscConfig>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800058c:	f000 f950 	bl	8000830 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000590:	230f      	movs	r3, #15
 8000592:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000594:	2303      	movs	r3, #3
 8000596:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000598:	2300      	movs	r3, #0
 800059a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800059c:	2300      	movs	r3, #0
 800059e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a0:	2300      	movs	r3, #0
 80005a2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005a4:	463b      	mov	r3, r7
 80005a6:	2103      	movs	r1, #3
 80005a8:	4618      	mov	r0, r3
 80005aa:	f002 fcd7 	bl	8002f5c <HAL_RCC_ClockConfig>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80005b4:	f000 f93c 	bl	8000830 <Error_Handler>
  }
}
 80005b8:	bf00      	nop
 80005ba:	3758      	adds	r7, #88	; 0x58
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}

080005c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b08a      	sub	sp, #40	; 0x28
 80005c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005c6:	f107 031c 	add.w	r3, r7, #28
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	605a      	str	r2, [r3, #4]
 80005d0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005d2:	1d3b      	adds	r3, r7, #4
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]
 80005e0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005e2:	4b2f      	ldr	r3, [pc, #188]	; (80006a0 <MX_ADC1_Init+0xe0>)
 80005e4:	4a2f      	ldr	r2, [pc, #188]	; (80006a4 <MX_ADC1_Init+0xe4>)
 80005e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005e8:	4b2d      	ldr	r3, [pc, #180]	; (80006a0 <MX_ADC1_Init+0xe0>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005ee:	4b2c      	ldr	r3, [pc, #176]	; (80006a0 <MX_ADC1_Init+0xe0>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005f4:	4b2a      	ldr	r3, [pc, #168]	; (80006a0 <MX_ADC1_Init+0xe0>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005fa:	4b29      	ldr	r3, [pc, #164]	; (80006a0 <MX_ADC1_Init+0xe0>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000600:	4b27      	ldr	r3, [pc, #156]	; (80006a0 <MX_ADC1_Init+0xe0>)
 8000602:	2204      	movs	r2, #4
 8000604:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000606:	4b26      	ldr	r3, [pc, #152]	; (80006a0 <MX_ADC1_Init+0xe0>)
 8000608:	2200      	movs	r2, #0
 800060a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800060c:	4b24      	ldr	r3, [pc, #144]	; (80006a0 <MX_ADC1_Init+0xe0>)
 800060e:	2200      	movs	r2, #0
 8000610:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000612:	4b23      	ldr	r3, [pc, #140]	; (80006a0 <MX_ADC1_Init+0xe0>)
 8000614:	2201      	movs	r2, #1
 8000616:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000618:	4b21      	ldr	r3, [pc, #132]	; (80006a0 <MX_ADC1_Init+0xe0>)
 800061a:	2200      	movs	r2, #0
 800061c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000620:	4b1f      	ldr	r3, [pc, #124]	; (80006a0 <MX_ADC1_Init+0xe0>)
 8000622:	2200      	movs	r2, #0
 8000624:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000626:	4b1e      	ldr	r3, [pc, #120]	; (80006a0 <MX_ADC1_Init+0xe0>)
 8000628:	2200      	movs	r2, #0
 800062a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800062c:	4b1c      	ldr	r3, [pc, #112]	; (80006a0 <MX_ADC1_Init+0xe0>)
 800062e:	2200      	movs	r2, #0
 8000630:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000634:	4b1a      	ldr	r3, [pc, #104]	; (80006a0 <MX_ADC1_Init+0xe0>)
 8000636:	2200      	movs	r2, #0
 8000638:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800063a:	4b19      	ldr	r3, [pc, #100]	; (80006a0 <MX_ADC1_Init+0xe0>)
 800063c:	2200      	movs	r2, #0
 800063e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000642:	4817      	ldr	r0, [pc, #92]	; (80006a0 <MX_ADC1_Init+0xe0>)
 8000644:	f000 fcb6 	bl	8000fb4 <HAL_ADC_Init>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800064e:	f000 f8ef 	bl	8000830 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000652:	2300      	movs	r3, #0
 8000654:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000656:	f107 031c 	add.w	r3, r7, #28
 800065a:	4619      	mov	r1, r3
 800065c:	4810      	ldr	r0, [pc, #64]	; (80006a0 <MX_ADC1_Init+0xe0>)
 800065e:	f001 fc3b 	bl	8001ed8 <HAL_ADCEx_MultiModeConfigChannel>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000668:	f000 f8e2 	bl	8000830 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800066c:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <MX_ADC1_Init+0xe8>)
 800066e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000670:	2306      	movs	r3, #6
 8000672:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000674:	2300      	movs	r3, #0
 8000676:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000678:	237f      	movs	r3, #127	; 0x7f
 800067a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800067c:	2304      	movs	r3, #4
 800067e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000680:	2300      	movs	r3, #0
 8000682:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000684:	1d3b      	adds	r3, r7, #4
 8000686:	4619      	mov	r1, r3
 8000688:	4805      	ldr	r0, [pc, #20]	; (80006a0 <MX_ADC1_Init+0xe0>)
 800068a:	f000 ff89 	bl	80015a0 <HAL_ADC_ConfigChannel>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000694:	f000 f8cc 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000698:	bf00      	nop
 800069a:	3728      	adds	r7, #40	; 0x28
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	20000028 	.word	0x20000028
 80006a4:	50040000 	.word	0x50040000
 80006a8:	04300002 	.word	0x04300002

080006ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006b0:	4b14      	ldr	r3, [pc, #80]	; (8000704 <MX_USART1_UART_Init+0x58>)
 80006b2:	4a15      	ldr	r2, [pc, #84]	; (8000708 <MX_USART1_UART_Init+0x5c>)
 80006b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80006b6:	4b13      	ldr	r3, [pc, #76]	; (8000704 <MX_USART1_UART_Init+0x58>)
 80006b8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006be:	4b11      	ldr	r3, [pc, #68]	; (8000704 <MX_USART1_UART_Init+0x58>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006c4:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <MX_USART1_UART_Init+0x58>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006ca:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <MX_USART1_UART_Init+0x58>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006d0:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <MX_USART1_UART_Init+0x58>)
 80006d2:	220c      	movs	r2, #12
 80006d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d6:	4b0b      	ldr	r3, [pc, #44]	; (8000704 <MX_USART1_UART_Init+0x58>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006dc:	4b09      	ldr	r3, [pc, #36]	; (8000704 <MX_USART1_UART_Init+0x58>)
 80006de:	2200      	movs	r2, #0
 80006e0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006e2:	4b08      	ldr	r3, [pc, #32]	; (8000704 <MX_USART1_UART_Init+0x58>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006e8:	4b06      	ldr	r3, [pc, #24]	; (8000704 <MX_USART1_UART_Init+0x58>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006ee:	4805      	ldr	r0, [pc, #20]	; (8000704 <MX_USART1_UART_Init+0x58>)
 80006f0:	f003 fb14 	bl	8003d1c <HAL_UART_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80006fa:	f000 f899 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	2000008c 	.word	0x2000008c
 8000708:	40013800 	.word	0x40013800

0800070c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b088      	sub	sp, #32
 8000710:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000712:	f107 030c 	add.w	r3, r7, #12
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
 8000720:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000722:	4b17      	ldr	r3, [pc, #92]	; (8000780 <MX_GPIO_Init+0x74>)
 8000724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000726:	4a16      	ldr	r2, [pc, #88]	; (8000780 <MX_GPIO_Init+0x74>)
 8000728:	f043 0304 	orr.w	r3, r3, #4
 800072c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800072e:	4b14      	ldr	r3, [pc, #80]	; (8000780 <MX_GPIO_Init+0x74>)
 8000730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000732:	f003 0304 	and.w	r3, r3, #4
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073a:	4b11      	ldr	r3, [pc, #68]	; (8000780 <MX_GPIO_Init+0x74>)
 800073c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073e:	4a10      	ldr	r2, [pc, #64]	; (8000780 <MX_GPIO_Init+0x74>)
 8000740:	f043 0301 	orr.w	r3, r3, #1
 8000744:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000746:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <MX_GPIO_Init+0x74>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8000752:	2200      	movs	r2, #0
 8000754:	211e      	movs	r1, #30
 8000756:	480b      	ldr	r0, [pc, #44]	; (8000784 <MX_GPIO_Init+0x78>)
 8000758:	f001 ffa8 	bl	80026ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC2 PC3 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 800075c:	231e      	movs	r3, #30
 800075e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000760:	2301      	movs	r3, #1
 8000762:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000768:	2300      	movs	r3, #0
 800076a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800076c:	f107 030c 	add.w	r3, r7, #12
 8000770:	4619      	mov	r1, r3
 8000772:	4804      	ldr	r0, [pc, #16]	; (8000784 <MX_GPIO_Init+0x78>)
 8000774:	f001 fdf0 	bl	8002358 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000778:	bf00      	nop
 800077a:	3720      	adds	r7, #32
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	40021000 	.word	0x40021000
 8000784:	48000800 	.word	0x48000800

08000788 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

// Callback pour la réception UART
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
	//Check the Cplt callback function call belongs to the UART1 instance.
	if (huart == &huart1) {
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	4a24      	ldr	r2, [pc, #144]	; (8000824 <HAL_UART_RxCpltCallback+0x9c>)
 8000794:	4293      	cmp	r3, r2
 8000796:	d140      	bne.n	800081a <HAL_UART_RxCpltCallback+0x92>
    // Commande reçue, effectuez des actions en fonction de RX_BUFFER[0]
    switch (RX_BUFFER[0]) {
 8000798:	4b23      	ldr	r3, [pc, #140]	; (8000828 <HAL_UART_RxCpltCallback+0xa0>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	3b31      	subs	r3, #49	; 0x31
 800079e:	2b03      	cmp	r3, #3
 80007a0:	d836      	bhi.n	8000810 <HAL_UART_RxCpltCallback+0x88>
 80007a2:	a201      	add	r2, pc, #4	; (adr r2, 80007a8 <HAL_UART_RxCpltCallback+0x20>)
 80007a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007a8:	080007b9 	.word	0x080007b9
 80007ac:	080007cf 	.word	0x080007cf
 80007b0:	080007e5 	.word	0x080007e5
 80007b4:	080007fb 	.word	0x080007fb
      case '1':
          // Allumer la LED correspondante (par exemple, GPIOD12)
          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80007b8:	2201      	movs	r2, #1
 80007ba:	2102      	movs	r1, #2
 80007bc:	481b      	ldr	r0, [pc, #108]	; (800082c <HAL_UART_RxCpltCallback+0xa4>)
 80007be:	f001 ff75 	bl	80026ac <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 , GPIO_PIN_RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	211c      	movs	r1, #28
 80007c6:	4819      	ldr	r0, [pc, #100]	; (800082c <HAL_UART_RxCpltCallback+0xa4>)
 80007c8:	f001 ff70 	bl	80026ac <HAL_GPIO_WritePin>
          break;
 80007cc:	e020      	b.n	8000810 <HAL_UART_RxCpltCallback+0x88>

      case '2':
          // Allumer la LED correspondante (par exemple, GPIOD13)
          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 80007ce:	2201      	movs	r2, #1
 80007d0:	2104      	movs	r1, #4
 80007d2:	4816      	ldr	r0, [pc, #88]	; (800082c <HAL_UART_RxCpltCallback+0xa4>)
 80007d4:	f001 ff6a 	bl	80026ac <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4 , GPIO_PIN_RESET);
 80007d8:	2200      	movs	r2, #0
 80007da:	211a      	movs	r1, #26
 80007dc:	4813      	ldr	r0, [pc, #76]	; (800082c <HAL_UART_RxCpltCallback+0xa4>)
 80007de:	f001 ff65 	bl	80026ac <HAL_GPIO_WritePin>
          break;
 80007e2:	e015      	b.n	8000810 <HAL_UART_RxCpltCallback+0x88>
      case '3':
    	  // Allumer la LED correspondante (par exemple, GPIOD13)
    	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 80007e4:	2201      	movs	r2, #1
 80007e6:	2108      	movs	r1, #8
 80007e8:	4810      	ldr	r0, [pc, #64]	; (800082c <HAL_UART_RxCpltCallback+0xa4>)
 80007ea:	f001 ff5f 	bl	80026ac <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4 , GPIO_PIN_RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	211a      	movs	r1, #26
 80007f2:	480e      	ldr	r0, [pc, #56]	; (800082c <HAL_UART_RxCpltCallback+0xa4>)
 80007f4:	f001 ff5a 	bl	80026ac <HAL_GPIO_WritePin>
    	  break;
 80007f8:	e00a      	b.n	8000810 <HAL_UART_RxCpltCallback+0x88>

      case '4':
          // Allumer la LED correspondante (par exemple, GPIOD13)
          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 80007fa:	2201      	movs	r2, #1
 80007fc:	2110      	movs	r1, #16
 80007fe:	480b      	ldr	r0, [pc, #44]	; (800082c <HAL_UART_RxCpltCallback+0xa4>)
 8000800:	f001 ff54 	bl	80026ac <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 , GPIO_PIN_RESET);
 8000804:	2200      	movs	r2, #0
 8000806:	210e      	movs	r1, #14
 8000808:	4808      	ldr	r0, [pc, #32]	; (800082c <HAL_UART_RxCpltCallback+0xa4>)
 800080a:	f001 ff4f 	bl	80026ac <HAL_GPIO_WritePin>
          break;
 800080e:	bf00      	nop
      }

    // Réactivez la réception UART pour la prochaine commande
    HAL_UART_Receive_IT(&huart1, RX_BUFFER, 1);
 8000810:	2201      	movs	r2, #1
 8000812:	4905      	ldr	r1, [pc, #20]	; (8000828 <HAL_UART_RxCpltCallback+0xa0>)
 8000814:	4803      	ldr	r0, [pc, #12]	; (8000824 <HAL_UART_RxCpltCallback+0x9c>)
 8000816:	f003 facf 	bl	8003db8 <HAL_UART_Receive_IT>
  }

}
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	2000008c 	.word	0x2000008c
 8000828:	20000110 	.word	0x20000110
 800082c:	48000800 	.word	0x48000800

08000830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000834:	b672      	cpsid	i
}
 8000836:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000838:	e7fe      	b.n	8000838 <Error_Handler+0x8>
	...

0800083c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000842:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <HAL_MspInit+0x44>)
 8000844:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000846:	4a0e      	ldr	r2, [pc, #56]	; (8000880 <HAL_MspInit+0x44>)
 8000848:	f043 0301 	orr.w	r3, r3, #1
 800084c:	6613      	str	r3, [r2, #96]	; 0x60
 800084e:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <HAL_MspInit+0x44>)
 8000850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800085a:	4b09      	ldr	r3, [pc, #36]	; (8000880 <HAL_MspInit+0x44>)
 800085c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800085e:	4a08      	ldr	r2, [pc, #32]	; (8000880 <HAL_MspInit+0x44>)
 8000860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000864:	6593      	str	r3, [r2, #88]	; 0x58
 8000866:	4b06      	ldr	r3, [pc, #24]	; (8000880 <HAL_MspInit+0x44>)
 8000868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800086a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800086e:	603b      	str	r3, [r7, #0]
 8000870:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000872:	bf00      	nop
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	40021000 	.word	0x40021000

08000884 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b0ac      	sub	sp, #176	; 0xb0
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
 800089a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800089c:	f107 0314 	add.w	r3, r7, #20
 80008a0:	2288      	movs	r2, #136	; 0x88
 80008a2:	2100      	movs	r1, #0
 80008a4:	4618      	mov	r0, r3
 80008a6:	f004 fd1e 	bl	80052e6 <memset>
  if(hadc->Instance==ADC1)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4a27      	ldr	r2, [pc, #156]	; (800094c <HAL_ADC_MspInit+0xc8>)
 80008b0:	4293      	cmp	r3, r2
 80008b2:	d146      	bne.n	8000942 <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80008b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80008b8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80008ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80008be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80008c2:	2301      	movs	r3, #1
 80008c4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80008c6:	2301      	movs	r3, #1
 80008c8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80008ca:	2310      	movs	r3, #16
 80008cc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80008ce:	2307      	movs	r3, #7
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80008d2:	2302      	movs	r3, #2
 80008d4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80008d6:	2302      	movs	r3, #2
 80008d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80008da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80008de:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008e0:	f107 0314 	add.w	r3, r7, #20
 80008e4:	4618      	mov	r0, r3
 80008e6:	f002 fd5d 	bl	80033a4 <HAL_RCCEx_PeriphCLKConfig>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80008f0:	f7ff ff9e 	bl	8000830 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80008f4:	4b16      	ldr	r3, [pc, #88]	; (8000950 <HAL_ADC_MspInit+0xcc>)
 80008f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f8:	4a15      	ldr	r2, [pc, #84]	; (8000950 <HAL_ADC_MspInit+0xcc>)
 80008fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80008fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000900:	4b13      	ldr	r3, [pc, #76]	; (8000950 <HAL_ADC_MspInit+0xcc>)
 8000902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000904:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000908:	613b      	str	r3, [r7, #16]
 800090a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800090c:	4b10      	ldr	r3, [pc, #64]	; (8000950 <HAL_ADC_MspInit+0xcc>)
 800090e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000910:	4a0f      	ldr	r2, [pc, #60]	; (8000950 <HAL_ADC_MspInit+0xcc>)
 8000912:	f043 0304 	orr.w	r3, r3, #4
 8000916:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000918:	4b0d      	ldr	r3, [pc, #52]	; (8000950 <HAL_ADC_MspInit+0xcc>)
 800091a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091c:	f003 0304 	and.w	r3, r3, #4
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000924:	2301      	movs	r3, #1
 8000926:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800092a:	230b      	movs	r3, #11
 800092c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000936:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800093a:	4619      	mov	r1, r3
 800093c:	4805      	ldr	r0, [pc, #20]	; (8000954 <HAL_ADC_MspInit+0xd0>)
 800093e:	f001 fd0b 	bl	8002358 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000942:	bf00      	nop
 8000944:	37b0      	adds	r7, #176	; 0xb0
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	50040000 	.word	0x50040000
 8000950:	40021000 	.word	0x40021000
 8000954:	48000800 	.word	0x48000800

08000958 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b0ac      	sub	sp, #176	; 0xb0
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000960:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]
 800096e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	2288      	movs	r2, #136	; 0x88
 8000976:	2100      	movs	r1, #0
 8000978:	4618      	mov	r0, r3
 800097a:	f004 fcb4 	bl	80052e6 <memset>
  if(huart->Instance==USART1)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4a26      	ldr	r2, [pc, #152]	; (8000a1c <HAL_UART_MspInit+0xc4>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d144      	bne.n	8000a12 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000988:	2301      	movs	r3, #1
 800098a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800098c:	2300      	movs	r3, #0
 800098e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	4618      	mov	r0, r3
 8000996:	f002 fd05 	bl	80033a4 <HAL_RCCEx_PeriphCLKConfig>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009a0:	f7ff ff46 	bl	8000830 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009a4:	4b1e      	ldr	r3, [pc, #120]	; (8000a20 <HAL_UART_MspInit+0xc8>)
 80009a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009a8:	4a1d      	ldr	r2, [pc, #116]	; (8000a20 <HAL_UART_MspInit+0xc8>)
 80009aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ae:	6613      	str	r3, [r2, #96]	; 0x60
 80009b0:	4b1b      	ldr	r3, [pc, #108]	; (8000a20 <HAL_UART_MspInit+0xc8>)
 80009b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009b8:	613b      	str	r3, [r7, #16]
 80009ba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009bc:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <HAL_UART_MspInit+0xc8>)
 80009be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c0:	4a17      	ldr	r2, [pc, #92]	; (8000a20 <HAL_UART_MspInit+0xc8>)
 80009c2:	f043 0301 	orr.w	r3, r3, #1
 80009c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009c8:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <HAL_UART_MspInit+0xc8>)
 80009ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009cc:	f003 0301 	and.w	r3, r3, #1
 80009d0:	60fb      	str	r3, [r7, #12]
 80009d2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009d4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80009d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009dc:	2302      	movs	r3, #2
 80009de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e8:	2303      	movs	r3, #3
 80009ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009ee:	2307      	movs	r3, #7
 80009f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009f8:	4619      	mov	r1, r3
 80009fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009fe:	f001 fcab 	bl	8002358 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2100      	movs	r1, #0
 8000a06:	2025      	movs	r0, #37	; 0x25
 8000a08:	f001 fbf1 	bl	80021ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a0c:	2025      	movs	r0, #37	; 0x25
 8000a0e:	f001 fc0a 	bl	8002226 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a12:	bf00      	nop
 8000a14:	37b0      	adds	r7, #176	; 0xb0
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40013800 	.word	0x40013800
 8000a20:	40021000 	.word	0x40021000

08000a24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <NMI_Handler+0x4>

08000a2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a2e:	e7fe      	b.n	8000a2e <HardFault_Handler+0x4>

08000a30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a34:	e7fe      	b.n	8000a34 <MemManage_Handler+0x4>

08000a36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a3a:	e7fe      	b.n	8000a3a <BusFault_Handler+0x4>

08000a3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <UsageFault_Handler+0x4>

08000a42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr

08000a50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr

08000a5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a62:	bf00      	nop
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a70:	f000 f89c 	bl	8000bac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a7c:	4802      	ldr	r0, [pc, #8]	; (8000a88 <USART1_IRQHandler+0x10>)
 8000a7e:	f003 f9f1 	bl	8003e64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	2000008c 	.word	0x2000008c

08000a8c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a90:	4b06      	ldr	r3, [pc, #24]	; (8000aac <SystemInit+0x20>)
 8000a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a96:	4a05      	ldr	r2, [pc, #20]	; (8000aac <SystemInit+0x20>)
 8000a98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	e000ed00 	.word	0xe000ed00

08000ab0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ab0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ae8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ab4:	f7ff ffea 	bl	8000a8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ab8:	480c      	ldr	r0, [pc, #48]	; (8000aec <LoopForever+0x6>)
  ldr r1, =_edata
 8000aba:	490d      	ldr	r1, [pc, #52]	; (8000af0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000abc:	4a0d      	ldr	r2, [pc, #52]	; (8000af4 <LoopForever+0xe>)
  movs r3, #0
 8000abe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ac0:	e002      	b.n	8000ac8 <LoopCopyDataInit>

08000ac2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ac2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ac4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ac6:	3304      	adds	r3, #4

08000ac8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ac8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000acc:	d3f9      	bcc.n	8000ac2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ace:	4a0a      	ldr	r2, [pc, #40]	; (8000af8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ad0:	4c0a      	ldr	r4, [pc, #40]	; (8000afc <LoopForever+0x16>)
  movs r3, #0
 8000ad2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ad4:	e001      	b.n	8000ada <LoopFillZerobss>

08000ad6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ad6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ad8:	3204      	adds	r2, #4

08000ada <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ada:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000adc:	d3fb      	bcc.n	8000ad6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ade:	f004 fc0b 	bl	80052f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ae2:	f7ff fcef 	bl	80004c4 <main>

08000ae6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ae6:	e7fe      	b.n	8000ae6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ae8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000aec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000af0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000af4:	080053b0 	.word	0x080053b0
  ldr r2, =_sbss
 8000af8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000afc:	2000011c 	.word	0x2000011c

08000b00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b00:	e7fe      	b.n	8000b00 <ADC1_2_IRQHandler>

08000b02 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	b082      	sub	sp, #8
 8000b06:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b0c:	2003      	movs	r0, #3
 8000b0e:	f001 fb63 	bl	80021d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b12:	200f      	movs	r0, #15
 8000b14:	f000 f80e 	bl	8000b34 <HAL_InitTick>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d002      	beq.n	8000b24 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	71fb      	strb	r3, [r7, #7]
 8000b22:	e001      	b.n	8000b28 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b24:	f7ff fe8a 	bl	800083c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b28:	79fb      	ldrb	r3, [r7, #7]
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
	...

08000b34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b40:	4b17      	ldr	r3, [pc, #92]	; (8000ba0 <HAL_InitTick+0x6c>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d023      	beq.n	8000b90 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b48:	4b16      	ldr	r3, [pc, #88]	; (8000ba4 <HAL_InitTick+0x70>)
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	4b14      	ldr	r3, [pc, #80]	; (8000ba0 <HAL_InitTick+0x6c>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	4619      	mov	r1, r3
 8000b52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f001 fb6f 	bl	8002242 <HAL_SYSTICK_Config>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d10f      	bne.n	8000b8a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2b0f      	cmp	r3, #15
 8000b6e:	d809      	bhi.n	8000b84 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b70:	2200      	movs	r2, #0
 8000b72:	6879      	ldr	r1, [r7, #4]
 8000b74:	f04f 30ff 	mov.w	r0, #4294967295
 8000b78:	f001 fb39 	bl	80021ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b7c:	4a0a      	ldr	r2, [pc, #40]	; (8000ba8 <HAL_InitTick+0x74>)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6013      	str	r3, [r2, #0]
 8000b82:	e007      	b.n	8000b94 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b84:	2301      	movs	r3, #1
 8000b86:	73fb      	strb	r3, [r7, #15]
 8000b88:	e004      	b.n	8000b94 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	73fb      	strb	r3, [r7, #15]
 8000b8e:	e001      	b.n	8000b94 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b90:	2301      	movs	r3, #1
 8000b92:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3710      	adds	r7, #16
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20000008 	.word	0x20000008
 8000ba4:	20000000 	.word	0x20000000
 8000ba8:	20000004 	.word	0x20000004

08000bac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bb0:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <HAL_IncTick+0x20>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <HAL_IncTick+0x24>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4413      	add	r3, r2
 8000bbc:	4a04      	ldr	r2, [pc, #16]	; (8000bd0 <HAL_IncTick+0x24>)
 8000bbe:	6013      	str	r3, [r2, #0]
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	20000008 	.word	0x20000008
 8000bd0:	20000118 	.word	0x20000118

08000bd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bd8:	4b03      	ldr	r3, [pc, #12]	; (8000be8 <HAL_GetTick+0x14>)
 8000bda:	681b      	ldr	r3, [r3, #0]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	20000118 	.word	0x20000118

08000bec <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	689b      	ldr	r3, [r3, #8]
 8000bfa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	431a      	orrs	r2, r3
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	609a      	str	r2, [r3, #8]
}
 8000c06:	bf00      	nop
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr

08000c12 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000c12:	b480      	push	{r7}
 8000c14:	b083      	sub	sp, #12
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
 8000c1a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	689b      	ldr	r3, [r3, #8]
 8000c20:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	431a      	orrs	r2, r3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
}
 8000c2c:	bf00      	nop
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	689b      	ldr	r3, [r3, #8]
 8000c44:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b087      	sub	sp, #28
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
 8000c60:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	3360      	adds	r3, #96	; 0x60
 8000c66:	461a      	mov	r2, r3
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	4413      	add	r3, r2
 8000c6e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	4b08      	ldr	r3, [pc, #32]	; (8000c98 <LL_ADC_SetOffset+0x44>)
 8000c76:	4013      	ands	r3, r2
 8000c78:	687a      	ldr	r2, [r7, #4]
 8000c7a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000c7e:	683a      	ldr	r2, [r7, #0]
 8000c80:	430a      	orrs	r2, r1
 8000c82:	4313      	orrs	r3, r2
 8000c84:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000c8c:	bf00      	nop
 8000c8e:	371c      	adds	r7, #28
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	03fff000 	.word	0x03fff000

08000c9c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	3360      	adds	r3, #96	; 0x60
 8000caa:	461a      	mov	r2, r3
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	009b      	lsls	r3, r3, #2
 8000cb0:	4413      	add	r3, r2
 8000cb2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3714      	adds	r7, #20
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b087      	sub	sp, #28
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	3360      	adds	r3, #96	; 0x60
 8000cd8:	461a      	mov	r2, r3
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	009b      	lsls	r3, r3, #2
 8000cde:	4413      	add	r3, r2
 8000ce0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	431a      	orrs	r2, r3
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000cf2:	bf00      	nop
 8000cf4:	371c      	adds	r7, #28
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr

08000cfe <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	b083      	sub	sp, #12
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	68db      	ldr	r3, [r3, #12]
 8000d0a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d101      	bne.n	8000d16 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000d12:	2301      	movs	r3, #1
 8000d14:	e000      	b.n	8000d18 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000d16:	2300      	movs	r3, #0
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b087      	sub	sp, #28
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	3330      	adds	r3, #48	; 0x30
 8000d34:	461a      	mov	r2, r3
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	0a1b      	lsrs	r3, r3, #8
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	f003 030c 	and.w	r3, r3, #12
 8000d40:	4413      	add	r3, r2
 8000d42:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	f003 031f 	and.w	r3, r3, #31
 8000d4e:	211f      	movs	r1, #31
 8000d50:	fa01 f303 	lsl.w	r3, r1, r3
 8000d54:	43db      	mvns	r3, r3
 8000d56:	401a      	ands	r2, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	0e9b      	lsrs	r3, r3, #26
 8000d5c:	f003 011f 	and.w	r1, r3, #31
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	f003 031f 	and.w	r3, r3, #31
 8000d66:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6a:	431a      	orrs	r2, r3
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000d70:	bf00      	nop
 8000d72:	371c      	adds	r7, #28
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b087      	sub	sp, #28
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	3314      	adds	r3, #20
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	68bb      	ldr	r3, [r7, #8]
 8000d90:	0e5b      	lsrs	r3, r3, #25
 8000d92:	009b      	lsls	r3, r3, #2
 8000d94:	f003 0304 	and.w	r3, r3, #4
 8000d98:	4413      	add	r3, r2
 8000d9a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	0d1b      	lsrs	r3, r3, #20
 8000da4:	f003 031f 	and.w	r3, r3, #31
 8000da8:	2107      	movs	r1, #7
 8000daa:	fa01 f303 	lsl.w	r3, r1, r3
 8000dae:	43db      	mvns	r3, r3
 8000db0:	401a      	ands	r2, r3
 8000db2:	68bb      	ldr	r3, [r7, #8]
 8000db4:	0d1b      	lsrs	r3, r3, #20
 8000db6:	f003 031f 	and.w	r3, r3, #31
 8000dba:	6879      	ldr	r1, [r7, #4]
 8000dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc0:	431a      	orrs	r2, r3
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000dc6:	bf00      	nop
 8000dc8:	371c      	adds	r7, #28
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
	...

08000dd4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	60f8      	str	r0, [r7, #12]
 8000ddc:	60b9      	str	r1, [r7, #8]
 8000dde:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000dec:	43db      	mvns	r3, r3
 8000dee:	401a      	ands	r2, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	f003 0318 	and.w	r3, r3, #24
 8000df6:	4908      	ldr	r1, [pc, #32]	; (8000e18 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000df8:	40d9      	lsrs	r1, r3
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	400b      	ands	r3, r1
 8000dfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e02:	431a      	orrs	r2, r3
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000e0a:	bf00      	nop
 8000e0c:	3714      	adds	r7, #20
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	0007ffff 	.word	0x0007ffff

08000e1c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	f003 031f 	and.w	r3, r3, #31
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	689b      	ldr	r3, [r3, #8]
 8000e44:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr

08000e54 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	689b      	ldr	r3, [r3, #8]
 8000e60:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000e64:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000e68:	687a      	ldr	r2, [r7, #4]
 8000e6a:	6093      	str	r3, [r2, #8]
}
 8000e6c:	bf00      	nop
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr

08000e78 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	689b      	ldr	r3, [r3, #8]
 8000e84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000e88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000e8c:	d101      	bne.n	8000e92 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e000      	b.n	8000e94 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000e92:	2300      	movs	r3, #0
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	689b      	ldr	r3, [r3, #8]
 8000eac:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000eb0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000eb4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000ebc:	bf00      	nop
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr

08000ec8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	689b      	ldr	r3, [r3, #8]
 8000ed4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ed8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000edc:	d101      	bne.n	8000ee2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e000      	b.n	8000ee4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000ee2:	2300      	movs	r3, #0
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	689b      	ldr	r3, [r3, #8]
 8000efc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000f00:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f04:	f043 0201 	orr.w	r2, r3, #1
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000f0c:	bf00      	nop
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	f003 0301 	and.w	r3, r3, #1
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d101      	bne.n	8000f30 <LL_ADC_IsEnabled+0x18>
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	e000      	b.n	8000f32 <LL_ADC_IsEnabled+0x1a>
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	b083      	sub	sp, #12
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000f4e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f52:	f043 0204 	orr.w	r2, r3, #4
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000f5a:	bf00      	nop
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr

08000f66 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000f66:	b480      	push	{r7}
 8000f68:	b083      	sub	sp, #12
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	f003 0304 	and.w	r3, r3, #4
 8000f76:	2b04      	cmp	r3, #4
 8000f78:	d101      	bne.n	8000f7e <LL_ADC_REG_IsConversionOngoing+0x18>
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e000      	b.n	8000f80 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000f7e:	2300      	movs	r3, #0
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	689b      	ldr	r3, [r3, #8]
 8000f98:	f003 0308 	and.w	r3, r3, #8
 8000f9c:	2b08      	cmp	r3, #8
 8000f9e:	d101      	bne.n	8000fa4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	e000      	b.n	8000fa6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
	...

08000fb4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000fb4:	b590      	push	{r4, r7, lr}
 8000fb6:	b089      	sub	sp, #36	; 0x24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d101      	bne.n	8000fce <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e136      	b.n	800123c <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	691b      	ldr	r3, [r3, #16]
 8000fd2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d109      	bne.n	8000ff0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f7ff fc51 	bl	8000884 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2200      	movs	r2, #0
 8000fec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff ff3f 	bl	8000e78 <LL_ADC_IsDeepPowerDownEnabled>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d004      	beq.n	800100a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff ff25 	bl	8000e54 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff ff5a 	bl	8000ec8 <LL_ADC_IsInternalRegulatorEnabled>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d115      	bne.n	8001046 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff ff3e 	bl	8000ea0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001024:	4b87      	ldr	r3, [pc, #540]	; (8001244 <HAL_ADC_Init+0x290>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	099b      	lsrs	r3, r3, #6
 800102a:	4a87      	ldr	r2, [pc, #540]	; (8001248 <HAL_ADC_Init+0x294>)
 800102c:	fba2 2303 	umull	r2, r3, r2, r3
 8001030:	099b      	lsrs	r3, r3, #6
 8001032:	3301      	adds	r3, #1
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001038:	e002      	b.n	8001040 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	3b01      	subs	r3, #1
 800103e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d1f9      	bne.n	800103a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff ff3c 	bl	8000ec8 <LL_ADC_IsInternalRegulatorEnabled>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d10d      	bne.n	8001072 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800105a:	f043 0210 	orr.w	r2, r3, #16
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001066:	f043 0201 	orr.w	r2, r3, #1
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff ff75 	bl	8000f66 <LL_ADC_REG_IsConversionOngoing>
 800107c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001082:	f003 0310 	and.w	r3, r3, #16
 8001086:	2b00      	cmp	r3, #0
 8001088:	f040 80cf 	bne.w	800122a <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	2b00      	cmp	r3, #0
 8001090:	f040 80cb 	bne.w	800122a <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001098:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800109c:	f043 0202 	orr.w	r2, r3, #2
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff ff35 	bl	8000f18 <LL_ADC_IsEnabled>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d115      	bne.n	80010e0 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80010b4:	4865      	ldr	r0, [pc, #404]	; (800124c <HAL_ADC_Init+0x298>)
 80010b6:	f7ff ff2f 	bl	8000f18 <LL_ADC_IsEnabled>
 80010ba:	4604      	mov	r4, r0
 80010bc:	4864      	ldr	r0, [pc, #400]	; (8001250 <HAL_ADC_Init+0x29c>)
 80010be:	f7ff ff2b 	bl	8000f18 <LL_ADC_IsEnabled>
 80010c2:	4603      	mov	r3, r0
 80010c4:	431c      	orrs	r4, r3
 80010c6:	4863      	ldr	r0, [pc, #396]	; (8001254 <HAL_ADC_Init+0x2a0>)
 80010c8:	f7ff ff26 	bl	8000f18 <LL_ADC_IsEnabled>
 80010cc:	4603      	mov	r3, r0
 80010ce:	4323      	orrs	r3, r4
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d105      	bne.n	80010e0 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	4619      	mov	r1, r3
 80010da:	485f      	ldr	r0, [pc, #380]	; (8001258 <HAL_ADC_Init+0x2a4>)
 80010dc:	f7ff fd86 	bl	8000bec <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	7e5b      	ldrb	r3, [r3, #25]
 80010e4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80010ea:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80010f0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80010f6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010fe:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001100:	4313      	orrs	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f893 3020 	ldrb.w	r3, [r3, #32]
 800110a:	2b01      	cmp	r3, #1
 800110c:	d106      	bne.n	800111c <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001112:	3b01      	subs	r3, #1
 8001114:	045b      	lsls	r3, r3, #17
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4313      	orrs	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001120:	2b00      	cmp	r3, #0
 8001122:	d009      	beq.n	8001138 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001128:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001130:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	4313      	orrs	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	68da      	ldr	r2, [r3, #12]
 800113e:	4b47      	ldr	r3, [pc, #284]	; (800125c <HAL_ADC_Init+0x2a8>)
 8001140:	4013      	ands	r3, r2
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	6812      	ldr	r2, [r2, #0]
 8001146:	69b9      	ldr	r1, [r7, #24]
 8001148:	430b      	orrs	r3, r1
 800114a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff ff08 	bl	8000f66 <LL_ADC_REG_IsConversionOngoing>
 8001156:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff ff15 	bl	8000f8c <LL_ADC_INJ_IsConversionOngoing>
 8001162:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d13d      	bne.n	80011e6 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d13a      	bne.n	80011e6 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001174:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800117c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800117e:	4313      	orrs	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800118c:	f023 0302 	bic.w	r3, r3, #2
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	6812      	ldr	r2, [r2, #0]
 8001194:	69b9      	ldr	r1, [r7, #24]
 8001196:	430b      	orrs	r3, r1
 8001198:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d118      	bne.n	80011d6 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	691b      	ldr	r3, [r3, #16]
 80011aa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80011ae:	f023 0304 	bic.w	r3, r3, #4
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80011ba:	4311      	orrs	r1, r2
 80011bc:	687a      	ldr	r2, [r7, #4]
 80011be:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80011c0:	4311      	orrs	r1, r2
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80011c6:	430a      	orrs	r2, r1
 80011c8:	431a      	orrs	r2, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f042 0201 	orr.w	r2, r2, #1
 80011d2:	611a      	str	r2, [r3, #16]
 80011d4:	e007      	b.n	80011e6 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	691a      	ldr	r2, [r3, #16]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f022 0201 	bic.w	r2, r2, #1
 80011e4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	691b      	ldr	r3, [r3, #16]
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d10c      	bne.n	8001208 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f4:	f023 010f 	bic.w	r1, r3, #15
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	69db      	ldr	r3, [r3, #28]
 80011fc:	1e5a      	subs	r2, r3, #1
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	430a      	orrs	r2, r1
 8001204:	631a      	str	r2, [r3, #48]	; 0x30
 8001206:	e007      	b.n	8001218 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f022 020f 	bic.w	r2, r2, #15
 8001216:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800121c:	f023 0303 	bic.w	r3, r3, #3
 8001220:	f043 0201 	orr.w	r2, r3, #1
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	655a      	str	r2, [r3, #84]	; 0x54
 8001228:	e007      	b.n	800123a <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800122e:	f043 0210 	orr.w	r2, r3, #16
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800123a:	7ffb      	ldrb	r3, [r7, #31]
}
 800123c:	4618      	mov	r0, r3
 800123e:	3724      	adds	r7, #36	; 0x24
 8001240:	46bd      	mov	sp, r7
 8001242:	bd90      	pop	{r4, r7, pc}
 8001244:	20000000 	.word	0x20000000
 8001248:	053e2d63 	.word	0x053e2d63
 800124c:	50040000 	.word	0x50040000
 8001250:	50040100 	.word	0x50040100
 8001254:	50040200 	.word	0x50040200
 8001258:	50040300 	.word	0x50040300
 800125c:	fff0c007 	.word	0xfff0c007

08001260 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001268:	4857      	ldr	r0, [pc, #348]	; (80013c8 <HAL_ADC_Start+0x168>)
 800126a:	f7ff fdd7 	bl	8000e1c <LL_ADC_GetMultimode>
 800126e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff fe76 	bl	8000f66 <LL_ADC_REG_IsConversionOngoing>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	f040 809c 	bne.w	80013ba <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001288:	2b01      	cmp	r3, #1
 800128a:	d101      	bne.n	8001290 <HAL_ADC_Start+0x30>
 800128c:	2302      	movs	r3, #2
 800128e:	e097      	b.n	80013c0 <HAL_ADC_Start+0x160>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2201      	movs	r2, #1
 8001294:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f000 fd71 	bl	8001d80 <ADC_Enable>
 800129e:	4603      	mov	r3, r0
 80012a0:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80012a2:	7dfb      	ldrb	r3, [r7, #23]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	f040 8083 	bne.w	80013b0 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012ae:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80012b2:	f023 0301 	bic.w	r3, r3, #1
 80012b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a42      	ldr	r2, [pc, #264]	; (80013cc <HAL_ADC_Start+0x16c>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d002      	beq.n	80012ce <HAL_ADC_Start+0x6e>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	e000      	b.n	80012d0 <HAL_ADC_Start+0x70>
 80012ce:	4b40      	ldr	r3, [pc, #256]	; (80013d0 <HAL_ADC_Start+0x170>)
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	6812      	ldr	r2, [r2, #0]
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d002      	beq.n	80012de <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d105      	bne.n	80012ea <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012e2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012f6:	d106      	bne.n	8001306 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012fc:	f023 0206 	bic.w	r2, r3, #6
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	659a      	str	r2, [r3, #88]	; 0x58
 8001304:	e002      	b.n	800130c <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2200      	movs	r2, #0
 800130a:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	221c      	movs	r2, #28
 8001312:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2200      	movs	r2, #0
 8001318:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a2a      	ldr	r2, [pc, #168]	; (80013cc <HAL_ADC_Start+0x16c>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d002      	beq.n	800132c <HAL_ADC_Start+0xcc>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	e000      	b.n	800132e <HAL_ADC_Start+0xce>
 800132c:	4b28      	ldr	r3, [pc, #160]	; (80013d0 <HAL_ADC_Start+0x170>)
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	6812      	ldr	r2, [r2, #0]
 8001332:	4293      	cmp	r3, r2
 8001334:	d008      	beq.n	8001348 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d005      	beq.n	8001348 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	2b05      	cmp	r3, #5
 8001340:	d002      	beq.n	8001348 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	2b09      	cmp	r3, #9
 8001346:	d114      	bne.n	8001372 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	68db      	ldr	r3, [r3, #12]
 800134e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d007      	beq.n	8001366 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800135a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800135e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff fde7 	bl	8000f3e <LL_ADC_REG_StartConversion>
 8001370:	e025      	b.n	80013be <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001376:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a12      	ldr	r2, [pc, #72]	; (80013cc <HAL_ADC_Start+0x16c>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d002      	beq.n	800138e <HAL_ADC_Start+0x12e>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	e000      	b.n	8001390 <HAL_ADC_Start+0x130>
 800138e:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <HAL_ADC_Start+0x170>)
 8001390:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d00f      	beq.n	80013be <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013a2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013a6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	655a      	str	r2, [r3, #84]	; 0x54
 80013ae:	e006      	b.n	80013be <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2200      	movs	r2, #0
 80013b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80013b8:	e001      	b.n	80013be <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80013ba:	2302      	movs	r3, #2
 80013bc:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80013be:	7dfb      	ldrb	r3, [r7, #23]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3718      	adds	r7, #24
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	50040300 	.word	0x50040300
 80013cc:	50040100 	.word	0x50040100
 80013d0:	50040000 	.word	0x50040000

080013d4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b088      	sub	sp, #32
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80013de:	4866      	ldr	r0, [pc, #408]	; (8001578 <HAL_ADC_PollForConversion+0x1a4>)
 80013e0:	f7ff fd1c 	bl	8000e1c <LL_ADC_GetMultimode>
 80013e4:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	695b      	ldr	r3, [r3, #20]
 80013ea:	2b08      	cmp	r3, #8
 80013ec:	d102      	bne.n	80013f4 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80013ee:	2308      	movs	r3, #8
 80013f0:	61fb      	str	r3, [r7, #28]
 80013f2:	e02a      	b.n	800144a <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d005      	beq.n	8001406 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	2b05      	cmp	r3, #5
 80013fe:	d002      	beq.n	8001406 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	2b09      	cmp	r3, #9
 8001404:	d111      	bne.n	800142a <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	f003 0301 	and.w	r3, r3, #1
 8001410:	2b00      	cmp	r3, #0
 8001412:	d007      	beq.n	8001424 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001418:	f043 0220 	orr.w	r2, r3, #32
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	e0a4      	b.n	800156e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001424:	2304      	movs	r3, #4
 8001426:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001428:	e00f      	b.n	800144a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800142a:	4853      	ldr	r0, [pc, #332]	; (8001578 <HAL_ADC_PollForConversion+0x1a4>)
 800142c:	f7ff fd04 	bl	8000e38 <LL_ADC_GetMultiDMATransfer>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d007      	beq.n	8001446 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800143a:	f043 0220 	orr.w	r2, r3, #32
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e093      	b.n	800156e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001446:	2304      	movs	r3, #4
 8001448:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800144a:	f7ff fbc3 	bl	8000bd4 <HAL_GetTick>
 800144e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001450:	e021      	b.n	8001496 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001458:	d01d      	beq.n	8001496 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800145a:	f7ff fbbb 	bl	8000bd4 <HAL_GetTick>
 800145e:	4602      	mov	r2, r0
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	683a      	ldr	r2, [r7, #0]
 8001466:	429a      	cmp	r2, r3
 8001468:	d302      	bcc.n	8001470 <HAL_ADC_PollForConversion+0x9c>
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d112      	bne.n	8001496 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	4013      	ands	r3, r2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d10b      	bne.n	8001496 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001482:	f043 0204 	orr.w	r2, r3, #4
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2200      	movs	r2, #0
 800148e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e06b      	b.n	800156e <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	4013      	ands	r3, r2
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d0d6      	beq.n	8001452 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014a8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff fc22 	bl	8000cfe <LL_ADC_REG_IsTriggerSourceSWStart>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d01c      	beq.n	80014fa <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	7e5b      	ldrb	r3, [r3, #25]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d118      	bne.n	80014fa <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0308 	and.w	r3, r3, #8
 80014d2:	2b08      	cmp	r3, #8
 80014d4:	d111      	bne.n	80014fa <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d105      	bne.n	80014fa <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014f2:	f043 0201 	orr.w	r2, r3, #1
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a1f      	ldr	r2, [pc, #124]	; (800157c <HAL_ADC_PollForConversion+0x1a8>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d002      	beq.n	800150a <HAL_ADC_PollForConversion+0x136>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	e000      	b.n	800150c <HAL_ADC_PollForConversion+0x138>
 800150a:	4b1d      	ldr	r3, [pc, #116]	; (8001580 <HAL_ADC_PollForConversion+0x1ac>)
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	6812      	ldr	r2, [r2, #0]
 8001510:	4293      	cmp	r3, r2
 8001512:	d008      	beq.n	8001526 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d005      	beq.n	8001526 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	2b05      	cmp	r3, #5
 800151e:	d002      	beq.n	8001526 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	2b09      	cmp	r3, #9
 8001524:	d104      	bne.n	8001530 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	61bb      	str	r3, [r7, #24]
 800152e:	e00c      	b.n	800154a <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a11      	ldr	r2, [pc, #68]	; (800157c <HAL_ADC_PollForConversion+0x1a8>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d002      	beq.n	8001540 <HAL_ADC_PollForConversion+0x16c>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	e000      	b.n	8001542 <HAL_ADC_PollForConversion+0x16e>
 8001540:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <HAL_ADC_PollForConversion+0x1ac>)
 8001542:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	2b08      	cmp	r3, #8
 800154e:	d104      	bne.n	800155a <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2208      	movs	r2, #8
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	e008      	b.n	800156c <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800155a:	69bb      	ldr	r3, [r7, #24]
 800155c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d103      	bne.n	800156c <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	220c      	movs	r2, #12
 800156a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	3720      	adds	r7, #32
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	50040300 	.word	0x50040300
 800157c:	50040100 	.word	0x50040100
 8001580:	50040000 	.word	0x50040000

08001584 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001592:	4618      	mov	r0, r3
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
	...

080015a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b0b6      	sub	sp, #216	; 0xd8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015aa:	2300      	movs	r3, #0
 80015ac:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d101      	bne.n	80015c2 <HAL_ADC_ConfigChannel+0x22>
 80015be:	2302      	movs	r3, #2
 80015c0:	e3c7      	b.n	8001d52 <HAL_ADC_ConfigChannel+0x7b2>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2201      	movs	r2, #1
 80015c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff fcc9 	bl	8000f66 <LL_ADC_REG_IsConversionOngoing>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	f040 83a8 	bne.w	8001d2c <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	2b05      	cmp	r3, #5
 80015e2:	d824      	bhi.n	800162e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	3b02      	subs	r3, #2
 80015ea:	2b03      	cmp	r3, #3
 80015ec:	d81b      	bhi.n	8001626 <HAL_ADC_ConfigChannel+0x86>
 80015ee:	a201      	add	r2, pc, #4	; (adr r2, 80015f4 <HAL_ADC_ConfigChannel+0x54>)
 80015f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015f4:	08001605 	.word	0x08001605
 80015f8:	0800160d 	.word	0x0800160d
 80015fc:	08001615 	.word	0x08001615
 8001600:	0800161d 	.word	0x0800161d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	220c      	movs	r2, #12
 8001608:	605a      	str	r2, [r3, #4]
          break;
 800160a:	e010      	b.n	800162e <HAL_ADC_ConfigChannel+0x8e>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	2212      	movs	r2, #18
 8001610:	605a      	str	r2, [r3, #4]
          break;
 8001612:	e00c      	b.n	800162e <HAL_ADC_ConfigChannel+0x8e>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	2218      	movs	r2, #24
 8001618:	605a      	str	r2, [r3, #4]
          break;
 800161a:	e008      	b.n	800162e <HAL_ADC_ConfigChannel+0x8e>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001622:	605a      	str	r2, [r3, #4]
          break;
 8001624:	e003      	b.n	800162e <HAL_ADC_ConfigChannel+0x8e>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	2206      	movs	r2, #6
 800162a:	605a      	str	r2, [r3, #4]
          break;
 800162c:	bf00      	nop
      }
    }
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6818      	ldr	r0, [r3, #0]
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	6859      	ldr	r1, [r3, #4]
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	461a      	mov	r2, r3
 800163c:	f7ff fb72 	bl	8000d24 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff fc8e 	bl	8000f66 <LL_ADC_REG_IsConversionOngoing>
 800164a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff fc9a 	bl	8000f8c <LL_ADC_INJ_IsConversionOngoing>
 8001658:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800165c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001660:	2b00      	cmp	r3, #0
 8001662:	f040 81a6 	bne.w	80019b2 <HAL_ADC_ConfigChannel+0x412>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001666:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800166a:	2b00      	cmp	r3, #0
 800166c:	f040 81a1 	bne.w	80019b2 <HAL_ADC_ConfigChannel+0x412>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6818      	ldr	r0, [r3, #0]
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	6819      	ldr	r1, [r3, #0]
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	461a      	mov	r2, r3
 800167e:	f7ff fb7d 	bl	8000d7c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	695a      	ldr	r2, [r3, #20]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	08db      	lsrs	r3, r3, #3
 800168e:	f003 0303 	and.w	r3, r3, #3
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	691b      	ldr	r3, [r3, #16]
 80016a0:	2b04      	cmp	r3, #4
 80016a2:	d00a      	beq.n	80016ba <HAL_ADC_ConfigChannel+0x11a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6818      	ldr	r0, [r3, #0]
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	6919      	ldr	r1, [r3, #16]
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80016b4:	f7ff face 	bl	8000c54 <LL_ADC_SetOffset>
 80016b8:	e17b      	b.n	80019b2 <HAL_ADC_ConfigChannel+0x412>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2100      	movs	r1, #0
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff faeb 	bl	8000c9c <LL_ADC_GetOffsetChannel>
 80016c6:	4603      	mov	r3, r0
 80016c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d10a      	bne.n	80016e6 <HAL_ADC_ConfigChannel+0x146>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2100      	movs	r1, #0
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff fae0 	bl	8000c9c <LL_ADC_GetOffsetChannel>
 80016dc:	4603      	mov	r3, r0
 80016de:	0e9b      	lsrs	r3, r3, #26
 80016e0:	f003 021f 	and.w	r2, r3, #31
 80016e4:	e01e      	b.n	8001724 <HAL_ADC_ConfigChannel+0x184>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2100      	movs	r1, #0
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff fad5 	bl	8000c9c <LL_ADC_GetOffsetChannel>
 80016f2:	4603      	mov	r3, r0
 80016f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80016fc:	fa93 f3a3 	rbit	r3, r3
 8001700:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001704:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001708:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800170c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d101      	bne.n	8001718 <HAL_ADC_ConfigChannel+0x178>
  {
    return 32U;
 8001714:	2320      	movs	r3, #32
 8001716:	e004      	b.n	8001722 <HAL_ADC_ConfigChannel+0x182>
  }
  return __builtin_clz(value);
 8001718:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800171c:	fab3 f383 	clz	r3, r3
 8001720:	b2db      	uxtb	r3, r3
 8001722:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800172c:	2b00      	cmp	r3, #0
 800172e:	d105      	bne.n	800173c <HAL_ADC_ConfigChannel+0x19c>
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	0e9b      	lsrs	r3, r3, #26
 8001736:	f003 031f 	and.w	r3, r3, #31
 800173a:	e018      	b.n	800176e <HAL_ADC_ConfigChannel+0x1ce>
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001744:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001748:	fa93 f3a3 	rbit	r3, r3
 800174c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001750:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001754:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001758:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800175c:	2b00      	cmp	r3, #0
 800175e:	d101      	bne.n	8001764 <HAL_ADC_ConfigChannel+0x1c4>
    return 32U;
 8001760:	2320      	movs	r3, #32
 8001762:	e004      	b.n	800176e <HAL_ADC_ConfigChannel+0x1ce>
  return __builtin_clz(value);
 8001764:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001768:	fab3 f383 	clz	r3, r3
 800176c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800176e:	429a      	cmp	r2, r3
 8001770:	d106      	bne.n	8001780 <HAL_ADC_ConfigChannel+0x1e0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2200      	movs	r2, #0
 8001778:	2100      	movs	r1, #0
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff faa4 	bl	8000cc8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2101      	movs	r1, #1
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff fa88 	bl	8000c9c <LL_ADC_GetOffsetChannel>
 800178c:	4603      	mov	r3, r0
 800178e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001792:	2b00      	cmp	r3, #0
 8001794:	d10a      	bne.n	80017ac <HAL_ADC_ConfigChannel+0x20c>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2101      	movs	r1, #1
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff fa7d 	bl	8000c9c <LL_ADC_GetOffsetChannel>
 80017a2:	4603      	mov	r3, r0
 80017a4:	0e9b      	lsrs	r3, r3, #26
 80017a6:	f003 021f 	and.w	r2, r3, #31
 80017aa:	e01e      	b.n	80017ea <HAL_ADC_ConfigChannel+0x24a>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2101      	movs	r1, #1
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff fa72 	bl	8000c9c <LL_ADC_GetOffsetChannel>
 80017b8:	4603      	mov	r3, r0
 80017ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80017c2:	fa93 f3a3 	rbit	r3, r3
 80017c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80017ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80017ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80017d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d101      	bne.n	80017de <HAL_ADC_ConfigChannel+0x23e>
    return 32U;
 80017da:	2320      	movs	r3, #32
 80017dc:	e004      	b.n	80017e8 <HAL_ADC_ConfigChannel+0x248>
  return __builtin_clz(value);
 80017de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80017e2:	fab3 f383 	clz	r3, r3
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d105      	bne.n	8001802 <HAL_ADC_ConfigChannel+0x262>
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	0e9b      	lsrs	r3, r3, #26
 80017fc:	f003 031f 	and.w	r3, r3, #31
 8001800:	e018      	b.n	8001834 <HAL_ADC_ConfigChannel+0x294>
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800180a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800180e:	fa93 f3a3 	rbit	r3, r3
 8001812:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001816:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800181a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800181e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001822:	2b00      	cmp	r3, #0
 8001824:	d101      	bne.n	800182a <HAL_ADC_ConfigChannel+0x28a>
    return 32U;
 8001826:	2320      	movs	r3, #32
 8001828:	e004      	b.n	8001834 <HAL_ADC_ConfigChannel+0x294>
  return __builtin_clz(value);
 800182a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800182e:	fab3 f383 	clz	r3, r3
 8001832:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001834:	429a      	cmp	r2, r3
 8001836:	d106      	bne.n	8001846 <HAL_ADC_ConfigChannel+0x2a6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2200      	movs	r2, #0
 800183e:	2101      	movs	r1, #1
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff fa41 	bl	8000cc8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2102      	movs	r1, #2
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff fa25 	bl	8000c9c <LL_ADC_GetOffsetChannel>
 8001852:	4603      	mov	r3, r0
 8001854:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001858:	2b00      	cmp	r3, #0
 800185a:	d10a      	bne.n	8001872 <HAL_ADC_ConfigChannel+0x2d2>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2102      	movs	r1, #2
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff fa1a 	bl	8000c9c <LL_ADC_GetOffsetChannel>
 8001868:	4603      	mov	r3, r0
 800186a:	0e9b      	lsrs	r3, r3, #26
 800186c:	f003 021f 	and.w	r2, r3, #31
 8001870:	e01e      	b.n	80018b0 <HAL_ADC_ConfigChannel+0x310>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2102      	movs	r1, #2
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff fa0f 	bl	8000c9c <LL_ADC_GetOffsetChannel>
 800187e:	4603      	mov	r3, r0
 8001880:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001884:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001888:	fa93 f3a3 	rbit	r3, r3
 800188c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001890:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001894:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001898:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800189c:	2b00      	cmp	r3, #0
 800189e:	d101      	bne.n	80018a4 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 80018a0:	2320      	movs	r3, #32
 80018a2:	e004      	b.n	80018ae <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 80018a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80018a8:	fab3 f383 	clz	r3, r3
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d105      	bne.n	80018c8 <HAL_ADC_ConfigChannel+0x328>
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	0e9b      	lsrs	r3, r3, #26
 80018c2:	f003 031f 	and.w	r3, r3, #31
 80018c6:	e016      	b.n	80018f6 <HAL_ADC_ConfigChannel+0x356>
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80018d4:	fa93 f3a3 	rbit	r3, r3
 80018d8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80018da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80018dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80018e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d101      	bne.n	80018ec <HAL_ADC_ConfigChannel+0x34c>
    return 32U;
 80018e8:	2320      	movs	r3, #32
 80018ea:	e004      	b.n	80018f6 <HAL_ADC_ConfigChannel+0x356>
  return __builtin_clz(value);
 80018ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80018f0:	fab3 f383 	clz	r3, r3
 80018f4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d106      	bne.n	8001908 <HAL_ADC_ConfigChannel+0x368>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2200      	movs	r2, #0
 8001900:	2102      	movs	r1, #2
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff f9e0 	bl	8000cc8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2103      	movs	r1, #3
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff f9c4 	bl	8000c9c <LL_ADC_GetOffsetChannel>
 8001914:	4603      	mov	r3, r0
 8001916:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800191a:	2b00      	cmp	r3, #0
 800191c:	d10a      	bne.n	8001934 <HAL_ADC_ConfigChannel+0x394>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2103      	movs	r1, #3
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff f9b9 	bl	8000c9c <LL_ADC_GetOffsetChannel>
 800192a:	4603      	mov	r3, r0
 800192c:	0e9b      	lsrs	r3, r3, #26
 800192e:	f003 021f 	and.w	r2, r3, #31
 8001932:	e017      	b.n	8001964 <HAL_ADC_ConfigChannel+0x3c4>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2103      	movs	r1, #3
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff f9ae 	bl	8000c9c <LL_ADC_GetOffsetChannel>
 8001940:	4603      	mov	r3, r0
 8001942:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001944:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001946:	fa93 f3a3 	rbit	r3, r3
 800194a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800194c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800194e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001950:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001952:	2b00      	cmp	r3, #0
 8001954:	d101      	bne.n	800195a <HAL_ADC_ConfigChannel+0x3ba>
    return 32U;
 8001956:	2320      	movs	r3, #32
 8001958:	e003      	b.n	8001962 <HAL_ADC_ConfigChannel+0x3c2>
  return __builtin_clz(value);
 800195a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800195c:	fab3 f383 	clz	r3, r3
 8001960:	b2db      	uxtb	r3, r3
 8001962:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800196c:	2b00      	cmp	r3, #0
 800196e:	d105      	bne.n	800197c <HAL_ADC_ConfigChannel+0x3dc>
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	0e9b      	lsrs	r3, r3, #26
 8001976:	f003 031f 	and.w	r3, r3, #31
 800197a:	e011      	b.n	80019a0 <HAL_ADC_ConfigChannel+0x400>
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001982:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001984:	fa93 f3a3 	rbit	r3, r3
 8001988:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800198a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800198c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800198e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001990:	2b00      	cmp	r3, #0
 8001992:	d101      	bne.n	8001998 <HAL_ADC_ConfigChannel+0x3f8>
    return 32U;
 8001994:	2320      	movs	r3, #32
 8001996:	e003      	b.n	80019a0 <HAL_ADC_ConfigChannel+0x400>
  return __builtin_clz(value);
 8001998:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800199a:	fab3 f383 	clz	r3, r3
 800199e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d106      	bne.n	80019b2 <HAL_ADC_ConfigChannel+0x412>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2200      	movs	r2, #0
 80019aa:	2103      	movs	r1, #3
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff f98b 	bl	8000cc8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff faae 	bl	8000f18 <LL_ADC_IsEnabled>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	f040 8140 	bne.w	8001c44 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6818      	ldr	r0, [r3, #0]
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	6819      	ldr	r1, [r3, #0]
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	461a      	mov	r2, r3
 80019d2:	f7ff f9ff 	bl	8000dd4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	4a8f      	ldr	r2, [pc, #572]	; (8001c18 <HAL_ADC_ConfigChannel+0x678>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	f040 8131 	bne.w	8001c44 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d10b      	bne.n	8001a0a <HAL_ADC_ConfigChannel+0x46a>
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	0e9b      	lsrs	r3, r3, #26
 80019f8:	3301      	adds	r3, #1
 80019fa:	f003 031f 	and.w	r3, r3, #31
 80019fe:	2b09      	cmp	r3, #9
 8001a00:	bf94      	ite	ls
 8001a02:	2301      	movls	r3, #1
 8001a04:	2300      	movhi	r3, #0
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	e019      	b.n	8001a3e <HAL_ADC_ConfigChannel+0x49e>
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a12:	fa93 f3a3 	rbit	r3, r3
 8001a16:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001a18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a1a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001a1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d101      	bne.n	8001a26 <HAL_ADC_ConfigChannel+0x486>
    return 32U;
 8001a22:	2320      	movs	r3, #32
 8001a24:	e003      	b.n	8001a2e <HAL_ADC_ConfigChannel+0x48e>
  return __builtin_clz(value);
 8001a26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a28:	fab3 f383 	clz	r3, r3
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	3301      	adds	r3, #1
 8001a30:	f003 031f 	and.w	r3, r3, #31
 8001a34:	2b09      	cmp	r3, #9
 8001a36:	bf94      	ite	ls
 8001a38:	2301      	movls	r3, #1
 8001a3a:	2300      	movhi	r3, #0
 8001a3c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d079      	beq.n	8001b36 <HAL_ADC_ConfigChannel+0x596>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d107      	bne.n	8001a5e <HAL_ADC_ConfigChannel+0x4be>
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	0e9b      	lsrs	r3, r3, #26
 8001a54:	3301      	adds	r3, #1
 8001a56:	069b      	lsls	r3, r3, #26
 8001a58:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a5c:	e015      	b.n	8001a8a <HAL_ADC_ConfigChannel+0x4ea>
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a66:	fa93 f3a3 	rbit	r3, r3
 8001a6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001a6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a6e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001a70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 8001a76:	2320      	movs	r3, #32
 8001a78:	e003      	b.n	8001a82 <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 8001a7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a7c:	fab3 f383 	clz	r3, r3
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	3301      	adds	r3, #1
 8001a84:	069b      	lsls	r3, r3, #26
 8001a86:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d109      	bne.n	8001aaa <HAL_ADC_ConfigChannel+0x50a>
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	0e9b      	lsrs	r3, r3, #26
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	f003 031f 	and.w	r3, r3, #31
 8001aa2:	2101      	movs	r1, #1
 8001aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa8:	e017      	b.n	8001ada <HAL_ADC_ConfigChannel+0x53a>
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ab2:	fa93 f3a3 	rbit	r3, r3
 8001ab6:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001ab8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001aba:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001abc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d101      	bne.n	8001ac6 <HAL_ADC_ConfigChannel+0x526>
    return 32U;
 8001ac2:	2320      	movs	r3, #32
 8001ac4:	e003      	b.n	8001ace <HAL_ADC_ConfigChannel+0x52e>
  return __builtin_clz(value);
 8001ac6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ac8:	fab3 f383 	clz	r3, r3
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	3301      	adds	r3, #1
 8001ad0:	f003 031f 	and.w	r3, r3, #31
 8001ad4:	2101      	movs	r1, #1
 8001ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8001ada:	ea42 0103 	orr.w	r1, r2, r3
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d10a      	bne.n	8001b00 <HAL_ADC_ConfigChannel+0x560>
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	0e9b      	lsrs	r3, r3, #26
 8001af0:	3301      	adds	r3, #1
 8001af2:	f003 021f 	and.w	r2, r3, #31
 8001af6:	4613      	mov	r3, r2
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	4413      	add	r3, r2
 8001afc:	051b      	lsls	r3, r3, #20
 8001afe:	e018      	b.n	8001b32 <HAL_ADC_ConfigChannel+0x592>
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b08:	fa93 f3a3 	rbit	r3, r3
 8001b0c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b10:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001b12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d101      	bne.n	8001b1c <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8001b18:	2320      	movs	r3, #32
 8001b1a:	e003      	b.n	8001b24 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8001b1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b1e:	fab3 f383 	clz	r3, r3
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	3301      	adds	r3, #1
 8001b26:	f003 021f 	and.w	r2, r3, #31
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	4413      	add	r3, r2
 8001b30:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b32:	430b      	orrs	r3, r1
 8001b34:	e081      	b.n	8001c3a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d107      	bne.n	8001b52 <HAL_ADC_ConfigChannel+0x5b2>
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	0e9b      	lsrs	r3, r3, #26
 8001b48:	3301      	adds	r3, #1
 8001b4a:	069b      	lsls	r3, r3, #26
 8001b4c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b50:	e015      	b.n	8001b7e <HAL_ADC_ConfigChannel+0x5de>
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b5a:	fa93 f3a3 	rbit	r3, r3
 8001b5e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b62:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d101      	bne.n	8001b6e <HAL_ADC_ConfigChannel+0x5ce>
    return 32U;
 8001b6a:	2320      	movs	r3, #32
 8001b6c:	e003      	b.n	8001b76 <HAL_ADC_ConfigChannel+0x5d6>
  return __builtin_clz(value);
 8001b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b70:	fab3 f383 	clz	r3, r3
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	3301      	adds	r3, #1
 8001b78:	069b      	lsls	r3, r3, #26
 8001b7a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d109      	bne.n	8001b9e <HAL_ADC_ConfigChannel+0x5fe>
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	0e9b      	lsrs	r3, r3, #26
 8001b90:	3301      	adds	r3, #1
 8001b92:	f003 031f 	and.w	r3, r3, #31
 8001b96:	2101      	movs	r1, #1
 8001b98:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9c:	e017      	b.n	8001bce <HAL_ADC_ConfigChannel+0x62e>
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba4:	6a3b      	ldr	r3, [r7, #32]
 8001ba6:	fa93 f3a3 	rbit	r3, r3
 8001baa:	61fb      	str	r3, [r7, #28]
  return result;
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d101      	bne.n	8001bba <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 8001bb6:	2320      	movs	r3, #32
 8001bb8:	e003      	b.n	8001bc2 <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 8001bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbc:	fab3 f383 	clz	r3, r3
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	f003 031f 	and.w	r3, r3, #31
 8001bc8:	2101      	movs	r1, #1
 8001bca:	fa01 f303 	lsl.w	r3, r1, r3
 8001bce:	ea42 0103 	orr.w	r1, r2, r3
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d10d      	bne.n	8001bfa <HAL_ADC_ConfigChannel+0x65a>
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	0e9b      	lsrs	r3, r3, #26
 8001be4:	3301      	adds	r3, #1
 8001be6:	f003 021f 	and.w	r2, r3, #31
 8001bea:	4613      	mov	r3, r2
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	4413      	add	r3, r2
 8001bf0:	3b1e      	subs	r3, #30
 8001bf2:	051b      	lsls	r3, r3, #20
 8001bf4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bf8:	e01e      	b.n	8001c38 <HAL_ADC_ConfigChannel+0x698>
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	fa93 f3a3 	rbit	r3, r3
 8001c06:	613b      	str	r3, [r7, #16]
  return result;
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d104      	bne.n	8001c1c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001c12:	2320      	movs	r3, #32
 8001c14:	e006      	b.n	8001c24 <HAL_ADC_ConfigChannel+0x684>
 8001c16:	bf00      	nop
 8001c18:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	fab3 f383 	clz	r3, r3
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	3301      	adds	r3, #1
 8001c26:	f003 021f 	and.w	r2, r3, #31
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	4413      	add	r3, r2
 8001c30:	3b1e      	subs	r3, #30
 8001c32:	051b      	lsls	r3, r3, #20
 8001c34:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c38:	430b      	orrs	r3, r1
 8001c3a:	683a      	ldr	r2, [r7, #0]
 8001c3c:	6892      	ldr	r2, [r2, #8]
 8001c3e:	4619      	mov	r1, r3
 8001c40:	f7ff f89c 	bl	8000d7c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	4b44      	ldr	r3, [pc, #272]	; (8001d5c <HAL_ADC_ConfigChannel+0x7bc>)
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d07a      	beq.n	8001d46 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c50:	4843      	ldr	r0, [pc, #268]	; (8001d60 <HAL_ADC_ConfigChannel+0x7c0>)
 8001c52:	f7fe fff1 	bl	8000c38 <LL_ADC_GetCommonPathInternalCh>
 8001c56:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a41      	ldr	r2, [pc, #260]	; (8001d64 <HAL_ADC_ConfigChannel+0x7c4>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d12c      	bne.n	8001cbe <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001c64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d126      	bne.n	8001cbe <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a3c      	ldr	r2, [pc, #240]	; (8001d68 <HAL_ADC_ConfigChannel+0x7c8>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d004      	beq.n	8001c84 <HAL_ADC_ConfigChannel+0x6e4>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a3b      	ldr	r2, [pc, #236]	; (8001d6c <HAL_ADC_ConfigChannel+0x7cc>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d15d      	bne.n	8001d40 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c88:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4834      	ldr	r0, [pc, #208]	; (8001d60 <HAL_ADC_ConfigChannel+0x7c0>)
 8001c90:	f7fe ffbf 	bl	8000c12 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c94:	4b36      	ldr	r3, [pc, #216]	; (8001d70 <HAL_ADC_ConfigChannel+0x7d0>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	099b      	lsrs	r3, r3, #6
 8001c9a:	4a36      	ldr	r2, [pc, #216]	; (8001d74 <HAL_ADC_ConfigChannel+0x7d4>)
 8001c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca0:	099b      	lsrs	r3, r3, #6
 8001ca2:	1c5a      	adds	r2, r3, #1
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	4413      	add	r3, r2
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001cae:	e002      	b.n	8001cb6 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d1f9      	bne.n	8001cb0 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001cbc:	e040      	b.n	8001d40 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a2d      	ldr	r2, [pc, #180]	; (8001d78 <HAL_ADC_ConfigChannel+0x7d8>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d118      	bne.n	8001cfa <HAL_ADC_ConfigChannel+0x75a>
 8001cc8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ccc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d112      	bne.n	8001cfa <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a23      	ldr	r2, [pc, #140]	; (8001d68 <HAL_ADC_ConfigChannel+0x7c8>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d004      	beq.n	8001ce8 <HAL_ADC_ConfigChannel+0x748>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a22      	ldr	r2, [pc, #136]	; (8001d6c <HAL_ADC_ConfigChannel+0x7cc>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d12d      	bne.n	8001d44 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ce8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001cec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	481b      	ldr	r0, [pc, #108]	; (8001d60 <HAL_ADC_ConfigChannel+0x7c0>)
 8001cf4:	f7fe ff8d 	bl	8000c12 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001cf8:	e024      	b.n	8001d44 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a1f      	ldr	r2, [pc, #124]	; (8001d7c <HAL_ADC_ConfigChannel+0x7dc>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d120      	bne.n	8001d46 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001d04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d11a      	bne.n	8001d46 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a14      	ldr	r2, [pc, #80]	; (8001d68 <HAL_ADC_ConfigChannel+0x7c8>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d115      	bne.n	8001d46 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d1a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d1e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d22:	4619      	mov	r1, r3
 8001d24:	480e      	ldr	r0, [pc, #56]	; (8001d60 <HAL_ADC_ConfigChannel+0x7c0>)
 8001d26:	f7fe ff74 	bl	8000c12 <LL_ADC_SetCommonPathInternalCh>
 8001d2a:	e00c      	b.n	8001d46 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d30:	f043 0220 	orr.w	r2, r3, #32
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001d3e:	e002      	b.n	8001d46 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d40:	bf00      	nop
 8001d42:	e000      	b.n	8001d46 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d44:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001d4e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	37d8      	adds	r7, #216	; 0xd8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	80080000 	.word	0x80080000
 8001d60:	50040300 	.word	0x50040300
 8001d64:	c7520000 	.word	0xc7520000
 8001d68:	50040000 	.word	0x50040000
 8001d6c:	50040200 	.word	0x50040200
 8001d70:	20000000 	.word	0x20000000
 8001d74:	053e2d63 	.word	0x053e2d63
 8001d78:	cb840000 	.word	0xcb840000
 8001d7c:	80000001 	.word	0x80000001

08001d80 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff f8c1 	bl	8000f18 <LL_ADC_IsEnabled>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d169      	bne.n	8001e70 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	689a      	ldr	r2, [r3, #8]
 8001da2:	4b36      	ldr	r3, [pc, #216]	; (8001e7c <ADC_Enable+0xfc>)
 8001da4:	4013      	ands	r3, r2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d00d      	beq.n	8001dc6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dae:	f043 0210 	orr.w	r2, r3, #16
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dba:	f043 0201 	orr.w	r2, r3, #1
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e055      	b.n	8001e72 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7ff f890 	bl	8000ef0 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001dd0:	482b      	ldr	r0, [pc, #172]	; (8001e80 <ADC_Enable+0x100>)
 8001dd2:	f7fe ff31 	bl	8000c38 <LL_ADC_GetCommonPathInternalCh>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d013      	beq.n	8001e08 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001de0:	4b28      	ldr	r3, [pc, #160]	; (8001e84 <ADC_Enable+0x104>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	099b      	lsrs	r3, r3, #6
 8001de6:	4a28      	ldr	r2, [pc, #160]	; (8001e88 <ADC_Enable+0x108>)
 8001de8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dec:	099b      	lsrs	r3, r3, #6
 8001dee:	1c5a      	adds	r2, r3, #1
 8001df0:	4613      	mov	r3, r2
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	4413      	add	r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8001dfa:	e002      	b.n	8001e02 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d1f9      	bne.n	8001dfc <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001e08:	f7fe fee4 	bl	8000bd4 <HAL_GetTick>
 8001e0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001e0e:	e028      	b.n	8001e62 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff f87f 	bl	8000f18 <LL_ADC_IsEnabled>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d104      	bne.n	8001e2a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff f863 	bl	8000ef0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e2a:	f7fe fed3 	bl	8000bd4 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d914      	bls.n	8001e62 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d00d      	beq.n	8001e62 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e4a:	f043 0210 	orr.w	r2, r3, #16
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e56:	f043 0201 	orr.w	r2, r3, #1
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e007      	b.n	8001e72 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d1cf      	bne.n	8001e10 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	8000003f 	.word	0x8000003f
 8001e80:	50040300 	.word	0x50040300
 8001e84:	20000000 	.word	0x20000000
 8001e88:	053e2d63 	.word	0x053e2d63

08001e8c <LL_ADC_IsEnabled>:
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f003 0301 	and.w	r3, r3, #1
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d101      	bne.n	8001ea4 <LL_ADC_IsEnabled+0x18>
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e000      	b.n	8001ea6 <LL_ADC_IsEnabled+0x1a>
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr

08001eb2 <LL_ADC_REG_IsConversionOngoing>:
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	b083      	sub	sp, #12
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f003 0304 	and.w	r3, r3, #4
 8001ec2:	2b04      	cmp	r3, #4
 8001ec4:	d101      	bne.n	8001eca <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e000      	b.n	8001ecc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001ed8:	b590      	push	{r4, r7, lr}
 8001eda:	b09f      	sub	sp, #124	; 0x7c
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d101      	bne.n	8001ef6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	e093      	b.n	800201e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8001efe:	2300      	movs	r3, #0
 8001f00:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8001f02:	2300      	movs	r3, #0
 8001f04:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a47      	ldr	r2, [pc, #284]	; (8002028 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d102      	bne.n	8001f16 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001f10:	4b46      	ldr	r3, [pc, #280]	; (800202c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001f12:	60bb      	str	r3, [r7, #8]
 8001f14:	e001      	b.n	8001f1a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001f16:	2300      	movs	r3, #0
 8001f18:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d10b      	bne.n	8001f38 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f24:	f043 0220 	orr.w	r2, r3, #32
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e072      	b.n	800201e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7ff ffb9 	bl	8001eb2 <LL_ADC_REG_IsConversionOngoing>
 8001f40:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7ff ffb3 	bl	8001eb2 <LL_ADC_REG_IsConversionOngoing>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d154      	bne.n	8001ffc <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001f52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d151      	bne.n	8001ffc <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001f58:	4b35      	ldr	r3, [pc, #212]	; (8002030 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8001f5a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d02c      	beq.n	8001fbe <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001f64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	6859      	ldr	r1, [r3, #4]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f76:	035b      	lsls	r3, r3, #13
 8001f78:	430b      	orrs	r3, r1
 8001f7a:	431a      	orrs	r2, r3
 8001f7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f7e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f80:	4829      	ldr	r0, [pc, #164]	; (8002028 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001f82:	f7ff ff83 	bl	8001e8c <LL_ADC_IsEnabled>
 8001f86:	4604      	mov	r4, r0
 8001f88:	4828      	ldr	r0, [pc, #160]	; (800202c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001f8a:	f7ff ff7f 	bl	8001e8c <LL_ADC_IsEnabled>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	431c      	orrs	r4, r3
 8001f92:	4828      	ldr	r0, [pc, #160]	; (8002034 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001f94:	f7ff ff7a 	bl	8001e8c <LL_ADC_IsEnabled>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	4323      	orrs	r3, r4
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d137      	bne.n	8002010 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001fa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001fa8:	f023 030f 	bic.w	r3, r3, #15
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	6811      	ldr	r1, [r2, #0]
 8001fb0:	683a      	ldr	r2, [r7, #0]
 8001fb2:	6892      	ldr	r2, [r2, #8]
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	431a      	orrs	r2, r3
 8001fb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fba:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001fbc:	e028      	b.n	8002010 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001fbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001fc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fc8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001fca:	4817      	ldr	r0, [pc, #92]	; (8002028 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001fcc:	f7ff ff5e 	bl	8001e8c <LL_ADC_IsEnabled>
 8001fd0:	4604      	mov	r4, r0
 8001fd2:	4816      	ldr	r0, [pc, #88]	; (800202c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001fd4:	f7ff ff5a 	bl	8001e8c <LL_ADC_IsEnabled>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	431c      	orrs	r4, r3
 8001fdc:	4815      	ldr	r0, [pc, #84]	; (8002034 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001fde:	f7ff ff55 	bl	8001e8c <LL_ADC_IsEnabled>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	4323      	orrs	r3, r4
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d112      	bne.n	8002010 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001fea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001ff2:	f023 030f 	bic.w	r3, r3, #15
 8001ff6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001ff8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ffa:	e009      	b.n	8002010 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002000:	f043 0220 	orr.w	r2, r3, #32
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800200e:	e000      	b.n	8002012 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002010:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800201a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800201e:	4618      	mov	r0, r3
 8002020:	377c      	adds	r7, #124	; 0x7c
 8002022:	46bd      	mov	sp, r7
 8002024:	bd90      	pop	{r4, r7, pc}
 8002026:	bf00      	nop
 8002028:	50040000 	.word	0x50040000
 800202c:	50040100 	.word	0x50040100
 8002030:	50040300 	.word	0x50040300
 8002034:	50040200 	.word	0x50040200

08002038 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f003 0307 	and.w	r3, r3, #7
 8002046:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002048:	4b0c      	ldr	r3, [pc, #48]	; (800207c <__NVIC_SetPriorityGrouping+0x44>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800204e:	68ba      	ldr	r2, [r7, #8]
 8002050:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002054:	4013      	ands	r3, r2
 8002056:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002060:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002064:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002068:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800206a:	4a04      	ldr	r2, [pc, #16]	; (800207c <__NVIC_SetPriorityGrouping+0x44>)
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	60d3      	str	r3, [r2, #12]
}
 8002070:	bf00      	nop
 8002072:	3714      	adds	r7, #20
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	e000ed00 	.word	0xe000ed00

08002080 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002084:	4b04      	ldr	r3, [pc, #16]	; (8002098 <__NVIC_GetPriorityGrouping+0x18>)
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	0a1b      	lsrs	r3, r3, #8
 800208a:	f003 0307 	and.w	r3, r3, #7
}
 800208e:	4618      	mov	r0, r3
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr
 8002098:	e000ed00 	.word	0xe000ed00

0800209c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	4603      	mov	r3, r0
 80020a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	db0b      	blt.n	80020c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020ae:	79fb      	ldrb	r3, [r7, #7]
 80020b0:	f003 021f 	and.w	r2, r3, #31
 80020b4:	4907      	ldr	r1, [pc, #28]	; (80020d4 <__NVIC_EnableIRQ+0x38>)
 80020b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ba:	095b      	lsrs	r3, r3, #5
 80020bc:	2001      	movs	r0, #1
 80020be:	fa00 f202 	lsl.w	r2, r0, r2
 80020c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020c6:	bf00      	nop
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	e000e100 	.word	0xe000e100

080020d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	4603      	mov	r3, r0
 80020e0:	6039      	str	r1, [r7, #0]
 80020e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	db0a      	blt.n	8002102 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	b2da      	uxtb	r2, r3
 80020f0:	490c      	ldr	r1, [pc, #48]	; (8002124 <__NVIC_SetPriority+0x4c>)
 80020f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f6:	0112      	lsls	r2, r2, #4
 80020f8:	b2d2      	uxtb	r2, r2
 80020fa:	440b      	add	r3, r1
 80020fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002100:	e00a      	b.n	8002118 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	b2da      	uxtb	r2, r3
 8002106:	4908      	ldr	r1, [pc, #32]	; (8002128 <__NVIC_SetPriority+0x50>)
 8002108:	79fb      	ldrb	r3, [r7, #7]
 800210a:	f003 030f 	and.w	r3, r3, #15
 800210e:	3b04      	subs	r3, #4
 8002110:	0112      	lsls	r2, r2, #4
 8002112:	b2d2      	uxtb	r2, r2
 8002114:	440b      	add	r3, r1
 8002116:	761a      	strb	r2, [r3, #24]
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr
 8002124:	e000e100 	.word	0xe000e100
 8002128:	e000ed00 	.word	0xe000ed00

0800212c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800212c:	b480      	push	{r7}
 800212e:	b089      	sub	sp, #36	; 0x24
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f003 0307 	and.w	r3, r3, #7
 800213e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	f1c3 0307 	rsb	r3, r3, #7
 8002146:	2b04      	cmp	r3, #4
 8002148:	bf28      	it	cs
 800214a:	2304      	movcs	r3, #4
 800214c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	3304      	adds	r3, #4
 8002152:	2b06      	cmp	r3, #6
 8002154:	d902      	bls.n	800215c <NVIC_EncodePriority+0x30>
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	3b03      	subs	r3, #3
 800215a:	e000      	b.n	800215e <NVIC_EncodePriority+0x32>
 800215c:	2300      	movs	r3, #0
 800215e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002160:	f04f 32ff 	mov.w	r2, #4294967295
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	fa02 f303 	lsl.w	r3, r2, r3
 800216a:	43da      	mvns	r2, r3
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	401a      	ands	r2, r3
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002174:	f04f 31ff 	mov.w	r1, #4294967295
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	fa01 f303 	lsl.w	r3, r1, r3
 800217e:	43d9      	mvns	r1, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002184:	4313      	orrs	r3, r2
         );
}
 8002186:	4618      	mov	r0, r3
 8002188:	3724      	adds	r7, #36	; 0x24
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
	...

08002194 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	3b01      	subs	r3, #1
 80021a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021a4:	d301      	bcc.n	80021aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021a6:	2301      	movs	r3, #1
 80021a8:	e00f      	b.n	80021ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021aa:	4a0a      	ldr	r2, [pc, #40]	; (80021d4 <SysTick_Config+0x40>)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	3b01      	subs	r3, #1
 80021b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021b2:	210f      	movs	r1, #15
 80021b4:	f04f 30ff 	mov.w	r0, #4294967295
 80021b8:	f7ff ff8e 	bl	80020d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021bc:	4b05      	ldr	r3, [pc, #20]	; (80021d4 <SysTick_Config+0x40>)
 80021be:	2200      	movs	r2, #0
 80021c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021c2:	4b04      	ldr	r3, [pc, #16]	; (80021d4 <SysTick_Config+0x40>)
 80021c4:	2207      	movs	r2, #7
 80021c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	e000e010 	.word	0xe000e010

080021d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f7ff ff29 	bl	8002038 <__NVIC_SetPriorityGrouping>
}
 80021e6:	bf00      	nop
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b086      	sub	sp, #24
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	4603      	mov	r3, r0
 80021f6:	60b9      	str	r1, [r7, #8]
 80021f8:	607a      	str	r2, [r7, #4]
 80021fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021fc:	2300      	movs	r3, #0
 80021fe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002200:	f7ff ff3e 	bl	8002080 <__NVIC_GetPriorityGrouping>
 8002204:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	68b9      	ldr	r1, [r7, #8]
 800220a:	6978      	ldr	r0, [r7, #20]
 800220c:	f7ff ff8e 	bl	800212c <NVIC_EncodePriority>
 8002210:	4602      	mov	r2, r0
 8002212:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002216:	4611      	mov	r1, r2
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff ff5d 	bl	80020d8 <__NVIC_SetPriority>
}
 800221e:	bf00      	nop
 8002220:	3718      	adds	r7, #24
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b082      	sub	sp, #8
 800222a:	af00      	add	r7, sp, #0
 800222c:	4603      	mov	r3, r0
 800222e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff ff31 	bl	800209c <__NVIC_EnableIRQ>
}
 800223a:	bf00      	nop
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002242:	b580      	push	{r7, lr}
 8002244:	b082      	sub	sp, #8
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f7ff ffa2 	bl	8002194 <SysTick_Config>
 8002250:	4603      	mov	r3, r0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800225a:	b480      	push	{r7}
 800225c:	b085      	sub	sp, #20
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002262:	2300      	movs	r3, #0
 8002264:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d008      	beq.n	8002284 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2204      	movs	r2, #4
 8002276:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e022      	b.n	80022ca <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f022 020e 	bic.w	r2, r2, #14
 8002292:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f022 0201 	bic.w	r2, r2, #1
 80022a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a8:	f003 021c 	and.w	r2, r3, #28
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b0:	2101      	movs	r1, #1
 80022b2:	fa01 f202 	lsl.w	r2, r1, r2
 80022b6:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80022c8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3714      	adds	r7, #20
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr

080022d6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b084      	sub	sp, #16
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022de:	2300      	movs	r3, #0
 80022e0:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d005      	beq.n	80022fa <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2204      	movs	r2, #4
 80022f2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	73fb      	strb	r3, [r7, #15]
 80022f8:	e029      	b.n	800234e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f022 020e 	bic.w	r2, r2, #14
 8002308:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f022 0201 	bic.w	r2, r2, #1
 8002318:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231e:	f003 021c 	and.w	r2, r3, #28
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	2101      	movs	r1, #1
 8002328:	fa01 f202 	lsl.w	r2, r1, r2
 800232c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2201      	movs	r2, #1
 8002332:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002342:	2b00      	cmp	r3, #0
 8002344:	d003      	beq.n	800234e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	4798      	blx	r3
    }
  }
  return status;
 800234e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002350:	4618      	mov	r0, r3
 8002352:	3710      	adds	r7, #16
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002358:	b480      	push	{r7}
 800235a:	b087      	sub	sp, #28
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002362:	2300      	movs	r3, #0
 8002364:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002366:	e17f      	b.n	8002668 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	2101      	movs	r1, #1
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	fa01 f303 	lsl.w	r3, r1, r3
 8002374:	4013      	ands	r3, r2
 8002376:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2b00      	cmp	r3, #0
 800237c:	f000 8171 	beq.w	8002662 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f003 0303 	and.w	r3, r3, #3
 8002388:	2b01      	cmp	r3, #1
 800238a:	d005      	beq.n	8002398 <HAL_GPIO_Init+0x40>
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f003 0303 	and.w	r3, r3, #3
 8002394:	2b02      	cmp	r3, #2
 8002396:	d130      	bne.n	80023fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	2203      	movs	r2, #3
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	43db      	mvns	r3, r3
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	4013      	ands	r3, r2
 80023ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	68da      	ldr	r2, [r3, #12]
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	693a      	ldr	r2, [r7, #16]
 80023be:	4313      	orrs	r3, r2
 80023c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023ce:	2201      	movs	r2, #1
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	fa02 f303 	lsl.w	r3, r2, r3
 80023d6:	43db      	mvns	r3, r3
 80023d8:	693a      	ldr	r2, [r7, #16]
 80023da:	4013      	ands	r3, r2
 80023dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	091b      	lsrs	r3, r3, #4
 80023e4:	f003 0201 	and.w	r2, r3, #1
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	693a      	ldr	r2, [r7, #16]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f003 0303 	and.w	r3, r3, #3
 8002402:	2b03      	cmp	r3, #3
 8002404:	d118      	bne.n	8002438 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800240c:	2201      	movs	r2, #1
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	43db      	mvns	r3, r3
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	4013      	ands	r3, r2
 800241a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	08db      	lsrs	r3, r3, #3
 8002422:	f003 0201 	and.w	r2, r3, #1
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	4313      	orrs	r3, r2
 8002430:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	693a      	ldr	r2, [r7, #16]
 8002436:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f003 0303 	and.w	r3, r3, #3
 8002440:	2b03      	cmp	r3, #3
 8002442:	d017      	beq.n	8002474 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	2203      	movs	r2, #3
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	43db      	mvns	r3, r3
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	4013      	ands	r3, r2
 800245a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	689a      	ldr	r2, [r3, #8]
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	4313      	orrs	r3, r2
 800246c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f003 0303 	and.w	r3, r3, #3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d123      	bne.n	80024c8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	08da      	lsrs	r2, r3, #3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	3208      	adds	r2, #8
 8002488:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800248c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	f003 0307 	and.w	r3, r3, #7
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	220f      	movs	r2, #15
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	43db      	mvns	r3, r3
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	4013      	ands	r3, r2
 80024a2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	691a      	ldr	r2, [r3, #16]
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	f003 0307 	and.w	r3, r3, #7
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	08da      	lsrs	r2, r3, #3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	3208      	adds	r2, #8
 80024c2:	6939      	ldr	r1, [r7, #16]
 80024c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	2203      	movs	r2, #3
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	43db      	mvns	r3, r3
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	4013      	ands	r3, r2
 80024de:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f003 0203 	and.w	r2, r3, #3
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	693a      	ldr	r2, [r7, #16]
 80024fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002504:	2b00      	cmp	r3, #0
 8002506:	f000 80ac 	beq.w	8002662 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800250a:	4b5f      	ldr	r3, [pc, #380]	; (8002688 <HAL_GPIO_Init+0x330>)
 800250c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800250e:	4a5e      	ldr	r2, [pc, #376]	; (8002688 <HAL_GPIO_Init+0x330>)
 8002510:	f043 0301 	orr.w	r3, r3, #1
 8002514:	6613      	str	r3, [r2, #96]	; 0x60
 8002516:	4b5c      	ldr	r3, [pc, #368]	; (8002688 <HAL_GPIO_Init+0x330>)
 8002518:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	60bb      	str	r3, [r7, #8]
 8002520:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002522:	4a5a      	ldr	r2, [pc, #360]	; (800268c <HAL_GPIO_Init+0x334>)
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	089b      	lsrs	r3, r3, #2
 8002528:	3302      	adds	r3, #2
 800252a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800252e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	f003 0303 	and.w	r3, r3, #3
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	220f      	movs	r2, #15
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	43db      	mvns	r3, r3
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	4013      	ands	r3, r2
 8002544:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800254c:	d025      	beq.n	800259a <HAL_GPIO_Init+0x242>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a4f      	ldr	r2, [pc, #316]	; (8002690 <HAL_GPIO_Init+0x338>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d01f      	beq.n	8002596 <HAL_GPIO_Init+0x23e>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a4e      	ldr	r2, [pc, #312]	; (8002694 <HAL_GPIO_Init+0x33c>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d019      	beq.n	8002592 <HAL_GPIO_Init+0x23a>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a4d      	ldr	r2, [pc, #308]	; (8002698 <HAL_GPIO_Init+0x340>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d013      	beq.n	800258e <HAL_GPIO_Init+0x236>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a4c      	ldr	r2, [pc, #304]	; (800269c <HAL_GPIO_Init+0x344>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d00d      	beq.n	800258a <HAL_GPIO_Init+0x232>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a4b      	ldr	r2, [pc, #300]	; (80026a0 <HAL_GPIO_Init+0x348>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d007      	beq.n	8002586 <HAL_GPIO_Init+0x22e>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a4a      	ldr	r2, [pc, #296]	; (80026a4 <HAL_GPIO_Init+0x34c>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d101      	bne.n	8002582 <HAL_GPIO_Init+0x22a>
 800257e:	2306      	movs	r3, #6
 8002580:	e00c      	b.n	800259c <HAL_GPIO_Init+0x244>
 8002582:	2307      	movs	r3, #7
 8002584:	e00a      	b.n	800259c <HAL_GPIO_Init+0x244>
 8002586:	2305      	movs	r3, #5
 8002588:	e008      	b.n	800259c <HAL_GPIO_Init+0x244>
 800258a:	2304      	movs	r3, #4
 800258c:	e006      	b.n	800259c <HAL_GPIO_Init+0x244>
 800258e:	2303      	movs	r3, #3
 8002590:	e004      	b.n	800259c <HAL_GPIO_Init+0x244>
 8002592:	2302      	movs	r3, #2
 8002594:	e002      	b.n	800259c <HAL_GPIO_Init+0x244>
 8002596:	2301      	movs	r3, #1
 8002598:	e000      	b.n	800259c <HAL_GPIO_Init+0x244>
 800259a:	2300      	movs	r3, #0
 800259c:	697a      	ldr	r2, [r7, #20]
 800259e:	f002 0203 	and.w	r2, r2, #3
 80025a2:	0092      	lsls	r2, r2, #2
 80025a4:	4093      	lsls	r3, r2
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80025ac:	4937      	ldr	r1, [pc, #220]	; (800268c <HAL_GPIO_Init+0x334>)
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	089b      	lsrs	r3, r3, #2
 80025b2:	3302      	adds	r3, #2
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025ba:	4b3b      	ldr	r3, [pc, #236]	; (80026a8 <HAL_GPIO_Init+0x350>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	43db      	mvns	r3, r3
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	4013      	ands	r3, r2
 80025c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d003      	beq.n	80025de <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	4313      	orrs	r3, r2
 80025dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80025de:	4a32      	ldr	r2, [pc, #200]	; (80026a8 <HAL_GPIO_Init+0x350>)
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80025e4:	4b30      	ldr	r3, [pc, #192]	; (80026a8 <HAL_GPIO_Init+0x350>)
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	43db      	mvns	r3, r3
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	4013      	ands	r3, r2
 80025f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d003      	beq.n	8002608 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002600:	693a      	ldr	r2, [r7, #16]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	4313      	orrs	r3, r2
 8002606:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002608:	4a27      	ldr	r2, [pc, #156]	; (80026a8 <HAL_GPIO_Init+0x350>)
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800260e:	4b26      	ldr	r3, [pc, #152]	; (80026a8 <HAL_GPIO_Init+0x350>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	43db      	mvns	r3, r3
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	4013      	ands	r3, r2
 800261c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d003      	beq.n	8002632 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800262a:	693a      	ldr	r2, [r7, #16]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	4313      	orrs	r3, r2
 8002630:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002632:	4a1d      	ldr	r2, [pc, #116]	; (80026a8 <HAL_GPIO_Init+0x350>)
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002638:	4b1b      	ldr	r3, [pc, #108]	; (80026a8 <HAL_GPIO_Init+0x350>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	43db      	mvns	r3, r3
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	4013      	ands	r3, r2
 8002646:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d003      	beq.n	800265c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002654:	693a      	ldr	r2, [r7, #16]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	4313      	orrs	r3, r2
 800265a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800265c:	4a12      	ldr	r2, [pc, #72]	; (80026a8 <HAL_GPIO_Init+0x350>)
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	3301      	adds	r3, #1
 8002666:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	fa22 f303 	lsr.w	r3, r2, r3
 8002672:	2b00      	cmp	r3, #0
 8002674:	f47f ae78 	bne.w	8002368 <HAL_GPIO_Init+0x10>
  }
}
 8002678:	bf00      	nop
 800267a:	bf00      	nop
 800267c:	371c      	adds	r7, #28
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	40021000 	.word	0x40021000
 800268c:	40010000 	.word	0x40010000
 8002690:	48000400 	.word	0x48000400
 8002694:	48000800 	.word	0x48000800
 8002698:	48000c00 	.word	0x48000c00
 800269c:	48001000 	.word	0x48001000
 80026a0:	48001400 	.word	0x48001400
 80026a4:	48001800 	.word	0x48001800
 80026a8:	40010400 	.word	0x40010400

080026ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	460b      	mov	r3, r1
 80026b6:	807b      	strh	r3, [r7, #2]
 80026b8:	4613      	mov	r3, r2
 80026ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026bc:	787b      	ldrb	r3, [r7, #1]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d003      	beq.n	80026ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026c2:	887a      	ldrh	r2, [r7, #2]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80026c8:	e002      	b.n	80026d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80026ca:	887a      	ldrh	r2, [r7, #2]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80026e0:	4b04      	ldr	r3, [pc, #16]	; (80026f4 <HAL_PWREx_GetVoltageRange+0x18>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	40007000 	.word	0x40007000

080026f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002706:	d130      	bne.n	800276a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002708:	4b23      	ldr	r3, [pc, #140]	; (8002798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002710:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002714:	d038      	beq.n	8002788 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002716:	4b20      	ldr	r3, [pc, #128]	; (8002798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800271e:	4a1e      	ldr	r2, [pc, #120]	; (8002798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002720:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002724:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002726:	4b1d      	ldr	r3, [pc, #116]	; (800279c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2232      	movs	r2, #50	; 0x32
 800272c:	fb02 f303 	mul.w	r3, r2, r3
 8002730:	4a1b      	ldr	r2, [pc, #108]	; (80027a0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002732:	fba2 2303 	umull	r2, r3, r2, r3
 8002736:	0c9b      	lsrs	r3, r3, #18
 8002738:	3301      	adds	r3, #1
 800273a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800273c:	e002      	b.n	8002744 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	3b01      	subs	r3, #1
 8002742:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002744:	4b14      	ldr	r3, [pc, #80]	; (8002798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002746:	695b      	ldr	r3, [r3, #20]
 8002748:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800274c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002750:	d102      	bne.n	8002758 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1f2      	bne.n	800273e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002758:	4b0f      	ldr	r3, [pc, #60]	; (8002798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800275a:	695b      	ldr	r3, [r3, #20]
 800275c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002760:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002764:	d110      	bne.n	8002788 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e00f      	b.n	800278a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800276a:	4b0b      	ldr	r3, [pc, #44]	; (8002798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002772:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002776:	d007      	beq.n	8002788 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002778:	4b07      	ldr	r3, [pc, #28]	; (8002798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002780:	4a05      	ldr	r2, [pc, #20]	; (8002798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002782:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002786:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3714      	adds	r7, #20
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	40007000 	.word	0x40007000
 800279c:	20000000 	.word	0x20000000
 80027a0:	431bde83 	.word	0x431bde83

080027a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b088      	sub	sp, #32
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d101      	bne.n	80027b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e3ca      	b.n	8002f4c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027b6:	4b97      	ldr	r3, [pc, #604]	; (8002a14 <HAL_RCC_OscConfig+0x270>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f003 030c 	and.w	r3, r3, #12
 80027be:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027c0:	4b94      	ldr	r3, [pc, #592]	; (8002a14 <HAL_RCC_OscConfig+0x270>)
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	f003 0303 	and.w	r3, r3, #3
 80027c8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0310 	and.w	r3, r3, #16
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	f000 80e4 	beq.w	80029a0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d007      	beq.n	80027ee <HAL_RCC_OscConfig+0x4a>
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	2b0c      	cmp	r3, #12
 80027e2:	f040 808b 	bne.w	80028fc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	f040 8087 	bne.w	80028fc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027ee:	4b89      	ldr	r3, [pc, #548]	; (8002a14 <HAL_RCC_OscConfig+0x270>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d005      	beq.n	8002806 <HAL_RCC_OscConfig+0x62>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e3a2      	b.n	8002f4c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a1a      	ldr	r2, [r3, #32]
 800280a:	4b82      	ldr	r3, [pc, #520]	; (8002a14 <HAL_RCC_OscConfig+0x270>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0308 	and.w	r3, r3, #8
 8002812:	2b00      	cmp	r3, #0
 8002814:	d004      	beq.n	8002820 <HAL_RCC_OscConfig+0x7c>
 8002816:	4b7f      	ldr	r3, [pc, #508]	; (8002a14 <HAL_RCC_OscConfig+0x270>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800281e:	e005      	b.n	800282c <HAL_RCC_OscConfig+0x88>
 8002820:	4b7c      	ldr	r3, [pc, #496]	; (8002a14 <HAL_RCC_OscConfig+0x270>)
 8002822:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002826:	091b      	lsrs	r3, r3, #4
 8002828:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800282c:	4293      	cmp	r3, r2
 800282e:	d223      	bcs.n	8002878 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	4618      	mov	r0, r3
 8002836:	f000 fd55 	bl	80032e4 <RCC_SetFlashLatencyFromMSIRange>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e383      	b.n	8002f4c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002844:	4b73      	ldr	r3, [pc, #460]	; (8002a14 <HAL_RCC_OscConfig+0x270>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a72      	ldr	r2, [pc, #456]	; (8002a14 <HAL_RCC_OscConfig+0x270>)
 800284a:	f043 0308 	orr.w	r3, r3, #8
 800284e:	6013      	str	r3, [r2, #0]
 8002850:	4b70      	ldr	r3, [pc, #448]	; (8002a14 <HAL_RCC_OscConfig+0x270>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a1b      	ldr	r3, [r3, #32]
 800285c:	496d      	ldr	r1, [pc, #436]	; (8002a14 <HAL_RCC_OscConfig+0x270>)
 800285e:	4313      	orrs	r3, r2
 8002860:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002862:	4b6c      	ldr	r3, [pc, #432]	; (8002a14 <HAL_RCC_OscConfig+0x270>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	69db      	ldr	r3, [r3, #28]
 800286e:	021b      	lsls	r3, r3, #8
 8002870:	4968      	ldr	r1, [pc, #416]	; (8002a14 <HAL_RCC_OscConfig+0x270>)
 8002872:	4313      	orrs	r3, r2
 8002874:	604b      	str	r3, [r1, #4]
 8002876:	e025      	b.n	80028c4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002878:	4b66      	ldr	r3, [pc, #408]	; (8002a14 <HAL_RCC_OscConfig+0x270>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a65      	ldr	r2, [pc, #404]	; (8002a14 <HAL_RCC_OscConfig+0x270>)
 800287e:	f043 0308 	orr.w	r3, r3, #8
 8002882:	6013      	str	r3, [r2, #0]
 8002884:	4b63      	ldr	r3, [pc, #396]	; (8002a14 <HAL_RCC_OscConfig+0x270>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a1b      	ldr	r3, [r3, #32]
 8002890:	4960      	ldr	r1, [pc, #384]	; (8002a14 <HAL_RCC_OscConfig+0x270>)
 8002892:	4313      	orrs	r3, r2
 8002894:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002896:	4b5f      	ldr	r3, [pc, #380]	; (8002a14 <HAL_RCC_OscConfig+0x270>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	69db      	ldr	r3, [r3, #28]
 80028a2:	021b      	lsls	r3, r3, #8
 80028a4:	495b      	ldr	r1, [pc, #364]	; (8002a14 <HAL_RCC_OscConfig+0x270>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d109      	bne.n	80028c4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a1b      	ldr	r3, [r3, #32]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f000 fd15 	bl	80032e4 <RCC_SetFlashLatencyFromMSIRange>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e343      	b.n	8002f4c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028c4:	f000 fc4a 	bl	800315c <HAL_RCC_GetSysClockFreq>
 80028c8:	4602      	mov	r2, r0
 80028ca:	4b52      	ldr	r3, [pc, #328]	; (8002a14 <HAL_RCC_OscConfig+0x270>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	091b      	lsrs	r3, r3, #4
 80028d0:	f003 030f 	and.w	r3, r3, #15
 80028d4:	4950      	ldr	r1, [pc, #320]	; (8002a18 <HAL_RCC_OscConfig+0x274>)
 80028d6:	5ccb      	ldrb	r3, [r1, r3]
 80028d8:	f003 031f 	and.w	r3, r3, #31
 80028dc:	fa22 f303 	lsr.w	r3, r2, r3
 80028e0:	4a4e      	ldr	r2, [pc, #312]	; (8002a1c <HAL_RCC_OscConfig+0x278>)
 80028e2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80028e4:	4b4e      	ldr	r3, [pc, #312]	; (8002a20 <HAL_RCC_OscConfig+0x27c>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7fe f923 	bl	8000b34 <HAL_InitTick>
 80028ee:	4603      	mov	r3, r0
 80028f0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80028f2:	7bfb      	ldrb	r3, [r7, #15]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d052      	beq.n	800299e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80028f8:	7bfb      	ldrb	r3, [r7, #15]
 80028fa:	e327      	b.n	8002f4c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d032      	beq.n	800296a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002904:	4b43      	ldr	r3, [pc, #268]	; (8002a14 <HAL_RCC_OscConfig+0x270>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a42      	ldr	r2, [pc, #264]	; (8002a14 <HAL_RCC_OscConfig+0x270>)
 800290a:	f043 0301 	orr.w	r3, r3, #1
 800290e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002910:	f7fe f960 	bl	8000bd4 <HAL_GetTick>
 8002914:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002916:	e008      	b.n	800292a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002918:	f7fe f95c 	bl	8000bd4 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e310      	b.n	8002f4c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800292a:	4b3a      	ldr	r3, [pc, #232]	; (8002a14 <HAL_RCC_OscConfig+0x270>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d0f0      	beq.n	8002918 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002936:	4b37      	ldr	r3, [pc, #220]	; (8002a14 <HAL_RCC_OscConfig+0x270>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a36      	ldr	r2, [pc, #216]	; (8002a14 <HAL_RCC_OscConfig+0x270>)
 800293c:	f043 0308 	orr.w	r3, r3, #8
 8002940:	6013      	str	r3, [r2, #0]
 8002942:	4b34      	ldr	r3, [pc, #208]	; (8002a14 <HAL_RCC_OscConfig+0x270>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a1b      	ldr	r3, [r3, #32]
 800294e:	4931      	ldr	r1, [pc, #196]	; (8002a14 <HAL_RCC_OscConfig+0x270>)
 8002950:	4313      	orrs	r3, r2
 8002952:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002954:	4b2f      	ldr	r3, [pc, #188]	; (8002a14 <HAL_RCC_OscConfig+0x270>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	69db      	ldr	r3, [r3, #28]
 8002960:	021b      	lsls	r3, r3, #8
 8002962:	492c      	ldr	r1, [pc, #176]	; (8002a14 <HAL_RCC_OscConfig+0x270>)
 8002964:	4313      	orrs	r3, r2
 8002966:	604b      	str	r3, [r1, #4]
 8002968:	e01a      	b.n	80029a0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800296a:	4b2a      	ldr	r3, [pc, #168]	; (8002a14 <HAL_RCC_OscConfig+0x270>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a29      	ldr	r2, [pc, #164]	; (8002a14 <HAL_RCC_OscConfig+0x270>)
 8002970:	f023 0301 	bic.w	r3, r3, #1
 8002974:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002976:	f7fe f92d 	bl	8000bd4 <HAL_GetTick>
 800297a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800297c:	e008      	b.n	8002990 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800297e:	f7fe f929 	bl	8000bd4 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d901      	bls.n	8002990 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e2dd      	b.n	8002f4c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002990:	4b20      	ldr	r3, [pc, #128]	; (8002a14 <HAL_RCC_OscConfig+0x270>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0302 	and.w	r3, r3, #2
 8002998:	2b00      	cmp	r3, #0
 800299a:	d1f0      	bne.n	800297e <HAL_RCC_OscConfig+0x1da>
 800299c:	e000      	b.n	80029a0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800299e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d074      	beq.n	8002a96 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	2b08      	cmp	r3, #8
 80029b0:	d005      	beq.n	80029be <HAL_RCC_OscConfig+0x21a>
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	2b0c      	cmp	r3, #12
 80029b6:	d10e      	bne.n	80029d6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	2b03      	cmp	r3, #3
 80029bc:	d10b      	bne.n	80029d6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029be:	4b15      	ldr	r3, [pc, #84]	; (8002a14 <HAL_RCC_OscConfig+0x270>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d064      	beq.n	8002a94 <HAL_RCC_OscConfig+0x2f0>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d160      	bne.n	8002a94 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e2ba      	b.n	8002f4c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029de:	d106      	bne.n	80029ee <HAL_RCC_OscConfig+0x24a>
 80029e0:	4b0c      	ldr	r3, [pc, #48]	; (8002a14 <HAL_RCC_OscConfig+0x270>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a0b      	ldr	r2, [pc, #44]	; (8002a14 <HAL_RCC_OscConfig+0x270>)
 80029e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ea:	6013      	str	r3, [r2, #0]
 80029ec:	e026      	b.n	8002a3c <HAL_RCC_OscConfig+0x298>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029f6:	d115      	bne.n	8002a24 <HAL_RCC_OscConfig+0x280>
 80029f8:	4b06      	ldr	r3, [pc, #24]	; (8002a14 <HAL_RCC_OscConfig+0x270>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a05      	ldr	r2, [pc, #20]	; (8002a14 <HAL_RCC_OscConfig+0x270>)
 80029fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a02:	6013      	str	r3, [r2, #0]
 8002a04:	4b03      	ldr	r3, [pc, #12]	; (8002a14 <HAL_RCC_OscConfig+0x270>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a02      	ldr	r2, [pc, #8]	; (8002a14 <HAL_RCC_OscConfig+0x270>)
 8002a0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a0e:	6013      	str	r3, [r2, #0]
 8002a10:	e014      	b.n	8002a3c <HAL_RCC_OscConfig+0x298>
 8002a12:	bf00      	nop
 8002a14:	40021000 	.word	0x40021000
 8002a18:	08005358 	.word	0x08005358
 8002a1c:	20000000 	.word	0x20000000
 8002a20:	20000004 	.word	0x20000004
 8002a24:	4ba0      	ldr	r3, [pc, #640]	; (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a9f      	ldr	r2, [pc, #636]	; (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002a2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a2e:	6013      	str	r3, [r2, #0]
 8002a30:	4b9d      	ldr	r3, [pc, #628]	; (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a9c      	ldr	r2, [pc, #624]	; (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002a36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d013      	beq.n	8002a6c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a44:	f7fe f8c6 	bl	8000bd4 <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a4c:	f7fe f8c2 	bl	8000bd4 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b64      	cmp	r3, #100	; 0x64
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e276      	b.n	8002f4c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a5e:	4b92      	ldr	r3, [pc, #584]	; (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d0f0      	beq.n	8002a4c <HAL_RCC_OscConfig+0x2a8>
 8002a6a:	e014      	b.n	8002a96 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a6c:	f7fe f8b2 	bl	8000bd4 <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a72:	e008      	b.n	8002a86 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a74:	f7fe f8ae 	bl	8000bd4 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b64      	cmp	r3, #100	; 0x64
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e262      	b.n	8002f4c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a86:	4b88      	ldr	r3, [pc, #544]	; (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1f0      	bne.n	8002a74 <HAL_RCC_OscConfig+0x2d0>
 8002a92:	e000      	b.n	8002a96 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d060      	beq.n	8002b64 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	2b04      	cmp	r3, #4
 8002aa6:	d005      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x310>
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	2b0c      	cmp	r3, #12
 8002aac:	d119      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d116      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ab4:	4b7c      	ldr	r3, [pc, #496]	; (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d005      	beq.n	8002acc <HAL_RCC_OscConfig+0x328>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d101      	bne.n	8002acc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e23f      	b.n	8002f4c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002acc:	4b76      	ldr	r3, [pc, #472]	; (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	061b      	lsls	r3, r3, #24
 8002ada:	4973      	ldr	r1, [pc, #460]	; (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ae0:	e040      	b.n	8002b64 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d023      	beq.n	8002b32 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002aea:	4b6f      	ldr	r3, [pc, #444]	; (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a6e      	ldr	r2, [pc, #440]	; (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002af0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002af4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af6:	f7fe f86d 	bl	8000bd4 <HAL_GetTick>
 8002afa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002afc:	e008      	b.n	8002b10 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002afe:	f7fe f869 	bl	8000bd4 <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d901      	bls.n	8002b10 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e21d      	b.n	8002f4c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b10:	4b65      	ldr	r3, [pc, #404]	; (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d0f0      	beq.n	8002afe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b1c:	4b62      	ldr	r3, [pc, #392]	; (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	061b      	lsls	r3, r3, #24
 8002b2a:	495f      	ldr	r1, [pc, #380]	; (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	604b      	str	r3, [r1, #4]
 8002b30:	e018      	b.n	8002b64 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b32:	4b5d      	ldr	r3, [pc, #372]	; (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a5c      	ldr	r2, [pc, #368]	; (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002b38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b3e:	f7fe f849 	bl	8000bd4 <HAL_GetTick>
 8002b42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b44:	e008      	b.n	8002b58 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b46:	f7fe f845 	bl	8000bd4 <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d901      	bls.n	8002b58 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e1f9      	b.n	8002f4c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b58:	4b53      	ldr	r3, [pc, #332]	; (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d1f0      	bne.n	8002b46 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0308 	and.w	r3, r3, #8
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d03c      	beq.n	8002bea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	695b      	ldr	r3, [r3, #20]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d01c      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b78:	4b4b      	ldr	r3, [pc, #300]	; (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002b7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b7e:	4a4a      	ldr	r2, [pc, #296]	; (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002b80:	f043 0301 	orr.w	r3, r3, #1
 8002b84:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b88:	f7fe f824 	bl	8000bd4 <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b90:	f7fe f820 	bl	8000bd4 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e1d4      	b.n	8002f4c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ba2:	4b41      	ldr	r3, [pc, #260]	; (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002ba4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ba8:	f003 0302 	and.w	r3, r3, #2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d0ef      	beq.n	8002b90 <HAL_RCC_OscConfig+0x3ec>
 8002bb0:	e01b      	b.n	8002bea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bb2:	4b3d      	ldr	r3, [pc, #244]	; (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002bb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bb8:	4a3b      	ldr	r2, [pc, #236]	; (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002bba:	f023 0301 	bic.w	r3, r3, #1
 8002bbe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc2:	f7fe f807 	bl	8000bd4 <HAL_GetTick>
 8002bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bc8:	e008      	b.n	8002bdc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bca:	f7fe f803 	bl	8000bd4 <HAL_GetTick>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d901      	bls.n	8002bdc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e1b7      	b.n	8002f4c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bdc:	4b32      	ldr	r3, [pc, #200]	; (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002bde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1ef      	bne.n	8002bca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0304 	and.w	r3, r3, #4
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f000 80a6 	beq.w	8002d44 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002bfc:	4b2a      	ldr	r3, [pc, #168]	; (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d10d      	bne.n	8002c24 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c08:	4b27      	ldr	r3, [pc, #156]	; (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c0c:	4a26      	ldr	r2, [pc, #152]	; (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002c0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c12:	6593      	str	r3, [r2, #88]	; 0x58
 8002c14:	4b24      	ldr	r3, [pc, #144]	; (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c1c:	60bb      	str	r3, [r7, #8]
 8002c1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c20:	2301      	movs	r3, #1
 8002c22:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c24:	4b21      	ldr	r3, [pc, #132]	; (8002cac <HAL_RCC_OscConfig+0x508>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d118      	bne.n	8002c62 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c30:	4b1e      	ldr	r3, [pc, #120]	; (8002cac <HAL_RCC_OscConfig+0x508>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a1d      	ldr	r2, [pc, #116]	; (8002cac <HAL_RCC_OscConfig+0x508>)
 8002c36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c3a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c3c:	f7fd ffca 	bl	8000bd4 <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c44:	f7fd ffc6 	bl	8000bd4 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e17a      	b.n	8002f4c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c56:	4b15      	ldr	r3, [pc, #84]	; (8002cac <HAL_RCC_OscConfig+0x508>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d0f0      	beq.n	8002c44 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d108      	bne.n	8002c7c <HAL_RCC_OscConfig+0x4d8>
 8002c6a:	4b0f      	ldr	r3, [pc, #60]	; (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c70:	4a0d      	ldr	r2, [pc, #52]	; (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002c72:	f043 0301 	orr.w	r3, r3, #1
 8002c76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c7a:	e029      	b.n	8002cd0 <HAL_RCC_OscConfig+0x52c>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	2b05      	cmp	r3, #5
 8002c82:	d115      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x50c>
 8002c84:	4b08      	ldr	r3, [pc, #32]	; (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c8a:	4a07      	ldr	r2, [pc, #28]	; (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002c8c:	f043 0304 	orr.w	r3, r3, #4
 8002c90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c94:	4b04      	ldr	r3, [pc, #16]	; (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c9a:	4a03      	ldr	r2, [pc, #12]	; (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002c9c:	f043 0301 	orr.w	r3, r3, #1
 8002ca0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ca4:	e014      	b.n	8002cd0 <HAL_RCC_OscConfig+0x52c>
 8002ca6:	bf00      	nop
 8002ca8:	40021000 	.word	0x40021000
 8002cac:	40007000 	.word	0x40007000
 8002cb0:	4b9c      	ldr	r3, [pc, #624]	; (8002f24 <HAL_RCC_OscConfig+0x780>)
 8002cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb6:	4a9b      	ldr	r2, [pc, #620]	; (8002f24 <HAL_RCC_OscConfig+0x780>)
 8002cb8:	f023 0301 	bic.w	r3, r3, #1
 8002cbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cc0:	4b98      	ldr	r3, [pc, #608]	; (8002f24 <HAL_RCC_OscConfig+0x780>)
 8002cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc6:	4a97      	ldr	r2, [pc, #604]	; (8002f24 <HAL_RCC_OscConfig+0x780>)
 8002cc8:	f023 0304 	bic.w	r3, r3, #4
 8002ccc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d016      	beq.n	8002d06 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd8:	f7fd ff7c 	bl	8000bd4 <HAL_GetTick>
 8002cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cde:	e00a      	b.n	8002cf6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ce0:	f7fd ff78 	bl	8000bd4 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e12a      	b.n	8002f4c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cf6:	4b8b      	ldr	r3, [pc, #556]	; (8002f24 <HAL_RCC_OscConfig+0x780>)
 8002cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d0ed      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x53c>
 8002d04:	e015      	b.n	8002d32 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d06:	f7fd ff65 	bl	8000bd4 <HAL_GetTick>
 8002d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d0c:	e00a      	b.n	8002d24 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d0e:	f7fd ff61 	bl	8000bd4 <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d901      	bls.n	8002d24 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e113      	b.n	8002f4c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d24:	4b7f      	ldr	r3, [pc, #508]	; (8002f24 <HAL_RCC_OscConfig+0x780>)
 8002d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1ed      	bne.n	8002d0e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d32:	7ffb      	ldrb	r3, [r7, #31]
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d105      	bne.n	8002d44 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d38:	4b7a      	ldr	r3, [pc, #488]	; (8002f24 <HAL_RCC_OscConfig+0x780>)
 8002d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d3c:	4a79      	ldr	r2, [pc, #484]	; (8002f24 <HAL_RCC_OscConfig+0x780>)
 8002d3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d42:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	f000 80fe 	beq.w	8002f4a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	f040 80d0 	bne.w	8002ef8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002d58:	4b72      	ldr	r3, [pc, #456]	; (8002f24 <HAL_RCC_OscConfig+0x780>)
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	f003 0203 	and.w	r2, r3, #3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d130      	bne.n	8002dce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d76:	3b01      	subs	r3, #1
 8002d78:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d127      	bne.n	8002dce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d88:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d11f      	bne.n	8002dce <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d98:	2a07      	cmp	r2, #7
 8002d9a:	bf14      	ite	ne
 8002d9c:	2201      	movne	r2, #1
 8002d9e:	2200      	moveq	r2, #0
 8002da0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d113      	bne.n	8002dce <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db0:	085b      	lsrs	r3, r3, #1
 8002db2:	3b01      	subs	r3, #1
 8002db4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d109      	bne.n	8002dce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc4:	085b      	lsrs	r3, r3, #1
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d06e      	beq.n	8002eac <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	2b0c      	cmp	r3, #12
 8002dd2:	d069      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002dd4:	4b53      	ldr	r3, [pc, #332]	; (8002f24 <HAL_RCC_OscConfig+0x780>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d105      	bne.n	8002dec <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002de0:	4b50      	ldr	r3, [pc, #320]	; (8002f24 <HAL_RCC_OscConfig+0x780>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e0ad      	b.n	8002f4c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002df0:	4b4c      	ldr	r3, [pc, #304]	; (8002f24 <HAL_RCC_OscConfig+0x780>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a4b      	ldr	r2, [pc, #300]	; (8002f24 <HAL_RCC_OscConfig+0x780>)
 8002df6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dfa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002dfc:	f7fd feea 	bl	8000bd4 <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e02:	e008      	b.n	8002e16 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e04:	f7fd fee6 	bl	8000bd4 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e09a      	b.n	8002f4c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e16:	4b43      	ldr	r3, [pc, #268]	; (8002f24 <HAL_RCC_OscConfig+0x780>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1f0      	bne.n	8002e04 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e22:	4b40      	ldr	r3, [pc, #256]	; (8002f24 <HAL_RCC_OscConfig+0x780>)
 8002e24:	68da      	ldr	r2, [r3, #12]
 8002e26:	4b40      	ldr	r3, [pc, #256]	; (8002f28 <HAL_RCC_OscConfig+0x784>)
 8002e28:	4013      	ands	r3, r2
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002e32:	3a01      	subs	r2, #1
 8002e34:	0112      	lsls	r2, r2, #4
 8002e36:	4311      	orrs	r1, r2
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e3c:	0212      	lsls	r2, r2, #8
 8002e3e:	4311      	orrs	r1, r2
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002e44:	0852      	lsrs	r2, r2, #1
 8002e46:	3a01      	subs	r2, #1
 8002e48:	0552      	lsls	r2, r2, #21
 8002e4a:	4311      	orrs	r1, r2
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002e50:	0852      	lsrs	r2, r2, #1
 8002e52:	3a01      	subs	r2, #1
 8002e54:	0652      	lsls	r2, r2, #25
 8002e56:	4311      	orrs	r1, r2
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e5c:	0912      	lsrs	r2, r2, #4
 8002e5e:	0452      	lsls	r2, r2, #17
 8002e60:	430a      	orrs	r2, r1
 8002e62:	4930      	ldr	r1, [pc, #192]	; (8002f24 <HAL_RCC_OscConfig+0x780>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002e68:	4b2e      	ldr	r3, [pc, #184]	; (8002f24 <HAL_RCC_OscConfig+0x780>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a2d      	ldr	r2, [pc, #180]	; (8002f24 <HAL_RCC_OscConfig+0x780>)
 8002e6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e72:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e74:	4b2b      	ldr	r3, [pc, #172]	; (8002f24 <HAL_RCC_OscConfig+0x780>)
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	4a2a      	ldr	r2, [pc, #168]	; (8002f24 <HAL_RCC_OscConfig+0x780>)
 8002e7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e7e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e80:	f7fd fea8 	bl	8000bd4 <HAL_GetTick>
 8002e84:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e86:	e008      	b.n	8002e9a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e88:	f7fd fea4 	bl	8000bd4 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e058      	b.n	8002f4c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e9a:	4b22      	ldr	r3, [pc, #136]	; (8002f24 <HAL_RCC_OscConfig+0x780>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d0f0      	beq.n	8002e88 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ea6:	e050      	b.n	8002f4a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e04f      	b.n	8002f4c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eac:	4b1d      	ldr	r3, [pc, #116]	; (8002f24 <HAL_RCC_OscConfig+0x780>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d148      	bne.n	8002f4a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002eb8:	4b1a      	ldr	r3, [pc, #104]	; (8002f24 <HAL_RCC_OscConfig+0x780>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a19      	ldr	r2, [pc, #100]	; (8002f24 <HAL_RCC_OscConfig+0x780>)
 8002ebe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ec2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ec4:	4b17      	ldr	r3, [pc, #92]	; (8002f24 <HAL_RCC_OscConfig+0x780>)
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	4a16      	ldr	r2, [pc, #88]	; (8002f24 <HAL_RCC_OscConfig+0x780>)
 8002eca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ece:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ed0:	f7fd fe80 	bl	8000bd4 <HAL_GetTick>
 8002ed4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ed6:	e008      	b.n	8002eea <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ed8:	f7fd fe7c 	bl	8000bd4 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e030      	b.n	8002f4c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eea:	4b0e      	ldr	r3, [pc, #56]	; (8002f24 <HAL_RCC_OscConfig+0x780>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d0f0      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x734>
 8002ef6:	e028      	b.n	8002f4a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	2b0c      	cmp	r3, #12
 8002efc:	d023      	beq.n	8002f46 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002efe:	4b09      	ldr	r3, [pc, #36]	; (8002f24 <HAL_RCC_OscConfig+0x780>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a08      	ldr	r2, [pc, #32]	; (8002f24 <HAL_RCC_OscConfig+0x780>)
 8002f04:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f0a:	f7fd fe63 	bl	8000bd4 <HAL_GetTick>
 8002f0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f10:	e00c      	b.n	8002f2c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f12:	f7fd fe5f 	bl	8000bd4 <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d905      	bls.n	8002f2c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e013      	b.n	8002f4c <HAL_RCC_OscConfig+0x7a8>
 8002f24:	40021000 	.word	0x40021000
 8002f28:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f2c:	4b09      	ldr	r3, [pc, #36]	; (8002f54 <HAL_RCC_OscConfig+0x7b0>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1ec      	bne.n	8002f12 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002f38:	4b06      	ldr	r3, [pc, #24]	; (8002f54 <HAL_RCC_OscConfig+0x7b0>)
 8002f3a:	68da      	ldr	r2, [r3, #12]
 8002f3c:	4905      	ldr	r1, [pc, #20]	; (8002f54 <HAL_RCC_OscConfig+0x7b0>)
 8002f3e:	4b06      	ldr	r3, [pc, #24]	; (8002f58 <HAL_RCC_OscConfig+0x7b4>)
 8002f40:	4013      	ands	r3, r2
 8002f42:	60cb      	str	r3, [r1, #12]
 8002f44:	e001      	b.n	8002f4a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e000      	b.n	8002f4c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3720      	adds	r7, #32
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	40021000 	.word	0x40021000
 8002f58:	feeefffc 	.word	0xfeeefffc

08002f5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d101      	bne.n	8002f70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e0e7      	b.n	8003140 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f70:	4b75      	ldr	r3, [pc, #468]	; (8003148 <HAL_RCC_ClockConfig+0x1ec>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0307 	and.w	r3, r3, #7
 8002f78:	683a      	ldr	r2, [r7, #0]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d910      	bls.n	8002fa0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f7e:	4b72      	ldr	r3, [pc, #456]	; (8003148 <HAL_RCC_ClockConfig+0x1ec>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f023 0207 	bic.w	r2, r3, #7
 8002f86:	4970      	ldr	r1, [pc, #448]	; (8003148 <HAL_RCC_ClockConfig+0x1ec>)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f8e:	4b6e      	ldr	r3, [pc, #440]	; (8003148 <HAL_RCC_ClockConfig+0x1ec>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0307 	and.w	r3, r3, #7
 8002f96:	683a      	ldr	r2, [r7, #0]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d001      	beq.n	8002fa0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e0cf      	b.n	8003140 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d010      	beq.n	8002fce <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689a      	ldr	r2, [r3, #8]
 8002fb0:	4b66      	ldr	r3, [pc, #408]	; (800314c <HAL_RCC_ClockConfig+0x1f0>)
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d908      	bls.n	8002fce <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fbc:	4b63      	ldr	r3, [pc, #396]	; (800314c <HAL_RCC_ClockConfig+0x1f0>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	4960      	ldr	r1, [pc, #384]	; (800314c <HAL_RCC_ClockConfig+0x1f0>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d04c      	beq.n	8003074 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	2b03      	cmp	r3, #3
 8002fe0:	d107      	bne.n	8002ff2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fe2:	4b5a      	ldr	r3, [pc, #360]	; (800314c <HAL_RCC_ClockConfig+0x1f0>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d121      	bne.n	8003032 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e0a6      	b.n	8003140 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d107      	bne.n	800300a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ffa:	4b54      	ldr	r3, [pc, #336]	; (800314c <HAL_RCC_ClockConfig+0x1f0>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d115      	bne.n	8003032 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e09a      	b.n	8003140 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d107      	bne.n	8003022 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003012:	4b4e      	ldr	r3, [pc, #312]	; (800314c <HAL_RCC_ClockConfig+0x1f0>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d109      	bne.n	8003032 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e08e      	b.n	8003140 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003022:	4b4a      	ldr	r3, [pc, #296]	; (800314c <HAL_RCC_ClockConfig+0x1f0>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800302a:	2b00      	cmp	r3, #0
 800302c:	d101      	bne.n	8003032 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e086      	b.n	8003140 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003032:	4b46      	ldr	r3, [pc, #280]	; (800314c <HAL_RCC_ClockConfig+0x1f0>)
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f023 0203 	bic.w	r2, r3, #3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	4943      	ldr	r1, [pc, #268]	; (800314c <HAL_RCC_ClockConfig+0x1f0>)
 8003040:	4313      	orrs	r3, r2
 8003042:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003044:	f7fd fdc6 	bl	8000bd4 <HAL_GetTick>
 8003048:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800304a:	e00a      	b.n	8003062 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800304c:	f7fd fdc2 	bl	8000bd4 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	f241 3288 	movw	r2, #5000	; 0x1388
 800305a:	4293      	cmp	r3, r2
 800305c:	d901      	bls.n	8003062 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e06e      	b.n	8003140 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003062:	4b3a      	ldr	r3, [pc, #232]	; (800314c <HAL_RCC_ClockConfig+0x1f0>)
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f003 020c 	and.w	r2, r3, #12
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	429a      	cmp	r2, r3
 8003072:	d1eb      	bne.n	800304c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0302 	and.w	r3, r3, #2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d010      	beq.n	80030a2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689a      	ldr	r2, [r3, #8]
 8003084:	4b31      	ldr	r3, [pc, #196]	; (800314c <HAL_RCC_ClockConfig+0x1f0>)
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800308c:	429a      	cmp	r2, r3
 800308e:	d208      	bcs.n	80030a2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003090:	4b2e      	ldr	r3, [pc, #184]	; (800314c <HAL_RCC_ClockConfig+0x1f0>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	492b      	ldr	r1, [pc, #172]	; (800314c <HAL_RCC_ClockConfig+0x1f0>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030a2:	4b29      	ldr	r3, [pc, #164]	; (8003148 <HAL_RCC_ClockConfig+0x1ec>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0307 	and.w	r3, r3, #7
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d210      	bcs.n	80030d2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030b0:	4b25      	ldr	r3, [pc, #148]	; (8003148 <HAL_RCC_ClockConfig+0x1ec>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f023 0207 	bic.w	r2, r3, #7
 80030b8:	4923      	ldr	r1, [pc, #140]	; (8003148 <HAL_RCC_ClockConfig+0x1ec>)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	4313      	orrs	r3, r2
 80030be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030c0:	4b21      	ldr	r3, [pc, #132]	; (8003148 <HAL_RCC_ClockConfig+0x1ec>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0307 	and.w	r3, r3, #7
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d001      	beq.n	80030d2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e036      	b.n	8003140 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0304 	and.w	r3, r3, #4
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d008      	beq.n	80030f0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030de:	4b1b      	ldr	r3, [pc, #108]	; (800314c <HAL_RCC_ClockConfig+0x1f0>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	4918      	ldr	r1, [pc, #96]	; (800314c <HAL_RCC_ClockConfig+0x1f0>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0308 	and.w	r3, r3, #8
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d009      	beq.n	8003110 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030fc:	4b13      	ldr	r3, [pc, #76]	; (800314c <HAL_RCC_ClockConfig+0x1f0>)
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	00db      	lsls	r3, r3, #3
 800310a:	4910      	ldr	r1, [pc, #64]	; (800314c <HAL_RCC_ClockConfig+0x1f0>)
 800310c:	4313      	orrs	r3, r2
 800310e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003110:	f000 f824 	bl	800315c <HAL_RCC_GetSysClockFreq>
 8003114:	4602      	mov	r2, r0
 8003116:	4b0d      	ldr	r3, [pc, #52]	; (800314c <HAL_RCC_ClockConfig+0x1f0>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	091b      	lsrs	r3, r3, #4
 800311c:	f003 030f 	and.w	r3, r3, #15
 8003120:	490b      	ldr	r1, [pc, #44]	; (8003150 <HAL_RCC_ClockConfig+0x1f4>)
 8003122:	5ccb      	ldrb	r3, [r1, r3]
 8003124:	f003 031f 	and.w	r3, r3, #31
 8003128:	fa22 f303 	lsr.w	r3, r2, r3
 800312c:	4a09      	ldr	r2, [pc, #36]	; (8003154 <HAL_RCC_ClockConfig+0x1f8>)
 800312e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003130:	4b09      	ldr	r3, [pc, #36]	; (8003158 <HAL_RCC_ClockConfig+0x1fc>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4618      	mov	r0, r3
 8003136:	f7fd fcfd 	bl	8000b34 <HAL_InitTick>
 800313a:	4603      	mov	r3, r0
 800313c:	72fb      	strb	r3, [r7, #11]

  return status;
 800313e:	7afb      	ldrb	r3, [r7, #11]
}
 8003140:	4618      	mov	r0, r3
 8003142:	3710      	adds	r7, #16
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	40022000 	.word	0x40022000
 800314c:	40021000 	.word	0x40021000
 8003150:	08005358 	.word	0x08005358
 8003154:	20000000 	.word	0x20000000
 8003158:	20000004 	.word	0x20000004

0800315c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800315c:	b480      	push	{r7}
 800315e:	b089      	sub	sp, #36	; 0x24
 8003160:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003162:	2300      	movs	r3, #0
 8003164:	61fb      	str	r3, [r7, #28]
 8003166:	2300      	movs	r3, #0
 8003168:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800316a:	4b3e      	ldr	r3, [pc, #248]	; (8003264 <HAL_RCC_GetSysClockFreq+0x108>)
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f003 030c 	and.w	r3, r3, #12
 8003172:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003174:	4b3b      	ldr	r3, [pc, #236]	; (8003264 <HAL_RCC_GetSysClockFreq+0x108>)
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	f003 0303 	and.w	r3, r3, #3
 800317c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d005      	beq.n	8003190 <HAL_RCC_GetSysClockFreq+0x34>
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	2b0c      	cmp	r3, #12
 8003188:	d121      	bne.n	80031ce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2b01      	cmp	r3, #1
 800318e:	d11e      	bne.n	80031ce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003190:	4b34      	ldr	r3, [pc, #208]	; (8003264 <HAL_RCC_GetSysClockFreq+0x108>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0308 	and.w	r3, r3, #8
 8003198:	2b00      	cmp	r3, #0
 800319a:	d107      	bne.n	80031ac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800319c:	4b31      	ldr	r3, [pc, #196]	; (8003264 <HAL_RCC_GetSysClockFreq+0x108>)
 800319e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031a2:	0a1b      	lsrs	r3, r3, #8
 80031a4:	f003 030f 	and.w	r3, r3, #15
 80031a8:	61fb      	str	r3, [r7, #28]
 80031aa:	e005      	b.n	80031b8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80031ac:	4b2d      	ldr	r3, [pc, #180]	; (8003264 <HAL_RCC_GetSysClockFreq+0x108>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	091b      	lsrs	r3, r3, #4
 80031b2:	f003 030f 	and.w	r3, r3, #15
 80031b6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80031b8:	4a2b      	ldr	r2, [pc, #172]	; (8003268 <HAL_RCC_GetSysClockFreq+0x10c>)
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031c0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d10d      	bne.n	80031e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031cc:	e00a      	b.n	80031e4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	2b04      	cmp	r3, #4
 80031d2:	d102      	bne.n	80031da <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80031d4:	4b25      	ldr	r3, [pc, #148]	; (800326c <HAL_RCC_GetSysClockFreq+0x110>)
 80031d6:	61bb      	str	r3, [r7, #24]
 80031d8:	e004      	b.n	80031e4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	2b08      	cmp	r3, #8
 80031de:	d101      	bne.n	80031e4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80031e0:	4b23      	ldr	r3, [pc, #140]	; (8003270 <HAL_RCC_GetSysClockFreq+0x114>)
 80031e2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	2b0c      	cmp	r3, #12
 80031e8:	d134      	bne.n	8003254 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80031ea:	4b1e      	ldr	r3, [pc, #120]	; (8003264 <HAL_RCC_GetSysClockFreq+0x108>)
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	f003 0303 	and.w	r3, r3, #3
 80031f2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d003      	beq.n	8003202 <HAL_RCC_GetSysClockFreq+0xa6>
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	2b03      	cmp	r3, #3
 80031fe:	d003      	beq.n	8003208 <HAL_RCC_GetSysClockFreq+0xac>
 8003200:	e005      	b.n	800320e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003202:	4b1a      	ldr	r3, [pc, #104]	; (800326c <HAL_RCC_GetSysClockFreq+0x110>)
 8003204:	617b      	str	r3, [r7, #20]
      break;
 8003206:	e005      	b.n	8003214 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003208:	4b19      	ldr	r3, [pc, #100]	; (8003270 <HAL_RCC_GetSysClockFreq+0x114>)
 800320a:	617b      	str	r3, [r7, #20]
      break;
 800320c:	e002      	b.n	8003214 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	617b      	str	r3, [r7, #20]
      break;
 8003212:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003214:	4b13      	ldr	r3, [pc, #76]	; (8003264 <HAL_RCC_GetSysClockFreq+0x108>)
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	091b      	lsrs	r3, r3, #4
 800321a:	f003 0307 	and.w	r3, r3, #7
 800321e:	3301      	adds	r3, #1
 8003220:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003222:	4b10      	ldr	r3, [pc, #64]	; (8003264 <HAL_RCC_GetSysClockFreq+0x108>)
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	0a1b      	lsrs	r3, r3, #8
 8003228:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800322c:	697a      	ldr	r2, [r7, #20]
 800322e:	fb03 f202 	mul.w	r2, r3, r2
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	fbb2 f3f3 	udiv	r3, r2, r3
 8003238:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800323a:	4b0a      	ldr	r3, [pc, #40]	; (8003264 <HAL_RCC_GetSysClockFreq+0x108>)
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	0e5b      	lsrs	r3, r3, #25
 8003240:	f003 0303 	and.w	r3, r3, #3
 8003244:	3301      	adds	r3, #1
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800324a:	697a      	ldr	r2, [r7, #20]
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003252:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003254:	69bb      	ldr	r3, [r7, #24]
}
 8003256:	4618      	mov	r0, r3
 8003258:	3724      	adds	r7, #36	; 0x24
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	40021000 	.word	0x40021000
 8003268:	08005370 	.word	0x08005370
 800326c:	00f42400 	.word	0x00f42400
 8003270:	007a1200 	.word	0x007a1200

08003274 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003278:	4b03      	ldr	r3, [pc, #12]	; (8003288 <HAL_RCC_GetHCLKFreq+0x14>)
 800327a:	681b      	ldr	r3, [r3, #0]
}
 800327c:	4618      	mov	r0, r3
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	20000000 	.word	0x20000000

0800328c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003290:	f7ff fff0 	bl	8003274 <HAL_RCC_GetHCLKFreq>
 8003294:	4602      	mov	r2, r0
 8003296:	4b06      	ldr	r3, [pc, #24]	; (80032b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	0a1b      	lsrs	r3, r3, #8
 800329c:	f003 0307 	and.w	r3, r3, #7
 80032a0:	4904      	ldr	r1, [pc, #16]	; (80032b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80032a2:	5ccb      	ldrb	r3, [r1, r3]
 80032a4:	f003 031f 	and.w	r3, r3, #31
 80032a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	40021000 	.word	0x40021000
 80032b4:	08005368 	.word	0x08005368

080032b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80032bc:	f7ff ffda 	bl	8003274 <HAL_RCC_GetHCLKFreq>
 80032c0:	4602      	mov	r2, r0
 80032c2:	4b06      	ldr	r3, [pc, #24]	; (80032dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	0adb      	lsrs	r3, r3, #11
 80032c8:	f003 0307 	and.w	r3, r3, #7
 80032cc:	4904      	ldr	r1, [pc, #16]	; (80032e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80032ce:	5ccb      	ldrb	r3, [r1, r3]
 80032d0:	f003 031f 	and.w	r3, r3, #31
 80032d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032d8:	4618      	mov	r0, r3
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	40021000 	.word	0x40021000
 80032e0:	08005368 	.word	0x08005368

080032e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b086      	sub	sp, #24
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80032ec:	2300      	movs	r3, #0
 80032ee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80032f0:	4b2a      	ldr	r3, [pc, #168]	; (800339c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d003      	beq.n	8003304 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80032fc:	f7ff f9ee 	bl	80026dc <HAL_PWREx_GetVoltageRange>
 8003300:	6178      	str	r0, [r7, #20]
 8003302:	e014      	b.n	800332e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003304:	4b25      	ldr	r3, [pc, #148]	; (800339c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003308:	4a24      	ldr	r2, [pc, #144]	; (800339c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800330a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800330e:	6593      	str	r3, [r2, #88]	; 0x58
 8003310:	4b22      	ldr	r3, [pc, #136]	; (800339c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003314:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003318:	60fb      	str	r3, [r7, #12]
 800331a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800331c:	f7ff f9de 	bl	80026dc <HAL_PWREx_GetVoltageRange>
 8003320:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003322:	4b1e      	ldr	r3, [pc, #120]	; (800339c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003326:	4a1d      	ldr	r2, [pc, #116]	; (800339c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003328:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800332c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003334:	d10b      	bne.n	800334e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2b80      	cmp	r3, #128	; 0x80
 800333a:	d919      	bls.n	8003370 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2ba0      	cmp	r3, #160	; 0xa0
 8003340:	d902      	bls.n	8003348 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003342:	2302      	movs	r3, #2
 8003344:	613b      	str	r3, [r7, #16]
 8003346:	e013      	b.n	8003370 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003348:	2301      	movs	r3, #1
 800334a:	613b      	str	r3, [r7, #16]
 800334c:	e010      	b.n	8003370 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2b80      	cmp	r3, #128	; 0x80
 8003352:	d902      	bls.n	800335a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003354:	2303      	movs	r3, #3
 8003356:	613b      	str	r3, [r7, #16]
 8003358:	e00a      	b.n	8003370 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2b80      	cmp	r3, #128	; 0x80
 800335e:	d102      	bne.n	8003366 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003360:	2302      	movs	r3, #2
 8003362:	613b      	str	r3, [r7, #16]
 8003364:	e004      	b.n	8003370 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2b70      	cmp	r3, #112	; 0x70
 800336a:	d101      	bne.n	8003370 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800336c:	2301      	movs	r3, #1
 800336e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003370:	4b0b      	ldr	r3, [pc, #44]	; (80033a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f023 0207 	bic.w	r2, r3, #7
 8003378:	4909      	ldr	r1, [pc, #36]	; (80033a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	4313      	orrs	r3, r2
 800337e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003380:	4b07      	ldr	r3, [pc, #28]	; (80033a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0307 	and.w	r3, r3, #7
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	429a      	cmp	r2, r3
 800338c:	d001      	beq.n	8003392 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e000      	b.n	8003394 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003392:	2300      	movs	r3, #0
}
 8003394:	4618      	mov	r0, r3
 8003396:	3718      	adds	r7, #24
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	40021000 	.word	0x40021000
 80033a0:	40022000 	.word	0x40022000

080033a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b086      	sub	sp, #24
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80033ac:	2300      	movs	r3, #0
 80033ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80033b0:	2300      	movs	r3, #0
 80033b2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d041      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033c4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80033c8:	d02a      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80033ca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80033ce:	d824      	bhi.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80033d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80033d4:	d008      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80033d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80033da:	d81e      	bhi.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d00a      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80033e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033e4:	d010      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80033e6:	e018      	b.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80033e8:	4b86      	ldr	r3, [pc, #536]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	4a85      	ldr	r2, [pc, #532]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033f2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033f4:	e015      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	3304      	adds	r3, #4
 80033fa:	2100      	movs	r1, #0
 80033fc:	4618      	mov	r0, r3
 80033fe:	f000 fabb 	bl	8003978 <RCCEx_PLLSAI1_Config>
 8003402:	4603      	mov	r3, r0
 8003404:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003406:	e00c      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	3320      	adds	r3, #32
 800340c:	2100      	movs	r1, #0
 800340e:	4618      	mov	r0, r3
 8003410:	f000 fba6 	bl	8003b60 <RCCEx_PLLSAI2_Config>
 8003414:	4603      	mov	r3, r0
 8003416:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003418:	e003      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	74fb      	strb	r3, [r7, #19]
      break;
 800341e:	e000      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003420:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003422:	7cfb      	ldrb	r3, [r7, #19]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d10b      	bne.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003428:	4b76      	ldr	r3, [pc, #472]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800342a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800342e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003436:	4973      	ldr	r1, [pc, #460]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003438:	4313      	orrs	r3, r2
 800343a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800343e:	e001      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003440:	7cfb      	ldrb	r3, [r7, #19]
 8003442:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d041      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003454:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003458:	d02a      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800345a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800345e:	d824      	bhi.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003460:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003464:	d008      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003466:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800346a:	d81e      	bhi.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x106>
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00a      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003470:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003474:	d010      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003476:	e018      	b.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003478:	4b62      	ldr	r3, [pc, #392]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	4a61      	ldr	r2, [pc, #388]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800347e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003482:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003484:	e015      	b.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	3304      	adds	r3, #4
 800348a:	2100      	movs	r1, #0
 800348c:	4618      	mov	r0, r3
 800348e:	f000 fa73 	bl	8003978 <RCCEx_PLLSAI1_Config>
 8003492:	4603      	mov	r3, r0
 8003494:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003496:	e00c      	b.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	3320      	adds	r3, #32
 800349c:	2100      	movs	r1, #0
 800349e:	4618      	mov	r0, r3
 80034a0:	f000 fb5e 	bl	8003b60 <RCCEx_PLLSAI2_Config>
 80034a4:	4603      	mov	r3, r0
 80034a6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80034a8:	e003      	b.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	74fb      	strb	r3, [r7, #19]
      break;
 80034ae:	e000      	b.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80034b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034b2:	7cfb      	ldrb	r3, [r7, #19]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d10b      	bne.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80034b8:	4b52      	ldr	r3, [pc, #328]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034be:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034c6:	494f      	ldr	r1, [pc, #316]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80034ce:	e001      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034d0:	7cfb      	ldrb	r3, [r7, #19]
 80034d2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f000 80a0 	beq.w	8003622 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034e2:	2300      	movs	r3, #0
 80034e4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80034e6:	4b47      	ldr	r3, [pc, #284]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d101      	bne.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80034f2:	2301      	movs	r3, #1
 80034f4:	e000      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80034f6:	2300      	movs	r3, #0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d00d      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034fc:	4b41      	ldr	r3, [pc, #260]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003500:	4a40      	ldr	r2, [pc, #256]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003502:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003506:	6593      	str	r3, [r2, #88]	; 0x58
 8003508:	4b3e      	ldr	r3, [pc, #248]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800350a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800350c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003510:	60bb      	str	r3, [r7, #8]
 8003512:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003514:	2301      	movs	r3, #1
 8003516:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003518:	4b3b      	ldr	r3, [pc, #236]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a3a      	ldr	r2, [pc, #232]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800351e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003522:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003524:	f7fd fb56 	bl	8000bd4 <HAL_GetTick>
 8003528:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800352a:	e009      	b.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800352c:	f7fd fb52 	bl	8000bd4 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b02      	cmp	r3, #2
 8003538:	d902      	bls.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	74fb      	strb	r3, [r7, #19]
        break;
 800353e:	e005      	b.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003540:	4b31      	ldr	r3, [pc, #196]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003548:	2b00      	cmp	r3, #0
 800354a:	d0ef      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800354c:	7cfb      	ldrb	r3, [r7, #19]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d15c      	bne.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003552:	4b2c      	ldr	r3, [pc, #176]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003554:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003558:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800355c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d01f      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800356a:	697a      	ldr	r2, [r7, #20]
 800356c:	429a      	cmp	r2, r3
 800356e:	d019      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003570:	4b24      	ldr	r3, [pc, #144]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003576:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800357a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800357c:	4b21      	ldr	r3, [pc, #132]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800357e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003582:	4a20      	ldr	r2, [pc, #128]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003588:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800358c:	4b1d      	ldr	r3, [pc, #116]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800358e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003592:	4a1c      	ldr	r2, [pc, #112]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003594:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003598:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800359c:	4a19      	ldr	r2, [pc, #100]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d016      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ae:	f7fd fb11 	bl	8000bd4 <HAL_GetTick>
 80035b2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035b4:	e00b      	b.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035b6:	f7fd fb0d 	bl	8000bd4 <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d902      	bls.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	74fb      	strb	r3, [r7, #19]
            break;
 80035cc:	e006      	b.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035ce:	4b0d      	ldr	r3, [pc, #52]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d0ec      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80035dc:	7cfb      	ldrb	r3, [r7, #19]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d10c      	bne.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035e2:	4b08      	ldr	r3, [pc, #32]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035f2:	4904      	ldr	r1, [pc, #16]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80035fa:	e009      	b.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80035fc:	7cfb      	ldrb	r3, [r7, #19]
 80035fe:	74bb      	strb	r3, [r7, #18]
 8003600:	e006      	b.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003602:	bf00      	nop
 8003604:	40021000 	.word	0x40021000
 8003608:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800360c:	7cfb      	ldrb	r3, [r7, #19]
 800360e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003610:	7c7b      	ldrb	r3, [r7, #17]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d105      	bne.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003616:	4b9e      	ldr	r3, [pc, #632]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800361a:	4a9d      	ldr	r2, [pc, #628]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800361c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003620:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0301 	and.w	r3, r3, #1
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00a      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800362e:	4b98      	ldr	r3, [pc, #608]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003634:	f023 0203 	bic.w	r2, r3, #3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800363c:	4994      	ldr	r1, [pc, #592]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800363e:	4313      	orrs	r3, r2
 8003640:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0302 	and.w	r3, r3, #2
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00a      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003650:	4b8f      	ldr	r3, [pc, #572]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003656:	f023 020c 	bic.w	r2, r3, #12
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800365e:	498c      	ldr	r1, [pc, #560]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003660:	4313      	orrs	r3, r2
 8003662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0304 	and.w	r3, r3, #4
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00a      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003672:	4b87      	ldr	r3, [pc, #540]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003678:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003680:	4983      	ldr	r1, [pc, #524]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003682:	4313      	orrs	r3, r2
 8003684:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0308 	and.w	r3, r3, #8
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00a      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003694:	4b7e      	ldr	r3, [pc, #504]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800369a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a2:	497b      	ldr	r1, [pc, #492]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0310 	and.w	r3, r3, #16
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00a      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80036b6:	4b76      	ldr	r3, [pc, #472]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036c4:	4972      	ldr	r1, [pc, #456]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0320 	and.w	r3, r3, #32
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00a      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80036d8:	4b6d      	ldr	r3, [pc, #436]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036e6:	496a      	ldr	r1, [pc, #424]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00a      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036fa:	4b65      	ldr	r3, [pc, #404]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003700:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003708:	4961      	ldr	r1, [pc, #388]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800370a:	4313      	orrs	r3, r2
 800370c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003718:	2b00      	cmp	r3, #0
 800371a:	d00a      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800371c:	4b5c      	ldr	r3, [pc, #368]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800371e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003722:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800372a:	4959      	ldr	r1, [pc, #356]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800372c:	4313      	orrs	r3, r2
 800372e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00a      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800373e:	4b54      	ldr	r3, [pc, #336]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003744:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800374c:	4950      	ldr	r1, [pc, #320]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800374e:	4313      	orrs	r3, r2
 8003750:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800375c:	2b00      	cmp	r3, #0
 800375e:	d00a      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003760:	4b4b      	ldr	r3, [pc, #300]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003766:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800376e:	4948      	ldr	r1, [pc, #288]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003770:	4313      	orrs	r3, r2
 8003772:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00a      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003782:	4b43      	ldr	r3, [pc, #268]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003788:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003790:	493f      	ldr	r1, [pc, #252]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003792:	4313      	orrs	r3, r2
 8003794:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d028      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037a4:	4b3a      	ldr	r3, [pc, #232]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037b2:	4937      	ldr	r1, [pc, #220]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037c2:	d106      	bne.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037c4:	4b32      	ldr	r3, [pc, #200]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	4a31      	ldr	r2, [pc, #196]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037ce:	60d3      	str	r3, [r2, #12]
 80037d0:	e011      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037da:	d10c      	bne.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	3304      	adds	r3, #4
 80037e0:	2101      	movs	r1, #1
 80037e2:	4618      	mov	r0, r3
 80037e4:	f000 f8c8 	bl	8003978 <RCCEx_PLLSAI1_Config>
 80037e8:	4603      	mov	r3, r0
 80037ea:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80037ec:	7cfb      	ldrb	r3, [r7, #19]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80037f2:	7cfb      	ldrb	r3, [r7, #19]
 80037f4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d028      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003802:	4b23      	ldr	r3, [pc, #140]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003808:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003810:	491f      	ldr	r1, [pc, #124]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003812:	4313      	orrs	r3, r2
 8003814:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800381c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003820:	d106      	bne.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003822:	4b1b      	ldr	r3, [pc, #108]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	4a1a      	ldr	r2, [pc, #104]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003828:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800382c:	60d3      	str	r3, [r2, #12]
 800382e:	e011      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003834:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003838:	d10c      	bne.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	3304      	adds	r3, #4
 800383e:	2101      	movs	r1, #1
 8003840:	4618      	mov	r0, r3
 8003842:	f000 f899 	bl	8003978 <RCCEx_PLLSAI1_Config>
 8003846:	4603      	mov	r3, r0
 8003848:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800384a:	7cfb      	ldrb	r3, [r7, #19]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d001      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003850:	7cfb      	ldrb	r3, [r7, #19]
 8003852:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d02b      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003860:	4b0b      	ldr	r3, [pc, #44]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003866:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800386e:	4908      	ldr	r1, [pc, #32]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003870:	4313      	orrs	r3, r2
 8003872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800387a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800387e:	d109      	bne.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003880:	4b03      	ldr	r3, [pc, #12]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	4a02      	ldr	r2, [pc, #8]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003886:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800388a:	60d3      	str	r3, [r2, #12]
 800388c:	e014      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800388e:	bf00      	nop
 8003890:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003898:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800389c:	d10c      	bne.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	3304      	adds	r3, #4
 80038a2:	2101      	movs	r1, #1
 80038a4:	4618      	mov	r0, r3
 80038a6:	f000 f867 	bl	8003978 <RCCEx_PLLSAI1_Config>
 80038aa:	4603      	mov	r3, r0
 80038ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038ae:	7cfb      	ldrb	r3, [r7, #19]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d001      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80038b4:	7cfb      	ldrb	r3, [r7, #19]
 80038b6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d02f      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038c4:	4b2b      	ldr	r3, [pc, #172]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038d2:	4928      	ldr	r1, [pc, #160]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038e2:	d10d      	bne.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	3304      	adds	r3, #4
 80038e8:	2102      	movs	r1, #2
 80038ea:	4618      	mov	r0, r3
 80038ec:	f000 f844 	bl	8003978 <RCCEx_PLLSAI1_Config>
 80038f0:	4603      	mov	r3, r0
 80038f2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038f4:	7cfb      	ldrb	r3, [r7, #19]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d014      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80038fa:	7cfb      	ldrb	r3, [r7, #19]
 80038fc:	74bb      	strb	r3, [r7, #18]
 80038fe:	e011      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003904:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003908:	d10c      	bne.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	3320      	adds	r3, #32
 800390e:	2102      	movs	r1, #2
 8003910:	4618      	mov	r0, r3
 8003912:	f000 f925 	bl	8003b60 <RCCEx_PLLSAI2_Config>
 8003916:	4603      	mov	r3, r0
 8003918:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800391a:	7cfb      	ldrb	r3, [r7, #19]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d001      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003920:	7cfb      	ldrb	r3, [r7, #19]
 8003922:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d00a      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003930:	4b10      	ldr	r3, [pc, #64]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003936:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800393e:	490d      	ldr	r1, [pc, #52]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003940:	4313      	orrs	r3, r2
 8003942:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00b      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003952:	4b08      	ldr	r3, [pc, #32]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003958:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003962:	4904      	ldr	r1, [pc, #16]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003964:	4313      	orrs	r3, r2
 8003966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800396a:	7cbb      	ldrb	r3, [r7, #18]
}
 800396c:	4618      	mov	r0, r3
 800396e:	3718      	adds	r7, #24
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	40021000 	.word	0x40021000

08003978 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003982:	2300      	movs	r3, #0
 8003984:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003986:	4b75      	ldr	r3, [pc, #468]	; (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	f003 0303 	and.w	r3, r3, #3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d018      	beq.n	80039c4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003992:	4b72      	ldr	r3, [pc, #456]	; (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	f003 0203 	and.w	r2, r3, #3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d10d      	bne.n	80039be <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
       ||
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d009      	beq.n	80039be <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80039aa:	4b6c      	ldr	r3, [pc, #432]	; (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	091b      	lsrs	r3, r3, #4
 80039b0:	f003 0307 	and.w	r3, r3, #7
 80039b4:	1c5a      	adds	r2, r3, #1
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
       ||
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d047      	beq.n	8003a4e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	73fb      	strb	r3, [r7, #15]
 80039c2:	e044      	b.n	8003a4e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2b03      	cmp	r3, #3
 80039ca:	d018      	beq.n	80039fe <RCCEx_PLLSAI1_Config+0x86>
 80039cc:	2b03      	cmp	r3, #3
 80039ce:	d825      	bhi.n	8003a1c <RCCEx_PLLSAI1_Config+0xa4>
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d002      	beq.n	80039da <RCCEx_PLLSAI1_Config+0x62>
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d009      	beq.n	80039ec <RCCEx_PLLSAI1_Config+0x74>
 80039d8:	e020      	b.n	8003a1c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80039da:	4b60      	ldr	r3, [pc, #384]	; (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d11d      	bne.n	8003a22 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039ea:	e01a      	b.n	8003a22 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80039ec:	4b5b      	ldr	r3, [pc, #364]	; (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d116      	bne.n	8003a26 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039fc:	e013      	b.n	8003a26 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80039fe:	4b57      	ldr	r3, [pc, #348]	; (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d10f      	bne.n	8003a2a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a0a:	4b54      	ldr	r3, [pc, #336]	; (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d109      	bne.n	8003a2a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a1a:	e006      	b.n	8003a2a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	73fb      	strb	r3, [r7, #15]
      break;
 8003a20:	e004      	b.n	8003a2c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a22:	bf00      	nop
 8003a24:	e002      	b.n	8003a2c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a26:	bf00      	nop
 8003a28:	e000      	b.n	8003a2c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a2a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a2c:	7bfb      	ldrb	r3, [r7, #15]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d10d      	bne.n	8003a4e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a32:	4b4a      	ldr	r3, [pc, #296]	; (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6819      	ldr	r1, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	3b01      	subs	r3, #1
 8003a44:	011b      	lsls	r3, r3, #4
 8003a46:	430b      	orrs	r3, r1
 8003a48:	4944      	ldr	r1, [pc, #272]	; (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a4e:	7bfb      	ldrb	r3, [r7, #15]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d17d      	bne.n	8003b50 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003a54:	4b41      	ldr	r3, [pc, #260]	; (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a40      	ldr	r2, [pc, #256]	; (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a5a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a60:	f7fd f8b8 	bl	8000bd4 <HAL_GetTick>
 8003a64:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a66:	e009      	b.n	8003a7c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a68:	f7fd f8b4 	bl	8000bd4 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d902      	bls.n	8003a7c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	73fb      	strb	r3, [r7, #15]
        break;
 8003a7a:	e005      	b.n	8003a88 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a7c:	4b37      	ldr	r3, [pc, #220]	; (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1ef      	bne.n	8003a68 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003a88:	7bfb      	ldrb	r3, [r7, #15]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d160      	bne.n	8003b50 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d111      	bne.n	8003ab8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a94:	4b31      	ldr	r3, [pc, #196]	; (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003a9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	6892      	ldr	r2, [r2, #8]
 8003aa4:	0211      	lsls	r1, r2, #8
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	68d2      	ldr	r2, [r2, #12]
 8003aaa:	0912      	lsrs	r2, r2, #4
 8003aac:	0452      	lsls	r2, r2, #17
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	492a      	ldr	r1, [pc, #168]	; (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	610b      	str	r3, [r1, #16]
 8003ab6:	e027      	b.n	8003b08 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d112      	bne.n	8003ae4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003abe:	4b27      	ldr	r3, [pc, #156]	; (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003ac6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	6892      	ldr	r2, [r2, #8]
 8003ace:	0211      	lsls	r1, r2, #8
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	6912      	ldr	r2, [r2, #16]
 8003ad4:	0852      	lsrs	r2, r2, #1
 8003ad6:	3a01      	subs	r2, #1
 8003ad8:	0552      	lsls	r2, r2, #21
 8003ada:	430a      	orrs	r2, r1
 8003adc:	491f      	ldr	r1, [pc, #124]	; (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	610b      	str	r3, [r1, #16]
 8003ae2:	e011      	b.n	8003b08 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ae4:	4b1d      	ldr	r3, [pc, #116]	; (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ae6:	691b      	ldr	r3, [r3, #16]
 8003ae8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003aec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	6892      	ldr	r2, [r2, #8]
 8003af4:	0211      	lsls	r1, r2, #8
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	6952      	ldr	r2, [r2, #20]
 8003afa:	0852      	lsrs	r2, r2, #1
 8003afc:	3a01      	subs	r2, #1
 8003afe:	0652      	lsls	r2, r2, #25
 8003b00:	430a      	orrs	r2, r1
 8003b02:	4916      	ldr	r1, [pc, #88]	; (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b04:	4313      	orrs	r3, r2
 8003b06:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003b08:	4b14      	ldr	r3, [pc, #80]	; (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a13      	ldr	r2, [pc, #76]	; (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b0e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b12:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b14:	f7fd f85e 	bl	8000bd4 <HAL_GetTick>
 8003b18:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b1a:	e009      	b.n	8003b30 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b1c:	f7fd f85a 	bl	8000bd4 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d902      	bls.n	8003b30 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	73fb      	strb	r3, [r7, #15]
          break;
 8003b2e:	e005      	b.n	8003b3c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b30:	4b0a      	ldr	r3, [pc, #40]	; (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d0ef      	beq.n	8003b1c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003b3c:	7bfb      	ldrb	r3, [r7, #15]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d106      	bne.n	8003b50 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003b42:	4b06      	ldr	r3, [pc, #24]	; (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b44:	691a      	ldr	r2, [r3, #16]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	4904      	ldr	r1, [pc, #16]	; (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	40021000 	.word	0x40021000

08003b60 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b6e:	4b6a      	ldr	r3, [pc, #424]	; (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	f003 0303 	and.w	r3, r3, #3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d018      	beq.n	8003bac <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003b7a:	4b67      	ldr	r3, [pc, #412]	; (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	f003 0203 	and.w	r2, r3, #3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d10d      	bne.n	8003ba6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
       ||
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d009      	beq.n	8003ba6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003b92:	4b61      	ldr	r3, [pc, #388]	; (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	091b      	lsrs	r3, r3, #4
 8003b98:	f003 0307 	and.w	r3, r3, #7
 8003b9c:	1c5a      	adds	r2, r3, #1
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
       ||
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d047      	beq.n	8003c36 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	73fb      	strb	r3, [r7, #15]
 8003baa:	e044      	b.n	8003c36 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2b03      	cmp	r3, #3
 8003bb2:	d018      	beq.n	8003be6 <RCCEx_PLLSAI2_Config+0x86>
 8003bb4:	2b03      	cmp	r3, #3
 8003bb6:	d825      	bhi.n	8003c04 <RCCEx_PLLSAI2_Config+0xa4>
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d002      	beq.n	8003bc2 <RCCEx_PLLSAI2_Config+0x62>
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d009      	beq.n	8003bd4 <RCCEx_PLLSAI2_Config+0x74>
 8003bc0:	e020      	b.n	8003c04 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003bc2:	4b55      	ldr	r3, [pc, #340]	; (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d11d      	bne.n	8003c0a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bd2:	e01a      	b.n	8003c0a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003bd4:	4b50      	ldr	r3, [pc, #320]	; (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d116      	bne.n	8003c0e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003be4:	e013      	b.n	8003c0e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003be6:	4b4c      	ldr	r3, [pc, #304]	; (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d10f      	bne.n	8003c12 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003bf2:	4b49      	ldr	r3, [pc, #292]	; (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d109      	bne.n	8003c12 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c02:	e006      	b.n	8003c12 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	73fb      	strb	r3, [r7, #15]
      break;
 8003c08:	e004      	b.n	8003c14 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c0a:	bf00      	nop
 8003c0c:	e002      	b.n	8003c14 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c0e:	bf00      	nop
 8003c10:	e000      	b.n	8003c14 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c12:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c14:	7bfb      	ldrb	r3, [r7, #15]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d10d      	bne.n	8003c36 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003c1a:	4b3f      	ldr	r3, [pc, #252]	; (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6819      	ldr	r1, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	011b      	lsls	r3, r3, #4
 8003c2e:	430b      	orrs	r3, r1
 8003c30:	4939      	ldr	r1, [pc, #228]	; (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003c36:	7bfb      	ldrb	r3, [r7, #15]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d167      	bne.n	8003d0c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003c3c:	4b36      	ldr	r3, [pc, #216]	; (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a35      	ldr	r2, [pc, #212]	; (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c48:	f7fc ffc4 	bl	8000bd4 <HAL_GetTick>
 8003c4c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c4e:	e009      	b.n	8003c64 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c50:	f7fc ffc0 	bl	8000bd4 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d902      	bls.n	8003c64 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	73fb      	strb	r3, [r7, #15]
        break;
 8003c62:	e005      	b.n	8003c70 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c64:	4b2c      	ldr	r3, [pc, #176]	; (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d1ef      	bne.n	8003c50 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003c70:	7bfb      	ldrb	r3, [r7, #15]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d14a      	bne.n	8003d0c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d111      	bne.n	8003ca0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c7c:	4b26      	ldr	r3, [pc, #152]	; (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c7e:	695b      	ldr	r3, [r3, #20]
 8003c80:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003c84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	6892      	ldr	r2, [r2, #8]
 8003c8c:	0211      	lsls	r1, r2, #8
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	68d2      	ldr	r2, [r2, #12]
 8003c92:	0912      	lsrs	r2, r2, #4
 8003c94:	0452      	lsls	r2, r2, #17
 8003c96:	430a      	orrs	r2, r1
 8003c98:	491f      	ldr	r1, [pc, #124]	; (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	614b      	str	r3, [r1, #20]
 8003c9e:	e011      	b.n	8003cc4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ca0:	4b1d      	ldr	r3, [pc, #116]	; (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ca2:	695b      	ldr	r3, [r3, #20]
 8003ca4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003ca8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	6892      	ldr	r2, [r2, #8]
 8003cb0:	0211      	lsls	r1, r2, #8
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	6912      	ldr	r2, [r2, #16]
 8003cb6:	0852      	lsrs	r2, r2, #1
 8003cb8:	3a01      	subs	r2, #1
 8003cba:	0652      	lsls	r2, r2, #25
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	4916      	ldr	r1, [pc, #88]	; (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003cc4:	4b14      	ldr	r3, [pc, #80]	; (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a13      	ldr	r2, [pc, #76]	; (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cd0:	f7fc ff80 	bl	8000bd4 <HAL_GetTick>
 8003cd4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003cd6:	e009      	b.n	8003cec <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003cd8:	f7fc ff7c 	bl	8000bd4 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d902      	bls.n	8003cec <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	73fb      	strb	r3, [r7, #15]
          break;
 8003cea:	e005      	b.n	8003cf8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003cec:	4b0a      	ldr	r3, [pc, #40]	; (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d0ef      	beq.n	8003cd8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003cf8:	7bfb      	ldrb	r3, [r7, #15]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d106      	bne.n	8003d0c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003cfe:	4b06      	ldr	r3, [pc, #24]	; (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d00:	695a      	ldr	r2, [r3, #20]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	695b      	ldr	r3, [r3, #20]
 8003d06:	4904      	ldr	r1, [pc, #16]	; (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3710      	adds	r7, #16
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	40021000 	.word	0x40021000

08003d1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d101      	bne.n	8003d2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e040      	b.n	8003db0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d106      	bne.n	8003d44 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f7fc fe0a 	bl	8000958 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2224      	movs	r2, #36	; 0x24
 8003d48:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f022 0201 	bic.w	r2, r2, #1
 8003d58:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 fb84 	bl	8004468 <UART_SetConfig>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d101      	bne.n	8003d6a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e022      	b.n	8003db0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d002      	beq.n	8003d78 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f000 fe30 	bl	80049d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	685a      	ldr	r2, [r3, #4]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	689a      	ldr	r2, [r3, #8]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f042 0201 	orr.w	r2, r2, #1
 8003da6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f000 feb7 	bl	8004b1c <UART_CheckIdleState>
 8003dae:	4603      	mov	r3, r0
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3708      	adds	r7, #8
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b08a      	sub	sp, #40	; 0x28
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dca:	2b20      	cmp	r3, #32
 8003dcc:	d142      	bne.n	8003e54 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d002      	beq.n	8003dda <HAL_UART_Receive_IT+0x22>
 8003dd4:	88fb      	ldrh	r3, [r7, #6]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d101      	bne.n	8003dde <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e03b      	b.n	8003e56 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d101      	bne.n	8003dec <HAL_UART_Receive_IT+0x34>
 8003de8:	2302      	movs	r3, #2
 8003dea:	e034      	b.n	8003e56 <HAL_UART_Receive_IT+0x9e>
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2200      	movs	r2, #0
 8003df8:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a18      	ldr	r2, [pc, #96]	; (8003e60 <HAL_UART_Receive_IT+0xa8>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d01f      	beq.n	8003e44 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d018      	beq.n	8003e44 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	e853 3f00 	ldrex	r3, [r3]
 8003e1e:	613b      	str	r3, [r7, #16]
   return(result);
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e26:	627b      	str	r3, [r7, #36]	; 0x24
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e30:	623b      	str	r3, [r7, #32]
 8003e32:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e34:	69f9      	ldr	r1, [r7, #28]
 8003e36:	6a3a      	ldr	r2, [r7, #32]
 8003e38:	e841 2300 	strex	r3, r2, [r1]
 8003e3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d1e6      	bne.n	8003e12 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003e44:	88fb      	ldrh	r3, [r7, #6]
 8003e46:	461a      	mov	r2, r3
 8003e48:	68b9      	ldr	r1, [r7, #8]
 8003e4a:	68f8      	ldr	r0, [r7, #12]
 8003e4c:	f000 ff74 	bl	8004d38 <UART_Start_Receive_IT>
 8003e50:	4603      	mov	r3, r0
 8003e52:	e000      	b.n	8003e56 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003e54:	2302      	movs	r3, #2
  }
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3728      	adds	r7, #40	; 0x28
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	40008000 	.word	0x40008000

08003e64 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b0ba      	sub	sp, #232	; 0xe8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	69db      	ldr	r3, [r3, #28]
 8003e72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003e8a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003e8e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003e92:	4013      	ands	r3, r2
 8003e94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003e98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d115      	bne.n	8003ecc <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003ea0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ea4:	f003 0320 	and.w	r3, r3, #32
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d00f      	beq.n	8003ecc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003eac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003eb0:	f003 0320 	and.w	r3, r3, #32
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d009      	beq.n	8003ecc <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f000 82a6 	beq.w	800440e <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	4798      	blx	r3
      }
      return;
 8003eca:	e2a0      	b.n	800440e <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003ecc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	f000 8117 	beq.w	8004104 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003ed6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003eda:	f003 0301 	and.w	r3, r3, #1
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d106      	bne.n	8003ef0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003ee2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003ee6:	4b85      	ldr	r3, [pc, #532]	; (80040fc <HAL_UART_IRQHandler+0x298>)
 8003ee8:	4013      	ands	r3, r2
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f000 810a 	beq.w	8004104 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003ef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ef4:	f003 0301 	and.w	r3, r3, #1
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d011      	beq.n	8003f20 <HAL_UART_IRQHandler+0xbc>
 8003efc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d00b      	beq.n	8003f20 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f16:	f043 0201 	orr.w	r2, r3, #1
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f24:	f003 0302 	and.w	r3, r3, #2
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d011      	beq.n	8003f50 <HAL_UART_IRQHandler+0xec>
 8003f2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f30:	f003 0301 	and.w	r3, r3, #1
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00b      	beq.n	8003f50 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2202      	movs	r2, #2
 8003f3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f46:	f043 0204 	orr.w	r2, r3, #4
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f54:	f003 0304 	and.w	r3, r3, #4
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d011      	beq.n	8003f80 <HAL_UART_IRQHandler+0x11c>
 8003f5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f60:	f003 0301 	and.w	r3, r3, #1
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d00b      	beq.n	8003f80 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2204      	movs	r2, #4
 8003f6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f76:	f043 0202 	orr.w	r2, r3, #2
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003f80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f84:	f003 0308 	and.w	r3, r3, #8
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d017      	beq.n	8003fbc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003f8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f90:	f003 0320 	and.w	r3, r3, #32
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d105      	bne.n	8003fa4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003f98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f9c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d00b      	beq.n	8003fbc <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2208      	movs	r2, #8
 8003faa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fb2:	f043 0208 	orr.w	r2, r3, #8
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003fbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d012      	beq.n	8003fee <HAL_UART_IRQHandler+0x18a>
 8003fc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fcc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d00c      	beq.n	8003fee <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fdc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fe4:	f043 0220 	orr.w	r2, r3, #32
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f000 820c 	beq.w	8004412 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ffe:	f003 0320 	and.w	r3, r3, #32
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00d      	beq.n	8004022 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004006:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800400a:	f003 0320 	and.w	r3, r3, #32
 800400e:	2b00      	cmp	r3, #0
 8004010:	d007      	beq.n	8004022 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004016:	2b00      	cmp	r3, #0
 8004018:	d003      	beq.n	8004022 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004028:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004036:	2b40      	cmp	r3, #64	; 0x40
 8004038:	d005      	beq.n	8004046 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800403a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800403e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004042:	2b00      	cmp	r3, #0
 8004044:	d04f      	beq.n	80040e6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 ff40 	bl	8004ecc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004056:	2b40      	cmp	r3, #64	; 0x40
 8004058:	d141      	bne.n	80040de <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	3308      	adds	r3, #8
 8004060:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004064:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004068:	e853 3f00 	ldrex	r3, [r3]
 800406c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004070:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004074:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004078:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	3308      	adds	r3, #8
 8004082:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004086:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800408a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800408e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004092:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004096:	e841 2300 	strex	r3, r2, [r1]
 800409a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800409e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d1d9      	bne.n	800405a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d013      	beq.n	80040d6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b2:	4a13      	ldr	r2, [pc, #76]	; (8004100 <HAL_UART_IRQHandler+0x29c>)
 80040b4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7fe f90b 	bl	80022d6 <HAL_DMA_Abort_IT>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d017      	beq.n	80040f6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80040d0:	4610      	mov	r0, r2
 80040d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040d4:	e00f      	b.n	80040f6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 f9b0 	bl	800443c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040dc:	e00b      	b.n	80040f6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 f9ac 	bl	800443c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040e4:	e007      	b.n	80040f6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 f9a8 	bl	800443c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80040f4:	e18d      	b.n	8004412 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040f6:	bf00      	nop
    return;
 80040f8:	e18b      	b.n	8004412 <HAL_UART_IRQHandler+0x5ae>
 80040fa:	bf00      	nop
 80040fc:	04000120 	.word	0x04000120
 8004100:	08004f93 	.word	0x08004f93

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004108:	2b01      	cmp	r3, #1
 800410a:	f040 8146 	bne.w	800439a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800410e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004112:	f003 0310 	and.w	r3, r3, #16
 8004116:	2b00      	cmp	r3, #0
 8004118:	f000 813f 	beq.w	800439a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800411c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004120:	f003 0310 	and.w	r3, r3, #16
 8004124:	2b00      	cmp	r3, #0
 8004126:	f000 8138 	beq.w	800439a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2210      	movs	r2, #16
 8004130:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800413c:	2b40      	cmp	r3, #64	; 0x40
 800413e:	f040 80b4 	bne.w	80042aa <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800414e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004152:	2b00      	cmp	r3, #0
 8004154:	f000 815f 	beq.w	8004416 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800415e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004162:	429a      	cmp	r2, r3
 8004164:	f080 8157 	bcs.w	8004416 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800416e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0320 	and.w	r3, r3, #32
 800417e:	2b00      	cmp	r3, #0
 8004180:	f040 8085 	bne.w	800428e <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800418c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004190:	e853 3f00 	ldrex	r3, [r3]
 8004194:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004198:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800419c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	461a      	mov	r2, r3
 80041aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80041ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80041b2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80041ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80041be:	e841 2300 	strex	r3, r2, [r1]
 80041c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80041c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1da      	bne.n	8004184 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	3308      	adds	r3, #8
 80041d4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041d8:	e853 3f00 	ldrex	r3, [r3]
 80041dc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80041de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041e0:	f023 0301 	bic.w	r3, r3, #1
 80041e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	3308      	adds	r3, #8
 80041ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80041f2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80041f6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80041fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80041fe:	e841 2300 	strex	r3, r2, [r1]
 8004202:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004204:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1e1      	bne.n	80041ce <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	3308      	adds	r3, #8
 8004210:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004212:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004214:	e853 3f00 	ldrex	r3, [r3]
 8004218:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800421a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800421c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004220:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	3308      	adds	r3, #8
 800422a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800422e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004230:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004232:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004234:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004236:	e841 2300 	strex	r3, r2, [r1]
 800423a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800423c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800423e:	2b00      	cmp	r3, #0
 8004240:	d1e3      	bne.n	800420a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2220      	movs	r2, #32
 8004246:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004254:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004256:	e853 3f00 	ldrex	r3, [r3]
 800425a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800425c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800425e:	f023 0310 	bic.w	r3, r3, #16
 8004262:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	461a      	mov	r2, r3
 800426c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004270:	65bb      	str	r3, [r7, #88]	; 0x58
 8004272:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004274:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004276:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004278:	e841 2300 	strex	r3, r2, [r1]
 800427c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800427e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004280:	2b00      	cmp	r3, #0
 8004282:	d1e4      	bne.n	800424e <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004288:	4618      	mov	r0, r3
 800428a:	f7fd ffe6 	bl	800225a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800429a:	b29b      	uxth	r3, r3
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	b29b      	uxth	r3, r3
 80042a0:	4619      	mov	r1, r3
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 f8d4 	bl	8004450 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80042a8:	e0b5      	b.n	8004416 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	f000 80a7 	beq.w	800441a <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80042cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	f000 80a2 	beq.w	800441a <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042de:	e853 3f00 	ldrex	r3, [r3]
 80042e2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80042e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	461a      	mov	r2, r3
 80042f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80042f8:	647b      	str	r3, [r7, #68]	; 0x44
 80042fa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80042fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004300:	e841 2300 	strex	r3, r2, [r1]
 8004304:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004308:	2b00      	cmp	r3, #0
 800430a:	d1e4      	bne.n	80042d6 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	3308      	adds	r3, #8
 8004312:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004316:	e853 3f00 	ldrex	r3, [r3]
 800431a:	623b      	str	r3, [r7, #32]
   return(result);
 800431c:	6a3b      	ldr	r3, [r7, #32]
 800431e:	f023 0301 	bic.w	r3, r3, #1
 8004322:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	3308      	adds	r3, #8
 800432c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004330:	633a      	str	r2, [r7, #48]	; 0x30
 8004332:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004334:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004336:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004338:	e841 2300 	strex	r3, r2, [r1]
 800433c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800433e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1e3      	bne.n	800430c <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2220      	movs	r2, #32
 8004348:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	e853 3f00 	ldrex	r3, [r3]
 8004362:	60fb      	str	r3, [r7, #12]
   return(result);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f023 0310 	bic.w	r3, r3, #16
 800436a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	461a      	mov	r2, r3
 8004374:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004378:	61fb      	str	r3, [r7, #28]
 800437a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800437c:	69b9      	ldr	r1, [r7, #24]
 800437e:	69fa      	ldr	r2, [r7, #28]
 8004380:	e841 2300 	strex	r3, r2, [r1]
 8004384:	617b      	str	r3, [r7, #20]
   return(result);
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d1e4      	bne.n	8004356 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800438c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004390:	4619      	mov	r1, r3
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 f85c 	bl	8004450 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004398:	e03f      	b.n	800441a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800439a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800439e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d00e      	beq.n	80043c4 <HAL_UART_IRQHandler+0x560>
 80043a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d008      	beq.n	80043c4 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80043ba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 ff88 	bl	80052d2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80043c2:	e02d      	b.n	8004420 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80043c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d00e      	beq.n	80043ee <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80043d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d008      	beq.n	80043ee <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d01c      	beq.n	800441e <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	4798      	blx	r3
    }
    return;
 80043ec:	e017      	b.n	800441e <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80043ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d012      	beq.n	8004420 <HAL_UART_IRQHandler+0x5bc>
 80043fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00c      	beq.n	8004420 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 fdd9 	bl	8004fbe <UART_EndTransmit_IT>
    return;
 800440c:	e008      	b.n	8004420 <HAL_UART_IRQHandler+0x5bc>
      return;
 800440e:	bf00      	nop
 8004410:	e006      	b.n	8004420 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004412:	bf00      	nop
 8004414:	e004      	b.n	8004420 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004416:	bf00      	nop
 8004418:	e002      	b.n	8004420 <HAL_UART_IRQHandler+0x5bc>
      return;
 800441a:	bf00      	nop
 800441c:	e000      	b.n	8004420 <HAL_UART_IRQHandler+0x5bc>
    return;
 800441e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004420:	37e8      	adds	r7, #232	; 0xe8
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop

08004428 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004444:	bf00      	nop
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	460b      	mov	r3, r1
 800445a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800445c:	bf00      	nop
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004468:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800446c:	b08a      	sub	sp, #40	; 0x28
 800446e:	af00      	add	r7, sp, #0
 8004470:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004472:	2300      	movs	r3, #0
 8004474:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	689a      	ldr	r2, [r3, #8]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	691b      	ldr	r3, [r3, #16]
 8004480:	431a      	orrs	r2, r3
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	431a      	orrs	r2, r3
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	69db      	ldr	r3, [r3, #28]
 800448c:	4313      	orrs	r3, r2
 800448e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	4ba4      	ldr	r3, [pc, #656]	; (8004728 <UART_SetConfig+0x2c0>)
 8004498:	4013      	ands	r3, r2
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	6812      	ldr	r2, [r2, #0]
 800449e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80044a0:	430b      	orrs	r3, r1
 80044a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	68da      	ldr	r2, [r3, #12]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	430a      	orrs	r2, r1
 80044b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	699b      	ldr	r3, [r3, #24]
 80044be:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a99      	ldr	r2, [pc, #612]	; (800472c <UART_SetConfig+0x2c4>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d004      	beq.n	80044d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6a1b      	ldr	r3, [r3, #32]
 80044ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044d0:	4313      	orrs	r3, r2
 80044d2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044e4:	430a      	orrs	r2, r1
 80044e6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a90      	ldr	r2, [pc, #576]	; (8004730 <UART_SetConfig+0x2c8>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d126      	bne.n	8004540 <UART_SetConfig+0xd8>
 80044f2:	4b90      	ldr	r3, [pc, #576]	; (8004734 <UART_SetConfig+0x2cc>)
 80044f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f8:	f003 0303 	and.w	r3, r3, #3
 80044fc:	2b03      	cmp	r3, #3
 80044fe:	d81b      	bhi.n	8004538 <UART_SetConfig+0xd0>
 8004500:	a201      	add	r2, pc, #4	; (adr r2, 8004508 <UART_SetConfig+0xa0>)
 8004502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004506:	bf00      	nop
 8004508:	08004519 	.word	0x08004519
 800450c:	08004529 	.word	0x08004529
 8004510:	08004521 	.word	0x08004521
 8004514:	08004531 	.word	0x08004531
 8004518:	2301      	movs	r3, #1
 800451a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800451e:	e116      	b.n	800474e <UART_SetConfig+0x2e6>
 8004520:	2302      	movs	r3, #2
 8004522:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004526:	e112      	b.n	800474e <UART_SetConfig+0x2e6>
 8004528:	2304      	movs	r3, #4
 800452a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800452e:	e10e      	b.n	800474e <UART_SetConfig+0x2e6>
 8004530:	2308      	movs	r3, #8
 8004532:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004536:	e10a      	b.n	800474e <UART_SetConfig+0x2e6>
 8004538:	2310      	movs	r3, #16
 800453a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800453e:	e106      	b.n	800474e <UART_SetConfig+0x2e6>
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a7c      	ldr	r2, [pc, #496]	; (8004738 <UART_SetConfig+0x2d0>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d138      	bne.n	80045bc <UART_SetConfig+0x154>
 800454a:	4b7a      	ldr	r3, [pc, #488]	; (8004734 <UART_SetConfig+0x2cc>)
 800454c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004550:	f003 030c 	and.w	r3, r3, #12
 8004554:	2b0c      	cmp	r3, #12
 8004556:	d82d      	bhi.n	80045b4 <UART_SetConfig+0x14c>
 8004558:	a201      	add	r2, pc, #4	; (adr r2, 8004560 <UART_SetConfig+0xf8>)
 800455a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800455e:	bf00      	nop
 8004560:	08004595 	.word	0x08004595
 8004564:	080045b5 	.word	0x080045b5
 8004568:	080045b5 	.word	0x080045b5
 800456c:	080045b5 	.word	0x080045b5
 8004570:	080045a5 	.word	0x080045a5
 8004574:	080045b5 	.word	0x080045b5
 8004578:	080045b5 	.word	0x080045b5
 800457c:	080045b5 	.word	0x080045b5
 8004580:	0800459d 	.word	0x0800459d
 8004584:	080045b5 	.word	0x080045b5
 8004588:	080045b5 	.word	0x080045b5
 800458c:	080045b5 	.word	0x080045b5
 8004590:	080045ad 	.word	0x080045ad
 8004594:	2300      	movs	r3, #0
 8004596:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800459a:	e0d8      	b.n	800474e <UART_SetConfig+0x2e6>
 800459c:	2302      	movs	r3, #2
 800459e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045a2:	e0d4      	b.n	800474e <UART_SetConfig+0x2e6>
 80045a4:	2304      	movs	r3, #4
 80045a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045aa:	e0d0      	b.n	800474e <UART_SetConfig+0x2e6>
 80045ac:	2308      	movs	r3, #8
 80045ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045b2:	e0cc      	b.n	800474e <UART_SetConfig+0x2e6>
 80045b4:	2310      	movs	r3, #16
 80045b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045ba:	e0c8      	b.n	800474e <UART_SetConfig+0x2e6>
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a5e      	ldr	r2, [pc, #376]	; (800473c <UART_SetConfig+0x2d4>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d125      	bne.n	8004612 <UART_SetConfig+0x1aa>
 80045c6:	4b5b      	ldr	r3, [pc, #364]	; (8004734 <UART_SetConfig+0x2cc>)
 80045c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045cc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80045d0:	2b30      	cmp	r3, #48	; 0x30
 80045d2:	d016      	beq.n	8004602 <UART_SetConfig+0x19a>
 80045d4:	2b30      	cmp	r3, #48	; 0x30
 80045d6:	d818      	bhi.n	800460a <UART_SetConfig+0x1a2>
 80045d8:	2b20      	cmp	r3, #32
 80045da:	d00a      	beq.n	80045f2 <UART_SetConfig+0x18a>
 80045dc:	2b20      	cmp	r3, #32
 80045de:	d814      	bhi.n	800460a <UART_SetConfig+0x1a2>
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d002      	beq.n	80045ea <UART_SetConfig+0x182>
 80045e4:	2b10      	cmp	r3, #16
 80045e6:	d008      	beq.n	80045fa <UART_SetConfig+0x192>
 80045e8:	e00f      	b.n	800460a <UART_SetConfig+0x1a2>
 80045ea:	2300      	movs	r3, #0
 80045ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045f0:	e0ad      	b.n	800474e <UART_SetConfig+0x2e6>
 80045f2:	2302      	movs	r3, #2
 80045f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045f8:	e0a9      	b.n	800474e <UART_SetConfig+0x2e6>
 80045fa:	2304      	movs	r3, #4
 80045fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004600:	e0a5      	b.n	800474e <UART_SetConfig+0x2e6>
 8004602:	2308      	movs	r3, #8
 8004604:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004608:	e0a1      	b.n	800474e <UART_SetConfig+0x2e6>
 800460a:	2310      	movs	r3, #16
 800460c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004610:	e09d      	b.n	800474e <UART_SetConfig+0x2e6>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a4a      	ldr	r2, [pc, #296]	; (8004740 <UART_SetConfig+0x2d8>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d125      	bne.n	8004668 <UART_SetConfig+0x200>
 800461c:	4b45      	ldr	r3, [pc, #276]	; (8004734 <UART_SetConfig+0x2cc>)
 800461e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004622:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004626:	2bc0      	cmp	r3, #192	; 0xc0
 8004628:	d016      	beq.n	8004658 <UART_SetConfig+0x1f0>
 800462a:	2bc0      	cmp	r3, #192	; 0xc0
 800462c:	d818      	bhi.n	8004660 <UART_SetConfig+0x1f8>
 800462e:	2b80      	cmp	r3, #128	; 0x80
 8004630:	d00a      	beq.n	8004648 <UART_SetConfig+0x1e0>
 8004632:	2b80      	cmp	r3, #128	; 0x80
 8004634:	d814      	bhi.n	8004660 <UART_SetConfig+0x1f8>
 8004636:	2b00      	cmp	r3, #0
 8004638:	d002      	beq.n	8004640 <UART_SetConfig+0x1d8>
 800463a:	2b40      	cmp	r3, #64	; 0x40
 800463c:	d008      	beq.n	8004650 <UART_SetConfig+0x1e8>
 800463e:	e00f      	b.n	8004660 <UART_SetConfig+0x1f8>
 8004640:	2300      	movs	r3, #0
 8004642:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004646:	e082      	b.n	800474e <UART_SetConfig+0x2e6>
 8004648:	2302      	movs	r3, #2
 800464a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800464e:	e07e      	b.n	800474e <UART_SetConfig+0x2e6>
 8004650:	2304      	movs	r3, #4
 8004652:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004656:	e07a      	b.n	800474e <UART_SetConfig+0x2e6>
 8004658:	2308      	movs	r3, #8
 800465a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800465e:	e076      	b.n	800474e <UART_SetConfig+0x2e6>
 8004660:	2310      	movs	r3, #16
 8004662:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004666:	e072      	b.n	800474e <UART_SetConfig+0x2e6>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a35      	ldr	r2, [pc, #212]	; (8004744 <UART_SetConfig+0x2dc>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d12a      	bne.n	80046c8 <UART_SetConfig+0x260>
 8004672:	4b30      	ldr	r3, [pc, #192]	; (8004734 <UART_SetConfig+0x2cc>)
 8004674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004678:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800467c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004680:	d01a      	beq.n	80046b8 <UART_SetConfig+0x250>
 8004682:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004686:	d81b      	bhi.n	80046c0 <UART_SetConfig+0x258>
 8004688:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800468c:	d00c      	beq.n	80046a8 <UART_SetConfig+0x240>
 800468e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004692:	d815      	bhi.n	80046c0 <UART_SetConfig+0x258>
 8004694:	2b00      	cmp	r3, #0
 8004696:	d003      	beq.n	80046a0 <UART_SetConfig+0x238>
 8004698:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800469c:	d008      	beq.n	80046b0 <UART_SetConfig+0x248>
 800469e:	e00f      	b.n	80046c0 <UART_SetConfig+0x258>
 80046a0:	2300      	movs	r3, #0
 80046a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046a6:	e052      	b.n	800474e <UART_SetConfig+0x2e6>
 80046a8:	2302      	movs	r3, #2
 80046aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046ae:	e04e      	b.n	800474e <UART_SetConfig+0x2e6>
 80046b0:	2304      	movs	r3, #4
 80046b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046b6:	e04a      	b.n	800474e <UART_SetConfig+0x2e6>
 80046b8:	2308      	movs	r3, #8
 80046ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046be:	e046      	b.n	800474e <UART_SetConfig+0x2e6>
 80046c0:	2310      	movs	r3, #16
 80046c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046c6:	e042      	b.n	800474e <UART_SetConfig+0x2e6>
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a17      	ldr	r2, [pc, #92]	; (800472c <UART_SetConfig+0x2c4>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d13a      	bne.n	8004748 <UART_SetConfig+0x2e0>
 80046d2:	4b18      	ldr	r3, [pc, #96]	; (8004734 <UART_SetConfig+0x2cc>)
 80046d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80046dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046e0:	d01a      	beq.n	8004718 <UART_SetConfig+0x2b0>
 80046e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046e6:	d81b      	bhi.n	8004720 <UART_SetConfig+0x2b8>
 80046e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046ec:	d00c      	beq.n	8004708 <UART_SetConfig+0x2a0>
 80046ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046f2:	d815      	bhi.n	8004720 <UART_SetConfig+0x2b8>
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d003      	beq.n	8004700 <UART_SetConfig+0x298>
 80046f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046fc:	d008      	beq.n	8004710 <UART_SetConfig+0x2a8>
 80046fe:	e00f      	b.n	8004720 <UART_SetConfig+0x2b8>
 8004700:	2300      	movs	r3, #0
 8004702:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004706:	e022      	b.n	800474e <UART_SetConfig+0x2e6>
 8004708:	2302      	movs	r3, #2
 800470a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800470e:	e01e      	b.n	800474e <UART_SetConfig+0x2e6>
 8004710:	2304      	movs	r3, #4
 8004712:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004716:	e01a      	b.n	800474e <UART_SetConfig+0x2e6>
 8004718:	2308      	movs	r3, #8
 800471a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800471e:	e016      	b.n	800474e <UART_SetConfig+0x2e6>
 8004720:	2310      	movs	r3, #16
 8004722:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004726:	e012      	b.n	800474e <UART_SetConfig+0x2e6>
 8004728:	efff69f3 	.word	0xefff69f3
 800472c:	40008000 	.word	0x40008000
 8004730:	40013800 	.word	0x40013800
 8004734:	40021000 	.word	0x40021000
 8004738:	40004400 	.word	0x40004400
 800473c:	40004800 	.word	0x40004800
 8004740:	40004c00 	.word	0x40004c00
 8004744:	40005000 	.word	0x40005000
 8004748:	2310      	movs	r3, #16
 800474a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a9f      	ldr	r2, [pc, #636]	; (80049d0 <UART_SetConfig+0x568>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d17a      	bne.n	800484e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004758:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800475c:	2b08      	cmp	r3, #8
 800475e:	d824      	bhi.n	80047aa <UART_SetConfig+0x342>
 8004760:	a201      	add	r2, pc, #4	; (adr r2, 8004768 <UART_SetConfig+0x300>)
 8004762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004766:	bf00      	nop
 8004768:	0800478d 	.word	0x0800478d
 800476c:	080047ab 	.word	0x080047ab
 8004770:	08004795 	.word	0x08004795
 8004774:	080047ab 	.word	0x080047ab
 8004778:	0800479b 	.word	0x0800479b
 800477c:	080047ab 	.word	0x080047ab
 8004780:	080047ab 	.word	0x080047ab
 8004784:	080047ab 	.word	0x080047ab
 8004788:	080047a3 	.word	0x080047a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800478c:	f7fe fd7e 	bl	800328c <HAL_RCC_GetPCLK1Freq>
 8004790:	61f8      	str	r0, [r7, #28]
        break;
 8004792:	e010      	b.n	80047b6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004794:	4b8f      	ldr	r3, [pc, #572]	; (80049d4 <UART_SetConfig+0x56c>)
 8004796:	61fb      	str	r3, [r7, #28]
        break;
 8004798:	e00d      	b.n	80047b6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800479a:	f7fe fcdf 	bl	800315c <HAL_RCC_GetSysClockFreq>
 800479e:	61f8      	str	r0, [r7, #28]
        break;
 80047a0:	e009      	b.n	80047b6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047a6:	61fb      	str	r3, [r7, #28]
        break;
 80047a8:	e005      	b.n	80047b6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80047aa:	2300      	movs	r3, #0
 80047ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80047b4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	f000 80fb 	beq.w	80049b4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	685a      	ldr	r2, [r3, #4]
 80047c2:	4613      	mov	r3, r2
 80047c4:	005b      	lsls	r3, r3, #1
 80047c6:	4413      	add	r3, r2
 80047c8:	69fa      	ldr	r2, [r7, #28]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d305      	bcc.n	80047da <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80047d4:	69fa      	ldr	r2, [r7, #28]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d903      	bls.n	80047e2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80047e0:	e0e8      	b.n	80049b4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	2200      	movs	r2, #0
 80047e6:	461c      	mov	r4, r3
 80047e8:	4615      	mov	r5, r2
 80047ea:	f04f 0200 	mov.w	r2, #0
 80047ee:	f04f 0300 	mov.w	r3, #0
 80047f2:	022b      	lsls	r3, r5, #8
 80047f4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80047f8:	0222      	lsls	r2, r4, #8
 80047fa:	68f9      	ldr	r1, [r7, #12]
 80047fc:	6849      	ldr	r1, [r1, #4]
 80047fe:	0849      	lsrs	r1, r1, #1
 8004800:	2000      	movs	r0, #0
 8004802:	4688      	mov	r8, r1
 8004804:	4681      	mov	r9, r0
 8004806:	eb12 0a08 	adds.w	sl, r2, r8
 800480a:	eb43 0b09 	adc.w	fp, r3, r9
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	603b      	str	r3, [r7, #0]
 8004816:	607a      	str	r2, [r7, #4]
 8004818:	e9d7 2300 	ldrd	r2, r3, [r7]
 800481c:	4650      	mov	r0, sl
 800481e:	4659      	mov	r1, fp
 8004820:	f7fb fcd2 	bl	80001c8 <__aeabi_uldivmod>
 8004824:	4602      	mov	r2, r0
 8004826:	460b      	mov	r3, r1
 8004828:	4613      	mov	r3, r2
 800482a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004832:	d308      	bcc.n	8004846 <UART_SetConfig+0x3de>
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800483a:	d204      	bcs.n	8004846 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	69ba      	ldr	r2, [r7, #24]
 8004842:	60da      	str	r2, [r3, #12]
 8004844:	e0b6      	b.n	80049b4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800484c:	e0b2      	b.n	80049b4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	69db      	ldr	r3, [r3, #28]
 8004852:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004856:	d15e      	bne.n	8004916 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004858:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800485c:	2b08      	cmp	r3, #8
 800485e:	d828      	bhi.n	80048b2 <UART_SetConfig+0x44a>
 8004860:	a201      	add	r2, pc, #4	; (adr r2, 8004868 <UART_SetConfig+0x400>)
 8004862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004866:	bf00      	nop
 8004868:	0800488d 	.word	0x0800488d
 800486c:	08004895 	.word	0x08004895
 8004870:	0800489d 	.word	0x0800489d
 8004874:	080048b3 	.word	0x080048b3
 8004878:	080048a3 	.word	0x080048a3
 800487c:	080048b3 	.word	0x080048b3
 8004880:	080048b3 	.word	0x080048b3
 8004884:	080048b3 	.word	0x080048b3
 8004888:	080048ab 	.word	0x080048ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800488c:	f7fe fcfe 	bl	800328c <HAL_RCC_GetPCLK1Freq>
 8004890:	61f8      	str	r0, [r7, #28]
        break;
 8004892:	e014      	b.n	80048be <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004894:	f7fe fd10 	bl	80032b8 <HAL_RCC_GetPCLK2Freq>
 8004898:	61f8      	str	r0, [r7, #28]
        break;
 800489a:	e010      	b.n	80048be <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800489c:	4b4d      	ldr	r3, [pc, #308]	; (80049d4 <UART_SetConfig+0x56c>)
 800489e:	61fb      	str	r3, [r7, #28]
        break;
 80048a0:	e00d      	b.n	80048be <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048a2:	f7fe fc5b 	bl	800315c <HAL_RCC_GetSysClockFreq>
 80048a6:	61f8      	str	r0, [r7, #28]
        break;
 80048a8:	e009      	b.n	80048be <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048ae:	61fb      	str	r3, [r7, #28]
        break;
 80048b0:	e005      	b.n	80048be <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80048b2:	2300      	movs	r3, #0
 80048b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80048bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d077      	beq.n	80049b4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	005a      	lsls	r2, r3, #1
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	085b      	lsrs	r3, r3, #1
 80048ce:	441a      	add	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	2b0f      	cmp	r3, #15
 80048de:	d916      	bls.n	800490e <UART_SetConfig+0x4a6>
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048e6:	d212      	bcs.n	800490e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	f023 030f 	bic.w	r3, r3, #15
 80048f0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	085b      	lsrs	r3, r3, #1
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	f003 0307 	and.w	r3, r3, #7
 80048fc:	b29a      	uxth	r2, r3
 80048fe:	8afb      	ldrh	r3, [r7, #22]
 8004900:	4313      	orrs	r3, r2
 8004902:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	8afa      	ldrh	r2, [r7, #22]
 800490a:	60da      	str	r2, [r3, #12]
 800490c:	e052      	b.n	80049b4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004914:	e04e      	b.n	80049b4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004916:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800491a:	2b08      	cmp	r3, #8
 800491c:	d827      	bhi.n	800496e <UART_SetConfig+0x506>
 800491e:	a201      	add	r2, pc, #4	; (adr r2, 8004924 <UART_SetConfig+0x4bc>)
 8004920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004924:	08004949 	.word	0x08004949
 8004928:	08004951 	.word	0x08004951
 800492c:	08004959 	.word	0x08004959
 8004930:	0800496f 	.word	0x0800496f
 8004934:	0800495f 	.word	0x0800495f
 8004938:	0800496f 	.word	0x0800496f
 800493c:	0800496f 	.word	0x0800496f
 8004940:	0800496f 	.word	0x0800496f
 8004944:	08004967 	.word	0x08004967
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004948:	f7fe fca0 	bl	800328c <HAL_RCC_GetPCLK1Freq>
 800494c:	61f8      	str	r0, [r7, #28]
        break;
 800494e:	e014      	b.n	800497a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004950:	f7fe fcb2 	bl	80032b8 <HAL_RCC_GetPCLK2Freq>
 8004954:	61f8      	str	r0, [r7, #28]
        break;
 8004956:	e010      	b.n	800497a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004958:	4b1e      	ldr	r3, [pc, #120]	; (80049d4 <UART_SetConfig+0x56c>)
 800495a:	61fb      	str	r3, [r7, #28]
        break;
 800495c:	e00d      	b.n	800497a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800495e:	f7fe fbfd 	bl	800315c <HAL_RCC_GetSysClockFreq>
 8004962:	61f8      	str	r0, [r7, #28]
        break;
 8004964:	e009      	b.n	800497a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004966:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800496a:	61fb      	str	r3, [r7, #28]
        break;
 800496c:	e005      	b.n	800497a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800496e:	2300      	movs	r3, #0
 8004970:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004978:	bf00      	nop
    }

    if (pclk != 0U)
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d019      	beq.n	80049b4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	085a      	lsrs	r2, r3, #1
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	441a      	add	r2, r3
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004992:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	2b0f      	cmp	r3, #15
 8004998:	d909      	bls.n	80049ae <UART_SetConfig+0x546>
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049a0:	d205      	bcs.n	80049ae <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	b29a      	uxth	r2, r3
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	60da      	str	r2, [r3, #12]
 80049ac:	e002      	b.n	80049b4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2200      	movs	r2, #0
 80049b8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80049c0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3728      	adds	r7, #40	; 0x28
 80049c8:	46bd      	mov	sp, r7
 80049ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049ce:	bf00      	nop
 80049d0:	40008000 	.word	0x40008000
 80049d4:	00f42400 	.word	0x00f42400

080049d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e4:	f003 0301 	and.w	r3, r3, #1
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d00a      	beq.n	8004a02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	430a      	orrs	r2, r1
 8004a00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d00a      	beq.n	8004a24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	430a      	orrs	r2, r1
 8004a22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a28:	f003 0304 	and.w	r3, r3, #4
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d00a      	beq.n	8004a46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	430a      	orrs	r2, r1
 8004a44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4a:	f003 0308 	and.w	r3, r3, #8
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00a      	beq.n	8004a68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	430a      	orrs	r2, r1
 8004a66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6c:	f003 0310 	and.w	r3, r3, #16
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d00a      	beq.n	8004a8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	430a      	orrs	r2, r1
 8004a88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8e:	f003 0320 	and.w	r3, r3, #32
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00a      	beq.n	8004aac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	430a      	orrs	r2, r1
 8004aaa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d01a      	beq.n	8004aee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	430a      	orrs	r2, r1
 8004acc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ad6:	d10a      	bne.n	8004aee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	430a      	orrs	r2, r1
 8004aec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d00a      	beq.n	8004b10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	430a      	orrs	r2, r1
 8004b0e:	605a      	str	r2, [r3, #4]
  }
}
 8004b10:	bf00      	nop
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b086      	sub	sp, #24
 8004b20:	af02      	add	r7, sp, #8
 8004b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b2c:	f7fc f852 	bl	8000bd4 <HAL_GetTick>
 8004b30:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 0308 	and.w	r3, r3, #8
 8004b3c:	2b08      	cmp	r3, #8
 8004b3e:	d10e      	bne.n	8004b5e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b44:	9300      	str	r3, [sp, #0]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 f82d 	bl	8004bae <UART_WaitOnFlagUntilTimeout>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d001      	beq.n	8004b5e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e023      	b.n	8004ba6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0304 	and.w	r3, r3, #4
 8004b68:	2b04      	cmp	r3, #4
 8004b6a:	d10e      	bne.n	8004b8a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b70:	9300      	str	r3, [sp, #0]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 f817 	bl	8004bae <UART_WaitOnFlagUntilTimeout>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d001      	beq.n	8004b8a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e00d      	b.n	8004ba6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2220      	movs	r2, #32
 8004b8e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2220      	movs	r2, #32
 8004b94:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3710      	adds	r7, #16
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}

08004bae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004bae:	b580      	push	{r7, lr}
 8004bb0:	b09c      	sub	sp, #112	; 0x70
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	60f8      	str	r0, [r7, #12]
 8004bb6:	60b9      	str	r1, [r7, #8]
 8004bb8:	603b      	str	r3, [r7, #0]
 8004bba:	4613      	mov	r3, r2
 8004bbc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bbe:	e0a5      	b.n	8004d0c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc6:	f000 80a1 	beq.w	8004d0c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bca:	f7fc f803 	bl	8000bd4 <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d302      	bcc.n	8004be0 <UART_WaitOnFlagUntilTimeout+0x32>
 8004bda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d13e      	bne.n	8004c5e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004be8:	e853 3f00 	ldrex	r3, [r3]
 8004bec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004bee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bf0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004bf4:	667b      	str	r3, [r7, #100]	; 0x64
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bfe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c00:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c02:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004c04:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004c06:	e841 2300 	strex	r3, r2, [r1]
 8004c0a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004c0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d1e6      	bne.n	8004be0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	3308      	adds	r3, #8
 8004c18:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c1c:	e853 3f00 	ldrex	r3, [r3]
 8004c20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c24:	f023 0301 	bic.w	r3, r3, #1
 8004c28:	663b      	str	r3, [r7, #96]	; 0x60
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	3308      	adds	r3, #8
 8004c30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004c32:	64ba      	str	r2, [r7, #72]	; 0x48
 8004c34:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c36:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004c38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c3a:	e841 2300 	strex	r3, r2, [r1]
 8004c3e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004c40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d1e5      	bne.n	8004c12 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2220      	movs	r2, #32
 8004c4a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2220      	movs	r2, #32
 8004c50:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e067      	b.n	8004d2e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0304 	and.w	r3, r3, #4
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d04f      	beq.n	8004d0c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	69db      	ldr	r3, [r3, #28]
 8004c72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c7a:	d147      	bne.n	8004d0c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c84:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c8e:	e853 3f00 	ldrex	r3, [r3]
 8004c92:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c96:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c9a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ca4:	637b      	str	r3, [r7, #52]	; 0x34
 8004ca6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004caa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004cac:	e841 2300 	strex	r3, r2, [r1]
 8004cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d1e6      	bne.n	8004c86 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	3308      	adds	r3, #8
 8004cbe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	e853 3f00 	ldrex	r3, [r3]
 8004cc6:	613b      	str	r3, [r7, #16]
   return(result);
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	f023 0301 	bic.w	r3, r3, #1
 8004cce:	66bb      	str	r3, [r7, #104]	; 0x68
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	3308      	adds	r3, #8
 8004cd6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004cd8:	623a      	str	r2, [r7, #32]
 8004cda:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cdc:	69f9      	ldr	r1, [r7, #28]
 8004cde:	6a3a      	ldr	r2, [r7, #32]
 8004ce0:	e841 2300 	strex	r3, r2, [r1]
 8004ce4:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ce6:	69bb      	ldr	r3, [r7, #24]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d1e5      	bne.n	8004cb8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2220      	movs	r2, #32
 8004cf0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2220      	movs	r2, #32
 8004cf6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2220      	movs	r2, #32
 8004cfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	e010      	b.n	8004d2e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	69da      	ldr	r2, [r3, #28]
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	4013      	ands	r3, r2
 8004d16:	68ba      	ldr	r2, [r7, #8]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	bf0c      	ite	eq
 8004d1c:	2301      	moveq	r3, #1
 8004d1e:	2300      	movne	r3, #0
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	461a      	mov	r2, r3
 8004d24:	79fb      	ldrb	r3, [r7, #7]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	f43f af4a 	beq.w	8004bc0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d2c:	2300      	movs	r3, #0
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3770      	adds	r7, #112	; 0x70
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
	...

08004d38 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b097      	sub	sp, #92	; 0x5c
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	4613      	mov	r3, r2
 8004d44:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	68ba      	ldr	r2, [r7, #8]
 8004d4a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	88fa      	ldrh	r2, [r7, #6]
 8004d50:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	88fa      	ldrh	r2, [r7, #6]
 8004d58:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d6a:	d10e      	bne.n	8004d8a <UART_Start_Receive_IT+0x52>
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	691b      	ldr	r3, [r3, #16]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d105      	bne.n	8004d80 <UART_Start_Receive_IT+0x48>
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004d7a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004d7e:	e02d      	b.n	8004ddc <UART_Start_Receive_IT+0xa4>
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	22ff      	movs	r2, #255	; 0xff
 8004d84:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004d88:	e028      	b.n	8004ddc <UART_Start_Receive_IT+0xa4>
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d10d      	bne.n	8004dae <UART_Start_Receive_IT+0x76>
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d104      	bne.n	8004da4 <UART_Start_Receive_IT+0x6c>
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	22ff      	movs	r2, #255	; 0xff
 8004d9e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004da2:	e01b      	b.n	8004ddc <UART_Start_Receive_IT+0xa4>
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	227f      	movs	r2, #127	; 0x7f
 8004da8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004dac:	e016      	b.n	8004ddc <UART_Start_Receive_IT+0xa4>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004db6:	d10d      	bne.n	8004dd4 <UART_Start_Receive_IT+0x9c>
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d104      	bne.n	8004dca <UART_Start_Receive_IT+0x92>
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	227f      	movs	r2, #127	; 0x7f
 8004dc4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004dc8:	e008      	b.n	8004ddc <UART_Start_Receive_IT+0xa4>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	223f      	movs	r2, #63	; 0x3f
 8004dce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004dd2:	e003      	b.n	8004ddc <UART_Start_Receive_IT+0xa4>
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2222      	movs	r2, #34	; 0x22
 8004de8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	3308      	adds	r3, #8
 8004df0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004df4:	e853 3f00 	ldrex	r3, [r3]
 8004df8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dfc:	f043 0301 	orr.w	r3, r3, #1
 8004e00:	657b      	str	r3, [r7, #84]	; 0x54
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	3308      	adds	r3, #8
 8004e08:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004e0a:	64ba      	str	r2, [r7, #72]	; 0x48
 8004e0c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e0e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004e10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e12:	e841 2300 	strex	r3, r2, [r1]
 8004e16:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004e18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d1e5      	bne.n	8004dea <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e26:	d107      	bne.n	8004e38 <UART_Start_Receive_IT+0x100>
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d103      	bne.n	8004e38 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	4a24      	ldr	r2, [pc, #144]	; (8004ec4 <UART_Start_Receive_IT+0x18c>)
 8004e34:	665a      	str	r2, [r3, #100]	; 0x64
 8004e36:	e002      	b.n	8004e3e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	4a23      	ldr	r2, [pc, #140]	; (8004ec8 <UART_Start_Receive_IT+0x190>)
 8004e3c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d019      	beq.n	8004e82 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e56:	e853 3f00 	ldrex	r3, [r3]
 8004e5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004e62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	461a      	mov	r2, r3
 8004e6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e6c:	637b      	str	r3, [r7, #52]	; 0x34
 8004e6e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e74:	e841 2300 	strex	r3, r2, [r1]
 8004e78:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d1e6      	bne.n	8004e4e <UART_Start_Receive_IT+0x116>
 8004e80:	e018      	b.n	8004eb4 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	e853 3f00 	ldrex	r3, [r3]
 8004e8e:	613b      	str	r3, [r7, #16]
   return(result);
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	f043 0320 	orr.w	r3, r3, #32
 8004e96:	653b      	str	r3, [r7, #80]	; 0x50
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ea0:	623b      	str	r3, [r7, #32]
 8004ea2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea4:	69f9      	ldr	r1, [r7, #28]
 8004ea6:	6a3a      	ldr	r2, [r7, #32]
 8004ea8:	e841 2300 	strex	r3, r2, [r1]
 8004eac:	61bb      	str	r3, [r7, #24]
   return(result);
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d1e6      	bne.n	8004e82 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	375c      	adds	r7, #92	; 0x5c
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
 8004ec2:	bf00      	nop
 8004ec4:	08005173 	.word	0x08005173
 8004ec8:	08005013 	.word	0x08005013

08004ecc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b095      	sub	sp, #84	; 0x54
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004edc:	e853 3f00 	ldrex	r3, [r3]
 8004ee0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ee8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	461a      	mov	r2, r3
 8004ef0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ef2:	643b      	str	r3, [r7, #64]	; 0x40
 8004ef4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004ef8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004efa:	e841 2300 	strex	r3, r2, [r1]
 8004efe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d1e6      	bne.n	8004ed4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	3308      	adds	r3, #8
 8004f0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f0e:	6a3b      	ldr	r3, [r7, #32]
 8004f10:	e853 3f00 	ldrex	r3, [r3]
 8004f14:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	f023 0301 	bic.w	r3, r3, #1
 8004f1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	3308      	adds	r3, #8
 8004f24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f26:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f28:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f2e:	e841 2300 	strex	r3, r2, [r1]
 8004f32:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d1e5      	bne.n	8004f06 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d118      	bne.n	8004f74 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	e853 3f00 	ldrex	r3, [r3]
 8004f4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	f023 0310 	bic.w	r3, r3, #16
 8004f56:	647b      	str	r3, [r7, #68]	; 0x44
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f60:	61bb      	str	r3, [r7, #24]
 8004f62:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f64:	6979      	ldr	r1, [r7, #20]
 8004f66:	69ba      	ldr	r2, [r7, #24]
 8004f68:	e841 2300 	strex	r3, r2, [r1]
 8004f6c:	613b      	str	r3, [r7, #16]
   return(result);
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1e6      	bne.n	8004f42 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2220      	movs	r2, #32
 8004f78:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004f86:	bf00      	nop
 8004f88:	3754      	adds	r7, #84	; 0x54
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr

08004f92 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b084      	sub	sp, #16
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f9e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004fb0:	68f8      	ldr	r0, [r7, #12]
 8004fb2:	f7ff fa43 	bl	800443c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fb6:	bf00      	nop
 8004fb8:	3710      	adds	r7, #16
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}

08004fbe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004fbe:	b580      	push	{r7, lr}
 8004fc0:	b088      	sub	sp, #32
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	e853 3f00 	ldrex	r3, [r3]
 8004fd2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fda:	61fb      	str	r3, [r7, #28]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	61bb      	str	r3, [r7, #24]
 8004fe6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe8:	6979      	ldr	r1, [r7, #20]
 8004fea:	69ba      	ldr	r2, [r7, #24]
 8004fec:	e841 2300 	strex	r3, r2, [r1]
 8004ff0:	613b      	str	r3, [r7, #16]
   return(result);
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d1e6      	bne.n	8004fc6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2220      	movs	r2, #32
 8004ffc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f7ff fa0f 	bl	8004428 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800500a:	bf00      	nop
 800500c:	3720      	adds	r7, #32
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}

08005012 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005012:	b580      	push	{r7, lr}
 8005014:	b096      	sub	sp, #88	; 0x58
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005020:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005028:	2b22      	cmp	r3, #34	; 0x22
 800502a:	f040 8094 	bne.w	8005156 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005034:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005038:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800503c:	b2d9      	uxtb	r1, r3
 800503e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005042:	b2da      	uxtb	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005048:	400a      	ands	r2, r1
 800504a:	b2d2      	uxtb	r2, r2
 800504c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005052:	1c5a      	adds	r2, r3, #1
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800505e:	b29b      	uxth	r3, r3
 8005060:	3b01      	subs	r3, #1
 8005062:	b29a      	uxth	r2, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005070:	b29b      	uxth	r3, r3
 8005072:	2b00      	cmp	r3, #0
 8005074:	d179      	bne.n	800516a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800507c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800507e:	e853 3f00 	ldrex	r3, [r3]
 8005082:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005086:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800508a:	653b      	str	r3, [r7, #80]	; 0x50
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	461a      	mov	r2, r3
 8005092:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005094:	647b      	str	r3, [r7, #68]	; 0x44
 8005096:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005098:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800509a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800509c:	e841 2300 	strex	r3, r2, [r1]
 80050a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80050a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d1e6      	bne.n	8005076 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	3308      	adds	r3, #8
 80050ae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b2:	e853 3f00 	ldrex	r3, [r3]
 80050b6:	623b      	str	r3, [r7, #32]
   return(result);
 80050b8:	6a3b      	ldr	r3, [r7, #32]
 80050ba:	f023 0301 	bic.w	r3, r3, #1
 80050be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	3308      	adds	r3, #8
 80050c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80050c8:	633a      	str	r2, [r7, #48]	; 0x30
 80050ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050d0:	e841 2300 	strex	r3, r2, [r1]
 80050d4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80050d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d1e5      	bne.n	80050a8 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2220      	movs	r2, #32
 80050e0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d12e      	bne.n	800514e <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	e853 3f00 	ldrex	r3, [r3]
 8005102:	60fb      	str	r3, [r7, #12]
   return(result);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f023 0310 	bic.w	r3, r3, #16
 800510a:	64bb      	str	r3, [r7, #72]	; 0x48
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	461a      	mov	r2, r3
 8005112:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005114:	61fb      	str	r3, [r7, #28]
 8005116:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005118:	69b9      	ldr	r1, [r7, #24]
 800511a:	69fa      	ldr	r2, [r7, #28]
 800511c:	e841 2300 	strex	r3, r2, [r1]
 8005120:	617b      	str	r3, [r7, #20]
   return(result);
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d1e6      	bne.n	80050f6 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	69db      	ldr	r3, [r3, #28]
 800512e:	f003 0310 	and.w	r3, r3, #16
 8005132:	2b10      	cmp	r3, #16
 8005134:	d103      	bne.n	800513e <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2210      	movs	r2, #16
 800513c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005144:	4619      	mov	r1, r3
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f7ff f982 	bl	8004450 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800514c:	e00d      	b.n	800516a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f7fb fb1a 	bl	8000788 <HAL_UART_RxCpltCallback>
}
 8005154:	e009      	b.n	800516a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	8b1b      	ldrh	r3, [r3, #24]
 800515c:	b29a      	uxth	r2, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f042 0208 	orr.w	r2, r2, #8
 8005166:	b292      	uxth	r2, r2
 8005168:	831a      	strh	r2, [r3, #24]
}
 800516a:	bf00      	nop
 800516c:	3758      	adds	r7, #88	; 0x58
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}

08005172 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005172:	b580      	push	{r7, lr}
 8005174:	b096      	sub	sp, #88	; 0x58
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005180:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005188:	2b22      	cmp	r3, #34	; 0x22
 800518a:	f040 8094 	bne.w	80052b6 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005194:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800519c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800519e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80051a2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80051a6:	4013      	ands	r3, r2
 80051a8:	b29a      	uxth	r2, r3
 80051aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051ac:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051b2:	1c9a      	adds	r2, r3, #2
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80051be:	b29b      	uxth	r3, r3
 80051c0:	3b01      	subs	r3, #1
 80051c2:	b29a      	uxth	r2, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d179      	bne.n	80052ca <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051de:	e853 3f00 	ldrex	r3, [r3]
 80051e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80051e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80051ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	461a      	mov	r2, r3
 80051f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051f4:	643b      	str	r3, [r7, #64]	; 0x40
 80051f6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80051fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80051fc:	e841 2300 	strex	r3, r2, [r1]
 8005200:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005204:	2b00      	cmp	r3, #0
 8005206:	d1e6      	bne.n	80051d6 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	3308      	adds	r3, #8
 800520e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005210:	6a3b      	ldr	r3, [r7, #32]
 8005212:	e853 3f00 	ldrex	r3, [r3]
 8005216:	61fb      	str	r3, [r7, #28]
   return(result);
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	f023 0301 	bic.w	r3, r3, #1
 800521e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	3308      	adds	r3, #8
 8005226:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005228:	62fa      	str	r2, [r7, #44]	; 0x2c
 800522a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800522e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005230:	e841 2300 	strex	r3, r2, [r1]
 8005234:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005238:	2b00      	cmp	r3, #0
 800523a:	d1e5      	bne.n	8005208 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2220      	movs	r2, #32
 8005240:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800524c:	2b01      	cmp	r3, #1
 800524e:	d12e      	bne.n	80052ae <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	e853 3f00 	ldrex	r3, [r3]
 8005262:	60bb      	str	r3, [r7, #8]
   return(result);
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	f023 0310 	bic.w	r3, r3, #16
 800526a:	647b      	str	r3, [r7, #68]	; 0x44
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	461a      	mov	r2, r3
 8005272:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005274:	61bb      	str	r3, [r7, #24]
 8005276:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005278:	6979      	ldr	r1, [r7, #20]
 800527a:	69ba      	ldr	r2, [r7, #24]
 800527c:	e841 2300 	strex	r3, r2, [r1]
 8005280:	613b      	str	r3, [r7, #16]
   return(result);
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d1e6      	bne.n	8005256 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	69db      	ldr	r3, [r3, #28]
 800528e:	f003 0310 	and.w	r3, r3, #16
 8005292:	2b10      	cmp	r3, #16
 8005294:	d103      	bne.n	800529e <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2210      	movs	r2, #16
 800529c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80052a4:	4619      	mov	r1, r3
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f7ff f8d2 	bl	8004450 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80052ac:	e00d      	b.n	80052ca <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f7fb fa6a 	bl	8000788 <HAL_UART_RxCpltCallback>
}
 80052b4:	e009      	b.n	80052ca <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	8b1b      	ldrh	r3, [r3, #24]
 80052bc:	b29a      	uxth	r2, r3
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f042 0208 	orr.w	r2, r2, #8
 80052c6:	b292      	uxth	r2, r2
 80052c8:	831a      	strh	r2, [r3, #24]
}
 80052ca:	bf00      	nop
 80052cc:	3758      	adds	r7, #88	; 0x58
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}

080052d2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80052d2:	b480      	push	{r7}
 80052d4:	b083      	sub	sp, #12
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80052da:	bf00      	nop
 80052dc:	370c      	adds	r7, #12
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr

080052e6 <memset>:
 80052e6:	4402      	add	r2, r0
 80052e8:	4603      	mov	r3, r0
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d100      	bne.n	80052f0 <memset+0xa>
 80052ee:	4770      	bx	lr
 80052f0:	f803 1b01 	strb.w	r1, [r3], #1
 80052f4:	e7f9      	b.n	80052ea <memset+0x4>
	...

080052f8 <__libc_init_array>:
 80052f8:	b570      	push	{r4, r5, r6, lr}
 80052fa:	4d0d      	ldr	r5, [pc, #52]	; (8005330 <__libc_init_array+0x38>)
 80052fc:	4c0d      	ldr	r4, [pc, #52]	; (8005334 <__libc_init_array+0x3c>)
 80052fe:	1b64      	subs	r4, r4, r5
 8005300:	10a4      	asrs	r4, r4, #2
 8005302:	2600      	movs	r6, #0
 8005304:	42a6      	cmp	r6, r4
 8005306:	d109      	bne.n	800531c <__libc_init_array+0x24>
 8005308:	4d0b      	ldr	r5, [pc, #44]	; (8005338 <__libc_init_array+0x40>)
 800530a:	4c0c      	ldr	r4, [pc, #48]	; (800533c <__libc_init_array+0x44>)
 800530c:	f000 f818 	bl	8005340 <_init>
 8005310:	1b64      	subs	r4, r4, r5
 8005312:	10a4      	asrs	r4, r4, #2
 8005314:	2600      	movs	r6, #0
 8005316:	42a6      	cmp	r6, r4
 8005318:	d105      	bne.n	8005326 <__libc_init_array+0x2e>
 800531a:	bd70      	pop	{r4, r5, r6, pc}
 800531c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005320:	4798      	blx	r3
 8005322:	3601      	adds	r6, #1
 8005324:	e7ee      	b.n	8005304 <__libc_init_array+0xc>
 8005326:	f855 3b04 	ldr.w	r3, [r5], #4
 800532a:	4798      	blx	r3
 800532c:	3601      	adds	r6, #1
 800532e:	e7f2      	b.n	8005316 <__libc_init_array+0x1e>
 8005330:	080053a8 	.word	0x080053a8
 8005334:	080053a8 	.word	0x080053a8
 8005338:	080053a8 	.word	0x080053a8
 800533c:	080053ac 	.word	0x080053ac

08005340 <_init>:
 8005340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005342:	bf00      	nop
 8005344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005346:	bc08      	pop	{r3}
 8005348:	469e      	mov	lr, r3
 800534a:	4770      	bx	lr

0800534c <_fini>:
 800534c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800534e:	bf00      	nop
 8005350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005352:	bc08      	pop	{r3}
 8005354:	469e      	mov	lr, r3
 8005356:	4770      	bx	lr
