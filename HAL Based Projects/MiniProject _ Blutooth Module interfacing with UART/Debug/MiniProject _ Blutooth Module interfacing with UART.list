
MiniProject _ Blutooth Module interfacing with UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005da4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08005f2c  08005f2c  00015f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f74  08005f74  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005f74  08005f74  00015f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f7c  08005f7c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f7c  08005f7c  00015f7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f80  08005f80  00015f80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005f84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  2000000c  08005f90  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000174  08005f90  00020174  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014a7d  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028a0  00000000  00000000  00034afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001308  00000000  00000000  000373a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ede  00000000  00000000  000386a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027ed1  00000000  00000000  00039586  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015bbd  00000000  00000000  00061457  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00101cb5  00000000  00000000  00077014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000520c  00000000  00000000  00178ccc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a8  00000000  00000000  0017ded8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005f14 	.word	0x08005f14

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005f14 	.word	0x08005f14

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ca:	f000 fc4e 	bl	8000d6a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ce:	f000 f857 	bl	8000580 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d2:	f000 f9ad 	bl	8000830 <MX_GPIO_Init>
  MX_ADC1_Init();
 80004d6:	f000 f8a5 	bl	8000624 <MX_ADC1_Init>
  MX_TIM2_Init();
 80004da:	f000 f8f7 	bl	80006cc <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80004de:	f000 f977 	bl	80007d0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADCEx_Calibration_Start(&hadc1,ADC_SINGLE_ENDED);// Calibrate The ADC On Power-Up For Better Accuracy
 80004e2:	217f      	movs	r1, #127	; 0x7f
 80004e4:	481f      	ldr	r0, [pc, #124]	; (8000564 <main+0xa0>)
 80004e6:	f001 fa2d 	bl	8001944 <HAL_ADCEx_Calibration_Start>
  HAL_UART_Receive_IT(&huart1, RX_BUFFER, Buffer_len); // START THE UART AT THE FIRST INTERRUPTION
 80004ea:	2201      	movs	r2, #1
 80004ec:	491e      	ldr	r1, [pc, #120]	; (8000568 <main+0xa4>)
 80004ee:	481f      	ldr	r0, [pc, #124]	; (800056c <main+0xa8>)
 80004f0:	f004 fa4c 	bl	800498c <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // START THE TIMER2 IN THE PWM MODE
 80004f4:	2100      	movs	r1, #0
 80004f6:	481e      	ldr	r0, [pc, #120]	; (8000570 <main+0xac>)
 80004f8:	f003 fa5e 	bl	80039b8 <HAL_TIM_PWM_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	// Start ADC Conversion
	HAL_ADC_Start(&hadc1);
 80004fc:	4819      	ldr	r0, [pc, #100]	; (8000564 <main+0xa0>)
 80004fe:	f000 ff49 	bl	8001394 <HAL_ADC_Start>
	// Poll ADC1 Perihperal & TimeOut = 1mSec
    HAL_ADC_PollForConversion(&hadc1, 5);
 8000502:	2105      	movs	r1, #5
 8000504:	4817      	ldr	r0, [pc, #92]	; (8000564 <main+0xa0>)
 8000506:	f000 ffff 	bl	8001508 <HAL_ADC_PollForConversion>
	// Read The ADC Conversion Result & Map It To PWM DutyCycle
    ADC_Value = HAL_ADC_GetValue(&hadc1);
 800050a:	4816      	ldr	r0, [pc, #88]	; (8000564 <main+0xa0>)
 800050c:	f001 f8d4 	bl	80016b8 <HAL_ADC_GetValue>
 8000510:	4603      	mov	r3, r0
 8000512:	b29a      	uxth	r2, r3
 8000514:	4b17      	ldr	r3, [pc, #92]	; (8000574 <main+0xb0>)
 8000516:	801a      	strh	r2, [r3, #0]
    CC_value = MAP(ADC_Value,0,4096,0,65536);
 8000518:	4b16      	ldr	r3, [pc, #88]	; (8000574 <main+0xb0>)
 800051a:	881b      	ldrh	r3, [r3, #0]
 800051c:	4618      	mov	r0, r3
 800051e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000522:	9300      	str	r3, [sp, #0]
 8000524:	2300      	movs	r3, #0
 8000526:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800052a:	2100      	movs	r1, #0
 800052c:	f000 fa46 	bl	80009bc <MAP>
 8000530:	4603      	mov	r3, r0
 8000532:	4a11      	ldr	r2, [pc, #68]	; (8000578 <main+0xb4>)
 8000534:	6013      	str	r3, [r2, #0]
	TIM2->CCR1 = CC_value;
 8000536:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800053a:	4b0f      	ldr	r3, [pc, #60]	; (8000578 <main+0xb4>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	6353      	str	r3, [r2, #52]	; 0x34
    duty_cycle = (CC_value / ARR_value)*100;
 8000540:	4b0d      	ldr	r3, [pc, #52]	; (8000578 <main+0xb4>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	0c1b      	lsrs	r3, r3, #16
 8000546:	2264      	movs	r2, #100	; 0x64
 8000548:	fb02 f303 	mul.w	r3, r2, r3
 800054c:	ee07 3a90 	vmov	s15, r3
 8000550:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000554:	4b09      	ldr	r3, [pc, #36]	; (800057c <main+0xb8>)
 8000556:	edc3 7a00 	vstr	s15, [r3]
	HAL_Delay(5);
 800055a:	2005      	movs	r0, #5
 800055c:	f000 fc7a 	bl	8000e54 <HAL_Delay>
	HAL_ADC_Start(&hadc1);
 8000560:	e7cc      	b.n	80004fc <main+0x38>
 8000562:	bf00      	nop
 8000564:	20000028 	.word	0x20000028
 8000568:	2000015c 	.word	0x2000015c
 800056c:	200000d8 	.word	0x200000d8
 8000570:	2000008c 	.word	0x2000008c
 8000574:	20000164 	.word	0x20000164
 8000578:	20000168 	.word	0x20000168
 800057c:	2000016c 	.word	0x2000016c

08000580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b096      	sub	sp, #88	; 0x58
 8000584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000586:	f107 0314 	add.w	r3, r7, #20
 800058a:	2244      	movs	r2, #68	; 0x44
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f005 fc93 	bl	8005eba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000594:	463b      	mov	r3, r7
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	605a      	str	r2, [r3, #4]
 800059c:	609a      	str	r2, [r3, #8]
 800059e:	60da      	str	r2, [r3, #12]
 80005a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005a2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005a6:	f001 fe3d 	bl	8002224 <HAL_PWREx_ControlVoltageScaling>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005b0:	f000 fa20 	bl	80009f4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005b4:	2310      	movs	r3, #16
 80005b6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005b8:	2301      	movs	r3, #1
 80005ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005bc:	2300      	movs	r3, #0
 80005be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005c0:	2360      	movs	r3, #96	; 0x60
 80005c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c4:	2302      	movs	r3, #2
 80005c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005c8:	2301      	movs	r3, #1
 80005ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005cc:	2301      	movs	r3, #1
 80005ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 36;
 80005d0:	2324      	movs	r3, #36	; 0x24
 80005d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005d4:	2307      	movs	r3, #7
 80005d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005d8:	2302      	movs	r3, #2
 80005da:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005dc:	2302      	movs	r3, #2
 80005de:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e0:	f107 0314 	add.w	r3, r7, #20
 80005e4:	4618      	mov	r0, r3
 80005e6:	f001 fe73 	bl	80022d0 <HAL_RCC_OscConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80005f0:	f000 fa00 	bl	80009f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f4:	230f      	movs	r3, #15
 80005f6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f8:	2303      	movs	r3, #3
 80005fa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000608:	463b      	mov	r3, r7
 800060a:	2104      	movs	r1, #4
 800060c:	4618      	mov	r0, r3
 800060e:	f002 fa3b 	bl	8002a88 <HAL_RCC_ClockConfig>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000618:	f000 f9ec 	bl	80009f4 <Error_Handler>
  }
}
 800061c:	bf00      	nop
 800061e:	3758      	adds	r7, #88	; 0x58
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}

08000624 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800062a:	1d3b      	adds	r3, r7, #4
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000634:	4b23      	ldr	r3, [pc, #140]	; (80006c4 <MX_ADC1_Init+0xa0>)
 8000636:	4a24      	ldr	r2, [pc, #144]	; (80006c8 <MX_ADC1_Init+0xa4>)
 8000638:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800063a:	4b22      	ldr	r3, [pc, #136]	; (80006c4 <MX_ADC1_Init+0xa0>)
 800063c:	2200      	movs	r2, #0
 800063e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000640:	4b20      	ldr	r3, [pc, #128]	; (80006c4 <MX_ADC1_Init+0xa0>)
 8000642:	2208      	movs	r2, #8
 8000644:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000646:	4b1f      	ldr	r3, [pc, #124]	; (80006c4 <MX_ADC1_Init+0xa0>)
 8000648:	2200      	movs	r2, #0
 800064a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800064c:	4b1d      	ldr	r3, [pc, #116]	; (80006c4 <MX_ADC1_Init+0xa0>)
 800064e:	2200      	movs	r2, #0
 8000650:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000652:	4b1c      	ldr	r3, [pc, #112]	; (80006c4 <MX_ADC1_Init+0xa0>)
 8000654:	2204      	movs	r2, #4
 8000656:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000658:	4b1a      	ldr	r3, [pc, #104]	; (80006c4 <MX_ADC1_Init+0xa0>)
 800065a:	2200      	movs	r2, #0
 800065c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800065e:	4b19      	ldr	r3, [pc, #100]	; (80006c4 <MX_ADC1_Init+0xa0>)
 8000660:	2200      	movs	r2, #0
 8000662:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000664:	4b17      	ldr	r3, [pc, #92]	; (80006c4 <MX_ADC1_Init+0xa0>)
 8000666:	2201      	movs	r2, #1
 8000668:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800066a:	4b16      	ldr	r3, [pc, #88]	; (80006c4 <MX_ADC1_Init+0xa0>)
 800066c:	2200      	movs	r2, #0
 800066e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000672:	4b14      	ldr	r3, [pc, #80]	; (80006c4 <MX_ADC1_Init+0xa0>)
 8000674:	2200      	movs	r2, #0
 8000676:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000678:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <MX_ADC1_Init+0xa0>)
 800067a:	2200      	movs	r2, #0
 800067c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800067e:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <MX_ADC1_Init+0xa0>)
 8000680:	2200      	movs	r2, #0
 8000682:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000686:	4b0f      	ldr	r3, [pc, #60]	; (80006c4 <MX_ADC1_Init+0xa0>)
 8000688:	2200      	movs	r2, #0
 800068a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800068c:	4b0d      	ldr	r3, [pc, #52]	; (80006c4 <MX_ADC1_Init+0xa0>)
 800068e:	2200      	movs	r2, #0
 8000690:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000694:	480b      	ldr	r0, [pc, #44]	; (80006c4 <MX_ADC1_Init+0xa0>)
 8000696:	f000 fd27 	bl	80010e8 <HAL_ADC_Init>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 80006a0:	f000 f9a8 	bl	80009f4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006a4:	2300      	movs	r3, #0
 80006a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006a8:	1d3b      	adds	r3, r7, #4
 80006aa:	4619      	mov	r1, r3
 80006ac:	4805      	ldr	r0, [pc, #20]	; (80006c4 <MX_ADC1_Init+0xa0>)
 80006ae:	f001 f9a9 	bl	8001a04 <HAL_ADCEx_MultiModeConfigChannel>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80006b8:	f000 f99c 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006bc:	bf00      	nop
 80006be:	3710      	adds	r7, #16
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20000028 	.word	0x20000028
 80006c8:	50040000 	.word	0x50040000

080006cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b08e      	sub	sp, #56	; 0x38
 80006d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006e0:	f107 031c 	add.w	r3, r7, #28
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006ec:	463b      	mov	r3, r7
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
 80006f6:	60da      	str	r2, [r3, #12]
 80006f8:	611a      	str	r2, [r3, #16]
 80006fa:	615a      	str	r2, [r3, #20]
 80006fc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006fe:	4b33      	ldr	r3, [pc, #204]	; (80007cc <MX_TIM2_Init+0x100>)
 8000700:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000704:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 881;
 8000706:	4b31      	ldr	r3, [pc, #196]	; (80007cc <MX_TIM2_Init+0x100>)
 8000708:	f240 3271 	movw	r2, #881	; 0x371
 800070c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800070e:	4b2f      	ldr	r3, [pc, #188]	; (80007cc <MX_TIM2_Init+0x100>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 225;
 8000714:	4b2d      	ldr	r3, [pc, #180]	; (80007cc <MX_TIM2_Init+0x100>)
 8000716:	22e1      	movs	r2, #225	; 0xe1
 8000718:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800071a:	4b2c      	ldr	r3, [pc, #176]	; (80007cc <MX_TIM2_Init+0x100>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000720:	4b2a      	ldr	r3, [pc, #168]	; (80007cc <MX_TIM2_Init+0x100>)
 8000722:	2200      	movs	r2, #0
 8000724:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000726:	4829      	ldr	r0, [pc, #164]	; (80007cc <MX_TIM2_Init+0x100>)
 8000728:	f003 f88e 	bl	8003848 <HAL_TIM_Base_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000732:	f000 f95f 	bl	80009f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000736:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800073a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800073c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000740:	4619      	mov	r1, r3
 8000742:	4822      	ldr	r0, [pc, #136]	; (80007cc <MX_TIM2_Init+0x100>)
 8000744:	f003 fb52 	bl	8003dec <HAL_TIM_ConfigClockSource>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800074e:	f000 f951 	bl	80009f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000752:	481e      	ldr	r0, [pc, #120]	; (80007cc <MX_TIM2_Init+0x100>)
 8000754:	f003 f8cf 	bl	80038f6 <HAL_TIM_PWM_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800075e:	f000 f949 	bl	80009f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000762:	2300      	movs	r3, #0
 8000764:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000766:	2300      	movs	r3, #0
 8000768:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800076a:	f107 031c 	add.w	r3, r7, #28
 800076e:	4619      	mov	r1, r3
 8000770:	4816      	ldr	r0, [pc, #88]	; (80007cc <MX_TIM2_Init+0x100>)
 8000772:	f004 f835 	bl	80047e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800077c:	f000 f93a 	bl	80009f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000780:	2360      	movs	r3, #96	; 0x60
 8000782:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000784:	2300      	movs	r3, #0
 8000786:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000788:	2300      	movs	r3, #0
 800078a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800078c:	2300      	movs	r3, #0
 800078e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000790:	463b      	mov	r3, r7
 8000792:	2200      	movs	r2, #0
 8000794:	4619      	mov	r1, r3
 8000796:	480d      	ldr	r0, [pc, #52]	; (80007cc <MX_TIM2_Init+0x100>)
 8000798:	f003 fa14 	bl	8003bc4 <HAL_TIM_PWM_ConfigChannel>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80007a2:	f000 f927 	bl	80009f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007a6:	463b      	mov	r3, r7
 80007a8:	2204      	movs	r2, #4
 80007aa:	4619      	mov	r1, r3
 80007ac:	4807      	ldr	r0, [pc, #28]	; (80007cc <MX_TIM2_Init+0x100>)
 80007ae:	f003 fa09 	bl	8003bc4 <HAL_TIM_PWM_ConfigChannel>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80007b8:	f000 f91c 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80007bc:	4803      	ldr	r0, [pc, #12]	; (80007cc <MX_TIM2_Init+0x100>)
 80007be:	f000 f9cb 	bl	8000b58 <HAL_TIM_MspPostInit>

}
 80007c2:	bf00      	nop
 80007c4:	3738      	adds	r7, #56	; 0x38
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	2000008c 	.word	0x2000008c

080007d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007d4:	4b14      	ldr	r3, [pc, #80]	; (8000828 <MX_USART1_UART_Init+0x58>)
 80007d6:	4a15      	ldr	r2, [pc, #84]	; (800082c <MX_USART1_UART_Init+0x5c>)
 80007d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80007da:	4b13      	ldr	r3, [pc, #76]	; (8000828 <MX_USART1_UART_Init+0x58>)
 80007dc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80007e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007e2:	4b11      	ldr	r3, [pc, #68]	; (8000828 <MX_USART1_UART_Init+0x58>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007e8:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <MX_USART1_UART_Init+0x58>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007ee:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <MX_USART1_UART_Init+0x58>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007f4:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <MX_USART1_UART_Init+0x58>)
 80007f6:	220c      	movs	r2, #12
 80007f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <MX_USART1_UART_Init+0x58>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000800:	4b09      	ldr	r3, [pc, #36]	; (8000828 <MX_USART1_UART_Init+0x58>)
 8000802:	2200      	movs	r2, #0
 8000804:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <MX_USART1_UART_Init+0x58>)
 8000808:	2200      	movs	r2, #0
 800080a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <MX_USART1_UART_Init+0x58>)
 800080e:	2200      	movs	r2, #0
 8000810:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000812:	4805      	ldr	r0, [pc, #20]	; (8000828 <MX_USART1_UART_Init+0x58>)
 8000814:	f004 f86c 	bl	80048f0 <HAL_UART_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800081e:	f000 f8e9 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	200000d8 	.word	0x200000d8
 800082c:	40013800 	.word	0x40013800

08000830 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b088      	sub	sp, #32
 8000834:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000836:	f107 030c 	add.w	r3, r7, #12
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
 8000844:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000846:	4b22      	ldr	r3, [pc, #136]	; (80008d0 <MX_GPIO_Init+0xa0>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084a:	4a21      	ldr	r2, [pc, #132]	; (80008d0 <MX_GPIO_Init+0xa0>)
 800084c:	f043 0304 	orr.w	r3, r3, #4
 8000850:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000852:	4b1f      	ldr	r3, [pc, #124]	; (80008d0 <MX_GPIO_Init+0xa0>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000856:	f003 0304 	and.w	r3, r3, #4
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	4b1c      	ldr	r3, [pc, #112]	; (80008d0 <MX_GPIO_Init+0xa0>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000862:	4a1b      	ldr	r2, [pc, #108]	; (80008d0 <MX_GPIO_Init+0xa0>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	64d3      	str	r3, [r2, #76]	; 0x4c
 800086a:	4b19      	ldr	r3, [pc, #100]	; (80008d0 <MX_GPIO_Init+0xa0>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8000876:	2200      	movs	r2, #0
 8000878:	2106      	movs	r1, #6
 800087a:	4816      	ldr	r0, [pc, #88]	; (80008d4 <MX_GPIO_Init+0xa4>)
 800087c:	f001 fcac 	bl	80021d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000880:	2200      	movs	r2, #0
 8000882:	2120      	movs	r1, #32
 8000884:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000888:	f001 fca6 	bl	80021d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800088c:	2306      	movs	r3, #6
 800088e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000890:	2301      	movs	r3, #1
 8000892:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000898:	2300      	movs	r3, #0
 800089a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800089c:	f107 030c 	add.w	r3, r7, #12
 80008a0:	4619      	mov	r1, r3
 80008a2:	480c      	ldr	r0, [pc, #48]	; (80008d4 <MX_GPIO_Init+0xa4>)
 80008a4:	f001 faee 	bl	8001e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80008a8:	2320      	movs	r3, #32
 80008aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ac:	2301      	movs	r3, #1
 80008ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b4:	2300      	movs	r3, #0
 80008b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b8:	f107 030c 	add.w	r3, r7, #12
 80008bc:	4619      	mov	r1, r3
 80008be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c2:	f001 fadf 	bl	8001e84 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008c6:	bf00      	nop
 80008c8:	3720      	adds	r7, #32
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40021000 	.word	0x40021000
 80008d4:	48000800 	.word	0x48000800

080008d8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

// Callback pour la réception UART
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]

	// Adjust the capture pulse every 0.1s. once it attend the maximum (timer period) reset to 100 (alpha = 0.1);

	//Check the Cplt callback function call belongs to the UART1 instance.
	if (huart == &huart1) {
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	4a32      	ldr	r2, [pc, #200]	; (80009ac <HAL_UART_RxCpltCallback+0xd4>)
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d15c      	bne.n	80009a2 <HAL_UART_RxCpltCallback+0xca>
    // Commande reçue, effectuez des actions en fonction de RX_BUFFER[0]

    switch (RX_BUFFER[0]){
 80008e8:	4b31      	ldr	r3, [pc, #196]	; (80009b0 <HAL_UART_RxCpltCallback+0xd8>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	3b30      	subs	r3, #48	; 0x30
 80008ee:	2b04      	cmp	r3, #4
 80008f0:	d852      	bhi.n	8000998 <HAL_UART_RxCpltCallback+0xc0>
 80008f2:	a201      	add	r2, pc, #4	; (adr r2, 80008f8 <HAL_UART_RxCpltCallback+0x20>)
 80008f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008f8:	0800090d 	.word	0x0800090d
 80008fc:	08000937 	.word	0x08000937
 8000900:	08000949 	.word	0x08000949
 8000904:	0800095b 	.word	0x0800095b
 8000908:	0800096f 	.word	0x0800096f
     case '0':
        // Allumer la LED correspondante (par exemple, GPIOD12)
    	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 800090c:	2200      	movs	r2, #0
 800090e:	2120      	movs	r1, #32
 8000910:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000914:	f001 fc60 	bl	80021d8 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1 | GPIO_PIN_2, 0);
 8000918:	2200      	movs	r2, #0
 800091a:	2106      	movs	r1, #6
 800091c:	4825      	ldr	r0, [pc, #148]	; (80009b4 <HAL_UART_RxCpltCallback+0xdc>)
 800091e:	f001 fc5b 	bl	80021d8 <HAL_GPIO_WritePin>
    	  LEDs[0]='0';LEDs[1]='0';LEDs[2]='0';
 8000922:	4b25      	ldr	r3, [pc, #148]	; (80009b8 <HAL_UART_RxCpltCallback+0xe0>)
 8000924:	2230      	movs	r2, #48	; 0x30
 8000926:	701a      	strb	r2, [r3, #0]
 8000928:	4b23      	ldr	r3, [pc, #140]	; (80009b8 <HAL_UART_RxCpltCallback+0xe0>)
 800092a:	2230      	movs	r2, #48	; 0x30
 800092c:	705a      	strb	r2, [r3, #1]
 800092e:	4b22      	ldr	r3, [pc, #136]	; (80009b8 <HAL_UART_RxCpltCallback+0xe0>)
 8000930:	2230      	movs	r2, #48	; 0x30
 8000932:	709a      	strb	r2, [r3, #2]
		  break;
 8000934:	e030      	b.n	8000998 <HAL_UART_RxCpltCallback+0xc0>

      case '1':
          // Allumer la LED correspondante (par exemple, GPIOD12)
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 1);
 8000936:	2201      	movs	r2, #1
 8000938:	2102      	movs	r1, #2
 800093a:	481e      	ldr	r0, [pc, #120]	; (80009b4 <HAL_UART_RxCpltCallback+0xdc>)
 800093c:	f001 fc4c 	bl	80021d8 <HAL_GPIO_WritePin>
		  LEDs[0]='B';
 8000940:	4b1d      	ldr	r3, [pc, #116]	; (80009b8 <HAL_UART_RxCpltCallback+0xe0>)
 8000942:	2242      	movs	r2, #66	; 0x42
 8000944:	701a      	strb	r2, [r3, #0]
		  break;
 8000946:	e027      	b.n	8000998 <HAL_UART_RxCpltCallback+0xc0>

      case '2':
          // Allumer la LED correspondante (par exemple, GPIOD13)
    	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 1);
 8000948:	2201      	movs	r2, #1
 800094a:	2104      	movs	r1, #4
 800094c:	4819      	ldr	r0, [pc, #100]	; (80009b4 <HAL_UART_RxCpltCallback+0xdc>)
 800094e:	f001 fc43 	bl	80021d8 <HAL_GPIO_WritePin>
		  LEDs[1]='G';
 8000952:	4b19      	ldr	r3, [pc, #100]	; (80009b8 <HAL_UART_RxCpltCallback+0xe0>)
 8000954:	2247      	movs	r2, #71	; 0x47
 8000956:	705a      	strb	r2, [r3, #1]
          break;
 8000958:	e01e      	b.n	8000998 <HAL_UART_RxCpltCallback+0xc0>

      case '3':
        // Allumer la LED correspondante (par exemple, GPIOD13)
    	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 800095a:	2201      	movs	r2, #1
 800095c:	2120      	movs	r1, #32
 800095e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000962:	f001 fc39 	bl	80021d8 <HAL_GPIO_WritePin>
		  LEDs[2]='Y';
 8000966:	4b14      	ldr	r3, [pc, #80]	; (80009b8 <HAL_UART_RxCpltCallback+0xe0>)
 8000968:	2259      	movs	r2, #89	; 0x59
 800096a:	709a      	strb	r2, [r3, #2]
        break;
 800096c:	e014      	b.n	8000998 <HAL_UART_RxCpltCallback+0xc0>

      case '4':
         // Allumer la LED correspondante (par exemple, GPIOD12)
     	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 800096e:	2201      	movs	r2, #1
 8000970:	2120      	movs	r1, #32
 8000972:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000976:	f001 fc2f 	bl	80021d8 <HAL_GPIO_WritePin>
     	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1 | GPIO_PIN_2, 1);
 800097a:	2201      	movs	r2, #1
 800097c:	2106      	movs	r1, #6
 800097e:	480d      	ldr	r0, [pc, #52]	; (80009b4 <HAL_UART_RxCpltCallback+0xdc>)
 8000980:	f001 fc2a 	bl	80021d8 <HAL_GPIO_WritePin>
     	  LEDs[0]='B';LEDs[1]='G';LEDs[2]='Y';
 8000984:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <HAL_UART_RxCpltCallback+0xe0>)
 8000986:	2242      	movs	r2, #66	; 0x42
 8000988:	701a      	strb	r2, [r3, #0]
 800098a:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <HAL_UART_RxCpltCallback+0xe0>)
 800098c:	2247      	movs	r2, #71	; 0x47
 800098e:	705a      	strb	r2, [r3, #1]
 8000990:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <HAL_UART_RxCpltCallback+0xe0>)
 8000992:	2259      	movs	r2, #89	; 0x59
 8000994:	709a      	strb	r2, [r3, #2]
 		  break;
 8000996:	bf00      	nop
    }

    // Réactivez la réception UART pour la prochaine commande
    HAL_UART_Receive_IT(&huart1, RX_BUFFER, Buffer_len);
 8000998:	2201      	movs	r2, #1
 800099a:	4905      	ldr	r1, [pc, #20]	; (80009b0 <HAL_UART_RxCpltCallback+0xd8>)
 800099c:	4803      	ldr	r0, [pc, #12]	; (80009ac <HAL_UART_RxCpltCallback+0xd4>)
 800099e:	f003 fff5 	bl	800498c <HAL_UART_Receive_IT>
  }

}
 80009a2:	bf00      	nop
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	200000d8 	.word	0x200000d8
 80009b0:	2000015c 	.word	0x2000015c
 80009b4:	48000800 	.word	0x48000800
 80009b8:	20000160 	.word	0x20000160

080009bc <MAP>:
 * au32_OUTmin: la valeur minimal de la sortie. (Registre CCR1 du Timer2 dans ce cas.) = 0
 * au32_OUTmax: la valeur maximal de la sortie. (Registre CCR1 du Timer2 dans ce cas.) = 2^(16) [Ckeck Timer on the reference manuel to get the timer resolution]
*/

uint32_t MAP(uint32_t au32_IN, uint32_t au32_INmin, uint32_t au32_INmax, uint32_t au32_OUTmin, uint32_t au32_OUTmax)
{
 80009bc:	b480      	push	{r7}
 80009be:	b085      	sub	sp, #20
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	60f8      	str	r0, [r7, #12]
 80009c4:	60b9      	str	r1, [r7, #8]
 80009c6:	607a      	str	r2, [r7, #4]
 80009c8:	603b      	str	r3, [r7, #0]
    return ((((au32_IN - au32_INmin)*(au32_OUTmax - au32_OUTmin))/(au32_INmax - au32_INmin)) + au32_OUTmin);
 80009ca:	68fa      	ldr	r2, [r7, #12]
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	1ad3      	subs	r3, r2, r3
 80009d0:	69b9      	ldr	r1, [r7, #24]
 80009d2:	683a      	ldr	r2, [r7, #0]
 80009d4:	1a8a      	subs	r2, r1, r2
 80009d6:	fb03 f202 	mul.w	r2, r3, r2
 80009da:	6879      	ldr	r1, [r7, #4]
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	1acb      	subs	r3, r1, r3
 80009e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	4413      	add	r3, r2
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	3714      	adds	r7, #20
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f8:	b672      	cpsid	i
}
 80009fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009fc:	e7fe      	b.n	80009fc <Error_Handler+0x8>
	...

08000a00 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a06:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <HAL_MspInit+0x44>)
 8000a08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a0a:	4a0e      	ldr	r2, [pc, #56]	; (8000a44 <HAL_MspInit+0x44>)
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	6613      	str	r3, [r2, #96]	; 0x60
 8000a12:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <HAL_MspInit+0x44>)
 8000a14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1e:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <HAL_MspInit+0x44>)
 8000a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a22:	4a08      	ldr	r2, [pc, #32]	; (8000a44 <HAL_MspInit+0x44>)
 8000a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a28:	6593      	str	r3, [r2, #88]	; 0x58
 8000a2a:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <HAL_MspInit+0x44>)
 8000a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a32:	603b      	str	r3, [r7, #0]
 8000a34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a36:	bf00      	nop
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	40021000 	.word	0x40021000

08000a48 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b0ac      	sub	sp, #176	; 0xb0
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a50:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	2288      	movs	r2, #136	; 0x88
 8000a66:	2100      	movs	r1, #0
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f005 fa26 	bl	8005eba <memset>
  if(hadc->Instance==ADC1)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4a27      	ldr	r2, [pc, #156]	; (8000b10 <HAL_ADC_MspInit+0xc8>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d146      	bne.n	8000b06 <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a78:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a7c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000a7e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000a86:	2301      	movs	r3, #1
 8000a88:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000a8e:	2310      	movs	r3, #16
 8000a90:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000a92:	2307      	movs	r3, #7
 8000a94:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000a96:	2302      	movs	r3, #2
 8000a98:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000a9e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000aa2:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f002 fa11 	bl	8002ed0 <HAL_RCCEx_PeriphCLKConfig>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000ab4:	f7ff ff9e 	bl	80009f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000ab8:	4b16      	ldr	r3, [pc, #88]	; (8000b14 <HAL_ADC_MspInit+0xcc>)
 8000aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000abc:	4a15      	ldr	r2, [pc, #84]	; (8000b14 <HAL_ADC_MspInit+0xcc>)
 8000abe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ac2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ac4:	4b13      	ldr	r3, [pc, #76]	; (8000b14 <HAL_ADC_MspInit+0xcc>)
 8000ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000acc:	613b      	str	r3, [r7, #16]
 8000ace:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad0:	4b10      	ldr	r3, [pc, #64]	; (8000b14 <HAL_ADC_MspInit+0xcc>)
 8000ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad4:	4a0f      	ldr	r2, [pc, #60]	; (8000b14 <HAL_ADC_MspInit+0xcc>)
 8000ad6:	f043 0304 	orr.w	r3, r3, #4
 8000ada:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000adc:	4b0d      	ldr	r3, [pc, #52]	; (8000b14 <HAL_ADC_MspInit+0xcc>)
 8000ade:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae0:	f003 0304 	and.w	r3, r3, #4
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000aee:	230b      	movs	r3, #11
 8000af0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000afa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000afe:	4619      	mov	r1, r3
 8000b00:	4805      	ldr	r0, [pc, #20]	; (8000b18 <HAL_ADC_MspInit+0xd0>)
 8000b02:	f001 f9bf 	bl	8001e84 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b06:	bf00      	nop
 8000b08:	37b0      	adds	r7, #176	; 0xb0
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	50040000 	.word	0x50040000
 8000b14:	40021000 	.word	0x40021000
 8000b18:	48000800 	.word	0x48000800

08000b1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b2c:	d10b      	bne.n	8000b46 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b2e:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <HAL_TIM_Base_MspInit+0x38>)
 8000b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b32:	4a08      	ldr	r2, [pc, #32]	; (8000b54 <HAL_TIM_Base_MspInit+0x38>)
 8000b34:	f043 0301 	orr.w	r3, r3, #1
 8000b38:	6593      	str	r3, [r2, #88]	; 0x58
 8000b3a:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <HAL_TIM_Base_MspInit+0x38>)
 8000b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b46:	bf00      	nop
 8000b48:	3714      	adds	r7, #20
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	40021000 	.word	0x40021000

08000b58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b088      	sub	sp, #32
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b60:	f107 030c 	add.w	r3, r7, #12
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b78:	d11c      	bne.n	8000bb4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7a:	4b10      	ldr	r3, [pc, #64]	; (8000bbc <HAL_TIM_MspPostInit+0x64>)
 8000b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7e:	4a0f      	ldr	r2, [pc, #60]	; (8000bbc <HAL_TIM_MspPostInit+0x64>)
 8000b80:	f043 0301 	orr.w	r3, r3, #1
 8000b84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b86:	4b0d      	ldr	r3, [pc, #52]	; (8000bbc <HAL_TIM_MspPostInit+0x64>)
 8000b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	60bb      	str	r3, [r7, #8]
 8000b90:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b92:	2303      	movs	r3, #3
 8000b94:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b96:	2302      	movs	r3, #2
 8000b98:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba6:	f107 030c 	add.w	r3, r7, #12
 8000baa:	4619      	mov	r1, r3
 8000bac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bb0:	f001 f968 	bl	8001e84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000bb4:	bf00      	nop
 8000bb6:	3720      	adds	r7, #32
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	40021000 	.word	0x40021000

08000bc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b0ac      	sub	sp, #176	; 0xb0
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	2288      	movs	r2, #136	; 0x88
 8000bde:	2100      	movs	r1, #0
 8000be0:	4618      	mov	r0, r3
 8000be2:	f005 f96a 	bl	8005eba <memset>
  if(huart->Instance==USART1)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a26      	ldr	r2, [pc, #152]	; (8000c84 <HAL_UART_MspInit+0xc4>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d144      	bne.n	8000c7a <HAL_UART_MspInit+0xba>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f002 f967 	bl	8002ed0 <HAL_RCCEx_PeriphCLKConfig>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c08:	f7ff fef4 	bl	80009f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c0c:	4b1e      	ldr	r3, [pc, #120]	; (8000c88 <HAL_UART_MspInit+0xc8>)
 8000c0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c10:	4a1d      	ldr	r2, [pc, #116]	; (8000c88 <HAL_UART_MspInit+0xc8>)
 8000c12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c16:	6613      	str	r3, [r2, #96]	; 0x60
 8000c18:	4b1b      	ldr	r3, [pc, #108]	; (8000c88 <HAL_UART_MspInit+0xc8>)
 8000c1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c24:	4b18      	ldr	r3, [pc, #96]	; (8000c88 <HAL_UART_MspInit+0xc8>)
 8000c26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c28:	4a17      	ldr	r2, [pc, #92]	; (8000c88 <HAL_UART_MspInit+0xc8>)
 8000c2a:	f043 0301 	orr.w	r3, r3, #1
 8000c2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c30:	4b15      	ldr	r3, [pc, #84]	; (8000c88 <HAL_UART_MspInit+0xc8>)
 8000c32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c34:	f003 0301 	and.w	r3, r3, #1
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c3c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c44:	2302      	movs	r3, #2
 8000c46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c50:	2303      	movs	r3, #3
 8000c52:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c56:	2307      	movs	r3, #7
 8000c58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c60:	4619      	mov	r1, r3
 8000c62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c66:	f001 f90d 	bl	8001e84 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	2025      	movs	r0, #37	; 0x25
 8000c70:	f001 f853 	bl	8001d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c74:	2025      	movs	r0, #37	; 0x25
 8000c76:	f001 f86c 	bl	8001d52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c7a:	bf00      	nop
 8000c7c:	37b0      	adds	r7, #176	; 0xb0
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40013800 	.word	0x40013800
 8000c88:	40021000 	.word	0x40021000

08000c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <NMI_Handler+0x4>

08000c92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c96:	e7fe      	b.n	8000c96 <HardFault_Handler+0x4>

08000c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <MemManage_Handler+0x4>

08000c9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca2:	e7fe      	b.n	8000ca2 <BusFault_Handler+0x4>

08000ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <UsageFault_Handler+0x4>

08000caa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd8:	f000 f89c 	bl	8000e14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ce4:	4802      	ldr	r0, [pc, #8]	; (8000cf0 <USART1_IRQHandler+0x10>)
 8000ce6:	f003 fea7 	bl	8004a38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	200000d8 	.word	0x200000d8

08000cf4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000cf8:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <SystemInit+0x20>)
 8000cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cfe:	4a05      	ldr	r2, [pc, #20]	; (8000d14 <SystemInit+0x20>)
 8000d00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d50 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d1c:	f7ff ffea 	bl	8000cf4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d20:	480c      	ldr	r0, [pc, #48]	; (8000d54 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d22:	490d      	ldr	r1, [pc, #52]	; (8000d58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d24:	4a0d      	ldr	r2, [pc, #52]	; (8000d5c <LoopForever+0xe>)
  movs r3, #0
 8000d26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d28:	e002      	b.n	8000d30 <LoopCopyDataInit>

08000d2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d2e:	3304      	adds	r3, #4

08000d30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d34:	d3f9      	bcc.n	8000d2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d36:	4a0a      	ldr	r2, [pc, #40]	; (8000d60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d38:	4c0a      	ldr	r4, [pc, #40]	; (8000d64 <LoopForever+0x16>)
  movs r3, #0
 8000d3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d3c:	e001      	b.n	8000d42 <LoopFillZerobss>

08000d3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d40:	3204      	adds	r2, #4

08000d42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d44:	d3fb      	bcc.n	8000d3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d46:	f005 f8c1 	bl	8005ecc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d4a:	f7ff fbbb 	bl	80004c4 <main>

08000d4e <LoopForever>:

LoopForever:
    b LoopForever
 8000d4e:	e7fe      	b.n	8000d4e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d50:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d58:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d5c:	08005f84 	.word	0x08005f84
  ldr r2, =_sbss
 8000d60:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d64:	20000174 	.word	0x20000174

08000d68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d68:	e7fe      	b.n	8000d68 <ADC1_2_IRQHandler>

08000d6a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b082      	sub	sp, #8
 8000d6e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d70:	2300      	movs	r3, #0
 8000d72:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d74:	2003      	movs	r0, #3
 8000d76:	f000 ffc5 	bl	8001d04 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d7a:	200f      	movs	r0, #15
 8000d7c:	f000 f80e 	bl	8000d9c <HAL_InitTick>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d002      	beq.n	8000d8c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
 8000d88:	71fb      	strb	r3, [r7, #7]
 8000d8a:	e001      	b.n	8000d90 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d8c:	f7ff fe38 	bl	8000a00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d90:	79fb      	ldrb	r3, [r7, #7]
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
	...

08000d9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000da4:	2300      	movs	r3, #0
 8000da6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000da8:	4b17      	ldr	r3, [pc, #92]	; (8000e08 <HAL_InitTick+0x6c>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d023      	beq.n	8000df8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000db0:	4b16      	ldr	r3, [pc, #88]	; (8000e0c <HAL_InitTick+0x70>)
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <HAL_InitTick+0x6c>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	4619      	mov	r1, r3
 8000dba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f000 ffd1 	bl	8001d6e <HAL_SYSTICK_Config>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d10f      	bne.n	8000df2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2b0f      	cmp	r3, #15
 8000dd6:	d809      	bhi.n	8000dec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	6879      	ldr	r1, [r7, #4]
 8000ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8000de0:	f000 ff9b 	bl	8001d1a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000de4:	4a0a      	ldr	r2, [pc, #40]	; (8000e10 <HAL_InitTick+0x74>)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6013      	str	r3, [r2, #0]
 8000dea:	e007      	b.n	8000dfc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000dec:	2301      	movs	r3, #1
 8000dee:	73fb      	strb	r3, [r7, #15]
 8000df0:	e004      	b.n	8000dfc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	73fb      	strb	r3, [r7, #15]
 8000df6:	e001      	b.n	8000dfc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3710      	adds	r7, #16
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20000008 	.word	0x20000008
 8000e0c:	20000000 	.word	0x20000000
 8000e10:	20000004 	.word	0x20000004

08000e14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e18:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <HAL_IncTick+0x20>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <HAL_IncTick+0x24>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4413      	add	r3, r2
 8000e24:	4a04      	ldr	r2, [pc, #16]	; (8000e38 <HAL_IncTick+0x24>)
 8000e26:	6013      	str	r3, [r2, #0]
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	20000008 	.word	0x20000008
 8000e38:	20000170 	.word	0x20000170

08000e3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e40:	4b03      	ldr	r3, [pc, #12]	; (8000e50 <HAL_GetTick+0x14>)
 8000e42:	681b      	ldr	r3, [r3, #0]
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	20000170 	.word	0x20000170

08000e54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e5c:	f7ff ffee 	bl	8000e3c <HAL_GetTick>
 8000e60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e6c:	d005      	beq.n	8000e7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e6e:	4b0a      	ldr	r3, [pc, #40]	; (8000e98 <HAL_Delay+0x44>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	461a      	mov	r2, r3
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	4413      	add	r3, r2
 8000e78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e7a:	bf00      	nop
 8000e7c:	f7ff ffde 	bl	8000e3c <HAL_GetTick>
 8000e80:	4602      	mov	r2, r0
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	68fa      	ldr	r2, [r7, #12]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d8f7      	bhi.n	8000e7c <HAL_Delay+0x28>
  {
  }
}
 8000e8c:	bf00      	nop
 8000e8e:	bf00      	nop
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	20000008 	.word	0x20000008

08000e9c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	689b      	ldr	r3, [r3, #8]
 8000eaa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	431a      	orrs	r2, r3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	609a      	str	r2, [r3, #8]
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr

08000ec2 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	b083      	sub	sp, #12
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	b083      	sub	sp, #12
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	68db      	ldr	r3, [r3, #12]
 8000eea:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d101      	bne.n	8000ef6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e000      	b.n	8000ef8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000ef6:	2300      	movs	r3, #0
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	f003 031f 	and.w	r3, r3, #31
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	689b      	ldr	r3, [r3, #8]
 8000f48:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000f4c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f50:	687a      	ldr	r2, [r7, #4]
 8000f52:	6093      	str	r3, [r2, #8]
}
 8000f54:	bf00      	nop
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000f70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000f74:	d101      	bne.n	8000f7a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000f76:	2301      	movs	r3, #1
 8000f78:	e000      	b.n	8000f7c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000f7a:	2300      	movs	r3, #0
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000f98:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f9c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000fc4:	d101      	bne.n	8000fca <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e000      	b.n	8000fcc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000fca:	2300      	movs	r3, #0
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000fe8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000fec:	f043 0201 	orr.w	r2, r3, #1
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000ff4:	bf00      	nop
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001010:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001014:	f043 0202 	orr.w	r2, r3, #2
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	f003 0301 	and.w	r3, r3, #1
 8001038:	2b01      	cmp	r3, #1
 800103a:	d101      	bne.n	8001040 <LL_ADC_IsEnabled+0x18>
 800103c:	2301      	movs	r3, #1
 800103e:	e000      	b.n	8001042 <LL_ADC_IsEnabled+0x1a>
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr

0800104e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800104e:	b480      	push	{r7}
 8001050:	b083      	sub	sp, #12
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	f003 0302 	and.w	r3, r3, #2
 800105e:	2b02      	cmp	r3, #2
 8001060:	d101      	bne.n	8001066 <LL_ADC_IsDisableOngoing+0x18>
 8001062:	2301      	movs	r3, #1
 8001064:	e000      	b.n	8001068 <LL_ADC_IsDisableOngoing+0x1a>
 8001066:	2300      	movs	r3, #0
}
 8001068:	4618      	mov	r0, r3
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001084:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001088:	f043 0204 	orr.w	r2, r3, #4
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	f003 0304 	and.w	r3, r3, #4
 80010ac:	2b04      	cmp	r3, #4
 80010ae:	d101      	bne.n	80010b4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80010b0:	2301      	movs	r3, #1
 80010b2:	e000      	b.n	80010b6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80010c2:	b480      	push	{r7}
 80010c4:	b083      	sub	sp, #12
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	f003 0308 	and.w	r3, r3, #8
 80010d2:	2b08      	cmp	r3, #8
 80010d4:	d101      	bne.n	80010da <LL_ADC_INJ_IsConversionOngoing+0x18>
 80010d6:	2301      	movs	r3, #1
 80010d8:	e000      	b.n	80010dc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80010da:	2300      	movs	r3, #0
}
 80010dc:	4618      	mov	r0, r3
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80010e8:	b590      	push	{r4, r7, lr}
 80010ea:	b089      	sub	sp, #36	; 0x24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010f0:	2300      	movs	r3, #0
 80010f2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d101      	bne.n	8001102 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e136      	b.n	8001370 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	691b      	ldr	r3, [r3, #16]
 8001106:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800110c:	2b00      	cmp	r3, #0
 800110e:	d109      	bne.n	8001124 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f7ff fc99 	bl	8000a48 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2200      	movs	r2, #0
 800111a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2200      	movs	r2, #0
 8001120:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff ff19 	bl	8000f60 <LL_ADC_IsDeepPowerDownEnabled>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d004      	beq.n	800113e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff feff 	bl	8000f3c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff ff34 	bl	8000fb0 <LL_ADC_IsInternalRegulatorEnabled>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d115      	bne.n	800117a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff ff18 	bl	8000f88 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001158:	4b87      	ldr	r3, [pc, #540]	; (8001378 <HAL_ADC_Init+0x290>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	099b      	lsrs	r3, r3, #6
 800115e:	4a87      	ldr	r2, [pc, #540]	; (800137c <HAL_ADC_Init+0x294>)
 8001160:	fba2 2303 	umull	r2, r3, r2, r3
 8001164:	099b      	lsrs	r3, r3, #6
 8001166:	3301      	adds	r3, #1
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800116c:	e002      	b.n	8001174 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	3b01      	subs	r3, #1
 8001172:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d1f9      	bne.n	800116e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff ff16 	bl	8000fb0 <LL_ADC_IsInternalRegulatorEnabled>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d10d      	bne.n	80011a6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800118e:	f043 0210 	orr.w	r2, r3, #16
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800119a:	f043 0201 	orr.w	r2, r3, #1
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff ff76 	bl	800109c <LL_ADC_REG_IsConversionOngoing>
 80011b0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011b6:	f003 0310 	and.w	r3, r3, #16
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	f040 80cf 	bne.w	800135e <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	f040 80cb 	bne.w	800135e <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011cc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80011d0:	f043 0202 	orr.w	r2, r3, #2
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff ff23 	bl	8001028 <LL_ADC_IsEnabled>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d115      	bne.n	8001214 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80011e8:	4865      	ldr	r0, [pc, #404]	; (8001380 <HAL_ADC_Init+0x298>)
 80011ea:	f7ff ff1d 	bl	8001028 <LL_ADC_IsEnabled>
 80011ee:	4604      	mov	r4, r0
 80011f0:	4864      	ldr	r0, [pc, #400]	; (8001384 <HAL_ADC_Init+0x29c>)
 80011f2:	f7ff ff19 	bl	8001028 <LL_ADC_IsEnabled>
 80011f6:	4603      	mov	r3, r0
 80011f8:	431c      	orrs	r4, r3
 80011fa:	4863      	ldr	r0, [pc, #396]	; (8001388 <HAL_ADC_Init+0x2a0>)
 80011fc:	f7ff ff14 	bl	8001028 <LL_ADC_IsEnabled>
 8001200:	4603      	mov	r3, r0
 8001202:	4323      	orrs	r3, r4
 8001204:	2b00      	cmp	r3, #0
 8001206:	d105      	bne.n	8001214 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	4619      	mov	r1, r3
 800120e:	485f      	ldr	r0, [pc, #380]	; (800138c <HAL_ADC_Init+0x2a4>)
 8001210:	f7ff fe44 	bl	8000e9c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	7e5b      	ldrb	r3, [r3, #25]
 8001218:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800121e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001224:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800122a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001232:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001234:	4313      	orrs	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d106      	bne.n	8001250 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001246:	3b01      	subs	r3, #1
 8001248:	045b      	lsls	r3, r3, #17
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	4313      	orrs	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001254:	2b00      	cmp	r3, #0
 8001256:	d009      	beq.n	800126c <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800125c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001264:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4313      	orrs	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	68da      	ldr	r2, [r3, #12]
 8001272:	4b47      	ldr	r3, [pc, #284]	; (8001390 <HAL_ADC_Init+0x2a8>)
 8001274:	4013      	ands	r3, r2
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	6812      	ldr	r2, [r2, #0]
 800127a:	69b9      	ldr	r1, [r7, #24]
 800127c:	430b      	orrs	r3, r1
 800127e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff ff09 	bl	800109c <LL_ADC_REG_IsConversionOngoing>
 800128a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff ff16 	bl	80010c2 <LL_ADC_INJ_IsConversionOngoing>
 8001296:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d13d      	bne.n	800131a <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d13a      	bne.n	800131a <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80012a8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80012b0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80012b2:	4313      	orrs	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80012c0:	f023 0302 	bic.w	r3, r3, #2
 80012c4:	687a      	ldr	r2, [r7, #4]
 80012c6:	6812      	ldr	r2, [r2, #0]
 80012c8:	69b9      	ldr	r1, [r7, #24]
 80012ca:	430b      	orrs	r3, r1
 80012cc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d118      	bne.n	800130a <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	691b      	ldr	r3, [r3, #16]
 80012de:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80012e2:	f023 0304 	bic.w	r3, r3, #4
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80012ee:	4311      	orrs	r1, r2
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80012f4:	4311      	orrs	r1, r2
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80012fa:	430a      	orrs	r2, r1
 80012fc:	431a      	orrs	r2, r3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f042 0201 	orr.w	r2, r2, #1
 8001306:	611a      	str	r2, [r3, #16]
 8001308:	e007      	b.n	800131a <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	691a      	ldr	r2, [r3, #16]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f022 0201 	bic.w	r2, r2, #1
 8001318:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	691b      	ldr	r3, [r3, #16]
 800131e:	2b01      	cmp	r3, #1
 8001320:	d10c      	bne.n	800133c <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001328:	f023 010f 	bic.w	r1, r3, #15
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	69db      	ldr	r3, [r3, #28]
 8001330:	1e5a      	subs	r2, r3, #1
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	430a      	orrs	r2, r1
 8001338:	631a      	str	r2, [r3, #48]	; 0x30
 800133a:	e007      	b.n	800134c <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f022 020f 	bic.w	r2, r2, #15
 800134a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001350:	f023 0303 	bic.w	r3, r3, #3
 8001354:	f043 0201 	orr.w	r2, r3, #1
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	655a      	str	r2, [r3, #84]	; 0x54
 800135c:	e007      	b.n	800136e <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001362:	f043 0210 	orr.w	r2, r3, #16
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800136e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001370:	4618      	mov	r0, r3
 8001372:	3724      	adds	r7, #36	; 0x24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd90      	pop	{r4, r7, pc}
 8001378:	20000000 	.word	0x20000000
 800137c:	053e2d63 	.word	0x053e2d63
 8001380:	50040000 	.word	0x50040000
 8001384:	50040100 	.word	0x50040100
 8001388:	50040200 	.word	0x50040200
 800138c:	50040300 	.word	0x50040300
 8001390:	fff0c007 	.word	0xfff0c007

08001394 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800139c:	4857      	ldr	r0, [pc, #348]	; (80014fc <HAL_ADC_Start+0x168>)
 800139e:	f7ff fdb1 	bl	8000f04 <LL_ADC_GetMultimode>
 80013a2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff fe77 	bl	800109c <LL_ADC_REG_IsConversionOngoing>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	f040 809c 	bne.w	80014ee <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d101      	bne.n	80013c4 <HAL_ADC_Start+0x30>
 80013c0:	2302      	movs	r3, #2
 80013c2:	e097      	b.n	80014f4 <HAL_ADC_Start+0x160>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2201      	movs	r2, #1
 80013c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f000 f981 	bl	80016d4 <ADC_Enable>
 80013d2:	4603      	mov	r3, r0
 80013d4:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80013d6:	7dfb      	ldrb	r3, [r7, #23]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	f040 8083 	bne.w	80014e4 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013e2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80013e6:	f023 0301 	bic.w	r3, r3, #1
 80013ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a42      	ldr	r2, [pc, #264]	; (8001500 <HAL_ADC_Start+0x16c>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d002      	beq.n	8001402 <HAL_ADC_Start+0x6e>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	e000      	b.n	8001404 <HAL_ADC_Start+0x70>
 8001402:	4b40      	ldr	r3, [pc, #256]	; (8001504 <HAL_ADC_Start+0x170>)
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	6812      	ldr	r2, [r2, #0]
 8001408:	4293      	cmp	r3, r2
 800140a:	d002      	beq.n	8001412 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d105      	bne.n	800141e <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001416:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001422:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001426:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800142a:	d106      	bne.n	800143a <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001430:	f023 0206 	bic.w	r2, r3, #6
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	659a      	str	r2, [r3, #88]	; 0x58
 8001438:	e002      	b.n	8001440 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2200      	movs	r2, #0
 800143e:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	221c      	movs	r2, #28
 8001446:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2200      	movs	r2, #0
 800144c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a2a      	ldr	r2, [pc, #168]	; (8001500 <HAL_ADC_Start+0x16c>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d002      	beq.n	8001460 <HAL_ADC_Start+0xcc>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	e000      	b.n	8001462 <HAL_ADC_Start+0xce>
 8001460:	4b28      	ldr	r3, [pc, #160]	; (8001504 <HAL_ADC_Start+0x170>)
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	6812      	ldr	r2, [r2, #0]
 8001466:	4293      	cmp	r3, r2
 8001468:	d008      	beq.n	800147c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d005      	beq.n	800147c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	2b05      	cmp	r3, #5
 8001474:	d002      	beq.n	800147c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	2b09      	cmp	r3, #9
 800147a:	d114      	bne.n	80014a6 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	68db      	ldr	r3, [r3, #12]
 8001482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d007      	beq.n	800149a <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800148e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001492:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff fde8 	bl	8001074 <LL_ADC_REG_StartConversion>
 80014a4:	e025      	b.n	80014f2 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a12      	ldr	r2, [pc, #72]	; (8001500 <HAL_ADC_Start+0x16c>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d002      	beq.n	80014c2 <HAL_ADC_Start+0x12e>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	e000      	b.n	80014c4 <HAL_ADC_Start+0x130>
 80014c2:	4b10      	ldr	r3, [pc, #64]	; (8001504 <HAL_ADC_Start+0x170>)
 80014c4:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	68db      	ldr	r3, [r3, #12]
 80014ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d00f      	beq.n	80014f2 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014d6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014da:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	655a      	str	r2, [r3, #84]	; 0x54
 80014e2:	e006      	b.n	80014f2 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2200      	movs	r2, #0
 80014e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80014ec:	e001      	b.n	80014f2 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80014ee:	2302      	movs	r3, #2
 80014f0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80014f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3718      	adds	r7, #24
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	50040300 	.word	0x50040300
 8001500:	50040100 	.word	0x50040100
 8001504:	50040000 	.word	0x50040000

08001508 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b088      	sub	sp, #32
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001512:	4866      	ldr	r0, [pc, #408]	; (80016ac <HAL_ADC_PollForConversion+0x1a4>)
 8001514:	f7ff fcf6 	bl	8000f04 <LL_ADC_GetMultimode>
 8001518:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	695b      	ldr	r3, [r3, #20]
 800151e:	2b08      	cmp	r3, #8
 8001520:	d102      	bne.n	8001528 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001522:	2308      	movs	r3, #8
 8001524:	61fb      	str	r3, [r7, #28]
 8001526:	e02a      	b.n	800157e <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d005      	beq.n	800153a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	2b05      	cmp	r3, #5
 8001532:	d002      	beq.n	800153a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	2b09      	cmp	r3, #9
 8001538:	d111      	bne.n	800155e <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	f003 0301 	and.w	r3, r3, #1
 8001544:	2b00      	cmp	r3, #0
 8001546:	d007      	beq.n	8001558 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800154c:	f043 0220 	orr.w	r2, r3, #32
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e0a4      	b.n	80016a2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001558:	2304      	movs	r3, #4
 800155a:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800155c:	e00f      	b.n	800157e <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800155e:	4853      	ldr	r0, [pc, #332]	; (80016ac <HAL_ADC_PollForConversion+0x1a4>)
 8001560:	f7ff fcde 	bl	8000f20 <LL_ADC_GetMultiDMATransfer>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d007      	beq.n	800157a <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800156e:	f043 0220 	orr.w	r2, r3, #32
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e093      	b.n	80016a2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800157a:	2304      	movs	r3, #4
 800157c:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800157e:	f7ff fc5d 	bl	8000e3c <HAL_GetTick>
 8001582:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001584:	e021      	b.n	80015ca <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800158c:	d01d      	beq.n	80015ca <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800158e:	f7ff fc55 	bl	8000e3c <HAL_GetTick>
 8001592:	4602      	mov	r2, r0
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	683a      	ldr	r2, [r7, #0]
 800159a:	429a      	cmp	r2, r3
 800159c:	d302      	bcc.n	80015a4 <HAL_ADC_PollForConversion+0x9c>
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d112      	bne.n	80015ca <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	4013      	ands	r3, r2
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d10b      	bne.n	80015ca <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015b6:	f043 0204 	orr.w	r2, r3, #4
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e06b      	b.n	80016a2 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	4013      	ands	r3, r2
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d0d6      	beq.n	8001586 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015dc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff fc78 	bl	8000ede <LL_ADC_REG_IsTriggerSourceSWStart>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d01c      	beq.n	800162e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	7e5b      	ldrb	r3, [r3, #25]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d118      	bne.n	800162e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0308 	and.w	r3, r3, #8
 8001606:	2b08      	cmp	r3, #8
 8001608:	d111      	bne.n	800162e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800160e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800161a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d105      	bne.n	800162e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001626:	f043 0201 	orr.w	r2, r3, #1
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a1f      	ldr	r2, [pc, #124]	; (80016b0 <HAL_ADC_PollForConversion+0x1a8>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d002      	beq.n	800163e <HAL_ADC_PollForConversion+0x136>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	e000      	b.n	8001640 <HAL_ADC_PollForConversion+0x138>
 800163e:	4b1d      	ldr	r3, [pc, #116]	; (80016b4 <HAL_ADC_PollForConversion+0x1ac>)
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	6812      	ldr	r2, [r2, #0]
 8001644:	4293      	cmp	r3, r2
 8001646:	d008      	beq.n	800165a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d005      	beq.n	800165a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	2b05      	cmp	r3, #5
 8001652:	d002      	beq.n	800165a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	2b09      	cmp	r3, #9
 8001658:	d104      	bne.n	8001664 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	61bb      	str	r3, [r7, #24]
 8001662:	e00c      	b.n	800167e <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a11      	ldr	r2, [pc, #68]	; (80016b0 <HAL_ADC_PollForConversion+0x1a8>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d002      	beq.n	8001674 <HAL_ADC_PollForConversion+0x16c>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	e000      	b.n	8001676 <HAL_ADC_PollForConversion+0x16e>
 8001674:	4b0f      	ldr	r3, [pc, #60]	; (80016b4 <HAL_ADC_PollForConversion+0x1ac>)
 8001676:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	2b08      	cmp	r3, #8
 8001682:	d104      	bne.n	800168e <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2208      	movs	r2, #8
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	e008      	b.n	80016a0 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d103      	bne.n	80016a0 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	220c      	movs	r2, #12
 800169e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3720      	adds	r7, #32
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	50040300 	.word	0x50040300
 80016b0:	50040100 	.word	0x50040100
 80016b4:	50040000 	.word	0x50040000

080016b8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
	...

080016d4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80016dc:	2300      	movs	r3, #0
 80016de:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff fc9f 	bl	8001028 <LL_ADC_IsEnabled>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d169      	bne.n	80017c4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	689a      	ldr	r2, [r3, #8]
 80016f6:	4b36      	ldr	r3, [pc, #216]	; (80017d0 <ADC_Enable+0xfc>)
 80016f8:	4013      	ands	r3, r2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d00d      	beq.n	800171a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001702:	f043 0210 	orr.w	r2, r3, #16
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800170e:	f043 0201 	orr.w	r2, r3, #1
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e055      	b.n	80017c6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff fc5a 	bl	8000fd8 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001724:	482b      	ldr	r0, [pc, #172]	; (80017d4 <ADC_Enable+0x100>)
 8001726:	f7ff fbcc 	bl	8000ec2 <LL_ADC_GetCommonPathInternalCh>
 800172a:	4603      	mov	r3, r0
 800172c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d013      	beq.n	800175c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001734:	4b28      	ldr	r3, [pc, #160]	; (80017d8 <ADC_Enable+0x104>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	099b      	lsrs	r3, r3, #6
 800173a:	4a28      	ldr	r2, [pc, #160]	; (80017dc <ADC_Enable+0x108>)
 800173c:	fba2 2303 	umull	r2, r3, r2, r3
 8001740:	099b      	lsrs	r3, r3, #6
 8001742:	1c5a      	adds	r2, r3, #1
 8001744:	4613      	mov	r3, r2
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	4413      	add	r3, r2
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800174e:	e002      	b.n	8001756 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	3b01      	subs	r3, #1
 8001754:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d1f9      	bne.n	8001750 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800175c:	f7ff fb6e 	bl	8000e3c <HAL_GetTick>
 8001760:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001762:	e028      	b.n	80017b6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff fc5d 	bl	8001028 <LL_ADC_IsEnabled>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d104      	bne.n	800177e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff fc2d 	bl	8000fd8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800177e:	f7ff fb5d 	bl	8000e3c <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	2b02      	cmp	r3, #2
 800178a:	d914      	bls.n	80017b6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	2b01      	cmp	r3, #1
 8001798:	d00d      	beq.n	80017b6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800179e:	f043 0210 	orr.w	r2, r3, #16
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017aa:	f043 0201 	orr.w	r2, r3, #1
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e007      	b.n	80017c6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0301 	and.w	r3, r3, #1
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d1cf      	bne.n	8001764 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	8000003f 	.word	0x8000003f
 80017d4:	50040300 	.word	0x50040300
 80017d8:	20000000 	.word	0x20000000
 80017dc:	053e2d63 	.word	0x053e2d63

080017e0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff fc2e 	bl	800104e <LL_ADC_IsDisableOngoing>
 80017f2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff fc15 	bl	8001028 <LL_ADC_IsEnabled>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d047      	beq.n	8001894 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d144      	bne.n	8001894 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f003 030d 	and.w	r3, r3, #13
 8001814:	2b01      	cmp	r3, #1
 8001816:	d10c      	bne.n	8001832 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff fbef 	bl	8001000 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2203      	movs	r2, #3
 8001828:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800182a:	f7ff fb07 	bl	8000e3c <HAL_GetTick>
 800182e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001830:	e029      	b.n	8001886 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001836:	f043 0210 	orr.w	r2, r3, #16
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001842:	f043 0201 	orr.w	r2, r3, #1
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e023      	b.n	8001896 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800184e:	f7ff faf5 	bl	8000e3c <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	2b02      	cmp	r3, #2
 800185a:	d914      	bls.n	8001886 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	2b00      	cmp	r3, #0
 8001868:	d00d      	beq.n	8001886 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800186e:	f043 0210 	orr.w	r2, r3, #16
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800187a:	f043 0201 	orr.w	r2, r3, #1
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e007      	b.n	8001896 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f003 0301 	and.w	r3, r3, #1
 8001890:	2b00      	cmp	r3, #0
 8001892:	d1dc      	bne.n	800184e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <LL_ADC_IsEnabled>:
{
 800189e:	b480      	push	{r7}
 80018a0:	b083      	sub	sp, #12
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d101      	bne.n	80018b6 <LL_ADC_IsEnabled+0x18>
 80018b2:	2301      	movs	r3, #1
 80018b4:	e000      	b.n	80018b8 <LL_ADC_IsEnabled+0x1a>
 80018b6:	2300      	movs	r3, #0
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <LL_ADC_StartCalibration>:
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80018d6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018da:	683a      	ldr	r2, [r7, #0]
 80018dc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80018e0:	4313      	orrs	r3, r2
 80018e2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	609a      	str	r2, [r3, #8]
}
 80018ea:	bf00      	nop
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr

080018f6 <LL_ADC_IsCalibrationOnGoing>:
{
 80018f6:	b480      	push	{r7}
 80018f8:	b083      	sub	sp, #12
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001906:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800190a:	d101      	bne.n	8001910 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800190c:	2301      	movs	r3, #1
 800190e:	e000      	b.n	8001912 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr

0800191e <LL_ADC_REG_IsConversionOngoing>:
{
 800191e:	b480      	push	{r7}
 8001920:	b083      	sub	sp, #12
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f003 0304 	and.w	r3, r3, #4
 800192e:	2b04      	cmp	r3, #4
 8001930:	d101      	bne.n	8001936 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001932:	2301      	movs	r3, #1
 8001934:	e000      	b.n	8001938 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001936:	2300      	movs	r3, #0
}
 8001938:	4618      	mov	r0, r3
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800194e:	2300      	movs	r3, #0
 8001950:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001958:	2b01      	cmp	r3, #1
 800195a:	d101      	bne.n	8001960 <HAL_ADCEx_Calibration_Start+0x1c>
 800195c:	2302      	movs	r3, #2
 800195e:	e04d      	b.n	80019fc <HAL_ADCEx_Calibration_Start+0xb8>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2201      	movs	r2, #1
 8001964:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f7ff ff39 	bl	80017e0 <ADC_Disable>
 800196e:	4603      	mov	r3, r0
 8001970:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001972:	7bfb      	ldrb	r3, [r7, #15]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d136      	bne.n	80019e6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800197c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001980:	f023 0302 	bic.w	r3, r3, #2
 8001984:	f043 0202 	orr.w	r2, r3, #2
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	6839      	ldr	r1, [r7, #0]
 8001992:	4618      	mov	r0, r3
 8001994:	f7ff ff96 	bl	80018c4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8001998:	e014      	b.n	80019c4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	3301      	adds	r3, #1
 800199e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 80019a6:	d30d      	bcc.n	80019c4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ac:	f023 0312 	bic.w	r3, r3, #18
 80019b0:	f043 0210 	orr.w	r2, r3, #16
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e01b      	b.n	80019fc <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff ff94 	bl	80018f6 <LL_ADC_IsCalibrationOnGoing>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d1e2      	bne.n	800199a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019d8:	f023 0303 	bic.w	r3, r3, #3
 80019dc:	f043 0201 	orr.w	r2, r3, #1
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	655a      	str	r2, [r3, #84]	; 0x54
 80019e4:	e005      	b.n	80019f2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ea:	f043 0210 	orr.w	r2, r3, #16
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80019fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001a04:	b590      	push	{r4, r7, lr}
 8001a06:	b09f      	sub	sp, #124	; 0x7c
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d101      	bne.n	8001a22 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001a1e:	2302      	movs	r3, #2
 8001a20:	e093      	b.n	8001b4a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2201      	movs	r2, #1
 8001a26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8001a2e:	2300      	movs	r3, #0
 8001a30:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a47      	ldr	r2, [pc, #284]	; (8001b54 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d102      	bne.n	8001a42 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001a3c:	4b46      	ldr	r3, [pc, #280]	; (8001b58 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001a3e:	60bb      	str	r3, [r7, #8]
 8001a40:	e001      	b.n	8001a46 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001a42:	2300      	movs	r3, #0
 8001a44:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d10b      	bne.n	8001a64 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a50:	f043 0220 	orr.w	r2, r3, #32
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e072      	b.n	8001b4a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff ff59 	bl	800191e <LL_ADC_REG_IsConversionOngoing>
 8001a6c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff ff53 	bl	800191e <LL_ADC_REG_IsConversionOngoing>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d154      	bne.n	8001b28 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001a7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d151      	bne.n	8001b28 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001a84:	4b35      	ldr	r3, [pc, #212]	; (8001b5c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8001a86:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d02c      	beq.n	8001aea <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001a90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	6859      	ldr	r1, [r3, #4]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001aa2:	035b      	lsls	r3, r3, #13
 8001aa4:	430b      	orrs	r3, r1
 8001aa6:	431a      	orrs	r2, r3
 8001aa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001aaa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001aac:	4829      	ldr	r0, [pc, #164]	; (8001b54 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001aae:	f7ff fef6 	bl	800189e <LL_ADC_IsEnabled>
 8001ab2:	4604      	mov	r4, r0
 8001ab4:	4828      	ldr	r0, [pc, #160]	; (8001b58 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001ab6:	f7ff fef2 	bl	800189e <LL_ADC_IsEnabled>
 8001aba:	4603      	mov	r3, r0
 8001abc:	431c      	orrs	r4, r3
 8001abe:	4828      	ldr	r0, [pc, #160]	; (8001b60 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001ac0:	f7ff feed 	bl	800189e <LL_ADC_IsEnabled>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	4323      	orrs	r3, r4
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d137      	bne.n	8001b3c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001acc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001ad4:	f023 030f 	bic.w	r3, r3, #15
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	6811      	ldr	r1, [r2, #0]
 8001adc:	683a      	ldr	r2, [r7, #0]
 8001ade:	6892      	ldr	r2, [r2, #8]
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	431a      	orrs	r2, r3
 8001ae4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ae6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ae8:	e028      	b.n	8001b3c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001aea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001af2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001af4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001af6:	4817      	ldr	r0, [pc, #92]	; (8001b54 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001af8:	f7ff fed1 	bl	800189e <LL_ADC_IsEnabled>
 8001afc:	4604      	mov	r4, r0
 8001afe:	4816      	ldr	r0, [pc, #88]	; (8001b58 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001b00:	f7ff fecd 	bl	800189e <LL_ADC_IsEnabled>
 8001b04:	4603      	mov	r3, r0
 8001b06:	431c      	orrs	r4, r3
 8001b08:	4815      	ldr	r0, [pc, #84]	; (8001b60 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001b0a:	f7ff fec8 	bl	800189e <LL_ADC_IsEnabled>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	4323      	orrs	r3, r4
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d112      	bne.n	8001b3c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001b16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001b1e:	f023 030f 	bic.w	r3, r3, #15
 8001b22:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001b24:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001b26:	e009      	b.n	8001b3c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b2c:	f043 0220 	orr.w	r2, r3, #32
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001b3a:	e000      	b.n	8001b3e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001b3c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001b46:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	377c      	adds	r7, #124	; 0x7c
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd90      	pop	{r4, r7, pc}
 8001b52:	bf00      	nop
 8001b54:	50040000 	.word	0x50040000
 8001b58:	50040100 	.word	0x50040100
 8001b5c:	50040300 	.word	0x50040300
 8001b60:	50040200 	.word	0x50040200

08001b64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f003 0307 	and.w	r3, r3, #7
 8001b72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b74:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b7a:	68ba      	ldr	r2, [r7, #8]
 8001b7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b80:	4013      	ands	r3, r2
 8001b82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b96:	4a04      	ldr	r2, [pc, #16]	; (8001ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	60d3      	str	r3, [r2, #12]
}
 8001b9c:	bf00      	nop
 8001b9e:	3714      	adds	r7, #20
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	e000ed00 	.word	0xe000ed00

08001bac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bb0:	4b04      	ldr	r3, [pc, #16]	; (8001bc4 <__NVIC_GetPriorityGrouping+0x18>)
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	0a1b      	lsrs	r3, r3, #8
 8001bb6:	f003 0307 	and.w	r3, r3, #7
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	e000ed00 	.word	0xe000ed00

08001bc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	db0b      	blt.n	8001bf2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bda:	79fb      	ldrb	r3, [r7, #7]
 8001bdc:	f003 021f 	and.w	r2, r3, #31
 8001be0:	4907      	ldr	r1, [pc, #28]	; (8001c00 <__NVIC_EnableIRQ+0x38>)
 8001be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be6:	095b      	lsrs	r3, r3, #5
 8001be8:	2001      	movs	r0, #1
 8001bea:	fa00 f202 	lsl.w	r2, r0, r2
 8001bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bf2:	bf00      	nop
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	e000e100 	.word	0xe000e100

08001c04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	6039      	str	r1, [r7, #0]
 8001c0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	db0a      	blt.n	8001c2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	b2da      	uxtb	r2, r3
 8001c1c:	490c      	ldr	r1, [pc, #48]	; (8001c50 <__NVIC_SetPriority+0x4c>)
 8001c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c22:	0112      	lsls	r2, r2, #4
 8001c24:	b2d2      	uxtb	r2, r2
 8001c26:	440b      	add	r3, r1
 8001c28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c2c:	e00a      	b.n	8001c44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	b2da      	uxtb	r2, r3
 8001c32:	4908      	ldr	r1, [pc, #32]	; (8001c54 <__NVIC_SetPriority+0x50>)
 8001c34:	79fb      	ldrb	r3, [r7, #7]
 8001c36:	f003 030f 	and.w	r3, r3, #15
 8001c3a:	3b04      	subs	r3, #4
 8001c3c:	0112      	lsls	r2, r2, #4
 8001c3e:	b2d2      	uxtb	r2, r2
 8001c40:	440b      	add	r3, r1
 8001c42:	761a      	strb	r2, [r3, #24]
}
 8001c44:	bf00      	nop
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr
 8001c50:	e000e100 	.word	0xe000e100
 8001c54:	e000ed00 	.word	0xe000ed00

08001c58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b089      	sub	sp, #36	; 0x24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	f003 0307 	and.w	r3, r3, #7
 8001c6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	f1c3 0307 	rsb	r3, r3, #7
 8001c72:	2b04      	cmp	r3, #4
 8001c74:	bf28      	it	cs
 8001c76:	2304      	movcs	r3, #4
 8001c78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	3304      	adds	r3, #4
 8001c7e:	2b06      	cmp	r3, #6
 8001c80:	d902      	bls.n	8001c88 <NVIC_EncodePriority+0x30>
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	3b03      	subs	r3, #3
 8001c86:	e000      	b.n	8001c8a <NVIC_EncodePriority+0x32>
 8001c88:	2300      	movs	r3, #0
 8001c8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	43da      	mvns	r2, r3
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	401a      	ands	r2, r3
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ca0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8001caa:	43d9      	mvns	r1, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb0:	4313      	orrs	r3, r2
         );
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3724      	adds	r7, #36	; 0x24
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
	...

08001cc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cd0:	d301      	bcc.n	8001cd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e00f      	b.n	8001cf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cd6:	4a0a      	ldr	r2, [pc, #40]	; (8001d00 <SysTick_Config+0x40>)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cde:	210f      	movs	r1, #15
 8001ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ce4:	f7ff ff8e 	bl	8001c04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ce8:	4b05      	ldr	r3, [pc, #20]	; (8001d00 <SysTick_Config+0x40>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cee:	4b04      	ldr	r3, [pc, #16]	; (8001d00 <SysTick_Config+0x40>)
 8001cf0:	2207      	movs	r2, #7
 8001cf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	e000e010 	.word	0xe000e010

08001d04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f7ff ff29 	bl	8001b64 <__NVIC_SetPriorityGrouping>
}
 8001d12:	bf00      	nop
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b086      	sub	sp, #24
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	4603      	mov	r3, r0
 8001d22:	60b9      	str	r1, [r7, #8]
 8001d24:	607a      	str	r2, [r7, #4]
 8001d26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d2c:	f7ff ff3e 	bl	8001bac <__NVIC_GetPriorityGrouping>
 8001d30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	68b9      	ldr	r1, [r7, #8]
 8001d36:	6978      	ldr	r0, [r7, #20]
 8001d38:	f7ff ff8e 	bl	8001c58 <NVIC_EncodePriority>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d42:	4611      	mov	r1, r2
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff ff5d 	bl	8001c04 <__NVIC_SetPriority>
}
 8001d4a:	bf00      	nop
 8001d4c:	3718      	adds	r7, #24
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b082      	sub	sp, #8
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	4603      	mov	r3, r0
 8001d5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff ff31 	bl	8001bc8 <__NVIC_EnableIRQ>
}
 8001d66:	bf00      	nop
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b082      	sub	sp, #8
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f7ff ffa2 	bl	8001cc0 <SysTick_Config>
 8001d7c:	4603      	mov	r3, r0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d86:	b480      	push	{r7}
 8001d88:	b085      	sub	sp, #20
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d008      	beq.n	8001db0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2204      	movs	r2, #4
 8001da2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e022      	b.n	8001df6 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f022 020e 	bic.w	r2, r2, #14
 8001dbe:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f022 0201 	bic.w	r2, r2, #1
 8001dce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd4:	f003 021c 	and.w	r2, r3, #28
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ddc:	2101      	movs	r1, #1
 8001dde:	fa01 f202 	lsl.w	r2, r1, r2
 8001de2:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001df4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3714      	adds	r7, #20
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b084      	sub	sp, #16
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d005      	beq.n	8001e26 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2204      	movs	r2, #4
 8001e1e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	73fb      	strb	r3, [r7, #15]
 8001e24:	e029      	b.n	8001e7a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f022 020e 	bic.w	r2, r2, #14
 8001e34:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f022 0201 	bic.w	r2, r2, #1
 8001e44:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4a:	f003 021c 	and.w	r2, r3, #28
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e52:	2101      	movs	r1, #1
 8001e54:	fa01 f202 	lsl.w	r2, r1, r2
 8001e58:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d003      	beq.n	8001e7a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	4798      	blx	r3
    }
  }
  return status;
 8001e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3710      	adds	r7, #16
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b087      	sub	sp, #28
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e92:	e17f      	b.n	8002194 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	2101      	movs	r1, #1
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	f000 8171 	beq.w	800218e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f003 0303 	and.w	r3, r3, #3
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d005      	beq.n	8001ec4 <HAL_GPIO_Init+0x40>
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f003 0303 	and.w	r3, r3, #3
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d130      	bne.n	8001f26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	2203      	movs	r2, #3
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	68da      	ldr	r2, [r3, #12]
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001efa:	2201      	movs	r2, #1
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	43db      	mvns	r3, r3
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	4013      	ands	r3, r2
 8001f08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	091b      	lsrs	r3, r3, #4
 8001f10:	f003 0201 	and.w	r2, r3, #1
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f003 0303 	and.w	r3, r3, #3
 8001f2e:	2b03      	cmp	r3, #3
 8001f30:	d118      	bne.n	8001f64 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001f38:	2201      	movs	r2, #1
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	43db      	mvns	r3, r3
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	4013      	ands	r3, r2
 8001f46:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	08db      	lsrs	r3, r3, #3
 8001f4e:	f003 0201 	and.w	r2, r3, #1
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f003 0303 	and.w	r3, r3, #3
 8001f6c:	2b03      	cmp	r3, #3
 8001f6e:	d017      	beq.n	8001fa0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	2203      	movs	r2, #3
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	43db      	mvns	r3, r3
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	4013      	ands	r3, r2
 8001f86:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	693a      	ldr	r2, [r7, #16]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f003 0303 	and.w	r3, r3, #3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d123      	bne.n	8001ff4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	08da      	lsrs	r2, r3, #3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	3208      	adds	r2, #8
 8001fb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	f003 0307 	and.w	r3, r3, #7
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	220f      	movs	r2, #15
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	691a      	ldr	r2, [r3, #16]
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	f003 0307 	and.w	r3, r3, #7
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	08da      	lsrs	r2, r3, #3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	3208      	adds	r2, #8
 8001fee:	6939      	ldr	r1, [r7, #16]
 8001ff0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	2203      	movs	r2, #3
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	43db      	mvns	r3, r3
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	4013      	ands	r3, r2
 800200a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f003 0203 	and.w	r2, r3, #3
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	4313      	orrs	r3, r2
 8002020:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	693a      	ldr	r2, [r7, #16]
 8002026:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002030:	2b00      	cmp	r3, #0
 8002032:	f000 80ac 	beq.w	800218e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002036:	4b5f      	ldr	r3, [pc, #380]	; (80021b4 <HAL_GPIO_Init+0x330>)
 8002038:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800203a:	4a5e      	ldr	r2, [pc, #376]	; (80021b4 <HAL_GPIO_Init+0x330>)
 800203c:	f043 0301 	orr.w	r3, r3, #1
 8002040:	6613      	str	r3, [r2, #96]	; 0x60
 8002042:	4b5c      	ldr	r3, [pc, #368]	; (80021b4 <HAL_GPIO_Init+0x330>)
 8002044:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	60bb      	str	r3, [r7, #8]
 800204c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800204e:	4a5a      	ldr	r2, [pc, #360]	; (80021b8 <HAL_GPIO_Init+0x334>)
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	089b      	lsrs	r3, r3, #2
 8002054:	3302      	adds	r3, #2
 8002056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800205a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	f003 0303 	and.w	r3, r3, #3
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	220f      	movs	r2, #15
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	43db      	mvns	r3, r3
 800206c:	693a      	ldr	r2, [r7, #16]
 800206e:	4013      	ands	r3, r2
 8002070:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002078:	d025      	beq.n	80020c6 <HAL_GPIO_Init+0x242>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a4f      	ldr	r2, [pc, #316]	; (80021bc <HAL_GPIO_Init+0x338>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d01f      	beq.n	80020c2 <HAL_GPIO_Init+0x23e>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a4e      	ldr	r2, [pc, #312]	; (80021c0 <HAL_GPIO_Init+0x33c>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d019      	beq.n	80020be <HAL_GPIO_Init+0x23a>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a4d      	ldr	r2, [pc, #308]	; (80021c4 <HAL_GPIO_Init+0x340>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d013      	beq.n	80020ba <HAL_GPIO_Init+0x236>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a4c      	ldr	r2, [pc, #304]	; (80021c8 <HAL_GPIO_Init+0x344>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d00d      	beq.n	80020b6 <HAL_GPIO_Init+0x232>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a4b      	ldr	r2, [pc, #300]	; (80021cc <HAL_GPIO_Init+0x348>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d007      	beq.n	80020b2 <HAL_GPIO_Init+0x22e>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a4a      	ldr	r2, [pc, #296]	; (80021d0 <HAL_GPIO_Init+0x34c>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d101      	bne.n	80020ae <HAL_GPIO_Init+0x22a>
 80020aa:	2306      	movs	r3, #6
 80020ac:	e00c      	b.n	80020c8 <HAL_GPIO_Init+0x244>
 80020ae:	2307      	movs	r3, #7
 80020b0:	e00a      	b.n	80020c8 <HAL_GPIO_Init+0x244>
 80020b2:	2305      	movs	r3, #5
 80020b4:	e008      	b.n	80020c8 <HAL_GPIO_Init+0x244>
 80020b6:	2304      	movs	r3, #4
 80020b8:	e006      	b.n	80020c8 <HAL_GPIO_Init+0x244>
 80020ba:	2303      	movs	r3, #3
 80020bc:	e004      	b.n	80020c8 <HAL_GPIO_Init+0x244>
 80020be:	2302      	movs	r3, #2
 80020c0:	e002      	b.n	80020c8 <HAL_GPIO_Init+0x244>
 80020c2:	2301      	movs	r3, #1
 80020c4:	e000      	b.n	80020c8 <HAL_GPIO_Init+0x244>
 80020c6:	2300      	movs	r3, #0
 80020c8:	697a      	ldr	r2, [r7, #20]
 80020ca:	f002 0203 	and.w	r2, r2, #3
 80020ce:	0092      	lsls	r2, r2, #2
 80020d0:	4093      	lsls	r3, r2
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020d8:	4937      	ldr	r1, [pc, #220]	; (80021b8 <HAL_GPIO_Init+0x334>)
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	089b      	lsrs	r3, r3, #2
 80020de:	3302      	adds	r3, #2
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020e6:	4b3b      	ldr	r3, [pc, #236]	; (80021d4 <HAL_GPIO_Init+0x350>)
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	43db      	mvns	r3, r3
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	4013      	ands	r3, r2
 80020f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d003      	beq.n	800210a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	4313      	orrs	r3, r2
 8002108:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800210a:	4a32      	ldr	r2, [pc, #200]	; (80021d4 <HAL_GPIO_Init+0x350>)
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002110:	4b30      	ldr	r3, [pc, #192]	; (80021d4 <HAL_GPIO_Init+0x350>)
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	43db      	mvns	r3, r3
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	4013      	ands	r3, r2
 800211e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d003      	beq.n	8002134 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	4313      	orrs	r3, r2
 8002132:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002134:	4a27      	ldr	r2, [pc, #156]	; (80021d4 <HAL_GPIO_Init+0x350>)
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800213a:	4b26      	ldr	r3, [pc, #152]	; (80021d4 <HAL_GPIO_Init+0x350>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	43db      	mvns	r3, r3
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	4013      	ands	r3, r2
 8002148:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d003      	beq.n	800215e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	4313      	orrs	r3, r2
 800215c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800215e:	4a1d      	ldr	r2, [pc, #116]	; (80021d4 <HAL_GPIO_Init+0x350>)
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002164:	4b1b      	ldr	r3, [pc, #108]	; (80021d4 <HAL_GPIO_Init+0x350>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	43db      	mvns	r3, r3
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	4013      	ands	r3, r2
 8002172:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d003      	beq.n	8002188 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	4313      	orrs	r3, r2
 8002186:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002188:	4a12      	ldr	r2, [pc, #72]	; (80021d4 <HAL_GPIO_Init+0x350>)
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	3301      	adds	r3, #1
 8002192:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	fa22 f303 	lsr.w	r3, r2, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f47f ae78 	bne.w	8001e94 <HAL_GPIO_Init+0x10>
  }
}
 80021a4:	bf00      	nop
 80021a6:	bf00      	nop
 80021a8:	371c      	adds	r7, #28
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	40021000 	.word	0x40021000
 80021b8:	40010000 	.word	0x40010000
 80021bc:	48000400 	.word	0x48000400
 80021c0:	48000800 	.word	0x48000800
 80021c4:	48000c00 	.word	0x48000c00
 80021c8:	48001000 	.word	0x48001000
 80021cc:	48001400 	.word	0x48001400
 80021d0:	48001800 	.word	0x48001800
 80021d4:	40010400 	.word	0x40010400

080021d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	460b      	mov	r3, r1
 80021e2:	807b      	strh	r3, [r7, #2]
 80021e4:	4613      	mov	r3, r2
 80021e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021e8:	787b      	ldrb	r3, [r7, #1]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d003      	beq.n	80021f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021ee:	887a      	ldrh	r2, [r7, #2]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021f4:	e002      	b.n	80021fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021f6:	887a      	ldrh	r2, [r7, #2]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80021fc:	bf00      	nop
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800220c:	4b04      	ldr	r3, [pc, #16]	; (8002220 <HAL_PWREx_GetVoltageRange+0x18>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002214:	4618      	mov	r0, r3
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	40007000 	.word	0x40007000

08002224 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002232:	d130      	bne.n	8002296 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002234:	4b23      	ldr	r3, [pc, #140]	; (80022c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800223c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002240:	d038      	beq.n	80022b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002242:	4b20      	ldr	r3, [pc, #128]	; (80022c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800224a:	4a1e      	ldr	r2, [pc, #120]	; (80022c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800224c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002250:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002252:	4b1d      	ldr	r3, [pc, #116]	; (80022c8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2232      	movs	r2, #50	; 0x32
 8002258:	fb02 f303 	mul.w	r3, r2, r3
 800225c:	4a1b      	ldr	r2, [pc, #108]	; (80022cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800225e:	fba2 2303 	umull	r2, r3, r2, r3
 8002262:	0c9b      	lsrs	r3, r3, #18
 8002264:	3301      	adds	r3, #1
 8002266:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002268:	e002      	b.n	8002270 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	3b01      	subs	r3, #1
 800226e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002270:	4b14      	ldr	r3, [pc, #80]	; (80022c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002272:	695b      	ldr	r3, [r3, #20]
 8002274:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002278:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800227c:	d102      	bne.n	8002284 <HAL_PWREx_ControlVoltageScaling+0x60>
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d1f2      	bne.n	800226a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002284:	4b0f      	ldr	r3, [pc, #60]	; (80022c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002286:	695b      	ldr	r3, [r3, #20]
 8002288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800228c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002290:	d110      	bne.n	80022b4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e00f      	b.n	80022b6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002296:	4b0b      	ldr	r3, [pc, #44]	; (80022c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800229e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022a2:	d007      	beq.n	80022b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80022a4:	4b07      	ldr	r3, [pc, #28]	; (80022c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022ac:	4a05      	ldr	r2, [pc, #20]	; (80022c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022b2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3714      	adds	r7, #20
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	40007000 	.word	0x40007000
 80022c8:	20000000 	.word	0x20000000
 80022cc:	431bde83 	.word	0x431bde83

080022d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b088      	sub	sp, #32
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e3ca      	b.n	8002a78 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022e2:	4b97      	ldr	r3, [pc, #604]	; (8002540 <HAL_RCC_OscConfig+0x270>)
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f003 030c 	and.w	r3, r3, #12
 80022ea:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022ec:	4b94      	ldr	r3, [pc, #592]	; (8002540 <HAL_RCC_OscConfig+0x270>)
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	f003 0303 	and.w	r3, r3, #3
 80022f4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0310 	and.w	r3, r3, #16
 80022fe:	2b00      	cmp	r3, #0
 8002300:	f000 80e4 	beq.w	80024cc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d007      	beq.n	800231a <HAL_RCC_OscConfig+0x4a>
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	2b0c      	cmp	r3, #12
 800230e:	f040 808b 	bne.w	8002428 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	2b01      	cmp	r3, #1
 8002316:	f040 8087 	bne.w	8002428 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800231a:	4b89      	ldr	r3, [pc, #548]	; (8002540 <HAL_RCC_OscConfig+0x270>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d005      	beq.n	8002332 <HAL_RCC_OscConfig+0x62>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	699b      	ldr	r3, [r3, #24]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d101      	bne.n	8002332 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e3a2      	b.n	8002a78 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a1a      	ldr	r2, [r3, #32]
 8002336:	4b82      	ldr	r3, [pc, #520]	; (8002540 <HAL_RCC_OscConfig+0x270>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0308 	and.w	r3, r3, #8
 800233e:	2b00      	cmp	r3, #0
 8002340:	d004      	beq.n	800234c <HAL_RCC_OscConfig+0x7c>
 8002342:	4b7f      	ldr	r3, [pc, #508]	; (8002540 <HAL_RCC_OscConfig+0x270>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800234a:	e005      	b.n	8002358 <HAL_RCC_OscConfig+0x88>
 800234c:	4b7c      	ldr	r3, [pc, #496]	; (8002540 <HAL_RCC_OscConfig+0x270>)
 800234e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002352:	091b      	lsrs	r3, r3, #4
 8002354:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002358:	4293      	cmp	r3, r2
 800235a:	d223      	bcs.n	80023a4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a1b      	ldr	r3, [r3, #32]
 8002360:	4618      	mov	r0, r3
 8002362:	f000 fd55 	bl	8002e10 <RCC_SetFlashLatencyFromMSIRange>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e383      	b.n	8002a78 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002370:	4b73      	ldr	r3, [pc, #460]	; (8002540 <HAL_RCC_OscConfig+0x270>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a72      	ldr	r2, [pc, #456]	; (8002540 <HAL_RCC_OscConfig+0x270>)
 8002376:	f043 0308 	orr.w	r3, r3, #8
 800237a:	6013      	str	r3, [r2, #0]
 800237c:	4b70      	ldr	r3, [pc, #448]	; (8002540 <HAL_RCC_OscConfig+0x270>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a1b      	ldr	r3, [r3, #32]
 8002388:	496d      	ldr	r1, [pc, #436]	; (8002540 <HAL_RCC_OscConfig+0x270>)
 800238a:	4313      	orrs	r3, r2
 800238c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800238e:	4b6c      	ldr	r3, [pc, #432]	; (8002540 <HAL_RCC_OscConfig+0x270>)
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	69db      	ldr	r3, [r3, #28]
 800239a:	021b      	lsls	r3, r3, #8
 800239c:	4968      	ldr	r1, [pc, #416]	; (8002540 <HAL_RCC_OscConfig+0x270>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	604b      	str	r3, [r1, #4]
 80023a2:	e025      	b.n	80023f0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023a4:	4b66      	ldr	r3, [pc, #408]	; (8002540 <HAL_RCC_OscConfig+0x270>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a65      	ldr	r2, [pc, #404]	; (8002540 <HAL_RCC_OscConfig+0x270>)
 80023aa:	f043 0308 	orr.w	r3, r3, #8
 80023ae:	6013      	str	r3, [r2, #0]
 80023b0:	4b63      	ldr	r3, [pc, #396]	; (8002540 <HAL_RCC_OscConfig+0x270>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a1b      	ldr	r3, [r3, #32]
 80023bc:	4960      	ldr	r1, [pc, #384]	; (8002540 <HAL_RCC_OscConfig+0x270>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023c2:	4b5f      	ldr	r3, [pc, #380]	; (8002540 <HAL_RCC_OscConfig+0x270>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	69db      	ldr	r3, [r3, #28]
 80023ce:	021b      	lsls	r3, r3, #8
 80023d0:	495b      	ldr	r1, [pc, #364]	; (8002540 <HAL_RCC_OscConfig+0x270>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d109      	bne.n	80023f0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a1b      	ldr	r3, [r3, #32]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f000 fd15 	bl	8002e10 <RCC_SetFlashLatencyFromMSIRange>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e343      	b.n	8002a78 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023f0:	f000 fc4a 	bl	8002c88 <HAL_RCC_GetSysClockFreq>
 80023f4:	4602      	mov	r2, r0
 80023f6:	4b52      	ldr	r3, [pc, #328]	; (8002540 <HAL_RCC_OscConfig+0x270>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	091b      	lsrs	r3, r3, #4
 80023fc:	f003 030f 	and.w	r3, r3, #15
 8002400:	4950      	ldr	r1, [pc, #320]	; (8002544 <HAL_RCC_OscConfig+0x274>)
 8002402:	5ccb      	ldrb	r3, [r1, r3]
 8002404:	f003 031f 	and.w	r3, r3, #31
 8002408:	fa22 f303 	lsr.w	r3, r2, r3
 800240c:	4a4e      	ldr	r2, [pc, #312]	; (8002548 <HAL_RCC_OscConfig+0x278>)
 800240e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002410:	4b4e      	ldr	r3, [pc, #312]	; (800254c <HAL_RCC_OscConfig+0x27c>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4618      	mov	r0, r3
 8002416:	f7fe fcc1 	bl	8000d9c <HAL_InitTick>
 800241a:	4603      	mov	r3, r0
 800241c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800241e:	7bfb      	ldrb	r3, [r7, #15]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d052      	beq.n	80024ca <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002424:	7bfb      	ldrb	r3, [r7, #15]
 8002426:	e327      	b.n	8002a78 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d032      	beq.n	8002496 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002430:	4b43      	ldr	r3, [pc, #268]	; (8002540 <HAL_RCC_OscConfig+0x270>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a42      	ldr	r2, [pc, #264]	; (8002540 <HAL_RCC_OscConfig+0x270>)
 8002436:	f043 0301 	orr.w	r3, r3, #1
 800243a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800243c:	f7fe fcfe 	bl	8000e3c <HAL_GetTick>
 8002440:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002444:	f7fe fcfa 	bl	8000e3c <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e310      	b.n	8002a78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002456:	4b3a      	ldr	r3, [pc, #232]	; (8002540 <HAL_RCC_OscConfig+0x270>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d0f0      	beq.n	8002444 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002462:	4b37      	ldr	r3, [pc, #220]	; (8002540 <HAL_RCC_OscConfig+0x270>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a36      	ldr	r2, [pc, #216]	; (8002540 <HAL_RCC_OscConfig+0x270>)
 8002468:	f043 0308 	orr.w	r3, r3, #8
 800246c:	6013      	str	r3, [r2, #0]
 800246e:	4b34      	ldr	r3, [pc, #208]	; (8002540 <HAL_RCC_OscConfig+0x270>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a1b      	ldr	r3, [r3, #32]
 800247a:	4931      	ldr	r1, [pc, #196]	; (8002540 <HAL_RCC_OscConfig+0x270>)
 800247c:	4313      	orrs	r3, r2
 800247e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002480:	4b2f      	ldr	r3, [pc, #188]	; (8002540 <HAL_RCC_OscConfig+0x270>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	69db      	ldr	r3, [r3, #28]
 800248c:	021b      	lsls	r3, r3, #8
 800248e:	492c      	ldr	r1, [pc, #176]	; (8002540 <HAL_RCC_OscConfig+0x270>)
 8002490:	4313      	orrs	r3, r2
 8002492:	604b      	str	r3, [r1, #4]
 8002494:	e01a      	b.n	80024cc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002496:	4b2a      	ldr	r3, [pc, #168]	; (8002540 <HAL_RCC_OscConfig+0x270>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a29      	ldr	r2, [pc, #164]	; (8002540 <HAL_RCC_OscConfig+0x270>)
 800249c:	f023 0301 	bic.w	r3, r3, #1
 80024a0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024a2:	f7fe fccb 	bl	8000e3c <HAL_GetTick>
 80024a6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024a8:	e008      	b.n	80024bc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024aa:	f7fe fcc7 	bl	8000e3c <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e2dd      	b.n	8002a78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024bc:	4b20      	ldr	r3, [pc, #128]	; (8002540 <HAL_RCC_OscConfig+0x270>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d1f0      	bne.n	80024aa <HAL_RCC_OscConfig+0x1da>
 80024c8:	e000      	b.n	80024cc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024ca:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0301 	and.w	r3, r3, #1
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d074      	beq.n	80025c2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	2b08      	cmp	r3, #8
 80024dc:	d005      	beq.n	80024ea <HAL_RCC_OscConfig+0x21a>
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	2b0c      	cmp	r3, #12
 80024e2:	d10e      	bne.n	8002502 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	2b03      	cmp	r3, #3
 80024e8:	d10b      	bne.n	8002502 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ea:	4b15      	ldr	r3, [pc, #84]	; (8002540 <HAL_RCC_OscConfig+0x270>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d064      	beq.n	80025c0 <HAL_RCC_OscConfig+0x2f0>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d160      	bne.n	80025c0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e2ba      	b.n	8002a78 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800250a:	d106      	bne.n	800251a <HAL_RCC_OscConfig+0x24a>
 800250c:	4b0c      	ldr	r3, [pc, #48]	; (8002540 <HAL_RCC_OscConfig+0x270>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a0b      	ldr	r2, [pc, #44]	; (8002540 <HAL_RCC_OscConfig+0x270>)
 8002512:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002516:	6013      	str	r3, [r2, #0]
 8002518:	e026      	b.n	8002568 <HAL_RCC_OscConfig+0x298>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002522:	d115      	bne.n	8002550 <HAL_RCC_OscConfig+0x280>
 8002524:	4b06      	ldr	r3, [pc, #24]	; (8002540 <HAL_RCC_OscConfig+0x270>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a05      	ldr	r2, [pc, #20]	; (8002540 <HAL_RCC_OscConfig+0x270>)
 800252a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800252e:	6013      	str	r3, [r2, #0]
 8002530:	4b03      	ldr	r3, [pc, #12]	; (8002540 <HAL_RCC_OscConfig+0x270>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a02      	ldr	r2, [pc, #8]	; (8002540 <HAL_RCC_OscConfig+0x270>)
 8002536:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800253a:	6013      	str	r3, [r2, #0]
 800253c:	e014      	b.n	8002568 <HAL_RCC_OscConfig+0x298>
 800253e:	bf00      	nop
 8002540:	40021000 	.word	0x40021000
 8002544:	08005f2c 	.word	0x08005f2c
 8002548:	20000000 	.word	0x20000000
 800254c:	20000004 	.word	0x20000004
 8002550:	4ba0      	ldr	r3, [pc, #640]	; (80027d4 <HAL_RCC_OscConfig+0x504>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a9f      	ldr	r2, [pc, #636]	; (80027d4 <HAL_RCC_OscConfig+0x504>)
 8002556:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800255a:	6013      	str	r3, [r2, #0]
 800255c:	4b9d      	ldr	r3, [pc, #628]	; (80027d4 <HAL_RCC_OscConfig+0x504>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a9c      	ldr	r2, [pc, #624]	; (80027d4 <HAL_RCC_OscConfig+0x504>)
 8002562:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002566:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d013      	beq.n	8002598 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002570:	f7fe fc64 	bl	8000e3c <HAL_GetTick>
 8002574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002576:	e008      	b.n	800258a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002578:	f7fe fc60 	bl	8000e3c <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b64      	cmp	r3, #100	; 0x64
 8002584:	d901      	bls.n	800258a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e276      	b.n	8002a78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800258a:	4b92      	ldr	r3, [pc, #584]	; (80027d4 <HAL_RCC_OscConfig+0x504>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d0f0      	beq.n	8002578 <HAL_RCC_OscConfig+0x2a8>
 8002596:	e014      	b.n	80025c2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002598:	f7fe fc50 	bl	8000e3c <HAL_GetTick>
 800259c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800259e:	e008      	b.n	80025b2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025a0:	f7fe fc4c 	bl	8000e3c <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b64      	cmp	r3, #100	; 0x64
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e262      	b.n	8002a78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025b2:	4b88      	ldr	r3, [pc, #544]	; (80027d4 <HAL_RCC_OscConfig+0x504>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d1f0      	bne.n	80025a0 <HAL_RCC_OscConfig+0x2d0>
 80025be:	e000      	b.n	80025c2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d060      	beq.n	8002690 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	2b04      	cmp	r3, #4
 80025d2:	d005      	beq.n	80025e0 <HAL_RCC_OscConfig+0x310>
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	2b0c      	cmp	r3, #12
 80025d8:	d119      	bne.n	800260e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d116      	bne.n	800260e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025e0:	4b7c      	ldr	r3, [pc, #496]	; (80027d4 <HAL_RCC_OscConfig+0x504>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d005      	beq.n	80025f8 <HAL_RCC_OscConfig+0x328>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d101      	bne.n	80025f8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e23f      	b.n	8002a78 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f8:	4b76      	ldr	r3, [pc, #472]	; (80027d4 <HAL_RCC_OscConfig+0x504>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	691b      	ldr	r3, [r3, #16]
 8002604:	061b      	lsls	r3, r3, #24
 8002606:	4973      	ldr	r1, [pc, #460]	; (80027d4 <HAL_RCC_OscConfig+0x504>)
 8002608:	4313      	orrs	r3, r2
 800260a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800260c:	e040      	b.n	8002690 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d023      	beq.n	800265e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002616:	4b6f      	ldr	r3, [pc, #444]	; (80027d4 <HAL_RCC_OscConfig+0x504>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a6e      	ldr	r2, [pc, #440]	; (80027d4 <HAL_RCC_OscConfig+0x504>)
 800261c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002620:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002622:	f7fe fc0b 	bl	8000e3c <HAL_GetTick>
 8002626:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002628:	e008      	b.n	800263c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800262a:	f7fe fc07 	bl	8000e3c <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d901      	bls.n	800263c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e21d      	b.n	8002a78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800263c:	4b65      	ldr	r3, [pc, #404]	; (80027d4 <HAL_RCC_OscConfig+0x504>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002644:	2b00      	cmp	r3, #0
 8002646:	d0f0      	beq.n	800262a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002648:	4b62      	ldr	r3, [pc, #392]	; (80027d4 <HAL_RCC_OscConfig+0x504>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	061b      	lsls	r3, r3, #24
 8002656:	495f      	ldr	r1, [pc, #380]	; (80027d4 <HAL_RCC_OscConfig+0x504>)
 8002658:	4313      	orrs	r3, r2
 800265a:	604b      	str	r3, [r1, #4]
 800265c:	e018      	b.n	8002690 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800265e:	4b5d      	ldr	r3, [pc, #372]	; (80027d4 <HAL_RCC_OscConfig+0x504>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a5c      	ldr	r2, [pc, #368]	; (80027d4 <HAL_RCC_OscConfig+0x504>)
 8002664:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002668:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800266a:	f7fe fbe7 	bl	8000e3c <HAL_GetTick>
 800266e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002670:	e008      	b.n	8002684 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002672:	f7fe fbe3 	bl	8000e3c <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	2b02      	cmp	r3, #2
 800267e:	d901      	bls.n	8002684 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e1f9      	b.n	8002a78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002684:	4b53      	ldr	r3, [pc, #332]	; (80027d4 <HAL_RCC_OscConfig+0x504>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800268c:	2b00      	cmp	r3, #0
 800268e:	d1f0      	bne.n	8002672 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0308 	and.w	r3, r3, #8
 8002698:	2b00      	cmp	r3, #0
 800269a:	d03c      	beq.n	8002716 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d01c      	beq.n	80026de <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026a4:	4b4b      	ldr	r3, [pc, #300]	; (80027d4 <HAL_RCC_OscConfig+0x504>)
 80026a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026aa:	4a4a      	ldr	r2, [pc, #296]	; (80027d4 <HAL_RCC_OscConfig+0x504>)
 80026ac:	f043 0301 	orr.w	r3, r3, #1
 80026b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b4:	f7fe fbc2 	bl	8000e3c <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026bc:	f7fe fbbe 	bl	8000e3c <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e1d4      	b.n	8002a78 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026ce:	4b41      	ldr	r3, [pc, #260]	; (80027d4 <HAL_RCC_OscConfig+0x504>)
 80026d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d0ef      	beq.n	80026bc <HAL_RCC_OscConfig+0x3ec>
 80026dc:	e01b      	b.n	8002716 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026de:	4b3d      	ldr	r3, [pc, #244]	; (80027d4 <HAL_RCC_OscConfig+0x504>)
 80026e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026e4:	4a3b      	ldr	r2, [pc, #236]	; (80027d4 <HAL_RCC_OscConfig+0x504>)
 80026e6:	f023 0301 	bic.w	r3, r3, #1
 80026ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ee:	f7fe fba5 	bl	8000e3c <HAL_GetTick>
 80026f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026f4:	e008      	b.n	8002708 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026f6:	f7fe fba1 	bl	8000e3c <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d901      	bls.n	8002708 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e1b7      	b.n	8002a78 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002708:	4b32      	ldr	r3, [pc, #200]	; (80027d4 <HAL_RCC_OscConfig+0x504>)
 800270a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d1ef      	bne.n	80026f6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0304 	and.w	r3, r3, #4
 800271e:	2b00      	cmp	r3, #0
 8002720:	f000 80a6 	beq.w	8002870 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002724:	2300      	movs	r3, #0
 8002726:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002728:	4b2a      	ldr	r3, [pc, #168]	; (80027d4 <HAL_RCC_OscConfig+0x504>)
 800272a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800272c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d10d      	bne.n	8002750 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002734:	4b27      	ldr	r3, [pc, #156]	; (80027d4 <HAL_RCC_OscConfig+0x504>)
 8002736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002738:	4a26      	ldr	r2, [pc, #152]	; (80027d4 <HAL_RCC_OscConfig+0x504>)
 800273a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800273e:	6593      	str	r3, [r2, #88]	; 0x58
 8002740:	4b24      	ldr	r3, [pc, #144]	; (80027d4 <HAL_RCC_OscConfig+0x504>)
 8002742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002748:	60bb      	str	r3, [r7, #8]
 800274a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800274c:	2301      	movs	r3, #1
 800274e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002750:	4b21      	ldr	r3, [pc, #132]	; (80027d8 <HAL_RCC_OscConfig+0x508>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002758:	2b00      	cmp	r3, #0
 800275a:	d118      	bne.n	800278e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800275c:	4b1e      	ldr	r3, [pc, #120]	; (80027d8 <HAL_RCC_OscConfig+0x508>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a1d      	ldr	r2, [pc, #116]	; (80027d8 <HAL_RCC_OscConfig+0x508>)
 8002762:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002766:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002768:	f7fe fb68 	bl	8000e3c <HAL_GetTick>
 800276c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800276e:	e008      	b.n	8002782 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002770:	f7fe fb64 	bl	8000e3c <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e17a      	b.n	8002a78 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002782:	4b15      	ldr	r3, [pc, #84]	; (80027d8 <HAL_RCC_OscConfig+0x508>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800278a:	2b00      	cmp	r3, #0
 800278c:	d0f0      	beq.n	8002770 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d108      	bne.n	80027a8 <HAL_RCC_OscConfig+0x4d8>
 8002796:	4b0f      	ldr	r3, [pc, #60]	; (80027d4 <HAL_RCC_OscConfig+0x504>)
 8002798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800279c:	4a0d      	ldr	r2, [pc, #52]	; (80027d4 <HAL_RCC_OscConfig+0x504>)
 800279e:	f043 0301 	orr.w	r3, r3, #1
 80027a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027a6:	e029      	b.n	80027fc <HAL_RCC_OscConfig+0x52c>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	2b05      	cmp	r3, #5
 80027ae:	d115      	bne.n	80027dc <HAL_RCC_OscConfig+0x50c>
 80027b0:	4b08      	ldr	r3, [pc, #32]	; (80027d4 <HAL_RCC_OscConfig+0x504>)
 80027b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027b6:	4a07      	ldr	r2, [pc, #28]	; (80027d4 <HAL_RCC_OscConfig+0x504>)
 80027b8:	f043 0304 	orr.w	r3, r3, #4
 80027bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027c0:	4b04      	ldr	r3, [pc, #16]	; (80027d4 <HAL_RCC_OscConfig+0x504>)
 80027c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c6:	4a03      	ldr	r2, [pc, #12]	; (80027d4 <HAL_RCC_OscConfig+0x504>)
 80027c8:	f043 0301 	orr.w	r3, r3, #1
 80027cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027d0:	e014      	b.n	80027fc <HAL_RCC_OscConfig+0x52c>
 80027d2:	bf00      	nop
 80027d4:	40021000 	.word	0x40021000
 80027d8:	40007000 	.word	0x40007000
 80027dc:	4b9c      	ldr	r3, [pc, #624]	; (8002a50 <HAL_RCC_OscConfig+0x780>)
 80027de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027e2:	4a9b      	ldr	r2, [pc, #620]	; (8002a50 <HAL_RCC_OscConfig+0x780>)
 80027e4:	f023 0301 	bic.w	r3, r3, #1
 80027e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027ec:	4b98      	ldr	r3, [pc, #608]	; (8002a50 <HAL_RCC_OscConfig+0x780>)
 80027ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027f2:	4a97      	ldr	r2, [pc, #604]	; (8002a50 <HAL_RCC_OscConfig+0x780>)
 80027f4:	f023 0304 	bic.w	r3, r3, #4
 80027f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d016      	beq.n	8002832 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002804:	f7fe fb1a 	bl	8000e3c <HAL_GetTick>
 8002808:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800280a:	e00a      	b.n	8002822 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800280c:	f7fe fb16 	bl	8000e3c <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	f241 3288 	movw	r2, #5000	; 0x1388
 800281a:	4293      	cmp	r3, r2
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e12a      	b.n	8002a78 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002822:	4b8b      	ldr	r3, [pc, #556]	; (8002a50 <HAL_RCC_OscConfig+0x780>)
 8002824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d0ed      	beq.n	800280c <HAL_RCC_OscConfig+0x53c>
 8002830:	e015      	b.n	800285e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002832:	f7fe fb03 	bl	8000e3c <HAL_GetTick>
 8002836:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002838:	e00a      	b.n	8002850 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800283a:	f7fe faff 	bl	8000e3c <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	f241 3288 	movw	r2, #5000	; 0x1388
 8002848:	4293      	cmp	r3, r2
 800284a:	d901      	bls.n	8002850 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e113      	b.n	8002a78 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002850:	4b7f      	ldr	r3, [pc, #508]	; (8002a50 <HAL_RCC_OscConfig+0x780>)
 8002852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1ed      	bne.n	800283a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800285e:	7ffb      	ldrb	r3, [r7, #31]
 8002860:	2b01      	cmp	r3, #1
 8002862:	d105      	bne.n	8002870 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002864:	4b7a      	ldr	r3, [pc, #488]	; (8002a50 <HAL_RCC_OscConfig+0x780>)
 8002866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002868:	4a79      	ldr	r2, [pc, #484]	; (8002a50 <HAL_RCC_OscConfig+0x780>)
 800286a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800286e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002874:	2b00      	cmp	r3, #0
 8002876:	f000 80fe 	beq.w	8002a76 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287e:	2b02      	cmp	r3, #2
 8002880:	f040 80d0 	bne.w	8002a24 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002884:	4b72      	ldr	r3, [pc, #456]	; (8002a50 <HAL_RCC_OscConfig+0x780>)
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	f003 0203 	and.w	r2, r3, #3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002894:	429a      	cmp	r2, r3
 8002896:	d130      	bne.n	80028fa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a2:	3b01      	subs	r3, #1
 80028a4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d127      	bne.n	80028fa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028b4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d11f      	bne.n	80028fa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80028c4:	2a07      	cmp	r2, #7
 80028c6:	bf14      	ite	ne
 80028c8:	2201      	movne	r2, #1
 80028ca:	2200      	moveq	r2, #0
 80028cc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d113      	bne.n	80028fa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028dc:	085b      	lsrs	r3, r3, #1
 80028de:	3b01      	subs	r3, #1
 80028e0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d109      	bne.n	80028fa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f0:	085b      	lsrs	r3, r3, #1
 80028f2:	3b01      	subs	r3, #1
 80028f4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d06e      	beq.n	80029d8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	2b0c      	cmp	r3, #12
 80028fe:	d069      	beq.n	80029d4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002900:	4b53      	ldr	r3, [pc, #332]	; (8002a50 <HAL_RCC_OscConfig+0x780>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d105      	bne.n	8002918 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800290c:	4b50      	ldr	r3, [pc, #320]	; (8002a50 <HAL_RCC_OscConfig+0x780>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e0ad      	b.n	8002a78 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800291c:	4b4c      	ldr	r3, [pc, #304]	; (8002a50 <HAL_RCC_OscConfig+0x780>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a4b      	ldr	r2, [pc, #300]	; (8002a50 <HAL_RCC_OscConfig+0x780>)
 8002922:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002926:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002928:	f7fe fa88 	bl	8000e3c <HAL_GetTick>
 800292c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800292e:	e008      	b.n	8002942 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002930:	f7fe fa84 	bl	8000e3c <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b02      	cmp	r3, #2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e09a      	b.n	8002a78 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002942:	4b43      	ldr	r3, [pc, #268]	; (8002a50 <HAL_RCC_OscConfig+0x780>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1f0      	bne.n	8002930 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800294e:	4b40      	ldr	r3, [pc, #256]	; (8002a50 <HAL_RCC_OscConfig+0x780>)
 8002950:	68da      	ldr	r2, [r3, #12]
 8002952:	4b40      	ldr	r3, [pc, #256]	; (8002a54 <HAL_RCC_OscConfig+0x784>)
 8002954:	4013      	ands	r3, r2
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800295e:	3a01      	subs	r2, #1
 8002960:	0112      	lsls	r2, r2, #4
 8002962:	4311      	orrs	r1, r2
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002968:	0212      	lsls	r2, r2, #8
 800296a:	4311      	orrs	r1, r2
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002970:	0852      	lsrs	r2, r2, #1
 8002972:	3a01      	subs	r2, #1
 8002974:	0552      	lsls	r2, r2, #21
 8002976:	4311      	orrs	r1, r2
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800297c:	0852      	lsrs	r2, r2, #1
 800297e:	3a01      	subs	r2, #1
 8002980:	0652      	lsls	r2, r2, #25
 8002982:	4311      	orrs	r1, r2
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002988:	0912      	lsrs	r2, r2, #4
 800298a:	0452      	lsls	r2, r2, #17
 800298c:	430a      	orrs	r2, r1
 800298e:	4930      	ldr	r1, [pc, #192]	; (8002a50 <HAL_RCC_OscConfig+0x780>)
 8002990:	4313      	orrs	r3, r2
 8002992:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002994:	4b2e      	ldr	r3, [pc, #184]	; (8002a50 <HAL_RCC_OscConfig+0x780>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a2d      	ldr	r2, [pc, #180]	; (8002a50 <HAL_RCC_OscConfig+0x780>)
 800299a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800299e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029a0:	4b2b      	ldr	r3, [pc, #172]	; (8002a50 <HAL_RCC_OscConfig+0x780>)
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	4a2a      	ldr	r2, [pc, #168]	; (8002a50 <HAL_RCC_OscConfig+0x780>)
 80029a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029aa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029ac:	f7fe fa46 	bl	8000e3c <HAL_GetTick>
 80029b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029b2:	e008      	b.n	80029c6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b4:	f7fe fa42 	bl	8000e3c <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e058      	b.n	8002a78 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029c6:	4b22      	ldr	r3, [pc, #136]	; (8002a50 <HAL_RCC_OscConfig+0x780>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d0f0      	beq.n	80029b4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029d2:	e050      	b.n	8002a76 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e04f      	b.n	8002a78 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029d8:	4b1d      	ldr	r3, [pc, #116]	; (8002a50 <HAL_RCC_OscConfig+0x780>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d148      	bne.n	8002a76 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80029e4:	4b1a      	ldr	r3, [pc, #104]	; (8002a50 <HAL_RCC_OscConfig+0x780>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a19      	ldr	r2, [pc, #100]	; (8002a50 <HAL_RCC_OscConfig+0x780>)
 80029ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029ee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029f0:	4b17      	ldr	r3, [pc, #92]	; (8002a50 <HAL_RCC_OscConfig+0x780>)
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	4a16      	ldr	r2, [pc, #88]	; (8002a50 <HAL_RCC_OscConfig+0x780>)
 80029f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029fa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80029fc:	f7fe fa1e 	bl	8000e3c <HAL_GetTick>
 8002a00:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a02:	e008      	b.n	8002a16 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a04:	f7fe fa1a 	bl	8000e3c <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e030      	b.n	8002a78 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a16:	4b0e      	ldr	r3, [pc, #56]	; (8002a50 <HAL_RCC_OscConfig+0x780>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d0f0      	beq.n	8002a04 <HAL_RCC_OscConfig+0x734>
 8002a22:	e028      	b.n	8002a76 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	2b0c      	cmp	r3, #12
 8002a28:	d023      	beq.n	8002a72 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a2a:	4b09      	ldr	r3, [pc, #36]	; (8002a50 <HAL_RCC_OscConfig+0x780>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a08      	ldr	r2, [pc, #32]	; (8002a50 <HAL_RCC_OscConfig+0x780>)
 8002a30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a36:	f7fe fa01 	bl	8000e3c <HAL_GetTick>
 8002a3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a3c:	e00c      	b.n	8002a58 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a3e:	f7fe f9fd 	bl	8000e3c <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d905      	bls.n	8002a58 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	e013      	b.n	8002a78 <HAL_RCC_OscConfig+0x7a8>
 8002a50:	40021000 	.word	0x40021000
 8002a54:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a58:	4b09      	ldr	r3, [pc, #36]	; (8002a80 <HAL_RCC_OscConfig+0x7b0>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d1ec      	bne.n	8002a3e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002a64:	4b06      	ldr	r3, [pc, #24]	; (8002a80 <HAL_RCC_OscConfig+0x7b0>)
 8002a66:	68da      	ldr	r2, [r3, #12]
 8002a68:	4905      	ldr	r1, [pc, #20]	; (8002a80 <HAL_RCC_OscConfig+0x7b0>)
 8002a6a:	4b06      	ldr	r3, [pc, #24]	; (8002a84 <HAL_RCC_OscConfig+0x7b4>)
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	60cb      	str	r3, [r1, #12]
 8002a70:	e001      	b.n	8002a76 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e000      	b.n	8002a78 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002a76:	2300      	movs	r3, #0
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3720      	adds	r7, #32
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	40021000 	.word	0x40021000
 8002a84:	feeefffc 	.word	0xfeeefffc

08002a88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d101      	bne.n	8002a9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e0e7      	b.n	8002c6c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a9c:	4b75      	ldr	r3, [pc, #468]	; (8002c74 <HAL_RCC_ClockConfig+0x1ec>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0307 	and.w	r3, r3, #7
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d910      	bls.n	8002acc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aaa:	4b72      	ldr	r3, [pc, #456]	; (8002c74 <HAL_RCC_ClockConfig+0x1ec>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f023 0207 	bic.w	r2, r3, #7
 8002ab2:	4970      	ldr	r1, [pc, #448]	; (8002c74 <HAL_RCC_ClockConfig+0x1ec>)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aba:	4b6e      	ldr	r3, [pc, #440]	; (8002c74 <HAL_RCC_ClockConfig+0x1ec>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0307 	and.w	r3, r3, #7
 8002ac2:	683a      	ldr	r2, [r7, #0]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d001      	beq.n	8002acc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e0cf      	b.n	8002c6c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0302 	and.w	r3, r3, #2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d010      	beq.n	8002afa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689a      	ldr	r2, [r3, #8]
 8002adc:	4b66      	ldr	r3, [pc, #408]	; (8002c78 <HAL_RCC_ClockConfig+0x1f0>)
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d908      	bls.n	8002afa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ae8:	4b63      	ldr	r3, [pc, #396]	; (8002c78 <HAL_RCC_ClockConfig+0x1f0>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	4960      	ldr	r1, [pc, #384]	; (8002c78 <HAL_RCC_ClockConfig+0x1f0>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d04c      	beq.n	8002ba0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	2b03      	cmp	r3, #3
 8002b0c:	d107      	bne.n	8002b1e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b0e:	4b5a      	ldr	r3, [pc, #360]	; (8002c78 <HAL_RCC_ClockConfig+0x1f0>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d121      	bne.n	8002b5e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e0a6      	b.n	8002c6c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d107      	bne.n	8002b36 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b26:	4b54      	ldr	r3, [pc, #336]	; (8002c78 <HAL_RCC_ClockConfig+0x1f0>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d115      	bne.n	8002b5e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e09a      	b.n	8002c6c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d107      	bne.n	8002b4e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b3e:	4b4e      	ldr	r3, [pc, #312]	; (8002c78 <HAL_RCC_ClockConfig+0x1f0>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d109      	bne.n	8002b5e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e08e      	b.n	8002c6c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b4e:	4b4a      	ldr	r3, [pc, #296]	; (8002c78 <HAL_RCC_ClockConfig+0x1f0>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e086      	b.n	8002c6c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b5e:	4b46      	ldr	r3, [pc, #280]	; (8002c78 <HAL_RCC_ClockConfig+0x1f0>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f023 0203 	bic.w	r2, r3, #3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	4943      	ldr	r1, [pc, #268]	; (8002c78 <HAL_RCC_ClockConfig+0x1f0>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b70:	f7fe f964 	bl	8000e3c <HAL_GetTick>
 8002b74:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b76:	e00a      	b.n	8002b8e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b78:	f7fe f960 	bl	8000e3c <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e06e      	b.n	8002c6c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b8e:	4b3a      	ldr	r3, [pc, #232]	; (8002c78 <HAL_RCC_ClockConfig+0x1f0>)
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f003 020c 	and.w	r2, r3, #12
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d1eb      	bne.n	8002b78 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0302 	and.w	r3, r3, #2
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d010      	beq.n	8002bce <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689a      	ldr	r2, [r3, #8]
 8002bb0:	4b31      	ldr	r3, [pc, #196]	; (8002c78 <HAL_RCC_ClockConfig+0x1f0>)
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d208      	bcs.n	8002bce <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bbc:	4b2e      	ldr	r3, [pc, #184]	; (8002c78 <HAL_RCC_ClockConfig+0x1f0>)
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	492b      	ldr	r1, [pc, #172]	; (8002c78 <HAL_RCC_ClockConfig+0x1f0>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bce:	4b29      	ldr	r3, [pc, #164]	; (8002c74 <HAL_RCC_ClockConfig+0x1ec>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0307 	and.w	r3, r3, #7
 8002bd6:	683a      	ldr	r2, [r7, #0]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d210      	bcs.n	8002bfe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bdc:	4b25      	ldr	r3, [pc, #148]	; (8002c74 <HAL_RCC_ClockConfig+0x1ec>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f023 0207 	bic.w	r2, r3, #7
 8002be4:	4923      	ldr	r1, [pc, #140]	; (8002c74 <HAL_RCC_ClockConfig+0x1ec>)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bec:	4b21      	ldr	r3, [pc, #132]	; (8002c74 <HAL_RCC_ClockConfig+0x1ec>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0307 	and.w	r3, r3, #7
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d001      	beq.n	8002bfe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e036      	b.n	8002c6c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0304 	and.w	r3, r3, #4
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d008      	beq.n	8002c1c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c0a:	4b1b      	ldr	r3, [pc, #108]	; (8002c78 <HAL_RCC_ClockConfig+0x1f0>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	4918      	ldr	r1, [pc, #96]	; (8002c78 <HAL_RCC_ClockConfig+0x1f0>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0308 	and.w	r3, r3, #8
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d009      	beq.n	8002c3c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c28:	4b13      	ldr	r3, [pc, #76]	; (8002c78 <HAL_RCC_ClockConfig+0x1f0>)
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	691b      	ldr	r3, [r3, #16]
 8002c34:	00db      	lsls	r3, r3, #3
 8002c36:	4910      	ldr	r1, [pc, #64]	; (8002c78 <HAL_RCC_ClockConfig+0x1f0>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c3c:	f000 f824 	bl	8002c88 <HAL_RCC_GetSysClockFreq>
 8002c40:	4602      	mov	r2, r0
 8002c42:	4b0d      	ldr	r3, [pc, #52]	; (8002c78 <HAL_RCC_ClockConfig+0x1f0>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	091b      	lsrs	r3, r3, #4
 8002c48:	f003 030f 	and.w	r3, r3, #15
 8002c4c:	490b      	ldr	r1, [pc, #44]	; (8002c7c <HAL_RCC_ClockConfig+0x1f4>)
 8002c4e:	5ccb      	ldrb	r3, [r1, r3]
 8002c50:	f003 031f 	and.w	r3, r3, #31
 8002c54:	fa22 f303 	lsr.w	r3, r2, r3
 8002c58:	4a09      	ldr	r2, [pc, #36]	; (8002c80 <HAL_RCC_ClockConfig+0x1f8>)
 8002c5a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c5c:	4b09      	ldr	r3, [pc, #36]	; (8002c84 <HAL_RCC_ClockConfig+0x1fc>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7fe f89b 	bl	8000d9c <HAL_InitTick>
 8002c66:	4603      	mov	r3, r0
 8002c68:	72fb      	strb	r3, [r7, #11]

  return status;
 8002c6a:	7afb      	ldrb	r3, [r7, #11]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3710      	adds	r7, #16
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	40022000 	.word	0x40022000
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	08005f2c 	.word	0x08005f2c
 8002c80:	20000000 	.word	0x20000000
 8002c84:	20000004 	.word	0x20000004

08002c88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b089      	sub	sp, #36	; 0x24
 8002c8c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	61fb      	str	r3, [r7, #28]
 8002c92:	2300      	movs	r3, #0
 8002c94:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c96:	4b3e      	ldr	r3, [pc, #248]	; (8002d90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f003 030c 	and.w	r3, r3, #12
 8002c9e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ca0:	4b3b      	ldr	r3, [pc, #236]	; (8002d90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	f003 0303 	and.w	r3, r3, #3
 8002ca8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d005      	beq.n	8002cbc <HAL_RCC_GetSysClockFreq+0x34>
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	2b0c      	cmp	r3, #12
 8002cb4:	d121      	bne.n	8002cfa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d11e      	bne.n	8002cfa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002cbc:	4b34      	ldr	r3, [pc, #208]	; (8002d90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0308 	and.w	r3, r3, #8
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d107      	bne.n	8002cd8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002cc8:	4b31      	ldr	r3, [pc, #196]	; (8002d90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cce:	0a1b      	lsrs	r3, r3, #8
 8002cd0:	f003 030f 	and.w	r3, r3, #15
 8002cd4:	61fb      	str	r3, [r7, #28]
 8002cd6:	e005      	b.n	8002ce4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002cd8:	4b2d      	ldr	r3, [pc, #180]	; (8002d90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	091b      	lsrs	r3, r3, #4
 8002cde:	f003 030f 	and.w	r3, r3, #15
 8002ce2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002ce4:	4a2b      	ldr	r2, [pc, #172]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d10d      	bne.n	8002d10 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cf8:	e00a      	b.n	8002d10 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	2b04      	cmp	r3, #4
 8002cfe:	d102      	bne.n	8002d06 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d00:	4b25      	ldr	r3, [pc, #148]	; (8002d98 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d02:	61bb      	str	r3, [r7, #24]
 8002d04:	e004      	b.n	8002d10 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	2b08      	cmp	r3, #8
 8002d0a:	d101      	bne.n	8002d10 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d0c:	4b23      	ldr	r3, [pc, #140]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x114>)
 8002d0e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	2b0c      	cmp	r3, #12
 8002d14:	d134      	bne.n	8002d80 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d16:	4b1e      	ldr	r3, [pc, #120]	; (8002d90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	f003 0303 	and.w	r3, r3, #3
 8002d1e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d003      	beq.n	8002d2e <HAL_RCC_GetSysClockFreq+0xa6>
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	2b03      	cmp	r3, #3
 8002d2a:	d003      	beq.n	8002d34 <HAL_RCC_GetSysClockFreq+0xac>
 8002d2c:	e005      	b.n	8002d3a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002d2e:	4b1a      	ldr	r3, [pc, #104]	; (8002d98 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d30:	617b      	str	r3, [r7, #20]
      break;
 8002d32:	e005      	b.n	8002d40 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002d34:	4b19      	ldr	r3, [pc, #100]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x114>)
 8002d36:	617b      	str	r3, [r7, #20]
      break;
 8002d38:	e002      	b.n	8002d40 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	617b      	str	r3, [r7, #20]
      break;
 8002d3e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d40:	4b13      	ldr	r3, [pc, #76]	; (8002d90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	091b      	lsrs	r3, r3, #4
 8002d46:	f003 0307 	and.w	r3, r3, #7
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d4e:	4b10      	ldr	r3, [pc, #64]	; (8002d90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	0a1b      	lsrs	r3, r3, #8
 8002d54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d58:	697a      	ldr	r2, [r7, #20]
 8002d5a:	fb03 f202 	mul.w	r2, r3, r2
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d64:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d66:	4b0a      	ldr	r3, [pc, #40]	; (8002d90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	0e5b      	lsrs	r3, r3, #25
 8002d6c:	f003 0303 	and.w	r3, r3, #3
 8002d70:	3301      	adds	r3, #1
 8002d72:	005b      	lsls	r3, r3, #1
 8002d74:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002d76:	697a      	ldr	r2, [r7, #20]
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d7e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002d80:	69bb      	ldr	r3, [r7, #24]
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3724      	adds	r7, #36	; 0x24
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	40021000 	.word	0x40021000
 8002d94:	08005f44 	.word	0x08005f44
 8002d98:	00f42400 	.word	0x00f42400
 8002d9c:	007a1200 	.word	0x007a1200

08002da0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002da4:	4b03      	ldr	r3, [pc, #12]	; (8002db4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002da6:	681b      	ldr	r3, [r3, #0]
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	20000000 	.word	0x20000000

08002db8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002dbc:	f7ff fff0 	bl	8002da0 <HAL_RCC_GetHCLKFreq>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	4b06      	ldr	r3, [pc, #24]	; (8002ddc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	0a1b      	lsrs	r3, r3, #8
 8002dc8:	f003 0307 	and.w	r3, r3, #7
 8002dcc:	4904      	ldr	r1, [pc, #16]	; (8002de0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002dce:	5ccb      	ldrb	r3, [r1, r3]
 8002dd0:	f003 031f 	and.w	r3, r3, #31
 8002dd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	40021000 	.word	0x40021000
 8002de0:	08005f3c 	.word	0x08005f3c

08002de4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002de8:	f7ff ffda 	bl	8002da0 <HAL_RCC_GetHCLKFreq>
 8002dec:	4602      	mov	r2, r0
 8002dee:	4b06      	ldr	r3, [pc, #24]	; (8002e08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	0adb      	lsrs	r3, r3, #11
 8002df4:	f003 0307 	and.w	r3, r3, #7
 8002df8:	4904      	ldr	r1, [pc, #16]	; (8002e0c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002dfa:	5ccb      	ldrb	r3, [r1, r3]
 8002dfc:	f003 031f 	and.w	r3, r3, #31
 8002e00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	08005f3c 	.word	0x08005f3c

08002e10 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002e18:	2300      	movs	r3, #0
 8002e1a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002e1c:	4b2a      	ldr	r3, [pc, #168]	; (8002ec8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d003      	beq.n	8002e30 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002e28:	f7ff f9ee 	bl	8002208 <HAL_PWREx_GetVoltageRange>
 8002e2c:	6178      	str	r0, [r7, #20]
 8002e2e:	e014      	b.n	8002e5a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e30:	4b25      	ldr	r3, [pc, #148]	; (8002ec8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e34:	4a24      	ldr	r2, [pc, #144]	; (8002ec8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e3a:	6593      	str	r3, [r2, #88]	; 0x58
 8002e3c:	4b22      	ldr	r3, [pc, #136]	; (8002ec8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e44:	60fb      	str	r3, [r7, #12]
 8002e46:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002e48:	f7ff f9de 	bl	8002208 <HAL_PWREx_GetVoltageRange>
 8002e4c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002e4e:	4b1e      	ldr	r3, [pc, #120]	; (8002ec8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e52:	4a1d      	ldr	r2, [pc, #116]	; (8002ec8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e58:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e60:	d10b      	bne.n	8002e7a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2b80      	cmp	r3, #128	; 0x80
 8002e66:	d919      	bls.n	8002e9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2ba0      	cmp	r3, #160	; 0xa0
 8002e6c:	d902      	bls.n	8002e74 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e6e:	2302      	movs	r3, #2
 8002e70:	613b      	str	r3, [r7, #16]
 8002e72:	e013      	b.n	8002e9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e74:	2301      	movs	r3, #1
 8002e76:	613b      	str	r3, [r7, #16]
 8002e78:	e010      	b.n	8002e9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2b80      	cmp	r3, #128	; 0x80
 8002e7e:	d902      	bls.n	8002e86 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002e80:	2303      	movs	r3, #3
 8002e82:	613b      	str	r3, [r7, #16]
 8002e84:	e00a      	b.n	8002e9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2b80      	cmp	r3, #128	; 0x80
 8002e8a:	d102      	bne.n	8002e92 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	613b      	str	r3, [r7, #16]
 8002e90:	e004      	b.n	8002e9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2b70      	cmp	r3, #112	; 0x70
 8002e96:	d101      	bne.n	8002e9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e98:	2301      	movs	r3, #1
 8002e9a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e9c:	4b0b      	ldr	r3, [pc, #44]	; (8002ecc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f023 0207 	bic.w	r2, r3, #7
 8002ea4:	4909      	ldr	r1, [pc, #36]	; (8002ecc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002eac:	4b07      	ldr	r3, [pc, #28]	; (8002ecc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0307 	and.w	r3, r3, #7
 8002eb4:	693a      	ldr	r2, [r7, #16]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d001      	beq.n	8002ebe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e000      	b.n	8002ec0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002ebe:	2300      	movs	r3, #0
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3718      	adds	r7, #24
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	40021000 	.word	0x40021000
 8002ecc:	40022000 	.word	0x40022000

08002ed0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b086      	sub	sp, #24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ed8:	2300      	movs	r3, #0
 8002eda:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002edc:	2300      	movs	r3, #0
 8002ede:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d041      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ef0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ef4:	d02a      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002ef6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002efa:	d824      	bhi.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002efc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f00:	d008      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002f02:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f06:	d81e      	bhi.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d00a      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002f0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f10:	d010      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002f12:	e018      	b.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f14:	4b86      	ldr	r3, [pc, #536]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	4a85      	ldr	r2, [pc, #532]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f1e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f20:	e015      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	3304      	adds	r3, #4
 8002f26:	2100      	movs	r1, #0
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f000 fabb 	bl	80034a4 <RCCEx_PLLSAI1_Config>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f32:	e00c      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	3320      	adds	r3, #32
 8002f38:	2100      	movs	r1, #0
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f000 fba6 	bl	800368c <RCCEx_PLLSAI2_Config>
 8002f40:	4603      	mov	r3, r0
 8002f42:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f44:	e003      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	74fb      	strb	r3, [r7, #19]
      break;
 8002f4a:	e000      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002f4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f4e:	7cfb      	ldrb	r3, [r7, #19]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d10b      	bne.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f54:	4b76      	ldr	r3, [pc, #472]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f5a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f62:	4973      	ldr	r1, [pc, #460]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002f6a:	e001      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f6c:	7cfb      	ldrb	r3, [r7, #19]
 8002f6e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d041      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f80:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f84:	d02a      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002f86:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f8a:	d824      	bhi.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002f8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f90:	d008      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002f92:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f96:	d81e      	bhi.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d00a      	beq.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002f9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fa0:	d010      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002fa2:	e018      	b.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002fa4:	4b62      	ldr	r3, [pc, #392]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	4a61      	ldr	r2, [pc, #388]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002faa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fae:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002fb0:	e015      	b.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	3304      	adds	r3, #4
 8002fb6:	2100      	movs	r1, #0
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f000 fa73 	bl	80034a4 <RCCEx_PLLSAI1_Config>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002fc2:	e00c      	b.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	3320      	adds	r3, #32
 8002fc8:	2100      	movs	r1, #0
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f000 fb5e 	bl	800368c <RCCEx_PLLSAI2_Config>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002fd4:	e003      	b.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	74fb      	strb	r3, [r7, #19]
      break;
 8002fda:	e000      	b.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002fdc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fde:	7cfb      	ldrb	r3, [r7, #19]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d10b      	bne.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002fe4:	4b52      	ldr	r3, [pc, #328]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fea:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ff2:	494f      	ldr	r1, [pc, #316]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002ffa:	e001      	b.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ffc:	7cfb      	ldrb	r3, [r7, #19]
 8002ffe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003008:	2b00      	cmp	r3, #0
 800300a:	f000 80a0 	beq.w	800314e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800300e:	2300      	movs	r3, #0
 8003010:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003012:	4b47      	ldr	r3, [pc, #284]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d101      	bne.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800301e:	2301      	movs	r3, #1
 8003020:	e000      	b.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003022:	2300      	movs	r3, #0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d00d      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003028:	4b41      	ldr	r3, [pc, #260]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800302a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800302c:	4a40      	ldr	r2, [pc, #256]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800302e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003032:	6593      	str	r3, [r2, #88]	; 0x58
 8003034:	4b3e      	ldr	r3, [pc, #248]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003038:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800303c:	60bb      	str	r3, [r7, #8]
 800303e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003040:	2301      	movs	r3, #1
 8003042:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003044:	4b3b      	ldr	r3, [pc, #236]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a3a      	ldr	r2, [pc, #232]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800304a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800304e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003050:	f7fd fef4 	bl	8000e3c <HAL_GetTick>
 8003054:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003056:	e009      	b.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003058:	f7fd fef0 	bl	8000e3c <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b02      	cmp	r3, #2
 8003064:	d902      	bls.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	74fb      	strb	r3, [r7, #19]
        break;
 800306a:	e005      	b.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800306c:	4b31      	ldr	r3, [pc, #196]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003074:	2b00      	cmp	r3, #0
 8003076:	d0ef      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003078:	7cfb      	ldrb	r3, [r7, #19]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d15c      	bne.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800307e:	4b2c      	ldr	r3, [pc, #176]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003084:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003088:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d01f      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003096:	697a      	ldr	r2, [r7, #20]
 8003098:	429a      	cmp	r2, r3
 800309a:	d019      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800309c:	4b24      	ldr	r3, [pc, #144]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800309e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030a6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80030a8:	4b21      	ldr	r3, [pc, #132]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ae:	4a20      	ldr	r2, [pc, #128]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80030b8:	4b1d      	ldr	r3, [pc, #116]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030be:	4a1c      	ldr	r2, [pc, #112]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80030c8:	4a19      	ldr	r2, [pc, #100]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d016      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030da:	f7fd feaf 	bl	8000e3c <HAL_GetTick>
 80030de:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030e0:	e00b      	b.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030e2:	f7fd feab 	bl	8000e3c <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d902      	bls.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	74fb      	strb	r3, [r7, #19]
            break;
 80030f8:	e006      	b.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030fa:	4b0d      	ldr	r3, [pc, #52]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003100:	f003 0302 	and.w	r3, r3, #2
 8003104:	2b00      	cmp	r3, #0
 8003106:	d0ec      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003108:	7cfb      	ldrb	r3, [r7, #19]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d10c      	bne.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800310e:	4b08      	ldr	r3, [pc, #32]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003110:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003114:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800311e:	4904      	ldr	r1, [pc, #16]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003120:	4313      	orrs	r3, r2
 8003122:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003126:	e009      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003128:	7cfb      	ldrb	r3, [r7, #19]
 800312a:	74bb      	strb	r3, [r7, #18]
 800312c:	e006      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800312e:	bf00      	nop
 8003130:	40021000 	.word	0x40021000
 8003134:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003138:	7cfb      	ldrb	r3, [r7, #19]
 800313a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800313c:	7c7b      	ldrb	r3, [r7, #17]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d105      	bne.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003142:	4b9e      	ldr	r3, [pc, #632]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003146:	4a9d      	ldr	r2, [pc, #628]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003148:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800314c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00a      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800315a:	4b98      	ldr	r3, [pc, #608]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800315c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003160:	f023 0203 	bic.w	r2, r3, #3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003168:	4994      	ldr	r1, [pc, #592]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800316a:	4313      	orrs	r3, r2
 800316c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0302 	and.w	r3, r3, #2
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00a      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800317c:	4b8f      	ldr	r3, [pc, #572]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800317e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003182:	f023 020c 	bic.w	r2, r3, #12
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800318a:	498c      	ldr	r1, [pc, #560]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800318c:	4313      	orrs	r3, r2
 800318e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0304 	and.w	r3, r3, #4
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00a      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800319e:	4b87      	ldr	r3, [pc, #540]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ac:	4983      	ldr	r1, [pc, #524]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0308 	and.w	r3, r3, #8
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d00a      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80031c0:	4b7e      	ldr	r3, [pc, #504]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ce:	497b      	ldr	r1, [pc, #492]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031d0:	4313      	orrs	r3, r2
 80031d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0310 	and.w	r3, r3, #16
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00a      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80031e2:	4b76      	ldr	r3, [pc, #472]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031f0:	4972      	ldr	r1, [pc, #456]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0320 	and.w	r3, r3, #32
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00a      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003204:	4b6d      	ldr	r3, [pc, #436]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800320a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003212:	496a      	ldr	r1, [pc, #424]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003214:	4313      	orrs	r3, r2
 8003216:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00a      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003226:	4b65      	ldr	r3, [pc, #404]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800322c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003234:	4961      	ldr	r1, [pc, #388]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003236:	4313      	orrs	r3, r2
 8003238:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003244:	2b00      	cmp	r3, #0
 8003246:	d00a      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003248:	4b5c      	ldr	r3, [pc, #368]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800324a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800324e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003256:	4959      	ldr	r1, [pc, #356]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003258:	4313      	orrs	r3, r2
 800325a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00a      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800326a:	4b54      	ldr	r3, [pc, #336]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800326c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003270:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003278:	4950      	ldr	r1, [pc, #320]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800327a:	4313      	orrs	r3, r2
 800327c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003288:	2b00      	cmp	r3, #0
 800328a:	d00a      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800328c:	4b4b      	ldr	r3, [pc, #300]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800328e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003292:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800329a:	4948      	ldr	r1, [pc, #288]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800329c:	4313      	orrs	r3, r2
 800329e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00a      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80032ae:	4b43      	ldr	r3, [pc, #268]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032bc:	493f      	ldr	r1, [pc, #252]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d028      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032d0:	4b3a      	ldr	r3, [pc, #232]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032de:	4937      	ldr	r1, [pc, #220]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032ee:	d106      	bne.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032f0:	4b32      	ldr	r3, [pc, #200]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	4a31      	ldr	r2, [pc, #196]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032fa:	60d3      	str	r3, [r2, #12]
 80032fc:	e011      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003302:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003306:	d10c      	bne.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	3304      	adds	r3, #4
 800330c:	2101      	movs	r1, #1
 800330e:	4618      	mov	r0, r3
 8003310:	f000 f8c8 	bl	80034a4 <RCCEx_PLLSAI1_Config>
 8003314:	4603      	mov	r3, r0
 8003316:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003318:	7cfb      	ldrb	r3, [r7, #19]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d001      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800331e:	7cfb      	ldrb	r3, [r7, #19]
 8003320:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d028      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800332e:	4b23      	ldr	r3, [pc, #140]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003334:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800333c:	491f      	ldr	r1, [pc, #124]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800333e:	4313      	orrs	r3, r2
 8003340:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003348:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800334c:	d106      	bne.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800334e:	4b1b      	ldr	r3, [pc, #108]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	4a1a      	ldr	r2, [pc, #104]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003354:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003358:	60d3      	str	r3, [r2, #12]
 800335a:	e011      	b.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003360:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003364:	d10c      	bne.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	3304      	adds	r3, #4
 800336a:	2101      	movs	r1, #1
 800336c:	4618      	mov	r0, r3
 800336e:	f000 f899 	bl	80034a4 <RCCEx_PLLSAI1_Config>
 8003372:	4603      	mov	r3, r0
 8003374:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003376:	7cfb      	ldrb	r3, [r7, #19]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d001      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800337c:	7cfb      	ldrb	r3, [r7, #19]
 800337e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d02b      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800338c:	4b0b      	ldr	r3, [pc, #44]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800338e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003392:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800339a:	4908      	ldr	r1, [pc, #32]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800339c:	4313      	orrs	r3, r2
 800339e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033aa:	d109      	bne.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033ac:	4b03      	ldr	r3, [pc, #12]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	4a02      	ldr	r2, [pc, #8]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033b6:	60d3      	str	r3, [r2, #12]
 80033b8:	e014      	b.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80033ba:	bf00      	nop
 80033bc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033c8:	d10c      	bne.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	3304      	adds	r3, #4
 80033ce:	2101      	movs	r1, #1
 80033d0:	4618      	mov	r0, r3
 80033d2:	f000 f867 	bl	80034a4 <RCCEx_PLLSAI1_Config>
 80033d6:	4603      	mov	r3, r0
 80033d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033da:	7cfb      	ldrb	r3, [r7, #19]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d001      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80033e0:	7cfb      	ldrb	r3, [r7, #19]
 80033e2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d02f      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033f0:	4b2b      	ldr	r3, [pc, #172]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033fe:	4928      	ldr	r1, [pc, #160]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003400:	4313      	orrs	r3, r2
 8003402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800340a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800340e:	d10d      	bne.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	3304      	adds	r3, #4
 8003414:	2102      	movs	r1, #2
 8003416:	4618      	mov	r0, r3
 8003418:	f000 f844 	bl	80034a4 <RCCEx_PLLSAI1_Config>
 800341c:	4603      	mov	r3, r0
 800341e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003420:	7cfb      	ldrb	r3, [r7, #19]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d014      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003426:	7cfb      	ldrb	r3, [r7, #19]
 8003428:	74bb      	strb	r3, [r7, #18]
 800342a:	e011      	b.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003430:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003434:	d10c      	bne.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	3320      	adds	r3, #32
 800343a:	2102      	movs	r1, #2
 800343c:	4618      	mov	r0, r3
 800343e:	f000 f925 	bl	800368c <RCCEx_PLLSAI2_Config>
 8003442:	4603      	mov	r3, r0
 8003444:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003446:	7cfb      	ldrb	r3, [r7, #19]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d001      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800344c:	7cfb      	ldrb	r3, [r7, #19]
 800344e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d00a      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800345c:	4b10      	ldr	r3, [pc, #64]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800345e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003462:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800346a:	490d      	ldr	r1, [pc, #52]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800346c:	4313      	orrs	r3, r2
 800346e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00b      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800347e:	4b08      	ldr	r3, [pc, #32]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003484:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800348e:	4904      	ldr	r1, [pc, #16]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003490:	4313      	orrs	r3, r2
 8003492:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003496:	7cbb      	ldrb	r3, [r7, #18]
}
 8003498:	4618      	mov	r0, r3
 800349a:	3718      	adds	r7, #24
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	40021000 	.word	0x40021000

080034a4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80034ae:	2300      	movs	r3, #0
 80034b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80034b2:	4b75      	ldr	r3, [pc, #468]	; (8003688 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	f003 0303 	and.w	r3, r3, #3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d018      	beq.n	80034f0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80034be:	4b72      	ldr	r3, [pc, #456]	; (8003688 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	f003 0203 	and.w	r2, r3, #3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d10d      	bne.n	80034ea <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
       ||
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d009      	beq.n	80034ea <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80034d6:	4b6c      	ldr	r3, [pc, #432]	; (8003688 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	091b      	lsrs	r3, r3, #4
 80034dc:	f003 0307 	and.w	r3, r3, #7
 80034e0:	1c5a      	adds	r2, r3, #1
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
       ||
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d047      	beq.n	800357a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	73fb      	strb	r3, [r7, #15]
 80034ee:	e044      	b.n	800357a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2b03      	cmp	r3, #3
 80034f6:	d018      	beq.n	800352a <RCCEx_PLLSAI1_Config+0x86>
 80034f8:	2b03      	cmp	r3, #3
 80034fa:	d825      	bhi.n	8003548 <RCCEx_PLLSAI1_Config+0xa4>
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d002      	beq.n	8003506 <RCCEx_PLLSAI1_Config+0x62>
 8003500:	2b02      	cmp	r3, #2
 8003502:	d009      	beq.n	8003518 <RCCEx_PLLSAI1_Config+0x74>
 8003504:	e020      	b.n	8003548 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003506:	4b60      	ldr	r3, [pc, #384]	; (8003688 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	2b00      	cmp	r3, #0
 8003510:	d11d      	bne.n	800354e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003516:	e01a      	b.n	800354e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003518:	4b5b      	ldr	r3, [pc, #364]	; (8003688 <RCCEx_PLLSAI1_Config+0x1e4>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003520:	2b00      	cmp	r3, #0
 8003522:	d116      	bne.n	8003552 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003528:	e013      	b.n	8003552 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800352a:	4b57      	ldr	r3, [pc, #348]	; (8003688 <RCCEx_PLLSAI1_Config+0x1e4>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d10f      	bne.n	8003556 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003536:	4b54      	ldr	r3, [pc, #336]	; (8003688 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d109      	bne.n	8003556 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003546:	e006      	b.n	8003556 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	73fb      	strb	r3, [r7, #15]
      break;
 800354c:	e004      	b.n	8003558 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800354e:	bf00      	nop
 8003550:	e002      	b.n	8003558 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003552:	bf00      	nop
 8003554:	e000      	b.n	8003558 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003556:	bf00      	nop
    }

    if(status == HAL_OK)
 8003558:	7bfb      	ldrb	r3, [r7, #15]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d10d      	bne.n	800357a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800355e:	4b4a      	ldr	r3, [pc, #296]	; (8003688 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6819      	ldr	r1, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	3b01      	subs	r3, #1
 8003570:	011b      	lsls	r3, r3, #4
 8003572:	430b      	orrs	r3, r1
 8003574:	4944      	ldr	r1, [pc, #272]	; (8003688 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003576:	4313      	orrs	r3, r2
 8003578:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800357a:	7bfb      	ldrb	r3, [r7, #15]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d17d      	bne.n	800367c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003580:	4b41      	ldr	r3, [pc, #260]	; (8003688 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a40      	ldr	r2, [pc, #256]	; (8003688 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003586:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800358a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800358c:	f7fd fc56 	bl	8000e3c <HAL_GetTick>
 8003590:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003592:	e009      	b.n	80035a8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003594:	f7fd fc52 	bl	8000e3c <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d902      	bls.n	80035a8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	73fb      	strb	r3, [r7, #15]
        break;
 80035a6:	e005      	b.n	80035b4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80035a8:	4b37      	ldr	r3, [pc, #220]	; (8003688 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1ef      	bne.n	8003594 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80035b4:	7bfb      	ldrb	r3, [r7, #15]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d160      	bne.n	800367c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d111      	bne.n	80035e4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035c0:	4b31      	ldr	r3, [pc, #196]	; (8003688 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80035c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	6892      	ldr	r2, [r2, #8]
 80035d0:	0211      	lsls	r1, r2, #8
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	68d2      	ldr	r2, [r2, #12]
 80035d6:	0912      	lsrs	r2, r2, #4
 80035d8:	0452      	lsls	r2, r2, #17
 80035da:	430a      	orrs	r2, r1
 80035dc:	492a      	ldr	r1, [pc, #168]	; (8003688 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	610b      	str	r3, [r1, #16]
 80035e2:	e027      	b.n	8003634 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d112      	bne.n	8003610 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035ea:	4b27      	ldr	r3, [pc, #156]	; (8003688 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80035f2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	6892      	ldr	r2, [r2, #8]
 80035fa:	0211      	lsls	r1, r2, #8
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	6912      	ldr	r2, [r2, #16]
 8003600:	0852      	lsrs	r2, r2, #1
 8003602:	3a01      	subs	r2, #1
 8003604:	0552      	lsls	r2, r2, #21
 8003606:	430a      	orrs	r2, r1
 8003608:	491f      	ldr	r1, [pc, #124]	; (8003688 <RCCEx_PLLSAI1_Config+0x1e4>)
 800360a:	4313      	orrs	r3, r2
 800360c:	610b      	str	r3, [r1, #16]
 800360e:	e011      	b.n	8003634 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003610:	4b1d      	ldr	r3, [pc, #116]	; (8003688 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003618:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	6892      	ldr	r2, [r2, #8]
 8003620:	0211      	lsls	r1, r2, #8
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	6952      	ldr	r2, [r2, #20]
 8003626:	0852      	lsrs	r2, r2, #1
 8003628:	3a01      	subs	r2, #1
 800362a:	0652      	lsls	r2, r2, #25
 800362c:	430a      	orrs	r2, r1
 800362e:	4916      	ldr	r1, [pc, #88]	; (8003688 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003630:	4313      	orrs	r3, r2
 8003632:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003634:	4b14      	ldr	r3, [pc, #80]	; (8003688 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a13      	ldr	r2, [pc, #76]	; (8003688 <RCCEx_PLLSAI1_Config+0x1e4>)
 800363a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800363e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003640:	f7fd fbfc 	bl	8000e3c <HAL_GetTick>
 8003644:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003646:	e009      	b.n	800365c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003648:	f7fd fbf8 	bl	8000e3c <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b02      	cmp	r3, #2
 8003654:	d902      	bls.n	800365c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	73fb      	strb	r3, [r7, #15]
          break;
 800365a:	e005      	b.n	8003668 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800365c:	4b0a      	ldr	r3, [pc, #40]	; (8003688 <RCCEx_PLLSAI1_Config+0x1e4>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d0ef      	beq.n	8003648 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003668:	7bfb      	ldrb	r3, [r7, #15]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d106      	bne.n	800367c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800366e:	4b06      	ldr	r3, [pc, #24]	; (8003688 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003670:	691a      	ldr	r2, [r3, #16]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	4904      	ldr	r1, [pc, #16]	; (8003688 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003678:	4313      	orrs	r3, r2
 800367a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800367c:	7bfb      	ldrb	r3, [r7, #15]
}
 800367e:	4618      	mov	r0, r3
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	40021000 	.word	0x40021000

0800368c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003696:	2300      	movs	r3, #0
 8003698:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800369a:	4b6a      	ldr	r3, [pc, #424]	; (8003844 <RCCEx_PLLSAI2_Config+0x1b8>)
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	f003 0303 	and.w	r3, r3, #3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d018      	beq.n	80036d8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80036a6:	4b67      	ldr	r3, [pc, #412]	; (8003844 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	f003 0203 	and.w	r2, r3, #3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d10d      	bne.n	80036d2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
       ||
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d009      	beq.n	80036d2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80036be:	4b61      	ldr	r3, [pc, #388]	; (8003844 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	091b      	lsrs	r3, r3, #4
 80036c4:	f003 0307 	and.w	r3, r3, #7
 80036c8:	1c5a      	adds	r2, r3, #1
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
       ||
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d047      	beq.n	8003762 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	73fb      	strb	r3, [r7, #15]
 80036d6:	e044      	b.n	8003762 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2b03      	cmp	r3, #3
 80036de:	d018      	beq.n	8003712 <RCCEx_PLLSAI2_Config+0x86>
 80036e0:	2b03      	cmp	r3, #3
 80036e2:	d825      	bhi.n	8003730 <RCCEx_PLLSAI2_Config+0xa4>
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d002      	beq.n	80036ee <RCCEx_PLLSAI2_Config+0x62>
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d009      	beq.n	8003700 <RCCEx_PLLSAI2_Config+0x74>
 80036ec:	e020      	b.n	8003730 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80036ee:	4b55      	ldr	r3, [pc, #340]	; (8003844 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d11d      	bne.n	8003736 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036fe:	e01a      	b.n	8003736 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003700:	4b50      	ldr	r3, [pc, #320]	; (8003844 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003708:	2b00      	cmp	r3, #0
 800370a:	d116      	bne.n	800373a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003710:	e013      	b.n	800373a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003712:	4b4c      	ldr	r3, [pc, #304]	; (8003844 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d10f      	bne.n	800373e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800371e:	4b49      	ldr	r3, [pc, #292]	; (8003844 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d109      	bne.n	800373e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800372e:	e006      	b.n	800373e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	73fb      	strb	r3, [r7, #15]
      break;
 8003734:	e004      	b.n	8003740 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003736:	bf00      	nop
 8003738:	e002      	b.n	8003740 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800373a:	bf00      	nop
 800373c:	e000      	b.n	8003740 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800373e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003740:	7bfb      	ldrb	r3, [r7, #15]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d10d      	bne.n	8003762 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003746:	4b3f      	ldr	r3, [pc, #252]	; (8003844 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6819      	ldr	r1, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	3b01      	subs	r3, #1
 8003758:	011b      	lsls	r3, r3, #4
 800375a:	430b      	orrs	r3, r1
 800375c:	4939      	ldr	r1, [pc, #228]	; (8003844 <RCCEx_PLLSAI2_Config+0x1b8>)
 800375e:	4313      	orrs	r3, r2
 8003760:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003762:	7bfb      	ldrb	r3, [r7, #15]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d167      	bne.n	8003838 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003768:	4b36      	ldr	r3, [pc, #216]	; (8003844 <RCCEx_PLLSAI2_Config+0x1b8>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a35      	ldr	r2, [pc, #212]	; (8003844 <RCCEx_PLLSAI2_Config+0x1b8>)
 800376e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003772:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003774:	f7fd fb62 	bl	8000e3c <HAL_GetTick>
 8003778:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800377a:	e009      	b.n	8003790 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800377c:	f7fd fb5e 	bl	8000e3c <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d902      	bls.n	8003790 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	73fb      	strb	r3, [r7, #15]
        break;
 800378e:	e005      	b.n	800379c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003790:	4b2c      	ldr	r3, [pc, #176]	; (8003844 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d1ef      	bne.n	800377c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800379c:	7bfb      	ldrb	r3, [r7, #15]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d14a      	bne.n	8003838 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d111      	bne.n	80037cc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80037a8:	4b26      	ldr	r3, [pc, #152]	; (8003844 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037aa:	695b      	ldr	r3, [r3, #20]
 80037ac:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80037b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	6892      	ldr	r2, [r2, #8]
 80037b8:	0211      	lsls	r1, r2, #8
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	68d2      	ldr	r2, [r2, #12]
 80037be:	0912      	lsrs	r2, r2, #4
 80037c0:	0452      	lsls	r2, r2, #17
 80037c2:	430a      	orrs	r2, r1
 80037c4:	491f      	ldr	r1, [pc, #124]	; (8003844 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	614b      	str	r3, [r1, #20]
 80037ca:	e011      	b.n	80037f0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80037cc:	4b1d      	ldr	r3, [pc, #116]	; (8003844 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037ce:	695b      	ldr	r3, [r3, #20]
 80037d0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80037d4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	6892      	ldr	r2, [r2, #8]
 80037dc:	0211      	lsls	r1, r2, #8
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	6912      	ldr	r2, [r2, #16]
 80037e2:	0852      	lsrs	r2, r2, #1
 80037e4:	3a01      	subs	r2, #1
 80037e6:	0652      	lsls	r2, r2, #25
 80037e8:	430a      	orrs	r2, r1
 80037ea:	4916      	ldr	r1, [pc, #88]	; (8003844 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80037f0:	4b14      	ldr	r3, [pc, #80]	; (8003844 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a13      	ldr	r2, [pc, #76]	; (8003844 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037fa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037fc:	f7fd fb1e 	bl	8000e3c <HAL_GetTick>
 8003800:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003802:	e009      	b.n	8003818 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003804:	f7fd fb1a 	bl	8000e3c <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	2b02      	cmp	r3, #2
 8003810:	d902      	bls.n	8003818 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	73fb      	strb	r3, [r7, #15]
          break;
 8003816:	e005      	b.n	8003824 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003818:	4b0a      	ldr	r3, [pc, #40]	; (8003844 <RCCEx_PLLSAI2_Config+0x1b8>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d0ef      	beq.n	8003804 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003824:	7bfb      	ldrb	r3, [r7, #15]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d106      	bne.n	8003838 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800382a:	4b06      	ldr	r3, [pc, #24]	; (8003844 <RCCEx_PLLSAI2_Config+0x1b8>)
 800382c:	695a      	ldr	r2, [r3, #20]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	695b      	ldr	r3, [r3, #20]
 8003832:	4904      	ldr	r1, [pc, #16]	; (8003844 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003834:	4313      	orrs	r3, r2
 8003836:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003838:	7bfb      	ldrb	r3, [r7, #15]
}
 800383a:	4618      	mov	r0, r3
 800383c:	3710      	adds	r7, #16
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	40021000 	.word	0x40021000

08003848 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d101      	bne.n	800385a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e049      	b.n	80038ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003860:	b2db      	uxtb	r3, r3
 8003862:	2b00      	cmp	r3, #0
 8003864:	d106      	bne.n	8003874 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f7fd f954 	bl	8000b1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2202      	movs	r2, #2
 8003878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	3304      	adds	r3, #4
 8003884:	4619      	mov	r1, r3
 8003886:	4610      	mov	r0, r2
 8003888:	f000 fb7a 	bl	8003f80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3708      	adds	r7, #8
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b082      	sub	sp, #8
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d101      	bne.n	8003908 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e049      	b.n	800399c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800390e:	b2db      	uxtb	r3, r3
 8003910:	2b00      	cmp	r3, #0
 8003912:	d106      	bne.n	8003922 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 f841 	bl	80039a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2202      	movs	r2, #2
 8003926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	3304      	adds	r3, #4
 8003932:	4619      	mov	r1, r3
 8003934:	4610      	mov	r0, r2
 8003936:	f000 fb23 	bl	8003f80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2201      	movs	r2, #1
 800393e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2201      	movs	r2, #1
 8003946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2201      	movs	r2, #1
 800394e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2201      	movs	r2, #1
 8003956:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2201      	movs	r2, #1
 800395e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2201      	movs	r2, #1
 8003966:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2201      	movs	r2, #1
 800396e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2201      	movs	r2, #1
 8003976:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2201      	movs	r2, #1
 8003986:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2201      	movs	r2, #1
 800398e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2201      	movs	r2, #1
 8003996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800399a:	2300      	movs	r3, #0
}
 800399c:	4618      	mov	r0, r3
 800399e:	3708      	adds	r7, #8
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d109      	bne.n	80039dc <HAL_TIM_PWM_Start+0x24>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	bf14      	ite	ne
 80039d4:	2301      	movne	r3, #1
 80039d6:	2300      	moveq	r3, #0
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	e03c      	b.n	8003a56 <HAL_TIM_PWM_Start+0x9e>
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	2b04      	cmp	r3, #4
 80039e0:	d109      	bne.n	80039f6 <HAL_TIM_PWM_Start+0x3e>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	bf14      	ite	ne
 80039ee:	2301      	movne	r3, #1
 80039f0:	2300      	moveq	r3, #0
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	e02f      	b.n	8003a56 <HAL_TIM_PWM_Start+0x9e>
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	2b08      	cmp	r3, #8
 80039fa:	d109      	bne.n	8003a10 <HAL_TIM_PWM_Start+0x58>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	bf14      	ite	ne
 8003a08:	2301      	movne	r3, #1
 8003a0a:	2300      	moveq	r3, #0
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	e022      	b.n	8003a56 <HAL_TIM_PWM_Start+0x9e>
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	2b0c      	cmp	r3, #12
 8003a14:	d109      	bne.n	8003a2a <HAL_TIM_PWM_Start+0x72>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	bf14      	ite	ne
 8003a22:	2301      	movne	r3, #1
 8003a24:	2300      	moveq	r3, #0
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	e015      	b.n	8003a56 <HAL_TIM_PWM_Start+0x9e>
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	2b10      	cmp	r3, #16
 8003a2e:	d109      	bne.n	8003a44 <HAL_TIM_PWM_Start+0x8c>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	bf14      	ite	ne
 8003a3c:	2301      	movne	r3, #1
 8003a3e:	2300      	moveq	r3, #0
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	e008      	b.n	8003a56 <HAL_TIM_PWM_Start+0x9e>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	bf14      	ite	ne
 8003a50:	2301      	movne	r3, #1
 8003a52:	2300      	moveq	r3, #0
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e09c      	b.n	8003b98 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d104      	bne.n	8003a6e <HAL_TIM_PWM_Start+0xb6>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2202      	movs	r2, #2
 8003a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a6c:	e023      	b.n	8003ab6 <HAL_TIM_PWM_Start+0xfe>
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	2b04      	cmp	r3, #4
 8003a72:	d104      	bne.n	8003a7e <HAL_TIM_PWM_Start+0xc6>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2202      	movs	r2, #2
 8003a78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a7c:	e01b      	b.n	8003ab6 <HAL_TIM_PWM_Start+0xfe>
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	2b08      	cmp	r3, #8
 8003a82:	d104      	bne.n	8003a8e <HAL_TIM_PWM_Start+0xd6>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2202      	movs	r2, #2
 8003a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a8c:	e013      	b.n	8003ab6 <HAL_TIM_PWM_Start+0xfe>
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	2b0c      	cmp	r3, #12
 8003a92:	d104      	bne.n	8003a9e <HAL_TIM_PWM_Start+0xe6>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2202      	movs	r2, #2
 8003a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a9c:	e00b      	b.n	8003ab6 <HAL_TIM_PWM_Start+0xfe>
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	2b10      	cmp	r3, #16
 8003aa2:	d104      	bne.n	8003aae <HAL_TIM_PWM_Start+0xf6>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003aac:	e003      	b.n	8003ab6 <HAL_TIM_PWM_Start+0xfe>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2202      	movs	r2, #2
 8003ab2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2201      	movs	r2, #1
 8003abc:	6839      	ldr	r1, [r7, #0]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f000 fe68 	bl	8004794 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a35      	ldr	r2, [pc, #212]	; (8003ba0 <HAL_TIM_PWM_Start+0x1e8>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d013      	beq.n	8003af6 <HAL_TIM_PWM_Start+0x13e>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a34      	ldr	r2, [pc, #208]	; (8003ba4 <HAL_TIM_PWM_Start+0x1ec>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d00e      	beq.n	8003af6 <HAL_TIM_PWM_Start+0x13e>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a32      	ldr	r2, [pc, #200]	; (8003ba8 <HAL_TIM_PWM_Start+0x1f0>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d009      	beq.n	8003af6 <HAL_TIM_PWM_Start+0x13e>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a31      	ldr	r2, [pc, #196]	; (8003bac <HAL_TIM_PWM_Start+0x1f4>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d004      	beq.n	8003af6 <HAL_TIM_PWM_Start+0x13e>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a2f      	ldr	r2, [pc, #188]	; (8003bb0 <HAL_TIM_PWM_Start+0x1f8>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d101      	bne.n	8003afa <HAL_TIM_PWM_Start+0x142>
 8003af6:	2301      	movs	r3, #1
 8003af8:	e000      	b.n	8003afc <HAL_TIM_PWM_Start+0x144>
 8003afa:	2300      	movs	r3, #0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d007      	beq.n	8003b10 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b0e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a22      	ldr	r2, [pc, #136]	; (8003ba0 <HAL_TIM_PWM_Start+0x1e8>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d01d      	beq.n	8003b56 <HAL_TIM_PWM_Start+0x19e>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b22:	d018      	beq.n	8003b56 <HAL_TIM_PWM_Start+0x19e>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a22      	ldr	r2, [pc, #136]	; (8003bb4 <HAL_TIM_PWM_Start+0x1fc>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d013      	beq.n	8003b56 <HAL_TIM_PWM_Start+0x19e>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a21      	ldr	r2, [pc, #132]	; (8003bb8 <HAL_TIM_PWM_Start+0x200>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d00e      	beq.n	8003b56 <HAL_TIM_PWM_Start+0x19e>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a1f      	ldr	r2, [pc, #124]	; (8003bbc <HAL_TIM_PWM_Start+0x204>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d009      	beq.n	8003b56 <HAL_TIM_PWM_Start+0x19e>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a17      	ldr	r2, [pc, #92]	; (8003ba4 <HAL_TIM_PWM_Start+0x1ec>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d004      	beq.n	8003b56 <HAL_TIM_PWM_Start+0x19e>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a15      	ldr	r2, [pc, #84]	; (8003ba8 <HAL_TIM_PWM_Start+0x1f0>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d115      	bne.n	8003b82 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	689a      	ldr	r2, [r3, #8]
 8003b5c:	4b18      	ldr	r3, [pc, #96]	; (8003bc0 <HAL_TIM_PWM_Start+0x208>)
 8003b5e:	4013      	ands	r3, r2
 8003b60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2b06      	cmp	r3, #6
 8003b66:	d015      	beq.n	8003b94 <HAL_TIM_PWM_Start+0x1dc>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b6e:	d011      	beq.n	8003b94 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f042 0201 	orr.w	r2, r2, #1
 8003b7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b80:	e008      	b.n	8003b94 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f042 0201 	orr.w	r2, r2, #1
 8003b90:	601a      	str	r2, [r3, #0]
 8003b92:	e000      	b.n	8003b96 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b94:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003b96:	2300      	movs	r3, #0
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3710      	adds	r7, #16
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	40012c00 	.word	0x40012c00
 8003ba4:	40013400 	.word	0x40013400
 8003ba8:	40014000 	.word	0x40014000
 8003bac:	40014400 	.word	0x40014400
 8003bb0:	40014800 	.word	0x40014800
 8003bb4:	40000400 	.word	0x40000400
 8003bb8:	40000800 	.word	0x40000800
 8003bbc:	40000c00 	.word	0x40000c00
 8003bc0:	00010007 	.word	0x00010007

08003bc4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b086      	sub	sp, #24
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d101      	bne.n	8003be2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003bde:	2302      	movs	r3, #2
 8003be0:	e0ff      	b.n	8003de2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2201      	movs	r2, #1
 8003be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2b14      	cmp	r3, #20
 8003bee:	f200 80f0 	bhi.w	8003dd2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003bf2:	a201      	add	r2, pc, #4	; (adr r2, 8003bf8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf8:	08003c4d 	.word	0x08003c4d
 8003bfc:	08003dd3 	.word	0x08003dd3
 8003c00:	08003dd3 	.word	0x08003dd3
 8003c04:	08003dd3 	.word	0x08003dd3
 8003c08:	08003c8d 	.word	0x08003c8d
 8003c0c:	08003dd3 	.word	0x08003dd3
 8003c10:	08003dd3 	.word	0x08003dd3
 8003c14:	08003dd3 	.word	0x08003dd3
 8003c18:	08003ccf 	.word	0x08003ccf
 8003c1c:	08003dd3 	.word	0x08003dd3
 8003c20:	08003dd3 	.word	0x08003dd3
 8003c24:	08003dd3 	.word	0x08003dd3
 8003c28:	08003d0f 	.word	0x08003d0f
 8003c2c:	08003dd3 	.word	0x08003dd3
 8003c30:	08003dd3 	.word	0x08003dd3
 8003c34:	08003dd3 	.word	0x08003dd3
 8003c38:	08003d51 	.word	0x08003d51
 8003c3c:	08003dd3 	.word	0x08003dd3
 8003c40:	08003dd3 	.word	0x08003dd3
 8003c44:	08003dd3 	.word	0x08003dd3
 8003c48:	08003d91 	.word	0x08003d91
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68b9      	ldr	r1, [r7, #8]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f000 fa2e 	bl	80040b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	699a      	ldr	r2, [r3, #24]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f042 0208 	orr.w	r2, r2, #8
 8003c66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	699a      	ldr	r2, [r3, #24]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f022 0204 	bic.w	r2, r2, #4
 8003c76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	6999      	ldr	r1, [r3, #24]
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	691a      	ldr	r2, [r3, #16]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	430a      	orrs	r2, r1
 8003c88:	619a      	str	r2, [r3, #24]
      break;
 8003c8a:	e0a5      	b.n	8003dd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	68b9      	ldr	r1, [r7, #8]
 8003c92:	4618      	mov	r0, r3
 8003c94:	f000 fa9e 	bl	80041d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	699a      	ldr	r2, [r3, #24]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ca6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	699a      	ldr	r2, [r3, #24]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	6999      	ldr	r1, [r3, #24]
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	021a      	lsls	r2, r3, #8
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	619a      	str	r2, [r3, #24]
      break;
 8003ccc:	e084      	b.n	8003dd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68b9      	ldr	r1, [r7, #8]
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f000 fb07 	bl	80042e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	69da      	ldr	r2, [r3, #28]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f042 0208 	orr.w	r2, r2, #8
 8003ce8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	69da      	ldr	r2, [r3, #28]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f022 0204 	bic.w	r2, r2, #4
 8003cf8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	69d9      	ldr	r1, [r3, #28]
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	691a      	ldr	r2, [r3, #16]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	61da      	str	r2, [r3, #28]
      break;
 8003d0c:	e064      	b.n	8003dd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68b9      	ldr	r1, [r7, #8]
 8003d14:	4618      	mov	r0, r3
 8003d16:	f000 fb6f 	bl	80043f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	69da      	ldr	r2, [r3, #28]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	69da      	ldr	r2, [r3, #28]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	69d9      	ldr	r1, [r3, #28]
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	021a      	lsls	r2, r3, #8
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	61da      	str	r2, [r3, #28]
      break;
 8003d4e:	e043      	b.n	8003dd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68b9      	ldr	r1, [r7, #8]
 8003d56:	4618      	mov	r0, r3
 8003d58:	f000 fbb8 	bl	80044cc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f042 0208 	orr.w	r2, r2, #8
 8003d6a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f022 0204 	bic.w	r2, r2, #4
 8003d7a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	691a      	ldr	r2, [r3, #16]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	430a      	orrs	r2, r1
 8003d8c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003d8e:	e023      	b.n	8003dd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68b9      	ldr	r1, [r7, #8]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f000 fbfc 	bl	8004594 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003daa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	021a      	lsls	r2, r3, #8
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003dd0:	e002      	b.n	8003dd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	75fb      	strb	r3, [r7, #23]
      break;
 8003dd6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003de0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3718      	adds	r7, #24
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop

08003dec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003df6:	2300      	movs	r3, #0
 8003df8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d101      	bne.n	8003e08 <HAL_TIM_ConfigClockSource+0x1c>
 8003e04:	2302      	movs	r3, #2
 8003e06:	e0b6      	b.n	8003f76 <HAL_TIM_ConfigClockSource+0x18a>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2202      	movs	r2, #2
 8003e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e26:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e32:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68ba      	ldr	r2, [r7, #8]
 8003e3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e44:	d03e      	beq.n	8003ec4 <HAL_TIM_ConfigClockSource+0xd8>
 8003e46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e4a:	f200 8087 	bhi.w	8003f5c <HAL_TIM_ConfigClockSource+0x170>
 8003e4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e52:	f000 8086 	beq.w	8003f62 <HAL_TIM_ConfigClockSource+0x176>
 8003e56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e5a:	d87f      	bhi.n	8003f5c <HAL_TIM_ConfigClockSource+0x170>
 8003e5c:	2b70      	cmp	r3, #112	; 0x70
 8003e5e:	d01a      	beq.n	8003e96 <HAL_TIM_ConfigClockSource+0xaa>
 8003e60:	2b70      	cmp	r3, #112	; 0x70
 8003e62:	d87b      	bhi.n	8003f5c <HAL_TIM_ConfigClockSource+0x170>
 8003e64:	2b60      	cmp	r3, #96	; 0x60
 8003e66:	d050      	beq.n	8003f0a <HAL_TIM_ConfigClockSource+0x11e>
 8003e68:	2b60      	cmp	r3, #96	; 0x60
 8003e6a:	d877      	bhi.n	8003f5c <HAL_TIM_ConfigClockSource+0x170>
 8003e6c:	2b50      	cmp	r3, #80	; 0x50
 8003e6e:	d03c      	beq.n	8003eea <HAL_TIM_ConfigClockSource+0xfe>
 8003e70:	2b50      	cmp	r3, #80	; 0x50
 8003e72:	d873      	bhi.n	8003f5c <HAL_TIM_ConfigClockSource+0x170>
 8003e74:	2b40      	cmp	r3, #64	; 0x40
 8003e76:	d058      	beq.n	8003f2a <HAL_TIM_ConfigClockSource+0x13e>
 8003e78:	2b40      	cmp	r3, #64	; 0x40
 8003e7a:	d86f      	bhi.n	8003f5c <HAL_TIM_ConfigClockSource+0x170>
 8003e7c:	2b30      	cmp	r3, #48	; 0x30
 8003e7e:	d064      	beq.n	8003f4a <HAL_TIM_ConfigClockSource+0x15e>
 8003e80:	2b30      	cmp	r3, #48	; 0x30
 8003e82:	d86b      	bhi.n	8003f5c <HAL_TIM_ConfigClockSource+0x170>
 8003e84:	2b20      	cmp	r3, #32
 8003e86:	d060      	beq.n	8003f4a <HAL_TIM_ConfigClockSource+0x15e>
 8003e88:	2b20      	cmp	r3, #32
 8003e8a:	d867      	bhi.n	8003f5c <HAL_TIM_ConfigClockSource+0x170>
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d05c      	beq.n	8003f4a <HAL_TIM_ConfigClockSource+0x15e>
 8003e90:	2b10      	cmp	r3, #16
 8003e92:	d05a      	beq.n	8003f4a <HAL_TIM_ConfigClockSource+0x15e>
 8003e94:	e062      	b.n	8003f5c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ea6:	f000 fc55 	bl	8004754 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003eb8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68ba      	ldr	r2, [r7, #8]
 8003ec0:	609a      	str	r2, [r3, #8]
      break;
 8003ec2:	e04f      	b.n	8003f64 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ed4:	f000 fc3e 	bl	8004754 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	689a      	ldr	r2, [r3, #8]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ee6:	609a      	str	r2, [r3, #8]
      break;
 8003ee8:	e03c      	b.n	8003f64 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	f000 fbb2 	bl	8004660 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2150      	movs	r1, #80	; 0x50
 8003f02:	4618      	mov	r0, r3
 8003f04:	f000 fc0b 	bl	800471e <TIM_ITRx_SetConfig>
      break;
 8003f08:	e02c      	b.n	8003f64 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f16:	461a      	mov	r2, r3
 8003f18:	f000 fbd1 	bl	80046be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2160      	movs	r1, #96	; 0x60
 8003f22:	4618      	mov	r0, r3
 8003f24:	f000 fbfb 	bl	800471e <TIM_ITRx_SetConfig>
      break;
 8003f28:	e01c      	b.n	8003f64 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f36:	461a      	mov	r2, r3
 8003f38:	f000 fb92 	bl	8004660 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2140      	movs	r1, #64	; 0x40
 8003f42:	4618      	mov	r0, r3
 8003f44:	f000 fbeb 	bl	800471e <TIM_ITRx_SetConfig>
      break;
 8003f48:	e00c      	b.n	8003f64 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4619      	mov	r1, r3
 8003f54:	4610      	mov	r0, r2
 8003f56:	f000 fbe2 	bl	800471e <TIM_ITRx_SetConfig>
      break;
 8003f5a:	e003      	b.n	8003f64 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	73fb      	strb	r3, [r7, #15]
      break;
 8003f60:	e000      	b.n	8003f64 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003f62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3710      	adds	r7, #16
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
	...

08003f80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b085      	sub	sp, #20
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a40      	ldr	r2, [pc, #256]	; (8004094 <TIM_Base_SetConfig+0x114>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d013      	beq.n	8003fc0 <TIM_Base_SetConfig+0x40>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f9e:	d00f      	beq.n	8003fc0 <TIM_Base_SetConfig+0x40>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	4a3d      	ldr	r2, [pc, #244]	; (8004098 <TIM_Base_SetConfig+0x118>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d00b      	beq.n	8003fc0 <TIM_Base_SetConfig+0x40>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4a3c      	ldr	r2, [pc, #240]	; (800409c <TIM_Base_SetConfig+0x11c>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d007      	beq.n	8003fc0 <TIM_Base_SetConfig+0x40>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4a3b      	ldr	r2, [pc, #236]	; (80040a0 <TIM_Base_SetConfig+0x120>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d003      	beq.n	8003fc0 <TIM_Base_SetConfig+0x40>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a3a      	ldr	r2, [pc, #232]	; (80040a4 <TIM_Base_SetConfig+0x124>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d108      	bne.n	8003fd2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a2f      	ldr	r2, [pc, #188]	; (8004094 <TIM_Base_SetConfig+0x114>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d01f      	beq.n	800401a <TIM_Base_SetConfig+0x9a>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fe0:	d01b      	beq.n	800401a <TIM_Base_SetConfig+0x9a>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a2c      	ldr	r2, [pc, #176]	; (8004098 <TIM_Base_SetConfig+0x118>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d017      	beq.n	800401a <TIM_Base_SetConfig+0x9a>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a2b      	ldr	r2, [pc, #172]	; (800409c <TIM_Base_SetConfig+0x11c>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d013      	beq.n	800401a <TIM_Base_SetConfig+0x9a>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a2a      	ldr	r2, [pc, #168]	; (80040a0 <TIM_Base_SetConfig+0x120>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d00f      	beq.n	800401a <TIM_Base_SetConfig+0x9a>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a29      	ldr	r2, [pc, #164]	; (80040a4 <TIM_Base_SetConfig+0x124>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d00b      	beq.n	800401a <TIM_Base_SetConfig+0x9a>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a28      	ldr	r2, [pc, #160]	; (80040a8 <TIM_Base_SetConfig+0x128>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d007      	beq.n	800401a <TIM_Base_SetConfig+0x9a>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a27      	ldr	r2, [pc, #156]	; (80040ac <TIM_Base_SetConfig+0x12c>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d003      	beq.n	800401a <TIM_Base_SetConfig+0x9a>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a26      	ldr	r2, [pc, #152]	; (80040b0 <TIM_Base_SetConfig+0x130>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d108      	bne.n	800402c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004020:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	68fa      	ldr	r2, [r7, #12]
 8004028:	4313      	orrs	r3, r2
 800402a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	695b      	ldr	r3, [r3, #20]
 8004036:	4313      	orrs	r3, r2
 8004038:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	689a      	ldr	r2, [r3, #8]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a10      	ldr	r2, [pc, #64]	; (8004094 <TIM_Base_SetConfig+0x114>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d00f      	beq.n	8004078 <TIM_Base_SetConfig+0xf8>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4a12      	ldr	r2, [pc, #72]	; (80040a4 <TIM_Base_SetConfig+0x124>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d00b      	beq.n	8004078 <TIM_Base_SetConfig+0xf8>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4a11      	ldr	r2, [pc, #68]	; (80040a8 <TIM_Base_SetConfig+0x128>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d007      	beq.n	8004078 <TIM_Base_SetConfig+0xf8>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4a10      	ldr	r2, [pc, #64]	; (80040ac <TIM_Base_SetConfig+0x12c>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d003      	beq.n	8004078 <TIM_Base_SetConfig+0xf8>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a0f      	ldr	r2, [pc, #60]	; (80040b0 <TIM_Base_SetConfig+0x130>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d103      	bne.n	8004080 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	691a      	ldr	r2, [r3, #16]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	615a      	str	r2, [r3, #20]
}
 8004086:	bf00      	nop
 8004088:	3714      	adds	r7, #20
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	40012c00 	.word	0x40012c00
 8004098:	40000400 	.word	0x40000400
 800409c:	40000800 	.word	0x40000800
 80040a0:	40000c00 	.word	0x40000c00
 80040a4:	40013400 	.word	0x40013400
 80040a8:	40014000 	.word	0x40014000
 80040ac:	40014400 	.word	0x40014400
 80040b0:	40014800 	.word	0x40014800

080040b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b087      	sub	sp, #28
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a1b      	ldr	r3, [r3, #32]
 80040c2:	f023 0201 	bic.w	r2, r3, #1
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a1b      	ldr	r3, [r3, #32]
 80040ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	699b      	ldr	r3, [r3, #24]
 80040da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f023 0303 	bic.w	r3, r3, #3
 80040ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	f023 0302 	bic.w	r3, r3, #2
 8004100:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	697a      	ldr	r2, [r7, #20]
 8004108:	4313      	orrs	r3, r2
 800410a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a2c      	ldr	r2, [pc, #176]	; (80041c0 <TIM_OC1_SetConfig+0x10c>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d00f      	beq.n	8004134 <TIM_OC1_SetConfig+0x80>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4a2b      	ldr	r2, [pc, #172]	; (80041c4 <TIM_OC1_SetConfig+0x110>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d00b      	beq.n	8004134 <TIM_OC1_SetConfig+0x80>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4a2a      	ldr	r2, [pc, #168]	; (80041c8 <TIM_OC1_SetConfig+0x114>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d007      	beq.n	8004134 <TIM_OC1_SetConfig+0x80>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4a29      	ldr	r2, [pc, #164]	; (80041cc <TIM_OC1_SetConfig+0x118>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d003      	beq.n	8004134 <TIM_OC1_SetConfig+0x80>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4a28      	ldr	r2, [pc, #160]	; (80041d0 <TIM_OC1_SetConfig+0x11c>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d10c      	bne.n	800414e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	f023 0308 	bic.w	r3, r3, #8
 800413a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	697a      	ldr	r2, [r7, #20]
 8004142:	4313      	orrs	r3, r2
 8004144:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	f023 0304 	bic.w	r3, r3, #4
 800414c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a1b      	ldr	r2, [pc, #108]	; (80041c0 <TIM_OC1_SetConfig+0x10c>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d00f      	beq.n	8004176 <TIM_OC1_SetConfig+0xc2>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a1a      	ldr	r2, [pc, #104]	; (80041c4 <TIM_OC1_SetConfig+0x110>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d00b      	beq.n	8004176 <TIM_OC1_SetConfig+0xc2>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a19      	ldr	r2, [pc, #100]	; (80041c8 <TIM_OC1_SetConfig+0x114>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d007      	beq.n	8004176 <TIM_OC1_SetConfig+0xc2>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a18      	ldr	r2, [pc, #96]	; (80041cc <TIM_OC1_SetConfig+0x118>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d003      	beq.n	8004176 <TIM_OC1_SetConfig+0xc2>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a17      	ldr	r2, [pc, #92]	; (80041d0 <TIM_OC1_SetConfig+0x11c>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d111      	bne.n	800419a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800417c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004184:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	4313      	orrs	r3, r2
 800418e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	699b      	ldr	r3, [r3, #24]
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	4313      	orrs	r3, r2
 8004198:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	693a      	ldr	r2, [r7, #16]
 800419e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	685a      	ldr	r2, [r3, #4]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	697a      	ldr	r2, [r7, #20]
 80041b2:	621a      	str	r2, [r3, #32]
}
 80041b4:	bf00      	nop
 80041b6:	371c      	adds	r7, #28
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr
 80041c0:	40012c00 	.word	0x40012c00
 80041c4:	40013400 	.word	0x40013400
 80041c8:	40014000 	.word	0x40014000
 80041cc:	40014400 	.word	0x40014400
 80041d0:	40014800 	.word	0x40014800

080041d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b087      	sub	sp, #28
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a1b      	ldr	r3, [r3, #32]
 80041e2:	f023 0210 	bic.w	r2, r3, #16
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a1b      	ldr	r3, [r3, #32]
 80041ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004202:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004206:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800420e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	021b      	lsls	r3, r3, #8
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	4313      	orrs	r3, r2
 800421a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	f023 0320 	bic.w	r3, r3, #32
 8004222:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	011b      	lsls	r3, r3, #4
 800422a:	697a      	ldr	r2, [r7, #20]
 800422c:	4313      	orrs	r3, r2
 800422e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a28      	ldr	r2, [pc, #160]	; (80042d4 <TIM_OC2_SetConfig+0x100>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d003      	beq.n	8004240 <TIM_OC2_SetConfig+0x6c>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4a27      	ldr	r2, [pc, #156]	; (80042d8 <TIM_OC2_SetConfig+0x104>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d10d      	bne.n	800425c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004246:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	011b      	lsls	r3, r3, #4
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	4313      	orrs	r3, r2
 8004252:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800425a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	4a1d      	ldr	r2, [pc, #116]	; (80042d4 <TIM_OC2_SetConfig+0x100>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d00f      	beq.n	8004284 <TIM_OC2_SetConfig+0xb0>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4a1c      	ldr	r2, [pc, #112]	; (80042d8 <TIM_OC2_SetConfig+0x104>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d00b      	beq.n	8004284 <TIM_OC2_SetConfig+0xb0>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a1b      	ldr	r2, [pc, #108]	; (80042dc <TIM_OC2_SetConfig+0x108>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d007      	beq.n	8004284 <TIM_OC2_SetConfig+0xb0>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4a1a      	ldr	r2, [pc, #104]	; (80042e0 <TIM_OC2_SetConfig+0x10c>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d003      	beq.n	8004284 <TIM_OC2_SetConfig+0xb0>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a19      	ldr	r2, [pc, #100]	; (80042e4 <TIM_OC2_SetConfig+0x110>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d113      	bne.n	80042ac <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800428a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004292:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	695b      	ldr	r3, [r3, #20]
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	693a      	ldr	r2, [r7, #16]
 800429c:	4313      	orrs	r3, r2
 800429e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	693a      	ldr	r2, [r7, #16]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	693a      	ldr	r2, [r7, #16]
 80042b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	68fa      	ldr	r2, [r7, #12]
 80042b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	685a      	ldr	r2, [r3, #4]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	697a      	ldr	r2, [r7, #20]
 80042c4:	621a      	str	r2, [r3, #32]
}
 80042c6:	bf00      	nop
 80042c8:	371c      	adds	r7, #28
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	40012c00 	.word	0x40012c00
 80042d8:	40013400 	.word	0x40013400
 80042dc:	40014000 	.word	0x40014000
 80042e0:	40014400 	.word	0x40014400
 80042e4:	40014800 	.word	0x40014800

080042e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b087      	sub	sp, #28
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a1b      	ldr	r3, [r3, #32]
 80042f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a1b      	ldr	r3, [r3, #32]
 8004302:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	69db      	ldr	r3, [r3, #28]
 800430e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800431a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f023 0303 	bic.w	r3, r3, #3
 8004322:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	4313      	orrs	r3, r2
 800432c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004334:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	021b      	lsls	r3, r3, #8
 800433c:	697a      	ldr	r2, [r7, #20]
 800433e:	4313      	orrs	r3, r2
 8004340:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a27      	ldr	r2, [pc, #156]	; (80043e4 <TIM_OC3_SetConfig+0xfc>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d003      	beq.n	8004352 <TIM_OC3_SetConfig+0x6a>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a26      	ldr	r2, [pc, #152]	; (80043e8 <TIM_OC3_SetConfig+0x100>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d10d      	bne.n	800436e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004358:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	021b      	lsls	r3, r3, #8
 8004360:	697a      	ldr	r2, [r7, #20]
 8004362:	4313      	orrs	r3, r2
 8004364:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800436c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a1c      	ldr	r2, [pc, #112]	; (80043e4 <TIM_OC3_SetConfig+0xfc>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d00f      	beq.n	8004396 <TIM_OC3_SetConfig+0xae>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a1b      	ldr	r2, [pc, #108]	; (80043e8 <TIM_OC3_SetConfig+0x100>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d00b      	beq.n	8004396 <TIM_OC3_SetConfig+0xae>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a1a      	ldr	r2, [pc, #104]	; (80043ec <TIM_OC3_SetConfig+0x104>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d007      	beq.n	8004396 <TIM_OC3_SetConfig+0xae>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a19      	ldr	r2, [pc, #100]	; (80043f0 <TIM_OC3_SetConfig+0x108>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d003      	beq.n	8004396 <TIM_OC3_SetConfig+0xae>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a18      	ldr	r2, [pc, #96]	; (80043f4 <TIM_OC3_SetConfig+0x10c>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d113      	bne.n	80043be <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800439c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	695b      	ldr	r3, [r3, #20]
 80043aa:	011b      	lsls	r3, r3, #4
 80043ac:	693a      	ldr	r2, [r7, #16]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	011b      	lsls	r3, r3, #4
 80043b8:	693a      	ldr	r2, [r7, #16]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	693a      	ldr	r2, [r7, #16]
 80043c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	685a      	ldr	r2, [r3, #4]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	697a      	ldr	r2, [r7, #20]
 80043d6:	621a      	str	r2, [r3, #32]
}
 80043d8:	bf00      	nop
 80043da:	371c      	adds	r7, #28
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr
 80043e4:	40012c00 	.word	0x40012c00
 80043e8:	40013400 	.word	0x40013400
 80043ec:	40014000 	.word	0x40014000
 80043f0:	40014400 	.word	0x40014400
 80043f4:	40014800 	.word	0x40014800

080043f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b087      	sub	sp, #28
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a1b      	ldr	r3, [r3, #32]
 8004406:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a1b      	ldr	r3, [r3, #32]
 8004412:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	69db      	ldr	r3, [r3, #28]
 800441e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004426:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800442a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004432:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	021b      	lsls	r3, r3, #8
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	4313      	orrs	r3, r2
 800443e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004446:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	031b      	lsls	r3, r3, #12
 800444e:	693a      	ldr	r2, [r7, #16]
 8004450:	4313      	orrs	r3, r2
 8004452:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a18      	ldr	r2, [pc, #96]	; (80044b8 <TIM_OC4_SetConfig+0xc0>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d00f      	beq.n	800447c <TIM_OC4_SetConfig+0x84>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a17      	ldr	r2, [pc, #92]	; (80044bc <TIM_OC4_SetConfig+0xc4>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d00b      	beq.n	800447c <TIM_OC4_SetConfig+0x84>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a16      	ldr	r2, [pc, #88]	; (80044c0 <TIM_OC4_SetConfig+0xc8>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d007      	beq.n	800447c <TIM_OC4_SetConfig+0x84>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a15      	ldr	r2, [pc, #84]	; (80044c4 <TIM_OC4_SetConfig+0xcc>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d003      	beq.n	800447c <TIM_OC4_SetConfig+0x84>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a14      	ldr	r2, [pc, #80]	; (80044c8 <TIM_OC4_SetConfig+0xd0>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d109      	bne.n	8004490 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004482:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	695b      	ldr	r3, [r3, #20]
 8004488:	019b      	lsls	r3, r3, #6
 800448a:	697a      	ldr	r2, [r7, #20]
 800448c:	4313      	orrs	r3, r2
 800448e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	697a      	ldr	r2, [r7, #20]
 8004494:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	685a      	ldr	r2, [r3, #4]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	693a      	ldr	r2, [r7, #16]
 80044a8:	621a      	str	r2, [r3, #32]
}
 80044aa:	bf00      	nop
 80044ac:	371c      	adds	r7, #28
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	40012c00 	.word	0x40012c00
 80044bc:	40013400 	.word	0x40013400
 80044c0:	40014000 	.word	0x40014000
 80044c4:	40014400 	.word	0x40014400
 80044c8:	40014800 	.word	0x40014800

080044cc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b087      	sub	sp, #28
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a1b      	ldr	r3, [r3, #32]
 80044da:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a1b      	ldr	r3, [r3, #32]
 80044e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	4313      	orrs	r3, r2
 8004508:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004510:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	041b      	lsls	r3, r3, #16
 8004518:	693a      	ldr	r2, [r7, #16]
 800451a:	4313      	orrs	r3, r2
 800451c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a17      	ldr	r2, [pc, #92]	; (8004580 <TIM_OC5_SetConfig+0xb4>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d00f      	beq.n	8004546 <TIM_OC5_SetConfig+0x7a>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a16      	ldr	r2, [pc, #88]	; (8004584 <TIM_OC5_SetConfig+0xb8>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d00b      	beq.n	8004546 <TIM_OC5_SetConfig+0x7a>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a15      	ldr	r2, [pc, #84]	; (8004588 <TIM_OC5_SetConfig+0xbc>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d007      	beq.n	8004546 <TIM_OC5_SetConfig+0x7a>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a14      	ldr	r2, [pc, #80]	; (800458c <TIM_OC5_SetConfig+0xc0>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d003      	beq.n	8004546 <TIM_OC5_SetConfig+0x7a>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a13      	ldr	r2, [pc, #76]	; (8004590 <TIM_OC5_SetConfig+0xc4>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d109      	bne.n	800455a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800454c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	695b      	ldr	r3, [r3, #20]
 8004552:	021b      	lsls	r3, r3, #8
 8004554:	697a      	ldr	r2, [r7, #20]
 8004556:	4313      	orrs	r3, r2
 8004558:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	697a      	ldr	r2, [r7, #20]
 800455e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	685a      	ldr	r2, [r3, #4]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	693a      	ldr	r2, [r7, #16]
 8004572:	621a      	str	r2, [r3, #32]
}
 8004574:	bf00      	nop
 8004576:	371c      	adds	r7, #28
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr
 8004580:	40012c00 	.word	0x40012c00
 8004584:	40013400 	.word	0x40013400
 8004588:	40014000 	.word	0x40014000
 800458c:	40014400 	.word	0x40014400
 8004590:	40014800 	.word	0x40014800

08004594 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004594:	b480      	push	{r7}
 8004596:	b087      	sub	sp, #28
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a1b      	ldr	r3, [r3, #32]
 80045ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	021b      	lsls	r3, r3, #8
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80045da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	051b      	lsls	r3, r3, #20
 80045e2:	693a      	ldr	r2, [r7, #16]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4a18      	ldr	r2, [pc, #96]	; (800464c <TIM_OC6_SetConfig+0xb8>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d00f      	beq.n	8004610 <TIM_OC6_SetConfig+0x7c>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a17      	ldr	r2, [pc, #92]	; (8004650 <TIM_OC6_SetConfig+0xbc>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d00b      	beq.n	8004610 <TIM_OC6_SetConfig+0x7c>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4a16      	ldr	r2, [pc, #88]	; (8004654 <TIM_OC6_SetConfig+0xc0>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d007      	beq.n	8004610 <TIM_OC6_SetConfig+0x7c>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a15      	ldr	r2, [pc, #84]	; (8004658 <TIM_OC6_SetConfig+0xc4>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d003      	beq.n	8004610 <TIM_OC6_SetConfig+0x7c>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4a14      	ldr	r2, [pc, #80]	; (800465c <TIM_OC6_SetConfig+0xc8>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d109      	bne.n	8004624 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004616:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	695b      	ldr	r3, [r3, #20]
 800461c:	029b      	lsls	r3, r3, #10
 800461e:	697a      	ldr	r2, [r7, #20]
 8004620:	4313      	orrs	r3, r2
 8004622:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	697a      	ldr	r2, [r7, #20]
 8004628:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	68fa      	ldr	r2, [r7, #12]
 800462e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	685a      	ldr	r2, [r3, #4]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	693a      	ldr	r2, [r7, #16]
 800463c:	621a      	str	r2, [r3, #32]
}
 800463e:	bf00      	nop
 8004640:	371c      	adds	r7, #28
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop
 800464c:	40012c00 	.word	0x40012c00
 8004650:	40013400 	.word	0x40013400
 8004654:	40014000 	.word	0x40014000
 8004658:	40014400 	.word	0x40014400
 800465c:	40014800 	.word	0x40014800

08004660 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004660:	b480      	push	{r7}
 8004662:	b087      	sub	sp, #28
 8004664:	af00      	add	r7, sp, #0
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6a1b      	ldr	r3, [r3, #32]
 8004670:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6a1b      	ldr	r3, [r3, #32]
 8004676:	f023 0201 	bic.w	r2, r3, #1
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	699b      	ldr	r3, [r3, #24]
 8004682:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800468a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	011b      	lsls	r3, r3, #4
 8004690:	693a      	ldr	r2, [r7, #16]
 8004692:	4313      	orrs	r3, r2
 8004694:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	f023 030a 	bic.w	r3, r3, #10
 800469c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	693a      	ldr	r2, [r7, #16]
 80046aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	697a      	ldr	r2, [r7, #20]
 80046b0:	621a      	str	r2, [r3, #32]
}
 80046b2:	bf00      	nop
 80046b4:	371c      	adds	r7, #28
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr

080046be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046be:	b480      	push	{r7}
 80046c0:	b087      	sub	sp, #28
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	60f8      	str	r0, [r7, #12]
 80046c6:	60b9      	str	r1, [r7, #8]
 80046c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6a1b      	ldr	r3, [r3, #32]
 80046ce:	f023 0210 	bic.w	r2, r3, #16
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6a1b      	ldr	r3, [r3, #32]
 80046e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80046e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	031b      	lsls	r3, r3, #12
 80046ee:	697a      	ldr	r2, [r7, #20]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80046fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	011b      	lsls	r3, r3, #4
 8004700:	693a      	ldr	r2, [r7, #16]
 8004702:	4313      	orrs	r3, r2
 8004704:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	697a      	ldr	r2, [r7, #20]
 800470a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	693a      	ldr	r2, [r7, #16]
 8004710:	621a      	str	r2, [r3, #32]
}
 8004712:	bf00      	nop
 8004714:	371c      	adds	r7, #28
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr

0800471e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800471e:	b480      	push	{r7}
 8004720:	b085      	sub	sp, #20
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
 8004726:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004734:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004736:	683a      	ldr	r2, [r7, #0]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	4313      	orrs	r3, r2
 800473c:	f043 0307 	orr.w	r3, r3, #7
 8004740:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	609a      	str	r2, [r3, #8]
}
 8004748:	bf00      	nop
 800474a:	3714      	adds	r7, #20
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

08004754 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004754:	b480      	push	{r7}
 8004756:	b087      	sub	sp, #28
 8004758:	af00      	add	r7, sp, #0
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	607a      	str	r2, [r7, #4]
 8004760:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800476e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	021a      	lsls	r2, r3, #8
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	431a      	orrs	r2, r3
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	4313      	orrs	r3, r2
 800477c:	697a      	ldr	r2, [r7, #20]
 800477e:	4313      	orrs	r3, r2
 8004780:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	697a      	ldr	r2, [r7, #20]
 8004786:	609a      	str	r2, [r3, #8]
}
 8004788:	bf00      	nop
 800478a:	371c      	adds	r7, #28
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004794:	b480      	push	{r7}
 8004796:	b087      	sub	sp, #28
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	f003 031f 	and.w	r3, r3, #31
 80047a6:	2201      	movs	r2, #1
 80047a8:	fa02 f303 	lsl.w	r3, r2, r3
 80047ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6a1a      	ldr	r2, [r3, #32]
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	43db      	mvns	r3, r3
 80047b6:	401a      	ands	r2, r3
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6a1a      	ldr	r2, [r3, #32]
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	f003 031f 	and.w	r3, r3, #31
 80047c6:	6879      	ldr	r1, [r7, #4]
 80047c8:	fa01 f303 	lsl.w	r3, r1, r3
 80047cc:	431a      	orrs	r2, r3
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	621a      	str	r2, [r3, #32]
}
 80047d2:	bf00      	nop
 80047d4:	371c      	adds	r7, #28
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
	...

080047e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b085      	sub	sp, #20
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d101      	bne.n	80047f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047f4:	2302      	movs	r3, #2
 80047f6:	e068      	b.n	80048ca <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2202      	movs	r2, #2
 8004804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a2e      	ldr	r2, [pc, #184]	; (80048d8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d004      	beq.n	800482c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a2d      	ldr	r2, [pc, #180]	; (80048dc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d108      	bne.n	800483e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004832:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	68fa      	ldr	r2, [r7, #12]
 800483a:	4313      	orrs	r3, r2
 800483c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004844:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	4313      	orrs	r3, r2
 800484e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	68fa      	ldr	r2, [r7, #12]
 8004856:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a1e      	ldr	r2, [pc, #120]	; (80048d8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d01d      	beq.n	800489e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800486a:	d018      	beq.n	800489e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a1b      	ldr	r2, [pc, #108]	; (80048e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d013      	beq.n	800489e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a1a      	ldr	r2, [pc, #104]	; (80048e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d00e      	beq.n	800489e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a18      	ldr	r2, [pc, #96]	; (80048e8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d009      	beq.n	800489e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a13      	ldr	r2, [pc, #76]	; (80048dc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d004      	beq.n	800489e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a14      	ldr	r2, [pc, #80]	; (80048ec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d10c      	bne.n	80048b8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	68ba      	ldr	r2, [r7, #8]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68ba      	ldr	r2, [r7, #8]
 80048b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048c8:	2300      	movs	r3, #0
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3714      	adds	r7, #20
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	40012c00 	.word	0x40012c00
 80048dc:	40013400 	.word	0x40013400
 80048e0:	40000400 	.word	0x40000400
 80048e4:	40000800 	.word	0x40000800
 80048e8:	40000c00 	.word	0x40000c00
 80048ec:	40014000 	.word	0x40014000

080048f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d101      	bne.n	8004902 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e040      	b.n	8004984 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004906:	2b00      	cmp	r3, #0
 8004908:	d106      	bne.n	8004918 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f7fc f954 	bl	8000bc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2224      	movs	r2, #36	; 0x24
 800491c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f022 0201 	bic.w	r2, r2, #1
 800492c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 fb84 	bl	800503c <UART_SetConfig>
 8004934:	4603      	mov	r3, r0
 8004936:	2b01      	cmp	r3, #1
 8004938:	d101      	bne.n	800493e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e022      	b.n	8004984 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004942:	2b00      	cmp	r3, #0
 8004944:	d002      	beq.n	800494c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 fe30 	bl	80055ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	685a      	ldr	r2, [r3, #4]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800495a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	689a      	ldr	r2, [r3, #8]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800496a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f042 0201 	orr.w	r2, r2, #1
 800497a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f000 feb7 	bl	80056f0 <UART_CheckIdleState>
 8004982:	4603      	mov	r3, r0
}
 8004984:	4618      	mov	r0, r3
 8004986:	3708      	adds	r7, #8
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}

0800498c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b08a      	sub	sp, #40	; 0x28
 8004990:	af00      	add	r7, sp, #0
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	4613      	mov	r3, r2
 8004998:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800499e:	2b20      	cmp	r3, #32
 80049a0:	d142      	bne.n	8004a28 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d002      	beq.n	80049ae <HAL_UART_Receive_IT+0x22>
 80049a8:	88fb      	ldrh	r3, [r7, #6]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d101      	bne.n	80049b2 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e03b      	b.n	8004a2a <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d101      	bne.n	80049c0 <HAL_UART_Receive_IT+0x34>
 80049bc:	2302      	movs	r3, #2
 80049be:	e034      	b.n	8004a2a <HAL_UART_Receive_IT+0x9e>
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2200      	movs	r2, #0
 80049cc:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a18      	ldr	r2, [pc, #96]	; (8004a34 <HAL_UART_Receive_IT+0xa8>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d01f      	beq.n	8004a18 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d018      	beq.n	8004a18 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	e853 3f00 	ldrex	r3, [r3]
 80049f2:	613b      	str	r3, [r7, #16]
   return(result);
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80049fa:	627b      	str	r3, [r7, #36]	; 0x24
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	461a      	mov	r2, r3
 8004a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a04:	623b      	str	r3, [r7, #32]
 8004a06:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a08:	69f9      	ldr	r1, [r7, #28]
 8004a0a:	6a3a      	ldr	r2, [r7, #32]
 8004a0c:	e841 2300 	strex	r3, r2, [r1]
 8004a10:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d1e6      	bne.n	80049e6 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004a18:	88fb      	ldrh	r3, [r7, #6]
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	68b9      	ldr	r1, [r7, #8]
 8004a1e:	68f8      	ldr	r0, [r7, #12]
 8004a20:	f000 ff74 	bl	800590c <UART_Start_Receive_IT>
 8004a24:	4603      	mov	r3, r0
 8004a26:	e000      	b.n	8004a2a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004a28:	2302      	movs	r3, #2
  }
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3728      	adds	r7, #40	; 0x28
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	40008000 	.word	0x40008000

08004a38 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b0ba      	sub	sp, #232	; 0xe8
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	69db      	ldr	r3, [r3, #28]
 8004a46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004a5e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004a62:	f640 030f 	movw	r3, #2063	; 0x80f
 8004a66:	4013      	ands	r3, r2
 8004a68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004a6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d115      	bne.n	8004aa0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004a74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a78:	f003 0320 	and.w	r3, r3, #32
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d00f      	beq.n	8004aa0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004a80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a84:	f003 0320 	and.w	r3, r3, #32
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d009      	beq.n	8004aa0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	f000 82a6 	beq.w	8004fe2 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	4798      	blx	r3
      }
      return;
 8004a9e:	e2a0      	b.n	8004fe2 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004aa0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	f000 8117 	beq.w	8004cd8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004aaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004aae:	f003 0301 	and.w	r3, r3, #1
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d106      	bne.n	8004ac4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004ab6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004aba:	4b85      	ldr	r3, [pc, #532]	; (8004cd0 <HAL_UART_IRQHandler+0x298>)
 8004abc:	4013      	ands	r3, r2
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	f000 810a 	beq.w	8004cd8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004ac4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ac8:	f003 0301 	and.w	r3, r3, #1
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d011      	beq.n	8004af4 <HAL_UART_IRQHandler+0xbc>
 8004ad0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d00b      	beq.n	8004af4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004aea:	f043 0201 	orr.w	r2, r3, #1
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004af4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004af8:	f003 0302 	and.w	r3, r3, #2
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d011      	beq.n	8004b24 <HAL_UART_IRQHandler+0xec>
 8004b00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b04:	f003 0301 	and.w	r3, r3, #1
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d00b      	beq.n	8004b24 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2202      	movs	r2, #2
 8004b12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b1a:	f043 0204 	orr.w	r2, r3, #4
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b28:	f003 0304 	and.w	r3, r3, #4
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d011      	beq.n	8004b54 <HAL_UART_IRQHandler+0x11c>
 8004b30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b34:	f003 0301 	and.w	r3, r3, #1
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d00b      	beq.n	8004b54 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2204      	movs	r2, #4
 8004b42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b4a:	f043 0202 	orr.w	r2, r3, #2
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004b54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b58:	f003 0308 	and.w	r3, r3, #8
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d017      	beq.n	8004b90 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004b60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b64:	f003 0320 	and.w	r3, r3, #32
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d105      	bne.n	8004b78 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004b6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b70:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d00b      	beq.n	8004b90 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2208      	movs	r2, #8
 8004b7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b86:	f043 0208 	orr.w	r2, r3, #8
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004b90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d012      	beq.n	8004bc2 <HAL_UART_IRQHandler+0x18a>
 8004b9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ba0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d00c      	beq.n	8004bc2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004bb0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bb8:	f043 0220 	orr.w	r2, r3, #32
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	f000 820c 	beq.w	8004fe6 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004bce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bd2:	f003 0320 	and.w	r3, r3, #32
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00d      	beq.n	8004bf6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004bda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bde:	f003 0320 	and.w	r3, r3, #32
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d007      	beq.n	8004bf6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d003      	beq.n	8004bf6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bfc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c0a:	2b40      	cmp	r3, #64	; 0x40
 8004c0c:	d005      	beq.n	8004c1a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004c0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c12:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d04f      	beq.n	8004cba <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 ff40 	bl	8005aa0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c2a:	2b40      	cmp	r3, #64	; 0x40
 8004c2c:	d141      	bne.n	8004cb2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	3308      	adds	r3, #8
 8004c34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004c3c:	e853 3f00 	ldrex	r3, [r3]
 8004c40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004c44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004c48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	3308      	adds	r3, #8
 8004c56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004c5a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004c5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c62:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004c66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004c6a:	e841 2300 	strex	r3, r2, [r1]
 8004c6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004c72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d1d9      	bne.n	8004c2e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d013      	beq.n	8004caa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c86:	4a13      	ldr	r2, [pc, #76]	; (8004cd4 <HAL_UART_IRQHandler+0x29c>)
 8004c88:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f7fd f8b7 	bl	8001e02 <HAL_DMA_Abort_IT>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d017      	beq.n	8004cca <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004ca4:	4610      	mov	r0, r2
 8004ca6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ca8:	e00f      	b.n	8004cca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 f9b0 	bl	8005010 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cb0:	e00b      	b.n	8004cca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 f9ac 	bl	8005010 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cb8:	e007      	b.n	8004cca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 f9a8 	bl	8005010 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004cc8:	e18d      	b.n	8004fe6 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cca:	bf00      	nop
    return;
 8004ccc:	e18b      	b.n	8004fe6 <HAL_UART_IRQHandler+0x5ae>
 8004cce:	bf00      	nop
 8004cd0:	04000120 	.word	0x04000120
 8004cd4:	08005b67 	.word	0x08005b67

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	f040 8146 	bne.w	8004f6e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004ce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ce6:	f003 0310 	and.w	r3, r3, #16
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	f000 813f 	beq.w	8004f6e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004cf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cf4:	f003 0310 	and.w	r3, r3, #16
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	f000 8138 	beq.w	8004f6e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2210      	movs	r2, #16
 8004d04:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d10:	2b40      	cmp	r3, #64	; 0x40
 8004d12:	f040 80b4 	bne.w	8004e7e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004d22:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	f000 815f 	beq.w	8004fea <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004d32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004d36:	429a      	cmp	r2, r3
 8004d38:	f080 8157 	bcs.w	8004fea <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004d42:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 0320 	and.w	r3, r3, #32
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	f040 8085 	bne.w	8004e62 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d60:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d64:	e853 3f00 	ldrex	r3, [r3]
 8004d68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004d6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004d82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004d86:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004d8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004d92:	e841 2300 	strex	r3, r2, [r1]
 8004d96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004d9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d1da      	bne.n	8004d58 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	3308      	adds	r3, #8
 8004da8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004daa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dac:	e853 3f00 	ldrex	r3, [r3]
 8004db0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004db2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004db4:	f023 0301 	bic.w	r3, r3, #1
 8004db8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	3308      	adds	r3, #8
 8004dc2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004dc6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004dca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dcc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004dce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004dd2:	e841 2300 	strex	r3, r2, [r1]
 8004dd6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004dd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d1e1      	bne.n	8004da2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	3308      	adds	r3, #8
 8004de4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004de8:	e853 3f00 	ldrex	r3, [r3]
 8004dec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004dee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004df0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004df4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	3308      	adds	r3, #8
 8004dfe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004e02:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004e04:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e06:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004e08:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004e0a:	e841 2300 	strex	r3, r2, [r1]
 8004e0e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004e10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1e3      	bne.n	8004dde <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2220      	movs	r2, #32
 8004e1a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e2a:	e853 3f00 	ldrex	r3, [r3]
 8004e2e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004e30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e32:	f023 0310 	bic.w	r3, r3, #16
 8004e36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	461a      	mov	r2, r3
 8004e40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004e44:	65bb      	str	r3, [r7, #88]	; 0x58
 8004e46:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e48:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004e4a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004e4c:	e841 2300 	strex	r3, r2, [r1]
 8004e50:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004e52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d1e4      	bne.n	8004e22 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f7fc ff92 	bl	8001d86 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	4619      	mov	r1, r3
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 f8d4 	bl	8005024 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004e7c:	e0b5      	b.n	8004fea <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	f000 80a7 	beq.w	8004fee <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8004ea0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	f000 80a2 	beq.w	8004fee <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb2:	e853 3f00 	ldrex	r3, [r3]
 8004eb6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ebe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004ecc:	647b      	str	r3, [r7, #68]	; 0x44
 8004ece:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ed2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ed4:	e841 2300 	strex	r3, r2, [r1]
 8004ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004eda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d1e4      	bne.n	8004eaa <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	3308      	adds	r3, #8
 8004ee6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eea:	e853 3f00 	ldrex	r3, [r3]
 8004eee:	623b      	str	r3, [r7, #32]
   return(result);
 8004ef0:	6a3b      	ldr	r3, [r7, #32]
 8004ef2:	f023 0301 	bic.w	r3, r3, #1
 8004ef6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	3308      	adds	r3, #8
 8004f00:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004f04:	633a      	str	r2, [r7, #48]	; 0x30
 8004f06:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f0c:	e841 2300 	strex	r3, r2, [r1]
 8004f10:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d1e3      	bne.n	8004ee0 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2220      	movs	r2, #32
 8004f1c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	e853 3f00 	ldrex	r3, [r3]
 8004f36:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f023 0310 	bic.w	r3, r3, #16
 8004f3e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	461a      	mov	r2, r3
 8004f48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004f4c:	61fb      	str	r3, [r7, #28]
 8004f4e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f50:	69b9      	ldr	r1, [r7, #24]
 8004f52:	69fa      	ldr	r2, [r7, #28]
 8004f54:	e841 2300 	strex	r3, r2, [r1]
 8004f58:	617b      	str	r3, [r7, #20]
   return(result);
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d1e4      	bne.n	8004f2a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004f64:	4619      	mov	r1, r3
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f000 f85c 	bl	8005024 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004f6c:	e03f      	b.n	8004fee <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004f6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00e      	beq.n	8004f98 <HAL_UART_IRQHandler+0x560>
 8004f7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d008      	beq.n	8004f98 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004f8e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f000 ff88 	bl	8005ea6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004f96:	e02d      	b.n	8004ff4 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004f98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d00e      	beq.n	8004fc2 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004fa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d008      	beq.n	8004fc2 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d01c      	beq.n	8004ff2 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	4798      	blx	r3
    }
    return;
 8004fc0:	e017      	b.n	8004ff2 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d012      	beq.n	8004ff4 <HAL_UART_IRQHandler+0x5bc>
 8004fce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00c      	beq.n	8004ff4 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 fdd9 	bl	8005b92 <UART_EndTransmit_IT>
    return;
 8004fe0:	e008      	b.n	8004ff4 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004fe2:	bf00      	nop
 8004fe4:	e006      	b.n	8004ff4 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004fe6:	bf00      	nop
 8004fe8:	e004      	b.n	8004ff4 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004fea:	bf00      	nop
 8004fec:	e002      	b.n	8004ff4 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004fee:	bf00      	nop
 8004ff0:	e000      	b.n	8004ff4 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004ff2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004ff4:	37e8      	adds	r7, #232	; 0xe8
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop

08004ffc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005004:	bf00      	nop
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005018:	bf00      	nop
 800501a:	370c      	adds	r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	460b      	mov	r3, r1
 800502e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005030:	bf00      	nop
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800503c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005040:	b08a      	sub	sp, #40	; 0x28
 8005042:	af00      	add	r7, sp, #0
 8005044:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005046:	2300      	movs	r3, #0
 8005048:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	689a      	ldr	r2, [r3, #8]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	691b      	ldr	r3, [r3, #16]
 8005054:	431a      	orrs	r2, r3
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	695b      	ldr	r3, [r3, #20]
 800505a:	431a      	orrs	r2, r3
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	69db      	ldr	r3, [r3, #28]
 8005060:	4313      	orrs	r3, r2
 8005062:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	4ba4      	ldr	r3, [pc, #656]	; (80052fc <UART_SetConfig+0x2c0>)
 800506c:	4013      	ands	r3, r2
 800506e:	68fa      	ldr	r2, [r7, #12]
 8005070:	6812      	ldr	r2, [r2, #0]
 8005072:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005074:	430b      	orrs	r3, r1
 8005076:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	68da      	ldr	r2, [r3, #12]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	430a      	orrs	r2, r1
 800508c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	699b      	ldr	r3, [r3, #24]
 8005092:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a99      	ldr	r2, [pc, #612]	; (8005300 <UART_SetConfig+0x2c4>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d004      	beq.n	80050a8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6a1b      	ldr	r3, [r3, #32]
 80050a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050a4:	4313      	orrs	r3, r2
 80050a6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050b8:	430a      	orrs	r2, r1
 80050ba:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a90      	ldr	r2, [pc, #576]	; (8005304 <UART_SetConfig+0x2c8>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d126      	bne.n	8005114 <UART_SetConfig+0xd8>
 80050c6:	4b90      	ldr	r3, [pc, #576]	; (8005308 <UART_SetConfig+0x2cc>)
 80050c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050cc:	f003 0303 	and.w	r3, r3, #3
 80050d0:	2b03      	cmp	r3, #3
 80050d2:	d81b      	bhi.n	800510c <UART_SetConfig+0xd0>
 80050d4:	a201      	add	r2, pc, #4	; (adr r2, 80050dc <UART_SetConfig+0xa0>)
 80050d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050da:	bf00      	nop
 80050dc:	080050ed 	.word	0x080050ed
 80050e0:	080050fd 	.word	0x080050fd
 80050e4:	080050f5 	.word	0x080050f5
 80050e8:	08005105 	.word	0x08005105
 80050ec:	2301      	movs	r3, #1
 80050ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050f2:	e116      	b.n	8005322 <UART_SetConfig+0x2e6>
 80050f4:	2302      	movs	r3, #2
 80050f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050fa:	e112      	b.n	8005322 <UART_SetConfig+0x2e6>
 80050fc:	2304      	movs	r3, #4
 80050fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005102:	e10e      	b.n	8005322 <UART_SetConfig+0x2e6>
 8005104:	2308      	movs	r3, #8
 8005106:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800510a:	e10a      	b.n	8005322 <UART_SetConfig+0x2e6>
 800510c:	2310      	movs	r3, #16
 800510e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005112:	e106      	b.n	8005322 <UART_SetConfig+0x2e6>
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a7c      	ldr	r2, [pc, #496]	; (800530c <UART_SetConfig+0x2d0>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d138      	bne.n	8005190 <UART_SetConfig+0x154>
 800511e:	4b7a      	ldr	r3, [pc, #488]	; (8005308 <UART_SetConfig+0x2cc>)
 8005120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005124:	f003 030c 	and.w	r3, r3, #12
 8005128:	2b0c      	cmp	r3, #12
 800512a:	d82d      	bhi.n	8005188 <UART_SetConfig+0x14c>
 800512c:	a201      	add	r2, pc, #4	; (adr r2, 8005134 <UART_SetConfig+0xf8>)
 800512e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005132:	bf00      	nop
 8005134:	08005169 	.word	0x08005169
 8005138:	08005189 	.word	0x08005189
 800513c:	08005189 	.word	0x08005189
 8005140:	08005189 	.word	0x08005189
 8005144:	08005179 	.word	0x08005179
 8005148:	08005189 	.word	0x08005189
 800514c:	08005189 	.word	0x08005189
 8005150:	08005189 	.word	0x08005189
 8005154:	08005171 	.word	0x08005171
 8005158:	08005189 	.word	0x08005189
 800515c:	08005189 	.word	0x08005189
 8005160:	08005189 	.word	0x08005189
 8005164:	08005181 	.word	0x08005181
 8005168:	2300      	movs	r3, #0
 800516a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800516e:	e0d8      	b.n	8005322 <UART_SetConfig+0x2e6>
 8005170:	2302      	movs	r3, #2
 8005172:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005176:	e0d4      	b.n	8005322 <UART_SetConfig+0x2e6>
 8005178:	2304      	movs	r3, #4
 800517a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800517e:	e0d0      	b.n	8005322 <UART_SetConfig+0x2e6>
 8005180:	2308      	movs	r3, #8
 8005182:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005186:	e0cc      	b.n	8005322 <UART_SetConfig+0x2e6>
 8005188:	2310      	movs	r3, #16
 800518a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800518e:	e0c8      	b.n	8005322 <UART_SetConfig+0x2e6>
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a5e      	ldr	r2, [pc, #376]	; (8005310 <UART_SetConfig+0x2d4>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d125      	bne.n	80051e6 <UART_SetConfig+0x1aa>
 800519a:	4b5b      	ldr	r3, [pc, #364]	; (8005308 <UART_SetConfig+0x2cc>)
 800519c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051a0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80051a4:	2b30      	cmp	r3, #48	; 0x30
 80051a6:	d016      	beq.n	80051d6 <UART_SetConfig+0x19a>
 80051a8:	2b30      	cmp	r3, #48	; 0x30
 80051aa:	d818      	bhi.n	80051de <UART_SetConfig+0x1a2>
 80051ac:	2b20      	cmp	r3, #32
 80051ae:	d00a      	beq.n	80051c6 <UART_SetConfig+0x18a>
 80051b0:	2b20      	cmp	r3, #32
 80051b2:	d814      	bhi.n	80051de <UART_SetConfig+0x1a2>
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d002      	beq.n	80051be <UART_SetConfig+0x182>
 80051b8:	2b10      	cmp	r3, #16
 80051ba:	d008      	beq.n	80051ce <UART_SetConfig+0x192>
 80051bc:	e00f      	b.n	80051de <UART_SetConfig+0x1a2>
 80051be:	2300      	movs	r3, #0
 80051c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051c4:	e0ad      	b.n	8005322 <UART_SetConfig+0x2e6>
 80051c6:	2302      	movs	r3, #2
 80051c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051cc:	e0a9      	b.n	8005322 <UART_SetConfig+0x2e6>
 80051ce:	2304      	movs	r3, #4
 80051d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051d4:	e0a5      	b.n	8005322 <UART_SetConfig+0x2e6>
 80051d6:	2308      	movs	r3, #8
 80051d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051dc:	e0a1      	b.n	8005322 <UART_SetConfig+0x2e6>
 80051de:	2310      	movs	r3, #16
 80051e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051e4:	e09d      	b.n	8005322 <UART_SetConfig+0x2e6>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a4a      	ldr	r2, [pc, #296]	; (8005314 <UART_SetConfig+0x2d8>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d125      	bne.n	800523c <UART_SetConfig+0x200>
 80051f0:	4b45      	ldr	r3, [pc, #276]	; (8005308 <UART_SetConfig+0x2cc>)
 80051f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051f6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80051fa:	2bc0      	cmp	r3, #192	; 0xc0
 80051fc:	d016      	beq.n	800522c <UART_SetConfig+0x1f0>
 80051fe:	2bc0      	cmp	r3, #192	; 0xc0
 8005200:	d818      	bhi.n	8005234 <UART_SetConfig+0x1f8>
 8005202:	2b80      	cmp	r3, #128	; 0x80
 8005204:	d00a      	beq.n	800521c <UART_SetConfig+0x1e0>
 8005206:	2b80      	cmp	r3, #128	; 0x80
 8005208:	d814      	bhi.n	8005234 <UART_SetConfig+0x1f8>
 800520a:	2b00      	cmp	r3, #0
 800520c:	d002      	beq.n	8005214 <UART_SetConfig+0x1d8>
 800520e:	2b40      	cmp	r3, #64	; 0x40
 8005210:	d008      	beq.n	8005224 <UART_SetConfig+0x1e8>
 8005212:	e00f      	b.n	8005234 <UART_SetConfig+0x1f8>
 8005214:	2300      	movs	r3, #0
 8005216:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800521a:	e082      	b.n	8005322 <UART_SetConfig+0x2e6>
 800521c:	2302      	movs	r3, #2
 800521e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005222:	e07e      	b.n	8005322 <UART_SetConfig+0x2e6>
 8005224:	2304      	movs	r3, #4
 8005226:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800522a:	e07a      	b.n	8005322 <UART_SetConfig+0x2e6>
 800522c:	2308      	movs	r3, #8
 800522e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005232:	e076      	b.n	8005322 <UART_SetConfig+0x2e6>
 8005234:	2310      	movs	r3, #16
 8005236:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800523a:	e072      	b.n	8005322 <UART_SetConfig+0x2e6>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a35      	ldr	r2, [pc, #212]	; (8005318 <UART_SetConfig+0x2dc>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d12a      	bne.n	800529c <UART_SetConfig+0x260>
 8005246:	4b30      	ldr	r3, [pc, #192]	; (8005308 <UART_SetConfig+0x2cc>)
 8005248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800524c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005250:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005254:	d01a      	beq.n	800528c <UART_SetConfig+0x250>
 8005256:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800525a:	d81b      	bhi.n	8005294 <UART_SetConfig+0x258>
 800525c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005260:	d00c      	beq.n	800527c <UART_SetConfig+0x240>
 8005262:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005266:	d815      	bhi.n	8005294 <UART_SetConfig+0x258>
 8005268:	2b00      	cmp	r3, #0
 800526a:	d003      	beq.n	8005274 <UART_SetConfig+0x238>
 800526c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005270:	d008      	beq.n	8005284 <UART_SetConfig+0x248>
 8005272:	e00f      	b.n	8005294 <UART_SetConfig+0x258>
 8005274:	2300      	movs	r3, #0
 8005276:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800527a:	e052      	b.n	8005322 <UART_SetConfig+0x2e6>
 800527c:	2302      	movs	r3, #2
 800527e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005282:	e04e      	b.n	8005322 <UART_SetConfig+0x2e6>
 8005284:	2304      	movs	r3, #4
 8005286:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800528a:	e04a      	b.n	8005322 <UART_SetConfig+0x2e6>
 800528c:	2308      	movs	r3, #8
 800528e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005292:	e046      	b.n	8005322 <UART_SetConfig+0x2e6>
 8005294:	2310      	movs	r3, #16
 8005296:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800529a:	e042      	b.n	8005322 <UART_SetConfig+0x2e6>
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a17      	ldr	r2, [pc, #92]	; (8005300 <UART_SetConfig+0x2c4>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d13a      	bne.n	800531c <UART_SetConfig+0x2e0>
 80052a6:	4b18      	ldr	r3, [pc, #96]	; (8005308 <UART_SetConfig+0x2cc>)
 80052a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80052b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80052b4:	d01a      	beq.n	80052ec <UART_SetConfig+0x2b0>
 80052b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80052ba:	d81b      	bhi.n	80052f4 <UART_SetConfig+0x2b8>
 80052bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052c0:	d00c      	beq.n	80052dc <UART_SetConfig+0x2a0>
 80052c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052c6:	d815      	bhi.n	80052f4 <UART_SetConfig+0x2b8>
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d003      	beq.n	80052d4 <UART_SetConfig+0x298>
 80052cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052d0:	d008      	beq.n	80052e4 <UART_SetConfig+0x2a8>
 80052d2:	e00f      	b.n	80052f4 <UART_SetConfig+0x2b8>
 80052d4:	2300      	movs	r3, #0
 80052d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052da:	e022      	b.n	8005322 <UART_SetConfig+0x2e6>
 80052dc:	2302      	movs	r3, #2
 80052de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052e2:	e01e      	b.n	8005322 <UART_SetConfig+0x2e6>
 80052e4:	2304      	movs	r3, #4
 80052e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052ea:	e01a      	b.n	8005322 <UART_SetConfig+0x2e6>
 80052ec:	2308      	movs	r3, #8
 80052ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052f2:	e016      	b.n	8005322 <UART_SetConfig+0x2e6>
 80052f4:	2310      	movs	r3, #16
 80052f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052fa:	e012      	b.n	8005322 <UART_SetConfig+0x2e6>
 80052fc:	efff69f3 	.word	0xefff69f3
 8005300:	40008000 	.word	0x40008000
 8005304:	40013800 	.word	0x40013800
 8005308:	40021000 	.word	0x40021000
 800530c:	40004400 	.word	0x40004400
 8005310:	40004800 	.word	0x40004800
 8005314:	40004c00 	.word	0x40004c00
 8005318:	40005000 	.word	0x40005000
 800531c:	2310      	movs	r3, #16
 800531e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a9f      	ldr	r2, [pc, #636]	; (80055a4 <UART_SetConfig+0x568>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d17a      	bne.n	8005422 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800532c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005330:	2b08      	cmp	r3, #8
 8005332:	d824      	bhi.n	800537e <UART_SetConfig+0x342>
 8005334:	a201      	add	r2, pc, #4	; (adr r2, 800533c <UART_SetConfig+0x300>)
 8005336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800533a:	bf00      	nop
 800533c:	08005361 	.word	0x08005361
 8005340:	0800537f 	.word	0x0800537f
 8005344:	08005369 	.word	0x08005369
 8005348:	0800537f 	.word	0x0800537f
 800534c:	0800536f 	.word	0x0800536f
 8005350:	0800537f 	.word	0x0800537f
 8005354:	0800537f 	.word	0x0800537f
 8005358:	0800537f 	.word	0x0800537f
 800535c:	08005377 	.word	0x08005377
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005360:	f7fd fd2a 	bl	8002db8 <HAL_RCC_GetPCLK1Freq>
 8005364:	61f8      	str	r0, [r7, #28]
        break;
 8005366:	e010      	b.n	800538a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005368:	4b8f      	ldr	r3, [pc, #572]	; (80055a8 <UART_SetConfig+0x56c>)
 800536a:	61fb      	str	r3, [r7, #28]
        break;
 800536c:	e00d      	b.n	800538a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800536e:	f7fd fc8b 	bl	8002c88 <HAL_RCC_GetSysClockFreq>
 8005372:	61f8      	str	r0, [r7, #28]
        break;
 8005374:	e009      	b.n	800538a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005376:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800537a:	61fb      	str	r3, [r7, #28]
        break;
 800537c:	e005      	b.n	800538a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800537e:	2300      	movs	r3, #0
 8005380:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005388:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	2b00      	cmp	r3, #0
 800538e:	f000 80fb 	beq.w	8005588 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	685a      	ldr	r2, [r3, #4]
 8005396:	4613      	mov	r3, r2
 8005398:	005b      	lsls	r3, r3, #1
 800539a:	4413      	add	r3, r2
 800539c:	69fa      	ldr	r2, [r7, #28]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d305      	bcc.n	80053ae <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80053a8:	69fa      	ldr	r2, [r7, #28]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d903      	bls.n	80053b6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80053b4:	e0e8      	b.n	8005588 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	2200      	movs	r2, #0
 80053ba:	461c      	mov	r4, r3
 80053bc:	4615      	mov	r5, r2
 80053be:	f04f 0200 	mov.w	r2, #0
 80053c2:	f04f 0300 	mov.w	r3, #0
 80053c6:	022b      	lsls	r3, r5, #8
 80053c8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80053cc:	0222      	lsls	r2, r4, #8
 80053ce:	68f9      	ldr	r1, [r7, #12]
 80053d0:	6849      	ldr	r1, [r1, #4]
 80053d2:	0849      	lsrs	r1, r1, #1
 80053d4:	2000      	movs	r0, #0
 80053d6:	4688      	mov	r8, r1
 80053d8:	4681      	mov	r9, r0
 80053da:	eb12 0a08 	adds.w	sl, r2, r8
 80053de:	eb43 0b09 	adc.w	fp, r3, r9
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	603b      	str	r3, [r7, #0]
 80053ea:	607a      	str	r2, [r7, #4]
 80053ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053f0:	4650      	mov	r0, sl
 80053f2:	4659      	mov	r1, fp
 80053f4:	f7fa fee8 	bl	80001c8 <__aeabi_uldivmod>
 80053f8:	4602      	mov	r2, r0
 80053fa:	460b      	mov	r3, r1
 80053fc:	4613      	mov	r3, r2
 80053fe:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005400:	69bb      	ldr	r3, [r7, #24]
 8005402:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005406:	d308      	bcc.n	800541a <UART_SetConfig+0x3de>
 8005408:	69bb      	ldr	r3, [r7, #24]
 800540a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800540e:	d204      	bcs.n	800541a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	69ba      	ldr	r2, [r7, #24]
 8005416:	60da      	str	r2, [r3, #12]
 8005418:	e0b6      	b.n	8005588 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005420:	e0b2      	b.n	8005588 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	69db      	ldr	r3, [r3, #28]
 8005426:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800542a:	d15e      	bne.n	80054ea <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800542c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005430:	2b08      	cmp	r3, #8
 8005432:	d828      	bhi.n	8005486 <UART_SetConfig+0x44a>
 8005434:	a201      	add	r2, pc, #4	; (adr r2, 800543c <UART_SetConfig+0x400>)
 8005436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800543a:	bf00      	nop
 800543c:	08005461 	.word	0x08005461
 8005440:	08005469 	.word	0x08005469
 8005444:	08005471 	.word	0x08005471
 8005448:	08005487 	.word	0x08005487
 800544c:	08005477 	.word	0x08005477
 8005450:	08005487 	.word	0x08005487
 8005454:	08005487 	.word	0x08005487
 8005458:	08005487 	.word	0x08005487
 800545c:	0800547f 	.word	0x0800547f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005460:	f7fd fcaa 	bl	8002db8 <HAL_RCC_GetPCLK1Freq>
 8005464:	61f8      	str	r0, [r7, #28]
        break;
 8005466:	e014      	b.n	8005492 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005468:	f7fd fcbc 	bl	8002de4 <HAL_RCC_GetPCLK2Freq>
 800546c:	61f8      	str	r0, [r7, #28]
        break;
 800546e:	e010      	b.n	8005492 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005470:	4b4d      	ldr	r3, [pc, #308]	; (80055a8 <UART_SetConfig+0x56c>)
 8005472:	61fb      	str	r3, [r7, #28]
        break;
 8005474:	e00d      	b.n	8005492 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005476:	f7fd fc07 	bl	8002c88 <HAL_RCC_GetSysClockFreq>
 800547a:	61f8      	str	r0, [r7, #28]
        break;
 800547c:	e009      	b.n	8005492 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800547e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005482:	61fb      	str	r3, [r7, #28]
        break;
 8005484:	e005      	b.n	8005492 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005486:	2300      	movs	r3, #0
 8005488:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005490:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d077      	beq.n	8005588 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005498:	69fb      	ldr	r3, [r7, #28]
 800549a:	005a      	lsls	r2, r3, #1
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	085b      	lsrs	r3, r3, #1
 80054a2:	441a      	add	r2, r3
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054ac:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	2b0f      	cmp	r3, #15
 80054b2:	d916      	bls.n	80054e2 <UART_SetConfig+0x4a6>
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054ba:	d212      	bcs.n	80054e2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	b29b      	uxth	r3, r3
 80054c0:	f023 030f 	bic.w	r3, r3, #15
 80054c4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	085b      	lsrs	r3, r3, #1
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	f003 0307 	and.w	r3, r3, #7
 80054d0:	b29a      	uxth	r2, r3
 80054d2:	8afb      	ldrh	r3, [r7, #22]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	8afa      	ldrh	r2, [r7, #22]
 80054de:	60da      	str	r2, [r3, #12]
 80054e0:	e052      	b.n	8005588 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80054e8:	e04e      	b.n	8005588 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80054ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80054ee:	2b08      	cmp	r3, #8
 80054f0:	d827      	bhi.n	8005542 <UART_SetConfig+0x506>
 80054f2:	a201      	add	r2, pc, #4	; (adr r2, 80054f8 <UART_SetConfig+0x4bc>)
 80054f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054f8:	0800551d 	.word	0x0800551d
 80054fc:	08005525 	.word	0x08005525
 8005500:	0800552d 	.word	0x0800552d
 8005504:	08005543 	.word	0x08005543
 8005508:	08005533 	.word	0x08005533
 800550c:	08005543 	.word	0x08005543
 8005510:	08005543 	.word	0x08005543
 8005514:	08005543 	.word	0x08005543
 8005518:	0800553b 	.word	0x0800553b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800551c:	f7fd fc4c 	bl	8002db8 <HAL_RCC_GetPCLK1Freq>
 8005520:	61f8      	str	r0, [r7, #28]
        break;
 8005522:	e014      	b.n	800554e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005524:	f7fd fc5e 	bl	8002de4 <HAL_RCC_GetPCLK2Freq>
 8005528:	61f8      	str	r0, [r7, #28]
        break;
 800552a:	e010      	b.n	800554e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800552c:	4b1e      	ldr	r3, [pc, #120]	; (80055a8 <UART_SetConfig+0x56c>)
 800552e:	61fb      	str	r3, [r7, #28]
        break;
 8005530:	e00d      	b.n	800554e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005532:	f7fd fba9 	bl	8002c88 <HAL_RCC_GetSysClockFreq>
 8005536:	61f8      	str	r0, [r7, #28]
        break;
 8005538:	e009      	b.n	800554e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800553a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800553e:	61fb      	str	r3, [r7, #28]
        break;
 8005540:	e005      	b.n	800554e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005542:	2300      	movs	r3, #0
 8005544:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800554c:	bf00      	nop
    }

    if (pclk != 0U)
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d019      	beq.n	8005588 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	085a      	lsrs	r2, r3, #1
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	441a      	add	r2, r3
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	fbb2 f3f3 	udiv	r3, r2, r3
 8005566:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	2b0f      	cmp	r3, #15
 800556c:	d909      	bls.n	8005582 <UART_SetConfig+0x546>
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005574:	d205      	bcs.n	8005582 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005576:	69bb      	ldr	r3, [r7, #24]
 8005578:	b29a      	uxth	r2, r3
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	60da      	str	r2, [r3, #12]
 8005580:	e002      	b.n	8005588 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2200      	movs	r2, #0
 800558c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2200      	movs	r2, #0
 8005592:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005594:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005598:	4618      	mov	r0, r3
 800559a:	3728      	adds	r7, #40	; 0x28
 800559c:	46bd      	mov	sp, r7
 800559e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055a2:	bf00      	nop
 80055a4:	40008000 	.word	0x40008000
 80055a8:	00f42400 	.word	0x00f42400

080055ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b8:	f003 0301 	and.w	r3, r3, #1
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d00a      	beq.n	80055d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	430a      	orrs	r2, r1
 80055d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055da:	f003 0302 	and.w	r3, r3, #2
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d00a      	beq.n	80055f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	430a      	orrs	r2, r1
 80055f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fc:	f003 0304 	and.w	r3, r3, #4
 8005600:	2b00      	cmp	r3, #0
 8005602:	d00a      	beq.n	800561a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	430a      	orrs	r2, r1
 8005618:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561e:	f003 0308 	and.w	r3, r3, #8
 8005622:	2b00      	cmp	r3, #0
 8005624:	d00a      	beq.n	800563c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	430a      	orrs	r2, r1
 800563a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005640:	f003 0310 	and.w	r3, r3, #16
 8005644:	2b00      	cmp	r3, #0
 8005646:	d00a      	beq.n	800565e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	430a      	orrs	r2, r1
 800565c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005662:	f003 0320 	and.w	r3, r3, #32
 8005666:	2b00      	cmp	r3, #0
 8005668:	d00a      	beq.n	8005680 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	430a      	orrs	r2, r1
 800567e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005688:	2b00      	cmp	r3, #0
 800568a:	d01a      	beq.n	80056c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	430a      	orrs	r2, r1
 80056a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056aa:	d10a      	bne.n	80056c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	430a      	orrs	r2, r1
 80056c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d00a      	beq.n	80056e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	430a      	orrs	r2, r1
 80056e2:	605a      	str	r2, [r3, #4]
  }
}
 80056e4:	bf00      	nop
 80056e6:	370c      	adds	r7, #12
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b086      	sub	sp, #24
 80056f4:	af02      	add	r7, sp, #8
 80056f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005700:	f7fb fb9c 	bl	8000e3c <HAL_GetTick>
 8005704:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 0308 	and.w	r3, r3, #8
 8005710:	2b08      	cmp	r3, #8
 8005712:	d10e      	bne.n	8005732 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005714:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005718:	9300      	str	r3, [sp, #0]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2200      	movs	r2, #0
 800571e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 f82d 	bl	8005782 <UART_WaitOnFlagUntilTimeout>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d001      	beq.n	8005732 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800572e:	2303      	movs	r3, #3
 8005730:	e023      	b.n	800577a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f003 0304 	and.w	r3, r3, #4
 800573c:	2b04      	cmp	r3, #4
 800573e:	d10e      	bne.n	800575e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005740:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005744:	9300      	str	r3, [sp, #0]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2200      	movs	r2, #0
 800574a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 f817 	bl	8005782 <UART_WaitOnFlagUntilTimeout>
 8005754:	4603      	mov	r3, r0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d001      	beq.n	800575e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800575a:	2303      	movs	r3, #3
 800575c:	e00d      	b.n	800577a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2220      	movs	r2, #32
 8005762:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2220      	movs	r2, #32
 8005768:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005778:	2300      	movs	r3, #0
}
 800577a:	4618      	mov	r0, r3
 800577c:	3710      	adds	r7, #16
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}

08005782 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005782:	b580      	push	{r7, lr}
 8005784:	b09c      	sub	sp, #112	; 0x70
 8005786:	af00      	add	r7, sp, #0
 8005788:	60f8      	str	r0, [r7, #12]
 800578a:	60b9      	str	r1, [r7, #8]
 800578c:	603b      	str	r3, [r7, #0]
 800578e:	4613      	mov	r3, r2
 8005790:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005792:	e0a5      	b.n	80058e0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005794:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800579a:	f000 80a1 	beq.w	80058e0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800579e:	f7fb fb4d 	bl	8000e3c <HAL_GetTick>
 80057a2:	4602      	mov	r2, r0
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	1ad3      	subs	r3, r2, r3
 80057a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d302      	bcc.n	80057b4 <UART_WaitOnFlagUntilTimeout+0x32>
 80057ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d13e      	bne.n	8005832 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057bc:	e853 3f00 	ldrex	r3, [r3]
 80057c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80057c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80057c8:	667b      	str	r3, [r7, #100]	; 0x64
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	461a      	mov	r2, r3
 80057d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057d4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80057d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80057da:	e841 2300 	strex	r3, r2, [r1]
 80057de:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80057e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d1e6      	bne.n	80057b4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	3308      	adds	r3, #8
 80057ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057f0:	e853 3f00 	ldrex	r3, [r3]
 80057f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80057f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057f8:	f023 0301 	bic.w	r3, r3, #1
 80057fc:	663b      	str	r3, [r7, #96]	; 0x60
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	3308      	adds	r3, #8
 8005804:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005806:	64ba      	str	r2, [r7, #72]	; 0x48
 8005808:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800580c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800580e:	e841 2300 	strex	r3, r2, [r1]
 8005812:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005814:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005816:	2b00      	cmp	r3, #0
 8005818:	d1e5      	bne.n	80057e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2220      	movs	r2, #32
 800581e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2220      	movs	r2, #32
 8005824:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2200      	movs	r2, #0
 800582a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	e067      	b.n	8005902 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 0304 	and.w	r3, r3, #4
 800583c:	2b00      	cmp	r3, #0
 800583e:	d04f      	beq.n	80058e0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	69db      	ldr	r3, [r3, #28]
 8005846:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800584a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800584e:	d147      	bne.n	80058e0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005858:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005862:	e853 3f00 	ldrex	r3, [r3]
 8005866:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800586e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	461a      	mov	r2, r3
 8005876:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005878:	637b      	str	r3, [r7, #52]	; 0x34
 800587a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800587c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800587e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005880:	e841 2300 	strex	r3, r2, [r1]
 8005884:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005888:	2b00      	cmp	r3, #0
 800588a:	d1e6      	bne.n	800585a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	3308      	adds	r3, #8
 8005892:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	e853 3f00 	ldrex	r3, [r3]
 800589a:	613b      	str	r3, [r7, #16]
   return(result);
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	f023 0301 	bic.w	r3, r3, #1
 80058a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	3308      	adds	r3, #8
 80058aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80058ac:	623a      	str	r2, [r7, #32]
 80058ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b0:	69f9      	ldr	r1, [r7, #28]
 80058b2:	6a3a      	ldr	r2, [r7, #32]
 80058b4:	e841 2300 	strex	r3, r2, [r1]
 80058b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80058ba:	69bb      	ldr	r3, [r7, #24]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d1e5      	bne.n	800588c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2220      	movs	r2, #32
 80058c4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2220      	movs	r2, #32
 80058ca:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2220      	movs	r2, #32
 80058d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80058dc:	2303      	movs	r3, #3
 80058de:	e010      	b.n	8005902 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	69da      	ldr	r2, [r3, #28]
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	4013      	ands	r3, r2
 80058ea:	68ba      	ldr	r2, [r7, #8]
 80058ec:	429a      	cmp	r2, r3
 80058ee:	bf0c      	ite	eq
 80058f0:	2301      	moveq	r3, #1
 80058f2:	2300      	movne	r3, #0
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	461a      	mov	r2, r3
 80058f8:	79fb      	ldrb	r3, [r7, #7]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	f43f af4a 	beq.w	8005794 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3770      	adds	r7, #112	; 0x70
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
	...

0800590c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800590c:	b480      	push	{r7}
 800590e:	b097      	sub	sp, #92	; 0x5c
 8005910:	af00      	add	r7, sp, #0
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	4613      	mov	r3, r2
 8005918:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	68ba      	ldr	r2, [r7, #8]
 800591e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	88fa      	ldrh	r2, [r7, #6]
 8005924:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	88fa      	ldrh	r2, [r7, #6]
 800592c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2200      	movs	r2, #0
 8005934:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800593e:	d10e      	bne.n	800595e <UART_Start_Receive_IT+0x52>
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	691b      	ldr	r3, [r3, #16]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d105      	bne.n	8005954 <UART_Start_Receive_IT+0x48>
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800594e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005952:	e02d      	b.n	80059b0 <UART_Start_Receive_IT+0xa4>
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	22ff      	movs	r2, #255	; 0xff
 8005958:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800595c:	e028      	b.n	80059b0 <UART_Start_Receive_IT+0xa4>
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d10d      	bne.n	8005982 <UART_Start_Receive_IT+0x76>
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	691b      	ldr	r3, [r3, #16]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d104      	bne.n	8005978 <UART_Start_Receive_IT+0x6c>
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	22ff      	movs	r2, #255	; 0xff
 8005972:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005976:	e01b      	b.n	80059b0 <UART_Start_Receive_IT+0xa4>
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	227f      	movs	r2, #127	; 0x7f
 800597c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005980:	e016      	b.n	80059b0 <UART_Start_Receive_IT+0xa4>
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800598a:	d10d      	bne.n	80059a8 <UART_Start_Receive_IT+0x9c>
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	691b      	ldr	r3, [r3, #16]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d104      	bne.n	800599e <UART_Start_Receive_IT+0x92>
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	227f      	movs	r2, #127	; 0x7f
 8005998:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800599c:	e008      	b.n	80059b0 <UART_Start_Receive_IT+0xa4>
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	223f      	movs	r2, #63	; 0x3f
 80059a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80059a6:	e003      	b.n	80059b0 <UART_Start_Receive_IT+0xa4>
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2222      	movs	r2, #34	; 0x22
 80059bc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	3308      	adds	r3, #8
 80059c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059c8:	e853 3f00 	ldrex	r3, [r3]
 80059cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80059ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d0:	f043 0301 	orr.w	r3, r3, #1
 80059d4:	657b      	str	r3, [r7, #84]	; 0x54
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	3308      	adds	r3, #8
 80059dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80059de:	64ba      	str	r2, [r7, #72]	; 0x48
 80059e0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80059e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059e6:	e841 2300 	strex	r3, r2, [r1]
 80059ea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80059ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d1e5      	bne.n	80059be <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059fa:	d107      	bne.n	8005a0c <UART_Start_Receive_IT+0x100>
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d103      	bne.n	8005a0c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	4a24      	ldr	r2, [pc, #144]	; (8005a98 <UART_Start_Receive_IT+0x18c>)
 8005a08:	665a      	str	r2, [r3, #100]	; 0x64
 8005a0a:	e002      	b.n	8005a12 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	4a23      	ldr	r2, [pc, #140]	; (8005a9c <UART_Start_Receive_IT+0x190>)
 8005a10:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2200      	movs	r2, #0
 8005a16:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d019      	beq.n	8005a56 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2a:	e853 3f00 	ldrex	r3, [r3]
 8005a2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a32:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005a36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a40:	637b      	str	r3, [r7, #52]	; 0x34
 8005a42:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a48:	e841 2300 	strex	r3, r2, [r1]
 8005a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d1e6      	bne.n	8005a22 <UART_Start_Receive_IT+0x116>
 8005a54:	e018      	b.n	8005a88 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	e853 3f00 	ldrex	r3, [r3]
 8005a62:	613b      	str	r3, [r7, #16]
   return(result);
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	f043 0320 	orr.w	r3, r3, #32
 8005a6a:	653b      	str	r3, [r7, #80]	; 0x50
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	461a      	mov	r2, r3
 8005a72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a74:	623b      	str	r3, [r7, #32]
 8005a76:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a78:	69f9      	ldr	r1, [r7, #28]
 8005a7a:	6a3a      	ldr	r2, [r7, #32]
 8005a7c:	e841 2300 	strex	r3, r2, [r1]
 8005a80:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a82:	69bb      	ldr	r3, [r7, #24]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d1e6      	bne.n	8005a56 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8005a88:	2300      	movs	r3, #0
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	375c      	adds	r7, #92	; 0x5c
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	08005d47 	.word	0x08005d47
 8005a9c:	08005be7 	.word	0x08005be7

08005aa0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b095      	sub	sp, #84	; 0x54
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ab0:	e853 3f00 	ldrex	r3, [r3]
 8005ab4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005abc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ac6:	643b      	str	r3, [r7, #64]	; 0x40
 8005ac8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005acc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ace:	e841 2300 	strex	r3, r2, [r1]
 8005ad2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d1e6      	bne.n	8005aa8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	3308      	adds	r3, #8
 8005ae0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae2:	6a3b      	ldr	r3, [r7, #32]
 8005ae4:	e853 3f00 	ldrex	r3, [r3]
 8005ae8:	61fb      	str	r3, [r7, #28]
   return(result);
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	f023 0301 	bic.w	r3, r3, #1
 8005af0:	64bb      	str	r3, [r7, #72]	; 0x48
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	3308      	adds	r3, #8
 8005af8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005afa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005afc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005afe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b02:	e841 2300 	strex	r3, r2, [r1]
 8005b06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d1e5      	bne.n	8005ada <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d118      	bne.n	8005b48 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	e853 3f00 	ldrex	r3, [r3]
 8005b22:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	f023 0310 	bic.w	r3, r3, #16
 8005b2a:	647b      	str	r3, [r7, #68]	; 0x44
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	461a      	mov	r2, r3
 8005b32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b34:	61bb      	str	r3, [r7, #24]
 8005b36:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b38:	6979      	ldr	r1, [r7, #20]
 8005b3a:	69ba      	ldr	r2, [r7, #24]
 8005b3c:	e841 2300 	strex	r3, r2, [r1]
 8005b40:	613b      	str	r3, [r7, #16]
   return(result);
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d1e6      	bne.n	8005b16 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2220      	movs	r2, #32
 8005b4c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005b5a:	bf00      	nop
 8005b5c:	3754      	adds	r7, #84	; 0x54
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr

08005b66 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b66:	b580      	push	{r7, lr}
 8005b68:	b084      	sub	sp, #16
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b72:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2200      	movs	r2, #0
 8005b78:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b84:	68f8      	ldr	r0, [r7, #12]
 8005b86:	f7ff fa43 	bl	8005010 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b8a:	bf00      	nop
 8005b8c:	3710      	adds	r7, #16
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}

08005b92 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b92:	b580      	push	{r7, lr}
 8005b94:	b088      	sub	sp, #32
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	e853 3f00 	ldrex	r3, [r3]
 8005ba6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bae:	61fb      	str	r3, [r7, #28]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	69fb      	ldr	r3, [r7, #28]
 8005bb8:	61bb      	str	r3, [r7, #24]
 8005bba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bbc:	6979      	ldr	r1, [r7, #20]
 8005bbe:	69ba      	ldr	r2, [r7, #24]
 8005bc0:	e841 2300 	strex	r3, r2, [r1]
 8005bc4:	613b      	str	r3, [r7, #16]
   return(result);
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d1e6      	bne.n	8005b9a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2220      	movs	r2, #32
 8005bd0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f7ff fa0f 	bl	8004ffc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bde:	bf00      	nop
 8005be0:	3720      	adds	r7, #32
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}

08005be6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005be6:	b580      	push	{r7, lr}
 8005be8:	b096      	sub	sp, #88	; 0x58
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005bf4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005bfc:	2b22      	cmp	r3, #34	; 0x22
 8005bfe:	f040 8094 	bne.w	8005d2a <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005c08:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005c0c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005c10:	b2d9      	uxtb	r1, r3
 8005c12:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005c16:	b2da      	uxtb	r2, r3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c1c:	400a      	ands	r2, r1
 8005c1e:	b2d2      	uxtb	r2, r2
 8005c20:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c26:	1c5a      	adds	r2, r3, #1
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	3b01      	subs	r3, #1
 8005c36:	b29a      	uxth	r2, r3
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d179      	bne.n	8005d3e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c52:	e853 3f00 	ldrex	r3, [r3]
 8005c56:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c5a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c5e:	653b      	str	r3, [r7, #80]	; 0x50
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	461a      	mov	r2, r3
 8005c66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c68:	647b      	str	r3, [r7, #68]	; 0x44
 8005c6a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c6c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c70:	e841 2300 	strex	r3, r2, [r1]
 8005c74:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005c76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d1e6      	bne.n	8005c4a <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	3308      	adds	r3, #8
 8005c82:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c86:	e853 3f00 	ldrex	r3, [r3]
 8005c8a:	623b      	str	r3, [r7, #32]
   return(result);
 8005c8c:	6a3b      	ldr	r3, [r7, #32]
 8005c8e:	f023 0301 	bic.w	r3, r3, #1
 8005c92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	3308      	adds	r3, #8
 8005c9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c9c:	633a      	str	r2, [r7, #48]	; 0x30
 8005c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ca2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ca4:	e841 2300 	strex	r3, r2, [r1]
 8005ca8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d1e5      	bne.n	8005c7c <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2220      	movs	r2, #32
 8005cb4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d12e      	bne.n	8005d22 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	e853 3f00 	ldrex	r3, [r3]
 8005cd6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f023 0310 	bic.w	r3, r3, #16
 8005cde:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ce8:	61fb      	str	r3, [r7, #28]
 8005cea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cec:	69b9      	ldr	r1, [r7, #24]
 8005cee:	69fa      	ldr	r2, [r7, #28]
 8005cf0:	e841 2300 	strex	r3, r2, [r1]
 8005cf4:	617b      	str	r3, [r7, #20]
   return(result);
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d1e6      	bne.n	8005cca <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	69db      	ldr	r3, [r3, #28]
 8005d02:	f003 0310 	and.w	r3, r3, #16
 8005d06:	2b10      	cmp	r3, #16
 8005d08:	d103      	bne.n	8005d12 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	2210      	movs	r2, #16
 8005d10:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005d18:	4619      	mov	r1, r3
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f7ff f982 	bl	8005024 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005d20:	e00d      	b.n	8005d3e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f7fa fdd8 	bl	80008d8 <HAL_UART_RxCpltCallback>
}
 8005d28:	e009      	b.n	8005d3e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	8b1b      	ldrh	r3, [r3, #24]
 8005d30:	b29a      	uxth	r2, r3
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f042 0208 	orr.w	r2, r2, #8
 8005d3a:	b292      	uxth	r2, r2
 8005d3c:	831a      	strh	r2, [r3, #24]
}
 8005d3e:	bf00      	nop
 8005d40:	3758      	adds	r7, #88	; 0x58
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}

08005d46 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005d46:	b580      	push	{r7, lr}
 8005d48:	b096      	sub	sp, #88	; 0x58
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005d54:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d5c:	2b22      	cmp	r3, #34	; 0x22
 8005d5e:	f040 8094 	bne.w	8005e8a <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005d68:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d70:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005d72:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005d76:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005d7a:	4013      	ands	r3, r2
 8005d7c:	b29a      	uxth	r2, r3
 8005d7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d80:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d86:	1c9a      	adds	r2, r3, #2
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	3b01      	subs	r3, #1
 8005d96:	b29a      	uxth	r2, r3
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d179      	bne.n	8005e9e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005db2:	e853 3f00 	ldrex	r3, [r3]
 8005db6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005dbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dc8:	643b      	str	r3, [r7, #64]	; 0x40
 8005dca:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dcc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005dce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005dd0:	e841 2300 	strex	r3, r2, [r1]
 8005dd4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d1e6      	bne.n	8005daa <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	3308      	adds	r3, #8
 8005de2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de4:	6a3b      	ldr	r3, [r7, #32]
 8005de6:	e853 3f00 	ldrex	r3, [r3]
 8005dea:	61fb      	str	r3, [r7, #28]
   return(result);
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	f023 0301 	bic.w	r3, r3, #1
 8005df2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	3308      	adds	r3, #8
 8005dfa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005dfc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005dfe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e04:	e841 2300 	strex	r3, r2, [r1]
 8005e08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d1e5      	bne.n	8005ddc <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2220      	movs	r2, #32
 8005e14:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d12e      	bne.n	8005e82 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	e853 3f00 	ldrex	r3, [r3]
 8005e36:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	f023 0310 	bic.w	r3, r3, #16
 8005e3e:	647b      	str	r3, [r7, #68]	; 0x44
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	461a      	mov	r2, r3
 8005e46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e48:	61bb      	str	r3, [r7, #24]
 8005e4a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e4c:	6979      	ldr	r1, [r7, #20]
 8005e4e:	69ba      	ldr	r2, [r7, #24]
 8005e50:	e841 2300 	strex	r3, r2, [r1]
 8005e54:	613b      	str	r3, [r7, #16]
   return(result);
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d1e6      	bne.n	8005e2a <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	69db      	ldr	r3, [r3, #28]
 8005e62:	f003 0310 	and.w	r3, r3, #16
 8005e66:	2b10      	cmp	r3, #16
 8005e68:	d103      	bne.n	8005e72 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	2210      	movs	r2, #16
 8005e70:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005e78:	4619      	mov	r1, r3
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f7ff f8d2 	bl	8005024 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005e80:	e00d      	b.n	8005e9e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f7fa fd28 	bl	80008d8 <HAL_UART_RxCpltCallback>
}
 8005e88:	e009      	b.n	8005e9e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	8b1b      	ldrh	r3, [r3, #24]
 8005e90:	b29a      	uxth	r2, r3
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f042 0208 	orr.w	r2, r2, #8
 8005e9a:	b292      	uxth	r2, r2
 8005e9c:	831a      	strh	r2, [r3, #24]
}
 8005e9e:	bf00      	nop
 8005ea0:	3758      	adds	r7, #88	; 0x58
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}

08005ea6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005ea6:	b480      	push	{r7}
 8005ea8:	b083      	sub	sp, #12
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005eae:	bf00      	nop
 8005eb0:	370c      	adds	r7, #12
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr

08005eba <memset>:
 8005eba:	4402      	add	r2, r0
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d100      	bne.n	8005ec4 <memset+0xa>
 8005ec2:	4770      	bx	lr
 8005ec4:	f803 1b01 	strb.w	r1, [r3], #1
 8005ec8:	e7f9      	b.n	8005ebe <memset+0x4>
	...

08005ecc <__libc_init_array>:
 8005ecc:	b570      	push	{r4, r5, r6, lr}
 8005ece:	4d0d      	ldr	r5, [pc, #52]	; (8005f04 <__libc_init_array+0x38>)
 8005ed0:	4c0d      	ldr	r4, [pc, #52]	; (8005f08 <__libc_init_array+0x3c>)
 8005ed2:	1b64      	subs	r4, r4, r5
 8005ed4:	10a4      	asrs	r4, r4, #2
 8005ed6:	2600      	movs	r6, #0
 8005ed8:	42a6      	cmp	r6, r4
 8005eda:	d109      	bne.n	8005ef0 <__libc_init_array+0x24>
 8005edc:	4d0b      	ldr	r5, [pc, #44]	; (8005f0c <__libc_init_array+0x40>)
 8005ede:	4c0c      	ldr	r4, [pc, #48]	; (8005f10 <__libc_init_array+0x44>)
 8005ee0:	f000 f818 	bl	8005f14 <_init>
 8005ee4:	1b64      	subs	r4, r4, r5
 8005ee6:	10a4      	asrs	r4, r4, #2
 8005ee8:	2600      	movs	r6, #0
 8005eea:	42a6      	cmp	r6, r4
 8005eec:	d105      	bne.n	8005efa <__libc_init_array+0x2e>
 8005eee:	bd70      	pop	{r4, r5, r6, pc}
 8005ef0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ef4:	4798      	blx	r3
 8005ef6:	3601      	adds	r6, #1
 8005ef8:	e7ee      	b.n	8005ed8 <__libc_init_array+0xc>
 8005efa:	f855 3b04 	ldr.w	r3, [r5], #4
 8005efe:	4798      	blx	r3
 8005f00:	3601      	adds	r6, #1
 8005f02:	e7f2      	b.n	8005eea <__libc_init_array+0x1e>
 8005f04:	08005f7c 	.word	0x08005f7c
 8005f08:	08005f7c 	.word	0x08005f7c
 8005f0c:	08005f7c 	.word	0x08005f7c
 8005f10:	08005f80 	.word	0x08005f80

08005f14 <_init>:
 8005f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f16:	bf00      	nop
 8005f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f1a:	bc08      	pop	{r3}
 8005f1c:	469e      	mov	lr, r3
 8005f1e:	4770      	bx	lr

08005f20 <_fini>:
 8005f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f22:	bf00      	nop
 8005f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f26:	bc08      	pop	{r3}
 8005f28:	469e      	mov	lr, r3
 8005f2a:	4770      	bx	lr
