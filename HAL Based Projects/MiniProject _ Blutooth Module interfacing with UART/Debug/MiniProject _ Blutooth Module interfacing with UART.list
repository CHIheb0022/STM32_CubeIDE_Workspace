
MiniProject _ Blutooth Module interfacing with UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006770  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080068f8  080068f8  000168f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006940  08006940  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006940  08006940  00016940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006948  08006948  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006948  08006948  00016948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800694c  0800694c  0001694c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006950  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  2000000c  0800695c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000174  0800695c  00020174  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014b09  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028a0  00000000  00000000  00034b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001308  00000000  00000000  00037428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ede  00000000  00000000  00038730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027ed1  00000000  00000000  0003960e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015b52  00000000  00000000  000614df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00101caf  00000000  00000000  00077031  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000520c  00000000  00000000  00178ce0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a8  00000000  00000000  0017deec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080068e0 	.word	0x080068e0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080068e0 	.word	0x080068e0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ca:	f000 fc60 	bl	8000d8e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ce:	f000 f853 	bl	8000578 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d2:	f000 f9bf 	bl	8000854 <MX_GPIO_Init>
  MX_ADC1_Init();
 80004d6:	f000 f8a1 	bl	800061c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80004da:	f000 f98b 	bl	80007f4 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80004de:	f000 f913 	bl	8000708 <MX_TIM2_Init>

  /* USER CODE BEGIN 2 */

  HAL_ADCEx_Calibration_Start(&hadc1,ADC_SINGLE_ENDED);// Calibrate The ADC On Power-Up For Better Accuracy
 80004e2:	217f      	movs	r1, #127	; 0x7f
 80004e4:	481d      	ldr	r0, [pc, #116]	; (800055c <main+0x98>)
 80004e6:	f001 ff13 	bl	8002310 <HAL_ADCEx_Calibration_Start>
  HAL_UART_Receive_IT(&huart1, RX_BUFFER, Buffer_len); // START THE UART AT THE FIRST INTERRUPTION
 80004ea:	2201      	movs	r2, #1
 80004ec:	491c      	ldr	r1, [pc, #112]	; (8000560 <main+0x9c>)
 80004ee:	481d      	ldr	r0, [pc, #116]	; (8000564 <main+0xa0>)
 80004f0:	f004 ff32 	bl	8005358 <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // START THE TIMER2 IN THE PWM MODE
 80004f4:	2100      	movs	r1, #0
 80004f6:	481c      	ldr	r0, [pc, #112]	; (8000568 <main+0xa4>)
 80004f8:	f003 ff44 	bl	8004384 <HAL_TIM_PWM_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	// Start ADC Conversion
	HAL_ADC_Start(&hadc1);
 80004fc:	4817      	ldr	r0, [pc, #92]	; (800055c <main+0x98>)
 80004fe:	f001 f83f 	bl	8001580 <HAL_ADC_Start>
	// Poll ADC1 Perihperal & TimeOut = 1mSec
    HAL_ADC_PollForConversion(&hadc1, 5);
 8000502:	2105      	movs	r1, #5
 8000504:	4815      	ldr	r0, [pc, #84]	; (800055c <main+0x98>)
 8000506:	f001 f8f5 	bl	80016f4 <HAL_ADC_PollForConversion>
	// Read The ADC Conversion Result & Map It To PWM DutyCycle
    ADC_Value = HAL_ADC_GetValue(&hadc1);
 800050a:	4814      	ldr	r0, [pc, #80]	; (800055c <main+0x98>)
 800050c:	f001 f9ca 	bl	80018a4 <HAL_ADC_GetValue>
 8000510:	4603      	mov	r3, r0
 8000512:	b29a      	uxth	r2, r3
 8000514:	4b15      	ldr	r3, [pc, #84]	; (800056c <main+0xa8>)
 8000516:	801a      	strh	r2, [r3, #0]
    CC_value = MAP(ADC_Value,0,4096,0,65536);
 8000518:	4b14      	ldr	r3, [pc, #80]	; (800056c <main+0xa8>)
 800051a:	881b      	ldrh	r3, [r3, #0]
 800051c:	4618      	mov	r0, r3
 800051e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000522:	9300      	str	r3, [sp, #0]
 8000524:	2300      	movs	r3, #0
 8000526:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800052a:	2100      	movs	r1, #0
 800052c:	f000 fa58 	bl	80009e0 <MAP>
 8000530:	4603      	mov	r3, r0
 8000532:	4a0f      	ldr	r2, [pc, #60]	; (8000570 <main+0xac>)
 8000534:	6013      	str	r3, [r2, #0]
	TIM2->CCR1 = CC_value;
 8000536:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800053a:	4b0d      	ldr	r3, [pc, #52]	; (8000570 <main+0xac>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	6353      	str	r3, [r2, #52]	; 0x34
    duty_cycle = (CC_value / ARR_value)*100;
 8000540:	4b0b      	ldr	r3, [pc, #44]	; (8000570 <main+0xac>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	0c1b      	lsrs	r3, r3, #16
 8000546:	2264      	movs	r2, #100	; 0x64
 8000548:	fb02 f303 	mul.w	r3, r2, r3
 800054c:	461a      	mov	r2, r3
 800054e:	4b09      	ldr	r3, [pc, #36]	; (8000574 <main+0xb0>)
 8000550:	601a      	str	r2, [r3, #0]
	HAL_Delay(5);
 8000552:	2005      	movs	r0, #5
 8000554:	f000 fc90 	bl	8000e78 <HAL_Delay>
	HAL_ADC_Start(&hadc1);
 8000558:	e7d0      	b.n	80004fc <main+0x38>
 800055a:	bf00      	nop
 800055c:	20000028 	.word	0x20000028
 8000560:	2000015c 	.word	0x2000015c
 8000564:	200000d8 	.word	0x200000d8
 8000568:	2000008c 	.word	0x2000008c
 800056c:	20000164 	.word	0x20000164
 8000570:	20000168 	.word	0x20000168
 8000574:	2000016c 	.word	0x2000016c

08000578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b096      	sub	sp, #88	; 0x58
 800057c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057e:	f107 0314 	add.w	r3, r7, #20
 8000582:	2244      	movs	r2, #68	; 0x44
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f006 f97d 	bl	8006886 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058c:	463b      	mov	r3, r7
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	60da      	str	r2, [r3, #12]
 8000598:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800059a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800059e:	f002 fb27 	bl	8002bf0 <HAL_PWREx_ControlVoltageScaling>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005a8:	f000 fa36 	bl	8000a18 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005ac:	2310      	movs	r3, #16
 80005ae:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005b0:	2301      	movs	r3, #1
 80005b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005b4:	2300      	movs	r3, #0
 80005b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005b8:	2360      	movs	r3, #96	; 0x60
 80005ba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005bc:	2302      	movs	r3, #2
 80005be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005c0:	2301      	movs	r3, #1
 80005c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005c4:	2301      	movs	r3, #1
 80005c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 36;
 80005c8:	2324      	movs	r3, #36	; 0x24
 80005ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005cc:	2307      	movs	r3, #7
 80005ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005d0:	2302      	movs	r3, #2
 80005d2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005d4:	2302      	movs	r3, #2
 80005d6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d8:	f107 0314 	add.w	r3, r7, #20
 80005dc:	4618      	mov	r0, r3
 80005de:	f002 fb5d 	bl	8002c9c <HAL_RCC_OscConfig>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0x74>
  {
    Error_Handler();
 80005e8:	f000 fa16 	bl	8000a18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ec:	230f      	movs	r3, #15
 80005ee:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f0:	2303      	movs	r3, #3
 80005f2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005f8:	2300      	movs	r3, #0
 80005fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000600:	463b      	mov	r3, r7
 8000602:	2104      	movs	r1, #4
 8000604:	4618      	mov	r0, r3
 8000606:	f002 ff25 	bl	8003454 <HAL_RCC_ClockConfig>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000610:	f000 fa02 	bl	8000a18 <Error_Handler>
  }
}
 8000614:	bf00      	nop
 8000616:	3758      	adds	r7, #88	; 0x58
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}

0800061c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b08a      	sub	sp, #40	; 0x28
 8000620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000622:	f107 031c 	add.w	r3, r7, #28
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800062e:	1d3b      	adds	r3, r7, #4
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]
 800063c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800063e:	4b2f      	ldr	r3, [pc, #188]	; (80006fc <MX_ADC1_Init+0xe0>)
 8000640:	4a2f      	ldr	r2, [pc, #188]	; (8000700 <MX_ADC1_Init+0xe4>)
 8000642:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000644:	4b2d      	ldr	r3, [pc, #180]	; (80006fc <MX_ADC1_Init+0xe0>)
 8000646:	2200      	movs	r2, #0
 8000648:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800064a:	4b2c      	ldr	r3, [pc, #176]	; (80006fc <MX_ADC1_Init+0xe0>)
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000650:	4b2a      	ldr	r3, [pc, #168]	; (80006fc <MX_ADC1_Init+0xe0>)
 8000652:	2200      	movs	r2, #0
 8000654:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000656:	4b29      	ldr	r3, [pc, #164]	; (80006fc <MX_ADC1_Init+0xe0>)
 8000658:	2200      	movs	r2, #0
 800065a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800065c:	4b27      	ldr	r3, [pc, #156]	; (80006fc <MX_ADC1_Init+0xe0>)
 800065e:	2204      	movs	r2, #4
 8000660:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000662:	4b26      	ldr	r3, [pc, #152]	; (80006fc <MX_ADC1_Init+0xe0>)
 8000664:	2200      	movs	r2, #0
 8000666:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000668:	4b24      	ldr	r3, [pc, #144]	; (80006fc <MX_ADC1_Init+0xe0>)
 800066a:	2200      	movs	r2, #0
 800066c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800066e:	4b23      	ldr	r3, [pc, #140]	; (80006fc <MX_ADC1_Init+0xe0>)
 8000670:	2201      	movs	r2, #1
 8000672:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000674:	4b21      	ldr	r3, [pc, #132]	; (80006fc <MX_ADC1_Init+0xe0>)
 8000676:	2200      	movs	r2, #0
 8000678:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800067c:	4b1f      	ldr	r3, [pc, #124]	; (80006fc <MX_ADC1_Init+0xe0>)
 800067e:	2200      	movs	r2, #0
 8000680:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000682:	4b1e      	ldr	r3, [pc, #120]	; (80006fc <MX_ADC1_Init+0xe0>)
 8000684:	2200      	movs	r2, #0
 8000686:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000688:	4b1c      	ldr	r3, [pc, #112]	; (80006fc <MX_ADC1_Init+0xe0>)
 800068a:	2200      	movs	r2, #0
 800068c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000690:	4b1a      	ldr	r3, [pc, #104]	; (80006fc <MX_ADC1_Init+0xe0>)
 8000692:	2200      	movs	r2, #0
 8000694:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000696:	4b19      	ldr	r3, [pc, #100]	; (80006fc <MX_ADC1_Init+0xe0>)
 8000698:	2200      	movs	r2, #0
 800069a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800069e:	4817      	ldr	r0, [pc, #92]	; (80006fc <MX_ADC1_Init+0xe0>)
 80006a0:	f000 fe18 	bl	80012d4 <HAL_ADC_Init>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80006aa:	f000 f9b5 	bl	8000a18 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006ae:	2300      	movs	r3, #0
 80006b0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006b2:	f107 031c 	add.w	r3, r7, #28
 80006b6:	4619      	mov	r1, r3
 80006b8:	4810      	ldr	r0, [pc, #64]	; (80006fc <MX_ADC1_Init+0xe0>)
 80006ba:	f001 fe89 	bl	80023d0 <HAL_ADCEx_MultiModeConfigChannel>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80006c4:	f000 f9a8 	bl	8000a18 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006c8:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <MX_ADC1_Init+0xe8>)
 80006ca:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006cc:	2306      	movs	r3, #6
 80006ce:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006d0:	2300      	movs	r3, #0
 80006d2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006d4:	237f      	movs	r3, #127	; 0x7f
 80006d6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006d8:	2304      	movs	r3, #4
 80006da:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006dc:	2300      	movs	r3, #0
 80006de:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e0:	1d3b      	adds	r3, r7, #4
 80006e2:	4619      	mov	r1, r3
 80006e4:	4805      	ldr	r0, [pc, #20]	; (80006fc <MX_ADC1_Init+0xe0>)
 80006e6:	f001 f8eb 	bl	80018c0 <HAL_ADC_ConfigChannel>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80006f0:	f000 f992 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006f4:	bf00      	nop
 80006f6:	3728      	adds	r7, #40	; 0x28
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	20000028 	.word	0x20000028
 8000700:	50040000 	.word	0x50040000
 8000704:	04300002 	.word	0x04300002

08000708 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b08e      	sub	sp, #56	; 0x38
 800070c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800070e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]
 800071a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800071c:	f107 031c 	add.w	r3, r7, #28
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000728:	463b      	mov	r3, r7
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
 8000734:	611a      	str	r2, [r3, #16]
 8000736:	615a      	str	r2, [r3, #20]
 8000738:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800073a:	4b2d      	ldr	r3, [pc, #180]	; (80007f0 <MX_TIM2_Init+0xe8>)
 800073c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000740:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000742:	4b2b      	ldr	r3, [pc, #172]	; (80007f0 <MX_TIM2_Init+0xe8>)
 8000744:	2200      	movs	r2, #0
 8000746:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000748:	4b29      	ldr	r3, [pc, #164]	; (80007f0 <MX_TIM2_Init+0xe8>)
 800074a:	2200      	movs	r2, #0
 800074c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65536;
 800074e:	4b28      	ldr	r3, [pc, #160]	; (80007f0 <MX_TIM2_Init+0xe8>)
 8000750:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000754:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000756:	4b26      	ldr	r3, [pc, #152]	; (80007f0 <MX_TIM2_Init+0xe8>)
 8000758:	2200      	movs	r2, #0
 800075a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800075c:	4b24      	ldr	r3, [pc, #144]	; (80007f0 <MX_TIM2_Init+0xe8>)
 800075e:	2200      	movs	r2, #0
 8000760:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000762:	4823      	ldr	r0, [pc, #140]	; (80007f0 <MX_TIM2_Init+0xe8>)
 8000764:	f003 fd56 	bl	8004214 <HAL_TIM_Base_Init>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800076e:	f000 f953 	bl	8000a18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000772:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000776:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000778:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800077c:	4619      	mov	r1, r3
 800077e:	481c      	ldr	r0, [pc, #112]	; (80007f0 <MX_TIM2_Init+0xe8>)
 8000780:	f004 f81a 	bl	80047b8 <HAL_TIM_ConfigClockSource>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800078a:	f000 f945 	bl	8000a18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800078e:	4818      	ldr	r0, [pc, #96]	; (80007f0 <MX_TIM2_Init+0xe8>)
 8000790:	f003 fd97 	bl	80042c2 <HAL_TIM_PWM_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800079a:	f000 f93d 	bl	8000a18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800079e:	2300      	movs	r3, #0
 80007a0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007a2:	2300      	movs	r3, #0
 80007a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007a6:	f107 031c 	add.w	r3, r7, #28
 80007aa:	4619      	mov	r1, r3
 80007ac:	4810      	ldr	r0, [pc, #64]	; (80007f0 <MX_TIM2_Init+0xe8>)
 80007ae:	f004 fcfd 	bl	80051ac <HAL_TIMEx_MasterConfigSynchronization>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80007b8:	f000 f92e 	bl	8000a18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007bc:	2360      	movs	r3, #96	; 0x60
 80007be:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007c4:	2300      	movs	r3, #0
 80007c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007c8:	2300      	movs	r3, #0
 80007ca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007cc:	463b      	mov	r3, r7
 80007ce:	2200      	movs	r2, #0
 80007d0:	4619      	mov	r1, r3
 80007d2:	4807      	ldr	r0, [pc, #28]	; (80007f0 <MX_TIM2_Init+0xe8>)
 80007d4:	f003 fedc 	bl	8004590 <HAL_TIM_PWM_ConfigChannel>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80007de:	f000 f91b 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80007e2:	4803      	ldr	r0, [pc, #12]	; (80007f0 <MX_TIM2_Init+0xe8>)
 80007e4:	f000 f9ca 	bl	8000b7c <HAL_TIM_MspPostInit>

}
 80007e8:	bf00      	nop
 80007ea:	3738      	adds	r7, #56	; 0x38
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	2000008c 	.word	0x2000008c

080007f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007f8:	4b14      	ldr	r3, [pc, #80]	; (800084c <MX_USART1_UART_Init+0x58>)
 80007fa:	4a15      	ldr	r2, [pc, #84]	; (8000850 <MX_USART1_UART_Init+0x5c>)
 80007fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80007fe:	4b13      	ldr	r3, [pc, #76]	; (800084c <MX_USART1_UART_Init+0x58>)
 8000800:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000804:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000806:	4b11      	ldr	r3, [pc, #68]	; (800084c <MX_USART1_UART_Init+0x58>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800080c:	4b0f      	ldr	r3, [pc, #60]	; (800084c <MX_USART1_UART_Init+0x58>)
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000812:	4b0e      	ldr	r3, [pc, #56]	; (800084c <MX_USART1_UART_Init+0x58>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000818:	4b0c      	ldr	r3, [pc, #48]	; (800084c <MX_USART1_UART_Init+0x58>)
 800081a:	220c      	movs	r2, #12
 800081c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800081e:	4b0b      	ldr	r3, [pc, #44]	; (800084c <MX_USART1_UART_Init+0x58>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000824:	4b09      	ldr	r3, [pc, #36]	; (800084c <MX_USART1_UART_Init+0x58>)
 8000826:	2200      	movs	r2, #0
 8000828:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800082a:	4b08      	ldr	r3, [pc, #32]	; (800084c <MX_USART1_UART_Init+0x58>)
 800082c:	2200      	movs	r2, #0
 800082e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <MX_USART1_UART_Init+0x58>)
 8000832:	2200      	movs	r2, #0
 8000834:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000836:	4805      	ldr	r0, [pc, #20]	; (800084c <MX_USART1_UART_Init+0x58>)
 8000838:	f004 fd40 	bl	80052bc <HAL_UART_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000842:	f000 f8e9 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	200000d8 	.word	0x200000d8
 8000850:	40013800 	.word	0x40013800

08000854 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b088      	sub	sp, #32
 8000858:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085a:	f107 030c 	add.w	r3, r7, #12
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	609a      	str	r2, [r3, #8]
 8000866:	60da      	str	r2, [r3, #12]
 8000868:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800086a:	4b22      	ldr	r3, [pc, #136]	; (80008f4 <MX_GPIO_Init+0xa0>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086e:	4a21      	ldr	r2, [pc, #132]	; (80008f4 <MX_GPIO_Init+0xa0>)
 8000870:	f043 0304 	orr.w	r3, r3, #4
 8000874:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000876:	4b1f      	ldr	r3, [pc, #124]	; (80008f4 <MX_GPIO_Init+0xa0>)
 8000878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087a:	f003 0304 	and.w	r3, r3, #4
 800087e:	60bb      	str	r3, [r7, #8]
 8000880:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000882:	4b1c      	ldr	r3, [pc, #112]	; (80008f4 <MX_GPIO_Init+0xa0>)
 8000884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000886:	4a1b      	ldr	r2, [pc, #108]	; (80008f4 <MX_GPIO_Init+0xa0>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800088e:	4b19      	ldr	r3, [pc, #100]	; (80008f4 <MX_GPIO_Init+0xa0>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 800089a:	2200      	movs	r2, #0
 800089c:	2106      	movs	r1, #6
 800089e:	4816      	ldr	r0, [pc, #88]	; (80008f8 <MX_GPIO_Init+0xa4>)
 80008a0:	f002 f980 	bl	8002ba4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80008a4:	2200      	movs	r2, #0
 80008a6:	2120      	movs	r1, #32
 80008a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ac:	f002 f97a 	bl	8002ba4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80008b0:	2306      	movs	r3, #6
 80008b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b4:	2301      	movs	r3, #1
 80008b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008bc:	2300      	movs	r3, #0
 80008be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008c0:	f107 030c 	add.w	r3, r7, #12
 80008c4:	4619      	mov	r1, r3
 80008c6:	480c      	ldr	r0, [pc, #48]	; (80008f8 <MX_GPIO_Init+0xa4>)
 80008c8:	f001 ffc2 	bl	8002850 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80008cc:	2320      	movs	r3, #32
 80008ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d0:	2301      	movs	r3, #1
 80008d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d8:	2300      	movs	r3, #0
 80008da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008dc:	f107 030c 	add.w	r3, r7, #12
 80008e0:	4619      	mov	r1, r3
 80008e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008e6:	f001 ffb3 	bl	8002850 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008ea:	bf00      	nop
 80008ec:	3720      	adds	r7, #32
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40021000 	.word	0x40021000
 80008f8:	48000800 	.word	0x48000800

080008fc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

// Callback pour la réception UART
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]

	// Adjust the capture pulse every 0.1s. once it attend the maximum (timer period) reset to 100 (alpha = 0.1);

	//Check the Cplt callback function call belongs to the UART1 instance.
	if (huart == &huart1) {
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	4a32      	ldr	r2, [pc, #200]	; (80009d0 <HAL_UART_RxCpltCallback+0xd4>)
 8000908:	4293      	cmp	r3, r2
 800090a:	d15c      	bne.n	80009c6 <HAL_UART_RxCpltCallback+0xca>
    // Commande reçue, effectuez des actions en fonction de RX_BUFFER[0]

    switch (RX_BUFFER[0]){
 800090c:	4b31      	ldr	r3, [pc, #196]	; (80009d4 <HAL_UART_RxCpltCallback+0xd8>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	3b30      	subs	r3, #48	; 0x30
 8000912:	2b04      	cmp	r3, #4
 8000914:	d852      	bhi.n	80009bc <HAL_UART_RxCpltCallback+0xc0>
 8000916:	a201      	add	r2, pc, #4	; (adr r2, 800091c <HAL_UART_RxCpltCallback+0x20>)
 8000918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800091c:	08000931 	.word	0x08000931
 8000920:	0800095b 	.word	0x0800095b
 8000924:	0800096d 	.word	0x0800096d
 8000928:	0800097f 	.word	0x0800097f
 800092c:	08000993 	.word	0x08000993
     case '0':
        // Allumer la LED correspondante (par exemple, GPIOD12)
    	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000930:	2200      	movs	r2, #0
 8000932:	2120      	movs	r1, #32
 8000934:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000938:	f002 f934 	bl	8002ba4 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1 | GPIO_PIN_2, 0);
 800093c:	2200      	movs	r2, #0
 800093e:	2106      	movs	r1, #6
 8000940:	4825      	ldr	r0, [pc, #148]	; (80009d8 <HAL_UART_RxCpltCallback+0xdc>)
 8000942:	f002 f92f 	bl	8002ba4 <HAL_GPIO_WritePin>
    	  LEDs[0]='0';LEDs[1]='0';LEDs[2]='0';
 8000946:	4b25      	ldr	r3, [pc, #148]	; (80009dc <HAL_UART_RxCpltCallback+0xe0>)
 8000948:	2230      	movs	r2, #48	; 0x30
 800094a:	701a      	strb	r2, [r3, #0]
 800094c:	4b23      	ldr	r3, [pc, #140]	; (80009dc <HAL_UART_RxCpltCallback+0xe0>)
 800094e:	2230      	movs	r2, #48	; 0x30
 8000950:	705a      	strb	r2, [r3, #1]
 8000952:	4b22      	ldr	r3, [pc, #136]	; (80009dc <HAL_UART_RxCpltCallback+0xe0>)
 8000954:	2230      	movs	r2, #48	; 0x30
 8000956:	709a      	strb	r2, [r3, #2]
		  break;
 8000958:	e030      	b.n	80009bc <HAL_UART_RxCpltCallback+0xc0>

      case '1':
          // Allumer la LED correspondante (par exemple, GPIOD12)
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 1);
 800095a:	2201      	movs	r2, #1
 800095c:	2102      	movs	r1, #2
 800095e:	481e      	ldr	r0, [pc, #120]	; (80009d8 <HAL_UART_RxCpltCallback+0xdc>)
 8000960:	f002 f920 	bl	8002ba4 <HAL_GPIO_WritePin>
		  LEDs[0]='B';
 8000964:	4b1d      	ldr	r3, [pc, #116]	; (80009dc <HAL_UART_RxCpltCallback+0xe0>)
 8000966:	2242      	movs	r2, #66	; 0x42
 8000968:	701a      	strb	r2, [r3, #0]
		  break;
 800096a:	e027      	b.n	80009bc <HAL_UART_RxCpltCallback+0xc0>

      case '2':
          // Allumer la LED correspondante (par exemple, GPIOD13)
    	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 1);
 800096c:	2201      	movs	r2, #1
 800096e:	2104      	movs	r1, #4
 8000970:	4819      	ldr	r0, [pc, #100]	; (80009d8 <HAL_UART_RxCpltCallback+0xdc>)
 8000972:	f002 f917 	bl	8002ba4 <HAL_GPIO_WritePin>
		  LEDs[1]='G';
 8000976:	4b19      	ldr	r3, [pc, #100]	; (80009dc <HAL_UART_RxCpltCallback+0xe0>)
 8000978:	2247      	movs	r2, #71	; 0x47
 800097a:	705a      	strb	r2, [r3, #1]
          break;
 800097c:	e01e      	b.n	80009bc <HAL_UART_RxCpltCallback+0xc0>

      case '3':
        // Allumer la LED correspondante (par exemple, GPIOD13)
    	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 800097e:	2201      	movs	r2, #1
 8000980:	2120      	movs	r1, #32
 8000982:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000986:	f002 f90d 	bl	8002ba4 <HAL_GPIO_WritePin>
		  LEDs[2]='Y';
 800098a:	4b14      	ldr	r3, [pc, #80]	; (80009dc <HAL_UART_RxCpltCallback+0xe0>)
 800098c:	2259      	movs	r2, #89	; 0x59
 800098e:	709a      	strb	r2, [r3, #2]
        break;
 8000990:	e014      	b.n	80009bc <HAL_UART_RxCpltCallback+0xc0>

      case '4':
         // Allumer la LED correspondante (par exemple, GPIOD12)
     	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8000992:	2201      	movs	r2, #1
 8000994:	2120      	movs	r1, #32
 8000996:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800099a:	f002 f903 	bl	8002ba4 <HAL_GPIO_WritePin>
     	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1 | GPIO_PIN_2, 1);
 800099e:	2201      	movs	r2, #1
 80009a0:	2106      	movs	r1, #6
 80009a2:	480d      	ldr	r0, [pc, #52]	; (80009d8 <HAL_UART_RxCpltCallback+0xdc>)
 80009a4:	f002 f8fe 	bl	8002ba4 <HAL_GPIO_WritePin>
     	  LEDs[0]='B';LEDs[1]='G';LEDs[2]='Y';
 80009a8:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <HAL_UART_RxCpltCallback+0xe0>)
 80009aa:	2242      	movs	r2, #66	; 0x42
 80009ac:	701a      	strb	r2, [r3, #0]
 80009ae:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <HAL_UART_RxCpltCallback+0xe0>)
 80009b0:	2247      	movs	r2, #71	; 0x47
 80009b2:	705a      	strb	r2, [r3, #1]
 80009b4:	4b09      	ldr	r3, [pc, #36]	; (80009dc <HAL_UART_RxCpltCallback+0xe0>)
 80009b6:	2259      	movs	r2, #89	; 0x59
 80009b8:	709a      	strb	r2, [r3, #2]
 		  break;
 80009ba:	bf00      	nop
    }

    // Réactivez la réception UART pour la prochaine commande
    HAL_UART_Receive_IT(&huart1, RX_BUFFER, Buffer_len);
 80009bc:	2201      	movs	r2, #1
 80009be:	4905      	ldr	r1, [pc, #20]	; (80009d4 <HAL_UART_RxCpltCallback+0xd8>)
 80009c0:	4803      	ldr	r0, [pc, #12]	; (80009d0 <HAL_UART_RxCpltCallback+0xd4>)
 80009c2:	f004 fcc9 	bl	8005358 <HAL_UART_Receive_IT>
  }

}
 80009c6:	bf00      	nop
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	200000d8 	.word	0x200000d8
 80009d4:	2000015c 	.word	0x2000015c
 80009d8:	48000800 	.word	0x48000800
 80009dc:	20000160 	.word	0x20000160

080009e0 <MAP>:
 * au32_OUTmin: la valeur minimal de la sortie. (Registre CCR1 du Timer2 dans ce cas.) = 0
 * au32_OUTmax: la valeur maximal de la sortie. (Registre CCR1 du Timer2 dans ce cas.) = 2^(16) [Ckeck Timer on the reference manuel to get the timer resolution]
*/

uint32_t MAP(uint32_t au32_IN, uint32_t au32_INmin, uint32_t au32_INmax, uint32_t au32_OUTmin, uint32_t au32_OUTmax)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b085      	sub	sp, #20
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	60f8      	str	r0, [r7, #12]
 80009e8:	60b9      	str	r1, [r7, #8]
 80009ea:	607a      	str	r2, [r7, #4]
 80009ec:	603b      	str	r3, [r7, #0]
    return ((((au32_IN - au32_INmin)*(au32_OUTmax - au32_OUTmin))/(au32_INmax - au32_INmin)) + au32_OUTmin);
 80009ee:	68fa      	ldr	r2, [r7, #12]
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	1ad3      	subs	r3, r2, r3
 80009f4:	69b9      	ldr	r1, [r7, #24]
 80009f6:	683a      	ldr	r2, [r7, #0]
 80009f8:	1a8a      	subs	r2, r1, r2
 80009fa:	fb03 f202 	mul.w	r2, r3, r2
 80009fe:	6879      	ldr	r1, [r7, #4]
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	1acb      	subs	r3, r1, r3
 8000a04:	fbb2 f2f3 	udiv	r2, r2, r3
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	4413      	add	r3, r2
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3714      	adds	r7, #20
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr

08000a18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a1c:	b672      	cpsid	i
}
 8000a1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <Error_Handler+0x8>
	...

08000a24 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2a:	4b0f      	ldr	r3, [pc, #60]	; (8000a68 <HAL_MspInit+0x44>)
 8000a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a2e:	4a0e      	ldr	r2, [pc, #56]	; (8000a68 <HAL_MspInit+0x44>)
 8000a30:	f043 0301 	orr.w	r3, r3, #1
 8000a34:	6613      	str	r3, [r2, #96]	; 0x60
 8000a36:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <HAL_MspInit+0x44>)
 8000a38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a42:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <HAL_MspInit+0x44>)
 8000a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a46:	4a08      	ldr	r2, [pc, #32]	; (8000a68 <HAL_MspInit+0x44>)
 8000a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a4c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a4e:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <HAL_MspInit+0x44>)
 8000a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a56:	603b      	str	r3, [r7, #0]
 8000a58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	40021000 	.word	0x40021000

08000a6c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b0ac      	sub	sp, #176	; 0xb0
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a74:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	2288      	movs	r2, #136	; 0x88
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f005 fefa 	bl	8006886 <memset>
  if(hadc->Instance==ADC1)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a27      	ldr	r2, [pc, #156]	; (8000b34 <HAL_ADC_MspInit+0xc8>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d146      	bne.n	8000b2a <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a9c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000aa0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000aa2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000aa6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000ab2:	2310      	movs	r3, #16
 8000ab4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000ab6:	2307      	movs	r3, #7
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000aba:	2302      	movs	r3, #2
 8000abc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000ac2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ac6:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	4618      	mov	r0, r3
 8000ace:	f002 fee5 	bl	800389c <HAL_RCCEx_PeriphCLKConfig>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000ad8:	f7ff ff9e 	bl	8000a18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000adc:	4b16      	ldr	r3, [pc, #88]	; (8000b38 <HAL_ADC_MspInit+0xcc>)
 8000ade:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae0:	4a15      	ldr	r2, [pc, #84]	; (8000b38 <HAL_ADC_MspInit+0xcc>)
 8000ae2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ae6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ae8:	4b13      	ldr	r3, [pc, #76]	; (8000b38 <HAL_ADC_MspInit+0xcc>)
 8000aea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000af0:	613b      	str	r3, [r7, #16]
 8000af2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000af4:	4b10      	ldr	r3, [pc, #64]	; (8000b38 <HAL_ADC_MspInit+0xcc>)
 8000af6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af8:	4a0f      	ldr	r2, [pc, #60]	; (8000b38 <HAL_ADC_MspInit+0xcc>)
 8000afa:	f043 0304 	orr.w	r3, r3, #4
 8000afe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b00:	4b0d      	ldr	r3, [pc, #52]	; (8000b38 <HAL_ADC_MspInit+0xcc>)
 8000b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b04:	f003 0304 	and.w	r3, r3, #4
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b12:	230b      	movs	r3, #11
 8000b14:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b1e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b22:	4619      	mov	r1, r3
 8000b24:	4805      	ldr	r0, [pc, #20]	; (8000b3c <HAL_ADC_MspInit+0xd0>)
 8000b26:	f001 fe93 	bl	8002850 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b2a:	bf00      	nop
 8000b2c:	37b0      	adds	r7, #176	; 0xb0
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	50040000 	.word	0x50040000
 8000b38:	40021000 	.word	0x40021000
 8000b3c:	48000800 	.word	0x48000800

08000b40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b50:	d10b      	bne.n	8000b6a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b52:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <HAL_TIM_Base_MspInit+0x38>)
 8000b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b56:	4a08      	ldr	r2, [pc, #32]	; (8000b78 <HAL_TIM_Base_MspInit+0x38>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6593      	str	r3, [r2, #88]	; 0x58
 8000b5e:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <HAL_TIM_Base_MspInit+0x38>)
 8000b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b6a:	bf00      	nop
 8000b6c:	3714      	adds	r7, #20
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	40021000 	.word	0x40021000

08000b7c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b088      	sub	sp, #32
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b84:	f107 030c 	add.w	r3, r7, #12
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b9c:	d11c      	bne.n	8000bd8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9e:	4b10      	ldr	r3, [pc, #64]	; (8000be0 <HAL_TIM_MspPostInit+0x64>)
 8000ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba2:	4a0f      	ldr	r2, [pc, #60]	; (8000be0 <HAL_TIM_MspPostInit+0x64>)
 8000ba4:	f043 0301 	orr.w	r3, r3, #1
 8000ba8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000baa:	4b0d      	ldr	r3, [pc, #52]	; (8000be0 <HAL_TIM_MspPostInit+0x64>)
 8000bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	60bb      	str	r3, [r7, #8]
 8000bb4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bca:	f107 030c 	add.w	r3, r7, #12
 8000bce:	4619      	mov	r1, r3
 8000bd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bd4:	f001 fe3c 	bl	8002850 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000bd8:	bf00      	nop
 8000bda:	3720      	adds	r7, #32
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	40021000 	.word	0x40021000

08000be4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b0ac      	sub	sp, #176	; 0xb0
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	2288      	movs	r2, #136	; 0x88
 8000c02:	2100      	movs	r1, #0
 8000c04:	4618      	mov	r0, r3
 8000c06:	f005 fe3e 	bl	8006886 <memset>
  if(huart->Instance==USART1)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a26      	ldr	r2, [pc, #152]	; (8000ca8 <HAL_UART_MspInit+0xc4>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d144      	bne.n	8000c9e <HAL_UART_MspInit+0xba>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c14:	2301      	movs	r3, #1
 8000c16:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	4618      	mov	r0, r3
 8000c22:	f002 fe3b 	bl	800389c <HAL_RCCEx_PeriphCLKConfig>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c2c:	f7ff fef4 	bl	8000a18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c30:	4b1e      	ldr	r3, [pc, #120]	; (8000cac <HAL_UART_MspInit+0xc8>)
 8000c32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c34:	4a1d      	ldr	r2, [pc, #116]	; (8000cac <HAL_UART_MspInit+0xc8>)
 8000c36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c3a:	6613      	str	r3, [r2, #96]	; 0x60
 8000c3c:	4b1b      	ldr	r3, [pc, #108]	; (8000cac <HAL_UART_MspInit+0xc8>)
 8000c3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c44:	613b      	str	r3, [r7, #16]
 8000c46:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c48:	4b18      	ldr	r3, [pc, #96]	; (8000cac <HAL_UART_MspInit+0xc8>)
 8000c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c4c:	4a17      	ldr	r2, [pc, #92]	; (8000cac <HAL_UART_MspInit+0xc8>)
 8000c4e:	f043 0301 	orr.w	r3, r3, #1
 8000c52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c54:	4b15      	ldr	r3, [pc, #84]	; (8000cac <HAL_UART_MspInit+0xc8>)
 8000c56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c58:	f003 0301 	and.w	r3, r3, #1
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c60:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c74:	2303      	movs	r3, #3
 8000c76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c7a:	2307      	movs	r3, #7
 8000c7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c80:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c84:	4619      	mov	r1, r3
 8000c86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c8a:	f001 fde1 	bl	8002850 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2100      	movs	r1, #0
 8000c92:	2025      	movs	r0, #37	; 0x25
 8000c94:	f001 fd27 	bl	80026e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c98:	2025      	movs	r0, #37	; 0x25
 8000c9a:	f001 fd40 	bl	800271e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c9e:	bf00      	nop
 8000ca0:	37b0      	adds	r7, #176	; 0xb0
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40013800 	.word	0x40013800
 8000cac:	40021000 	.word	0x40021000

08000cb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cb4:	e7fe      	b.n	8000cb4 <NMI_Handler+0x4>

08000cb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cba:	e7fe      	b.n	8000cba <HardFault_Handler+0x4>

08000cbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc0:	e7fe      	b.n	8000cc0 <MemManage_Handler+0x4>

08000cc2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cc6:	e7fe      	b.n	8000cc6 <BusFault_Handler+0x4>

08000cc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ccc:	e7fe      	b.n	8000ccc <UsageFault_Handler+0x4>

08000cce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr

08000cea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr

08000cf8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cfc:	f000 f89c 	bl	8000e38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d08:	4802      	ldr	r0, [pc, #8]	; (8000d14 <USART1_IRQHandler+0x10>)
 8000d0a:	f004 fb7b 	bl	8005404 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	200000d8 	.word	0x200000d8

08000d18 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <SystemInit+0x20>)
 8000d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d22:	4a05      	ldr	r2, [pc, #20]	; (8000d38 <SystemInit+0x20>)
 8000d24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d74 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d40:	f7ff ffea 	bl	8000d18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d44:	480c      	ldr	r0, [pc, #48]	; (8000d78 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d46:	490d      	ldr	r1, [pc, #52]	; (8000d7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d48:	4a0d      	ldr	r2, [pc, #52]	; (8000d80 <LoopForever+0xe>)
  movs r3, #0
 8000d4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d4c:	e002      	b.n	8000d54 <LoopCopyDataInit>

08000d4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d52:	3304      	adds	r3, #4

08000d54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d58:	d3f9      	bcc.n	8000d4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d5a:	4a0a      	ldr	r2, [pc, #40]	; (8000d84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d5c:	4c0a      	ldr	r4, [pc, #40]	; (8000d88 <LoopForever+0x16>)
  movs r3, #0
 8000d5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d60:	e001      	b.n	8000d66 <LoopFillZerobss>

08000d62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d64:	3204      	adds	r2, #4

08000d66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d68:	d3fb      	bcc.n	8000d62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d6a:	f005 fd95 	bl	8006898 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d6e:	f7ff fba9 	bl	80004c4 <main>

08000d72 <LoopForever>:

LoopForever:
    b LoopForever
 8000d72:	e7fe      	b.n	8000d72 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d74:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d7c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d80:	08006950 	.word	0x08006950
  ldr r2, =_sbss
 8000d84:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d88:	20000174 	.word	0x20000174

08000d8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d8c:	e7fe      	b.n	8000d8c <ADC1_2_IRQHandler>

08000d8e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b082      	sub	sp, #8
 8000d92:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d94:	2300      	movs	r3, #0
 8000d96:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d98:	2003      	movs	r0, #3
 8000d9a:	f001 fc99 	bl	80026d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d9e:	200f      	movs	r0, #15
 8000da0:	f000 f80e 	bl	8000dc0 <HAL_InitTick>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d002      	beq.n	8000db0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	71fb      	strb	r3, [r7, #7]
 8000dae:	e001      	b.n	8000db4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000db0:	f7ff fe38 	bl	8000a24 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000db4:	79fb      	ldrb	r3, [r7, #7]
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
	...

08000dc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000dcc:	4b17      	ldr	r3, [pc, #92]	; (8000e2c <HAL_InitTick+0x6c>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d023      	beq.n	8000e1c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000dd4:	4b16      	ldr	r3, [pc, #88]	; (8000e30 <HAL_InitTick+0x70>)
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	4b14      	ldr	r3, [pc, #80]	; (8000e2c <HAL_InitTick+0x6c>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	4619      	mov	r1, r3
 8000dde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000de2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dea:	4618      	mov	r0, r3
 8000dec:	f001 fca5 	bl	800273a <HAL_SYSTICK_Config>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d10f      	bne.n	8000e16 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2b0f      	cmp	r3, #15
 8000dfa:	d809      	bhi.n	8000e10 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	6879      	ldr	r1, [r7, #4]
 8000e00:	f04f 30ff 	mov.w	r0, #4294967295
 8000e04:	f001 fc6f 	bl	80026e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e08:	4a0a      	ldr	r2, [pc, #40]	; (8000e34 <HAL_InitTick+0x74>)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6013      	str	r3, [r2, #0]
 8000e0e:	e007      	b.n	8000e20 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e10:	2301      	movs	r3, #1
 8000e12:	73fb      	strb	r3, [r7, #15]
 8000e14:	e004      	b.n	8000e20 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	73fb      	strb	r3, [r7, #15]
 8000e1a:	e001      	b.n	8000e20 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3710      	adds	r7, #16
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000008 	.word	0x20000008
 8000e30:	20000000 	.word	0x20000000
 8000e34:	20000004 	.word	0x20000004

08000e38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e3c:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <HAL_IncTick+0x20>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	461a      	mov	r2, r3
 8000e42:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <HAL_IncTick+0x24>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4413      	add	r3, r2
 8000e48:	4a04      	ldr	r2, [pc, #16]	; (8000e5c <HAL_IncTick+0x24>)
 8000e4a:	6013      	str	r3, [r2, #0]
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	20000008 	.word	0x20000008
 8000e5c:	20000170 	.word	0x20000170

08000e60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  return uwTick;
 8000e64:	4b03      	ldr	r3, [pc, #12]	; (8000e74 <HAL_GetTick+0x14>)
 8000e66:	681b      	ldr	r3, [r3, #0]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	20000170 	.word	0x20000170

08000e78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e80:	f7ff ffee 	bl	8000e60 <HAL_GetTick>
 8000e84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e90:	d005      	beq.n	8000e9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e92:	4b0a      	ldr	r3, [pc, #40]	; (8000ebc <HAL_Delay+0x44>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	461a      	mov	r2, r3
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e9e:	bf00      	nop
 8000ea0:	f7ff ffde 	bl	8000e60 <HAL_GetTick>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	68fa      	ldr	r2, [r7, #12]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d8f7      	bhi.n	8000ea0 <HAL_Delay+0x28>
  {
  }
}
 8000eb0:	bf00      	nop
 8000eb2:	bf00      	nop
 8000eb4:	3710      	adds	r7, #16
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	20000008 	.word	0x20000008

08000ec0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	431a      	orrs	r2, r3
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	609a      	str	r2, [r3, #8]
}
 8000eda:	bf00      	nop
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr

08000ee6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	b083      	sub	sp, #12
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
 8000eee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	431a      	orrs	r2, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	609a      	str	r2, [r3, #8]
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b087      	sub	sp, #28
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
 8000f34:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	3360      	adds	r3, #96	; 0x60
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	4413      	add	r3, r2
 8000f42:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <LL_ADC_SetOffset+0x44>)
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000f52:	683a      	ldr	r2, [r7, #0]
 8000f54:	430a      	orrs	r2, r1
 8000f56:	4313      	orrs	r3, r2
 8000f58:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000f60:	bf00      	nop
 8000f62:	371c      	adds	r7, #28
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	03fff000 	.word	0x03fff000

08000f70 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	3360      	adds	r3, #96	; 0x60
 8000f7e:	461a      	mov	r2, r3
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	4413      	add	r3, r2
 8000f86:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3714      	adds	r7, #20
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b087      	sub	sp, #28
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	3360      	adds	r3, #96	; 0x60
 8000fac:	461a      	mov	r2, r3
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	4413      	add	r3, r2
 8000fb4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	431a      	orrs	r2, r3
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000fc6:	bf00      	nop
 8000fc8:	371c      	adds	r7, #28
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr

08000fd2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	b083      	sub	sp, #12
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	68db      	ldr	r3, [r3, #12]
 8000fde:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d101      	bne.n	8000fea <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e000      	b.n	8000fec <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000fea:	2300      	movs	r3, #0
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b087      	sub	sp, #28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	3330      	adds	r3, #48	; 0x30
 8001008:	461a      	mov	r2, r3
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	0a1b      	lsrs	r3, r3, #8
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	f003 030c 	and.w	r3, r3, #12
 8001014:	4413      	add	r3, r2
 8001016:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	f003 031f 	and.w	r3, r3, #31
 8001022:	211f      	movs	r1, #31
 8001024:	fa01 f303 	lsl.w	r3, r1, r3
 8001028:	43db      	mvns	r3, r3
 800102a:	401a      	ands	r2, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	0e9b      	lsrs	r3, r3, #26
 8001030:	f003 011f 	and.w	r1, r3, #31
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	f003 031f 	and.w	r3, r3, #31
 800103a:	fa01 f303 	lsl.w	r3, r1, r3
 800103e:	431a      	orrs	r2, r3
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001044:	bf00      	nop
 8001046:	371c      	adds	r7, #28
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001050:	b480      	push	{r7}
 8001052:	b087      	sub	sp, #28
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	3314      	adds	r3, #20
 8001060:	461a      	mov	r2, r3
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	0e5b      	lsrs	r3, r3, #25
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	f003 0304 	and.w	r3, r3, #4
 800106c:	4413      	add	r3, r2
 800106e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	0d1b      	lsrs	r3, r3, #20
 8001078:	f003 031f 	and.w	r3, r3, #31
 800107c:	2107      	movs	r1, #7
 800107e:	fa01 f303 	lsl.w	r3, r1, r3
 8001082:	43db      	mvns	r3, r3
 8001084:	401a      	ands	r2, r3
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	0d1b      	lsrs	r3, r3, #20
 800108a:	f003 031f 	and.w	r3, r3, #31
 800108e:	6879      	ldr	r1, [r7, #4]
 8001090:	fa01 f303 	lsl.w	r3, r1, r3
 8001094:	431a      	orrs	r2, r3
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800109a:	bf00      	nop
 800109c:	371c      	adds	r7, #28
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
	...

080010a8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010c0:	43db      	mvns	r3, r3
 80010c2:	401a      	ands	r2, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f003 0318 	and.w	r3, r3, #24
 80010ca:	4908      	ldr	r1, [pc, #32]	; (80010ec <LL_ADC_SetChannelSingleDiff+0x44>)
 80010cc:	40d9      	lsrs	r1, r3
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	400b      	ands	r3, r1
 80010d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010d6:	431a      	orrs	r2, r3
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80010de:	bf00      	nop
 80010e0:	3714      	adds	r7, #20
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	0007ffff 	.word	0x0007ffff

080010f0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	f003 031f 	and.w	r3, r3, #31
}
 8001100:	4618      	mov	r0, r3
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800111c:	4618      	mov	r0, r3
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001138:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800113c:	687a      	ldr	r2, [r7, #4]
 800113e:	6093      	str	r3, [r2, #8]
}
 8001140:	bf00      	nop
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800115c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001160:	d101      	bne.n	8001166 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001162:	2301      	movs	r3, #1
 8001164:	e000      	b.n	8001168 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001166:	2300      	movs	r3, #0
}
 8001168:	4618      	mov	r0, r3
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001184:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001188:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80011b0:	d101      	bne.n	80011b6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80011b2:	2301      	movs	r3, #1
 80011b4:	e000      	b.n	80011b8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80011b6:	2300      	movs	r3, #0
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80011d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011d8:	f043 0201 	orr.w	r2, r3, #1
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80011e0:	bf00      	nop
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80011fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001200:	f043 0202 	orr.w	r2, r3, #2
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	f003 0301 	and.w	r3, r3, #1
 8001224:	2b01      	cmp	r3, #1
 8001226:	d101      	bne.n	800122c <LL_ADC_IsEnabled+0x18>
 8001228:	2301      	movs	r3, #1
 800122a:	e000      	b.n	800122e <LL_ADC_IsEnabled+0x1a>
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr

0800123a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800123a:	b480      	push	{r7}
 800123c:	b083      	sub	sp, #12
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	2b02      	cmp	r3, #2
 800124c:	d101      	bne.n	8001252 <LL_ADC_IsDisableOngoing+0x18>
 800124e:	2301      	movs	r3, #1
 8001250:	e000      	b.n	8001254 <LL_ADC_IsDisableOngoing+0x1a>
 8001252:	2300      	movs	r3, #0
}
 8001254:	4618      	mov	r0, r3
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001270:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001274:	f043 0204 	orr.w	r2, r3, #4
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800127c:	bf00      	nop
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	f003 0304 	and.w	r3, r3, #4
 8001298:	2b04      	cmp	r3, #4
 800129a:	d101      	bne.n	80012a0 <LL_ADC_REG_IsConversionOngoing+0x18>
 800129c:	2301      	movs	r3, #1
 800129e:	e000      	b.n	80012a2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr

080012ae <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80012ae:	b480      	push	{r7}
 80012b0:	b083      	sub	sp, #12
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	f003 0308 	and.w	r3, r3, #8
 80012be:	2b08      	cmp	r3, #8
 80012c0:	d101      	bne.n	80012c6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80012c2:	2301      	movs	r3, #1
 80012c4:	e000      	b.n	80012c8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80012c6:	2300      	movs	r3, #0
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80012d4:	b590      	push	{r4, r7, lr}
 80012d6:	b089      	sub	sp, #36	; 0x24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012dc:	2300      	movs	r3, #0
 80012de:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d101      	bne.n	80012ee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e136      	b.n	800155c <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	691b      	ldr	r3, [r3, #16]
 80012f2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d109      	bne.n	8001310 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f7ff fbb5 	bl	8000a6c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2200      	movs	r2, #0
 8001306:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2200      	movs	r2, #0
 800130c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff ff19 	bl	800114c <LL_ADC_IsDeepPowerDownEnabled>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d004      	beq.n	800132a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff feff 	bl	8001128 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff ff34 	bl	800119c <LL_ADC_IsInternalRegulatorEnabled>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d115      	bne.n	8001366 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff ff18 	bl	8001174 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001344:	4b87      	ldr	r3, [pc, #540]	; (8001564 <HAL_ADC_Init+0x290>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	099b      	lsrs	r3, r3, #6
 800134a:	4a87      	ldr	r2, [pc, #540]	; (8001568 <HAL_ADC_Init+0x294>)
 800134c:	fba2 2303 	umull	r2, r3, r2, r3
 8001350:	099b      	lsrs	r3, r3, #6
 8001352:	3301      	adds	r3, #1
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001358:	e002      	b.n	8001360 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	3b01      	subs	r3, #1
 800135e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d1f9      	bne.n	800135a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff ff16 	bl	800119c <LL_ADC_IsInternalRegulatorEnabled>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d10d      	bne.n	8001392 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800137a:	f043 0210 	orr.w	r2, r3, #16
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001386:	f043 0201 	orr.w	r2, r3, #1
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff ff76 	bl	8001288 <LL_ADC_REG_IsConversionOngoing>
 800139c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013a2:	f003 0310 	and.w	r3, r3, #16
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	f040 80cf 	bne.w	800154a <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	f040 80cb 	bne.w	800154a <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013b8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80013bc:	f043 0202 	orr.w	r2, r3, #2
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff ff23 	bl	8001214 <LL_ADC_IsEnabled>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d115      	bne.n	8001400 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80013d4:	4865      	ldr	r0, [pc, #404]	; (800156c <HAL_ADC_Init+0x298>)
 80013d6:	f7ff ff1d 	bl	8001214 <LL_ADC_IsEnabled>
 80013da:	4604      	mov	r4, r0
 80013dc:	4864      	ldr	r0, [pc, #400]	; (8001570 <HAL_ADC_Init+0x29c>)
 80013de:	f7ff ff19 	bl	8001214 <LL_ADC_IsEnabled>
 80013e2:	4603      	mov	r3, r0
 80013e4:	431c      	orrs	r4, r3
 80013e6:	4863      	ldr	r0, [pc, #396]	; (8001574 <HAL_ADC_Init+0x2a0>)
 80013e8:	f7ff ff14 	bl	8001214 <LL_ADC_IsEnabled>
 80013ec:	4603      	mov	r3, r0
 80013ee:	4323      	orrs	r3, r4
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d105      	bne.n	8001400 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	4619      	mov	r1, r3
 80013fa:	485f      	ldr	r0, [pc, #380]	; (8001578 <HAL_ADC_Init+0x2a4>)
 80013fc:	f7ff fd60 	bl	8000ec0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	7e5b      	ldrb	r3, [r3, #25]
 8001404:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800140a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001410:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001416:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800141e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001420:	4313      	orrs	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f893 3020 	ldrb.w	r3, [r3, #32]
 800142a:	2b01      	cmp	r3, #1
 800142c:	d106      	bne.n	800143c <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001432:	3b01      	subs	r3, #1
 8001434:	045b      	lsls	r3, r3, #17
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	4313      	orrs	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001440:	2b00      	cmp	r3, #0
 8001442:	d009      	beq.n	8001458 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001448:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001450:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	4313      	orrs	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	68da      	ldr	r2, [r3, #12]
 800145e:	4b47      	ldr	r3, [pc, #284]	; (800157c <HAL_ADC_Init+0x2a8>)
 8001460:	4013      	ands	r3, r2
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	6812      	ldr	r2, [r2, #0]
 8001466:	69b9      	ldr	r1, [r7, #24]
 8001468:	430b      	orrs	r3, r1
 800146a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff ff09 	bl	8001288 <LL_ADC_REG_IsConversionOngoing>
 8001476:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff ff16 	bl	80012ae <LL_ADC_INJ_IsConversionOngoing>
 8001482:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d13d      	bne.n	8001506 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d13a      	bne.n	8001506 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001494:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800149c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800149e:	4313      	orrs	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80014ac:	f023 0302 	bic.w	r3, r3, #2
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	6812      	ldr	r2, [r2, #0]
 80014b4:	69b9      	ldr	r1, [r7, #24]
 80014b6:	430b      	orrs	r3, r1
 80014b8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d118      	bne.n	80014f6 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	691b      	ldr	r3, [r3, #16]
 80014ca:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80014ce:	f023 0304 	bic.w	r3, r3, #4
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80014da:	4311      	orrs	r1, r2
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80014e0:	4311      	orrs	r1, r2
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80014e6:	430a      	orrs	r2, r1
 80014e8:	431a      	orrs	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f042 0201 	orr.w	r2, r2, #1
 80014f2:	611a      	str	r2, [r3, #16]
 80014f4:	e007      	b.n	8001506 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	691a      	ldr	r2, [r3, #16]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f022 0201 	bic.w	r2, r2, #1
 8001504:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	691b      	ldr	r3, [r3, #16]
 800150a:	2b01      	cmp	r3, #1
 800150c:	d10c      	bne.n	8001528 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001514:	f023 010f 	bic.w	r1, r3, #15
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	69db      	ldr	r3, [r3, #28]
 800151c:	1e5a      	subs	r2, r3, #1
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	430a      	orrs	r2, r1
 8001524:	631a      	str	r2, [r3, #48]	; 0x30
 8001526:	e007      	b.n	8001538 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f022 020f 	bic.w	r2, r2, #15
 8001536:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800153c:	f023 0303 	bic.w	r3, r3, #3
 8001540:	f043 0201 	orr.w	r2, r3, #1
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	655a      	str	r2, [r3, #84]	; 0x54
 8001548:	e007      	b.n	800155a <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800154e:	f043 0210 	orr.w	r2, r3, #16
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800155a:	7ffb      	ldrb	r3, [r7, #31]
}
 800155c:	4618      	mov	r0, r3
 800155e:	3724      	adds	r7, #36	; 0x24
 8001560:	46bd      	mov	sp, r7
 8001562:	bd90      	pop	{r4, r7, pc}
 8001564:	20000000 	.word	0x20000000
 8001568:	053e2d63 	.word	0x053e2d63
 800156c:	50040000 	.word	0x50040000
 8001570:	50040100 	.word	0x50040100
 8001574:	50040200 	.word	0x50040200
 8001578:	50040300 	.word	0x50040300
 800157c:	fff0c007 	.word	0xfff0c007

08001580 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b086      	sub	sp, #24
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001588:	4857      	ldr	r0, [pc, #348]	; (80016e8 <HAL_ADC_Start+0x168>)
 800158a:	f7ff fdb1 	bl	80010f0 <LL_ADC_GetMultimode>
 800158e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff fe77 	bl	8001288 <LL_ADC_REG_IsConversionOngoing>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	f040 809c 	bne.w	80016da <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d101      	bne.n	80015b0 <HAL_ADC_Start+0x30>
 80015ac:	2302      	movs	r3, #2
 80015ae:	e097      	b.n	80016e0 <HAL_ADC_Start+0x160>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2201      	movs	r2, #1
 80015b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f000 fd71 	bl	80020a0 <ADC_Enable>
 80015be:	4603      	mov	r3, r0
 80015c0:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80015c2:	7dfb      	ldrb	r3, [r7, #23]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	f040 8083 	bne.w	80016d0 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ce:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80015d2:	f023 0301 	bic.w	r3, r3, #1
 80015d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a42      	ldr	r2, [pc, #264]	; (80016ec <HAL_ADC_Start+0x16c>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d002      	beq.n	80015ee <HAL_ADC_Start+0x6e>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	e000      	b.n	80015f0 <HAL_ADC_Start+0x70>
 80015ee:	4b40      	ldr	r3, [pc, #256]	; (80016f0 <HAL_ADC_Start+0x170>)
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	6812      	ldr	r2, [r2, #0]
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d002      	beq.n	80015fe <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d105      	bne.n	800160a <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001602:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800160e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001612:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001616:	d106      	bne.n	8001626 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800161c:	f023 0206 	bic.w	r2, r3, #6
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	659a      	str	r2, [r3, #88]	; 0x58
 8001624:	e002      	b.n	800162c <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	221c      	movs	r2, #28
 8001632:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2200      	movs	r2, #0
 8001638:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a2a      	ldr	r2, [pc, #168]	; (80016ec <HAL_ADC_Start+0x16c>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d002      	beq.n	800164c <HAL_ADC_Start+0xcc>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	e000      	b.n	800164e <HAL_ADC_Start+0xce>
 800164c:	4b28      	ldr	r3, [pc, #160]	; (80016f0 <HAL_ADC_Start+0x170>)
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	6812      	ldr	r2, [r2, #0]
 8001652:	4293      	cmp	r3, r2
 8001654:	d008      	beq.n	8001668 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d005      	beq.n	8001668 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	2b05      	cmp	r3, #5
 8001660:	d002      	beq.n	8001668 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	2b09      	cmp	r3, #9
 8001666:	d114      	bne.n	8001692 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d007      	beq.n	8001686 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800167a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800167e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff fde8 	bl	8001260 <LL_ADC_REG_StartConversion>
 8001690:	e025      	b.n	80016de <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001696:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a12      	ldr	r2, [pc, #72]	; (80016ec <HAL_ADC_Start+0x16c>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d002      	beq.n	80016ae <HAL_ADC_Start+0x12e>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	e000      	b.n	80016b0 <HAL_ADC_Start+0x130>
 80016ae:	4b10      	ldr	r3, [pc, #64]	; (80016f0 <HAL_ADC_Start+0x170>)
 80016b0:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	68db      	ldr	r3, [r3, #12]
 80016b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d00f      	beq.n	80016de <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016c2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016c6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	655a      	str	r2, [r3, #84]	; 0x54
 80016ce:	e006      	b.n	80016de <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2200      	movs	r2, #0
 80016d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80016d8:	e001      	b.n	80016de <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80016da:	2302      	movs	r3, #2
 80016dc:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80016de:	7dfb      	ldrb	r3, [r7, #23]
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3718      	adds	r7, #24
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	50040300 	.word	0x50040300
 80016ec:	50040100 	.word	0x50040100
 80016f0:	50040000 	.word	0x50040000

080016f4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b088      	sub	sp, #32
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80016fe:	4866      	ldr	r0, [pc, #408]	; (8001898 <HAL_ADC_PollForConversion+0x1a4>)
 8001700:	f7ff fcf6 	bl	80010f0 <LL_ADC_GetMultimode>
 8001704:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	695b      	ldr	r3, [r3, #20]
 800170a:	2b08      	cmp	r3, #8
 800170c:	d102      	bne.n	8001714 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800170e:	2308      	movs	r3, #8
 8001710:	61fb      	str	r3, [r7, #28]
 8001712:	e02a      	b.n	800176a <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d005      	beq.n	8001726 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	2b05      	cmp	r3, #5
 800171e:	d002      	beq.n	8001726 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	2b09      	cmp	r3, #9
 8001724:	d111      	bne.n	800174a <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	f003 0301 	and.w	r3, r3, #1
 8001730:	2b00      	cmp	r3, #0
 8001732:	d007      	beq.n	8001744 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001738:	f043 0220 	orr.w	r2, r3, #32
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e0a4      	b.n	800188e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001744:	2304      	movs	r3, #4
 8001746:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001748:	e00f      	b.n	800176a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800174a:	4853      	ldr	r0, [pc, #332]	; (8001898 <HAL_ADC_PollForConversion+0x1a4>)
 800174c:	f7ff fcde 	bl	800110c <LL_ADC_GetMultiDMATransfer>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d007      	beq.n	8001766 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800175a:	f043 0220 	orr.w	r2, r3, #32
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e093      	b.n	800188e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001766:	2304      	movs	r3, #4
 8001768:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800176a:	f7ff fb79 	bl	8000e60 <HAL_GetTick>
 800176e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001770:	e021      	b.n	80017b6 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001778:	d01d      	beq.n	80017b6 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800177a:	f7ff fb71 	bl	8000e60 <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	683a      	ldr	r2, [r7, #0]
 8001786:	429a      	cmp	r2, r3
 8001788:	d302      	bcc.n	8001790 <HAL_ADC_PollForConversion+0x9c>
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d112      	bne.n	80017b6 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	4013      	ands	r3, r2
 800179a:	2b00      	cmp	r3, #0
 800179c:	d10b      	bne.n	80017b6 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017a2:	f043 0204 	orr.w	r2, r3, #4
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e06b      	b.n	800188e <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	4013      	ands	r3, r2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d0d6      	beq.n	8001772 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017c8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff fbfc 	bl	8000fd2 <LL_ADC_REG_IsTriggerSourceSWStart>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d01c      	beq.n	800181a <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	7e5b      	ldrb	r3, [r3, #25]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d118      	bne.n	800181a <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0308 	and.w	r3, r3, #8
 80017f2:	2b08      	cmp	r3, #8
 80017f4:	d111      	bne.n	800181a <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001806:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d105      	bne.n	800181a <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001812:	f043 0201 	orr.w	r2, r3, #1
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a1f      	ldr	r2, [pc, #124]	; (800189c <HAL_ADC_PollForConversion+0x1a8>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d002      	beq.n	800182a <HAL_ADC_PollForConversion+0x136>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	e000      	b.n	800182c <HAL_ADC_PollForConversion+0x138>
 800182a:	4b1d      	ldr	r3, [pc, #116]	; (80018a0 <HAL_ADC_PollForConversion+0x1ac>)
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	6812      	ldr	r2, [r2, #0]
 8001830:	4293      	cmp	r3, r2
 8001832:	d008      	beq.n	8001846 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d005      	beq.n	8001846 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	2b05      	cmp	r3, #5
 800183e:	d002      	beq.n	8001846 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	2b09      	cmp	r3, #9
 8001844:	d104      	bne.n	8001850 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	61bb      	str	r3, [r7, #24]
 800184e:	e00c      	b.n	800186a <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a11      	ldr	r2, [pc, #68]	; (800189c <HAL_ADC_PollForConversion+0x1a8>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d002      	beq.n	8001860 <HAL_ADC_PollForConversion+0x16c>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	e000      	b.n	8001862 <HAL_ADC_PollForConversion+0x16e>
 8001860:	4b0f      	ldr	r3, [pc, #60]	; (80018a0 <HAL_ADC_PollForConversion+0x1ac>)
 8001862:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	2b08      	cmp	r3, #8
 800186e:	d104      	bne.n	800187a <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2208      	movs	r2, #8
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	e008      	b.n	800188c <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d103      	bne.n	800188c <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	220c      	movs	r2, #12
 800188a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3720      	adds	r7, #32
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	50040300 	.word	0x50040300
 800189c:	50040100 	.word	0x50040100
 80018a0:	50040000 	.word	0x50040000

080018a4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
	...

080018c0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b0b6      	sub	sp, #216	; 0xd8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018ca:	2300      	movs	r3, #0
 80018cc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d101      	bne.n	80018e2 <HAL_ADC_ConfigChannel+0x22>
 80018de:	2302      	movs	r3, #2
 80018e0:	e3c7      	b.n	8002072 <HAL_ADC_ConfigChannel+0x7b2>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2201      	movs	r2, #1
 80018e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff fcca 	bl	8001288 <LL_ADC_REG_IsConversionOngoing>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	f040 83a8 	bne.w	800204c <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	2b05      	cmp	r3, #5
 8001902:	d824      	bhi.n	800194e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	3b02      	subs	r3, #2
 800190a:	2b03      	cmp	r3, #3
 800190c:	d81b      	bhi.n	8001946 <HAL_ADC_ConfigChannel+0x86>
 800190e:	a201      	add	r2, pc, #4	; (adr r2, 8001914 <HAL_ADC_ConfigChannel+0x54>)
 8001910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001914:	08001925 	.word	0x08001925
 8001918:	0800192d 	.word	0x0800192d
 800191c:	08001935 	.word	0x08001935
 8001920:	0800193d 	.word	0x0800193d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	220c      	movs	r2, #12
 8001928:	605a      	str	r2, [r3, #4]
          break;
 800192a:	e010      	b.n	800194e <HAL_ADC_ConfigChannel+0x8e>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	2212      	movs	r2, #18
 8001930:	605a      	str	r2, [r3, #4]
          break;
 8001932:	e00c      	b.n	800194e <HAL_ADC_ConfigChannel+0x8e>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	2218      	movs	r2, #24
 8001938:	605a      	str	r2, [r3, #4]
          break;
 800193a:	e008      	b.n	800194e <HAL_ADC_ConfigChannel+0x8e>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001942:	605a      	str	r2, [r3, #4]
          break;
 8001944:	e003      	b.n	800194e <HAL_ADC_ConfigChannel+0x8e>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	2206      	movs	r2, #6
 800194a:	605a      	str	r2, [r3, #4]
          break;
 800194c:	bf00      	nop
      }
    }
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6818      	ldr	r0, [r3, #0]
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	6859      	ldr	r1, [r3, #4]
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	461a      	mov	r2, r3
 800195c:	f7ff fb4c 	bl	8000ff8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff fc8f 	bl	8001288 <LL_ADC_REG_IsConversionOngoing>
 800196a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff fc9b 	bl	80012ae <LL_ADC_INJ_IsConversionOngoing>
 8001978:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800197c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001980:	2b00      	cmp	r3, #0
 8001982:	f040 81a6 	bne.w	8001cd2 <HAL_ADC_ConfigChannel+0x412>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001986:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800198a:	2b00      	cmp	r3, #0
 800198c:	f040 81a1 	bne.w	8001cd2 <HAL_ADC_ConfigChannel+0x412>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6818      	ldr	r0, [r3, #0]
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	6819      	ldr	r1, [r3, #0]
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	461a      	mov	r2, r3
 800199e:	f7ff fb57 	bl	8001050 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	695a      	ldr	r2, [r3, #20]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	08db      	lsrs	r3, r3, #3
 80019ae:	f003 0303 	and.w	r3, r3, #3
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	691b      	ldr	r3, [r3, #16]
 80019c0:	2b04      	cmp	r3, #4
 80019c2:	d00a      	beq.n	80019da <HAL_ADC_ConfigChannel+0x11a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6818      	ldr	r0, [r3, #0]
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	6919      	ldr	r1, [r3, #16]
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80019d4:	f7ff faa8 	bl	8000f28 <LL_ADC_SetOffset>
 80019d8:	e17b      	b.n	8001cd2 <HAL_ADC_ConfigChannel+0x412>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2100      	movs	r1, #0
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff fac5 	bl	8000f70 <LL_ADC_GetOffsetChannel>
 80019e6:	4603      	mov	r3, r0
 80019e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d10a      	bne.n	8001a06 <HAL_ADC_ConfigChannel+0x146>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2100      	movs	r1, #0
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff faba 	bl	8000f70 <LL_ADC_GetOffsetChannel>
 80019fc:	4603      	mov	r3, r0
 80019fe:	0e9b      	lsrs	r3, r3, #26
 8001a00:	f003 021f 	and.w	r2, r3, #31
 8001a04:	e01e      	b.n	8001a44 <HAL_ADC_ConfigChannel+0x184>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff faaf 	bl	8000f70 <LL_ADC_GetOffsetChannel>
 8001a12:	4603      	mov	r3, r0
 8001a14:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a18:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001a1c:	fa93 f3a3 	rbit	r3, r3
 8001a20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a24:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001a28:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001a2c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d101      	bne.n	8001a38 <HAL_ADC_ConfigChannel+0x178>
  {
    return 32U;
 8001a34:	2320      	movs	r3, #32
 8001a36:	e004      	b.n	8001a42 <HAL_ADC_ConfigChannel+0x182>
  }
  return __builtin_clz(value);
 8001a38:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a3c:	fab3 f383 	clz	r3, r3
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d105      	bne.n	8001a5c <HAL_ADC_ConfigChannel+0x19c>
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	0e9b      	lsrs	r3, r3, #26
 8001a56:	f003 031f 	and.w	r3, r3, #31
 8001a5a:	e018      	b.n	8001a8e <HAL_ADC_ConfigChannel+0x1ce>
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a64:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001a68:	fa93 f3a3 	rbit	r3, r3
 8001a6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001a70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001a78:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d101      	bne.n	8001a84 <HAL_ADC_ConfigChannel+0x1c4>
    return 32U;
 8001a80:	2320      	movs	r3, #32
 8001a82:	e004      	b.n	8001a8e <HAL_ADC_ConfigChannel+0x1ce>
  return __builtin_clz(value);
 8001a84:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001a88:	fab3 f383 	clz	r3, r3
 8001a8c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d106      	bne.n	8001aa0 <HAL_ADC_ConfigChannel+0x1e0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2200      	movs	r2, #0
 8001a98:	2100      	movs	r1, #0
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff fa7e 	bl	8000f9c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff fa62 	bl	8000f70 <LL_ADC_GetOffsetChannel>
 8001aac:	4603      	mov	r3, r0
 8001aae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d10a      	bne.n	8001acc <HAL_ADC_ConfigChannel+0x20c>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2101      	movs	r1, #1
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff fa57 	bl	8000f70 <LL_ADC_GetOffsetChannel>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	0e9b      	lsrs	r3, r3, #26
 8001ac6:	f003 021f 	and.w	r2, r3, #31
 8001aca:	e01e      	b.n	8001b0a <HAL_ADC_ConfigChannel+0x24a>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2101      	movs	r1, #1
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff fa4c 	bl	8000f70 <LL_ADC_GetOffsetChannel>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ade:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001ae2:	fa93 f3a3 	rbit	r3, r3
 8001ae6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001aea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001aee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001af2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d101      	bne.n	8001afe <HAL_ADC_ConfigChannel+0x23e>
    return 32U;
 8001afa:	2320      	movs	r3, #32
 8001afc:	e004      	b.n	8001b08 <HAL_ADC_ConfigChannel+0x248>
  return __builtin_clz(value);
 8001afe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b02:	fab3 f383 	clz	r3, r3
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d105      	bne.n	8001b22 <HAL_ADC_ConfigChannel+0x262>
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	0e9b      	lsrs	r3, r3, #26
 8001b1c:	f003 031f 	and.w	r3, r3, #31
 8001b20:	e018      	b.n	8001b54 <HAL_ADC_ConfigChannel+0x294>
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001b2e:	fa93 f3a3 	rbit	r3, r3
 8001b32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001b36:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001b3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001b3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d101      	bne.n	8001b4a <HAL_ADC_ConfigChannel+0x28a>
    return 32U;
 8001b46:	2320      	movs	r3, #32
 8001b48:	e004      	b.n	8001b54 <HAL_ADC_ConfigChannel+0x294>
  return __builtin_clz(value);
 8001b4a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b4e:	fab3 f383 	clz	r3, r3
 8001b52:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d106      	bne.n	8001b66 <HAL_ADC_ConfigChannel+0x2a6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	2101      	movs	r1, #1
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff fa1b 	bl	8000f9c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2102      	movs	r1, #2
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff f9ff 	bl	8000f70 <LL_ADC_GetOffsetChannel>
 8001b72:	4603      	mov	r3, r0
 8001b74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d10a      	bne.n	8001b92 <HAL_ADC_ConfigChannel+0x2d2>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2102      	movs	r1, #2
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7ff f9f4 	bl	8000f70 <LL_ADC_GetOffsetChannel>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	0e9b      	lsrs	r3, r3, #26
 8001b8c:	f003 021f 	and.w	r2, r3, #31
 8001b90:	e01e      	b.n	8001bd0 <HAL_ADC_ConfigChannel+0x310>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2102      	movs	r1, #2
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff f9e9 	bl	8000f70 <LL_ADC_GetOffsetChannel>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ba8:	fa93 f3a3 	rbit	r3, r3
 8001bac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001bb0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001bb4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001bb8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d101      	bne.n	8001bc4 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8001bc0:	2320      	movs	r3, #32
 8001bc2:	e004      	b.n	8001bce <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8001bc4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001bc8:	fab3 f383 	clz	r3, r3
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d105      	bne.n	8001be8 <HAL_ADC_ConfigChannel+0x328>
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	0e9b      	lsrs	r3, r3, #26
 8001be2:	f003 031f 	and.w	r3, r3, #31
 8001be6:	e016      	b.n	8001c16 <HAL_ADC_ConfigChannel+0x356>
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001bf4:	fa93 f3a3 	rbit	r3, r3
 8001bf8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001bfa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001bfc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001c00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d101      	bne.n	8001c0c <HAL_ADC_ConfigChannel+0x34c>
    return 32U;
 8001c08:	2320      	movs	r3, #32
 8001c0a:	e004      	b.n	8001c16 <HAL_ADC_ConfigChannel+0x356>
  return __builtin_clz(value);
 8001c0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c10:	fab3 f383 	clz	r3, r3
 8001c14:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d106      	bne.n	8001c28 <HAL_ADC_ConfigChannel+0x368>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	2102      	movs	r1, #2
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff f9ba 	bl	8000f9c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2103      	movs	r1, #3
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff f99e 	bl	8000f70 <LL_ADC_GetOffsetChannel>
 8001c34:	4603      	mov	r3, r0
 8001c36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d10a      	bne.n	8001c54 <HAL_ADC_ConfigChannel+0x394>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2103      	movs	r1, #3
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff f993 	bl	8000f70 <LL_ADC_GetOffsetChannel>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	0e9b      	lsrs	r3, r3, #26
 8001c4e:	f003 021f 	and.w	r2, r3, #31
 8001c52:	e017      	b.n	8001c84 <HAL_ADC_ConfigChannel+0x3c4>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2103      	movs	r1, #3
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff f988 	bl	8000f70 <LL_ADC_GetOffsetChannel>
 8001c60:	4603      	mov	r3, r0
 8001c62:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c66:	fa93 f3a3 	rbit	r3, r3
 8001c6a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001c6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c6e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001c70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d101      	bne.n	8001c7a <HAL_ADC_ConfigChannel+0x3ba>
    return 32U;
 8001c76:	2320      	movs	r3, #32
 8001c78:	e003      	b.n	8001c82 <HAL_ADC_ConfigChannel+0x3c2>
  return __builtin_clz(value);
 8001c7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c7c:	fab3 f383 	clz	r3, r3
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d105      	bne.n	8001c9c <HAL_ADC_ConfigChannel+0x3dc>
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	0e9b      	lsrs	r3, r3, #26
 8001c96:	f003 031f 	and.w	r3, r3, #31
 8001c9a:	e011      	b.n	8001cc0 <HAL_ADC_ConfigChannel+0x400>
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ca4:	fa93 f3a3 	rbit	r3, r3
 8001ca8:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001caa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001cac:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001cae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d101      	bne.n	8001cb8 <HAL_ADC_ConfigChannel+0x3f8>
    return 32U;
 8001cb4:	2320      	movs	r3, #32
 8001cb6:	e003      	b.n	8001cc0 <HAL_ADC_ConfigChannel+0x400>
  return __builtin_clz(value);
 8001cb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cba:	fab3 f383 	clz	r3, r3
 8001cbe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d106      	bne.n	8001cd2 <HAL_ADC_ConfigChannel+0x412>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	2103      	movs	r1, #3
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff f965 	bl	8000f9c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff fa9c 	bl	8001214 <LL_ADC_IsEnabled>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	f040 8140 	bne.w	8001f64 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6818      	ldr	r0, [r3, #0]
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	6819      	ldr	r1, [r3, #0]
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	f7ff f9d9 	bl	80010a8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	4a8f      	ldr	r2, [pc, #572]	; (8001f38 <HAL_ADC_ConfigChannel+0x678>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	f040 8131 	bne.w	8001f64 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d10b      	bne.n	8001d2a <HAL_ADC_ConfigChannel+0x46a>
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	0e9b      	lsrs	r3, r3, #26
 8001d18:	3301      	adds	r3, #1
 8001d1a:	f003 031f 	and.w	r3, r3, #31
 8001d1e:	2b09      	cmp	r3, #9
 8001d20:	bf94      	ite	ls
 8001d22:	2301      	movls	r3, #1
 8001d24:	2300      	movhi	r3, #0
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	e019      	b.n	8001d5e <HAL_ADC_ConfigChannel+0x49e>
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d32:	fa93 f3a3 	rbit	r3, r3
 8001d36:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001d38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d3a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001d3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <HAL_ADC_ConfigChannel+0x486>
    return 32U;
 8001d42:	2320      	movs	r3, #32
 8001d44:	e003      	b.n	8001d4e <HAL_ADC_ConfigChannel+0x48e>
  return __builtin_clz(value);
 8001d46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d48:	fab3 f383 	clz	r3, r3
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	3301      	adds	r3, #1
 8001d50:	f003 031f 	and.w	r3, r3, #31
 8001d54:	2b09      	cmp	r3, #9
 8001d56:	bf94      	ite	ls
 8001d58:	2301      	movls	r3, #1
 8001d5a:	2300      	movhi	r3, #0
 8001d5c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d079      	beq.n	8001e56 <HAL_ADC_ConfigChannel+0x596>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d107      	bne.n	8001d7e <HAL_ADC_ConfigChannel+0x4be>
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	0e9b      	lsrs	r3, r3, #26
 8001d74:	3301      	adds	r3, #1
 8001d76:	069b      	lsls	r3, r3, #26
 8001d78:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d7c:	e015      	b.n	8001daa <HAL_ADC_ConfigChannel+0x4ea>
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d86:	fa93 f3a3 	rbit	r3, r3
 8001d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001d8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d8e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001d90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 8001d96:	2320      	movs	r3, #32
 8001d98:	e003      	b.n	8001da2 <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 8001d9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d9c:	fab3 f383 	clz	r3, r3
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	3301      	adds	r3, #1
 8001da4:	069b      	lsls	r3, r3, #26
 8001da6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d109      	bne.n	8001dca <HAL_ADC_ConfigChannel+0x50a>
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	0e9b      	lsrs	r3, r3, #26
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	f003 031f 	and.w	r3, r3, #31
 8001dc2:	2101      	movs	r1, #1
 8001dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc8:	e017      	b.n	8001dfa <HAL_ADC_ConfigChannel+0x53a>
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dd2:	fa93 f3a3 	rbit	r3, r3
 8001dd6:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001dd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dda:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001ddc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d101      	bne.n	8001de6 <HAL_ADC_ConfigChannel+0x526>
    return 32U;
 8001de2:	2320      	movs	r3, #32
 8001de4:	e003      	b.n	8001dee <HAL_ADC_ConfigChannel+0x52e>
  return __builtin_clz(value);
 8001de6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001de8:	fab3 f383 	clz	r3, r3
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	3301      	adds	r3, #1
 8001df0:	f003 031f 	and.w	r3, r3, #31
 8001df4:	2101      	movs	r1, #1
 8001df6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dfa:	ea42 0103 	orr.w	r1, r2, r3
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d10a      	bne.n	8001e20 <HAL_ADC_ConfigChannel+0x560>
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	0e9b      	lsrs	r3, r3, #26
 8001e10:	3301      	adds	r3, #1
 8001e12:	f003 021f 	and.w	r2, r3, #31
 8001e16:	4613      	mov	r3, r2
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	4413      	add	r3, r2
 8001e1c:	051b      	lsls	r3, r3, #20
 8001e1e:	e018      	b.n	8001e52 <HAL_ADC_ConfigChannel+0x592>
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e28:	fa93 f3a3 	rbit	r3, r3
 8001e2c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e30:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001e32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d101      	bne.n	8001e3c <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8001e38:	2320      	movs	r3, #32
 8001e3a:	e003      	b.n	8001e44 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8001e3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e3e:	fab3 f383 	clz	r3, r3
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	3301      	adds	r3, #1
 8001e46:	f003 021f 	and.w	r2, r3, #31
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	4413      	add	r3, r2
 8001e50:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e52:	430b      	orrs	r3, r1
 8001e54:	e081      	b.n	8001f5a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d107      	bne.n	8001e72 <HAL_ADC_ConfigChannel+0x5b2>
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	0e9b      	lsrs	r3, r3, #26
 8001e68:	3301      	adds	r3, #1
 8001e6a:	069b      	lsls	r3, r3, #26
 8001e6c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e70:	e015      	b.n	8001e9e <HAL_ADC_ConfigChannel+0x5de>
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e7a:	fa93 f3a3 	rbit	r3, r3
 8001e7e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e82:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d101      	bne.n	8001e8e <HAL_ADC_ConfigChannel+0x5ce>
    return 32U;
 8001e8a:	2320      	movs	r3, #32
 8001e8c:	e003      	b.n	8001e96 <HAL_ADC_ConfigChannel+0x5d6>
  return __builtin_clz(value);
 8001e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e90:	fab3 f383 	clz	r3, r3
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	3301      	adds	r3, #1
 8001e98:	069b      	lsls	r3, r3, #26
 8001e9a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d109      	bne.n	8001ebe <HAL_ADC_ConfigChannel+0x5fe>
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	0e9b      	lsrs	r3, r3, #26
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	f003 031f 	and.w	r3, r3, #31
 8001eb6:	2101      	movs	r1, #1
 8001eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ebc:	e017      	b.n	8001eee <HAL_ADC_ConfigChannel+0x62e>
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec4:	6a3b      	ldr	r3, [r7, #32]
 8001ec6:	fa93 f3a3 	rbit	r3, r3
 8001eca:	61fb      	str	r3, [r7, #28]
  return result;
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d101      	bne.n	8001eda <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 8001ed6:	2320      	movs	r3, #32
 8001ed8:	e003      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 8001eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001edc:	fab3 f383 	clz	r3, r3
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	f003 031f 	and.w	r3, r3, #31
 8001ee8:	2101      	movs	r1, #1
 8001eea:	fa01 f303 	lsl.w	r3, r1, r3
 8001eee:	ea42 0103 	orr.w	r1, r2, r3
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d10d      	bne.n	8001f1a <HAL_ADC_ConfigChannel+0x65a>
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	0e9b      	lsrs	r3, r3, #26
 8001f04:	3301      	adds	r3, #1
 8001f06:	f003 021f 	and.w	r2, r3, #31
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	4413      	add	r3, r2
 8001f10:	3b1e      	subs	r3, #30
 8001f12:	051b      	lsls	r3, r3, #20
 8001f14:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f18:	e01e      	b.n	8001f58 <HAL_ADC_ConfigChannel+0x698>
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	fa93 f3a3 	rbit	r3, r3
 8001f26:	613b      	str	r3, [r7, #16]
  return result;
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d104      	bne.n	8001f3c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001f32:	2320      	movs	r3, #32
 8001f34:	e006      	b.n	8001f44 <HAL_ADC_ConfigChannel+0x684>
 8001f36:	bf00      	nop
 8001f38:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	fab3 f383 	clz	r3, r3
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	3301      	adds	r3, #1
 8001f46:	f003 021f 	and.w	r2, r3, #31
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	4413      	add	r3, r2
 8001f50:	3b1e      	subs	r3, #30
 8001f52:	051b      	lsls	r3, r3, #20
 8001f54:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f58:	430b      	orrs	r3, r1
 8001f5a:	683a      	ldr	r2, [r7, #0]
 8001f5c:	6892      	ldr	r2, [r2, #8]
 8001f5e:	4619      	mov	r1, r3
 8001f60:	f7ff f876 	bl	8001050 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	4b44      	ldr	r3, [pc, #272]	; (800207c <HAL_ADC_ConfigChannel+0x7bc>)
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d07a      	beq.n	8002066 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f70:	4843      	ldr	r0, [pc, #268]	; (8002080 <HAL_ADC_ConfigChannel+0x7c0>)
 8001f72:	f7fe ffcb 	bl	8000f0c <LL_ADC_GetCommonPathInternalCh>
 8001f76:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a41      	ldr	r2, [pc, #260]	; (8002084 <HAL_ADC_ConfigChannel+0x7c4>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d12c      	bne.n	8001fde <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001f84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d126      	bne.n	8001fde <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a3c      	ldr	r2, [pc, #240]	; (8002088 <HAL_ADC_ConfigChannel+0x7c8>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d004      	beq.n	8001fa4 <HAL_ADC_ConfigChannel+0x6e4>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a3b      	ldr	r2, [pc, #236]	; (800208c <HAL_ADC_ConfigChannel+0x7cc>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d15d      	bne.n	8002060 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001fa4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001fa8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001fac:	4619      	mov	r1, r3
 8001fae:	4834      	ldr	r0, [pc, #208]	; (8002080 <HAL_ADC_ConfigChannel+0x7c0>)
 8001fb0:	f7fe ff99 	bl	8000ee6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001fb4:	4b36      	ldr	r3, [pc, #216]	; (8002090 <HAL_ADC_ConfigChannel+0x7d0>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	099b      	lsrs	r3, r3, #6
 8001fba:	4a36      	ldr	r2, [pc, #216]	; (8002094 <HAL_ADC_ConfigChannel+0x7d4>)
 8001fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc0:	099b      	lsrs	r3, r3, #6
 8001fc2:	1c5a      	adds	r2, r3, #1
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	4413      	add	r3, r2
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001fce:	e002      	b.n	8001fd6 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d1f9      	bne.n	8001fd0 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001fdc:	e040      	b.n	8002060 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a2d      	ldr	r2, [pc, #180]	; (8002098 <HAL_ADC_ConfigChannel+0x7d8>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d118      	bne.n	800201a <HAL_ADC_ConfigChannel+0x75a>
 8001fe8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001fec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d112      	bne.n	800201a <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a23      	ldr	r2, [pc, #140]	; (8002088 <HAL_ADC_ConfigChannel+0x7c8>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d004      	beq.n	8002008 <HAL_ADC_ConfigChannel+0x748>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a22      	ldr	r2, [pc, #136]	; (800208c <HAL_ADC_ConfigChannel+0x7cc>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d12d      	bne.n	8002064 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002008:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800200c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002010:	4619      	mov	r1, r3
 8002012:	481b      	ldr	r0, [pc, #108]	; (8002080 <HAL_ADC_ConfigChannel+0x7c0>)
 8002014:	f7fe ff67 	bl	8000ee6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002018:	e024      	b.n	8002064 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a1f      	ldr	r2, [pc, #124]	; (800209c <HAL_ADC_ConfigChannel+0x7dc>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d120      	bne.n	8002066 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002024:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002028:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d11a      	bne.n	8002066 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a14      	ldr	r2, [pc, #80]	; (8002088 <HAL_ADC_ConfigChannel+0x7c8>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d115      	bne.n	8002066 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800203a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800203e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002042:	4619      	mov	r1, r3
 8002044:	480e      	ldr	r0, [pc, #56]	; (8002080 <HAL_ADC_ConfigChannel+0x7c0>)
 8002046:	f7fe ff4e 	bl	8000ee6 <LL_ADC_SetCommonPathInternalCh>
 800204a:	e00c      	b.n	8002066 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002050:	f043 0220 	orr.w	r2, r3, #32
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800205e:	e002      	b.n	8002066 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002060:	bf00      	nop
 8002062:	e000      	b.n	8002066 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002064:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800206e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002072:	4618      	mov	r0, r3
 8002074:	37d8      	adds	r7, #216	; 0xd8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	80080000 	.word	0x80080000
 8002080:	50040300 	.word	0x50040300
 8002084:	c7520000 	.word	0xc7520000
 8002088:	50040000 	.word	0x50040000
 800208c:	50040200 	.word	0x50040200
 8002090:	20000000 	.word	0x20000000
 8002094:	053e2d63 	.word	0x053e2d63
 8002098:	cb840000 	.word	0xcb840000
 800209c:	80000001 	.word	0x80000001

080020a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80020a8:	2300      	movs	r3, #0
 80020aa:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7ff f8af 	bl	8001214 <LL_ADC_IsEnabled>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d169      	bne.n	8002190 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	689a      	ldr	r2, [r3, #8]
 80020c2:	4b36      	ldr	r3, [pc, #216]	; (800219c <ADC_Enable+0xfc>)
 80020c4:	4013      	ands	r3, r2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d00d      	beq.n	80020e6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ce:	f043 0210 	orr.w	r2, r3, #16
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020da:	f043 0201 	orr.w	r2, r3, #1
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e055      	b.n	8002192 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff f86a 	bl	80011c4 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80020f0:	482b      	ldr	r0, [pc, #172]	; (80021a0 <ADC_Enable+0x100>)
 80020f2:	f7fe ff0b 	bl	8000f0c <LL_ADC_GetCommonPathInternalCh>
 80020f6:	4603      	mov	r3, r0
 80020f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d013      	beq.n	8002128 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002100:	4b28      	ldr	r3, [pc, #160]	; (80021a4 <ADC_Enable+0x104>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	099b      	lsrs	r3, r3, #6
 8002106:	4a28      	ldr	r2, [pc, #160]	; (80021a8 <ADC_Enable+0x108>)
 8002108:	fba2 2303 	umull	r2, r3, r2, r3
 800210c:	099b      	lsrs	r3, r3, #6
 800210e:	1c5a      	adds	r2, r3, #1
 8002110:	4613      	mov	r3, r2
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	4413      	add	r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800211a:	e002      	b.n	8002122 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	3b01      	subs	r3, #1
 8002120:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d1f9      	bne.n	800211c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002128:	f7fe fe9a 	bl	8000e60 <HAL_GetTick>
 800212c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800212e:	e028      	b.n	8002182 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4618      	mov	r0, r3
 8002136:	f7ff f86d 	bl	8001214 <LL_ADC_IsEnabled>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d104      	bne.n	800214a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4618      	mov	r0, r3
 8002146:	f7ff f83d 	bl	80011c4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800214a:	f7fe fe89 	bl	8000e60 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	2b02      	cmp	r3, #2
 8002156:	d914      	bls.n	8002182 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	2b01      	cmp	r3, #1
 8002164:	d00d      	beq.n	8002182 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800216a:	f043 0210 	orr.w	r2, r3, #16
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002176:	f043 0201 	orr.w	r2, r3, #1
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e007      	b.n	8002192 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0301 	and.w	r3, r3, #1
 800218c:	2b01      	cmp	r3, #1
 800218e:	d1cf      	bne.n	8002130 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	8000003f 	.word	0x8000003f
 80021a0:	50040300 	.word	0x50040300
 80021a4:	20000000 	.word	0x20000000
 80021a8:	053e2d63 	.word	0x053e2d63

080021ac <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7ff f83e 	bl	800123a <LL_ADC_IsDisableOngoing>
 80021be:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff f825 	bl	8001214 <LL_ADC_IsEnabled>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d047      	beq.n	8002260 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d144      	bne.n	8002260 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f003 030d 	and.w	r3, r3, #13
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d10c      	bne.n	80021fe <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7fe ffff 	bl	80011ec <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2203      	movs	r2, #3
 80021f4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80021f6:	f7fe fe33 	bl	8000e60 <HAL_GetTick>
 80021fa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80021fc:	e029      	b.n	8002252 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002202:	f043 0210 	orr.w	r2, r3, #16
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800220e:	f043 0201 	orr.w	r2, r3, #1
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e023      	b.n	8002262 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800221a:	f7fe fe21 	bl	8000e60 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d914      	bls.n	8002252 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00d      	beq.n	8002252 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800223a:	f043 0210 	orr.w	r2, r3, #16
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002246:	f043 0201 	orr.w	r2, r3, #1
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e007      	b.n	8002262 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	2b00      	cmp	r3, #0
 800225e:	d1dc      	bne.n	800221a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3710      	adds	r7, #16
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <LL_ADC_IsEnabled>:
{
 800226a:	b480      	push	{r7}
 800226c:	b083      	sub	sp, #12
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	2b01      	cmp	r3, #1
 800227c:	d101      	bne.n	8002282 <LL_ADC_IsEnabled+0x18>
 800227e:	2301      	movs	r3, #1
 8002280:	e000      	b.n	8002284 <LL_ADC_IsEnabled+0x1a>
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <LL_ADC_StartCalibration>:
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80022a2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022a6:	683a      	ldr	r2, [r7, #0]
 80022a8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80022ac:	4313      	orrs	r3, r2
 80022ae:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	609a      	str	r2, [r3, #8]
}
 80022b6:	bf00      	nop
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr

080022c2 <LL_ADC_IsCalibrationOnGoing>:
{
 80022c2:	b480      	push	{r7}
 80022c4:	b083      	sub	sp, #12
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80022d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80022d6:	d101      	bne.n	80022dc <LL_ADC_IsCalibrationOnGoing+0x1a>
 80022d8:	2301      	movs	r3, #1
 80022da:	e000      	b.n	80022de <LL_ADC_IsCalibrationOnGoing+0x1c>
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr

080022ea <LL_ADC_REG_IsConversionOngoing>:
{
 80022ea:	b480      	push	{r7}
 80022ec:	b083      	sub	sp, #12
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f003 0304 	and.w	r3, r3, #4
 80022fa:	2b04      	cmp	r3, #4
 80022fc:	d101      	bne.n	8002302 <LL_ADC_REG_IsConversionOngoing+0x18>
 80022fe:	2301      	movs	r3, #1
 8002300:	e000      	b.n	8002304 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002302:	2300      	movs	r3, #0
}
 8002304:	4618      	mov	r0, r3
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800231a:	2300      	movs	r3, #0
 800231c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002324:	2b01      	cmp	r3, #1
 8002326:	d101      	bne.n	800232c <HAL_ADCEx_Calibration_Start+0x1c>
 8002328:	2302      	movs	r3, #2
 800232a:	e04d      	b.n	80023c8 <HAL_ADCEx_Calibration_Start+0xb8>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f7ff ff39 	bl	80021ac <ADC_Disable>
 800233a:	4603      	mov	r3, r0
 800233c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800233e:	7bfb      	ldrb	r3, [r7, #15]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d136      	bne.n	80023b2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002348:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800234c:	f023 0302 	bic.w	r3, r3, #2
 8002350:	f043 0202 	orr.w	r2, r3, #2
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	6839      	ldr	r1, [r7, #0]
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff ff96 	bl	8002290 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002364:	e014      	b.n	8002390 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	3301      	adds	r3, #1
 800236a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8002372:	d30d      	bcc.n	8002390 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002378:	f023 0312 	bic.w	r3, r3, #18
 800237c:	f043 0210 	orr.w	r2, r3, #16
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e01b      	b.n	80023c8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4618      	mov	r0, r3
 8002396:	f7ff ff94 	bl	80022c2 <LL_ADC_IsCalibrationOnGoing>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d1e2      	bne.n	8002366 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a4:	f023 0303 	bic.w	r3, r3, #3
 80023a8:	f043 0201 	orr.w	r2, r3, #1
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	655a      	str	r2, [r3, #84]	; 0x54
 80023b0:	e005      	b.n	80023be <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b6:	f043 0210 	orr.w	r2, r3, #16
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80023c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3710      	adds	r7, #16
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80023d0:	b590      	push	{r4, r7, lr}
 80023d2:	b09f      	sub	sp, #124	; 0x7c
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023da:	2300      	movs	r3, #0
 80023dc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d101      	bne.n	80023ee <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80023ea:	2302      	movs	r3, #2
 80023ec:	e093      	b.n	8002516 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2201      	movs	r2, #1
 80023f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80023f6:	2300      	movs	r3, #0
 80023f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80023fa:	2300      	movs	r3, #0
 80023fc:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a47      	ldr	r2, [pc, #284]	; (8002520 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d102      	bne.n	800240e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002408:	4b46      	ldr	r3, [pc, #280]	; (8002524 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800240a:	60bb      	str	r3, [r7, #8]
 800240c:	e001      	b.n	8002412 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800240e:	2300      	movs	r3, #0
 8002410:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d10b      	bne.n	8002430 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800241c:	f043 0220 	orr.w	r2, r3, #32
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e072      	b.n	8002516 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	4618      	mov	r0, r3
 8002434:	f7ff ff59 	bl	80022ea <LL_ADC_REG_IsConversionOngoing>
 8002438:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4618      	mov	r0, r3
 8002440:	f7ff ff53 	bl	80022ea <LL_ADC_REG_IsConversionOngoing>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d154      	bne.n	80024f4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800244a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800244c:	2b00      	cmp	r3, #0
 800244e:	d151      	bne.n	80024f4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002450:	4b35      	ldr	r3, [pc, #212]	; (8002528 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002452:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d02c      	beq.n	80024b6 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800245c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	6859      	ldr	r1, [r3, #4]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800246e:	035b      	lsls	r3, r3, #13
 8002470:	430b      	orrs	r3, r1
 8002472:	431a      	orrs	r2, r3
 8002474:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002476:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002478:	4829      	ldr	r0, [pc, #164]	; (8002520 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800247a:	f7ff fef6 	bl	800226a <LL_ADC_IsEnabled>
 800247e:	4604      	mov	r4, r0
 8002480:	4828      	ldr	r0, [pc, #160]	; (8002524 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002482:	f7ff fef2 	bl	800226a <LL_ADC_IsEnabled>
 8002486:	4603      	mov	r3, r0
 8002488:	431c      	orrs	r4, r3
 800248a:	4828      	ldr	r0, [pc, #160]	; (800252c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800248c:	f7ff feed 	bl	800226a <LL_ADC_IsEnabled>
 8002490:	4603      	mov	r3, r0
 8002492:	4323      	orrs	r3, r4
 8002494:	2b00      	cmp	r3, #0
 8002496:	d137      	bne.n	8002508 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002498:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80024a0:	f023 030f 	bic.w	r3, r3, #15
 80024a4:	683a      	ldr	r2, [r7, #0]
 80024a6:	6811      	ldr	r1, [r2, #0]
 80024a8:	683a      	ldr	r2, [r7, #0]
 80024aa:	6892      	ldr	r2, [r2, #8]
 80024ac:	430a      	orrs	r2, r1
 80024ae:	431a      	orrs	r2, r3
 80024b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024b2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80024b4:	e028      	b.n	8002508 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80024b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024c0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024c2:	4817      	ldr	r0, [pc, #92]	; (8002520 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80024c4:	f7ff fed1 	bl	800226a <LL_ADC_IsEnabled>
 80024c8:	4604      	mov	r4, r0
 80024ca:	4816      	ldr	r0, [pc, #88]	; (8002524 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80024cc:	f7ff fecd 	bl	800226a <LL_ADC_IsEnabled>
 80024d0:	4603      	mov	r3, r0
 80024d2:	431c      	orrs	r4, r3
 80024d4:	4815      	ldr	r0, [pc, #84]	; (800252c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80024d6:	f7ff fec8 	bl	800226a <LL_ADC_IsEnabled>
 80024da:	4603      	mov	r3, r0
 80024dc:	4323      	orrs	r3, r4
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d112      	bne.n	8002508 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80024e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80024ea:	f023 030f 	bic.w	r3, r3, #15
 80024ee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80024f0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80024f2:	e009      	b.n	8002508 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024f8:	f043 0220 	orr.w	r2, r3, #32
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002506:	e000      	b.n	800250a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002508:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002512:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002516:	4618      	mov	r0, r3
 8002518:	377c      	adds	r7, #124	; 0x7c
 800251a:	46bd      	mov	sp, r7
 800251c:	bd90      	pop	{r4, r7, pc}
 800251e:	bf00      	nop
 8002520:	50040000 	.word	0x50040000
 8002524:	50040100 	.word	0x50040100
 8002528:	50040300 	.word	0x50040300
 800252c:	50040200 	.word	0x50040200

08002530 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f003 0307 	and.w	r3, r3, #7
 800253e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002540:	4b0c      	ldr	r3, [pc, #48]	; (8002574 <__NVIC_SetPriorityGrouping+0x44>)
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002546:	68ba      	ldr	r2, [r7, #8]
 8002548:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800254c:	4013      	ands	r3, r2
 800254e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002558:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800255c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002560:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002562:	4a04      	ldr	r2, [pc, #16]	; (8002574 <__NVIC_SetPriorityGrouping+0x44>)
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	60d3      	str	r3, [r2, #12]
}
 8002568:	bf00      	nop
 800256a:	3714      	adds	r7, #20
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	e000ed00 	.word	0xe000ed00

08002578 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800257c:	4b04      	ldr	r3, [pc, #16]	; (8002590 <__NVIC_GetPriorityGrouping+0x18>)
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	0a1b      	lsrs	r3, r3, #8
 8002582:	f003 0307 	and.w	r3, r3, #7
}
 8002586:	4618      	mov	r0, r3
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr
 8002590:	e000ed00 	.word	0xe000ed00

08002594 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	4603      	mov	r3, r0
 800259c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800259e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	db0b      	blt.n	80025be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025a6:	79fb      	ldrb	r3, [r7, #7]
 80025a8:	f003 021f 	and.w	r2, r3, #31
 80025ac:	4907      	ldr	r1, [pc, #28]	; (80025cc <__NVIC_EnableIRQ+0x38>)
 80025ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b2:	095b      	lsrs	r3, r3, #5
 80025b4:	2001      	movs	r0, #1
 80025b6:	fa00 f202 	lsl.w	r2, r0, r2
 80025ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025be:	bf00      	nop
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	e000e100 	.word	0xe000e100

080025d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	4603      	mov	r3, r0
 80025d8:	6039      	str	r1, [r7, #0]
 80025da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	db0a      	blt.n	80025fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	b2da      	uxtb	r2, r3
 80025e8:	490c      	ldr	r1, [pc, #48]	; (800261c <__NVIC_SetPriority+0x4c>)
 80025ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ee:	0112      	lsls	r2, r2, #4
 80025f0:	b2d2      	uxtb	r2, r2
 80025f2:	440b      	add	r3, r1
 80025f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025f8:	e00a      	b.n	8002610 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	b2da      	uxtb	r2, r3
 80025fe:	4908      	ldr	r1, [pc, #32]	; (8002620 <__NVIC_SetPriority+0x50>)
 8002600:	79fb      	ldrb	r3, [r7, #7]
 8002602:	f003 030f 	and.w	r3, r3, #15
 8002606:	3b04      	subs	r3, #4
 8002608:	0112      	lsls	r2, r2, #4
 800260a:	b2d2      	uxtb	r2, r2
 800260c:	440b      	add	r3, r1
 800260e:	761a      	strb	r2, [r3, #24]
}
 8002610:	bf00      	nop
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr
 800261c:	e000e100 	.word	0xe000e100
 8002620:	e000ed00 	.word	0xe000ed00

08002624 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002624:	b480      	push	{r7}
 8002626:	b089      	sub	sp, #36	; 0x24
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f003 0307 	and.w	r3, r3, #7
 8002636:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	f1c3 0307 	rsb	r3, r3, #7
 800263e:	2b04      	cmp	r3, #4
 8002640:	bf28      	it	cs
 8002642:	2304      	movcs	r3, #4
 8002644:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	3304      	adds	r3, #4
 800264a:	2b06      	cmp	r3, #6
 800264c:	d902      	bls.n	8002654 <NVIC_EncodePriority+0x30>
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	3b03      	subs	r3, #3
 8002652:	e000      	b.n	8002656 <NVIC_EncodePriority+0x32>
 8002654:	2300      	movs	r3, #0
 8002656:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002658:	f04f 32ff 	mov.w	r2, #4294967295
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	fa02 f303 	lsl.w	r3, r2, r3
 8002662:	43da      	mvns	r2, r3
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	401a      	ands	r2, r3
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800266c:	f04f 31ff 	mov.w	r1, #4294967295
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	fa01 f303 	lsl.w	r3, r1, r3
 8002676:	43d9      	mvns	r1, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800267c:	4313      	orrs	r3, r2
         );
}
 800267e:	4618      	mov	r0, r3
 8002680:	3724      	adds	r7, #36	; 0x24
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
	...

0800268c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	3b01      	subs	r3, #1
 8002698:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800269c:	d301      	bcc.n	80026a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800269e:	2301      	movs	r3, #1
 80026a0:	e00f      	b.n	80026c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026a2:	4a0a      	ldr	r2, [pc, #40]	; (80026cc <SysTick_Config+0x40>)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	3b01      	subs	r3, #1
 80026a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026aa:	210f      	movs	r1, #15
 80026ac:	f04f 30ff 	mov.w	r0, #4294967295
 80026b0:	f7ff ff8e 	bl	80025d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026b4:	4b05      	ldr	r3, [pc, #20]	; (80026cc <SysTick_Config+0x40>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026ba:	4b04      	ldr	r3, [pc, #16]	; (80026cc <SysTick_Config+0x40>)
 80026bc:	2207      	movs	r2, #7
 80026be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	e000e010 	.word	0xe000e010

080026d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f7ff ff29 	bl	8002530 <__NVIC_SetPriorityGrouping>
}
 80026de:	bf00      	nop
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026e6:	b580      	push	{r7, lr}
 80026e8:	b086      	sub	sp, #24
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	4603      	mov	r3, r0
 80026ee:	60b9      	str	r1, [r7, #8]
 80026f0:	607a      	str	r2, [r7, #4]
 80026f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80026f4:	2300      	movs	r3, #0
 80026f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026f8:	f7ff ff3e 	bl	8002578 <__NVIC_GetPriorityGrouping>
 80026fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	68b9      	ldr	r1, [r7, #8]
 8002702:	6978      	ldr	r0, [r7, #20]
 8002704:	f7ff ff8e 	bl	8002624 <NVIC_EncodePriority>
 8002708:	4602      	mov	r2, r0
 800270a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800270e:	4611      	mov	r1, r2
 8002710:	4618      	mov	r0, r3
 8002712:	f7ff ff5d 	bl	80025d0 <__NVIC_SetPriority>
}
 8002716:	bf00      	nop
 8002718:	3718      	adds	r7, #24
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	b082      	sub	sp, #8
 8002722:	af00      	add	r7, sp, #0
 8002724:	4603      	mov	r3, r0
 8002726:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272c:	4618      	mov	r0, r3
 800272e:	f7ff ff31 	bl	8002594 <__NVIC_EnableIRQ>
}
 8002732:	bf00      	nop
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b082      	sub	sp, #8
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f7ff ffa2 	bl	800268c <SysTick_Config>
 8002748:	4603      	mov	r3, r0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002752:	b480      	push	{r7}
 8002754:	b085      	sub	sp, #20
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800275a:	2300      	movs	r3, #0
 800275c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d008      	beq.n	800277c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2204      	movs	r2, #4
 800276e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e022      	b.n	80027c2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f022 020e 	bic.w	r2, r2, #14
 800278a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f022 0201 	bic.w	r2, r2, #1
 800279a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a0:	f003 021c 	and.w	r2, r3, #28
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a8:	2101      	movs	r1, #1
 80027aa:	fa01 f202 	lsl.w	r2, r1, r2
 80027ae:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80027c0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3714      	adds	r7, #20
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr

080027ce <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b084      	sub	sp, #16
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027d6:	2300      	movs	r3, #0
 80027d8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d005      	beq.n	80027f2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2204      	movs	r2, #4
 80027ea:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	73fb      	strb	r3, [r7, #15]
 80027f0:	e029      	b.n	8002846 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f022 020e 	bic.w	r2, r2, #14
 8002800:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f022 0201 	bic.w	r2, r2, #1
 8002810:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002816:	f003 021c 	and.w	r2, r3, #28
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281e:	2101      	movs	r1, #1
 8002820:	fa01 f202 	lsl.w	r2, r1, r2
 8002824:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2201      	movs	r2, #1
 800282a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800283a:	2b00      	cmp	r3, #0
 800283c:	d003      	beq.n	8002846 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	4798      	blx	r3
    }
  }
  return status;
 8002846:	7bfb      	ldrb	r3, [r7, #15]
}
 8002848:	4618      	mov	r0, r3
 800284a:	3710      	adds	r7, #16
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002850:	b480      	push	{r7}
 8002852:	b087      	sub	sp, #28
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800285a:	2300      	movs	r3, #0
 800285c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800285e:	e17f      	b.n	8002b60 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	2101      	movs	r1, #1
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	fa01 f303 	lsl.w	r3, r1, r3
 800286c:	4013      	ands	r3, r2
 800286e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2b00      	cmp	r3, #0
 8002874:	f000 8171 	beq.w	8002b5a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f003 0303 	and.w	r3, r3, #3
 8002880:	2b01      	cmp	r3, #1
 8002882:	d005      	beq.n	8002890 <HAL_GPIO_Init+0x40>
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f003 0303 	and.w	r3, r3, #3
 800288c:	2b02      	cmp	r3, #2
 800288e:	d130      	bne.n	80028f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	2203      	movs	r2, #3
 800289c:	fa02 f303 	lsl.w	r3, r2, r3
 80028a0:	43db      	mvns	r3, r3
 80028a2:	693a      	ldr	r2, [r7, #16]
 80028a4:	4013      	ands	r3, r2
 80028a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	68da      	ldr	r2, [r3, #12]
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	005b      	lsls	r3, r3, #1
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	693a      	ldr	r2, [r7, #16]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	693a      	ldr	r2, [r7, #16]
 80028be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028c6:	2201      	movs	r2, #1
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	fa02 f303 	lsl.w	r3, r2, r3
 80028ce:	43db      	mvns	r3, r3
 80028d0:	693a      	ldr	r2, [r7, #16]
 80028d2:	4013      	ands	r3, r2
 80028d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	091b      	lsrs	r3, r3, #4
 80028dc:	f003 0201 	and.w	r2, r3, #1
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	fa02 f303 	lsl.w	r3, r2, r3
 80028e6:	693a      	ldr	r2, [r7, #16]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f003 0303 	and.w	r3, r3, #3
 80028fa:	2b03      	cmp	r3, #3
 80028fc:	d118      	bne.n	8002930 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002902:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002904:	2201      	movs	r2, #1
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	43db      	mvns	r3, r3
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	4013      	ands	r3, r2
 8002912:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	08db      	lsrs	r3, r3, #3
 800291a:	f003 0201 	and.w	r2, r3, #1
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	4313      	orrs	r3, r2
 8002928:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	693a      	ldr	r2, [r7, #16]
 800292e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f003 0303 	and.w	r3, r3, #3
 8002938:	2b03      	cmp	r3, #3
 800293a:	d017      	beq.n	800296c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	2203      	movs	r2, #3
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	43db      	mvns	r3, r3
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	4013      	ands	r3, r2
 8002952:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	689a      	ldr	r2, [r3, #8]
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	fa02 f303 	lsl.w	r3, r2, r3
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	4313      	orrs	r3, r2
 8002964:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f003 0303 	and.w	r3, r3, #3
 8002974:	2b02      	cmp	r3, #2
 8002976:	d123      	bne.n	80029c0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	08da      	lsrs	r2, r3, #3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	3208      	adds	r2, #8
 8002980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002984:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	f003 0307 	and.w	r3, r3, #7
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	220f      	movs	r2, #15
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	43db      	mvns	r3, r3
 8002996:	693a      	ldr	r2, [r7, #16]
 8002998:	4013      	ands	r3, r2
 800299a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	691a      	ldr	r2, [r3, #16]
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	f003 0307 	and.w	r3, r3, #7
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	693a      	ldr	r2, [r7, #16]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	08da      	lsrs	r2, r3, #3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	3208      	adds	r2, #8
 80029ba:	6939      	ldr	r1, [r7, #16]
 80029bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	2203      	movs	r2, #3
 80029cc:	fa02 f303 	lsl.w	r3, r2, r3
 80029d0:	43db      	mvns	r3, r3
 80029d2:	693a      	ldr	r2, [r7, #16]
 80029d4:	4013      	ands	r3, r2
 80029d6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f003 0203 	and.w	r2, r3, #3
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	005b      	lsls	r3, r3, #1
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	693a      	ldr	r2, [r7, #16]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	693a      	ldr	r2, [r7, #16]
 80029f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	f000 80ac 	beq.w	8002b5a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a02:	4b5f      	ldr	r3, [pc, #380]	; (8002b80 <HAL_GPIO_Init+0x330>)
 8002a04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a06:	4a5e      	ldr	r2, [pc, #376]	; (8002b80 <HAL_GPIO_Init+0x330>)
 8002a08:	f043 0301 	orr.w	r3, r3, #1
 8002a0c:	6613      	str	r3, [r2, #96]	; 0x60
 8002a0e:	4b5c      	ldr	r3, [pc, #368]	; (8002b80 <HAL_GPIO_Init+0x330>)
 8002a10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	60bb      	str	r3, [r7, #8]
 8002a18:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002a1a:	4a5a      	ldr	r2, [pc, #360]	; (8002b84 <HAL_GPIO_Init+0x334>)
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	089b      	lsrs	r3, r3, #2
 8002a20:	3302      	adds	r3, #2
 8002a22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a26:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	f003 0303 	and.w	r3, r3, #3
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	220f      	movs	r2, #15
 8002a32:	fa02 f303 	lsl.w	r3, r2, r3
 8002a36:	43db      	mvns	r3, r3
 8002a38:	693a      	ldr	r2, [r7, #16]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a44:	d025      	beq.n	8002a92 <HAL_GPIO_Init+0x242>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a4f      	ldr	r2, [pc, #316]	; (8002b88 <HAL_GPIO_Init+0x338>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d01f      	beq.n	8002a8e <HAL_GPIO_Init+0x23e>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a4e      	ldr	r2, [pc, #312]	; (8002b8c <HAL_GPIO_Init+0x33c>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d019      	beq.n	8002a8a <HAL_GPIO_Init+0x23a>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a4d      	ldr	r2, [pc, #308]	; (8002b90 <HAL_GPIO_Init+0x340>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d013      	beq.n	8002a86 <HAL_GPIO_Init+0x236>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a4c      	ldr	r2, [pc, #304]	; (8002b94 <HAL_GPIO_Init+0x344>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d00d      	beq.n	8002a82 <HAL_GPIO_Init+0x232>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a4b      	ldr	r2, [pc, #300]	; (8002b98 <HAL_GPIO_Init+0x348>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d007      	beq.n	8002a7e <HAL_GPIO_Init+0x22e>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a4a      	ldr	r2, [pc, #296]	; (8002b9c <HAL_GPIO_Init+0x34c>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d101      	bne.n	8002a7a <HAL_GPIO_Init+0x22a>
 8002a76:	2306      	movs	r3, #6
 8002a78:	e00c      	b.n	8002a94 <HAL_GPIO_Init+0x244>
 8002a7a:	2307      	movs	r3, #7
 8002a7c:	e00a      	b.n	8002a94 <HAL_GPIO_Init+0x244>
 8002a7e:	2305      	movs	r3, #5
 8002a80:	e008      	b.n	8002a94 <HAL_GPIO_Init+0x244>
 8002a82:	2304      	movs	r3, #4
 8002a84:	e006      	b.n	8002a94 <HAL_GPIO_Init+0x244>
 8002a86:	2303      	movs	r3, #3
 8002a88:	e004      	b.n	8002a94 <HAL_GPIO_Init+0x244>
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	e002      	b.n	8002a94 <HAL_GPIO_Init+0x244>
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e000      	b.n	8002a94 <HAL_GPIO_Init+0x244>
 8002a92:	2300      	movs	r3, #0
 8002a94:	697a      	ldr	r2, [r7, #20]
 8002a96:	f002 0203 	and.w	r2, r2, #3
 8002a9a:	0092      	lsls	r2, r2, #2
 8002a9c:	4093      	lsls	r3, r2
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002aa4:	4937      	ldr	r1, [pc, #220]	; (8002b84 <HAL_GPIO_Init+0x334>)
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	089b      	lsrs	r3, r3, #2
 8002aaa:	3302      	adds	r3, #2
 8002aac:	693a      	ldr	r2, [r7, #16]
 8002aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ab2:	4b3b      	ldr	r3, [pc, #236]	; (8002ba0 <HAL_GPIO_Init+0x350>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	43db      	mvns	r3, r3
 8002abc:	693a      	ldr	r2, [r7, #16]
 8002abe:	4013      	ands	r3, r2
 8002ac0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d003      	beq.n	8002ad6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002ace:	693a      	ldr	r2, [r7, #16]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ad6:	4a32      	ldr	r2, [pc, #200]	; (8002ba0 <HAL_GPIO_Init+0x350>)
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002adc:	4b30      	ldr	r3, [pc, #192]	; (8002ba0 <HAL_GPIO_Init+0x350>)
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	43db      	mvns	r3, r3
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	4013      	ands	r3, r2
 8002aea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d003      	beq.n	8002b00 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002af8:	693a      	ldr	r2, [r7, #16]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b00:	4a27      	ldr	r2, [pc, #156]	; (8002ba0 <HAL_GPIO_Init+0x350>)
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002b06:	4b26      	ldr	r3, [pc, #152]	; (8002ba0 <HAL_GPIO_Init+0x350>)
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	43db      	mvns	r3, r3
 8002b10:	693a      	ldr	r2, [r7, #16]
 8002b12:	4013      	ands	r3, r2
 8002b14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d003      	beq.n	8002b2a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b2a:	4a1d      	ldr	r2, [pc, #116]	; (8002ba0 <HAL_GPIO_Init+0x350>)
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002b30:	4b1b      	ldr	r3, [pc, #108]	; (8002ba0 <HAL_GPIO_Init+0x350>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	43db      	mvns	r3, r3
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d003      	beq.n	8002b54 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002b4c:	693a      	ldr	r2, [r7, #16]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b54:	4a12      	ldr	r2, [pc, #72]	; (8002ba0 <HAL_GPIO_Init+0x350>)
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	fa22 f303 	lsr.w	r3, r2, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	f47f ae78 	bne.w	8002860 <HAL_GPIO_Init+0x10>
  }
}
 8002b70:	bf00      	nop
 8002b72:	bf00      	nop
 8002b74:	371c      	adds	r7, #28
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	40021000 	.word	0x40021000
 8002b84:	40010000 	.word	0x40010000
 8002b88:	48000400 	.word	0x48000400
 8002b8c:	48000800 	.word	0x48000800
 8002b90:	48000c00 	.word	0x48000c00
 8002b94:	48001000 	.word	0x48001000
 8002b98:	48001400 	.word	0x48001400
 8002b9c:	48001800 	.word	0x48001800
 8002ba0:	40010400 	.word	0x40010400

08002ba4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	460b      	mov	r3, r1
 8002bae:	807b      	strh	r3, [r7, #2]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bb4:	787b      	ldrb	r3, [r7, #1]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d003      	beq.n	8002bc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002bba:	887a      	ldrh	r2, [r7, #2]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002bc0:	e002      	b.n	8002bc8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002bc2:	887a      	ldrh	r2, [r7, #2]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002bd8:	4b04      	ldr	r3, [pc, #16]	; (8002bec <HAL_PWREx_GetVoltageRange+0x18>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	40007000 	.word	0x40007000

08002bf0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b085      	sub	sp, #20
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bfe:	d130      	bne.n	8002c62 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c00:	4b23      	ldr	r3, [pc, #140]	; (8002c90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c0c:	d038      	beq.n	8002c80 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c0e:	4b20      	ldr	r3, [pc, #128]	; (8002c90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c16:	4a1e      	ldr	r2, [pc, #120]	; (8002c90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c18:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c1c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c1e:	4b1d      	ldr	r3, [pc, #116]	; (8002c94 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2232      	movs	r2, #50	; 0x32
 8002c24:	fb02 f303 	mul.w	r3, r2, r3
 8002c28:	4a1b      	ldr	r2, [pc, #108]	; (8002c98 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2e:	0c9b      	lsrs	r3, r3, #18
 8002c30:	3301      	adds	r3, #1
 8002c32:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c34:	e002      	b.n	8002c3c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c3c:	4b14      	ldr	r3, [pc, #80]	; (8002c90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c3e:	695b      	ldr	r3, [r3, #20]
 8002c40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c48:	d102      	bne.n	8002c50 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d1f2      	bne.n	8002c36 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c50:	4b0f      	ldr	r3, [pc, #60]	; (8002c90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c52:	695b      	ldr	r3, [r3, #20]
 8002c54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c5c:	d110      	bne.n	8002c80 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e00f      	b.n	8002c82 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c62:	4b0b      	ldr	r3, [pc, #44]	; (8002c90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c6e:	d007      	beq.n	8002c80 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c70:	4b07      	ldr	r3, [pc, #28]	; (8002c90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c78:	4a05      	ldr	r2, [pc, #20]	; (8002c90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c7e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3714      	adds	r7, #20
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	40007000 	.word	0x40007000
 8002c94:	20000000 	.word	0x20000000
 8002c98:	431bde83 	.word	0x431bde83

08002c9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b088      	sub	sp, #32
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e3ca      	b.n	8003444 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cae:	4b97      	ldr	r3, [pc, #604]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f003 030c 	and.w	r3, r3, #12
 8002cb6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cb8:	4b94      	ldr	r3, [pc, #592]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	f003 0303 	and.w	r3, r3, #3
 8002cc0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0310 	and.w	r3, r3, #16
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	f000 80e4 	beq.w	8002e98 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d007      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x4a>
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	2b0c      	cmp	r3, #12
 8002cda:	f040 808b 	bne.w	8002df4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	f040 8087 	bne.w	8002df4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ce6:	4b89      	ldr	r3, [pc, #548]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d005      	beq.n	8002cfe <HAL_RCC_OscConfig+0x62>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d101      	bne.n	8002cfe <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e3a2      	b.n	8003444 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a1a      	ldr	r2, [r3, #32]
 8002d02:	4b82      	ldr	r3, [pc, #520]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0308 	and.w	r3, r3, #8
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d004      	beq.n	8002d18 <HAL_RCC_OscConfig+0x7c>
 8002d0e:	4b7f      	ldr	r3, [pc, #508]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d16:	e005      	b.n	8002d24 <HAL_RCC_OscConfig+0x88>
 8002d18:	4b7c      	ldr	r3, [pc, #496]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002d1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d1e:	091b      	lsrs	r3, r3, #4
 8002d20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d223      	bcs.n	8002d70 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a1b      	ldr	r3, [r3, #32]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f000 fd55 	bl	80037dc <RCC_SetFlashLatencyFromMSIRange>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d001      	beq.n	8002d3c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e383      	b.n	8003444 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d3c:	4b73      	ldr	r3, [pc, #460]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a72      	ldr	r2, [pc, #456]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002d42:	f043 0308 	orr.w	r3, r3, #8
 8002d46:	6013      	str	r3, [r2, #0]
 8002d48:	4b70      	ldr	r3, [pc, #448]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	496d      	ldr	r1, [pc, #436]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d5a:	4b6c      	ldr	r3, [pc, #432]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	69db      	ldr	r3, [r3, #28]
 8002d66:	021b      	lsls	r3, r3, #8
 8002d68:	4968      	ldr	r1, [pc, #416]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	604b      	str	r3, [r1, #4]
 8002d6e:	e025      	b.n	8002dbc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d70:	4b66      	ldr	r3, [pc, #408]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a65      	ldr	r2, [pc, #404]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002d76:	f043 0308 	orr.w	r3, r3, #8
 8002d7a:	6013      	str	r3, [r2, #0]
 8002d7c:	4b63      	ldr	r3, [pc, #396]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a1b      	ldr	r3, [r3, #32]
 8002d88:	4960      	ldr	r1, [pc, #384]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d8e:	4b5f      	ldr	r3, [pc, #380]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	69db      	ldr	r3, [r3, #28]
 8002d9a:	021b      	lsls	r3, r3, #8
 8002d9c:	495b      	ldr	r1, [pc, #364]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d109      	bne.n	8002dbc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a1b      	ldr	r3, [r3, #32]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f000 fd15 	bl	80037dc <RCC_SetFlashLatencyFromMSIRange>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e343      	b.n	8003444 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002dbc:	f000 fc4a 	bl	8003654 <HAL_RCC_GetSysClockFreq>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	4b52      	ldr	r3, [pc, #328]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	091b      	lsrs	r3, r3, #4
 8002dc8:	f003 030f 	and.w	r3, r3, #15
 8002dcc:	4950      	ldr	r1, [pc, #320]	; (8002f10 <HAL_RCC_OscConfig+0x274>)
 8002dce:	5ccb      	ldrb	r3, [r1, r3]
 8002dd0:	f003 031f 	and.w	r3, r3, #31
 8002dd4:	fa22 f303 	lsr.w	r3, r2, r3
 8002dd8:	4a4e      	ldr	r2, [pc, #312]	; (8002f14 <HAL_RCC_OscConfig+0x278>)
 8002dda:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002ddc:	4b4e      	ldr	r3, [pc, #312]	; (8002f18 <HAL_RCC_OscConfig+0x27c>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7fd ffed 	bl	8000dc0 <HAL_InitTick>
 8002de6:	4603      	mov	r3, r0
 8002de8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002dea:	7bfb      	ldrb	r3, [r7, #15]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d052      	beq.n	8002e96 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002df0:	7bfb      	ldrb	r3, [r7, #15]
 8002df2:	e327      	b.n	8003444 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d032      	beq.n	8002e62 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002dfc:	4b43      	ldr	r3, [pc, #268]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a42      	ldr	r2, [pc, #264]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002e02:	f043 0301 	orr.w	r3, r3, #1
 8002e06:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e08:	f7fe f82a 	bl	8000e60 <HAL_GetTick>
 8002e0c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e0e:	e008      	b.n	8002e22 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e10:	f7fe f826 	bl	8000e60 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e310      	b.n	8003444 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e22:	4b3a      	ldr	r3, [pc, #232]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d0f0      	beq.n	8002e10 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e2e:	4b37      	ldr	r3, [pc, #220]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a36      	ldr	r2, [pc, #216]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002e34:	f043 0308 	orr.w	r3, r3, #8
 8002e38:	6013      	str	r3, [r2, #0]
 8002e3a:	4b34      	ldr	r3, [pc, #208]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a1b      	ldr	r3, [r3, #32]
 8002e46:	4931      	ldr	r1, [pc, #196]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e4c:	4b2f      	ldr	r3, [pc, #188]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	69db      	ldr	r3, [r3, #28]
 8002e58:	021b      	lsls	r3, r3, #8
 8002e5a:	492c      	ldr	r1, [pc, #176]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	604b      	str	r3, [r1, #4]
 8002e60:	e01a      	b.n	8002e98 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e62:	4b2a      	ldr	r3, [pc, #168]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a29      	ldr	r2, [pc, #164]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002e68:	f023 0301 	bic.w	r3, r3, #1
 8002e6c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e6e:	f7fd fff7 	bl	8000e60 <HAL_GetTick>
 8002e72:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e74:	e008      	b.n	8002e88 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e76:	f7fd fff3 	bl	8000e60 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d901      	bls.n	8002e88 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e2dd      	b.n	8003444 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e88:	4b20      	ldr	r3, [pc, #128]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0302 	and.w	r3, r3, #2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d1f0      	bne.n	8002e76 <HAL_RCC_OscConfig+0x1da>
 8002e94:	e000      	b.n	8002e98 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e96:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0301 	and.w	r3, r3, #1
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d074      	beq.n	8002f8e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	2b08      	cmp	r3, #8
 8002ea8:	d005      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x21a>
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	2b0c      	cmp	r3, #12
 8002eae:	d10e      	bne.n	8002ece <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	2b03      	cmp	r3, #3
 8002eb4:	d10b      	bne.n	8002ece <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eb6:	4b15      	ldr	r3, [pc, #84]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d064      	beq.n	8002f8c <HAL_RCC_OscConfig+0x2f0>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d160      	bne.n	8002f8c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e2ba      	b.n	8003444 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ed6:	d106      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x24a>
 8002ed8:	4b0c      	ldr	r3, [pc, #48]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a0b      	ldr	r2, [pc, #44]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002ede:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ee2:	6013      	str	r3, [r2, #0]
 8002ee4:	e026      	b.n	8002f34 <HAL_RCC_OscConfig+0x298>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002eee:	d115      	bne.n	8002f1c <HAL_RCC_OscConfig+0x280>
 8002ef0:	4b06      	ldr	r3, [pc, #24]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a05      	ldr	r2, [pc, #20]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002ef6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002efa:	6013      	str	r3, [r2, #0]
 8002efc:	4b03      	ldr	r3, [pc, #12]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a02      	ldr	r2, [pc, #8]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002f02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f06:	6013      	str	r3, [r2, #0]
 8002f08:	e014      	b.n	8002f34 <HAL_RCC_OscConfig+0x298>
 8002f0a:	bf00      	nop
 8002f0c:	40021000 	.word	0x40021000
 8002f10:	080068f8 	.word	0x080068f8
 8002f14:	20000000 	.word	0x20000000
 8002f18:	20000004 	.word	0x20000004
 8002f1c:	4ba0      	ldr	r3, [pc, #640]	; (80031a0 <HAL_RCC_OscConfig+0x504>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a9f      	ldr	r2, [pc, #636]	; (80031a0 <HAL_RCC_OscConfig+0x504>)
 8002f22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f26:	6013      	str	r3, [r2, #0]
 8002f28:	4b9d      	ldr	r3, [pc, #628]	; (80031a0 <HAL_RCC_OscConfig+0x504>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a9c      	ldr	r2, [pc, #624]	; (80031a0 <HAL_RCC_OscConfig+0x504>)
 8002f2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d013      	beq.n	8002f64 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f3c:	f7fd ff90 	bl	8000e60 <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f42:	e008      	b.n	8002f56 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f44:	f7fd ff8c 	bl	8000e60 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b64      	cmp	r3, #100	; 0x64
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e276      	b.n	8003444 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f56:	4b92      	ldr	r3, [pc, #584]	; (80031a0 <HAL_RCC_OscConfig+0x504>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d0f0      	beq.n	8002f44 <HAL_RCC_OscConfig+0x2a8>
 8002f62:	e014      	b.n	8002f8e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f64:	f7fd ff7c 	bl	8000e60 <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f6c:	f7fd ff78 	bl	8000e60 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b64      	cmp	r3, #100	; 0x64
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e262      	b.n	8003444 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f7e:	4b88      	ldr	r3, [pc, #544]	; (80031a0 <HAL_RCC_OscConfig+0x504>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1f0      	bne.n	8002f6c <HAL_RCC_OscConfig+0x2d0>
 8002f8a:	e000      	b.n	8002f8e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d060      	beq.n	800305c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	2b04      	cmp	r3, #4
 8002f9e:	d005      	beq.n	8002fac <HAL_RCC_OscConfig+0x310>
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	2b0c      	cmp	r3, #12
 8002fa4:	d119      	bne.n	8002fda <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d116      	bne.n	8002fda <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fac:	4b7c      	ldr	r3, [pc, #496]	; (80031a0 <HAL_RCC_OscConfig+0x504>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d005      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x328>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d101      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e23f      	b.n	8003444 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fc4:	4b76      	ldr	r3, [pc, #472]	; (80031a0 <HAL_RCC_OscConfig+0x504>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	061b      	lsls	r3, r3, #24
 8002fd2:	4973      	ldr	r1, [pc, #460]	; (80031a0 <HAL_RCC_OscConfig+0x504>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fd8:	e040      	b.n	800305c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d023      	beq.n	800302a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fe2:	4b6f      	ldr	r3, [pc, #444]	; (80031a0 <HAL_RCC_OscConfig+0x504>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a6e      	ldr	r2, [pc, #440]	; (80031a0 <HAL_RCC_OscConfig+0x504>)
 8002fe8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fee:	f7fd ff37 	bl	8000e60 <HAL_GetTick>
 8002ff2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ff4:	e008      	b.n	8003008 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ff6:	f7fd ff33 	bl	8000e60 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b02      	cmp	r3, #2
 8003002:	d901      	bls.n	8003008 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e21d      	b.n	8003444 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003008:	4b65      	ldr	r3, [pc, #404]	; (80031a0 <HAL_RCC_OscConfig+0x504>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003010:	2b00      	cmp	r3, #0
 8003012:	d0f0      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003014:	4b62      	ldr	r3, [pc, #392]	; (80031a0 <HAL_RCC_OscConfig+0x504>)
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	691b      	ldr	r3, [r3, #16]
 8003020:	061b      	lsls	r3, r3, #24
 8003022:	495f      	ldr	r1, [pc, #380]	; (80031a0 <HAL_RCC_OscConfig+0x504>)
 8003024:	4313      	orrs	r3, r2
 8003026:	604b      	str	r3, [r1, #4]
 8003028:	e018      	b.n	800305c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800302a:	4b5d      	ldr	r3, [pc, #372]	; (80031a0 <HAL_RCC_OscConfig+0x504>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a5c      	ldr	r2, [pc, #368]	; (80031a0 <HAL_RCC_OscConfig+0x504>)
 8003030:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003034:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003036:	f7fd ff13 	bl	8000e60 <HAL_GetTick>
 800303a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800303c:	e008      	b.n	8003050 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800303e:	f7fd ff0f 	bl	8000e60 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	2b02      	cmp	r3, #2
 800304a:	d901      	bls.n	8003050 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e1f9      	b.n	8003444 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003050:	4b53      	ldr	r3, [pc, #332]	; (80031a0 <HAL_RCC_OscConfig+0x504>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1f0      	bne.n	800303e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0308 	and.w	r3, r3, #8
 8003064:	2b00      	cmp	r3, #0
 8003066:	d03c      	beq.n	80030e2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	695b      	ldr	r3, [r3, #20]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d01c      	beq.n	80030aa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003070:	4b4b      	ldr	r3, [pc, #300]	; (80031a0 <HAL_RCC_OscConfig+0x504>)
 8003072:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003076:	4a4a      	ldr	r2, [pc, #296]	; (80031a0 <HAL_RCC_OscConfig+0x504>)
 8003078:	f043 0301 	orr.w	r3, r3, #1
 800307c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003080:	f7fd feee 	bl	8000e60 <HAL_GetTick>
 8003084:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003086:	e008      	b.n	800309a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003088:	f7fd feea 	bl	8000e60 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e1d4      	b.n	8003444 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800309a:	4b41      	ldr	r3, [pc, #260]	; (80031a0 <HAL_RCC_OscConfig+0x504>)
 800309c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030a0:	f003 0302 	and.w	r3, r3, #2
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d0ef      	beq.n	8003088 <HAL_RCC_OscConfig+0x3ec>
 80030a8:	e01b      	b.n	80030e2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030aa:	4b3d      	ldr	r3, [pc, #244]	; (80031a0 <HAL_RCC_OscConfig+0x504>)
 80030ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030b0:	4a3b      	ldr	r2, [pc, #236]	; (80031a0 <HAL_RCC_OscConfig+0x504>)
 80030b2:	f023 0301 	bic.w	r3, r3, #1
 80030b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ba:	f7fd fed1 	bl	8000e60 <HAL_GetTick>
 80030be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030c0:	e008      	b.n	80030d4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030c2:	f7fd fecd 	bl	8000e60 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d901      	bls.n	80030d4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e1b7      	b.n	8003444 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030d4:	4b32      	ldr	r3, [pc, #200]	; (80031a0 <HAL_RCC_OscConfig+0x504>)
 80030d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1ef      	bne.n	80030c2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0304 	and.w	r3, r3, #4
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	f000 80a6 	beq.w	800323c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030f0:	2300      	movs	r3, #0
 80030f2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80030f4:	4b2a      	ldr	r3, [pc, #168]	; (80031a0 <HAL_RCC_OscConfig+0x504>)
 80030f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d10d      	bne.n	800311c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003100:	4b27      	ldr	r3, [pc, #156]	; (80031a0 <HAL_RCC_OscConfig+0x504>)
 8003102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003104:	4a26      	ldr	r2, [pc, #152]	; (80031a0 <HAL_RCC_OscConfig+0x504>)
 8003106:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800310a:	6593      	str	r3, [r2, #88]	; 0x58
 800310c:	4b24      	ldr	r3, [pc, #144]	; (80031a0 <HAL_RCC_OscConfig+0x504>)
 800310e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003114:	60bb      	str	r3, [r7, #8]
 8003116:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003118:	2301      	movs	r3, #1
 800311a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800311c:	4b21      	ldr	r3, [pc, #132]	; (80031a4 <HAL_RCC_OscConfig+0x508>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003124:	2b00      	cmp	r3, #0
 8003126:	d118      	bne.n	800315a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003128:	4b1e      	ldr	r3, [pc, #120]	; (80031a4 <HAL_RCC_OscConfig+0x508>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a1d      	ldr	r2, [pc, #116]	; (80031a4 <HAL_RCC_OscConfig+0x508>)
 800312e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003132:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003134:	f7fd fe94 	bl	8000e60 <HAL_GetTick>
 8003138:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800313a:	e008      	b.n	800314e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800313c:	f7fd fe90 	bl	8000e60 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b02      	cmp	r3, #2
 8003148:	d901      	bls.n	800314e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e17a      	b.n	8003444 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800314e:	4b15      	ldr	r3, [pc, #84]	; (80031a4 <HAL_RCC_OscConfig+0x508>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003156:	2b00      	cmp	r3, #0
 8003158:	d0f0      	beq.n	800313c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	2b01      	cmp	r3, #1
 8003160:	d108      	bne.n	8003174 <HAL_RCC_OscConfig+0x4d8>
 8003162:	4b0f      	ldr	r3, [pc, #60]	; (80031a0 <HAL_RCC_OscConfig+0x504>)
 8003164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003168:	4a0d      	ldr	r2, [pc, #52]	; (80031a0 <HAL_RCC_OscConfig+0x504>)
 800316a:	f043 0301 	orr.w	r3, r3, #1
 800316e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003172:	e029      	b.n	80031c8 <HAL_RCC_OscConfig+0x52c>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	2b05      	cmp	r3, #5
 800317a:	d115      	bne.n	80031a8 <HAL_RCC_OscConfig+0x50c>
 800317c:	4b08      	ldr	r3, [pc, #32]	; (80031a0 <HAL_RCC_OscConfig+0x504>)
 800317e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003182:	4a07      	ldr	r2, [pc, #28]	; (80031a0 <HAL_RCC_OscConfig+0x504>)
 8003184:	f043 0304 	orr.w	r3, r3, #4
 8003188:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800318c:	4b04      	ldr	r3, [pc, #16]	; (80031a0 <HAL_RCC_OscConfig+0x504>)
 800318e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003192:	4a03      	ldr	r2, [pc, #12]	; (80031a0 <HAL_RCC_OscConfig+0x504>)
 8003194:	f043 0301 	orr.w	r3, r3, #1
 8003198:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800319c:	e014      	b.n	80031c8 <HAL_RCC_OscConfig+0x52c>
 800319e:	bf00      	nop
 80031a0:	40021000 	.word	0x40021000
 80031a4:	40007000 	.word	0x40007000
 80031a8:	4b9c      	ldr	r3, [pc, #624]	; (800341c <HAL_RCC_OscConfig+0x780>)
 80031aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ae:	4a9b      	ldr	r2, [pc, #620]	; (800341c <HAL_RCC_OscConfig+0x780>)
 80031b0:	f023 0301 	bic.w	r3, r3, #1
 80031b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031b8:	4b98      	ldr	r3, [pc, #608]	; (800341c <HAL_RCC_OscConfig+0x780>)
 80031ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031be:	4a97      	ldr	r2, [pc, #604]	; (800341c <HAL_RCC_OscConfig+0x780>)
 80031c0:	f023 0304 	bic.w	r3, r3, #4
 80031c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d016      	beq.n	80031fe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031d0:	f7fd fe46 	bl	8000e60 <HAL_GetTick>
 80031d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031d6:	e00a      	b.n	80031ee <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031d8:	f7fd fe42 	bl	8000e60 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e12a      	b.n	8003444 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031ee:	4b8b      	ldr	r3, [pc, #556]	; (800341c <HAL_RCC_OscConfig+0x780>)
 80031f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f4:	f003 0302 	and.w	r3, r3, #2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d0ed      	beq.n	80031d8 <HAL_RCC_OscConfig+0x53c>
 80031fc:	e015      	b.n	800322a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031fe:	f7fd fe2f 	bl	8000e60 <HAL_GetTick>
 8003202:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003204:	e00a      	b.n	800321c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003206:	f7fd fe2b 	bl	8000e60 <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	f241 3288 	movw	r2, #5000	; 0x1388
 8003214:	4293      	cmp	r3, r2
 8003216:	d901      	bls.n	800321c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e113      	b.n	8003444 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800321c:	4b7f      	ldr	r3, [pc, #508]	; (800341c <HAL_RCC_OscConfig+0x780>)
 800321e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d1ed      	bne.n	8003206 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800322a:	7ffb      	ldrb	r3, [r7, #31]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d105      	bne.n	800323c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003230:	4b7a      	ldr	r3, [pc, #488]	; (800341c <HAL_RCC_OscConfig+0x780>)
 8003232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003234:	4a79      	ldr	r2, [pc, #484]	; (800341c <HAL_RCC_OscConfig+0x780>)
 8003236:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800323a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003240:	2b00      	cmp	r3, #0
 8003242:	f000 80fe 	beq.w	8003442 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324a:	2b02      	cmp	r3, #2
 800324c:	f040 80d0 	bne.w	80033f0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003250:	4b72      	ldr	r3, [pc, #456]	; (800341c <HAL_RCC_OscConfig+0x780>)
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	f003 0203 	and.w	r2, r3, #3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003260:	429a      	cmp	r2, r3
 8003262:	d130      	bne.n	80032c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326e:	3b01      	subs	r3, #1
 8003270:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003272:	429a      	cmp	r2, r3
 8003274:	d127      	bne.n	80032c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003280:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003282:	429a      	cmp	r2, r3
 8003284:	d11f      	bne.n	80032c6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003290:	2a07      	cmp	r2, #7
 8003292:	bf14      	ite	ne
 8003294:	2201      	movne	r2, #1
 8003296:	2200      	moveq	r2, #0
 8003298:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800329a:	4293      	cmp	r3, r2
 800329c:	d113      	bne.n	80032c6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032a8:	085b      	lsrs	r3, r3, #1
 80032aa:	3b01      	subs	r3, #1
 80032ac:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d109      	bne.n	80032c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032bc:	085b      	lsrs	r3, r3, #1
 80032be:	3b01      	subs	r3, #1
 80032c0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d06e      	beq.n	80033a4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	2b0c      	cmp	r3, #12
 80032ca:	d069      	beq.n	80033a0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80032cc:	4b53      	ldr	r3, [pc, #332]	; (800341c <HAL_RCC_OscConfig+0x780>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d105      	bne.n	80032e4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80032d8:	4b50      	ldr	r3, [pc, #320]	; (800341c <HAL_RCC_OscConfig+0x780>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d001      	beq.n	80032e8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e0ad      	b.n	8003444 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80032e8:	4b4c      	ldr	r3, [pc, #304]	; (800341c <HAL_RCC_OscConfig+0x780>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a4b      	ldr	r2, [pc, #300]	; (800341c <HAL_RCC_OscConfig+0x780>)
 80032ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032f2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80032f4:	f7fd fdb4 	bl	8000e60 <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032fa:	e008      	b.n	800330e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032fc:	f7fd fdb0 	bl	8000e60 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b02      	cmp	r3, #2
 8003308:	d901      	bls.n	800330e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e09a      	b.n	8003444 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800330e:	4b43      	ldr	r3, [pc, #268]	; (800341c <HAL_RCC_OscConfig+0x780>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1f0      	bne.n	80032fc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800331a:	4b40      	ldr	r3, [pc, #256]	; (800341c <HAL_RCC_OscConfig+0x780>)
 800331c:	68da      	ldr	r2, [r3, #12]
 800331e:	4b40      	ldr	r3, [pc, #256]	; (8003420 <HAL_RCC_OscConfig+0x784>)
 8003320:	4013      	ands	r3, r2
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800332a:	3a01      	subs	r2, #1
 800332c:	0112      	lsls	r2, r2, #4
 800332e:	4311      	orrs	r1, r2
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003334:	0212      	lsls	r2, r2, #8
 8003336:	4311      	orrs	r1, r2
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800333c:	0852      	lsrs	r2, r2, #1
 800333e:	3a01      	subs	r2, #1
 8003340:	0552      	lsls	r2, r2, #21
 8003342:	4311      	orrs	r1, r2
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003348:	0852      	lsrs	r2, r2, #1
 800334a:	3a01      	subs	r2, #1
 800334c:	0652      	lsls	r2, r2, #25
 800334e:	4311      	orrs	r1, r2
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003354:	0912      	lsrs	r2, r2, #4
 8003356:	0452      	lsls	r2, r2, #17
 8003358:	430a      	orrs	r2, r1
 800335a:	4930      	ldr	r1, [pc, #192]	; (800341c <HAL_RCC_OscConfig+0x780>)
 800335c:	4313      	orrs	r3, r2
 800335e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003360:	4b2e      	ldr	r3, [pc, #184]	; (800341c <HAL_RCC_OscConfig+0x780>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a2d      	ldr	r2, [pc, #180]	; (800341c <HAL_RCC_OscConfig+0x780>)
 8003366:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800336a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800336c:	4b2b      	ldr	r3, [pc, #172]	; (800341c <HAL_RCC_OscConfig+0x780>)
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	4a2a      	ldr	r2, [pc, #168]	; (800341c <HAL_RCC_OscConfig+0x780>)
 8003372:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003376:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003378:	f7fd fd72 	bl	8000e60 <HAL_GetTick>
 800337c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800337e:	e008      	b.n	8003392 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003380:	f7fd fd6e 	bl	8000e60 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b02      	cmp	r3, #2
 800338c:	d901      	bls.n	8003392 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e058      	b.n	8003444 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003392:	4b22      	ldr	r3, [pc, #136]	; (800341c <HAL_RCC_OscConfig+0x780>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d0f0      	beq.n	8003380 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800339e:	e050      	b.n	8003442 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e04f      	b.n	8003444 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033a4:	4b1d      	ldr	r3, [pc, #116]	; (800341c <HAL_RCC_OscConfig+0x780>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d148      	bne.n	8003442 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80033b0:	4b1a      	ldr	r3, [pc, #104]	; (800341c <HAL_RCC_OscConfig+0x780>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a19      	ldr	r2, [pc, #100]	; (800341c <HAL_RCC_OscConfig+0x780>)
 80033b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033ba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033bc:	4b17      	ldr	r3, [pc, #92]	; (800341c <HAL_RCC_OscConfig+0x780>)
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	4a16      	ldr	r2, [pc, #88]	; (800341c <HAL_RCC_OscConfig+0x780>)
 80033c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033c6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80033c8:	f7fd fd4a 	bl	8000e60 <HAL_GetTick>
 80033cc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033ce:	e008      	b.n	80033e2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033d0:	f7fd fd46 	bl	8000e60 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e030      	b.n	8003444 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033e2:	4b0e      	ldr	r3, [pc, #56]	; (800341c <HAL_RCC_OscConfig+0x780>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d0f0      	beq.n	80033d0 <HAL_RCC_OscConfig+0x734>
 80033ee:	e028      	b.n	8003442 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	2b0c      	cmp	r3, #12
 80033f4:	d023      	beq.n	800343e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033f6:	4b09      	ldr	r3, [pc, #36]	; (800341c <HAL_RCC_OscConfig+0x780>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a08      	ldr	r2, [pc, #32]	; (800341c <HAL_RCC_OscConfig+0x780>)
 80033fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003400:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003402:	f7fd fd2d 	bl	8000e60 <HAL_GetTick>
 8003406:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003408:	e00c      	b.n	8003424 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800340a:	f7fd fd29 	bl	8000e60 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b02      	cmp	r3, #2
 8003416:	d905      	bls.n	8003424 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e013      	b.n	8003444 <HAL_RCC_OscConfig+0x7a8>
 800341c:	40021000 	.word	0x40021000
 8003420:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003424:	4b09      	ldr	r3, [pc, #36]	; (800344c <HAL_RCC_OscConfig+0x7b0>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1ec      	bne.n	800340a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003430:	4b06      	ldr	r3, [pc, #24]	; (800344c <HAL_RCC_OscConfig+0x7b0>)
 8003432:	68da      	ldr	r2, [r3, #12]
 8003434:	4905      	ldr	r1, [pc, #20]	; (800344c <HAL_RCC_OscConfig+0x7b0>)
 8003436:	4b06      	ldr	r3, [pc, #24]	; (8003450 <HAL_RCC_OscConfig+0x7b4>)
 8003438:	4013      	ands	r3, r2
 800343a:	60cb      	str	r3, [r1, #12]
 800343c:	e001      	b.n	8003442 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e000      	b.n	8003444 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003442:	2300      	movs	r3, #0
}
 8003444:	4618      	mov	r0, r3
 8003446:	3720      	adds	r7, #32
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	40021000 	.word	0x40021000
 8003450:	feeefffc 	.word	0xfeeefffc

08003454 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d101      	bne.n	8003468 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e0e7      	b.n	8003638 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003468:	4b75      	ldr	r3, [pc, #468]	; (8003640 <HAL_RCC_ClockConfig+0x1ec>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0307 	and.w	r3, r3, #7
 8003470:	683a      	ldr	r2, [r7, #0]
 8003472:	429a      	cmp	r2, r3
 8003474:	d910      	bls.n	8003498 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003476:	4b72      	ldr	r3, [pc, #456]	; (8003640 <HAL_RCC_ClockConfig+0x1ec>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f023 0207 	bic.w	r2, r3, #7
 800347e:	4970      	ldr	r1, [pc, #448]	; (8003640 <HAL_RCC_ClockConfig+0x1ec>)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	4313      	orrs	r3, r2
 8003484:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003486:	4b6e      	ldr	r3, [pc, #440]	; (8003640 <HAL_RCC_ClockConfig+0x1ec>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0307 	and.w	r3, r3, #7
 800348e:	683a      	ldr	r2, [r7, #0]
 8003490:	429a      	cmp	r2, r3
 8003492:	d001      	beq.n	8003498 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e0cf      	b.n	8003638 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d010      	beq.n	80034c6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	689a      	ldr	r2, [r3, #8]
 80034a8:	4b66      	ldr	r3, [pc, #408]	; (8003644 <HAL_RCC_ClockConfig+0x1f0>)
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d908      	bls.n	80034c6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034b4:	4b63      	ldr	r3, [pc, #396]	; (8003644 <HAL_RCC_ClockConfig+0x1f0>)
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	4960      	ldr	r1, [pc, #384]	; (8003644 <HAL_RCC_ClockConfig+0x1f0>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d04c      	beq.n	800356c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	2b03      	cmp	r3, #3
 80034d8:	d107      	bne.n	80034ea <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034da:	4b5a      	ldr	r3, [pc, #360]	; (8003644 <HAL_RCC_ClockConfig+0x1f0>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d121      	bne.n	800352a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e0a6      	b.n	8003638 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d107      	bne.n	8003502 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034f2:	4b54      	ldr	r3, [pc, #336]	; (8003644 <HAL_RCC_ClockConfig+0x1f0>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d115      	bne.n	800352a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e09a      	b.n	8003638 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d107      	bne.n	800351a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800350a:	4b4e      	ldr	r3, [pc, #312]	; (8003644 <HAL_RCC_ClockConfig+0x1f0>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d109      	bne.n	800352a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e08e      	b.n	8003638 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800351a:	4b4a      	ldr	r3, [pc, #296]	; (8003644 <HAL_RCC_ClockConfig+0x1f0>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003522:	2b00      	cmp	r3, #0
 8003524:	d101      	bne.n	800352a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e086      	b.n	8003638 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800352a:	4b46      	ldr	r3, [pc, #280]	; (8003644 <HAL_RCC_ClockConfig+0x1f0>)
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f023 0203 	bic.w	r2, r3, #3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	4943      	ldr	r1, [pc, #268]	; (8003644 <HAL_RCC_ClockConfig+0x1f0>)
 8003538:	4313      	orrs	r3, r2
 800353a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800353c:	f7fd fc90 	bl	8000e60 <HAL_GetTick>
 8003540:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003542:	e00a      	b.n	800355a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003544:	f7fd fc8c 	bl	8000e60 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003552:	4293      	cmp	r3, r2
 8003554:	d901      	bls.n	800355a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e06e      	b.n	8003638 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800355a:	4b3a      	ldr	r3, [pc, #232]	; (8003644 <HAL_RCC_ClockConfig+0x1f0>)
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f003 020c 	and.w	r2, r3, #12
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	429a      	cmp	r2, r3
 800356a:	d1eb      	bne.n	8003544 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0302 	and.w	r3, r3, #2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d010      	beq.n	800359a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689a      	ldr	r2, [r3, #8]
 800357c:	4b31      	ldr	r3, [pc, #196]	; (8003644 <HAL_RCC_ClockConfig+0x1f0>)
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003584:	429a      	cmp	r2, r3
 8003586:	d208      	bcs.n	800359a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003588:	4b2e      	ldr	r3, [pc, #184]	; (8003644 <HAL_RCC_ClockConfig+0x1f0>)
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	492b      	ldr	r1, [pc, #172]	; (8003644 <HAL_RCC_ClockConfig+0x1f0>)
 8003596:	4313      	orrs	r3, r2
 8003598:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800359a:	4b29      	ldr	r3, [pc, #164]	; (8003640 <HAL_RCC_ClockConfig+0x1ec>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0307 	and.w	r3, r3, #7
 80035a2:	683a      	ldr	r2, [r7, #0]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d210      	bcs.n	80035ca <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035a8:	4b25      	ldr	r3, [pc, #148]	; (8003640 <HAL_RCC_ClockConfig+0x1ec>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f023 0207 	bic.w	r2, r3, #7
 80035b0:	4923      	ldr	r1, [pc, #140]	; (8003640 <HAL_RCC_ClockConfig+0x1ec>)
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035b8:	4b21      	ldr	r3, [pc, #132]	; (8003640 <HAL_RCC_ClockConfig+0x1ec>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0307 	and.w	r3, r3, #7
 80035c0:	683a      	ldr	r2, [r7, #0]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d001      	beq.n	80035ca <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e036      	b.n	8003638 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0304 	and.w	r3, r3, #4
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d008      	beq.n	80035e8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035d6:	4b1b      	ldr	r3, [pc, #108]	; (8003644 <HAL_RCC_ClockConfig+0x1f0>)
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	4918      	ldr	r1, [pc, #96]	; (8003644 <HAL_RCC_ClockConfig+0x1f0>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0308 	and.w	r3, r3, #8
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d009      	beq.n	8003608 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035f4:	4b13      	ldr	r3, [pc, #76]	; (8003644 <HAL_RCC_ClockConfig+0x1f0>)
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	691b      	ldr	r3, [r3, #16]
 8003600:	00db      	lsls	r3, r3, #3
 8003602:	4910      	ldr	r1, [pc, #64]	; (8003644 <HAL_RCC_ClockConfig+0x1f0>)
 8003604:	4313      	orrs	r3, r2
 8003606:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003608:	f000 f824 	bl	8003654 <HAL_RCC_GetSysClockFreq>
 800360c:	4602      	mov	r2, r0
 800360e:	4b0d      	ldr	r3, [pc, #52]	; (8003644 <HAL_RCC_ClockConfig+0x1f0>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	091b      	lsrs	r3, r3, #4
 8003614:	f003 030f 	and.w	r3, r3, #15
 8003618:	490b      	ldr	r1, [pc, #44]	; (8003648 <HAL_RCC_ClockConfig+0x1f4>)
 800361a:	5ccb      	ldrb	r3, [r1, r3]
 800361c:	f003 031f 	and.w	r3, r3, #31
 8003620:	fa22 f303 	lsr.w	r3, r2, r3
 8003624:	4a09      	ldr	r2, [pc, #36]	; (800364c <HAL_RCC_ClockConfig+0x1f8>)
 8003626:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003628:	4b09      	ldr	r3, [pc, #36]	; (8003650 <HAL_RCC_ClockConfig+0x1fc>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4618      	mov	r0, r3
 800362e:	f7fd fbc7 	bl	8000dc0 <HAL_InitTick>
 8003632:	4603      	mov	r3, r0
 8003634:	72fb      	strb	r3, [r7, #11]

  return status;
 8003636:	7afb      	ldrb	r3, [r7, #11]
}
 8003638:	4618      	mov	r0, r3
 800363a:	3710      	adds	r7, #16
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	40022000 	.word	0x40022000
 8003644:	40021000 	.word	0x40021000
 8003648:	080068f8 	.word	0x080068f8
 800364c:	20000000 	.word	0x20000000
 8003650:	20000004 	.word	0x20000004

08003654 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003654:	b480      	push	{r7}
 8003656:	b089      	sub	sp, #36	; 0x24
 8003658:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800365a:	2300      	movs	r3, #0
 800365c:	61fb      	str	r3, [r7, #28]
 800365e:	2300      	movs	r3, #0
 8003660:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003662:	4b3e      	ldr	r3, [pc, #248]	; (800375c <HAL_RCC_GetSysClockFreq+0x108>)
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f003 030c 	and.w	r3, r3, #12
 800366a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800366c:	4b3b      	ldr	r3, [pc, #236]	; (800375c <HAL_RCC_GetSysClockFreq+0x108>)
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	f003 0303 	and.w	r3, r3, #3
 8003674:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d005      	beq.n	8003688 <HAL_RCC_GetSysClockFreq+0x34>
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	2b0c      	cmp	r3, #12
 8003680:	d121      	bne.n	80036c6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2b01      	cmp	r3, #1
 8003686:	d11e      	bne.n	80036c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003688:	4b34      	ldr	r3, [pc, #208]	; (800375c <HAL_RCC_GetSysClockFreq+0x108>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0308 	and.w	r3, r3, #8
 8003690:	2b00      	cmp	r3, #0
 8003692:	d107      	bne.n	80036a4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003694:	4b31      	ldr	r3, [pc, #196]	; (800375c <HAL_RCC_GetSysClockFreq+0x108>)
 8003696:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800369a:	0a1b      	lsrs	r3, r3, #8
 800369c:	f003 030f 	and.w	r3, r3, #15
 80036a0:	61fb      	str	r3, [r7, #28]
 80036a2:	e005      	b.n	80036b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80036a4:	4b2d      	ldr	r3, [pc, #180]	; (800375c <HAL_RCC_GetSysClockFreq+0x108>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	091b      	lsrs	r3, r3, #4
 80036aa:	f003 030f 	and.w	r3, r3, #15
 80036ae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80036b0:	4a2b      	ldr	r2, [pc, #172]	; (8003760 <HAL_RCC_GetSysClockFreq+0x10c>)
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036b8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d10d      	bne.n	80036dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036c4:	e00a      	b.n	80036dc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	2b04      	cmp	r3, #4
 80036ca:	d102      	bne.n	80036d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80036cc:	4b25      	ldr	r3, [pc, #148]	; (8003764 <HAL_RCC_GetSysClockFreq+0x110>)
 80036ce:	61bb      	str	r3, [r7, #24]
 80036d0:	e004      	b.n	80036dc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	2b08      	cmp	r3, #8
 80036d6:	d101      	bne.n	80036dc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80036d8:	4b23      	ldr	r3, [pc, #140]	; (8003768 <HAL_RCC_GetSysClockFreq+0x114>)
 80036da:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	2b0c      	cmp	r3, #12
 80036e0:	d134      	bne.n	800374c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80036e2:	4b1e      	ldr	r3, [pc, #120]	; (800375c <HAL_RCC_GetSysClockFreq+0x108>)
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	f003 0303 	and.w	r3, r3, #3
 80036ea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d003      	beq.n	80036fa <HAL_RCC_GetSysClockFreq+0xa6>
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	2b03      	cmp	r3, #3
 80036f6:	d003      	beq.n	8003700 <HAL_RCC_GetSysClockFreq+0xac>
 80036f8:	e005      	b.n	8003706 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80036fa:	4b1a      	ldr	r3, [pc, #104]	; (8003764 <HAL_RCC_GetSysClockFreq+0x110>)
 80036fc:	617b      	str	r3, [r7, #20]
      break;
 80036fe:	e005      	b.n	800370c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003700:	4b19      	ldr	r3, [pc, #100]	; (8003768 <HAL_RCC_GetSysClockFreq+0x114>)
 8003702:	617b      	str	r3, [r7, #20]
      break;
 8003704:	e002      	b.n	800370c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	617b      	str	r3, [r7, #20]
      break;
 800370a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800370c:	4b13      	ldr	r3, [pc, #76]	; (800375c <HAL_RCC_GetSysClockFreq+0x108>)
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	091b      	lsrs	r3, r3, #4
 8003712:	f003 0307 	and.w	r3, r3, #7
 8003716:	3301      	adds	r3, #1
 8003718:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800371a:	4b10      	ldr	r3, [pc, #64]	; (800375c <HAL_RCC_GetSysClockFreq+0x108>)
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	0a1b      	lsrs	r3, r3, #8
 8003720:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003724:	697a      	ldr	r2, [r7, #20]
 8003726:	fb03 f202 	mul.w	r2, r3, r2
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003730:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003732:	4b0a      	ldr	r3, [pc, #40]	; (800375c <HAL_RCC_GetSysClockFreq+0x108>)
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	0e5b      	lsrs	r3, r3, #25
 8003738:	f003 0303 	and.w	r3, r3, #3
 800373c:	3301      	adds	r3, #1
 800373e:	005b      	lsls	r3, r3, #1
 8003740:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003742:	697a      	ldr	r2, [r7, #20]
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	fbb2 f3f3 	udiv	r3, r2, r3
 800374a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800374c:	69bb      	ldr	r3, [r7, #24]
}
 800374e:	4618      	mov	r0, r3
 8003750:	3724      	adds	r7, #36	; 0x24
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	40021000 	.word	0x40021000
 8003760:	08006910 	.word	0x08006910
 8003764:	00f42400 	.word	0x00f42400
 8003768:	007a1200 	.word	0x007a1200

0800376c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003770:	4b03      	ldr	r3, [pc, #12]	; (8003780 <HAL_RCC_GetHCLKFreq+0x14>)
 8003772:	681b      	ldr	r3, [r3, #0]
}
 8003774:	4618      	mov	r0, r3
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	20000000 	.word	0x20000000

08003784 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003788:	f7ff fff0 	bl	800376c <HAL_RCC_GetHCLKFreq>
 800378c:	4602      	mov	r2, r0
 800378e:	4b06      	ldr	r3, [pc, #24]	; (80037a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	0a1b      	lsrs	r3, r3, #8
 8003794:	f003 0307 	and.w	r3, r3, #7
 8003798:	4904      	ldr	r1, [pc, #16]	; (80037ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800379a:	5ccb      	ldrb	r3, [r1, r3]
 800379c:	f003 031f 	and.w	r3, r3, #31
 80037a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	40021000 	.word	0x40021000
 80037ac:	08006908 	.word	0x08006908

080037b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80037b4:	f7ff ffda 	bl	800376c <HAL_RCC_GetHCLKFreq>
 80037b8:	4602      	mov	r2, r0
 80037ba:	4b06      	ldr	r3, [pc, #24]	; (80037d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	0adb      	lsrs	r3, r3, #11
 80037c0:	f003 0307 	and.w	r3, r3, #7
 80037c4:	4904      	ldr	r1, [pc, #16]	; (80037d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80037c6:	5ccb      	ldrb	r3, [r1, r3]
 80037c8:	f003 031f 	and.w	r3, r3, #31
 80037cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	40021000 	.word	0x40021000
 80037d8:	08006908 	.word	0x08006908

080037dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b086      	sub	sp, #24
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80037e4:	2300      	movs	r3, #0
 80037e6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80037e8:	4b2a      	ldr	r3, [pc, #168]	; (8003894 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d003      	beq.n	80037fc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80037f4:	f7ff f9ee 	bl	8002bd4 <HAL_PWREx_GetVoltageRange>
 80037f8:	6178      	str	r0, [r7, #20]
 80037fa:	e014      	b.n	8003826 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80037fc:	4b25      	ldr	r3, [pc, #148]	; (8003894 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003800:	4a24      	ldr	r2, [pc, #144]	; (8003894 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003802:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003806:	6593      	str	r3, [r2, #88]	; 0x58
 8003808:	4b22      	ldr	r3, [pc, #136]	; (8003894 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800380a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800380c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003810:	60fb      	str	r3, [r7, #12]
 8003812:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003814:	f7ff f9de 	bl	8002bd4 <HAL_PWREx_GetVoltageRange>
 8003818:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800381a:	4b1e      	ldr	r3, [pc, #120]	; (8003894 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800381c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800381e:	4a1d      	ldr	r2, [pc, #116]	; (8003894 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003820:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003824:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800382c:	d10b      	bne.n	8003846 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2b80      	cmp	r3, #128	; 0x80
 8003832:	d919      	bls.n	8003868 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2ba0      	cmp	r3, #160	; 0xa0
 8003838:	d902      	bls.n	8003840 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800383a:	2302      	movs	r3, #2
 800383c:	613b      	str	r3, [r7, #16]
 800383e:	e013      	b.n	8003868 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003840:	2301      	movs	r3, #1
 8003842:	613b      	str	r3, [r7, #16]
 8003844:	e010      	b.n	8003868 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2b80      	cmp	r3, #128	; 0x80
 800384a:	d902      	bls.n	8003852 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800384c:	2303      	movs	r3, #3
 800384e:	613b      	str	r3, [r7, #16]
 8003850:	e00a      	b.n	8003868 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2b80      	cmp	r3, #128	; 0x80
 8003856:	d102      	bne.n	800385e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003858:	2302      	movs	r3, #2
 800385a:	613b      	str	r3, [r7, #16]
 800385c:	e004      	b.n	8003868 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2b70      	cmp	r3, #112	; 0x70
 8003862:	d101      	bne.n	8003868 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003864:	2301      	movs	r3, #1
 8003866:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003868:	4b0b      	ldr	r3, [pc, #44]	; (8003898 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f023 0207 	bic.w	r2, r3, #7
 8003870:	4909      	ldr	r1, [pc, #36]	; (8003898 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	4313      	orrs	r3, r2
 8003876:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003878:	4b07      	ldr	r3, [pc, #28]	; (8003898 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0307 	and.w	r3, r3, #7
 8003880:	693a      	ldr	r2, [r7, #16]
 8003882:	429a      	cmp	r2, r3
 8003884:	d001      	beq.n	800388a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e000      	b.n	800388c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800388a:	2300      	movs	r3, #0
}
 800388c:	4618      	mov	r0, r3
 800388e:	3718      	adds	r7, #24
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	40021000 	.word	0x40021000
 8003898:	40022000 	.word	0x40022000

0800389c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b086      	sub	sp, #24
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80038a4:	2300      	movs	r3, #0
 80038a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80038a8:	2300      	movs	r3, #0
 80038aa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d041      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038bc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80038c0:	d02a      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80038c2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80038c6:	d824      	bhi.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80038c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80038cc:	d008      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80038ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80038d2:	d81e      	bhi.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d00a      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x52>
 80038d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038dc:	d010      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80038de:	e018      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80038e0:	4b86      	ldr	r3, [pc, #536]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	4a85      	ldr	r2, [pc, #532]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038ea:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80038ec:	e015      	b.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	3304      	adds	r3, #4
 80038f2:	2100      	movs	r1, #0
 80038f4:	4618      	mov	r0, r3
 80038f6:	f000 fabb 	bl	8003e70 <RCCEx_PLLSAI1_Config>
 80038fa:	4603      	mov	r3, r0
 80038fc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80038fe:	e00c      	b.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	3320      	adds	r3, #32
 8003904:	2100      	movs	r1, #0
 8003906:	4618      	mov	r0, r3
 8003908:	f000 fba6 	bl	8004058 <RCCEx_PLLSAI2_Config>
 800390c:	4603      	mov	r3, r0
 800390e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003910:	e003      	b.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	74fb      	strb	r3, [r7, #19]
      break;
 8003916:	e000      	b.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003918:	bf00      	nop
    }

    if(ret == HAL_OK)
 800391a:	7cfb      	ldrb	r3, [r7, #19]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d10b      	bne.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003920:	4b76      	ldr	r3, [pc, #472]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003926:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800392e:	4973      	ldr	r1, [pc, #460]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003930:	4313      	orrs	r3, r2
 8003932:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003936:	e001      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003938:	7cfb      	ldrb	r3, [r7, #19]
 800393a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d041      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800394c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003950:	d02a      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003952:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003956:	d824      	bhi.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003958:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800395c:	d008      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800395e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003962:	d81e      	bhi.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003964:	2b00      	cmp	r3, #0
 8003966:	d00a      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003968:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800396c:	d010      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800396e:	e018      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003970:	4b62      	ldr	r3, [pc, #392]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	4a61      	ldr	r2, [pc, #388]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003976:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800397a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800397c:	e015      	b.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	3304      	adds	r3, #4
 8003982:	2100      	movs	r1, #0
 8003984:	4618      	mov	r0, r3
 8003986:	f000 fa73 	bl	8003e70 <RCCEx_PLLSAI1_Config>
 800398a:	4603      	mov	r3, r0
 800398c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800398e:	e00c      	b.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	3320      	adds	r3, #32
 8003994:	2100      	movs	r1, #0
 8003996:	4618      	mov	r0, r3
 8003998:	f000 fb5e 	bl	8004058 <RCCEx_PLLSAI2_Config>
 800399c:	4603      	mov	r3, r0
 800399e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80039a0:	e003      	b.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	74fb      	strb	r3, [r7, #19]
      break;
 80039a6:	e000      	b.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80039a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039aa:	7cfb      	ldrb	r3, [r7, #19]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d10b      	bne.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80039b0:	4b52      	ldr	r3, [pc, #328]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039be:	494f      	ldr	r1, [pc, #316]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80039c6:	e001      	b.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039c8:	7cfb      	ldrb	r3, [r7, #19]
 80039ca:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	f000 80a0 	beq.w	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039da:	2300      	movs	r3, #0
 80039dc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80039de:	4b47      	ldr	r3, [pc, #284]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d101      	bne.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x152>
 80039ea:	2301      	movs	r3, #1
 80039ec:	e000      	b.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80039ee:	2300      	movs	r3, #0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d00d      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039f4:	4b41      	ldr	r3, [pc, #260]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039f8:	4a40      	ldr	r2, [pc, #256]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039fe:	6593      	str	r3, [r2, #88]	; 0x58
 8003a00:	4b3e      	ldr	r3, [pc, #248]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a08:	60bb      	str	r3, [r7, #8]
 8003a0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a10:	4b3b      	ldr	r3, [pc, #236]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a3a      	ldr	r2, [pc, #232]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a1a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a1c:	f7fd fa20 	bl	8000e60 <HAL_GetTick>
 8003a20:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a22:	e009      	b.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a24:	f7fd fa1c 	bl	8000e60 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d902      	bls.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	74fb      	strb	r3, [r7, #19]
        break;
 8003a36:	e005      	b.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a38:	4b31      	ldr	r3, [pc, #196]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d0ef      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003a44:	7cfb      	ldrb	r3, [r7, #19]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d15c      	bne.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a4a:	4b2c      	ldr	r3, [pc, #176]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a54:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d01f      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a62:	697a      	ldr	r2, [r7, #20]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d019      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a68:	4b24      	ldr	r3, [pc, #144]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a72:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a74:	4b21      	ldr	r3, [pc, #132]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a7a:	4a20      	ldr	r2, [pc, #128]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a84:	4b1d      	ldr	r3, [pc, #116]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a8a:	4a1c      	ldr	r2, [pc, #112]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a94:	4a19      	ldr	r2, [pc, #100]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d016      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa6:	f7fd f9db 	bl	8000e60 <HAL_GetTick>
 8003aaa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003aac:	e00b      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aae:	f7fd f9d7 	bl	8000e60 <HAL_GetTick>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d902      	bls.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	74fb      	strb	r3, [r7, #19]
            break;
 8003ac4:	e006      	b.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ac6:	4b0d      	ldr	r3, [pc, #52]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003acc:	f003 0302 	and.w	r3, r3, #2
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d0ec      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003ad4:	7cfb      	ldrb	r3, [r7, #19]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d10c      	bne.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ada:	4b08      	ldr	r3, [pc, #32]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003aea:	4904      	ldr	r1, [pc, #16]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003af2:	e009      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003af4:	7cfb      	ldrb	r3, [r7, #19]
 8003af6:	74bb      	strb	r3, [r7, #18]
 8003af8:	e006      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003afa:	bf00      	nop
 8003afc:	40021000 	.word	0x40021000
 8003b00:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b04:	7cfb      	ldrb	r3, [r7, #19]
 8003b06:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b08:	7c7b      	ldrb	r3, [r7, #17]
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d105      	bne.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b0e:	4b9e      	ldr	r3, [pc, #632]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b12:	4a9d      	ldr	r2, [pc, #628]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b18:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00a      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b26:	4b98      	ldr	r3, [pc, #608]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b2c:	f023 0203 	bic.w	r2, r3, #3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b34:	4994      	ldr	r1, [pc, #592]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0302 	and.w	r3, r3, #2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d00a      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b48:	4b8f      	ldr	r3, [pc, #572]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b4e:	f023 020c 	bic.w	r2, r3, #12
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b56:	498c      	ldr	r1, [pc, #560]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0304 	and.w	r3, r3, #4
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d00a      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b6a:	4b87      	ldr	r3, [pc, #540]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b70:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b78:	4983      	ldr	r1, [pc, #524]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0308 	and.w	r3, r3, #8
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d00a      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b8c:	4b7e      	ldr	r3, [pc, #504]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b92:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b9a:	497b      	ldr	r1, [pc, #492]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0310 	and.w	r3, r3, #16
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00a      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003bae:	4b76      	ldr	r3, [pc, #472]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bbc:	4972      	ldr	r1, [pc, #456]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0320 	and.w	r3, r3, #32
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d00a      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003bd0:	4b6d      	ldr	r3, [pc, #436]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bde:	496a      	ldr	r1, [pc, #424]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00a      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003bf2:	4b65      	ldr	r3, [pc, #404]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bf8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c00:	4961      	ldr	r1, [pc, #388]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d00a      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c14:	4b5c      	ldr	r3, [pc, #368]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c1a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c22:	4959      	ldr	r1, [pc, #356]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d00a      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c36:	4b54      	ldr	r3, [pc, #336]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c3c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c44:	4950      	ldr	r1, [pc, #320]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d00a      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c58:	4b4b      	ldr	r3, [pc, #300]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c5e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c66:	4948      	ldr	r1, [pc, #288]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00a      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c7a:	4b43      	ldr	r3, [pc, #268]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c80:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c88:	493f      	ldr	r1, [pc, #252]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d028      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c9c:	4b3a      	ldr	r3, [pc, #232]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003caa:	4937      	ldr	r1, [pc, #220]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cac:	4313      	orrs	r3, r2
 8003cae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cba:	d106      	bne.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cbc:	4b32      	ldr	r3, [pc, #200]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	4a31      	ldr	r2, [pc, #196]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cc6:	60d3      	str	r3, [r2, #12]
 8003cc8:	e011      	b.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003cd2:	d10c      	bne.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	3304      	adds	r3, #4
 8003cd8:	2101      	movs	r1, #1
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f000 f8c8 	bl	8003e70 <RCCEx_PLLSAI1_Config>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003ce4:	7cfb      	ldrb	r3, [r7, #19]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d001      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003cea:	7cfb      	ldrb	r3, [r7, #19]
 8003cec:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d028      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003cfa:	4b23      	ldr	r3, [pc, #140]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d00:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d08:	491f      	ldr	r1, [pc, #124]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d18:	d106      	bne.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d1a:	4b1b      	ldr	r3, [pc, #108]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	4a1a      	ldr	r2, [pc, #104]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d24:	60d3      	str	r3, [r2, #12]
 8003d26:	e011      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d2c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d30:	d10c      	bne.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	3304      	adds	r3, #4
 8003d36:	2101      	movs	r1, #1
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f000 f899 	bl	8003e70 <RCCEx_PLLSAI1_Config>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d42:	7cfb      	ldrb	r3, [r7, #19]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d001      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003d48:	7cfb      	ldrb	r3, [r7, #19]
 8003d4a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d02b      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d58:	4b0b      	ldr	r3, [pc, #44]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d5e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d66:	4908      	ldr	r1, [pc, #32]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d76:	d109      	bne.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d78:	4b03      	ldr	r3, [pc, #12]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	4a02      	ldr	r2, [pc, #8]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d82:	60d3      	str	r3, [r2, #12]
 8003d84:	e014      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003d86:	bf00      	nop
 8003d88:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d90:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d94:	d10c      	bne.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	3304      	adds	r3, #4
 8003d9a:	2101      	movs	r1, #1
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f000 f867 	bl	8003e70 <RCCEx_PLLSAI1_Config>
 8003da2:	4603      	mov	r3, r0
 8003da4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003da6:	7cfb      	ldrb	r3, [r7, #19]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d001      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003dac:	7cfb      	ldrb	r3, [r7, #19]
 8003dae:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d02f      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003dbc:	4b2b      	ldr	r3, [pc, #172]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dc2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dca:	4928      	ldr	r1, [pc, #160]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003dda:	d10d      	bne.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	3304      	adds	r3, #4
 8003de0:	2102      	movs	r1, #2
 8003de2:	4618      	mov	r0, r3
 8003de4:	f000 f844 	bl	8003e70 <RCCEx_PLLSAI1_Config>
 8003de8:	4603      	mov	r3, r0
 8003dea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003dec:	7cfb      	ldrb	r3, [r7, #19]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d014      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003df2:	7cfb      	ldrb	r3, [r7, #19]
 8003df4:	74bb      	strb	r3, [r7, #18]
 8003df6:	e011      	b.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e00:	d10c      	bne.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	3320      	adds	r3, #32
 8003e06:	2102      	movs	r1, #2
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f000 f925 	bl	8004058 <RCCEx_PLLSAI2_Config>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e12:	7cfb      	ldrb	r3, [r7, #19]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d001      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003e18:	7cfb      	ldrb	r3, [r7, #19]
 8003e1a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d00a      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003e28:	4b10      	ldr	r3, [pc, #64]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e2e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e36:	490d      	ldr	r1, [pc, #52]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00b      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e4a:	4b08      	ldr	r3, [pc, #32]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e50:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e5a:	4904      	ldr	r1, [pc, #16]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003e62:	7cbb      	ldrb	r3, [r7, #18]
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3718      	adds	r7, #24
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	40021000 	.word	0x40021000

08003e70 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003e7e:	4b75      	ldr	r3, [pc, #468]	; (8004054 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	f003 0303 	and.w	r3, r3, #3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d018      	beq.n	8003ebc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003e8a:	4b72      	ldr	r3, [pc, #456]	; (8004054 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	f003 0203 	and.w	r2, r3, #3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d10d      	bne.n	8003eb6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
       ||
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d009      	beq.n	8003eb6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003ea2:	4b6c      	ldr	r3, [pc, #432]	; (8004054 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	091b      	lsrs	r3, r3, #4
 8003ea8:	f003 0307 	and.w	r3, r3, #7
 8003eac:	1c5a      	adds	r2, r3, #1
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
       ||
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d047      	beq.n	8003f46 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	73fb      	strb	r3, [r7, #15]
 8003eba:	e044      	b.n	8003f46 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2b03      	cmp	r3, #3
 8003ec2:	d018      	beq.n	8003ef6 <RCCEx_PLLSAI1_Config+0x86>
 8003ec4:	2b03      	cmp	r3, #3
 8003ec6:	d825      	bhi.n	8003f14 <RCCEx_PLLSAI1_Config+0xa4>
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d002      	beq.n	8003ed2 <RCCEx_PLLSAI1_Config+0x62>
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d009      	beq.n	8003ee4 <RCCEx_PLLSAI1_Config+0x74>
 8003ed0:	e020      	b.n	8003f14 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ed2:	4b60      	ldr	r3, [pc, #384]	; (8004054 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0302 	and.w	r3, r3, #2
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d11d      	bne.n	8003f1a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ee2:	e01a      	b.n	8003f1a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ee4:	4b5b      	ldr	r3, [pc, #364]	; (8004054 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d116      	bne.n	8003f1e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ef4:	e013      	b.n	8003f1e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003ef6:	4b57      	ldr	r3, [pc, #348]	; (8004054 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d10f      	bne.n	8003f22 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f02:	4b54      	ldr	r3, [pc, #336]	; (8004054 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d109      	bne.n	8003f22 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003f12:	e006      	b.n	8003f22 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	73fb      	strb	r3, [r7, #15]
      break;
 8003f18:	e004      	b.n	8003f24 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f1a:	bf00      	nop
 8003f1c:	e002      	b.n	8003f24 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f1e:	bf00      	nop
 8003f20:	e000      	b.n	8003f24 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f22:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f24:	7bfb      	ldrb	r3, [r7, #15]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d10d      	bne.n	8003f46 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f2a:	4b4a      	ldr	r3, [pc, #296]	; (8004054 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6819      	ldr	r1, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	011b      	lsls	r3, r3, #4
 8003f3e:	430b      	orrs	r3, r1
 8003f40:	4944      	ldr	r1, [pc, #272]	; (8004054 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003f46:	7bfb      	ldrb	r3, [r7, #15]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d17d      	bne.n	8004048 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003f4c:	4b41      	ldr	r3, [pc, #260]	; (8004054 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a40      	ldr	r2, [pc, #256]	; (8004054 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f52:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003f56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f58:	f7fc ff82 	bl	8000e60 <HAL_GetTick>
 8003f5c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f5e:	e009      	b.n	8003f74 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f60:	f7fc ff7e 	bl	8000e60 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d902      	bls.n	8003f74 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	73fb      	strb	r3, [r7, #15]
        break;
 8003f72:	e005      	b.n	8003f80 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f74:	4b37      	ldr	r3, [pc, #220]	; (8004054 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d1ef      	bne.n	8003f60 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003f80:	7bfb      	ldrb	r3, [r7, #15]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d160      	bne.n	8004048 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d111      	bne.n	8003fb0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f8c:	4b31      	ldr	r3, [pc, #196]	; (8004054 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003f94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	6892      	ldr	r2, [r2, #8]
 8003f9c:	0211      	lsls	r1, r2, #8
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	68d2      	ldr	r2, [r2, #12]
 8003fa2:	0912      	lsrs	r2, r2, #4
 8003fa4:	0452      	lsls	r2, r2, #17
 8003fa6:	430a      	orrs	r2, r1
 8003fa8:	492a      	ldr	r1, [pc, #168]	; (8004054 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	610b      	str	r3, [r1, #16]
 8003fae:	e027      	b.n	8004000 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d112      	bne.n	8003fdc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003fb6:	4b27      	ldr	r3, [pc, #156]	; (8004054 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003fbe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	6892      	ldr	r2, [r2, #8]
 8003fc6:	0211      	lsls	r1, r2, #8
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	6912      	ldr	r2, [r2, #16]
 8003fcc:	0852      	lsrs	r2, r2, #1
 8003fce:	3a01      	subs	r2, #1
 8003fd0:	0552      	lsls	r2, r2, #21
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	491f      	ldr	r1, [pc, #124]	; (8004054 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	610b      	str	r3, [r1, #16]
 8003fda:	e011      	b.n	8004000 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003fdc:	4b1d      	ldr	r3, [pc, #116]	; (8004054 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fde:	691b      	ldr	r3, [r3, #16]
 8003fe0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003fe4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	6892      	ldr	r2, [r2, #8]
 8003fec:	0211      	lsls	r1, r2, #8
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	6952      	ldr	r2, [r2, #20]
 8003ff2:	0852      	lsrs	r2, r2, #1
 8003ff4:	3a01      	subs	r2, #1
 8003ff6:	0652      	lsls	r2, r2, #25
 8003ff8:	430a      	orrs	r2, r1
 8003ffa:	4916      	ldr	r1, [pc, #88]	; (8004054 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004000:	4b14      	ldr	r3, [pc, #80]	; (8004054 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a13      	ldr	r2, [pc, #76]	; (8004054 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004006:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800400a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800400c:	f7fc ff28 	bl	8000e60 <HAL_GetTick>
 8004010:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004012:	e009      	b.n	8004028 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004014:	f7fc ff24 	bl	8000e60 <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b02      	cmp	r3, #2
 8004020:	d902      	bls.n	8004028 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	73fb      	strb	r3, [r7, #15]
          break;
 8004026:	e005      	b.n	8004034 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004028:	4b0a      	ldr	r3, [pc, #40]	; (8004054 <RCCEx_PLLSAI1_Config+0x1e4>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004030:	2b00      	cmp	r3, #0
 8004032:	d0ef      	beq.n	8004014 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004034:	7bfb      	ldrb	r3, [r7, #15]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d106      	bne.n	8004048 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800403a:	4b06      	ldr	r3, [pc, #24]	; (8004054 <RCCEx_PLLSAI1_Config+0x1e4>)
 800403c:	691a      	ldr	r2, [r3, #16]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	699b      	ldr	r3, [r3, #24]
 8004042:	4904      	ldr	r1, [pc, #16]	; (8004054 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004044:	4313      	orrs	r3, r2
 8004046:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004048:	7bfb      	ldrb	r3, [r7, #15]
}
 800404a:	4618      	mov	r0, r3
 800404c:	3710      	adds	r7, #16
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	40021000 	.word	0x40021000

08004058 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004062:	2300      	movs	r3, #0
 8004064:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004066:	4b6a      	ldr	r3, [pc, #424]	; (8004210 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	f003 0303 	and.w	r3, r3, #3
 800406e:	2b00      	cmp	r3, #0
 8004070:	d018      	beq.n	80040a4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004072:	4b67      	ldr	r3, [pc, #412]	; (8004210 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	f003 0203 	and.w	r2, r3, #3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	429a      	cmp	r2, r3
 8004080:	d10d      	bne.n	800409e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
       ||
 8004086:	2b00      	cmp	r3, #0
 8004088:	d009      	beq.n	800409e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800408a:	4b61      	ldr	r3, [pc, #388]	; (8004210 <RCCEx_PLLSAI2_Config+0x1b8>)
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	091b      	lsrs	r3, r3, #4
 8004090:	f003 0307 	and.w	r3, r3, #7
 8004094:	1c5a      	adds	r2, r3, #1
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
       ||
 800409a:	429a      	cmp	r2, r3
 800409c:	d047      	beq.n	800412e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	73fb      	strb	r3, [r7, #15]
 80040a2:	e044      	b.n	800412e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2b03      	cmp	r3, #3
 80040aa:	d018      	beq.n	80040de <RCCEx_PLLSAI2_Config+0x86>
 80040ac:	2b03      	cmp	r3, #3
 80040ae:	d825      	bhi.n	80040fc <RCCEx_PLLSAI2_Config+0xa4>
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d002      	beq.n	80040ba <RCCEx_PLLSAI2_Config+0x62>
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d009      	beq.n	80040cc <RCCEx_PLLSAI2_Config+0x74>
 80040b8:	e020      	b.n	80040fc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80040ba:	4b55      	ldr	r3, [pc, #340]	; (8004210 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0302 	and.w	r3, r3, #2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d11d      	bne.n	8004102 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040ca:	e01a      	b.n	8004102 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80040cc:	4b50      	ldr	r3, [pc, #320]	; (8004210 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d116      	bne.n	8004106 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040dc:	e013      	b.n	8004106 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80040de:	4b4c      	ldr	r3, [pc, #304]	; (8004210 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d10f      	bne.n	800410a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80040ea:	4b49      	ldr	r3, [pc, #292]	; (8004210 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d109      	bne.n	800410a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80040fa:	e006      	b.n	800410a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	73fb      	strb	r3, [r7, #15]
      break;
 8004100:	e004      	b.n	800410c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004102:	bf00      	nop
 8004104:	e002      	b.n	800410c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004106:	bf00      	nop
 8004108:	e000      	b.n	800410c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800410a:	bf00      	nop
    }

    if(status == HAL_OK)
 800410c:	7bfb      	ldrb	r3, [r7, #15]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d10d      	bne.n	800412e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004112:	4b3f      	ldr	r3, [pc, #252]	; (8004210 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6819      	ldr	r1, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	3b01      	subs	r3, #1
 8004124:	011b      	lsls	r3, r3, #4
 8004126:	430b      	orrs	r3, r1
 8004128:	4939      	ldr	r1, [pc, #228]	; (8004210 <RCCEx_PLLSAI2_Config+0x1b8>)
 800412a:	4313      	orrs	r3, r2
 800412c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800412e:	7bfb      	ldrb	r3, [r7, #15]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d167      	bne.n	8004204 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004134:	4b36      	ldr	r3, [pc, #216]	; (8004210 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a35      	ldr	r2, [pc, #212]	; (8004210 <RCCEx_PLLSAI2_Config+0x1b8>)
 800413a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800413e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004140:	f7fc fe8e 	bl	8000e60 <HAL_GetTick>
 8004144:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004146:	e009      	b.n	800415c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004148:	f7fc fe8a 	bl	8000e60 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	2b02      	cmp	r3, #2
 8004154:	d902      	bls.n	800415c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	73fb      	strb	r3, [r7, #15]
        break;
 800415a:	e005      	b.n	8004168 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800415c:	4b2c      	ldr	r3, [pc, #176]	; (8004210 <RCCEx_PLLSAI2_Config+0x1b8>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d1ef      	bne.n	8004148 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004168:	7bfb      	ldrb	r3, [r7, #15]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d14a      	bne.n	8004204 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d111      	bne.n	8004198 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004174:	4b26      	ldr	r3, [pc, #152]	; (8004210 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004176:	695b      	ldr	r3, [r3, #20]
 8004178:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800417c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	6892      	ldr	r2, [r2, #8]
 8004184:	0211      	lsls	r1, r2, #8
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	68d2      	ldr	r2, [r2, #12]
 800418a:	0912      	lsrs	r2, r2, #4
 800418c:	0452      	lsls	r2, r2, #17
 800418e:	430a      	orrs	r2, r1
 8004190:	491f      	ldr	r1, [pc, #124]	; (8004210 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004192:	4313      	orrs	r3, r2
 8004194:	614b      	str	r3, [r1, #20]
 8004196:	e011      	b.n	80041bc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004198:	4b1d      	ldr	r3, [pc, #116]	; (8004210 <RCCEx_PLLSAI2_Config+0x1b8>)
 800419a:	695b      	ldr	r3, [r3, #20]
 800419c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80041a0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	6892      	ldr	r2, [r2, #8]
 80041a8:	0211      	lsls	r1, r2, #8
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	6912      	ldr	r2, [r2, #16]
 80041ae:	0852      	lsrs	r2, r2, #1
 80041b0:	3a01      	subs	r2, #1
 80041b2:	0652      	lsls	r2, r2, #25
 80041b4:	430a      	orrs	r2, r1
 80041b6:	4916      	ldr	r1, [pc, #88]	; (8004210 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80041bc:	4b14      	ldr	r3, [pc, #80]	; (8004210 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a13      	ldr	r2, [pc, #76]	; (8004210 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041c6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041c8:	f7fc fe4a 	bl	8000e60 <HAL_GetTick>
 80041cc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80041ce:	e009      	b.n	80041e4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80041d0:	f7fc fe46 	bl	8000e60 <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d902      	bls.n	80041e4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	73fb      	strb	r3, [r7, #15]
          break;
 80041e2:	e005      	b.n	80041f0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80041e4:	4b0a      	ldr	r3, [pc, #40]	; (8004210 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d0ef      	beq.n	80041d0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80041f0:	7bfb      	ldrb	r3, [r7, #15]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d106      	bne.n	8004204 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80041f6:	4b06      	ldr	r3, [pc, #24]	; (8004210 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041f8:	695a      	ldr	r2, [r3, #20]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	4904      	ldr	r1, [pc, #16]	; (8004210 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004200:	4313      	orrs	r3, r2
 8004202:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004204:	7bfb      	ldrb	r3, [r7, #15]
}
 8004206:	4618      	mov	r0, r3
 8004208:	3710      	adds	r7, #16
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	40021000 	.word	0x40021000

08004214 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d101      	bne.n	8004226 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e049      	b.n	80042ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800422c:	b2db      	uxtb	r3, r3
 800422e:	2b00      	cmp	r3, #0
 8004230:	d106      	bne.n	8004240 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f7fc fc80 	bl	8000b40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2202      	movs	r2, #2
 8004244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	3304      	adds	r3, #4
 8004250:	4619      	mov	r1, r3
 8004252:	4610      	mov	r0, r2
 8004254:	f000 fb7a 	bl	800494c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3708      	adds	r7, #8
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b082      	sub	sp, #8
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d101      	bne.n	80042d4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e049      	b.n	8004368 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d106      	bne.n	80042ee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f000 f841 	bl	8004370 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2202      	movs	r2, #2
 80042f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	3304      	adds	r3, #4
 80042fe:	4619      	mov	r1, r3
 8004300:	4610      	mov	r0, r2
 8004302:	f000 fb23 	bl	800494c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2201      	movs	r2, #1
 800430a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2201      	movs	r2, #1
 8004312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2201      	movs	r2, #1
 800431a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2201      	movs	r2, #1
 8004322:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2201      	movs	r2, #1
 800432a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2201      	movs	r2, #1
 8004332:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2201      	movs	r2, #1
 800433a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2201      	movs	r2, #1
 8004342:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2201      	movs	r2, #1
 800434a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2201      	movs	r2, #1
 8004352:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2201      	movs	r2, #1
 800435a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2201      	movs	r2, #1
 8004362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004366:	2300      	movs	r3, #0
}
 8004368:	4618      	mov	r0, r3
 800436a:	3708      	adds	r7, #8
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004378:	bf00      	nop
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d109      	bne.n	80043a8 <HAL_TIM_PWM_Start+0x24>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800439a:	b2db      	uxtb	r3, r3
 800439c:	2b01      	cmp	r3, #1
 800439e:	bf14      	ite	ne
 80043a0:	2301      	movne	r3, #1
 80043a2:	2300      	moveq	r3, #0
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	e03c      	b.n	8004422 <HAL_TIM_PWM_Start+0x9e>
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	2b04      	cmp	r3, #4
 80043ac:	d109      	bne.n	80043c2 <HAL_TIM_PWM_Start+0x3e>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	bf14      	ite	ne
 80043ba:	2301      	movne	r3, #1
 80043bc:	2300      	moveq	r3, #0
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	e02f      	b.n	8004422 <HAL_TIM_PWM_Start+0x9e>
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	2b08      	cmp	r3, #8
 80043c6:	d109      	bne.n	80043dc <HAL_TIM_PWM_Start+0x58>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	bf14      	ite	ne
 80043d4:	2301      	movne	r3, #1
 80043d6:	2300      	moveq	r3, #0
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	e022      	b.n	8004422 <HAL_TIM_PWM_Start+0x9e>
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	2b0c      	cmp	r3, #12
 80043e0:	d109      	bne.n	80043f6 <HAL_TIM_PWM_Start+0x72>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	bf14      	ite	ne
 80043ee:	2301      	movne	r3, #1
 80043f0:	2300      	moveq	r3, #0
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	e015      	b.n	8004422 <HAL_TIM_PWM_Start+0x9e>
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	2b10      	cmp	r3, #16
 80043fa:	d109      	bne.n	8004410 <HAL_TIM_PWM_Start+0x8c>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004402:	b2db      	uxtb	r3, r3
 8004404:	2b01      	cmp	r3, #1
 8004406:	bf14      	ite	ne
 8004408:	2301      	movne	r3, #1
 800440a:	2300      	moveq	r3, #0
 800440c:	b2db      	uxtb	r3, r3
 800440e:	e008      	b.n	8004422 <HAL_TIM_PWM_Start+0x9e>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004416:	b2db      	uxtb	r3, r3
 8004418:	2b01      	cmp	r3, #1
 800441a:	bf14      	ite	ne
 800441c:	2301      	movne	r3, #1
 800441e:	2300      	moveq	r3, #0
 8004420:	b2db      	uxtb	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d001      	beq.n	800442a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e09c      	b.n	8004564 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d104      	bne.n	800443a <HAL_TIM_PWM_Start+0xb6>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2202      	movs	r2, #2
 8004434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004438:	e023      	b.n	8004482 <HAL_TIM_PWM_Start+0xfe>
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	2b04      	cmp	r3, #4
 800443e:	d104      	bne.n	800444a <HAL_TIM_PWM_Start+0xc6>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2202      	movs	r2, #2
 8004444:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004448:	e01b      	b.n	8004482 <HAL_TIM_PWM_Start+0xfe>
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	2b08      	cmp	r3, #8
 800444e:	d104      	bne.n	800445a <HAL_TIM_PWM_Start+0xd6>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2202      	movs	r2, #2
 8004454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004458:	e013      	b.n	8004482 <HAL_TIM_PWM_Start+0xfe>
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	2b0c      	cmp	r3, #12
 800445e:	d104      	bne.n	800446a <HAL_TIM_PWM_Start+0xe6>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2202      	movs	r2, #2
 8004464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004468:	e00b      	b.n	8004482 <HAL_TIM_PWM_Start+0xfe>
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	2b10      	cmp	r3, #16
 800446e:	d104      	bne.n	800447a <HAL_TIM_PWM_Start+0xf6>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2202      	movs	r2, #2
 8004474:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004478:	e003      	b.n	8004482 <HAL_TIM_PWM_Start+0xfe>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2202      	movs	r2, #2
 800447e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2201      	movs	r2, #1
 8004488:	6839      	ldr	r1, [r7, #0]
 800448a:	4618      	mov	r0, r3
 800448c:	f000 fe68 	bl	8005160 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a35      	ldr	r2, [pc, #212]	; (800456c <HAL_TIM_PWM_Start+0x1e8>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d013      	beq.n	80044c2 <HAL_TIM_PWM_Start+0x13e>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a34      	ldr	r2, [pc, #208]	; (8004570 <HAL_TIM_PWM_Start+0x1ec>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d00e      	beq.n	80044c2 <HAL_TIM_PWM_Start+0x13e>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a32      	ldr	r2, [pc, #200]	; (8004574 <HAL_TIM_PWM_Start+0x1f0>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d009      	beq.n	80044c2 <HAL_TIM_PWM_Start+0x13e>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a31      	ldr	r2, [pc, #196]	; (8004578 <HAL_TIM_PWM_Start+0x1f4>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d004      	beq.n	80044c2 <HAL_TIM_PWM_Start+0x13e>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a2f      	ldr	r2, [pc, #188]	; (800457c <HAL_TIM_PWM_Start+0x1f8>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d101      	bne.n	80044c6 <HAL_TIM_PWM_Start+0x142>
 80044c2:	2301      	movs	r3, #1
 80044c4:	e000      	b.n	80044c8 <HAL_TIM_PWM_Start+0x144>
 80044c6:	2300      	movs	r3, #0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d007      	beq.n	80044dc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044da:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a22      	ldr	r2, [pc, #136]	; (800456c <HAL_TIM_PWM_Start+0x1e8>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d01d      	beq.n	8004522 <HAL_TIM_PWM_Start+0x19e>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ee:	d018      	beq.n	8004522 <HAL_TIM_PWM_Start+0x19e>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a22      	ldr	r2, [pc, #136]	; (8004580 <HAL_TIM_PWM_Start+0x1fc>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d013      	beq.n	8004522 <HAL_TIM_PWM_Start+0x19e>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a21      	ldr	r2, [pc, #132]	; (8004584 <HAL_TIM_PWM_Start+0x200>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d00e      	beq.n	8004522 <HAL_TIM_PWM_Start+0x19e>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a1f      	ldr	r2, [pc, #124]	; (8004588 <HAL_TIM_PWM_Start+0x204>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d009      	beq.n	8004522 <HAL_TIM_PWM_Start+0x19e>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a17      	ldr	r2, [pc, #92]	; (8004570 <HAL_TIM_PWM_Start+0x1ec>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d004      	beq.n	8004522 <HAL_TIM_PWM_Start+0x19e>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a15      	ldr	r2, [pc, #84]	; (8004574 <HAL_TIM_PWM_Start+0x1f0>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d115      	bne.n	800454e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	689a      	ldr	r2, [r3, #8]
 8004528:	4b18      	ldr	r3, [pc, #96]	; (800458c <HAL_TIM_PWM_Start+0x208>)
 800452a:	4013      	ands	r3, r2
 800452c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2b06      	cmp	r3, #6
 8004532:	d015      	beq.n	8004560 <HAL_TIM_PWM_Start+0x1dc>
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800453a:	d011      	beq.n	8004560 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f042 0201 	orr.w	r2, r2, #1
 800454a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800454c:	e008      	b.n	8004560 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f042 0201 	orr.w	r2, r2, #1
 800455c:	601a      	str	r2, [r3, #0]
 800455e:	e000      	b.n	8004562 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004560:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004562:	2300      	movs	r3, #0
}
 8004564:	4618      	mov	r0, r3
 8004566:	3710      	adds	r7, #16
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}
 800456c:	40012c00 	.word	0x40012c00
 8004570:	40013400 	.word	0x40013400
 8004574:	40014000 	.word	0x40014000
 8004578:	40014400 	.word	0x40014400
 800457c:	40014800 	.word	0x40014800
 8004580:	40000400 	.word	0x40000400
 8004584:	40000800 	.word	0x40000800
 8004588:	40000c00 	.word	0x40000c00
 800458c:	00010007 	.word	0x00010007

08004590 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b086      	sub	sp, #24
 8004594:	af00      	add	r7, sp, #0
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	60b9      	str	r1, [r7, #8]
 800459a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800459c:	2300      	movs	r3, #0
 800459e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d101      	bne.n	80045ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80045aa:	2302      	movs	r3, #2
 80045ac:	e0ff      	b.n	80047ae <HAL_TIM_PWM_ConfigChannel+0x21e>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2201      	movs	r2, #1
 80045b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2b14      	cmp	r3, #20
 80045ba:	f200 80f0 	bhi.w	800479e <HAL_TIM_PWM_ConfigChannel+0x20e>
 80045be:	a201      	add	r2, pc, #4	; (adr r2, 80045c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80045c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c4:	08004619 	.word	0x08004619
 80045c8:	0800479f 	.word	0x0800479f
 80045cc:	0800479f 	.word	0x0800479f
 80045d0:	0800479f 	.word	0x0800479f
 80045d4:	08004659 	.word	0x08004659
 80045d8:	0800479f 	.word	0x0800479f
 80045dc:	0800479f 	.word	0x0800479f
 80045e0:	0800479f 	.word	0x0800479f
 80045e4:	0800469b 	.word	0x0800469b
 80045e8:	0800479f 	.word	0x0800479f
 80045ec:	0800479f 	.word	0x0800479f
 80045f0:	0800479f 	.word	0x0800479f
 80045f4:	080046db 	.word	0x080046db
 80045f8:	0800479f 	.word	0x0800479f
 80045fc:	0800479f 	.word	0x0800479f
 8004600:	0800479f 	.word	0x0800479f
 8004604:	0800471d 	.word	0x0800471d
 8004608:	0800479f 	.word	0x0800479f
 800460c:	0800479f 	.word	0x0800479f
 8004610:	0800479f 	.word	0x0800479f
 8004614:	0800475d 	.word	0x0800475d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68b9      	ldr	r1, [r7, #8]
 800461e:	4618      	mov	r0, r3
 8004620:	f000 fa2e 	bl	8004a80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	699a      	ldr	r2, [r3, #24]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f042 0208 	orr.w	r2, r2, #8
 8004632:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	699a      	ldr	r2, [r3, #24]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f022 0204 	bic.w	r2, r2, #4
 8004642:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	6999      	ldr	r1, [r3, #24]
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	691a      	ldr	r2, [r3, #16]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	430a      	orrs	r2, r1
 8004654:	619a      	str	r2, [r3, #24]
      break;
 8004656:	e0a5      	b.n	80047a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	68b9      	ldr	r1, [r7, #8]
 800465e:	4618      	mov	r0, r3
 8004660:	f000 fa9e 	bl	8004ba0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	699a      	ldr	r2, [r3, #24]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004672:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	699a      	ldr	r2, [r3, #24]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004682:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	6999      	ldr	r1, [r3, #24]
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	021a      	lsls	r2, r3, #8
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	430a      	orrs	r2, r1
 8004696:	619a      	str	r2, [r3, #24]
      break;
 8004698:	e084      	b.n	80047a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68b9      	ldr	r1, [r7, #8]
 80046a0:	4618      	mov	r0, r3
 80046a2:	f000 fb07 	bl	8004cb4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	69da      	ldr	r2, [r3, #28]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f042 0208 	orr.w	r2, r2, #8
 80046b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	69da      	ldr	r2, [r3, #28]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f022 0204 	bic.w	r2, r2, #4
 80046c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	69d9      	ldr	r1, [r3, #28]
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	691a      	ldr	r2, [r3, #16]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	430a      	orrs	r2, r1
 80046d6:	61da      	str	r2, [r3, #28]
      break;
 80046d8:	e064      	b.n	80047a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	68b9      	ldr	r1, [r7, #8]
 80046e0:	4618      	mov	r0, r3
 80046e2:	f000 fb6f 	bl	8004dc4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	69da      	ldr	r2, [r3, #28]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	69da      	ldr	r2, [r3, #28]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004704:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	69d9      	ldr	r1, [r3, #28]
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	021a      	lsls	r2, r3, #8
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	430a      	orrs	r2, r1
 8004718:	61da      	str	r2, [r3, #28]
      break;
 800471a:	e043      	b.n	80047a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68b9      	ldr	r1, [r7, #8]
 8004722:	4618      	mov	r0, r3
 8004724:	f000 fbb8 	bl	8004e98 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f042 0208 	orr.w	r2, r2, #8
 8004736:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f022 0204 	bic.w	r2, r2, #4
 8004746:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	691a      	ldr	r2, [r3, #16]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	430a      	orrs	r2, r1
 8004758:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800475a:	e023      	b.n	80047a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68b9      	ldr	r1, [r7, #8]
 8004762:	4618      	mov	r0, r3
 8004764:	f000 fbfc 	bl	8004f60 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004776:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004786:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	021a      	lsls	r2, r3, #8
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	430a      	orrs	r2, r1
 800479a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800479c:	e002      	b.n	80047a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	75fb      	strb	r3, [r7, #23]
      break;
 80047a2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3718      	adds	r7, #24
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop

080047b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047c2:	2300      	movs	r3, #0
 80047c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d101      	bne.n	80047d4 <HAL_TIM_ConfigClockSource+0x1c>
 80047d0:	2302      	movs	r3, #2
 80047d2:	e0b6      	b.n	8004942 <HAL_TIM_ConfigClockSource+0x18a>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2202      	movs	r2, #2
 80047e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80047f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68ba      	ldr	r2, [r7, #8]
 8004806:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004810:	d03e      	beq.n	8004890 <HAL_TIM_ConfigClockSource+0xd8>
 8004812:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004816:	f200 8087 	bhi.w	8004928 <HAL_TIM_ConfigClockSource+0x170>
 800481a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800481e:	f000 8086 	beq.w	800492e <HAL_TIM_ConfigClockSource+0x176>
 8004822:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004826:	d87f      	bhi.n	8004928 <HAL_TIM_ConfigClockSource+0x170>
 8004828:	2b70      	cmp	r3, #112	; 0x70
 800482a:	d01a      	beq.n	8004862 <HAL_TIM_ConfigClockSource+0xaa>
 800482c:	2b70      	cmp	r3, #112	; 0x70
 800482e:	d87b      	bhi.n	8004928 <HAL_TIM_ConfigClockSource+0x170>
 8004830:	2b60      	cmp	r3, #96	; 0x60
 8004832:	d050      	beq.n	80048d6 <HAL_TIM_ConfigClockSource+0x11e>
 8004834:	2b60      	cmp	r3, #96	; 0x60
 8004836:	d877      	bhi.n	8004928 <HAL_TIM_ConfigClockSource+0x170>
 8004838:	2b50      	cmp	r3, #80	; 0x50
 800483a:	d03c      	beq.n	80048b6 <HAL_TIM_ConfigClockSource+0xfe>
 800483c:	2b50      	cmp	r3, #80	; 0x50
 800483e:	d873      	bhi.n	8004928 <HAL_TIM_ConfigClockSource+0x170>
 8004840:	2b40      	cmp	r3, #64	; 0x40
 8004842:	d058      	beq.n	80048f6 <HAL_TIM_ConfigClockSource+0x13e>
 8004844:	2b40      	cmp	r3, #64	; 0x40
 8004846:	d86f      	bhi.n	8004928 <HAL_TIM_ConfigClockSource+0x170>
 8004848:	2b30      	cmp	r3, #48	; 0x30
 800484a:	d064      	beq.n	8004916 <HAL_TIM_ConfigClockSource+0x15e>
 800484c:	2b30      	cmp	r3, #48	; 0x30
 800484e:	d86b      	bhi.n	8004928 <HAL_TIM_ConfigClockSource+0x170>
 8004850:	2b20      	cmp	r3, #32
 8004852:	d060      	beq.n	8004916 <HAL_TIM_ConfigClockSource+0x15e>
 8004854:	2b20      	cmp	r3, #32
 8004856:	d867      	bhi.n	8004928 <HAL_TIM_ConfigClockSource+0x170>
 8004858:	2b00      	cmp	r3, #0
 800485a:	d05c      	beq.n	8004916 <HAL_TIM_ConfigClockSource+0x15e>
 800485c:	2b10      	cmp	r3, #16
 800485e:	d05a      	beq.n	8004916 <HAL_TIM_ConfigClockSource+0x15e>
 8004860:	e062      	b.n	8004928 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004872:	f000 fc55 	bl	8005120 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004884:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68ba      	ldr	r2, [r7, #8]
 800488c:	609a      	str	r2, [r3, #8]
      break;
 800488e:	e04f      	b.n	8004930 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80048a0:	f000 fc3e 	bl	8005120 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	689a      	ldr	r2, [r3, #8]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048b2:	609a      	str	r2, [r3, #8]
      break;
 80048b4:	e03c      	b.n	8004930 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048c2:	461a      	mov	r2, r3
 80048c4:	f000 fbb2 	bl	800502c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2150      	movs	r1, #80	; 0x50
 80048ce:	4618      	mov	r0, r3
 80048d0:	f000 fc0b 	bl	80050ea <TIM_ITRx_SetConfig>
      break;
 80048d4:	e02c      	b.n	8004930 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80048e2:	461a      	mov	r2, r3
 80048e4:	f000 fbd1 	bl	800508a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2160      	movs	r1, #96	; 0x60
 80048ee:	4618      	mov	r0, r3
 80048f0:	f000 fbfb 	bl	80050ea <TIM_ITRx_SetConfig>
      break;
 80048f4:	e01c      	b.n	8004930 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004902:	461a      	mov	r2, r3
 8004904:	f000 fb92 	bl	800502c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2140      	movs	r1, #64	; 0x40
 800490e:	4618      	mov	r0, r3
 8004910:	f000 fbeb 	bl	80050ea <TIM_ITRx_SetConfig>
      break;
 8004914:	e00c      	b.n	8004930 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4619      	mov	r1, r3
 8004920:	4610      	mov	r0, r2
 8004922:	f000 fbe2 	bl	80050ea <TIM_ITRx_SetConfig>
      break;
 8004926:	e003      	b.n	8004930 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	73fb      	strb	r3, [r7, #15]
      break;
 800492c:	e000      	b.n	8004930 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800492e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004940:	7bfb      	ldrb	r3, [r7, #15]
}
 8004942:	4618      	mov	r0, r3
 8004944:	3710      	adds	r7, #16
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
	...

0800494c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800494c:	b480      	push	{r7}
 800494e:	b085      	sub	sp, #20
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a40      	ldr	r2, [pc, #256]	; (8004a60 <TIM_Base_SetConfig+0x114>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d013      	beq.n	800498c <TIM_Base_SetConfig+0x40>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800496a:	d00f      	beq.n	800498c <TIM_Base_SetConfig+0x40>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	4a3d      	ldr	r2, [pc, #244]	; (8004a64 <TIM_Base_SetConfig+0x118>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d00b      	beq.n	800498c <TIM_Base_SetConfig+0x40>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a3c      	ldr	r2, [pc, #240]	; (8004a68 <TIM_Base_SetConfig+0x11c>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d007      	beq.n	800498c <TIM_Base_SetConfig+0x40>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a3b      	ldr	r2, [pc, #236]	; (8004a6c <TIM_Base_SetConfig+0x120>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d003      	beq.n	800498c <TIM_Base_SetConfig+0x40>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a3a      	ldr	r2, [pc, #232]	; (8004a70 <TIM_Base_SetConfig+0x124>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d108      	bne.n	800499e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004992:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	68fa      	ldr	r2, [r7, #12]
 800499a:	4313      	orrs	r3, r2
 800499c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a2f      	ldr	r2, [pc, #188]	; (8004a60 <TIM_Base_SetConfig+0x114>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d01f      	beq.n	80049e6 <TIM_Base_SetConfig+0x9a>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049ac:	d01b      	beq.n	80049e6 <TIM_Base_SetConfig+0x9a>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a2c      	ldr	r2, [pc, #176]	; (8004a64 <TIM_Base_SetConfig+0x118>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d017      	beq.n	80049e6 <TIM_Base_SetConfig+0x9a>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a2b      	ldr	r2, [pc, #172]	; (8004a68 <TIM_Base_SetConfig+0x11c>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d013      	beq.n	80049e6 <TIM_Base_SetConfig+0x9a>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a2a      	ldr	r2, [pc, #168]	; (8004a6c <TIM_Base_SetConfig+0x120>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d00f      	beq.n	80049e6 <TIM_Base_SetConfig+0x9a>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a29      	ldr	r2, [pc, #164]	; (8004a70 <TIM_Base_SetConfig+0x124>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d00b      	beq.n	80049e6 <TIM_Base_SetConfig+0x9a>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a28      	ldr	r2, [pc, #160]	; (8004a74 <TIM_Base_SetConfig+0x128>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d007      	beq.n	80049e6 <TIM_Base_SetConfig+0x9a>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a27      	ldr	r2, [pc, #156]	; (8004a78 <TIM_Base_SetConfig+0x12c>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d003      	beq.n	80049e6 <TIM_Base_SetConfig+0x9a>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a26      	ldr	r2, [pc, #152]	; (8004a7c <TIM_Base_SetConfig+0x130>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d108      	bne.n	80049f8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	68fa      	ldr	r2, [r7, #12]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	695b      	ldr	r3, [r3, #20]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	68fa      	ldr	r2, [r7, #12]
 8004a0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	689a      	ldr	r2, [r3, #8]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4a10      	ldr	r2, [pc, #64]	; (8004a60 <TIM_Base_SetConfig+0x114>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d00f      	beq.n	8004a44 <TIM_Base_SetConfig+0xf8>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4a12      	ldr	r2, [pc, #72]	; (8004a70 <TIM_Base_SetConfig+0x124>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d00b      	beq.n	8004a44 <TIM_Base_SetConfig+0xf8>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4a11      	ldr	r2, [pc, #68]	; (8004a74 <TIM_Base_SetConfig+0x128>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d007      	beq.n	8004a44 <TIM_Base_SetConfig+0xf8>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4a10      	ldr	r2, [pc, #64]	; (8004a78 <TIM_Base_SetConfig+0x12c>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d003      	beq.n	8004a44 <TIM_Base_SetConfig+0xf8>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4a0f      	ldr	r2, [pc, #60]	; (8004a7c <TIM_Base_SetConfig+0x130>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d103      	bne.n	8004a4c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	691a      	ldr	r2, [r3, #16]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	615a      	str	r2, [r3, #20]
}
 8004a52:	bf00      	nop
 8004a54:	3714      	adds	r7, #20
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop
 8004a60:	40012c00 	.word	0x40012c00
 8004a64:	40000400 	.word	0x40000400
 8004a68:	40000800 	.word	0x40000800
 8004a6c:	40000c00 	.word	0x40000c00
 8004a70:	40013400 	.word	0x40013400
 8004a74:	40014000 	.word	0x40014000
 8004a78:	40014400 	.word	0x40014400
 8004a7c:	40014800 	.word	0x40014800

08004a80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b087      	sub	sp, #28
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a1b      	ldr	r3, [r3, #32]
 8004a8e:	f023 0201 	bic.w	r2, r3, #1
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a1b      	ldr	r3, [r3, #32]
 8004a9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	699b      	ldr	r3, [r3, #24]
 8004aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004aae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f023 0303 	bic.w	r3, r3, #3
 8004aba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	f023 0302 	bic.w	r3, r3, #2
 8004acc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	697a      	ldr	r2, [r7, #20]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	4a2c      	ldr	r2, [pc, #176]	; (8004b8c <TIM_OC1_SetConfig+0x10c>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d00f      	beq.n	8004b00 <TIM_OC1_SetConfig+0x80>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4a2b      	ldr	r2, [pc, #172]	; (8004b90 <TIM_OC1_SetConfig+0x110>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d00b      	beq.n	8004b00 <TIM_OC1_SetConfig+0x80>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4a2a      	ldr	r2, [pc, #168]	; (8004b94 <TIM_OC1_SetConfig+0x114>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d007      	beq.n	8004b00 <TIM_OC1_SetConfig+0x80>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4a29      	ldr	r2, [pc, #164]	; (8004b98 <TIM_OC1_SetConfig+0x118>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d003      	beq.n	8004b00 <TIM_OC1_SetConfig+0x80>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4a28      	ldr	r2, [pc, #160]	; (8004b9c <TIM_OC1_SetConfig+0x11c>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d10c      	bne.n	8004b1a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	f023 0308 	bic.w	r3, r3, #8
 8004b06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	697a      	ldr	r2, [r7, #20]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	f023 0304 	bic.w	r3, r3, #4
 8004b18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4a1b      	ldr	r2, [pc, #108]	; (8004b8c <TIM_OC1_SetConfig+0x10c>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d00f      	beq.n	8004b42 <TIM_OC1_SetConfig+0xc2>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a1a      	ldr	r2, [pc, #104]	; (8004b90 <TIM_OC1_SetConfig+0x110>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d00b      	beq.n	8004b42 <TIM_OC1_SetConfig+0xc2>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4a19      	ldr	r2, [pc, #100]	; (8004b94 <TIM_OC1_SetConfig+0x114>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d007      	beq.n	8004b42 <TIM_OC1_SetConfig+0xc2>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a18      	ldr	r2, [pc, #96]	; (8004b98 <TIM_OC1_SetConfig+0x118>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d003      	beq.n	8004b42 <TIM_OC1_SetConfig+0xc2>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a17      	ldr	r2, [pc, #92]	; (8004b9c <TIM_OC1_SetConfig+0x11c>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d111      	bne.n	8004b66 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	695b      	ldr	r3, [r3, #20]
 8004b56:	693a      	ldr	r2, [r7, #16]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	699b      	ldr	r3, [r3, #24]
 8004b60:	693a      	ldr	r2, [r7, #16]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	693a      	ldr	r2, [r7, #16]
 8004b6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	68fa      	ldr	r2, [r7, #12]
 8004b70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	685a      	ldr	r2, [r3, #4]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	697a      	ldr	r2, [r7, #20]
 8004b7e:	621a      	str	r2, [r3, #32]
}
 8004b80:	bf00      	nop
 8004b82:	371c      	adds	r7, #28
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr
 8004b8c:	40012c00 	.word	0x40012c00
 8004b90:	40013400 	.word	0x40013400
 8004b94:	40014000 	.word	0x40014000
 8004b98:	40014400 	.word	0x40014400
 8004b9c:	40014800 	.word	0x40014800

08004ba0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b087      	sub	sp, #28
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a1b      	ldr	r3, [r3, #32]
 8004bae:	f023 0210 	bic.w	r2, r3, #16
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
 8004bba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	021b      	lsls	r3, r3, #8
 8004be2:	68fa      	ldr	r2, [r7, #12]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	f023 0320 	bic.w	r3, r3, #32
 8004bee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	011b      	lsls	r3, r3, #4
 8004bf6:	697a      	ldr	r2, [r7, #20]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a28      	ldr	r2, [pc, #160]	; (8004ca0 <TIM_OC2_SetConfig+0x100>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d003      	beq.n	8004c0c <TIM_OC2_SetConfig+0x6c>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4a27      	ldr	r2, [pc, #156]	; (8004ca4 <TIM_OC2_SetConfig+0x104>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d10d      	bne.n	8004c28 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	011b      	lsls	r3, r3, #4
 8004c1a:	697a      	ldr	r2, [r7, #20]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c26:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a1d      	ldr	r2, [pc, #116]	; (8004ca0 <TIM_OC2_SetConfig+0x100>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d00f      	beq.n	8004c50 <TIM_OC2_SetConfig+0xb0>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a1c      	ldr	r2, [pc, #112]	; (8004ca4 <TIM_OC2_SetConfig+0x104>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d00b      	beq.n	8004c50 <TIM_OC2_SetConfig+0xb0>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a1b      	ldr	r2, [pc, #108]	; (8004ca8 <TIM_OC2_SetConfig+0x108>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d007      	beq.n	8004c50 <TIM_OC2_SetConfig+0xb0>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a1a      	ldr	r2, [pc, #104]	; (8004cac <TIM_OC2_SetConfig+0x10c>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d003      	beq.n	8004c50 <TIM_OC2_SetConfig+0xb0>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4a19      	ldr	r2, [pc, #100]	; (8004cb0 <TIM_OC2_SetConfig+0x110>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d113      	bne.n	8004c78 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	695b      	ldr	r3, [r3, #20]
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	693a      	ldr	r2, [r7, #16]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	699b      	ldr	r3, [r3, #24]
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	693a      	ldr	r2, [r7, #16]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	693a      	ldr	r2, [r7, #16]
 8004c7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	685a      	ldr	r2, [r3, #4]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	697a      	ldr	r2, [r7, #20]
 8004c90:	621a      	str	r2, [r3, #32]
}
 8004c92:	bf00      	nop
 8004c94:	371c      	adds	r7, #28
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop
 8004ca0:	40012c00 	.word	0x40012c00
 8004ca4:	40013400 	.word	0x40013400
 8004ca8:	40014000 	.word	0x40014000
 8004cac:	40014400 	.word	0x40014400
 8004cb0:	40014800 	.word	0x40014800

08004cb4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b087      	sub	sp, #28
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a1b      	ldr	r3, [r3, #32]
 8004cc2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a1b      	ldr	r3, [r3, #32]
 8004cce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	69db      	ldr	r3, [r3, #28]
 8004cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ce6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f023 0303 	bic.w	r3, r3, #3
 8004cee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	021b      	lsls	r3, r3, #8
 8004d08:	697a      	ldr	r2, [r7, #20]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a27      	ldr	r2, [pc, #156]	; (8004db0 <TIM_OC3_SetConfig+0xfc>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d003      	beq.n	8004d1e <TIM_OC3_SetConfig+0x6a>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a26      	ldr	r2, [pc, #152]	; (8004db4 <TIM_OC3_SetConfig+0x100>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d10d      	bne.n	8004d3a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	021b      	lsls	r3, r3, #8
 8004d2c:	697a      	ldr	r2, [r7, #20]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a1c      	ldr	r2, [pc, #112]	; (8004db0 <TIM_OC3_SetConfig+0xfc>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d00f      	beq.n	8004d62 <TIM_OC3_SetConfig+0xae>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a1b      	ldr	r2, [pc, #108]	; (8004db4 <TIM_OC3_SetConfig+0x100>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d00b      	beq.n	8004d62 <TIM_OC3_SetConfig+0xae>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a1a      	ldr	r2, [pc, #104]	; (8004db8 <TIM_OC3_SetConfig+0x104>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d007      	beq.n	8004d62 <TIM_OC3_SetConfig+0xae>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a19      	ldr	r2, [pc, #100]	; (8004dbc <TIM_OC3_SetConfig+0x108>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d003      	beq.n	8004d62 <TIM_OC3_SetConfig+0xae>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a18      	ldr	r2, [pc, #96]	; (8004dc0 <TIM_OC3_SetConfig+0x10c>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d113      	bne.n	8004d8a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	011b      	lsls	r3, r3, #4
 8004d78:	693a      	ldr	r2, [r7, #16]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	011b      	lsls	r3, r3, #4
 8004d84:	693a      	ldr	r2, [r7, #16]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	693a      	ldr	r2, [r7, #16]
 8004d8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	68fa      	ldr	r2, [r7, #12]
 8004d94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	685a      	ldr	r2, [r3, #4]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	697a      	ldr	r2, [r7, #20]
 8004da2:	621a      	str	r2, [r3, #32]
}
 8004da4:	bf00      	nop
 8004da6:	371c      	adds	r7, #28
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr
 8004db0:	40012c00 	.word	0x40012c00
 8004db4:	40013400 	.word	0x40013400
 8004db8:	40014000 	.word	0x40014000
 8004dbc:	40014400 	.word	0x40014400
 8004dc0:	40014800 	.word	0x40014800

08004dc4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b087      	sub	sp, #28
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a1b      	ldr	r3, [r3, #32]
 8004dd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a1b      	ldr	r3, [r3, #32]
 8004dde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	69db      	ldr	r3, [r3, #28]
 8004dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004df2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004df6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	021b      	lsls	r3, r3, #8
 8004e06:	68fa      	ldr	r2, [r7, #12]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	031b      	lsls	r3, r3, #12
 8004e1a:	693a      	ldr	r2, [r7, #16]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4a18      	ldr	r2, [pc, #96]	; (8004e84 <TIM_OC4_SetConfig+0xc0>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d00f      	beq.n	8004e48 <TIM_OC4_SetConfig+0x84>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a17      	ldr	r2, [pc, #92]	; (8004e88 <TIM_OC4_SetConfig+0xc4>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d00b      	beq.n	8004e48 <TIM_OC4_SetConfig+0x84>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a16      	ldr	r2, [pc, #88]	; (8004e8c <TIM_OC4_SetConfig+0xc8>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d007      	beq.n	8004e48 <TIM_OC4_SetConfig+0x84>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4a15      	ldr	r2, [pc, #84]	; (8004e90 <TIM_OC4_SetConfig+0xcc>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d003      	beq.n	8004e48 <TIM_OC4_SetConfig+0x84>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a14      	ldr	r2, [pc, #80]	; (8004e94 <TIM_OC4_SetConfig+0xd0>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d109      	bne.n	8004e5c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	695b      	ldr	r3, [r3, #20]
 8004e54:	019b      	lsls	r3, r3, #6
 8004e56:	697a      	ldr	r2, [r7, #20]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	697a      	ldr	r2, [r7, #20]
 8004e60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	68fa      	ldr	r2, [r7, #12]
 8004e66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	685a      	ldr	r2, [r3, #4]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	693a      	ldr	r2, [r7, #16]
 8004e74:	621a      	str	r2, [r3, #32]
}
 8004e76:	bf00      	nop
 8004e78:	371c      	adds	r7, #28
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop
 8004e84:	40012c00 	.word	0x40012c00
 8004e88:	40013400 	.word	0x40013400
 8004e8c:	40014000 	.word	0x40014000
 8004e90:	40014400 	.word	0x40014400
 8004e94:	40014800 	.word	0x40014800

08004e98 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b087      	sub	sp, #28
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a1b      	ldr	r3, [r3, #32]
 8004ea6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a1b      	ldr	r3, [r3, #32]
 8004eb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	68fa      	ldr	r2, [r7, #12]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004edc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	041b      	lsls	r3, r3, #16
 8004ee4:	693a      	ldr	r2, [r7, #16]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a17      	ldr	r2, [pc, #92]	; (8004f4c <TIM_OC5_SetConfig+0xb4>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d00f      	beq.n	8004f12 <TIM_OC5_SetConfig+0x7a>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a16      	ldr	r2, [pc, #88]	; (8004f50 <TIM_OC5_SetConfig+0xb8>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d00b      	beq.n	8004f12 <TIM_OC5_SetConfig+0x7a>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a15      	ldr	r2, [pc, #84]	; (8004f54 <TIM_OC5_SetConfig+0xbc>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d007      	beq.n	8004f12 <TIM_OC5_SetConfig+0x7a>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a14      	ldr	r2, [pc, #80]	; (8004f58 <TIM_OC5_SetConfig+0xc0>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d003      	beq.n	8004f12 <TIM_OC5_SetConfig+0x7a>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a13      	ldr	r2, [pc, #76]	; (8004f5c <TIM_OC5_SetConfig+0xc4>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d109      	bne.n	8004f26 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f18:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	695b      	ldr	r3, [r3, #20]
 8004f1e:	021b      	lsls	r3, r3, #8
 8004f20:	697a      	ldr	r2, [r7, #20]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	697a      	ldr	r2, [r7, #20]
 8004f2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	68fa      	ldr	r2, [r7, #12]
 8004f30:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	685a      	ldr	r2, [r3, #4]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	693a      	ldr	r2, [r7, #16]
 8004f3e:	621a      	str	r2, [r3, #32]
}
 8004f40:	bf00      	nop
 8004f42:	371c      	adds	r7, #28
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr
 8004f4c:	40012c00 	.word	0x40012c00
 8004f50:	40013400 	.word	0x40013400
 8004f54:	40014000 	.word	0x40014000
 8004f58:	40014400 	.word	0x40014400
 8004f5c:	40014800 	.word	0x40014800

08004f60 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b087      	sub	sp, #28
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a1b      	ldr	r3, [r3, #32]
 8004f6e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a1b      	ldr	r3, [r3, #32]
 8004f7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	021b      	lsls	r3, r3, #8
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004fa6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	051b      	lsls	r3, r3, #20
 8004fae:	693a      	ldr	r2, [r7, #16]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4a18      	ldr	r2, [pc, #96]	; (8005018 <TIM_OC6_SetConfig+0xb8>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d00f      	beq.n	8004fdc <TIM_OC6_SetConfig+0x7c>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	4a17      	ldr	r2, [pc, #92]	; (800501c <TIM_OC6_SetConfig+0xbc>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d00b      	beq.n	8004fdc <TIM_OC6_SetConfig+0x7c>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	4a16      	ldr	r2, [pc, #88]	; (8005020 <TIM_OC6_SetConfig+0xc0>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d007      	beq.n	8004fdc <TIM_OC6_SetConfig+0x7c>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4a15      	ldr	r2, [pc, #84]	; (8005024 <TIM_OC6_SetConfig+0xc4>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d003      	beq.n	8004fdc <TIM_OC6_SetConfig+0x7c>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4a14      	ldr	r2, [pc, #80]	; (8005028 <TIM_OC6_SetConfig+0xc8>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d109      	bne.n	8004ff0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fe2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	695b      	ldr	r3, [r3, #20]
 8004fe8:	029b      	lsls	r3, r3, #10
 8004fea:	697a      	ldr	r2, [r7, #20]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	697a      	ldr	r2, [r7, #20]
 8004ff4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	68fa      	ldr	r2, [r7, #12]
 8004ffa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	685a      	ldr	r2, [r3, #4]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	693a      	ldr	r2, [r7, #16]
 8005008:	621a      	str	r2, [r3, #32]
}
 800500a:	bf00      	nop
 800500c:	371c      	adds	r7, #28
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	40012c00 	.word	0x40012c00
 800501c:	40013400 	.word	0x40013400
 8005020:	40014000 	.word	0x40014000
 8005024:	40014400 	.word	0x40014400
 8005028:	40014800 	.word	0x40014800

0800502c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800502c:	b480      	push	{r7}
 800502e:	b087      	sub	sp, #28
 8005030:	af00      	add	r7, sp, #0
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6a1b      	ldr	r3, [r3, #32]
 800503c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6a1b      	ldr	r3, [r3, #32]
 8005042:	f023 0201 	bic.w	r2, r3, #1
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	699b      	ldr	r3, [r3, #24]
 800504e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005056:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	011b      	lsls	r3, r3, #4
 800505c:	693a      	ldr	r2, [r7, #16]
 800505e:	4313      	orrs	r3, r2
 8005060:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	f023 030a 	bic.w	r3, r3, #10
 8005068:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800506a:	697a      	ldr	r2, [r7, #20]
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	4313      	orrs	r3, r2
 8005070:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	693a      	ldr	r2, [r7, #16]
 8005076:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	697a      	ldr	r2, [r7, #20]
 800507c:	621a      	str	r2, [r3, #32]
}
 800507e:	bf00      	nop
 8005080:	371c      	adds	r7, #28
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr

0800508a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800508a:	b480      	push	{r7}
 800508c:	b087      	sub	sp, #28
 800508e:	af00      	add	r7, sp, #0
 8005090:	60f8      	str	r0, [r7, #12]
 8005092:	60b9      	str	r1, [r7, #8]
 8005094:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6a1b      	ldr	r3, [r3, #32]
 800509a:	f023 0210 	bic.w	r2, r3, #16
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	699b      	ldr	r3, [r3, #24]
 80050a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6a1b      	ldr	r3, [r3, #32]
 80050ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	031b      	lsls	r3, r3, #12
 80050ba:	697a      	ldr	r2, [r7, #20]
 80050bc:	4313      	orrs	r3, r2
 80050be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80050c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	011b      	lsls	r3, r3, #4
 80050cc:	693a      	ldr	r2, [r7, #16]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	697a      	ldr	r2, [r7, #20]
 80050d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	693a      	ldr	r2, [r7, #16]
 80050dc:	621a      	str	r2, [r3, #32]
}
 80050de:	bf00      	nop
 80050e0:	371c      	adds	r7, #28
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr

080050ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050ea:	b480      	push	{r7}
 80050ec:	b085      	sub	sp, #20
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
 80050f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005100:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005102:	683a      	ldr	r2, [r7, #0]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	4313      	orrs	r3, r2
 8005108:	f043 0307 	orr.w	r3, r3, #7
 800510c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	609a      	str	r2, [r3, #8]
}
 8005114:	bf00      	nop
 8005116:	3714      	adds	r7, #20
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005120:	b480      	push	{r7}
 8005122:	b087      	sub	sp, #28
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	607a      	str	r2, [r7, #4]
 800512c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800513a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	021a      	lsls	r2, r3, #8
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	431a      	orrs	r2, r3
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	4313      	orrs	r3, r2
 8005148:	697a      	ldr	r2, [r7, #20]
 800514a:	4313      	orrs	r3, r2
 800514c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	697a      	ldr	r2, [r7, #20]
 8005152:	609a      	str	r2, [r3, #8]
}
 8005154:	bf00      	nop
 8005156:	371c      	adds	r7, #28
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005160:	b480      	push	{r7}
 8005162:	b087      	sub	sp, #28
 8005164:	af00      	add	r7, sp, #0
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	f003 031f 	and.w	r3, r3, #31
 8005172:	2201      	movs	r2, #1
 8005174:	fa02 f303 	lsl.w	r3, r2, r3
 8005178:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6a1a      	ldr	r2, [r3, #32]
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	43db      	mvns	r3, r3
 8005182:	401a      	ands	r2, r3
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6a1a      	ldr	r2, [r3, #32]
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	f003 031f 	and.w	r3, r3, #31
 8005192:	6879      	ldr	r1, [r7, #4]
 8005194:	fa01 f303 	lsl.w	r3, r1, r3
 8005198:	431a      	orrs	r2, r3
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	621a      	str	r2, [r3, #32]
}
 800519e:	bf00      	nop
 80051a0:	371c      	adds	r7, #28
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
	...

080051ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b085      	sub	sp, #20
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d101      	bne.n	80051c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051c0:	2302      	movs	r3, #2
 80051c2:	e068      	b.n	8005296 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2202      	movs	r2, #2
 80051d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a2e      	ldr	r2, [pc, #184]	; (80052a4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d004      	beq.n	80051f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a2d      	ldr	r2, [pc, #180]	; (80052a8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d108      	bne.n	800520a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80051fe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	4313      	orrs	r3, r2
 8005208:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005210:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68fa      	ldr	r2, [r7, #12]
 8005218:	4313      	orrs	r3, r2
 800521a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68fa      	ldr	r2, [r7, #12]
 8005222:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a1e      	ldr	r2, [pc, #120]	; (80052a4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d01d      	beq.n	800526a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005236:	d018      	beq.n	800526a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a1b      	ldr	r2, [pc, #108]	; (80052ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d013      	beq.n	800526a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a1a      	ldr	r2, [pc, #104]	; (80052b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d00e      	beq.n	800526a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a18      	ldr	r2, [pc, #96]	; (80052b4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d009      	beq.n	800526a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a13      	ldr	r2, [pc, #76]	; (80052a8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d004      	beq.n	800526a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a14      	ldr	r2, [pc, #80]	; (80052b8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d10c      	bne.n	8005284 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005270:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	68ba      	ldr	r2, [r7, #8]
 8005278:	4313      	orrs	r3, r2
 800527a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	68ba      	ldr	r2, [r7, #8]
 8005282:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	3714      	adds	r7, #20
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr
 80052a2:	bf00      	nop
 80052a4:	40012c00 	.word	0x40012c00
 80052a8:	40013400 	.word	0x40013400
 80052ac:	40000400 	.word	0x40000400
 80052b0:	40000800 	.word	0x40000800
 80052b4:	40000c00 	.word	0x40000c00
 80052b8:	40014000 	.word	0x40014000

080052bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b082      	sub	sp, #8
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d101      	bne.n	80052ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e040      	b.n	8005350 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d106      	bne.n	80052e4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f7fb fc80 	bl	8000be4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2224      	movs	r2, #36	; 0x24
 80052e8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f022 0201 	bic.w	r2, r2, #1
 80052f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 fb84 	bl	8005a08 <UART_SetConfig>
 8005300:	4603      	mov	r3, r0
 8005302:	2b01      	cmp	r3, #1
 8005304:	d101      	bne.n	800530a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e022      	b.n	8005350 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530e:	2b00      	cmp	r3, #0
 8005310:	d002      	beq.n	8005318 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 fe30 	bl	8005f78 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	685a      	ldr	r2, [r3, #4]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005326:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	689a      	ldr	r2, [r3, #8]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005336:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f042 0201 	orr.w	r2, r2, #1
 8005346:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f000 feb7 	bl	80060bc <UART_CheckIdleState>
 800534e:	4603      	mov	r3, r0
}
 8005350:	4618      	mov	r0, r3
 8005352:	3708      	adds	r7, #8
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}

08005358 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b08a      	sub	sp, #40	; 0x28
 800535c:	af00      	add	r7, sp, #0
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	60b9      	str	r1, [r7, #8]
 8005362:	4613      	mov	r3, r2
 8005364:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800536a:	2b20      	cmp	r3, #32
 800536c:	d142      	bne.n	80053f4 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d002      	beq.n	800537a <HAL_UART_Receive_IT+0x22>
 8005374:	88fb      	ldrh	r3, [r7, #6]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d101      	bne.n	800537e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e03b      	b.n	80053f6 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005384:	2b01      	cmp	r3, #1
 8005386:	d101      	bne.n	800538c <HAL_UART_Receive_IT+0x34>
 8005388:	2302      	movs	r3, #2
 800538a:	e034      	b.n	80053f6 <HAL_UART_Receive_IT+0x9e>
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a18      	ldr	r2, [pc, #96]	; (8005400 <HAL_UART_Receive_IT+0xa8>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d01f      	beq.n	80053e4 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d018      	beq.n	80053e4 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	e853 3f00 	ldrex	r3, [r3]
 80053be:	613b      	str	r3, [r7, #16]
   return(result);
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80053c6:	627b      	str	r3, [r7, #36]	; 0x24
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	461a      	mov	r2, r3
 80053ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d0:	623b      	str	r3, [r7, #32]
 80053d2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d4:	69f9      	ldr	r1, [r7, #28]
 80053d6:	6a3a      	ldr	r2, [r7, #32]
 80053d8:	e841 2300 	strex	r3, r2, [r1]
 80053dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d1e6      	bne.n	80053b2 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80053e4:	88fb      	ldrh	r3, [r7, #6]
 80053e6:	461a      	mov	r2, r3
 80053e8:	68b9      	ldr	r1, [r7, #8]
 80053ea:	68f8      	ldr	r0, [r7, #12]
 80053ec:	f000 ff74 	bl	80062d8 <UART_Start_Receive_IT>
 80053f0:	4603      	mov	r3, r0
 80053f2:	e000      	b.n	80053f6 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80053f4:	2302      	movs	r3, #2
  }
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3728      	adds	r7, #40	; 0x28
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	40008000 	.word	0x40008000

08005404 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b0ba      	sub	sp, #232	; 0xe8
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	69db      	ldr	r3, [r3, #28]
 8005412:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800542a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800542e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005432:	4013      	ands	r3, r2
 8005434:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005438:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800543c:	2b00      	cmp	r3, #0
 800543e:	d115      	bne.n	800546c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005440:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005444:	f003 0320 	and.w	r3, r3, #32
 8005448:	2b00      	cmp	r3, #0
 800544a:	d00f      	beq.n	800546c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800544c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005450:	f003 0320 	and.w	r3, r3, #32
 8005454:	2b00      	cmp	r3, #0
 8005456:	d009      	beq.n	800546c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800545c:	2b00      	cmp	r3, #0
 800545e:	f000 82a6 	beq.w	80059ae <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	4798      	blx	r3
      }
      return;
 800546a:	e2a0      	b.n	80059ae <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800546c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005470:	2b00      	cmp	r3, #0
 8005472:	f000 8117 	beq.w	80056a4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005476:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800547a:	f003 0301 	and.w	r3, r3, #1
 800547e:	2b00      	cmp	r3, #0
 8005480:	d106      	bne.n	8005490 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005482:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005486:	4b85      	ldr	r3, [pc, #532]	; (800569c <HAL_UART_IRQHandler+0x298>)
 8005488:	4013      	ands	r3, r2
 800548a:	2b00      	cmp	r3, #0
 800548c:	f000 810a 	beq.w	80056a4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005490:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005494:	f003 0301 	and.w	r3, r3, #1
 8005498:	2b00      	cmp	r3, #0
 800549a:	d011      	beq.n	80054c0 <HAL_UART_IRQHandler+0xbc>
 800549c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d00b      	beq.n	80054c0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	2201      	movs	r2, #1
 80054ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054b6:	f043 0201 	orr.w	r2, r3, #1
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80054c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054c4:	f003 0302 	and.w	r3, r3, #2
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d011      	beq.n	80054f0 <HAL_UART_IRQHandler+0xec>
 80054cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054d0:	f003 0301 	and.w	r3, r3, #1
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d00b      	beq.n	80054f0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	2202      	movs	r2, #2
 80054de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054e6:	f043 0204 	orr.w	r2, r3, #4
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80054f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054f4:	f003 0304 	and.w	r3, r3, #4
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d011      	beq.n	8005520 <HAL_UART_IRQHandler+0x11c>
 80054fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005500:	f003 0301 	and.w	r3, r3, #1
 8005504:	2b00      	cmp	r3, #0
 8005506:	d00b      	beq.n	8005520 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2204      	movs	r2, #4
 800550e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005516:	f043 0202 	orr.w	r2, r3, #2
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005520:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005524:	f003 0308 	and.w	r3, r3, #8
 8005528:	2b00      	cmp	r3, #0
 800552a:	d017      	beq.n	800555c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800552c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005530:	f003 0320 	and.w	r3, r3, #32
 8005534:	2b00      	cmp	r3, #0
 8005536:	d105      	bne.n	8005544 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005538:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800553c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005540:	2b00      	cmp	r3, #0
 8005542:	d00b      	beq.n	800555c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2208      	movs	r2, #8
 800554a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005552:	f043 0208 	orr.w	r2, r3, #8
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800555c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005560:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005564:	2b00      	cmp	r3, #0
 8005566:	d012      	beq.n	800558e <HAL_UART_IRQHandler+0x18a>
 8005568:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800556c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005570:	2b00      	cmp	r3, #0
 8005572:	d00c      	beq.n	800558e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800557c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005584:	f043 0220 	orr.w	r2, r3, #32
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005594:	2b00      	cmp	r3, #0
 8005596:	f000 820c 	beq.w	80059b2 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800559a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800559e:	f003 0320 	and.w	r3, r3, #32
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d00d      	beq.n	80055c2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80055a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055aa:	f003 0320 	and.w	r3, r3, #32
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d007      	beq.n	80055c2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d003      	beq.n	80055c2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055d6:	2b40      	cmp	r3, #64	; 0x40
 80055d8:	d005      	beq.n	80055e6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80055da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80055de:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d04f      	beq.n	8005686 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 ff40 	bl	800646c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055f6:	2b40      	cmp	r3, #64	; 0x40
 80055f8:	d141      	bne.n	800567e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	3308      	adds	r3, #8
 8005600:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005604:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005608:	e853 3f00 	ldrex	r3, [r3]
 800560c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005610:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005614:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005618:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	3308      	adds	r3, #8
 8005622:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005626:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800562a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800562e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005632:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005636:	e841 2300 	strex	r3, r2, [r1]
 800563a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800563e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1d9      	bne.n	80055fa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800564a:	2b00      	cmp	r3, #0
 800564c:	d013      	beq.n	8005676 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005652:	4a13      	ldr	r2, [pc, #76]	; (80056a0 <HAL_UART_IRQHandler+0x29c>)
 8005654:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800565a:	4618      	mov	r0, r3
 800565c:	f7fd f8b7 	bl	80027ce <HAL_DMA_Abort_IT>
 8005660:	4603      	mov	r3, r0
 8005662:	2b00      	cmp	r3, #0
 8005664:	d017      	beq.n	8005696 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800566a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005670:	4610      	mov	r0, r2
 8005672:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005674:	e00f      	b.n	8005696 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 f9b0 	bl	80059dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800567c:	e00b      	b.n	8005696 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f000 f9ac 	bl	80059dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005684:	e007      	b.n	8005696 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 f9a8 	bl	80059dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005694:	e18d      	b.n	80059b2 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005696:	bf00      	nop
    return;
 8005698:	e18b      	b.n	80059b2 <HAL_UART_IRQHandler+0x5ae>
 800569a:	bf00      	nop
 800569c:	04000120 	.word	0x04000120
 80056a0:	08006533 	.word	0x08006533

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	f040 8146 	bne.w	800593a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80056ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056b2:	f003 0310 	and.w	r3, r3, #16
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	f000 813f 	beq.w	800593a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80056bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056c0:	f003 0310 	and.w	r3, r3, #16
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	f000 8138 	beq.w	800593a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2210      	movs	r2, #16
 80056d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056dc:	2b40      	cmp	r3, #64	; 0x40
 80056de:	f040 80b4 	bne.w	800584a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80056ee:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	f000 815f 	beq.w	80059b6 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80056fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005702:	429a      	cmp	r2, r3
 8005704:	f080 8157 	bcs.w	80059b6 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800570e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 0320 	and.w	r3, r3, #32
 800571e:	2b00      	cmp	r3, #0
 8005720:	f040 8085 	bne.w	800582e <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800572c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005730:	e853 3f00 	ldrex	r3, [r3]
 8005734:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005738:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800573c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005740:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	461a      	mov	r2, r3
 800574a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800574e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005752:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005756:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800575a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800575e:	e841 2300 	strex	r3, r2, [r1]
 8005762:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005766:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800576a:	2b00      	cmp	r3, #0
 800576c:	d1da      	bne.n	8005724 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	3308      	adds	r3, #8
 8005774:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005776:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005778:	e853 3f00 	ldrex	r3, [r3]
 800577c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800577e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005780:	f023 0301 	bic.w	r3, r3, #1
 8005784:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	3308      	adds	r3, #8
 800578e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005792:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005796:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005798:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800579a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800579e:	e841 2300 	strex	r3, r2, [r1]
 80057a2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80057a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d1e1      	bne.n	800576e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	3308      	adds	r3, #8
 80057b0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80057b4:	e853 3f00 	ldrex	r3, [r3]
 80057b8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80057ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	3308      	adds	r3, #8
 80057ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80057ce:	66fa      	str	r2, [r7, #108]	; 0x6c
 80057d0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80057d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80057d6:	e841 2300 	strex	r3, r2, [r1]
 80057da:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80057dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d1e3      	bne.n	80057aa <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2220      	movs	r2, #32
 80057e6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2200      	movs	r2, #0
 80057ec:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057f6:	e853 3f00 	ldrex	r3, [r3]
 80057fa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80057fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057fe:	f023 0310 	bic.w	r3, r3, #16
 8005802:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	461a      	mov	r2, r3
 800580c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005810:	65bb      	str	r3, [r7, #88]	; 0x58
 8005812:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005814:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005816:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005818:	e841 2300 	strex	r3, r2, [r1]
 800581c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800581e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005820:	2b00      	cmp	r3, #0
 8005822:	d1e4      	bne.n	80057ee <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005828:	4618      	mov	r0, r3
 800582a:	f7fc ff92 	bl	8002752 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800583a:	b29b      	uxth	r3, r3
 800583c:	1ad3      	subs	r3, r2, r3
 800583e:	b29b      	uxth	r3, r3
 8005840:	4619      	mov	r1, r3
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 f8d4 	bl	80059f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005848:	e0b5      	b.n	80059b6 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005856:	b29b      	uxth	r3, r3
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005864:	b29b      	uxth	r3, r3
 8005866:	2b00      	cmp	r3, #0
 8005868:	f000 80a7 	beq.w	80059ba <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800586c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005870:	2b00      	cmp	r3, #0
 8005872:	f000 80a2 	beq.w	80059ba <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800587c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800587e:	e853 3f00 	ldrex	r3, [r3]
 8005882:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005886:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800588a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	461a      	mov	r2, r3
 8005894:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005898:	647b      	str	r3, [r7, #68]	; 0x44
 800589a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800589c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800589e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80058a0:	e841 2300 	strex	r3, r2, [r1]
 80058a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80058a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d1e4      	bne.n	8005876 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	3308      	adds	r3, #8
 80058b2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b6:	e853 3f00 	ldrex	r3, [r3]
 80058ba:	623b      	str	r3, [r7, #32]
   return(result);
 80058bc:	6a3b      	ldr	r3, [r7, #32]
 80058be:	f023 0301 	bic.w	r3, r3, #1
 80058c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	3308      	adds	r3, #8
 80058cc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80058d0:	633a      	str	r2, [r7, #48]	; 0x30
 80058d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058d8:	e841 2300 	strex	r3, r2, [r1]
 80058dc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80058de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d1e3      	bne.n	80058ac <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2220      	movs	r2, #32
 80058e8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	e853 3f00 	ldrex	r3, [r3]
 8005902:	60fb      	str	r3, [r7, #12]
   return(result);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f023 0310 	bic.w	r3, r3, #16
 800590a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	461a      	mov	r2, r3
 8005914:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005918:	61fb      	str	r3, [r7, #28]
 800591a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800591c:	69b9      	ldr	r1, [r7, #24]
 800591e:	69fa      	ldr	r2, [r7, #28]
 8005920:	e841 2300 	strex	r3, r2, [r1]
 8005924:	617b      	str	r3, [r7, #20]
   return(result);
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d1e4      	bne.n	80058f6 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800592c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005930:	4619      	mov	r1, r3
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 f85c 	bl	80059f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005938:	e03f      	b.n	80059ba <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800593a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800593e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00e      	beq.n	8005964 <HAL_UART_IRQHandler+0x560>
 8005946:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800594a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800594e:	2b00      	cmp	r3, #0
 8005950:	d008      	beq.n	8005964 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800595a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f000 ff88 	bl	8006872 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005962:	e02d      	b.n	80059c0 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005964:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005968:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800596c:	2b00      	cmp	r3, #0
 800596e:	d00e      	beq.n	800598e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005970:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005978:	2b00      	cmp	r3, #0
 800597a:	d008      	beq.n	800598e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005980:	2b00      	cmp	r3, #0
 8005982:	d01c      	beq.n	80059be <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	4798      	blx	r3
    }
    return;
 800598c:	e017      	b.n	80059be <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800598e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005996:	2b00      	cmp	r3, #0
 8005998:	d012      	beq.n	80059c0 <HAL_UART_IRQHandler+0x5bc>
 800599a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800599e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d00c      	beq.n	80059c0 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f000 fdd9 	bl	800655e <UART_EndTransmit_IT>
    return;
 80059ac:	e008      	b.n	80059c0 <HAL_UART_IRQHandler+0x5bc>
      return;
 80059ae:	bf00      	nop
 80059b0:	e006      	b.n	80059c0 <HAL_UART_IRQHandler+0x5bc>
    return;
 80059b2:	bf00      	nop
 80059b4:	e004      	b.n	80059c0 <HAL_UART_IRQHandler+0x5bc>
      return;
 80059b6:	bf00      	nop
 80059b8:	e002      	b.n	80059c0 <HAL_UART_IRQHandler+0x5bc>
      return;
 80059ba:	bf00      	nop
 80059bc:	e000      	b.n	80059c0 <HAL_UART_IRQHandler+0x5bc>
    return;
 80059be:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80059c0:	37e8      	adds	r7, #232	; 0xe8
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop

080059c8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b083      	sub	sp, #12
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80059d0:	bf00      	nop
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80059dc:	b480      	push	{r7}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80059e4:	bf00      	nop
 80059e6:	370c      	adds	r7, #12
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr

080059f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b083      	sub	sp, #12
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	460b      	mov	r3, r1
 80059fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80059fc:	bf00      	nop
 80059fe:	370c      	adds	r7, #12
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a0c:	b08a      	sub	sp, #40	; 0x28
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a12:	2300      	movs	r3, #0
 8005a14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	689a      	ldr	r2, [r3, #8]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	691b      	ldr	r3, [r3, #16]
 8005a20:	431a      	orrs	r2, r3
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	695b      	ldr	r3, [r3, #20]
 8005a26:	431a      	orrs	r2, r3
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	69db      	ldr	r3, [r3, #28]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	4ba4      	ldr	r3, [pc, #656]	; (8005cc8 <UART_SetConfig+0x2c0>)
 8005a38:	4013      	ands	r3, r2
 8005a3a:	68fa      	ldr	r2, [r7, #12]
 8005a3c:	6812      	ldr	r2, [r2, #0]
 8005a3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a40:	430b      	orrs	r3, r1
 8005a42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	68da      	ldr	r2, [r3, #12]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	430a      	orrs	r2, r1
 8005a58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	699b      	ldr	r3, [r3, #24]
 8005a5e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a99      	ldr	r2, [pc, #612]	; (8005ccc <UART_SetConfig+0x2c4>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d004      	beq.n	8005a74 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	6a1b      	ldr	r3, [r3, #32]
 8005a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a70:	4313      	orrs	r3, r2
 8005a72:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a84:	430a      	orrs	r2, r1
 8005a86:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a90      	ldr	r2, [pc, #576]	; (8005cd0 <UART_SetConfig+0x2c8>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d126      	bne.n	8005ae0 <UART_SetConfig+0xd8>
 8005a92:	4b90      	ldr	r3, [pc, #576]	; (8005cd4 <UART_SetConfig+0x2cc>)
 8005a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a98:	f003 0303 	and.w	r3, r3, #3
 8005a9c:	2b03      	cmp	r3, #3
 8005a9e:	d81b      	bhi.n	8005ad8 <UART_SetConfig+0xd0>
 8005aa0:	a201      	add	r2, pc, #4	; (adr r2, 8005aa8 <UART_SetConfig+0xa0>)
 8005aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa6:	bf00      	nop
 8005aa8:	08005ab9 	.word	0x08005ab9
 8005aac:	08005ac9 	.word	0x08005ac9
 8005ab0:	08005ac1 	.word	0x08005ac1
 8005ab4:	08005ad1 	.word	0x08005ad1
 8005ab8:	2301      	movs	r3, #1
 8005aba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005abe:	e116      	b.n	8005cee <UART_SetConfig+0x2e6>
 8005ac0:	2302      	movs	r3, #2
 8005ac2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ac6:	e112      	b.n	8005cee <UART_SetConfig+0x2e6>
 8005ac8:	2304      	movs	r3, #4
 8005aca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ace:	e10e      	b.n	8005cee <UART_SetConfig+0x2e6>
 8005ad0:	2308      	movs	r3, #8
 8005ad2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ad6:	e10a      	b.n	8005cee <UART_SetConfig+0x2e6>
 8005ad8:	2310      	movs	r3, #16
 8005ada:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ade:	e106      	b.n	8005cee <UART_SetConfig+0x2e6>
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a7c      	ldr	r2, [pc, #496]	; (8005cd8 <UART_SetConfig+0x2d0>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d138      	bne.n	8005b5c <UART_SetConfig+0x154>
 8005aea:	4b7a      	ldr	r3, [pc, #488]	; (8005cd4 <UART_SetConfig+0x2cc>)
 8005aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005af0:	f003 030c 	and.w	r3, r3, #12
 8005af4:	2b0c      	cmp	r3, #12
 8005af6:	d82d      	bhi.n	8005b54 <UART_SetConfig+0x14c>
 8005af8:	a201      	add	r2, pc, #4	; (adr r2, 8005b00 <UART_SetConfig+0xf8>)
 8005afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005afe:	bf00      	nop
 8005b00:	08005b35 	.word	0x08005b35
 8005b04:	08005b55 	.word	0x08005b55
 8005b08:	08005b55 	.word	0x08005b55
 8005b0c:	08005b55 	.word	0x08005b55
 8005b10:	08005b45 	.word	0x08005b45
 8005b14:	08005b55 	.word	0x08005b55
 8005b18:	08005b55 	.word	0x08005b55
 8005b1c:	08005b55 	.word	0x08005b55
 8005b20:	08005b3d 	.word	0x08005b3d
 8005b24:	08005b55 	.word	0x08005b55
 8005b28:	08005b55 	.word	0x08005b55
 8005b2c:	08005b55 	.word	0x08005b55
 8005b30:	08005b4d 	.word	0x08005b4d
 8005b34:	2300      	movs	r3, #0
 8005b36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b3a:	e0d8      	b.n	8005cee <UART_SetConfig+0x2e6>
 8005b3c:	2302      	movs	r3, #2
 8005b3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b42:	e0d4      	b.n	8005cee <UART_SetConfig+0x2e6>
 8005b44:	2304      	movs	r3, #4
 8005b46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b4a:	e0d0      	b.n	8005cee <UART_SetConfig+0x2e6>
 8005b4c:	2308      	movs	r3, #8
 8005b4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b52:	e0cc      	b.n	8005cee <UART_SetConfig+0x2e6>
 8005b54:	2310      	movs	r3, #16
 8005b56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b5a:	e0c8      	b.n	8005cee <UART_SetConfig+0x2e6>
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a5e      	ldr	r2, [pc, #376]	; (8005cdc <UART_SetConfig+0x2d4>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d125      	bne.n	8005bb2 <UART_SetConfig+0x1aa>
 8005b66:	4b5b      	ldr	r3, [pc, #364]	; (8005cd4 <UART_SetConfig+0x2cc>)
 8005b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b6c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005b70:	2b30      	cmp	r3, #48	; 0x30
 8005b72:	d016      	beq.n	8005ba2 <UART_SetConfig+0x19a>
 8005b74:	2b30      	cmp	r3, #48	; 0x30
 8005b76:	d818      	bhi.n	8005baa <UART_SetConfig+0x1a2>
 8005b78:	2b20      	cmp	r3, #32
 8005b7a:	d00a      	beq.n	8005b92 <UART_SetConfig+0x18a>
 8005b7c:	2b20      	cmp	r3, #32
 8005b7e:	d814      	bhi.n	8005baa <UART_SetConfig+0x1a2>
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d002      	beq.n	8005b8a <UART_SetConfig+0x182>
 8005b84:	2b10      	cmp	r3, #16
 8005b86:	d008      	beq.n	8005b9a <UART_SetConfig+0x192>
 8005b88:	e00f      	b.n	8005baa <UART_SetConfig+0x1a2>
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b90:	e0ad      	b.n	8005cee <UART_SetConfig+0x2e6>
 8005b92:	2302      	movs	r3, #2
 8005b94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b98:	e0a9      	b.n	8005cee <UART_SetConfig+0x2e6>
 8005b9a:	2304      	movs	r3, #4
 8005b9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ba0:	e0a5      	b.n	8005cee <UART_SetConfig+0x2e6>
 8005ba2:	2308      	movs	r3, #8
 8005ba4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ba8:	e0a1      	b.n	8005cee <UART_SetConfig+0x2e6>
 8005baa:	2310      	movs	r3, #16
 8005bac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bb0:	e09d      	b.n	8005cee <UART_SetConfig+0x2e6>
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a4a      	ldr	r2, [pc, #296]	; (8005ce0 <UART_SetConfig+0x2d8>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d125      	bne.n	8005c08 <UART_SetConfig+0x200>
 8005bbc:	4b45      	ldr	r3, [pc, #276]	; (8005cd4 <UART_SetConfig+0x2cc>)
 8005bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bc2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005bc6:	2bc0      	cmp	r3, #192	; 0xc0
 8005bc8:	d016      	beq.n	8005bf8 <UART_SetConfig+0x1f0>
 8005bca:	2bc0      	cmp	r3, #192	; 0xc0
 8005bcc:	d818      	bhi.n	8005c00 <UART_SetConfig+0x1f8>
 8005bce:	2b80      	cmp	r3, #128	; 0x80
 8005bd0:	d00a      	beq.n	8005be8 <UART_SetConfig+0x1e0>
 8005bd2:	2b80      	cmp	r3, #128	; 0x80
 8005bd4:	d814      	bhi.n	8005c00 <UART_SetConfig+0x1f8>
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d002      	beq.n	8005be0 <UART_SetConfig+0x1d8>
 8005bda:	2b40      	cmp	r3, #64	; 0x40
 8005bdc:	d008      	beq.n	8005bf0 <UART_SetConfig+0x1e8>
 8005bde:	e00f      	b.n	8005c00 <UART_SetConfig+0x1f8>
 8005be0:	2300      	movs	r3, #0
 8005be2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005be6:	e082      	b.n	8005cee <UART_SetConfig+0x2e6>
 8005be8:	2302      	movs	r3, #2
 8005bea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bee:	e07e      	b.n	8005cee <UART_SetConfig+0x2e6>
 8005bf0:	2304      	movs	r3, #4
 8005bf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bf6:	e07a      	b.n	8005cee <UART_SetConfig+0x2e6>
 8005bf8:	2308      	movs	r3, #8
 8005bfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bfe:	e076      	b.n	8005cee <UART_SetConfig+0x2e6>
 8005c00:	2310      	movs	r3, #16
 8005c02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c06:	e072      	b.n	8005cee <UART_SetConfig+0x2e6>
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a35      	ldr	r2, [pc, #212]	; (8005ce4 <UART_SetConfig+0x2dc>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d12a      	bne.n	8005c68 <UART_SetConfig+0x260>
 8005c12:	4b30      	ldr	r3, [pc, #192]	; (8005cd4 <UART_SetConfig+0x2cc>)
 8005c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c20:	d01a      	beq.n	8005c58 <UART_SetConfig+0x250>
 8005c22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c26:	d81b      	bhi.n	8005c60 <UART_SetConfig+0x258>
 8005c28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c2c:	d00c      	beq.n	8005c48 <UART_SetConfig+0x240>
 8005c2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c32:	d815      	bhi.n	8005c60 <UART_SetConfig+0x258>
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d003      	beq.n	8005c40 <UART_SetConfig+0x238>
 8005c38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c3c:	d008      	beq.n	8005c50 <UART_SetConfig+0x248>
 8005c3e:	e00f      	b.n	8005c60 <UART_SetConfig+0x258>
 8005c40:	2300      	movs	r3, #0
 8005c42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c46:	e052      	b.n	8005cee <UART_SetConfig+0x2e6>
 8005c48:	2302      	movs	r3, #2
 8005c4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c4e:	e04e      	b.n	8005cee <UART_SetConfig+0x2e6>
 8005c50:	2304      	movs	r3, #4
 8005c52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c56:	e04a      	b.n	8005cee <UART_SetConfig+0x2e6>
 8005c58:	2308      	movs	r3, #8
 8005c5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c5e:	e046      	b.n	8005cee <UART_SetConfig+0x2e6>
 8005c60:	2310      	movs	r3, #16
 8005c62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c66:	e042      	b.n	8005cee <UART_SetConfig+0x2e6>
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a17      	ldr	r2, [pc, #92]	; (8005ccc <UART_SetConfig+0x2c4>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d13a      	bne.n	8005ce8 <UART_SetConfig+0x2e0>
 8005c72:	4b18      	ldr	r3, [pc, #96]	; (8005cd4 <UART_SetConfig+0x2cc>)
 8005c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c78:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005c7c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c80:	d01a      	beq.n	8005cb8 <UART_SetConfig+0x2b0>
 8005c82:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c86:	d81b      	bhi.n	8005cc0 <UART_SetConfig+0x2b8>
 8005c88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c8c:	d00c      	beq.n	8005ca8 <UART_SetConfig+0x2a0>
 8005c8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c92:	d815      	bhi.n	8005cc0 <UART_SetConfig+0x2b8>
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d003      	beq.n	8005ca0 <UART_SetConfig+0x298>
 8005c98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c9c:	d008      	beq.n	8005cb0 <UART_SetConfig+0x2a8>
 8005c9e:	e00f      	b.n	8005cc0 <UART_SetConfig+0x2b8>
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ca6:	e022      	b.n	8005cee <UART_SetConfig+0x2e6>
 8005ca8:	2302      	movs	r3, #2
 8005caa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cae:	e01e      	b.n	8005cee <UART_SetConfig+0x2e6>
 8005cb0:	2304      	movs	r3, #4
 8005cb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cb6:	e01a      	b.n	8005cee <UART_SetConfig+0x2e6>
 8005cb8:	2308      	movs	r3, #8
 8005cba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cbe:	e016      	b.n	8005cee <UART_SetConfig+0x2e6>
 8005cc0:	2310      	movs	r3, #16
 8005cc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cc6:	e012      	b.n	8005cee <UART_SetConfig+0x2e6>
 8005cc8:	efff69f3 	.word	0xefff69f3
 8005ccc:	40008000 	.word	0x40008000
 8005cd0:	40013800 	.word	0x40013800
 8005cd4:	40021000 	.word	0x40021000
 8005cd8:	40004400 	.word	0x40004400
 8005cdc:	40004800 	.word	0x40004800
 8005ce0:	40004c00 	.word	0x40004c00
 8005ce4:	40005000 	.word	0x40005000
 8005ce8:	2310      	movs	r3, #16
 8005cea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a9f      	ldr	r2, [pc, #636]	; (8005f70 <UART_SetConfig+0x568>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d17a      	bne.n	8005dee <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005cf8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005cfc:	2b08      	cmp	r3, #8
 8005cfe:	d824      	bhi.n	8005d4a <UART_SetConfig+0x342>
 8005d00:	a201      	add	r2, pc, #4	; (adr r2, 8005d08 <UART_SetConfig+0x300>)
 8005d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d06:	bf00      	nop
 8005d08:	08005d2d 	.word	0x08005d2d
 8005d0c:	08005d4b 	.word	0x08005d4b
 8005d10:	08005d35 	.word	0x08005d35
 8005d14:	08005d4b 	.word	0x08005d4b
 8005d18:	08005d3b 	.word	0x08005d3b
 8005d1c:	08005d4b 	.word	0x08005d4b
 8005d20:	08005d4b 	.word	0x08005d4b
 8005d24:	08005d4b 	.word	0x08005d4b
 8005d28:	08005d43 	.word	0x08005d43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d2c:	f7fd fd2a 	bl	8003784 <HAL_RCC_GetPCLK1Freq>
 8005d30:	61f8      	str	r0, [r7, #28]
        break;
 8005d32:	e010      	b.n	8005d56 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d34:	4b8f      	ldr	r3, [pc, #572]	; (8005f74 <UART_SetConfig+0x56c>)
 8005d36:	61fb      	str	r3, [r7, #28]
        break;
 8005d38:	e00d      	b.n	8005d56 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d3a:	f7fd fc8b 	bl	8003654 <HAL_RCC_GetSysClockFreq>
 8005d3e:	61f8      	str	r0, [r7, #28]
        break;
 8005d40:	e009      	b.n	8005d56 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d46:	61fb      	str	r3, [r7, #28]
        break;
 8005d48:	e005      	b.n	8005d56 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005d54:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005d56:	69fb      	ldr	r3, [r7, #28]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	f000 80fb 	beq.w	8005f54 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	685a      	ldr	r2, [r3, #4]
 8005d62:	4613      	mov	r3, r2
 8005d64:	005b      	lsls	r3, r3, #1
 8005d66:	4413      	add	r3, r2
 8005d68:	69fa      	ldr	r2, [r7, #28]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d305      	bcc.n	8005d7a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005d74:	69fa      	ldr	r2, [r7, #28]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d903      	bls.n	8005d82 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005d80:	e0e8      	b.n	8005f54 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	2200      	movs	r2, #0
 8005d86:	461c      	mov	r4, r3
 8005d88:	4615      	mov	r5, r2
 8005d8a:	f04f 0200 	mov.w	r2, #0
 8005d8e:	f04f 0300 	mov.w	r3, #0
 8005d92:	022b      	lsls	r3, r5, #8
 8005d94:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005d98:	0222      	lsls	r2, r4, #8
 8005d9a:	68f9      	ldr	r1, [r7, #12]
 8005d9c:	6849      	ldr	r1, [r1, #4]
 8005d9e:	0849      	lsrs	r1, r1, #1
 8005da0:	2000      	movs	r0, #0
 8005da2:	4688      	mov	r8, r1
 8005da4:	4681      	mov	r9, r0
 8005da6:	eb12 0a08 	adds.w	sl, r2, r8
 8005daa:	eb43 0b09 	adc.w	fp, r3, r9
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	603b      	str	r3, [r7, #0]
 8005db6:	607a      	str	r2, [r7, #4]
 8005db8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005dbc:	4650      	mov	r0, sl
 8005dbe:	4659      	mov	r1, fp
 8005dc0:	f7fa fa02 	bl	80001c8 <__aeabi_uldivmod>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	460b      	mov	r3, r1
 8005dc8:	4613      	mov	r3, r2
 8005dca:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005dcc:	69bb      	ldr	r3, [r7, #24]
 8005dce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005dd2:	d308      	bcc.n	8005de6 <UART_SetConfig+0x3de>
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dda:	d204      	bcs.n	8005de6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	69ba      	ldr	r2, [r7, #24]
 8005de2:	60da      	str	r2, [r3, #12]
 8005de4:	e0b6      	b.n	8005f54 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005dec:	e0b2      	b.n	8005f54 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	69db      	ldr	r3, [r3, #28]
 8005df2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005df6:	d15e      	bne.n	8005eb6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005df8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005dfc:	2b08      	cmp	r3, #8
 8005dfe:	d828      	bhi.n	8005e52 <UART_SetConfig+0x44a>
 8005e00:	a201      	add	r2, pc, #4	; (adr r2, 8005e08 <UART_SetConfig+0x400>)
 8005e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e06:	bf00      	nop
 8005e08:	08005e2d 	.word	0x08005e2d
 8005e0c:	08005e35 	.word	0x08005e35
 8005e10:	08005e3d 	.word	0x08005e3d
 8005e14:	08005e53 	.word	0x08005e53
 8005e18:	08005e43 	.word	0x08005e43
 8005e1c:	08005e53 	.word	0x08005e53
 8005e20:	08005e53 	.word	0x08005e53
 8005e24:	08005e53 	.word	0x08005e53
 8005e28:	08005e4b 	.word	0x08005e4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e2c:	f7fd fcaa 	bl	8003784 <HAL_RCC_GetPCLK1Freq>
 8005e30:	61f8      	str	r0, [r7, #28]
        break;
 8005e32:	e014      	b.n	8005e5e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e34:	f7fd fcbc 	bl	80037b0 <HAL_RCC_GetPCLK2Freq>
 8005e38:	61f8      	str	r0, [r7, #28]
        break;
 8005e3a:	e010      	b.n	8005e5e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e3c:	4b4d      	ldr	r3, [pc, #308]	; (8005f74 <UART_SetConfig+0x56c>)
 8005e3e:	61fb      	str	r3, [r7, #28]
        break;
 8005e40:	e00d      	b.n	8005e5e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e42:	f7fd fc07 	bl	8003654 <HAL_RCC_GetSysClockFreq>
 8005e46:	61f8      	str	r0, [r7, #28]
        break;
 8005e48:	e009      	b.n	8005e5e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e4e:	61fb      	str	r3, [r7, #28]
        break;
 8005e50:	e005      	b.n	8005e5e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005e52:	2300      	movs	r3, #0
 8005e54:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005e5c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d077      	beq.n	8005f54 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	005a      	lsls	r2, r3, #1
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	085b      	lsrs	r3, r3, #1
 8005e6e:	441a      	add	r2, r3
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e78:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e7a:	69bb      	ldr	r3, [r7, #24]
 8005e7c:	2b0f      	cmp	r3, #15
 8005e7e:	d916      	bls.n	8005eae <UART_SetConfig+0x4a6>
 8005e80:	69bb      	ldr	r3, [r7, #24]
 8005e82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e86:	d212      	bcs.n	8005eae <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e88:	69bb      	ldr	r3, [r7, #24]
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	f023 030f 	bic.w	r3, r3, #15
 8005e90:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e92:	69bb      	ldr	r3, [r7, #24]
 8005e94:	085b      	lsrs	r3, r3, #1
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	f003 0307 	and.w	r3, r3, #7
 8005e9c:	b29a      	uxth	r2, r3
 8005e9e:	8afb      	ldrh	r3, [r7, #22]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	8afa      	ldrh	r2, [r7, #22]
 8005eaa:	60da      	str	r2, [r3, #12]
 8005eac:	e052      	b.n	8005f54 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005eb4:	e04e      	b.n	8005f54 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005eb6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005eba:	2b08      	cmp	r3, #8
 8005ebc:	d827      	bhi.n	8005f0e <UART_SetConfig+0x506>
 8005ebe:	a201      	add	r2, pc, #4	; (adr r2, 8005ec4 <UART_SetConfig+0x4bc>)
 8005ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec4:	08005ee9 	.word	0x08005ee9
 8005ec8:	08005ef1 	.word	0x08005ef1
 8005ecc:	08005ef9 	.word	0x08005ef9
 8005ed0:	08005f0f 	.word	0x08005f0f
 8005ed4:	08005eff 	.word	0x08005eff
 8005ed8:	08005f0f 	.word	0x08005f0f
 8005edc:	08005f0f 	.word	0x08005f0f
 8005ee0:	08005f0f 	.word	0x08005f0f
 8005ee4:	08005f07 	.word	0x08005f07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ee8:	f7fd fc4c 	bl	8003784 <HAL_RCC_GetPCLK1Freq>
 8005eec:	61f8      	str	r0, [r7, #28]
        break;
 8005eee:	e014      	b.n	8005f1a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ef0:	f7fd fc5e 	bl	80037b0 <HAL_RCC_GetPCLK2Freq>
 8005ef4:	61f8      	str	r0, [r7, #28]
        break;
 8005ef6:	e010      	b.n	8005f1a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ef8:	4b1e      	ldr	r3, [pc, #120]	; (8005f74 <UART_SetConfig+0x56c>)
 8005efa:	61fb      	str	r3, [r7, #28]
        break;
 8005efc:	e00d      	b.n	8005f1a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005efe:	f7fd fba9 	bl	8003654 <HAL_RCC_GetSysClockFreq>
 8005f02:	61f8      	str	r0, [r7, #28]
        break;
 8005f04:	e009      	b.n	8005f1a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f0a:	61fb      	str	r3, [r7, #28]
        break;
 8005f0c:	e005      	b.n	8005f1a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005f18:	bf00      	nop
    }

    if (pclk != 0U)
 8005f1a:	69fb      	ldr	r3, [r7, #28]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d019      	beq.n	8005f54 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	085a      	lsrs	r2, r3, #1
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	441a      	add	r2, r3
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f32:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	2b0f      	cmp	r3, #15
 8005f38:	d909      	bls.n	8005f4e <UART_SetConfig+0x546>
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f40:	d205      	bcs.n	8005f4e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	b29a      	uxth	r2, r3
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	60da      	str	r2, [r3, #12]
 8005f4c:	e002      	b.n	8005f54 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2200      	movs	r2, #0
 8005f58:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005f60:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3728      	adds	r7, #40	; 0x28
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f6e:	bf00      	nop
 8005f70:	40008000 	.word	0x40008000
 8005f74:	00f42400 	.word	0x00f42400

08005f78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f84:	f003 0301 	and.w	r3, r3, #1
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d00a      	beq.n	8005fa2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	430a      	orrs	r2, r1
 8005fa0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa6:	f003 0302 	and.w	r3, r3, #2
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d00a      	beq.n	8005fc4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	430a      	orrs	r2, r1
 8005fc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc8:	f003 0304 	and.w	r3, r3, #4
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d00a      	beq.n	8005fe6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	430a      	orrs	r2, r1
 8005fe4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fea:	f003 0308 	and.w	r3, r3, #8
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d00a      	beq.n	8006008 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	430a      	orrs	r2, r1
 8006006:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600c:	f003 0310 	and.w	r3, r3, #16
 8006010:	2b00      	cmp	r3, #0
 8006012:	d00a      	beq.n	800602a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	430a      	orrs	r2, r1
 8006028:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602e:	f003 0320 	and.w	r3, r3, #32
 8006032:	2b00      	cmp	r3, #0
 8006034:	d00a      	beq.n	800604c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	430a      	orrs	r2, r1
 800604a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006054:	2b00      	cmp	r3, #0
 8006056:	d01a      	beq.n	800608e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	430a      	orrs	r2, r1
 800606c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006072:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006076:	d10a      	bne.n	800608e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	430a      	orrs	r2, r1
 800608c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006096:	2b00      	cmp	r3, #0
 8006098:	d00a      	beq.n	80060b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	430a      	orrs	r2, r1
 80060ae:	605a      	str	r2, [r3, #4]
  }
}
 80060b0:	bf00      	nop
 80060b2:	370c      	adds	r7, #12
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr

080060bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b086      	sub	sp, #24
 80060c0:	af02      	add	r7, sp, #8
 80060c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80060cc:	f7fa fec8 	bl	8000e60 <HAL_GetTick>
 80060d0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f003 0308 	and.w	r3, r3, #8
 80060dc:	2b08      	cmp	r3, #8
 80060de:	d10e      	bne.n	80060fe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80060e4:	9300      	str	r3, [sp, #0]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 f82d 	bl	800614e <UART_WaitOnFlagUntilTimeout>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d001      	beq.n	80060fe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060fa:	2303      	movs	r3, #3
 80060fc:	e023      	b.n	8006146 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f003 0304 	and.w	r3, r3, #4
 8006108:	2b04      	cmp	r3, #4
 800610a:	d10e      	bne.n	800612a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800610c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006110:	9300      	str	r3, [sp, #0]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2200      	movs	r2, #0
 8006116:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 f817 	bl	800614e <UART_WaitOnFlagUntilTimeout>
 8006120:	4603      	mov	r3, r0
 8006122:	2b00      	cmp	r3, #0
 8006124:	d001      	beq.n	800612a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006126:	2303      	movs	r3, #3
 8006128:	e00d      	b.n	8006146 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2220      	movs	r2, #32
 800612e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2220      	movs	r2, #32
 8006134:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006144:	2300      	movs	r3, #0
}
 8006146:	4618      	mov	r0, r3
 8006148:	3710      	adds	r7, #16
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}

0800614e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800614e:	b580      	push	{r7, lr}
 8006150:	b09c      	sub	sp, #112	; 0x70
 8006152:	af00      	add	r7, sp, #0
 8006154:	60f8      	str	r0, [r7, #12]
 8006156:	60b9      	str	r1, [r7, #8]
 8006158:	603b      	str	r3, [r7, #0]
 800615a:	4613      	mov	r3, r2
 800615c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800615e:	e0a5      	b.n	80062ac <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006160:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006166:	f000 80a1 	beq.w	80062ac <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800616a:	f7fa fe79 	bl	8000e60 <HAL_GetTick>
 800616e:	4602      	mov	r2, r0
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	1ad3      	subs	r3, r2, r3
 8006174:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006176:	429a      	cmp	r2, r3
 8006178:	d302      	bcc.n	8006180 <UART_WaitOnFlagUntilTimeout+0x32>
 800617a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800617c:	2b00      	cmp	r3, #0
 800617e:	d13e      	bne.n	80061fe <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006186:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006188:	e853 3f00 	ldrex	r3, [r3]
 800618c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800618e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006190:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006194:	667b      	str	r3, [r7, #100]	; 0x64
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	461a      	mov	r2, r3
 800619c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800619e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061a0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80061a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80061a6:	e841 2300 	strex	r3, r2, [r1]
 80061aa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80061ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d1e6      	bne.n	8006180 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	3308      	adds	r3, #8
 80061b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061bc:	e853 3f00 	ldrex	r3, [r3]
 80061c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80061c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c4:	f023 0301 	bic.w	r3, r3, #1
 80061c8:	663b      	str	r3, [r7, #96]	; 0x60
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	3308      	adds	r3, #8
 80061d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80061d2:	64ba      	str	r2, [r7, #72]	; 0x48
 80061d4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80061d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061da:	e841 2300 	strex	r3, r2, [r1]
 80061de:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80061e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d1e5      	bne.n	80061b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2220      	movs	r2, #32
 80061ea:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2220      	movs	r2, #32
 80061f0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2200      	movs	r2, #0
 80061f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80061fa:	2303      	movs	r3, #3
 80061fc:	e067      	b.n	80062ce <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 0304 	and.w	r3, r3, #4
 8006208:	2b00      	cmp	r3, #0
 800620a:	d04f      	beq.n	80062ac <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	69db      	ldr	r3, [r3, #28]
 8006212:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006216:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800621a:	d147      	bne.n	80062ac <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006224:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800622c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800622e:	e853 3f00 	ldrex	r3, [r3]
 8006232:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006236:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800623a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	461a      	mov	r2, r3
 8006242:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006244:	637b      	str	r3, [r7, #52]	; 0x34
 8006246:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006248:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800624a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800624c:	e841 2300 	strex	r3, r2, [r1]
 8006250:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006254:	2b00      	cmp	r3, #0
 8006256:	d1e6      	bne.n	8006226 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	3308      	adds	r3, #8
 800625e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	e853 3f00 	ldrex	r3, [r3]
 8006266:	613b      	str	r3, [r7, #16]
   return(result);
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	f023 0301 	bic.w	r3, r3, #1
 800626e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	3308      	adds	r3, #8
 8006276:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006278:	623a      	str	r2, [r7, #32]
 800627a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800627c:	69f9      	ldr	r1, [r7, #28]
 800627e:	6a3a      	ldr	r2, [r7, #32]
 8006280:	e841 2300 	strex	r3, r2, [r1]
 8006284:	61bb      	str	r3, [r7, #24]
   return(result);
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d1e5      	bne.n	8006258 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2220      	movs	r2, #32
 8006290:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2220      	movs	r2, #32
 8006296:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2220      	movs	r2, #32
 800629c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2200      	movs	r2, #0
 80062a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80062a8:	2303      	movs	r3, #3
 80062aa:	e010      	b.n	80062ce <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	69da      	ldr	r2, [r3, #28]
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	4013      	ands	r3, r2
 80062b6:	68ba      	ldr	r2, [r7, #8]
 80062b8:	429a      	cmp	r2, r3
 80062ba:	bf0c      	ite	eq
 80062bc:	2301      	moveq	r3, #1
 80062be:	2300      	movne	r3, #0
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	461a      	mov	r2, r3
 80062c4:	79fb      	ldrb	r3, [r7, #7]
 80062c6:	429a      	cmp	r2, r3
 80062c8:	f43f af4a 	beq.w	8006160 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80062cc:	2300      	movs	r3, #0
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3770      	adds	r7, #112	; 0x70
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
	...

080062d8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80062d8:	b480      	push	{r7}
 80062da:	b097      	sub	sp, #92	; 0x5c
 80062dc:	af00      	add	r7, sp, #0
 80062de:	60f8      	str	r0, [r7, #12]
 80062e0:	60b9      	str	r1, [r7, #8]
 80062e2:	4613      	mov	r3, r2
 80062e4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	68ba      	ldr	r2, [r7, #8]
 80062ea:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	88fa      	ldrh	r2, [r7, #6]
 80062f0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	88fa      	ldrh	r2, [r7, #6]
 80062f8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2200      	movs	r2, #0
 8006300:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800630a:	d10e      	bne.n	800632a <UART_Start_Receive_IT+0x52>
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	691b      	ldr	r3, [r3, #16]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d105      	bne.n	8006320 <UART_Start_Receive_IT+0x48>
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f240 12ff 	movw	r2, #511	; 0x1ff
 800631a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800631e:	e02d      	b.n	800637c <UART_Start_Receive_IT+0xa4>
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	22ff      	movs	r2, #255	; 0xff
 8006324:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006328:	e028      	b.n	800637c <UART_Start_Receive_IT+0xa4>
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d10d      	bne.n	800634e <UART_Start_Receive_IT+0x76>
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	691b      	ldr	r3, [r3, #16]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d104      	bne.n	8006344 <UART_Start_Receive_IT+0x6c>
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	22ff      	movs	r2, #255	; 0xff
 800633e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006342:	e01b      	b.n	800637c <UART_Start_Receive_IT+0xa4>
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	227f      	movs	r2, #127	; 0x7f
 8006348:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800634c:	e016      	b.n	800637c <UART_Start_Receive_IT+0xa4>
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006356:	d10d      	bne.n	8006374 <UART_Start_Receive_IT+0x9c>
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	691b      	ldr	r3, [r3, #16]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d104      	bne.n	800636a <UART_Start_Receive_IT+0x92>
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	227f      	movs	r2, #127	; 0x7f
 8006364:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006368:	e008      	b.n	800637c <UART_Start_Receive_IT+0xa4>
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	223f      	movs	r2, #63	; 0x3f
 800636e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006372:	e003      	b.n	800637c <UART_Start_Receive_IT+0xa4>
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2200      	movs	r2, #0
 8006378:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2200      	movs	r2, #0
 8006380:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2222      	movs	r2, #34	; 0x22
 8006388:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	3308      	adds	r3, #8
 8006390:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006392:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006394:	e853 3f00 	ldrex	r3, [r3]
 8006398:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800639a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800639c:	f043 0301 	orr.w	r3, r3, #1
 80063a0:	657b      	str	r3, [r7, #84]	; 0x54
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	3308      	adds	r3, #8
 80063a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80063aa:	64ba      	str	r2, [r7, #72]	; 0x48
 80063ac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80063b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063b2:	e841 2300 	strex	r3, r2, [r1]
 80063b6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80063b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d1e5      	bne.n	800638a <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063c6:	d107      	bne.n	80063d8 <UART_Start_Receive_IT+0x100>
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	691b      	ldr	r3, [r3, #16]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d103      	bne.n	80063d8 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	4a24      	ldr	r2, [pc, #144]	; (8006464 <UART_Start_Receive_IT+0x18c>)
 80063d4:	665a      	str	r2, [r3, #100]	; 0x64
 80063d6:	e002      	b.n	80063de <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	4a23      	ldr	r2, [pc, #140]	; (8006468 <UART_Start_Receive_IT+0x190>)
 80063dc:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d019      	beq.n	8006422 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f6:	e853 3f00 	ldrex	r3, [r3]
 80063fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fe:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006402:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	461a      	mov	r2, r3
 800640a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800640c:	637b      	str	r3, [r7, #52]	; 0x34
 800640e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006410:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006412:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006414:	e841 2300 	strex	r3, r2, [r1]
 8006418:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800641a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800641c:	2b00      	cmp	r3, #0
 800641e:	d1e6      	bne.n	80063ee <UART_Start_Receive_IT+0x116>
 8006420:	e018      	b.n	8006454 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	e853 3f00 	ldrex	r3, [r3]
 800642e:	613b      	str	r3, [r7, #16]
   return(result);
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	f043 0320 	orr.w	r3, r3, #32
 8006436:	653b      	str	r3, [r7, #80]	; 0x50
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	461a      	mov	r2, r3
 800643e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006440:	623b      	str	r3, [r7, #32]
 8006442:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006444:	69f9      	ldr	r1, [r7, #28]
 8006446:	6a3a      	ldr	r2, [r7, #32]
 8006448:	e841 2300 	strex	r3, r2, [r1]
 800644c:	61bb      	str	r3, [r7, #24]
   return(result);
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d1e6      	bne.n	8006422 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8006454:	2300      	movs	r3, #0
}
 8006456:	4618      	mov	r0, r3
 8006458:	375c      	adds	r7, #92	; 0x5c
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr
 8006462:	bf00      	nop
 8006464:	08006713 	.word	0x08006713
 8006468:	080065b3 	.word	0x080065b3

0800646c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800646c:	b480      	push	{r7}
 800646e:	b095      	sub	sp, #84	; 0x54
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800647a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800647c:	e853 3f00 	ldrex	r3, [r3]
 8006480:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006484:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006488:	64fb      	str	r3, [r7, #76]	; 0x4c
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	461a      	mov	r2, r3
 8006490:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006492:	643b      	str	r3, [r7, #64]	; 0x40
 8006494:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006496:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006498:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800649a:	e841 2300 	strex	r3, r2, [r1]
 800649e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80064a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d1e6      	bne.n	8006474 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	3308      	adds	r3, #8
 80064ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ae:	6a3b      	ldr	r3, [r7, #32]
 80064b0:	e853 3f00 	ldrex	r3, [r3]
 80064b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80064b6:	69fb      	ldr	r3, [r7, #28]
 80064b8:	f023 0301 	bic.w	r3, r3, #1
 80064bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	3308      	adds	r3, #8
 80064c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064ce:	e841 2300 	strex	r3, r2, [r1]
 80064d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d1e5      	bne.n	80064a6 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064de:	2b01      	cmp	r3, #1
 80064e0:	d118      	bne.n	8006514 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	e853 3f00 	ldrex	r3, [r3]
 80064ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	f023 0310 	bic.w	r3, r3, #16
 80064f6:	647b      	str	r3, [r7, #68]	; 0x44
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	461a      	mov	r2, r3
 80064fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006500:	61bb      	str	r3, [r7, #24]
 8006502:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006504:	6979      	ldr	r1, [r7, #20]
 8006506:	69ba      	ldr	r2, [r7, #24]
 8006508:	e841 2300 	strex	r3, r2, [r1]
 800650c:	613b      	str	r3, [r7, #16]
   return(result);
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d1e6      	bne.n	80064e2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2220      	movs	r2, #32
 8006518:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006526:	bf00      	nop
 8006528:	3754      	adds	r7, #84	; 0x54
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr

08006532 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006532:	b580      	push	{r7, lr}
 8006534:	b084      	sub	sp, #16
 8006536:	af00      	add	r7, sp, #0
 8006538:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800653e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2200      	movs	r2, #0
 8006544:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2200      	movs	r2, #0
 800654c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006550:	68f8      	ldr	r0, [r7, #12]
 8006552:	f7ff fa43 	bl	80059dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006556:	bf00      	nop
 8006558:	3710      	adds	r7, #16
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}

0800655e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800655e:	b580      	push	{r7, lr}
 8006560:	b088      	sub	sp, #32
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	e853 3f00 	ldrex	r3, [r3]
 8006572:	60bb      	str	r3, [r7, #8]
   return(result);
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800657a:	61fb      	str	r3, [r7, #28]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	461a      	mov	r2, r3
 8006582:	69fb      	ldr	r3, [r7, #28]
 8006584:	61bb      	str	r3, [r7, #24]
 8006586:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006588:	6979      	ldr	r1, [r7, #20]
 800658a:	69ba      	ldr	r2, [r7, #24]
 800658c:	e841 2300 	strex	r3, r2, [r1]
 8006590:	613b      	str	r3, [r7, #16]
   return(result);
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d1e6      	bne.n	8006566 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2220      	movs	r2, #32
 800659c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2200      	movs	r2, #0
 80065a2:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f7ff fa0f 	bl	80059c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065aa:	bf00      	nop
 80065ac:	3720      	adds	r7, #32
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}

080065b2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80065b2:	b580      	push	{r7, lr}
 80065b4:	b096      	sub	sp, #88	; 0x58
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80065c0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065c8:	2b22      	cmp	r3, #34	; 0x22
 80065ca:	f040 8094 	bne.w	80066f6 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80065d4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80065d8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80065dc:	b2d9      	uxtb	r1, r3
 80065de:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80065e2:	b2da      	uxtb	r2, r3
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065e8:	400a      	ands	r2, r1
 80065ea:	b2d2      	uxtb	r2, r2
 80065ec:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065f2:	1c5a      	adds	r2, r3, #1
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80065fe:	b29b      	uxth	r3, r3
 8006600:	3b01      	subs	r3, #1
 8006602:	b29a      	uxth	r2, r3
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006610:	b29b      	uxth	r3, r3
 8006612:	2b00      	cmp	r3, #0
 8006614:	d179      	bne.n	800670a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800661c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800661e:	e853 3f00 	ldrex	r3, [r3]
 8006622:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006626:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800662a:	653b      	str	r3, [r7, #80]	; 0x50
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	461a      	mov	r2, r3
 8006632:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006634:	647b      	str	r3, [r7, #68]	; 0x44
 8006636:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006638:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800663a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800663c:	e841 2300 	strex	r3, r2, [r1]
 8006640:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006644:	2b00      	cmp	r3, #0
 8006646:	d1e6      	bne.n	8006616 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	3308      	adds	r3, #8
 800664e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006652:	e853 3f00 	ldrex	r3, [r3]
 8006656:	623b      	str	r3, [r7, #32]
   return(result);
 8006658:	6a3b      	ldr	r3, [r7, #32]
 800665a:	f023 0301 	bic.w	r3, r3, #1
 800665e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	3308      	adds	r3, #8
 8006666:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006668:	633a      	str	r2, [r7, #48]	; 0x30
 800666a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800666c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800666e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006670:	e841 2300 	strex	r3, r2, [r1]
 8006674:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006678:	2b00      	cmp	r3, #0
 800667a:	d1e5      	bne.n	8006648 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2220      	movs	r2, #32
 8006680:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800668c:	2b01      	cmp	r3, #1
 800668e:	d12e      	bne.n	80066ee <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	e853 3f00 	ldrex	r3, [r3]
 80066a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f023 0310 	bic.w	r3, r3, #16
 80066aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	461a      	mov	r2, r3
 80066b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066b4:	61fb      	str	r3, [r7, #28]
 80066b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b8:	69b9      	ldr	r1, [r7, #24]
 80066ba:	69fa      	ldr	r2, [r7, #28]
 80066bc:	e841 2300 	strex	r3, r2, [r1]
 80066c0:	617b      	str	r3, [r7, #20]
   return(result);
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d1e6      	bne.n	8006696 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	69db      	ldr	r3, [r3, #28]
 80066ce:	f003 0310 	and.w	r3, r3, #16
 80066d2:	2b10      	cmp	r3, #16
 80066d4:	d103      	bne.n	80066de <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	2210      	movs	r2, #16
 80066dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80066e4:	4619      	mov	r1, r3
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f7ff f982 	bl	80059f0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80066ec:	e00d      	b.n	800670a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f7fa f904 	bl	80008fc <HAL_UART_RxCpltCallback>
}
 80066f4:	e009      	b.n	800670a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	8b1b      	ldrh	r3, [r3, #24]
 80066fc:	b29a      	uxth	r2, r3
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f042 0208 	orr.w	r2, r2, #8
 8006706:	b292      	uxth	r2, r2
 8006708:	831a      	strh	r2, [r3, #24]
}
 800670a:	bf00      	nop
 800670c:	3758      	adds	r7, #88	; 0x58
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}

08006712 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006712:	b580      	push	{r7, lr}
 8006714:	b096      	sub	sp, #88	; 0x58
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006720:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006728:	2b22      	cmp	r3, #34	; 0x22
 800672a:	f040 8094 	bne.w	8006856 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006734:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800673c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800673e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006742:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006746:	4013      	ands	r3, r2
 8006748:	b29a      	uxth	r2, r3
 800674a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800674c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006752:	1c9a      	adds	r2, r3, #2
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800675e:	b29b      	uxth	r3, r3
 8006760:	3b01      	subs	r3, #1
 8006762:	b29a      	uxth	r2, r3
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006770:	b29b      	uxth	r3, r3
 8006772:	2b00      	cmp	r3, #0
 8006774:	d179      	bne.n	800686a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800677c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800677e:	e853 3f00 	ldrex	r3, [r3]
 8006782:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006786:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800678a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	461a      	mov	r2, r3
 8006792:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006794:	643b      	str	r3, [r7, #64]	; 0x40
 8006796:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006798:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800679a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800679c:	e841 2300 	strex	r3, r2, [r1]
 80067a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80067a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d1e6      	bne.n	8006776 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	3308      	adds	r3, #8
 80067ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b0:	6a3b      	ldr	r3, [r7, #32]
 80067b2:	e853 3f00 	ldrex	r3, [r3]
 80067b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80067b8:	69fb      	ldr	r3, [r7, #28]
 80067ba:	f023 0301 	bic.w	r3, r3, #1
 80067be:	64bb      	str	r3, [r7, #72]	; 0x48
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	3308      	adds	r3, #8
 80067c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80067ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067d0:	e841 2300 	strex	r3, r2, [r1]
 80067d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80067d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d1e5      	bne.n	80067a8 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2220      	movs	r2, #32
 80067e0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2200      	movs	r2, #0
 80067e6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d12e      	bne.n	800684e <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	e853 3f00 	ldrex	r3, [r3]
 8006802:	60bb      	str	r3, [r7, #8]
   return(result);
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	f023 0310 	bic.w	r3, r3, #16
 800680a:	647b      	str	r3, [r7, #68]	; 0x44
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	461a      	mov	r2, r3
 8006812:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006814:	61bb      	str	r3, [r7, #24]
 8006816:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006818:	6979      	ldr	r1, [r7, #20]
 800681a:	69ba      	ldr	r2, [r7, #24]
 800681c:	e841 2300 	strex	r3, r2, [r1]
 8006820:	613b      	str	r3, [r7, #16]
   return(result);
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d1e6      	bne.n	80067f6 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	69db      	ldr	r3, [r3, #28]
 800682e:	f003 0310 	and.w	r3, r3, #16
 8006832:	2b10      	cmp	r3, #16
 8006834:	d103      	bne.n	800683e <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	2210      	movs	r2, #16
 800683c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006844:	4619      	mov	r1, r3
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f7ff f8d2 	bl	80059f0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800684c:	e00d      	b.n	800686a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f7fa f854 	bl	80008fc <HAL_UART_RxCpltCallback>
}
 8006854:	e009      	b.n	800686a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	8b1b      	ldrh	r3, [r3, #24]
 800685c:	b29a      	uxth	r2, r3
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f042 0208 	orr.w	r2, r2, #8
 8006866:	b292      	uxth	r2, r2
 8006868:	831a      	strh	r2, [r3, #24]
}
 800686a:	bf00      	nop
 800686c:	3758      	adds	r7, #88	; 0x58
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}

08006872 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006872:	b480      	push	{r7}
 8006874:	b083      	sub	sp, #12
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800687a:	bf00      	nop
 800687c:	370c      	adds	r7, #12
 800687e:	46bd      	mov	sp, r7
 8006880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006884:	4770      	bx	lr

08006886 <memset>:
 8006886:	4402      	add	r2, r0
 8006888:	4603      	mov	r3, r0
 800688a:	4293      	cmp	r3, r2
 800688c:	d100      	bne.n	8006890 <memset+0xa>
 800688e:	4770      	bx	lr
 8006890:	f803 1b01 	strb.w	r1, [r3], #1
 8006894:	e7f9      	b.n	800688a <memset+0x4>
	...

08006898 <__libc_init_array>:
 8006898:	b570      	push	{r4, r5, r6, lr}
 800689a:	4d0d      	ldr	r5, [pc, #52]	; (80068d0 <__libc_init_array+0x38>)
 800689c:	4c0d      	ldr	r4, [pc, #52]	; (80068d4 <__libc_init_array+0x3c>)
 800689e:	1b64      	subs	r4, r4, r5
 80068a0:	10a4      	asrs	r4, r4, #2
 80068a2:	2600      	movs	r6, #0
 80068a4:	42a6      	cmp	r6, r4
 80068a6:	d109      	bne.n	80068bc <__libc_init_array+0x24>
 80068a8:	4d0b      	ldr	r5, [pc, #44]	; (80068d8 <__libc_init_array+0x40>)
 80068aa:	4c0c      	ldr	r4, [pc, #48]	; (80068dc <__libc_init_array+0x44>)
 80068ac:	f000 f818 	bl	80068e0 <_init>
 80068b0:	1b64      	subs	r4, r4, r5
 80068b2:	10a4      	asrs	r4, r4, #2
 80068b4:	2600      	movs	r6, #0
 80068b6:	42a6      	cmp	r6, r4
 80068b8:	d105      	bne.n	80068c6 <__libc_init_array+0x2e>
 80068ba:	bd70      	pop	{r4, r5, r6, pc}
 80068bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80068c0:	4798      	blx	r3
 80068c2:	3601      	adds	r6, #1
 80068c4:	e7ee      	b.n	80068a4 <__libc_init_array+0xc>
 80068c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80068ca:	4798      	blx	r3
 80068cc:	3601      	adds	r6, #1
 80068ce:	e7f2      	b.n	80068b6 <__libc_init_array+0x1e>
 80068d0:	08006948 	.word	0x08006948
 80068d4:	08006948 	.word	0x08006948
 80068d8:	08006948 	.word	0x08006948
 80068dc:	0800694c 	.word	0x0800694c

080068e0 <_init>:
 80068e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068e2:	bf00      	nop
 80068e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068e6:	bc08      	pop	{r3}
 80068e8:	469e      	mov	lr, r3
 80068ea:	4770      	bx	lr

080068ec <_fini>:
 80068ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ee:	bf00      	nop
 80068f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068f2:	bc08      	pop	{r3}
 80068f4:	469e      	mov	lr, r3
 80068f6:	4770      	bx	lr
